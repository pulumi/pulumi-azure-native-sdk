// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20241101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The identity type.
type AKSIdentityType string

const (
	AKSIdentityTypeSystemAssigned = AKSIdentityType("SystemAssigned")
	AKSIdentityTypeUserAssigned   = AKSIdentityType("UserAssigned")
)

func (AKSIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSIdentityType)(nil)).Elem()
}

func (e AKSIdentityType) ToAKSIdentityTypeOutput() AKSIdentityTypeOutput {
	return pulumi.ToOutput(e).(AKSIdentityTypeOutput)
}

func (e AKSIdentityType) ToAKSIdentityTypeOutputWithContext(ctx context.Context) AKSIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AKSIdentityTypeOutput)
}

func (e AKSIdentityType) ToAKSIdentityTypePtrOutput() AKSIdentityTypePtrOutput {
	return e.ToAKSIdentityTypePtrOutputWithContext(context.Background())
}

func (e AKSIdentityType) ToAKSIdentityTypePtrOutputWithContext(ctx context.Context) AKSIdentityTypePtrOutput {
	return AKSIdentityType(e).ToAKSIdentityTypeOutputWithContext(ctx).ToAKSIdentityTypePtrOutputWithContext(ctx)
}

func (e AKSIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AKSIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AKSIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AKSIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AKSIdentityTypeOutput struct{ *pulumi.OutputState }

func (AKSIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSIdentityType)(nil)).Elem()
}

func (o AKSIdentityTypeOutput) ToAKSIdentityTypeOutput() AKSIdentityTypeOutput {
	return o
}

func (o AKSIdentityTypeOutput) ToAKSIdentityTypeOutputWithContext(ctx context.Context) AKSIdentityTypeOutput {
	return o
}

func (o AKSIdentityTypeOutput) ToAKSIdentityTypePtrOutput() AKSIdentityTypePtrOutput {
	return o.ToAKSIdentityTypePtrOutputWithContext(context.Background())
}

func (o AKSIdentityTypeOutput) ToAKSIdentityTypePtrOutputWithContext(ctx context.Context) AKSIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AKSIdentityType) *AKSIdentityType {
		return &v
	}).(AKSIdentityTypePtrOutput)
}

func (o AKSIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AKSIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AKSIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AKSIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AKSIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AKSIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AKSIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (AKSIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AKSIdentityType)(nil)).Elem()
}

func (o AKSIdentityTypePtrOutput) ToAKSIdentityTypePtrOutput() AKSIdentityTypePtrOutput {
	return o
}

func (o AKSIdentityTypePtrOutput) ToAKSIdentityTypePtrOutputWithContext(ctx context.Context) AKSIdentityTypePtrOutput {
	return o
}

func (o AKSIdentityTypePtrOutput) Elem() AKSIdentityTypeOutput {
	return o.ApplyT(func(v *AKSIdentityType) AKSIdentityType {
		if v != nil {
			return *v
		}
		var ret AKSIdentityType
		return ret
	}).(AKSIdentityTypeOutput)
}

func (o AKSIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AKSIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AKSIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AKSIdentityTypeInput is an input type that accepts values of the AKSIdentityType enum
// A concrete instance of `AKSIdentityTypeInput` can be one of the following:
//
//	AKSIdentityTypeSystemAssigned
//	AKSIdentityTypeUserAssigned
type AKSIdentityTypeInput interface {
	pulumi.Input

	ToAKSIdentityTypeOutput() AKSIdentityTypeOutput
	ToAKSIdentityTypeOutputWithContext(context.Context) AKSIdentityTypeOutput
}

var aksidentityTypePtrType = reflect.TypeOf((**AKSIdentityType)(nil)).Elem()

type AKSIdentityTypePtrInput interface {
	pulumi.Input

	ToAKSIdentityTypePtrOutput() AKSIdentityTypePtrOutput
	ToAKSIdentityTypePtrOutputWithContext(context.Context) AKSIdentityTypePtrOutput
}

type aksidentityTypePtr string

func AKSIdentityTypePtr(v string) AKSIdentityTypePtrInput {
	return (*aksidentityTypePtr)(&v)
}

func (*aksidentityTypePtr) ElementType() reflect.Type {
	return aksidentityTypePtrType
}

func (in *aksidentityTypePtr) ToAKSIdentityTypePtrOutput() AKSIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(AKSIdentityTypePtrOutput)
}

func (in *aksidentityTypePtr) ToAKSIdentityTypePtrOutputWithContext(ctx context.Context) AKSIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AKSIdentityTypePtrOutput)
}

// Level of the status.
type LevelType string

const (
	LevelTypeError       = LevelType("Error")
	LevelTypeWarning     = LevelType("Warning")
	LevelTypeInformation = LevelType("Information")
)

func (LevelType) ElementType() reflect.Type {
	return reflect.TypeOf((*LevelType)(nil)).Elem()
}

func (e LevelType) ToLevelTypeOutput() LevelTypeOutput {
	return pulumi.ToOutput(e).(LevelTypeOutput)
}

func (e LevelType) ToLevelTypeOutputWithContext(ctx context.Context) LevelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LevelTypeOutput)
}

func (e LevelType) ToLevelTypePtrOutput() LevelTypePtrOutput {
	return e.ToLevelTypePtrOutputWithContext(context.Background())
}

func (e LevelType) ToLevelTypePtrOutputWithContext(ctx context.Context) LevelTypePtrOutput {
	return LevelType(e).ToLevelTypeOutputWithContext(ctx).ToLevelTypePtrOutputWithContext(ctx)
}

func (e LevelType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LevelType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LevelType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LevelType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LevelTypeOutput struct{ *pulumi.OutputState }

func (LevelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LevelType)(nil)).Elem()
}

func (o LevelTypeOutput) ToLevelTypeOutput() LevelTypeOutput {
	return o
}

func (o LevelTypeOutput) ToLevelTypeOutputWithContext(ctx context.Context) LevelTypeOutput {
	return o
}

func (o LevelTypeOutput) ToLevelTypePtrOutput() LevelTypePtrOutput {
	return o.ToLevelTypePtrOutputWithContext(context.Background())
}

func (o LevelTypeOutput) ToLevelTypePtrOutputWithContext(ctx context.Context) LevelTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LevelType) *LevelType {
		return &v
	}).(LevelTypePtrOutput)
}

func (o LevelTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LevelTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LevelType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LevelTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LevelTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LevelType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LevelTypePtrOutput struct{ *pulumi.OutputState }

func (LevelTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LevelType)(nil)).Elem()
}

func (o LevelTypePtrOutput) ToLevelTypePtrOutput() LevelTypePtrOutput {
	return o
}

func (o LevelTypePtrOutput) ToLevelTypePtrOutputWithContext(ctx context.Context) LevelTypePtrOutput {
	return o
}

func (o LevelTypePtrOutput) Elem() LevelTypeOutput {
	return o.ApplyT(func(v *LevelType) LevelType {
		if v != nil {
			return *v
		}
		var ret LevelType
		return ret
	}).(LevelTypeOutput)
}

func (o LevelTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LevelTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LevelType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LevelTypeInput is an input type that accepts values of the LevelType enum
// A concrete instance of `LevelTypeInput` can be one of the following:
//
//	LevelTypeError
//	LevelTypeWarning
//	LevelTypeInformation
type LevelTypeInput interface {
	pulumi.Input

	ToLevelTypeOutput() LevelTypeOutput
	ToLevelTypeOutputWithContext(context.Context) LevelTypeOutput
}

var levelTypePtrType = reflect.TypeOf((**LevelType)(nil)).Elem()

type LevelTypePtrInput interface {
	pulumi.Input

	ToLevelTypePtrOutput() LevelTypePtrOutput
	ToLevelTypePtrOutputWithContext(context.Context) LevelTypePtrOutput
}

type levelTypePtr string

func LevelTypePtr(v string) LevelTypePtrInput {
	return (*levelTypePtr)(&v)
}

func (*levelTypePtr) ElementType() reflect.Type {
	return levelTypePtrType
}

func (in *levelTypePtr) ToLevelTypePtrOutput() LevelTypePtrOutput {
	return pulumi.ToOutput(in).(LevelTypePtrOutput)
}

func (in *levelTypePtr) ToLevelTypePtrOutputWithContext(ctx context.Context) LevelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LevelTypePtrOutput)
}

// The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'.
type OperationType string

const (
	OperationTypeExtract = OperationType("extract")
	OperationTypeCopy    = OperationType("copy")
)

func (OperationType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationType)(nil)).Elem()
}

func (e OperationType) ToOperationTypeOutput() OperationTypeOutput {
	return pulumi.ToOutput(e).(OperationTypeOutput)
}

func (e OperationType) ToOperationTypeOutputWithContext(ctx context.Context) OperationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperationTypeOutput)
}

func (e OperationType) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return e.ToOperationTypePtrOutputWithContext(context.Background())
}

func (e OperationType) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return OperationType(e).ToOperationTypeOutputWithContext(ctx).ToOperationTypePtrOutputWithContext(ctx)
}

func (e OperationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperationTypeOutput struct{ *pulumi.OutputState }

func (OperationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationType)(nil)).Elem()
}

func (o OperationTypeOutput) ToOperationTypeOutput() OperationTypeOutput {
	return o
}

func (o OperationTypeOutput) ToOperationTypeOutputWithContext(ctx context.Context) OperationTypeOutput {
	return o
}

func (o OperationTypeOutput) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return o.ToOperationTypePtrOutputWithContext(context.Background())
}

func (o OperationTypeOutput) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperationType) *OperationType {
		return &v
	}).(OperationTypePtrOutput)
}

func (o OperationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperationTypePtrOutput struct{ *pulumi.OutputState }

func (OperationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationType)(nil)).Elem()
}

func (o OperationTypePtrOutput) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return o
}

func (o OperationTypePtrOutput) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return o
}

func (o OperationTypePtrOutput) Elem() OperationTypeOutput {
	return o.ApplyT(func(v *OperationType) OperationType {
		if v != nil {
			return *v
		}
		var ret OperationType
		return ret
	}).(OperationTypeOutput)
}

func (o OperationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperationTypeInput is an input type that accepts values of the OperationType enum
// A concrete instance of `OperationTypeInput` can be one of the following:
//
//	OperationTypeExtract
//	OperationTypeCopy
type OperationTypeInput interface {
	pulumi.Input

	ToOperationTypeOutput() OperationTypeOutput
	ToOperationTypeOutputWithContext(context.Context) OperationTypeOutput
}

var operationTypePtrType = reflect.TypeOf((**OperationType)(nil)).Elem()

type OperationTypePtrInput interface {
	pulumi.Input

	ToOperationTypePtrOutput() OperationTypePtrOutput
	ToOperationTypePtrOutputWithContext(context.Context) OperationTypePtrOutput
}

type operationTypePtr string

func OperationTypePtr(v string) OperationTypePtrInput {
	return (*operationTypePtr)(&v)
}

func (*operationTypePtr) ElementType() reflect.Type {
	return operationTypePtrType
}

func (in *operationTypePtr) ToOperationTypePtrOutput() OperationTypePtrOutput {
	return pulumi.ToOutput(in).(OperationTypePtrOutput)
}

func (in *operationTypePtr) ToOperationTypePtrOutputWithContext(ctx context.Context) OperationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperationTypePtrOutput)
}

// Name of the provider used for authentication.
type ProviderType string

const (
	// Azure provider can be used to authenticate to Azure DevOps repositories using Managed Identity.
	ProviderTypeAzure = ProviderType("Azure")
	// Generic is the default provider that indicates secret-based authentication mechanism.
	ProviderTypeGeneric = ProviderType("Generic")
)

func (ProviderType) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderType)(nil)).Elem()
}

func (e ProviderType) ToProviderTypeOutput() ProviderTypeOutput {
	return pulumi.ToOutput(e).(ProviderTypeOutput)
}

func (e ProviderType) ToProviderTypeOutputWithContext(ctx context.Context) ProviderTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProviderTypeOutput)
}

func (e ProviderType) ToProviderTypePtrOutput() ProviderTypePtrOutput {
	return e.ToProviderTypePtrOutputWithContext(context.Background())
}

func (e ProviderType) ToProviderTypePtrOutputWithContext(ctx context.Context) ProviderTypePtrOutput {
	return ProviderType(e).ToProviderTypeOutputWithContext(ctx).ToProviderTypePtrOutputWithContext(ctx)
}

func (e ProviderType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProviderType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProviderType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProviderType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProviderTypeOutput struct{ *pulumi.OutputState }

func (ProviderTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderType)(nil)).Elem()
}

func (o ProviderTypeOutput) ToProviderTypeOutput() ProviderTypeOutput {
	return o
}

func (o ProviderTypeOutput) ToProviderTypeOutputWithContext(ctx context.Context) ProviderTypeOutput {
	return o
}

func (o ProviderTypeOutput) ToProviderTypePtrOutput() ProviderTypePtrOutput {
	return o.ToProviderTypePtrOutputWithContext(context.Background())
}

func (o ProviderTypeOutput) ToProviderTypePtrOutputWithContext(ctx context.Context) ProviderTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderType) *ProviderType {
		return &v
	}).(ProviderTypePtrOutput)
}

func (o ProviderTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProviderTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProviderType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProviderTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProviderTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProviderType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProviderTypePtrOutput struct{ *pulumi.OutputState }

func (ProviderTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderType)(nil)).Elem()
}

func (o ProviderTypePtrOutput) ToProviderTypePtrOutput() ProviderTypePtrOutput {
	return o
}

func (o ProviderTypePtrOutput) ToProviderTypePtrOutputWithContext(ctx context.Context) ProviderTypePtrOutput {
	return o
}

func (o ProviderTypePtrOutput) Elem() ProviderTypeOutput {
	return o.ApplyT(func(v *ProviderType) ProviderType {
		if v != nil {
			return *v
		}
		var ret ProviderType
		return ret
	}).(ProviderTypeOutput)
}

func (o ProviderTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProviderTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProviderType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProviderTypeInput is an input type that accepts values of the ProviderType enum
// A concrete instance of `ProviderTypeInput` can be one of the following:
//
//	ProviderTypeAzure
//	ProviderTypeGeneric
type ProviderTypeInput interface {
	pulumi.Input

	ToProviderTypeOutput() ProviderTypeOutput
	ToProviderTypeOutputWithContext(context.Context) ProviderTypeOutput
}

var providerTypePtrType = reflect.TypeOf((**ProviderType)(nil)).Elem()

type ProviderTypePtrInput interface {
	pulumi.Input

	ToProviderTypePtrOutput() ProviderTypePtrOutput
	ToProviderTypePtrOutputWithContext(context.Context) ProviderTypePtrOutput
}

type providerTypePtr string

func ProviderTypePtr(v string) ProviderTypePtrInput {
	return (*providerTypePtr)(&v)
}

func (*providerTypePtr) ElementType() reflect.Type {
	return providerTypePtrType
}

func (in *providerTypePtr) ToProviderTypePtrOutput() ProviderTypePtrOutput {
	return pulumi.ToOutput(in).(ProviderTypePtrOutput)
}

func (in *providerTypePtr) ToProviderTypePtrOutputWithContext(ctx context.Context) ProviderTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProviderTypePtrOutput)
}

// The identity type.
type ResourceIdentityType string

const (
	ResourceIdentityTypeSystemAssigned = ResourceIdentityType("SystemAssigned")
)

func (ResourceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return e.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return ResourceIdentityType(e).ToResourceIdentityTypeOutputWithContext(ctx).ToResourceIdentityTypePtrOutputWithContext(ctx)
}

func (e ResourceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentityType) *ResourceIdentityType {
		return &v
	}).(ResourceIdentityTypePtrOutput)
}

func (o ResourceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) Elem() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v *ResourceIdentityType) ResourceIdentityType {
		if v != nil {
			return *v
		}
		var ret ResourceIdentityType
		return ret
	}).(ResourceIdentityTypeOutput)
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceIdentityTypeInput is an input type that accepts values of the ResourceIdentityType enum
// A concrete instance of `ResourceIdentityTypeInput` can be one of the following:
//
//	ResourceIdentityTypeSystemAssigned
type ResourceIdentityTypeInput interface {
	pulumi.Input

	ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput
	ToResourceIdentityTypeOutputWithContext(context.Context) ResourceIdentityTypeOutput
}

var resourceIdentityTypePtrType = reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()

type ResourceIdentityTypePtrInput interface {
	pulumi.Input

	ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput
	ToResourceIdentityTypePtrOutputWithContext(context.Context) ResourceIdentityTypePtrOutput
}

type resourceIdentityTypePtr string

func ResourceIdentityTypePtr(v string) ResourceIdentityTypePtrInput {
	return (*resourceIdentityTypePtr)(&v)
}

func (*resourceIdentityTypePtr) ElementType() reflect.Type {
	return resourceIdentityTypePtrType
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceIdentityTypePtrOutput)
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceIdentityTypePtrOutput)
}

// Scope at which the operator will be installed.
type ScopeType string

const (
	ScopeTypeCluster   = ScopeType("cluster")
	ScopeTypeNamespace = ScopeType("namespace")
)

func (ScopeType) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeType)(nil)).Elem()
}

func (e ScopeType) ToScopeTypeOutput() ScopeTypeOutput {
	return pulumi.ToOutput(e).(ScopeTypeOutput)
}

func (e ScopeType) ToScopeTypeOutputWithContext(ctx context.Context) ScopeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScopeTypeOutput)
}

func (e ScopeType) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return e.ToScopeTypePtrOutputWithContext(context.Background())
}

func (e ScopeType) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return ScopeType(e).ToScopeTypeOutputWithContext(ctx).ToScopeTypePtrOutputWithContext(ctx)
}

func (e ScopeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScopeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScopeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScopeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScopeTypeOutput struct{ *pulumi.OutputState }

func (ScopeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeType)(nil)).Elem()
}

func (o ScopeTypeOutput) ToScopeTypeOutput() ScopeTypeOutput {
	return o
}

func (o ScopeTypeOutput) ToScopeTypeOutputWithContext(ctx context.Context) ScopeTypeOutput {
	return o
}

func (o ScopeTypeOutput) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return o.ToScopeTypePtrOutputWithContext(context.Background())
}

func (o ScopeTypeOutput) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScopeType) *ScopeType {
		return &v
	}).(ScopeTypePtrOutput)
}

func (o ScopeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScopeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScopeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScopeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScopeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScopeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScopeTypePtrOutput struct{ *pulumi.OutputState }

func (ScopeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeType)(nil)).Elem()
}

func (o ScopeTypePtrOutput) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return o
}

func (o ScopeTypePtrOutput) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return o
}

func (o ScopeTypePtrOutput) Elem() ScopeTypeOutput {
	return o.ApplyT(func(v *ScopeType) ScopeType {
		if v != nil {
			return *v
		}
		var ret ScopeType
		return ret
	}).(ScopeTypeOutput)
}

func (o ScopeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScopeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScopeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScopeTypeInput is an input type that accepts values of the ScopeType enum
// A concrete instance of `ScopeTypeInput` can be one of the following:
//
//	ScopeTypeCluster
//	ScopeTypeNamespace
type ScopeTypeInput interface {
	pulumi.Input

	ToScopeTypeOutput() ScopeTypeOutput
	ToScopeTypeOutputWithContext(context.Context) ScopeTypeOutput
}

var scopeTypePtrType = reflect.TypeOf((**ScopeType)(nil)).Elem()

type ScopeTypePtrInput interface {
	pulumi.Input

	ToScopeTypePtrOutput() ScopeTypePtrOutput
	ToScopeTypePtrOutputWithContext(context.Context) ScopeTypePtrOutput
}

type scopeTypePtr string

func ScopeTypePtr(v string) ScopeTypePtrInput {
	return (*scopeTypePtr)(&v)
}

func (*scopeTypePtr) ElementType() reflect.Type {
	return scopeTypePtrType
}

func (in *scopeTypePtr) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return pulumi.ToOutput(in).(ScopeTypePtrOutput)
}

func (in *scopeTypePtr) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScopeTypePtrOutput)
}

// Source Kind to pull the configuration data from.
type SourceKindType string

const (
	SourceKindTypeGitRepository = SourceKindType("GitRepository")
	SourceKindTypeBucket        = SourceKindType("Bucket")
	SourceKindTypeAzureBlob     = SourceKindType("AzureBlob")
	SourceKindTypeOCIRepository = SourceKindType("OCIRepository")
)

func (SourceKindType) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKindType)(nil)).Elem()
}

func (e SourceKindType) ToSourceKindTypeOutput() SourceKindTypeOutput {
	return pulumi.ToOutput(e).(SourceKindTypeOutput)
}

func (e SourceKindType) ToSourceKindTypeOutputWithContext(ctx context.Context) SourceKindTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceKindTypeOutput)
}

func (e SourceKindType) ToSourceKindTypePtrOutput() SourceKindTypePtrOutput {
	return e.ToSourceKindTypePtrOutputWithContext(context.Background())
}

func (e SourceKindType) ToSourceKindTypePtrOutputWithContext(ctx context.Context) SourceKindTypePtrOutput {
	return SourceKindType(e).ToSourceKindTypeOutputWithContext(ctx).ToSourceKindTypePtrOutputWithContext(ctx)
}

func (e SourceKindType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceKindType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceKindType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SourceKindType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceKindTypeOutput struct{ *pulumi.OutputState }

func (SourceKindTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceKindType)(nil)).Elem()
}

func (o SourceKindTypeOutput) ToSourceKindTypeOutput() SourceKindTypeOutput {
	return o
}

func (o SourceKindTypeOutput) ToSourceKindTypeOutputWithContext(ctx context.Context) SourceKindTypeOutput {
	return o
}

func (o SourceKindTypeOutput) ToSourceKindTypePtrOutput() SourceKindTypePtrOutput {
	return o.ToSourceKindTypePtrOutputWithContext(context.Background())
}

func (o SourceKindTypeOutput) ToSourceKindTypePtrOutputWithContext(ctx context.Context) SourceKindTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceKindType) *SourceKindType {
		return &v
	}).(SourceKindTypePtrOutput)
}

func (o SourceKindTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceKindTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceKindType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceKindTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceKindTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceKindType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourceKindTypePtrOutput struct{ *pulumi.OutputState }

func (SourceKindTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceKindType)(nil)).Elem()
}

func (o SourceKindTypePtrOutput) ToSourceKindTypePtrOutput() SourceKindTypePtrOutput {
	return o
}

func (o SourceKindTypePtrOutput) ToSourceKindTypePtrOutputWithContext(ctx context.Context) SourceKindTypePtrOutput {
	return o
}

func (o SourceKindTypePtrOutput) Elem() SourceKindTypeOutput {
	return o.ApplyT(func(v *SourceKindType) SourceKindType {
		if v != nil {
			return *v
		}
		var ret SourceKindType
		return ret
	}).(SourceKindTypeOutput)
}

func (o SourceKindTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceKindTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SourceKindType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SourceKindTypeInput is an input type that accepts values of the SourceKindType enum
// A concrete instance of `SourceKindTypeInput` can be one of the following:
//
//	SourceKindTypeGitRepository
//	SourceKindTypeBucket
//	SourceKindTypeAzureBlob
//	SourceKindTypeOCIRepository
type SourceKindTypeInput interface {
	pulumi.Input

	ToSourceKindTypeOutput() SourceKindTypeOutput
	ToSourceKindTypeOutputWithContext(context.Context) SourceKindTypeOutput
}

var sourceKindTypePtrType = reflect.TypeOf((**SourceKindType)(nil)).Elem()

type SourceKindTypePtrInput interface {
	pulumi.Input

	ToSourceKindTypePtrOutput() SourceKindTypePtrOutput
	ToSourceKindTypePtrOutputWithContext(context.Context) SourceKindTypePtrOutput
}

type sourceKindTypePtr string

func SourceKindTypePtr(v string) SourceKindTypePtrInput {
	return (*sourceKindTypePtr)(&v)
}

func (*sourceKindTypePtr) ElementType() reflect.Type {
	return sourceKindTypePtrType
}

func (in *sourceKindTypePtr) ToSourceKindTypePtrOutput() SourceKindTypePtrOutput {
	return pulumi.ToOutput(in).(SourceKindTypePtrOutput)
}

func (in *sourceKindTypePtr) ToSourceKindTypePtrOutputWithContext(ctx context.Context) SourceKindTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourceKindTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AKSIdentityTypeOutput{})
	pulumi.RegisterOutputType(AKSIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(LevelTypeOutput{})
	pulumi.RegisterOutputType(LevelTypePtrOutput{})
	pulumi.RegisterOutputType(OperationTypeOutput{})
	pulumi.RegisterOutputType(OperationTypePtrOutput{})
	pulumi.RegisterOutputType(ProviderTypeOutput{})
	pulumi.RegisterOutputType(ProviderTypePtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(ScopeTypeOutput{})
	pulumi.RegisterOutputType(ScopeTypePtrOutput{})
	pulumi.RegisterOutputType(SourceKindTypeOutput{})
	pulumi.RegisterOutputType(SourceKindTypePtrOutput{})
}
