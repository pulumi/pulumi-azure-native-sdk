// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Specify which kustomizations must succeed reconciliation on the cluster prior to reconciling this kustomization
type DependsOnDefinition struct {
	// Name of the kustomization to claim dependency on
	KustomizationName *string `pulumi:"kustomizationName"`
}

// DependsOnDefinitionInput is an input type that accepts DependsOnDefinitionArgs and DependsOnDefinitionOutput values.
// You can construct a concrete instance of `DependsOnDefinitionInput` via:
//
//	DependsOnDefinitionArgs{...}
type DependsOnDefinitionInput interface {
	pulumi.Input

	ToDependsOnDefinitionOutput() DependsOnDefinitionOutput
	ToDependsOnDefinitionOutputWithContext(context.Context) DependsOnDefinitionOutput
}

// Specify which kustomizations must succeed reconciliation on the cluster prior to reconciling this kustomization
type DependsOnDefinitionArgs struct {
	// Name of the kustomization to claim dependency on
	KustomizationName pulumi.StringPtrInput `pulumi:"kustomizationName"`
}

func (DependsOnDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DependsOnDefinition)(nil)).Elem()
}

func (i DependsOnDefinitionArgs) ToDependsOnDefinitionOutput() DependsOnDefinitionOutput {
	return i.ToDependsOnDefinitionOutputWithContext(context.Background())
}

func (i DependsOnDefinitionArgs) ToDependsOnDefinitionOutputWithContext(ctx context.Context) DependsOnDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DependsOnDefinitionOutput)
}

func (i DependsOnDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[DependsOnDefinition] {
	return pulumix.Output[DependsOnDefinition]{
		OutputState: i.ToDependsOnDefinitionOutputWithContext(ctx).OutputState,
	}
}

// DependsOnDefinitionArrayInput is an input type that accepts DependsOnDefinitionArray and DependsOnDefinitionArrayOutput values.
// You can construct a concrete instance of `DependsOnDefinitionArrayInput` via:
//
//	DependsOnDefinitionArray{ DependsOnDefinitionArgs{...} }
type DependsOnDefinitionArrayInput interface {
	pulumi.Input

	ToDependsOnDefinitionArrayOutput() DependsOnDefinitionArrayOutput
	ToDependsOnDefinitionArrayOutputWithContext(context.Context) DependsOnDefinitionArrayOutput
}

type DependsOnDefinitionArray []DependsOnDefinitionInput

func (DependsOnDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DependsOnDefinition)(nil)).Elem()
}

func (i DependsOnDefinitionArray) ToDependsOnDefinitionArrayOutput() DependsOnDefinitionArrayOutput {
	return i.ToDependsOnDefinitionArrayOutputWithContext(context.Background())
}

func (i DependsOnDefinitionArray) ToDependsOnDefinitionArrayOutputWithContext(ctx context.Context) DependsOnDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DependsOnDefinitionArrayOutput)
}

func (i DependsOnDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]DependsOnDefinition] {
	return pulumix.Output[[]DependsOnDefinition]{
		OutputState: i.ToDependsOnDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

// Specify which kustomizations must succeed reconciliation on the cluster prior to reconciling this kustomization
type DependsOnDefinitionOutput struct{ *pulumi.OutputState }

func (DependsOnDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DependsOnDefinition)(nil)).Elem()
}

func (o DependsOnDefinitionOutput) ToDependsOnDefinitionOutput() DependsOnDefinitionOutput {
	return o
}

func (o DependsOnDefinitionOutput) ToDependsOnDefinitionOutputWithContext(ctx context.Context) DependsOnDefinitionOutput {
	return o
}

func (o DependsOnDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[DependsOnDefinition] {
	return pulumix.Output[DependsOnDefinition]{
		OutputState: o.OutputState,
	}
}

// Name of the kustomization to claim dependency on
func (o DependsOnDefinitionOutput) KustomizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependsOnDefinition) *string { return v.KustomizationName }).(pulumi.StringPtrOutput)
}

type DependsOnDefinitionArrayOutput struct{ *pulumi.OutputState }

func (DependsOnDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DependsOnDefinition)(nil)).Elem()
}

func (o DependsOnDefinitionArrayOutput) ToDependsOnDefinitionArrayOutput() DependsOnDefinitionArrayOutput {
	return o
}

func (o DependsOnDefinitionArrayOutput) ToDependsOnDefinitionArrayOutputWithContext(ctx context.Context) DependsOnDefinitionArrayOutput {
	return o
}

func (o DependsOnDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DependsOnDefinition] {
	return pulumix.Output[[]DependsOnDefinition]{
		OutputState: o.OutputState,
	}
}

func (o DependsOnDefinitionArrayOutput) Index(i pulumi.IntInput) DependsOnDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DependsOnDefinition {
		return vs[0].([]DependsOnDefinition)[vs[1].(int)]
	}).(DependsOnDefinitionOutput)
}

// Specify which kustomizations must succeed reconciliation on the cluster prior to reconciling this kustomization
type DependsOnDefinitionResponse struct {
	// Name of the kustomization to claim dependency on
	KustomizationName *string `pulumi:"kustomizationName"`
}

// Specify which kustomizations must succeed reconciliation on the cluster prior to reconciling this kustomization
type DependsOnDefinitionResponseOutput struct{ *pulumi.OutputState }

func (DependsOnDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DependsOnDefinitionResponse)(nil)).Elem()
}

func (o DependsOnDefinitionResponseOutput) ToDependsOnDefinitionResponseOutput() DependsOnDefinitionResponseOutput {
	return o
}

func (o DependsOnDefinitionResponseOutput) ToDependsOnDefinitionResponseOutputWithContext(ctx context.Context) DependsOnDefinitionResponseOutput {
	return o
}

func (o DependsOnDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DependsOnDefinitionResponse] {
	return pulumix.Output[DependsOnDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the kustomization to claim dependency on
func (o DependsOnDefinitionResponseOutput) KustomizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependsOnDefinitionResponse) *string { return v.KustomizationName }).(pulumi.StringPtrOutput)
}

type DependsOnDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (DependsOnDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DependsOnDefinitionResponse)(nil)).Elem()
}

func (o DependsOnDefinitionResponseArrayOutput) ToDependsOnDefinitionResponseArrayOutput() DependsOnDefinitionResponseArrayOutput {
	return o
}

func (o DependsOnDefinitionResponseArrayOutput) ToDependsOnDefinitionResponseArrayOutputWithContext(ctx context.Context) DependsOnDefinitionResponseArrayOutput {
	return o
}

func (o DependsOnDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DependsOnDefinitionResponse] {
	return pulumix.Output[[]DependsOnDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o DependsOnDefinitionResponseArrayOutput) Index(i pulumi.IntInput) DependsOnDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DependsOnDefinitionResponse {
		return vs[0].([]DependsOnDefinitionResponse)[vs[1].(int)]
	}).(DependsOnDefinitionResponseOutput)
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinition struct {
	// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
	HttpsCAFile *string `pulumi:"httpsCAFile"`
	// Base64-encoded HTTPS username used to access private git repositories over HTTPS
	HttpsUser *string `pulumi:"httpsUser"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// The source reference for the GitRepository object.
	RepositoryRef *RepositoryRefDefinition `pulumi:"repositoryRef"`
	// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
	SshKnownHosts *string `pulumi:"sshKnownHosts"`
	// The interval at which to re-reconcile the cluster git repository source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster git repository source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration git repository.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for GitRepositoryDefinition
func (val *GitRepositoryDefinition) Defaults() *GitRepositoryDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// GitRepositoryDefinitionInput is an input type that accepts GitRepositoryDefinitionArgs and GitRepositoryDefinitionOutput values.
// You can construct a concrete instance of `GitRepositoryDefinitionInput` via:
//
//	GitRepositoryDefinitionArgs{...}
type GitRepositoryDefinitionInput interface {
	pulumi.Input

	ToGitRepositoryDefinitionOutput() GitRepositoryDefinitionOutput
	ToGitRepositoryDefinitionOutputWithContext(context.Context) GitRepositoryDefinitionOutput
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionArgs struct {
	// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
	HttpsCAFile pulumi.StringPtrInput `pulumi:"httpsCAFile"`
	// Base64-encoded HTTPS username used to access private git repositories over HTTPS
	HttpsUser pulumi.StringPtrInput `pulumi:"httpsUser"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef pulumi.StringPtrInput `pulumi:"localAuthRef"`
	// The source reference for the GitRepository object.
	RepositoryRef RepositoryRefDefinitionPtrInput `pulumi:"repositoryRef"`
	// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
	SshKnownHosts pulumi.StringPtrInput `pulumi:"sshKnownHosts"`
	// The interval at which to re-reconcile the cluster git repository source with the remote.
	SyncIntervalInSeconds pulumi.Float64PtrInput `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster git repository source with the remote.
	TimeoutInSeconds pulumi.Float64PtrInput `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration git repository.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for GitRepositoryDefinitionArgs
func (val *GitRepositoryDefinitionArgs) Defaults() *GitRepositoryDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SyncIntervalInSeconds == nil {
		tmp.SyncIntervalInSeconds = pulumi.Float64Ptr(600.0)
	}
	if tmp.TimeoutInSeconds == nil {
		tmp.TimeoutInSeconds = pulumi.Float64Ptr(600.0)
	}
	return &tmp
}
func (GitRepositoryDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryDefinition)(nil)).Elem()
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionOutput() GitRepositoryDefinitionOutput {
	return i.ToGitRepositoryDefinitionOutputWithContext(context.Background())
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionOutputWithContext(ctx context.Context) GitRepositoryDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryDefinitionOutput)
}

func (i GitRepositoryDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[GitRepositoryDefinition] {
	return pulumix.Output[GitRepositoryDefinition]{
		OutputState: i.ToGitRepositoryDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return i.ToGitRepositoryDefinitionPtrOutputWithContext(context.Background())
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryDefinitionOutput).ToGitRepositoryDefinitionPtrOutputWithContext(ctx)
}

// GitRepositoryDefinitionPtrInput is an input type that accepts GitRepositoryDefinitionArgs, GitRepositoryDefinitionPtr and GitRepositoryDefinitionPtrOutput values.
// You can construct a concrete instance of `GitRepositoryDefinitionPtrInput` via:
//
//	        GitRepositoryDefinitionArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryDefinitionPtrInput interface {
	pulumi.Input

	ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput
	ToGitRepositoryDefinitionPtrOutputWithContext(context.Context) GitRepositoryDefinitionPtrOutput
}

type gitRepositoryDefinitionPtrType GitRepositoryDefinitionArgs

func GitRepositoryDefinitionPtr(v *GitRepositoryDefinitionArgs) GitRepositoryDefinitionPtrInput {
	return (*gitRepositoryDefinitionPtrType)(v)
}

func (*gitRepositoryDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryDefinition)(nil)).Elem()
}

func (i *gitRepositoryDefinitionPtrType) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return i.ToGitRepositoryDefinitionPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryDefinitionPtrType) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryDefinitionPtrOutput)
}

func (i *gitRepositoryDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*GitRepositoryDefinition] {
	return pulumix.Output[*GitRepositoryDefinition]{
		OutputState: i.ToGitRepositoryDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryDefinition)(nil)).Elem()
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionOutput() GitRepositoryDefinitionOutput {
	return o
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionOutputWithContext(ctx context.Context) GitRepositoryDefinitionOutput {
	return o
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return o.ToGitRepositoryDefinitionPtrOutputWithContext(context.Background())
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryDefinition) *GitRepositoryDefinition {
		return &v
	}).(GitRepositoryDefinitionPtrOutput)
}

func (o GitRepositoryDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[GitRepositoryDefinition] {
	return pulumix.Output[GitRepositoryDefinition]{
		OutputState: o.OutputState,
	}
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionOutput) HttpsCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.HttpsCAFile }).(pulumi.StringPtrOutput)
}

// Base64-encoded HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.HttpsUser }).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionOutput) RepositoryRef() RepositoryRefDefinitionPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *RepositoryRefDefinition { return v.RepositoryRef }).(RepositoryRefDefinitionPtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.SshKnownHosts }).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryDefinitionPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryDefinition)(nil)).Elem()
}

func (o GitRepositoryDefinitionPtrOutput) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return o
}

func (o GitRepositoryDefinitionPtrOutput) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return o
}

func (o GitRepositoryDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitRepositoryDefinition] {
	return pulumix.Output[*GitRepositoryDefinition]{
		OutputState: o.OutputState,
	}
}

func (o GitRepositoryDefinitionPtrOutput) Elem() GitRepositoryDefinitionOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) GitRepositoryDefinition {
		if v != nil {
			return *v
		}
		var ret GitRepositoryDefinition
		return ret
	}).(GitRepositoryDefinitionOutput)
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionPtrOutput) HttpsCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.HttpsCAFile
	}).(pulumi.StringPtrOutput)
}

// Base64-encoded HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionPtrOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.HttpsUser
	}).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionPtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionPtrOutput) RepositoryRef() RepositoryRefDefinitionPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *RepositoryRefDefinition {
		if v == nil {
			return nil
		}
		return v.RepositoryRef
	}).(RepositoryRefDefinitionPtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionPtrOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.SshKnownHosts
	}).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionPtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionPtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionResponse struct {
	// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
	HttpsCAFile *string `pulumi:"httpsCAFile"`
	// Base64-encoded HTTPS username used to access private git repositories over HTTPS
	HttpsUser *string `pulumi:"httpsUser"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// The source reference for the GitRepository object.
	RepositoryRef *RepositoryRefDefinitionResponse `pulumi:"repositoryRef"`
	// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
	SshKnownHosts *string `pulumi:"sshKnownHosts"`
	// The interval at which to re-reconcile the cluster git repository source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster git repository source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration git repository.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for GitRepositoryDefinitionResponse
func (val *GitRepositoryDefinitionResponse) Defaults() *GitRepositoryDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionResponseOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryDefinitionResponse)(nil)).Elem()
}

func (o GitRepositoryDefinitionResponseOutput) ToGitRepositoryDefinitionResponseOutput() GitRepositoryDefinitionResponseOutput {
	return o
}

func (o GitRepositoryDefinitionResponseOutput) ToGitRepositoryDefinitionResponseOutputWithContext(ctx context.Context) GitRepositoryDefinitionResponseOutput {
	return o
}

func (o GitRepositoryDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GitRepositoryDefinitionResponse] {
	return pulumix.Output[GitRepositoryDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionResponseOutput) HttpsCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.HttpsCAFile }).(pulumi.StringPtrOutput)
}

// Base64-encoded HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionResponseOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.HttpsUser }).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionResponseOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionResponseOutput) RepositoryRef() RepositoryRefDefinitionResponsePtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *RepositoryRefDefinitionResponse { return v.RepositoryRef }).(RepositoryRefDefinitionResponsePtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionResponseOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.SshKnownHosts }).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponseOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponseOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryDefinitionResponse)(nil)).Elem()
}

func (o GitRepositoryDefinitionResponsePtrOutput) ToGitRepositoryDefinitionResponsePtrOutput() GitRepositoryDefinitionResponsePtrOutput {
	return o
}

func (o GitRepositoryDefinitionResponsePtrOutput) ToGitRepositoryDefinitionResponsePtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionResponsePtrOutput {
	return o
}

func (o GitRepositoryDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitRepositoryDefinitionResponse] {
	return pulumix.Output[*GitRepositoryDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o GitRepositoryDefinitionResponsePtrOutput) Elem() GitRepositoryDefinitionResponseOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) GitRepositoryDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret GitRepositoryDefinitionResponse
		return ret
	}).(GitRepositoryDefinitionResponseOutput)
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionResponsePtrOutput) HttpsCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpsCAFile
	}).(pulumi.StringPtrOutput)
}

// Base64-encoded HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionResponsePtrOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpsUser
	}).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionResponsePtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionResponsePtrOutput) RepositoryRef() RepositoryRefDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *RepositoryRefDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.RepositoryRef
	}).(RepositoryRefDefinitionResponsePtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionResponsePtrOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SshKnownHosts
	}).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponsePtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponsePtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type HelmReleasePropertiesDefinitionResponse struct {
	// Total number of times that the HelmRelease failed to install or upgrade
	FailureCount *float64 `pulumi:"failureCount"`
	// The reference to the HelmChart object used as the source to this HelmRelease
	HelmChartRef *ObjectReferenceDefinitionResponse `pulumi:"helmChartRef"`
	// Number of times that the HelmRelease failed to install
	InstallFailureCount *float64 `pulumi:"installFailureCount"`
	// The revision number of the last released object change
	LastRevisionApplied *float64 `pulumi:"lastRevisionApplied"`
	// Number of times that the HelmRelease failed to upgrade
	UpgradeFailureCount *float64 `pulumi:"upgradeFailureCount"`
}

type HelmReleasePropertiesDefinitionResponseOutput struct{ *pulumi.OutputState }

func (HelmReleasePropertiesDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleasePropertiesDefinitionResponse)(nil)).Elem()
}

func (o HelmReleasePropertiesDefinitionResponseOutput) ToHelmReleasePropertiesDefinitionResponseOutput() HelmReleasePropertiesDefinitionResponseOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponseOutput) ToHelmReleasePropertiesDefinitionResponseOutputWithContext(ctx context.Context) HelmReleasePropertiesDefinitionResponseOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HelmReleasePropertiesDefinitionResponse] {
	return pulumix.Output[HelmReleasePropertiesDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Total number of times that the HelmRelease failed to install or upgrade
func (o HelmReleasePropertiesDefinitionResponseOutput) FailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.FailureCount }).(pulumi.Float64PtrOutput)
}

// The reference to the HelmChart object used as the source to this HelmRelease
func (o HelmReleasePropertiesDefinitionResponseOutput) HelmChartRef() ObjectReferenceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *ObjectReferenceDefinitionResponse {
		return v.HelmChartRef
	}).(ObjectReferenceDefinitionResponsePtrOutput)
}

// Number of times that the HelmRelease failed to install
func (o HelmReleasePropertiesDefinitionResponseOutput) InstallFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.InstallFailureCount }).(pulumi.Float64PtrOutput)
}

// The revision number of the last released object change
func (o HelmReleasePropertiesDefinitionResponseOutput) LastRevisionApplied() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.LastRevisionApplied }).(pulumi.Float64PtrOutput)
}

// Number of times that the HelmRelease failed to upgrade
func (o HelmReleasePropertiesDefinitionResponseOutput) UpgradeFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.UpgradeFailureCount }).(pulumi.Float64PtrOutput)
}

type HelmReleasePropertiesDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (HelmReleasePropertiesDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleasePropertiesDefinitionResponse)(nil)).Elem()
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) ToHelmReleasePropertiesDefinitionResponsePtrOutput() HelmReleasePropertiesDefinitionResponsePtrOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) ToHelmReleasePropertiesDefinitionResponsePtrOutputWithContext(ctx context.Context) HelmReleasePropertiesDefinitionResponsePtrOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HelmReleasePropertiesDefinitionResponse] {
	return pulumix.Output[*HelmReleasePropertiesDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) Elem() HelmReleasePropertiesDefinitionResponseOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) HelmReleasePropertiesDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret HelmReleasePropertiesDefinitionResponse
		return ret
	}).(HelmReleasePropertiesDefinitionResponseOutput)
}

// Total number of times that the HelmRelease failed to install or upgrade
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) FailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.FailureCount
	}).(pulumi.Float64PtrOutput)
}

// The reference to the HelmChart object used as the source to this HelmRelease
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) HelmChartRef() ObjectReferenceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *ObjectReferenceDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.HelmChartRef
	}).(ObjectReferenceDefinitionResponsePtrOutput)
}

// Number of times that the HelmRelease failed to install
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) InstallFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.InstallFailureCount
	}).(pulumi.Float64PtrOutput)
}

// The revision number of the last released object change
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) LastRevisionApplied() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LastRevisionApplied
	}).(pulumi.Float64PtrOutput)
}

// Number of times that the HelmRelease failed to upgrade
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) UpgradeFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.UpgradeFailureCount
	}).(pulumi.Float64PtrOutput)
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinition struct {
	// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
	DependsOn []DependsOnDefinition `pulumi:"dependsOn"`
	// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
	Force *bool `pulumi:"force"`
	// The path in the source reference to reconcile on the cluster.
	Path *string `pulumi:"path"`
	// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
	Prune *bool `pulumi:"prune"`
	// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
	RetryIntervalInSeconds *float64 `pulumi:"retryIntervalInSeconds"`
	// The interval at which to re-reconcile the Kustomization on the cluster.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the Kustomization on the cluster.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// Specify whether to validate the Kubernetes objects referenced in the Kustomization before applying them to the cluster.
	Validation *string `pulumi:"validation"`
}

// Defaults sets the appropriate defaults for KustomizationDefinition
func (val *KustomizationDefinition) Defaults() *KustomizationDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Force == nil {
		force_ := false
		tmp.Force = &force_
	}
	if tmp.Path == nil {
		path_ := ""
		tmp.Path = &path_
	}
	if tmp.Prune == nil {
		prune_ := false
		tmp.Prune = &prune_
	}
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// KustomizationDefinitionInput is an input type that accepts KustomizationDefinitionArgs and KustomizationDefinitionOutput values.
// You can construct a concrete instance of `KustomizationDefinitionInput` via:
//
//	KustomizationDefinitionArgs{...}
type KustomizationDefinitionInput interface {
	pulumi.Input

	ToKustomizationDefinitionOutput() KustomizationDefinitionOutput
	ToKustomizationDefinitionOutputWithContext(context.Context) KustomizationDefinitionOutput
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionArgs struct {
	// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
	DependsOn DependsOnDefinitionArrayInput `pulumi:"dependsOn"`
	// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// The path in the source reference to reconcile on the cluster.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
	Prune pulumi.BoolPtrInput `pulumi:"prune"`
	// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
	RetryIntervalInSeconds pulumi.Float64PtrInput `pulumi:"retryIntervalInSeconds"`
	// The interval at which to re-reconcile the Kustomization on the cluster.
	SyncIntervalInSeconds pulumi.Float64PtrInput `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the Kustomization on the cluster.
	TimeoutInSeconds pulumi.Float64PtrInput `pulumi:"timeoutInSeconds"`
	// Specify whether to validate the Kubernetes objects referenced in the Kustomization before applying them to the cluster.
	Validation pulumi.StringPtrInput `pulumi:"validation"`
}

// Defaults sets the appropriate defaults for KustomizationDefinitionArgs
func (val *KustomizationDefinitionArgs) Defaults() *KustomizationDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Force == nil {
		tmp.Force = pulumi.BoolPtr(false)
	}
	if tmp.Path == nil {
		tmp.Path = pulumi.StringPtr("")
	}
	if tmp.Prune == nil {
		tmp.Prune = pulumi.BoolPtr(false)
	}
	if tmp.SyncIntervalInSeconds == nil {
		tmp.SyncIntervalInSeconds = pulumi.Float64Ptr(600.0)
	}
	if tmp.TimeoutInSeconds == nil {
		tmp.TimeoutInSeconds = pulumi.Float64Ptr(600.0)
	}
	return &tmp
}
func (KustomizationDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KustomizationDefinition)(nil)).Elem()
}

func (i KustomizationDefinitionArgs) ToKustomizationDefinitionOutput() KustomizationDefinitionOutput {
	return i.ToKustomizationDefinitionOutputWithContext(context.Background())
}

func (i KustomizationDefinitionArgs) ToKustomizationDefinitionOutputWithContext(ctx context.Context) KustomizationDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KustomizationDefinitionOutput)
}

func (i KustomizationDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[KustomizationDefinition] {
	return pulumix.Output[KustomizationDefinition]{
		OutputState: i.ToKustomizationDefinitionOutputWithContext(ctx).OutputState,
	}
}

// KustomizationDefinitionMapInput is an input type that accepts KustomizationDefinitionMap and KustomizationDefinitionMapOutput values.
// You can construct a concrete instance of `KustomizationDefinitionMapInput` via:
//
//	KustomizationDefinitionMap{ "key": KustomizationDefinitionArgs{...} }
type KustomizationDefinitionMapInput interface {
	pulumi.Input

	ToKustomizationDefinitionMapOutput() KustomizationDefinitionMapOutput
	ToKustomizationDefinitionMapOutputWithContext(context.Context) KustomizationDefinitionMapOutput
}

type KustomizationDefinitionMap map[string]KustomizationDefinitionInput

func (KustomizationDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KustomizationDefinition)(nil)).Elem()
}

func (i KustomizationDefinitionMap) ToKustomizationDefinitionMapOutput() KustomizationDefinitionMapOutput {
	return i.ToKustomizationDefinitionMapOutputWithContext(context.Background())
}

func (i KustomizationDefinitionMap) ToKustomizationDefinitionMapOutputWithContext(ctx context.Context) KustomizationDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KustomizationDefinitionMapOutput)
}

func (i KustomizationDefinitionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]KustomizationDefinition] {
	return pulumix.Output[map[string]KustomizationDefinition]{
		OutputState: i.ToKustomizationDefinitionMapOutputWithContext(ctx).OutputState,
	}
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KustomizationDefinition)(nil)).Elem()
}

func (o KustomizationDefinitionOutput) ToKustomizationDefinitionOutput() KustomizationDefinitionOutput {
	return o
}

func (o KustomizationDefinitionOutput) ToKustomizationDefinitionOutputWithContext(ctx context.Context) KustomizationDefinitionOutput {
	return o
}

func (o KustomizationDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[KustomizationDefinition] {
	return pulumix.Output[KustomizationDefinition]{
		OutputState: o.OutputState,
	}
}

// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
func (o KustomizationDefinitionOutput) DependsOn() DependsOnDefinitionArrayOutput {
	return o.ApplyT(func(v KustomizationDefinition) []DependsOnDefinition { return v.DependsOn }).(DependsOnDefinitionArrayOutput)
}

// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
func (o KustomizationDefinitionOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// The path in the source reference to reconcile on the cluster.
func (o KustomizationDefinitionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
func (o KustomizationDefinitionOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *bool { return v.Prune }).(pulumi.BoolPtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
func (o KustomizationDefinitionOutput) RetryIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *float64 { return v.RetryIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// Specify whether to validate the Kubernetes objects referenced in the Kustomization before applying them to the cluster.
func (o KustomizationDefinitionOutput) Validation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *string { return v.Validation }).(pulumi.StringPtrOutput)
}

type KustomizationDefinitionMapOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KustomizationDefinition)(nil)).Elem()
}

func (o KustomizationDefinitionMapOutput) ToKustomizationDefinitionMapOutput() KustomizationDefinitionMapOutput {
	return o
}

func (o KustomizationDefinitionMapOutput) ToKustomizationDefinitionMapOutputWithContext(ctx context.Context) KustomizationDefinitionMapOutput {
	return o
}

func (o KustomizationDefinitionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]KustomizationDefinition] {
	return pulumix.Output[map[string]KustomizationDefinition]{
		OutputState: o.OutputState,
	}
}

func (o KustomizationDefinitionMapOutput) MapIndex(k pulumi.StringInput) KustomizationDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KustomizationDefinition {
		return vs[0].(map[string]KustomizationDefinition)[vs[1].(string)]
	}).(KustomizationDefinitionOutput)
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionResponse struct {
	// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
	DependsOn []DependsOnDefinitionResponse `pulumi:"dependsOn"`
	// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
	Force *bool `pulumi:"force"`
	// The path in the source reference to reconcile on the cluster.
	Path *string `pulumi:"path"`
	// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
	Prune *bool `pulumi:"prune"`
	// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
	RetryIntervalInSeconds *float64 `pulumi:"retryIntervalInSeconds"`
	// The interval at which to re-reconcile the Kustomization on the cluster.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the Kustomization on the cluster.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// Specify whether to validate the Kubernetes objects referenced in the Kustomization before applying them to the cluster.
	Validation *string `pulumi:"validation"`
}

// Defaults sets the appropriate defaults for KustomizationDefinitionResponse
func (val *KustomizationDefinitionResponse) Defaults() *KustomizationDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Force == nil {
		force_ := false
		tmp.Force = &force_
	}
	if tmp.Path == nil {
		path_ := ""
		tmp.Path = &path_
	}
	if tmp.Prune == nil {
		prune_ := false
		tmp.Prune = &prune_
	}
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionResponseOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KustomizationDefinitionResponse)(nil)).Elem()
}

func (o KustomizationDefinitionResponseOutput) ToKustomizationDefinitionResponseOutput() KustomizationDefinitionResponseOutput {
	return o
}

func (o KustomizationDefinitionResponseOutput) ToKustomizationDefinitionResponseOutputWithContext(ctx context.Context) KustomizationDefinitionResponseOutput {
	return o
}

func (o KustomizationDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KustomizationDefinitionResponse] {
	return pulumix.Output[KustomizationDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
func (o KustomizationDefinitionResponseOutput) DependsOn() DependsOnDefinitionResponseArrayOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) []DependsOnDefinitionResponse { return v.DependsOn }).(DependsOnDefinitionResponseArrayOutput)
}

// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
func (o KustomizationDefinitionResponseOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// The path in the source reference to reconcile on the cluster.
func (o KustomizationDefinitionResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
func (o KustomizationDefinitionResponseOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *bool { return v.Prune }).(pulumi.BoolPtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
func (o KustomizationDefinitionResponseOutput) RetryIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *float64 { return v.RetryIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionResponseOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionResponseOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// Specify whether to validate the Kubernetes objects referenced in the Kustomization before applying them to the cluster.
func (o KustomizationDefinitionResponseOutput) Validation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *string { return v.Validation }).(pulumi.StringPtrOutput)
}

type KustomizationDefinitionResponseMapOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KustomizationDefinitionResponse)(nil)).Elem()
}

func (o KustomizationDefinitionResponseMapOutput) ToKustomizationDefinitionResponseMapOutput() KustomizationDefinitionResponseMapOutput {
	return o
}

func (o KustomizationDefinitionResponseMapOutput) ToKustomizationDefinitionResponseMapOutputWithContext(ctx context.Context) KustomizationDefinitionResponseMapOutput {
	return o
}

func (o KustomizationDefinitionResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]KustomizationDefinitionResponse] {
	return pulumix.Output[map[string]KustomizationDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o KustomizationDefinitionResponseMapOutput) MapIndex(k pulumi.StringInput) KustomizationDefinitionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KustomizationDefinitionResponse {
		return vs[0].(map[string]KustomizationDefinitionResponse)[vs[1].(string)]
	}).(KustomizationDefinitionResponseOutput)
}

// Object reference to a Kubernetes object on a cluster
type ObjectReferenceDefinitionResponse struct {
	// Name of the object
	Name *string `pulumi:"name"`
	// Namespace of the object
	Namespace *string `pulumi:"namespace"`
}

// Object reference to a Kubernetes object on a cluster
type ObjectReferenceDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ObjectReferenceDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectReferenceDefinitionResponse)(nil)).Elem()
}

func (o ObjectReferenceDefinitionResponseOutput) ToObjectReferenceDefinitionResponseOutput() ObjectReferenceDefinitionResponseOutput {
	return o
}

func (o ObjectReferenceDefinitionResponseOutput) ToObjectReferenceDefinitionResponseOutputWithContext(ctx context.Context) ObjectReferenceDefinitionResponseOutput {
	return o
}

func (o ObjectReferenceDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectReferenceDefinitionResponse] {
	return pulumix.Output[ObjectReferenceDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the object
func (o ObjectReferenceDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferenceDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the object
func (o ObjectReferenceDefinitionResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferenceDefinitionResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ObjectReferenceDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ObjectReferenceDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectReferenceDefinitionResponse)(nil)).Elem()
}

func (o ObjectReferenceDefinitionResponsePtrOutput) ToObjectReferenceDefinitionResponsePtrOutput() ObjectReferenceDefinitionResponsePtrOutput {
	return o
}

func (o ObjectReferenceDefinitionResponsePtrOutput) ToObjectReferenceDefinitionResponsePtrOutputWithContext(ctx context.Context) ObjectReferenceDefinitionResponsePtrOutput {
	return o
}

func (o ObjectReferenceDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectReferenceDefinitionResponse] {
	return pulumix.Output[*ObjectReferenceDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ObjectReferenceDefinitionResponsePtrOutput) Elem() ObjectReferenceDefinitionResponseOutput {
	return o.ApplyT(func(v *ObjectReferenceDefinitionResponse) ObjectReferenceDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ObjectReferenceDefinitionResponse
		return ret
	}).(ObjectReferenceDefinitionResponseOutput)
}

// Name of the object
func (o ObjectReferenceDefinitionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferenceDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the object
func (o ObjectReferenceDefinitionResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferenceDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Status condition of Kubernetes object
type ObjectStatusConditionDefinitionResponse struct {
	// Last time this status condition has changed
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A more verbose description of the object status condition
	Message *string `pulumi:"message"`
	// Reason for the specified status condition type status
	Reason *string `pulumi:"reason"`
	// Status of the Kubernetes object condition type
	Status *string `pulumi:"status"`
	// Object status condition type for this object
	Type *string `pulumi:"type"`
}

// Status condition of Kubernetes object
type ObjectStatusConditionDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ObjectStatusConditionDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectStatusConditionDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusConditionDefinitionResponseOutput) ToObjectStatusConditionDefinitionResponseOutput() ObjectStatusConditionDefinitionResponseOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseOutput) ToObjectStatusConditionDefinitionResponseOutputWithContext(ctx context.Context) ObjectStatusConditionDefinitionResponseOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectStatusConditionDefinitionResponse] {
	return pulumix.Output[ObjectStatusConditionDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Last time this status condition has changed
func (o ObjectStatusConditionDefinitionResponseOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A more verbose description of the object status condition
func (o ObjectStatusConditionDefinitionResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason for the specified status condition type status
func (o ObjectStatusConditionDefinitionResponseOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the Kubernetes object condition type
func (o ObjectStatusConditionDefinitionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Object status condition type for this object
func (o ObjectStatusConditionDefinitionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ObjectStatusConditionDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ObjectStatusConditionDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectStatusConditionDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) ToObjectStatusConditionDefinitionResponseArrayOutput() ObjectStatusConditionDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) ToObjectStatusConditionDefinitionResponseArrayOutputWithContext(ctx context.Context) ObjectStatusConditionDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectStatusConditionDefinitionResponse] {
	return pulumix.Output[[]ObjectStatusConditionDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ObjectStatusConditionDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectStatusConditionDefinitionResponse {
		return vs[0].([]ObjectStatusConditionDefinitionResponse)[vs[1].(int)]
	}).(ObjectStatusConditionDefinitionResponseOutput)
}

// Statuses of objects deployed by the user-specified kustomizations from the git repository.
type ObjectStatusDefinitionResponse struct {
	// Object reference to the Kustomization that applied this object
	AppliedBy *ObjectReferenceDefinitionResponse `pulumi:"appliedBy"`
	// Compliance state of the applied object showing whether the applied object has come into a ready state on the cluster.
	ComplianceState *string `pulumi:"complianceState"`
	// Additional properties that are provided from objects of the HelmRelease kind
	HelmReleaseProperties *HelmReleasePropertiesDefinitionResponse `pulumi:"helmReleaseProperties"`
	// Kind of the applied object
	Kind *string `pulumi:"kind"`
	// Name of the applied object
	Name *string `pulumi:"name"`
	// Namespace of the applied object
	Namespace *string `pulumi:"namespace"`
	// List of Kubernetes object status conditions present on the cluster
	StatusConditions []ObjectStatusConditionDefinitionResponse `pulumi:"statusConditions"`
}

// Statuses of objects deployed by the user-specified kustomizations from the git repository.
type ObjectStatusDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ObjectStatusDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectStatusDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusDefinitionResponseOutput) ToObjectStatusDefinitionResponseOutput() ObjectStatusDefinitionResponseOutput {
	return o
}

func (o ObjectStatusDefinitionResponseOutput) ToObjectStatusDefinitionResponseOutputWithContext(ctx context.Context) ObjectStatusDefinitionResponseOutput {
	return o
}

func (o ObjectStatusDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectStatusDefinitionResponse] {
	return pulumix.Output[ObjectStatusDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Object reference to the Kustomization that applied this object
func (o ObjectStatusDefinitionResponseOutput) AppliedBy() ObjectReferenceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *ObjectReferenceDefinitionResponse { return v.AppliedBy }).(ObjectReferenceDefinitionResponsePtrOutput)
}

// Compliance state of the applied object showing whether the applied object has come into a ready state on the cluster.
func (o ObjectStatusDefinitionResponseOutput) ComplianceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.ComplianceState }).(pulumi.StringPtrOutput)
}

// Additional properties that are provided from objects of the HelmRelease kind
func (o ObjectStatusDefinitionResponseOutput) HelmReleaseProperties() HelmReleasePropertiesDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *HelmReleasePropertiesDefinitionResponse {
		return v.HelmReleaseProperties
	}).(HelmReleasePropertiesDefinitionResponsePtrOutput)
}

// Kind of the applied object
func (o ObjectStatusDefinitionResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the applied object
func (o ObjectStatusDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the applied object
func (o ObjectStatusDefinitionResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of Kubernetes object status conditions present on the cluster
func (o ObjectStatusDefinitionResponseOutput) StatusConditions() ObjectStatusConditionDefinitionResponseArrayOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) []ObjectStatusConditionDefinitionResponse {
		return v.StatusConditions
	}).(ObjectStatusConditionDefinitionResponseArrayOutput)
}

type ObjectStatusDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ObjectStatusDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectStatusDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusDefinitionResponseArrayOutput) ToObjectStatusDefinitionResponseArrayOutput() ObjectStatusDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusDefinitionResponseArrayOutput) ToObjectStatusDefinitionResponseArrayOutputWithContext(ctx context.Context) ObjectStatusDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectStatusDefinitionResponse] {
	return pulumix.Output[[]ObjectStatusDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ObjectStatusDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ObjectStatusDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectStatusDefinitionResponse {
		return vs[0].([]ObjectStatusDefinitionResponse)[vs[1].(int)]
	}).(ObjectStatusDefinitionResponseOutput)
}

// The source reference for the GitRepository object.
type RepositoryRefDefinition struct {
	// The git repository branch name to checkout.
	Branch *string `pulumi:"branch"`
	// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
	Commit *string `pulumi:"commit"`
	// The semver range used to match against git repository tags. This takes precedence over tag.
	Semver *string `pulumi:"semver"`
	// The git repository tag name to checkout. This takes precedence over branch.
	Tag *string `pulumi:"tag"`
}

// RepositoryRefDefinitionInput is an input type that accepts RepositoryRefDefinitionArgs and RepositoryRefDefinitionOutput values.
// You can construct a concrete instance of `RepositoryRefDefinitionInput` via:
//
//	RepositoryRefDefinitionArgs{...}
type RepositoryRefDefinitionInput interface {
	pulumi.Input

	ToRepositoryRefDefinitionOutput() RepositoryRefDefinitionOutput
	ToRepositoryRefDefinitionOutputWithContext(context.Context) RepositoryRefDefinitionOutput
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionArgs struct {
	// The git repository branch name to checkout.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// The semver range used to match against git repository tags. This takes precedence over tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// The git repository tag name to checkout. This takes precedence over branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (RepositoryRefDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRefDefinition)(nil)).Elem()
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionOutput() RepositoryRefDefinitionOutput {
	return i.ToRepositoryRefDefinitionOutputWithContext(context.Background())
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionOutputWithContext(ctx context.Context) RepositoryRefDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefDefinitionOutput)
}

func (i RepositoryRefDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryRefDefinition] {
	return pulumix.Output[RepositoryRefDefinition]{
		OutputState: i.ToRepositoryRefDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return i.ToRepositoryRefDefinitionPtrOutputWithContext(context.Background())
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefDefinitionOutput).ToRepositoryRefDefinitionPtrOutputWithContext(ctx)
}

// RepositoryRefDefinitionPtrInput is an input type that accepts RepositoryRefDefinitionArgs, RepositoryRefDefinitionPtr and RepositoryRefDefinitionPtrOutput values.
// You can construct a concrete instance of `RepositoryRefDefinitionPtrInput` via:
//
//	        RepositoryRefDefinitionArgs{...}
//
//	or:
//
//	        nil
type RepositoryRefDefinitionPtrInput interface {
	pulumi.Input

	ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput
	ToRepositoryRefDefinitionPtrOutputWithContext(context.Context) RepositoryRefDefinitionPtrOutput
}

type repositoryRefDefinitionPtrType RepositoryRefDefinitionArgs

func RepositoryRefDefinitionPtr(v *RepositoryRefDefinitionArgs) RepositoryRefDefinitionPtrInput {
	return (*repositoryRefDefinitionPtrType)(v)
}

func (*repositoryRefDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRefDefinition)(nil)).Elem()
}

func (i *repositoryRefDefinitionPtrType) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return i.ToRepositoryRefDefinitionPtrOutputWithContext(context.Background())
}

func (i *repositoryRefDefinitionPtrType) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefDefinitionPtrOutput)
}

func (i *repositoryRefDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRefDefinition] {
	return pulumix.Output[*RepositoryRefDefinition]{
		OutputState: i.ToRepositoryRefDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRefDefinition)(nil)).Elem()
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionOutput() RepositoryRefDefinitionOutput {
	return o
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionOutputWithContext(ctx context.Context) RepositoryRefDefinitionOutput {
	return o
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return o.ToRepositoryRefDefinitionPtrOutputWithContext(context.Background())
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRefDefinition) *RepositoryRefDefinition {
		return &v
	}).(RepositoryRefDefinitionPtrOutput)
}

func (o RepositoryRefDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRefDefinition] {
	return pulumix.Output[RepositoryRefDefinition]{
		OutputState: o.OutputState,
	}
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type RepositoryRefDefinitionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRefDefinition)(nil)).Elem()
}

func (o RepositoryRefDefinitionPtrOutput) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return o
}

func (o RepositoryRefDefinitionPtrOutput) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return o
}

func (o RepositoryRefDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRefDefinition] {
	return pulumix.Output[*RepositoryRefDefinition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRefDefinitionPtrOutput) Elem() RepositoryRefDefinitionOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) RepositoryRefDefinition {
		if v != nil {
			return *v
		}
		var ret RepositoryRefDefinition
		return ret
	}).(RepositoryRefDefinitionOutput)
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionResponse struct {
	// The git repository branch name to checkout.
	Branch *string `pulumi:"branch"`
	// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
	Commit *string `pulumi:"commit"`
	// The semver range used to match against git repository tags. This takes precedence over tag.
	Semver *string `pulumi:"semver"`
	// The git repository tag name to checkout. This takes precedence over branch.
	Tag *string `pulumi:"tag"`
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionResponseOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRefDefinitionResponse)(nil)).Elem()
}

func (o RepositoryRefDefinitionResponseOutput) ToRepositoryRefDefinitionResponseOutput() RepositoryRefDefinitionResponseOutput {
	return o
}

func (o RepositoryRefDefinitionResponseOutput) ToRepositoryRefDefinitionResponseOutputWithContext(ctx context.Context) RepositoryRefDefinitionResponseOutput {
	return o
}

func (o RepositoryRefDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRefDefinitionResponse] {
	return pulumix.Output[RepositoryRefDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionResponseOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionResponseOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionResponseOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type RepositoryRefDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRefDefinitionResponse)(nil)).Elem()
}

func (o RepositoryRefDefinitionResponsePtrOutput) ToRepositoryRefDefinitionResponsePtrOutput() RepositoryRefDefinitionResponsePtrOutput {
	return o
}

func (o RepositoryRefDefinitionResponsePtrOutput) ToRepositoryRefDefinitionResponsePtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionResponsePtrOutput {
	return o
}

func (o RepositoryRefDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRefDefinitionResponse] {
	return pulumix.Output[*RepositoryRefDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRefDefinitionResponsePtrOutput) Elem() RepositoryRefDefinitionResponseOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) RepositoryRefDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret RepositoryRefDefinitionResponse
		return ret
	}).(RepositoryRefDefinitionResponseOutput)
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionResponsePtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionResponsePtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionResponsePtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DependsOnDefinitionOutput{})
	pulumi.RegisterOutputType(DependsOnDefinitionArrayOutput{})
	pulumi.RegisterOutputType(DependsOnDefinitionResponseOutput{})
	pulumi.RegisterOutputType(DependsOnDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionResponseOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(HelmReleasePropertiesDefinitionResponseOutput{})
	pulumi.RegisterOutputType(HelmReleasePropertiesDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionMapOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionResponseOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionResponseMapOutput{})
	pulumi.RegisterOutputType(ObjectReferenceDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ObjectReferenceDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ObjectStatusConditionDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ObjectStatusConditionDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(ObjectStatusDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ObjectStatusDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionResponseOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
