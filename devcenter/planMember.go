// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a devcenter plan member resource.
// Azure REST API version: 2024-05-01-preview.
type PlanMember struct {
	pulumi.CustomResourceState

	// The unique id of the member.
	MemberId pulumi.StringPtrOutput `pulumi:"memberId"`
	// The type of the member (user, group)
	MemberType pulumi.StringPtrOutput `pulumi:"memberType"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPlanMember registers a new resource with the given unique name, arguments, and options.
func NewPlanMember(ctx *pulumi.Context,
	name string, args *PlanMemberArgs, opts ...pulumi.ResourceOption) (*PlanMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:devcenter/v20240501preview:PlanMember"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PlanMember
	err := ctx.RegisterResource("azure-native:devcenter:PlanMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlanMember gets an existing PlanMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlanMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlanMemberState, opts ...pulumi.ResourceOption) (*PlanMember, error) {
	var resource PlanMember
	err := ctx.ReadResource("azure-native:devcenter:PlanMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlanMember resources.
type planMemberState struct {
}

type PlanMemberState struct {
}

func (PlanMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*planMemberState)(nil)).Elem()
}

type planMemberArgs struct {
	// The unique id of the member.
	MemberId *string `pulumi:"memberId"`
	// The name of a devcenter plan member.
	MemberName *string `pulumi:"memberName"`
	// The type of the member (user, group)
	MemberType *string `pulumi:"memberType"`
	// The name of the devcenter plan.
	PlanName string `pulumi:"planName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PlanMember resource.
type PlanMemberArgs struct {
	// The unique id of the member.
	MemberId pulumi.StringPtrInput
	// The name of a devcenter plan member.
	MemberName pulumi.StringPtrInput
	// The type of the member (user, group)
	MemberType pulumi.StringPtrInput
	// The name of the devcenter plan.
	PlanName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (PlanMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*planMemberArgs)(nil)).Elem()
}

type PlanMemberInput interface {
	pulumi.Input

	ToPlanMemberOutput() PlanMemberOutput
	ToPlanMemberOutputWithContext(ctx context.Context) PlanMemberOutput
}

func (*PlanMember) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanMember)(nil)).Elem()
}

func (i *PlanMember) ToPlanMemberOutput() PlanMemberOutput {
	return i.ToPlanMemberOutputWithContext(context.Background())
}

func (i *PlanMember) ToPlanMemberOutputWithContext(ctx context.Context) PlanMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanMemberOutput)
}

type PlanMemberOutput struct{ *pulumi.OutputState }

func (PlanMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanMember)(nil)).Elem()
}

func (o PlanMemberOutput) ToPlanMemberOutput() PlanMemberOutput {
	return o
}

func (o PlanMemberOutput) ToPlanMemberOutputWithContext(ctx context.Context) PlanMemberOutput {
	return o
}

// The unique id of the member.
func (o PlanMemberOutput) MemberId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanMember) pulumi.StringPtrOutput { return v.MemberId }).(pulumi.StringPtrOutput)
}

// The type of the member (user, group)
func (o PlanMemberOutput) MemberType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanMember) pulumi.StringPtrOutput { return v.MemberType }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o PlanMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o PlanMemberOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanMember) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PlanMemberOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PlanMember) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o PlanMemberOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlanMember) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PlanMemberOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PlanMember) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PlanMemberOutput{})
}
