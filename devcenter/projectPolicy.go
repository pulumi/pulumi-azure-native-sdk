// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an project policy resource.
//
// Uses Azure REST API version 2024-10-01-preview.
//
// Other available API versions: 2025-02-01.
type ProjectPolicy struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource policies that are a part of this project policy.
	ResourcePolicies ResourcePolicyResponseArrayOutput `pulumi:"resourcePolicies"`
	// Resources that have access to the shared resources that are a part of this project policy.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewProjectPolicy registers a new resource with the given unique name, arguments, and options.
func NewProjectPolicy(ctx *pulumi.Context,
	name string, args *ProjectPolicyArgs, opts ...pulumi.ResourceOption) (*ProjectPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DevCenterName == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:devcenter/v20241001preview:ProjectPolicy"),
		},
		{
			Type: pulumi.String("azure-native:devcenter/v20250201:ProjectPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProjectPolicy
	err := ctx.RegisterResource("azure-native:devcenter:ProjectPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectPolicy gets an existing ProjectPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectPolicyState, opts ...pulumi.ResourceOption) (*ProjectPolicy, error) {
	var resource ProjectPolicy
	err := ctx.ReadResource("azure-native:devcenter:ProjectPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectPolicy resources.
type projectPolicyState struct {
}

type ProjectPolicyState struct {
}

func (ProjectPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPolicyState)(nil)).Elem()
}

type projectPolicyArgs struct {
	// The name of the devcenter.
	DevCenterName string `pulumi:"devCenterName"`
	// The name of the project policy.
	ProjectPolicyName *string `pulumi:"projectPolicyName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource policies that are a part of this project policy.
	ResourcePolicies []ResourcePolicy `pulumi:"resourcePolicies"`
	// Resources that have access to the shared resources that are a part of this project policy.
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a ProjectPolicy resource.
type ProjectPolicyArgs struct {
	// The name of the devcenter.
	DevCenterName pulumi.StringInput
	// The name of the project policy.
	ProjectPolicyName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource policies that are a part of this project policy.
	ResourcePolicies ResourcePolicyArrayInput
	// Resources that have access to the shared resources that are a part of this project policy.
	Scopes pulumi.StringArrayInput
}

func (ProjectPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPolicyArgs)(nil)).Elem()
}

type ProjectPolicyInput interface {
	pulumi.Input

	ToProjectPolicyOutput() ProjectPolicyOutput
	ToProjectPolicyOutputWithContext(ctx context.Context) ProjectPolicyOutput
}

func (*ProjectPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPolicy)(nil)).Elem()
}

func (i *ProjectPolicy) ToProjectPolicyOutput() ProjectPolicyOutput {
	return i.ToProjectPolicyOutputWithContext(context.Background())
}

func (i *ProjectPolicy) ToProjectPolicyOutputWithContext(ctx context.Context) ProjectPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPolicyOutput)
}

type ProjectPolicyOutput struct{ *pulumi.OutputState }

func (ProjectPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPolicy)(nil)).Elem()
}

func (o ProjectPolicyOutput) ToProjectPolicyOutput() ProjectPolicyOutput {
	return o
}

func (o ProjectPolicyOutput) ToProjectPolicyOutputWithContext(ctx context.Context) ProjectPolicyOutput {
	return o
}

// The name of the resource
func (o ProjectPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o ProjectPolicyOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPolicy) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource policies that are a part of this project policy.
func (o ProjectPolicyOutput) ResourcePolicies() ResourcePolicyResponseArrayOutput {
	return o.ApplyT(func(v *ProjectPolicy) ResourcePolicyResponseArrayOutput { return v.ResourcePolicies }).(ResourcePolicyResponseArrayOutput)
}

// Resources that have access to the shared resources that are a part of this project policy.
func (o ProjectPolicyOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectPolicy) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ProjectPolicyOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ProjectPolicy) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ProjectPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectPolicyOutput{})
}
