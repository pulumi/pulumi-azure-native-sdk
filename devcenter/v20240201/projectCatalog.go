// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240201

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a catalog.
type ProjectCatalog struct {
	pulumi.CustomResourceState

	// Properties for an Azure DevOps catalog type.
	AdoGit GitCatalogResponsePtrOutput `pulumi:"adoGit"`
	// The connection state of the catalog.
	ConnectionState pulumi.StringOutput `pulumi:"connectionState"`
	// Properties for a GitHub catalog type.
	GitHub GitCatalogResponsePtrOutput `pulumi:"gitHub"`
	// When the catalog was last connected.
	LastConnectionTime pulumi.StringOutput `pulumi:"lastConnectionTime"`
	// Stats of the latest synchronization.
	LastSyncStats SyncStatsResponseOutput `pulumi:"lastSyncStats"`
	// When the catalog was last synced.
	LastSyncTime pulumi.StringOutput `pulumi:"lastSyncTime"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The synchronization state of the catalog.
	SyncState pulumi.StringOutput `pulumi:"syncState"`
	// Indicates the type of sync that is configured for the catalog.
	SyncType pulumi.StringPtrOutput `pulumi:"syncType"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewProjectCatalog registers a new resource with the given unique name, arguments, and options.
func NewProjectCatalog(ctx *pulumi.Context,
	name string, args *ProjectCatalogArgs, opts ...pulumi.ResourceOption) (*ProjectCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:devcenter:ProjectCatalog"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProjectCatalog
	err := ctx.RegisterResource("azure-native:devcenter/v20240201:ProjectCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectCatalog gets an existing ProjectCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectCatalogState, opts ...pulumi.ResourceOption) (*ProjectCatalog, error) {
	var resource ProjectCatalog
	err := ctx.ReadResource("azure-native:devcenter/v20240201:ProjectCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectCatalog resources.
type projectCatalogState struct {
}

type ProjectCatalogState struct {
}

func (ProjectCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectCatalogState)(nil)).Elem()
}

type projectCatalogArgs struct {
	// Properties for an Azure DevOps catalog type.
	AdoGit *GitCatalog `pulumi:"adoGit"`
	// The name of the Catalog.
	CatalogName *string `pulumi:"catalogName"`
	// Properties for a GitHub catalog type.
	GitHub *GitCatalog `pulumi:"gitHub"`
	// The name of the project.
	ProjectName string `pulumi:"projectName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Indicates the type of sync that is configured for the catalog.
	SyncType *string `pulumi:"syncType"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ProjectCatalog resource.
type ProjectCatalogArgs struct {
	// Properties for an Azure DevOps catalog type.
	AdoGit GitCatalogPtrInput
	// The name of the Catalog.
	CatalogName pulumi.StringPtrInput
	// Properties for a GitHub catalog type.
	GitHub GitCatalogPtrInput
	// The name of the project.
	ProjectName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Indicates the type of sync that is configured for the catalog.
	SyncType pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ProjectCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectCatalogArgs)(nil)).Elem()
}

type ProjectCatalogInput interface {
	pulumi.Input

	ToProjectCatalogOutput() ProjectCatalogOutput
	ToProjectCatalogOutputWithContext(ctx context.Context) ProjectCatalogOutput
}

func (*ProjectCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCatalog)(nil)).Elem()
}

func (i *ProjectCatalog) ToProjectCatalogOutput() ProjectCatalogOutput {
	return i.ToProjectCatalogOutputWithContext(context.Background())
}

func (i *ProjectCatalog) ToProjectCatalogOutputWithContext(ctx context.Context) ProjectCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCatalogOutput)
}

type ProjectCatalogOutput struct{ *pulumi.OutputState }

func (ProjectCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectCatalog)(nil)).Elem()
}

func (o ProjectCatalogOutput) ToProjectCatalogOutput() ProjectCatalogOutput {
	return o
}

func (o ProjectCatalogOutput) ToProjectCatalogOutputWithContext(ctx context.Context) ProjectCatalogOutput {
	return o
}

// Properties for an Azure DevOps catalog type.
func (o ProjectCatalogOutput) AdoGit() GitCatalogResponsePtrOutput {
	return o.ApplyT(func(v *ProjectCatalog) GitCatalogResponsePtrOutput { return v.AdoGit }).(GitCatalogResponsePtrOutput)
}

// The connection state of the catalog.
func (o ProjectCatalogOutput) ConnectionState() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringOutput { return v.ConnectionState }).(pulumi.StringOutput)
}

// Properties for a GitHub catalog type.
func (o ProjectCatalogOutput) GitHub() GitCatalogResponsePtrOutput {
	return o.ApplyT(func(v *ProjectCatalog) GitCatalogResponsePtrOutput { return v.GitHub }).(GitCatalogResponsePtrOutput)
}

// When the catalog was last connected.
func (o ProjectCatalogOutput) LastConnectionTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringOutput { return v.LastConnectionTime }).(pulumi.StringOutput)
}

// Stats of the latest synchronization.
func (o ProjectCatalogOutput) LastSyncStats() SyncStatsResponseOutput {
	return o.ApplyT(func(v *ProjectCatalog) SyncStatsResponseOutput { return v.LastSyncStats }).(SyncStatsResponseOutput)
}

// When the catalog was last synced.
func (o ProjectCatalogOutput) LastSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringOutput { return v.LastSyncTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o ProjectCatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o ProjectCatalogOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The synchronization state of the catalog.
func (o ProjectCatalogOutput) SyncState() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringOutput { return v.SyncState }).(pulumi.StringOutput)
}

// Indicates the type of sync that is configured for the catalog.
func (o ProjectCatalogOutput) SyncType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringPtrOutput { return v.SyncType }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ProjectCatalogOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ProjectCatalog) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o ProjectCatalogOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ProjectCatalogOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectCatalog) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectCatalogOutput{})
}
