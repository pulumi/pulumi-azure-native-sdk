// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets catalog synchronization error details
// Azure REST API version: 2023-08-01-preview.
//
// Other available API versions: 2023-10-01-preview.
func GetCatalogSyncErrorDetails(ctx *pulumi.Context, args *GetCatalogSyncErrorDetailsArgs, opts ...pulumi.InvokeOption) (*GetCatalogSyncErrorDetailsResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetCatalogSyncErrorDetailsResult
	err := ctx.Invoke("azure-native:devcenter:getCatalogSyncErrorDetails", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetCatalogSyncErrorDetailsArgs struct {
	// The name of the Catalog.
	CatalogName string `pulumi:"catalogName"`
	// The name of the devcenter.
	DevCenterName string `pulumi:"devCenterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Synchronization error details.
type GetCatalogSyncErrorDetailsResult struct {
	// Catalog items that have conflicting names.
	Conflicts []CatalogConflictErrorResponse `pulumi:"conflicts"`
	// Errors that occured during synchronization.
	Errors []CatalogSyncErrorResponse `pulumi:"errors"`
	// Error information for the overall synchronization operation.
	OperationError CatalogErrorDetailsResponse `pulumi:"operationError"`
}

func GetCatalogSyncErrorDetailsOutput(ctx *pulumi.Context, args GetCatalogSyncErrorDetailsOutputArgs, opts ...pulumi.InvokeOption) GetCatalogSyncErrorDetailsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCatalogSyncErrorDetailsResult, error) {
			args := v.(GetCatalogSyncErrorDetailsArgs)
			r, err := GetCatalogSyncErrorDetails(ctx, &args, opts...)
			var s GetCatalogSyncErrorDetailsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCatalogSyncErrorDetailsResultOutput)
}

type GetCatalogSyncErrorDetailsOutputArgs struct {
	// The name of the Catalog.
	CatalogName pulumi.StringInput `pulumi:"catalogName"`
	// The name of the devcenter.
	DevCenterName pulumi.StringInput `pulumi:"devCenterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetCatalogSyncErrorDetailsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogSyncErrorDetailsArgs)(nil)).Elem()
}

// Synchronization error details.
type GetCatalogSyncErrorDetailsResultOutput struct{ *pulumi.OutputState }

func (GetCatalogSyncErrorDetailsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogSyncErrorDetailsResult)(nil)).Elem()
}

func (o GetCatalogSyncErrorDetailsResultOutput) ToGetCatalogSyncErrorDetailsResultOutput() GetCatalogSyncErrorDetailsResultOutput {
	return o
}

func (o GetCatalogSyncErrorDetailsResultOutput) ToGetCatalogSyncErrorDetailsResultOutputWithContext(ctx context.Context) GetCatalogSyncErrorDetailsResultOutput {
	return o
}

func (o GetCatalogSyncErrorDetailsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetCatalogSyncErrorDetailsResult] {
	return pulumix.Output[GetCatalogSyncErrorDetailsResult]{
		OutputState: o.OutputState,
	}
}

// Catalog items that have conflicting names.
func (o GetCatalogSyncErrorDetailsResultOutput) Conflicts() CatalogConflictErrorResponseArrayOutput {
	return o.ApplyT(func(v GetCatalogSyncErrorDetailsResult) []CatalogConflictErrorResponse { return v.Conflicts }).(CatalogConflictErrorResponseArrayOutput)
}

// Errors that occured during synchronization.
func (o GetCatalogSyncErrorDetailsResultOutput) Errors() CatalogSyncErrorResponseArrayOutput {
	return o.ApplyT(func(v GetCatalogSyncErrorDetailsResult) []CatalogSyncErrorResponse { return v.Errors }).(CatalogSyncErrorResponseArrayOutput)
}

// Error information for the overall synchronization operation.
func (o GetCatalogSyncErrorDetailsResultOutput) OperationError() CatalogErrorDetailsResponseOutput {
	return o.ApplyT(func(v GetCatalogSyncErrorDetailsResult) CatalogErrorDetailsResponse { return v.OperationError }).(CatalogErrorDetailsResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCatalogSyncErrorDetailsResultOutput{})
}
