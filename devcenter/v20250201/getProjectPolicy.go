// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a specific project policy.
func LookupProjectPolicy(ctx *pulumi.Context, args *LookupProjectPolicyArgs, opts ...pulumi.InvokeOption) (*LookupProjectPolicyResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectPolicyResult
	err := ctx.Invoke("azure-native:devcenter/v20250201:getProjectPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupProjectPolicyArgs struct {
	// The name of the devcenter.
	DevCenterName string `pulumi:"devCenterName"`
	// The name of the project policy.
	ProjectPolicyName string `pulumi:"projectPolicyName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Represents an project policy resource.
type LookupProjectPolicyResult struct {
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource policies that are a part of this project policy.
	ResourcePolicies []ResourcePolicyResponse `pulumi:"resourcePolicies"`
	// Resources that have access to the shared resources that are a part of this project policy.
	Scopes []string `pulumi:"scopes"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupProjectPolicyOutput(ctx *pulumi.Context, args LookupProjectPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupProjectPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectPolicyResultOutput, error) {
			args := v.(LookupProjectPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:devcenter/v20250201:getProjectPolicy", args, LookupProjectPolicyResultOutput{}, options).(LookupProjectPolicyResultOutput), nil
		}).(LookupProjectPolicyResultOutput)
}

type LookupProjectPolicyOutputArgs struct {
	// The name of the devcenter.
	DevCenterName pulumi.StringInput `pulumi:"devCenterName"`
	// The name of the project policy.
	ProjectPolicyName pulumi.StringInput `pulumi:"projectPolicyName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupProjectPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectPolicyArgs)(nil)).Elem()
}

// Represents an project policy resource.
type LookupProjectPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupProjectPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectPolicyResult)(nil)).Elem()
}

func (o LookupProjectPolicyResultOutput) ToLookupProjectPolicyResultOutput() LookupProjectPolicyResultOutput {
	return o
}

func (o LookupProjectPolicyResultOutput) ToLookupProjectPolicyResultOutputWithContext(ctx context.Context) LookupProjectPolicyResultOutput {
	return o
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupProjectPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupProjectPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o LookupProjectPolicyResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPolicyResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource policies that are a part of this project policy.
func (o LookupProjectPolicyResultOutput) ResourcePolicies() ResourcePolicyResponseArrayOutput {
	return o.ApplyT(func(v LookupProjectPolicyResult) []ResourcePolicyResponse { return v.ResourcePolicies }).(ResourcePolicyResponseArrayOutput)
}

// Resources that have access to the shared resources that are a part of this project policy.
func (o LookupProjectPolicyResultOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectPolicyResult) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupProjectPolicyResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupProjectPolicyResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupProjectPolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectPolicyResultOutput{})
}
