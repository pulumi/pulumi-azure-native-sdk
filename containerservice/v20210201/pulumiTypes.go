// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettings struct {
	// Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
	MaxSurge *string `pulumi:"maxSurge"`
}

// AgentPoolUpgradeSettingsInput is an input type that accepts AgentPoolUpgradeSettingsArgs and AgentPoolUpgradeSettingsOutput values.
// You can construct a concrete instance of `AgentPoolUpgradeSettingsInput` via:
//
//	AgentPoolUpgradeSettingsArgs{...}
type AgentPoolUpgradeSettingsInput interface {
	pulumi.Input

	ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput
	ToAgentPoolUpgradeSettingsOutputWithContext(context.Context) AgentPoolUpgradeSettingsOutput
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsArgs struct {
	// Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
	MaxSurge pulumi.StringPtrInput `pulumi:"maxSurge"`
}

func (AgentPoolUpgradeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettings)(nil)).Elem()
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput {
	return i.ToAgentPoolUpgradeSettingsOutputWithContext(context.Background())
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsOutput)
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return i.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsOutput).ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx)
}

// AgentPoolUpgradeSettingsPtrInput is an input type that accepts AgentPoolUpgradeSettingsArgs, AgentPoolUpgradeSettingsPtr and AgentPoolUpgradeSettingsPtrOutput values.
// You can construct a concrete instance of `AgentPoolUpgradeSettingsPtrInput` via:
//
//	        AgentPoolUpgradeSettingsArgs{...}
//
//	or:
//
//	        nil
type AgentPoolUpgradeSettingsPtrInput interface {
	pulumi.Input

	ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput
	ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Context) AgentPoolUpgradeSettingsPtrOutput
}

type agentPoolUpgradeSettingsPtrType AgentPoolUpgradeSettingsArgs

func AgentPoolUpgradeSettingsPtr(v *AgentPoolUpgradeSettingsArgs) AgentPoolUpgradeSettingsPtrInput {
	return (*agentPoolUpgradeSettingsPtrType)(v)
}

func (*agentPoolUpgradeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettings)(nil)).Elem()
}

func (i *agentPoolUpgradeSettingsPtrType) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return i.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i *agentPoolUpgradeSettingsPtrType) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsPtrOutput)
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettings)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput {
	return o
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsOutput {
	return o
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return o.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolUpgradeSettings) *AgentPoolUpgradeSettings {
		return &v
	}).(AgentPoolUpgradeSettingsPtrOutput)
}

// Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
func (o AgentPoolUpgradeSettingsOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettings) *string { return v.MaxSurge }).(pulumi.StringPtrOutput)
}

type AgentPoolUpgradeSettingsPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettings)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsPtrOutput) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsPtrOutput) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsPtrOutput) Elem() AgentPoolUpgradeSettingsOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) AgentPoolUpgradeSettings {
		if v != nil {
			return *v
		}
		var ret AgentPoolUpgradeSettings
		return ret
	}).(AgentPoolUpgradeSettingsOutput)
}

// Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
func (o AgentPoolUpgradeSettingsPtrOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.StringPtrOutput)
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsResponse struct {
	// Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
	MaxSurge *string `pulumi:"maxSurge"`
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsResponseOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettingsResponse)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsResponseOutput) ToAgentPoolUpgradeSettingsResponseOutput() AgentPoolUpgradeSettingsResponseOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponseOutput) ToAgentPoolUpgradeSettingsResponseOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsResponseOutput {
	return o
}

// Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
func (o AgentPoolUpgradeSettingsResponseOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettingsResponse) *string { return v.MaxSurge }).(pulumi.StringPtrOutput)
}

type AgentPoolUpgradeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettingsResponse)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) ToAgentPoolUpgradeSettingsResponsePtrOutput() AgentPoolUpgradeSettingsResponsePtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) ToAgentPoolUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsResponsePtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) Elem() AgentPoolUpgradeSettingsResponseOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) AgentPoolUpgradeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AgentPoolUpgradeSettingsResponse
		return ret
	}).(AgentPoolUpgradeSettingsResponseOutput)
}

// Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
func (o AgentPoolUpgradeSettingsResponsePtrOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.StringPtrOutput)
}

// Kubelet configurations of agent nodes.
type KubeletConfig struct {
	// Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// The maximum number of container log files that can be present for a container. The number must be â‰¥ 2.
	ContainerLogMaxFiles *int `pulumi:"containerLogMaxFiles"`
	// The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB *int `pulumi:"containerLogMaxSizeMB"`
	// Enable CPU CFS quota enforcement for containers that specify CPU limits.
	CpuCfsQuota *bool `pulumi:"cpuCfsQuota"`
	// Sets CPU CFS quota period value.
	CpuCfsQuotaPeriod *string `pulumi:"cpuCfsQuotaPeriod"`
	// CPU Manager policy to use.
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
	// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn *bool `pulumi:"failSwapOn"`
	// The percent of disk usage after which image garbage collection is always run.
	ImageGcHighThreshold *int `pulumi:"imageGcHighThreshold"`
	// The percent of disk usage before which image garbage collection is never run.
	ImageGcLowThreshold *int `pulumi:"imageGcLowThreshold"`
	// The maximum number of processes per pod.
	PodMaxPids *int `pulumi:"podMaxPids"`
	// Topology Manager policy to use.
	TopologyManagerPolicy *string `pulumi:"topologyManagerPolicy"`
}

// KubeletConfigInput is an input type that accepts KubeletConfigArgs and KubeletConfigOutput values.
// You can construct a concrete instance of `KubeletConfigInput` via:
//
//	KubeletConfigArgs{...}
type KubeletConfigInput interface {
	pulumi.Input

	ToKubeletConfigOutput() KubeletConfigOutput
	ToKubeletConfigOutputWithContext(context.Context) KubeletConfigOutput
}

// Kubelet configurations of agent nodes.
type KubeletConfigArgs struct {
	// Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls pulumi.StringArrayInput `pulumi:"allowedUnsafeSysctls"`
	// The maximum number of container log files that can be present for a container. The number must be â‰¥ 2.
	ContainerLogMaxFiles pulumi.IntPtrInput `pulumi:"containerLogMaxFiles"`
	// The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB pulumi.IntPtrInput `pulumi:"containerLogMaxSizeMB"`
	// Enable CPU CFS quota enforcement for containers that specify CPU limits.
	CpuCfsQuota pulumi.BoolPtrInput `pulumi:"cpuCfsQuota"`
	// Sets CPU CFS quota period value.
	CpuCfsQuotaPeriod pulumi.StringPtrInput `pulumi:"cpuCfsQuotaPeriod"`
	// CPU Manager policy to use.
	CpuManagerPolicy pulumi.StringPtrInput `pulumi:"cpuManagerPolicy"`
	// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn pulumi.BoolPtrInput `pulumi:"failSwapOn"`
	// The percent of disk usage after which image garbage collection is always run.
	ImageGcHighThreshold pulumi.IntPtrInput `pulumi:"imageGcHighThreshold"`
	// The percent of disk usage before which image garbage collection is never run.
	ImageGcLowThreshold pulumi.IntPtrInput `pulumi:"imageGcLowThreshold"`
	// The maximum number of processes per pod.
	PodMaxPids pulumi.IntPtrInput `pulumi:"podMaxPids"`
	// Topology Manager policy to use.
	TopologyManagerPolicy pulumi.StringPtrInput `pulumi:"topologyManagerPolicy"`
}

func (KubeletConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletConfig)(nil)).Elem()
}

func (i KubeletConfigArgs) ToKubeletConfigOutput() KubeletConfigOutput {
	return i.ToKubeletConfigOutputWithContext(context.Background())
}

func (i KubeletConfigArgs) ToKubeletConfigOutputWithContext(ctx context.Context) KubeletConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletConfigOutput)
}

func (i KubeletConfigArgs) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return i.ToKubeletConfigPtrOutputWithContext(context.Background())
}

func (i KubeletConfigArgs) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletConfigOutput).ToKubeletConfigPtrOutputWithContext(ctx)
}

// KubeletConfigPtrInput is an input type that accepts KubeletConfigArgs, KubeletConfigPtr and KubeletConfigPtrOutput values.
// You can construct a concrete instance of `KubeletConfigPtrInput` via:
//
//	        KubeletConfigArgs{...}
//
//	or:
//
//	        nil
type KubeletConfigPtrInput interface {
	pulumi.Input

	ToKubeletConfigPtrOutput() KubeletConfigPtrOutput
	ToKubeletConfigPtrOutputWithContext(context.Context) KubeletConfigPtrOutput
}

type kubeletConfigPtrType KubeletConfigArgs

func KubeletConfigPtr(v *KubeletConfigArgs) KubeletConfigPtrInput {
	return (*kubeletConfigPtrType)(v)
}

func (*kubeletConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletConfig)(nil)).Elem()
}

func (i *kubeletConfigPtrType) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return i.ToKubeletConfigPtrOutputWithContext(context.Background())
}

func (i *kubeletConfigPtrType) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletConfigPtrOutput)
}

// Kubelet configurations of agent nodes.
type KubeletConfigOutput struct{ *pulumi.OutputState }

func (KubeletConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletConfig)(nil)).Elem()
}

func (o KubeletConfigOutput) ToKubeletConfigOutput() KubeletConfigOutput {
	return o
}

func (o KubeletConfigOutput) ToKubeletConfigOutputWithContext(ctx context.Context) KubeletConfigOutput {
	return o
}

func (o KubeletConfigOutput) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return o.ToKubeletConfigPtrOutputWithContext(context.Background())
}

func (o KubeletConfigOutput) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubeletConfig) *KubeletConfig {
		return &v
	}).(KubeletConfigPtrOutput)
}

// Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubeletConfig) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be â‰¥ 2.
func (o KubeletConfigOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ContainerLogMaxFiles }).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ContainerLogMaxSizeMB }).(pulumi.IntPtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits.
func (o KubeletConfigOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *bool { return v.CpuCfsQuota }).(pulumi.BoolPtrOutput)
}

// Sets CPU CFS quota period value.
func (o KubeletConfigOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *string { return v.CpuCfsQuotaPeriod }).(pulumi.StringPtrOutput)
}

// CPU Manager policy to use.
func (o KubeletConfigOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *bool { return v.FailSwapOn }).(pulumi.BoolPtrOutput)
}

// The percent of disk usage after which image garbage collection is always run.
func (o KubeletConfigOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ImageGcHighThreshold }).(pulumi.IntPtrOutput)
}

// The percent of disk usage before which image garbage collection is never run.
func (o KubeletConfigOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ImageGcLowThreshold }).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.PodMaxPids }).(pulumi.IntPtrOutput)
}

// Topology Manager policy to use.
func (o KubeletConfigOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *string { return v.TopologyManagerPolicy }).(pulumi.StringPtrOutput)
}

type KubeletConfigPtrOutput struct{ *pulumi.OutputState }

func (KubeletConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletConfig)(nil)).Elem()
}

func (o KubeletConfigPtrOutput) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return o
}

func (o KubeletConfigPtrOutput) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return o
}

func (o KubeletConfigPtrOutput) Elem() KubeletConfigOutput {
	return o.ApplyT(func(v *KubeletConfig) KubeletConfig {
		if v != nil {
			return *v
		}
		var ret KubeletConfig
		return ret
	}).(KubeletConfigOutput)
}

// Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigPtrOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubeletConfig) []string {
		if v == nil {
			return nil
		}
		return v.AllowedUnsafeSysctls
	}).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be â‰¥ 2.
func (o KubeletConfigPtrOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxFiles
	}).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigPtrOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxSizeMB
	}).(pulumi.IntPtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits.
func (o KubeletConfigPtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// Sets CPU CFS quota period value.
func (o KubeletConfigPtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// CPU Manager policy to use.
func (o KubeletConfigPtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigPtrOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.FailSwapOn
	}).(pulumi.BoolPtrOutput)
}

// The percent of disk usage after which image garbage collection is always run.
func (o KubeletConfigPtrOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcHighThreshold
	}).(pulumi.IntPtrOutput)
}

// The percent of disk usage before which image garbage collection is never run.
func (o KubeletConfigPtrOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcLowThreshold
	}).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigPtrOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.PodMaxPids
	}).(pulumi.IntPtrOutput)
}

// Topology Manager policy to use.
func (o KubeletConfigPtrOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.TopologyManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// Kubelet configurations of agent nodes.
type KubeletConfigResponse struct {
	// Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// The maximum number of container log files that can be present for a container. The number must be â‰¥ 2.
	ContainerLogMaxFiles *int `pulumi:"containerLogMaxFiles"`
	// The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB *int `pulumi:"containerLogMaxSizeMB"`
	// Enable CPU CFS quota enforcement for containers that specify CPU limits.
	CpuCfsQuota *bool `pulumi:"cpuCfsQuota"`
	// Sets CPU CFS quota period value.
	CpuCfsQuotaPeriod *string `pulumi:"cpuCfsQuotaPeriod"`
	// CPU Manager policy to use.
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
	// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn *bool `pulumi:"failSwapOn"`
	// The percent of disk usage after which image garbage collection is always run.
	ImageGcHighThreshold *int `pulumi:"imageGcHighThreshold"`
	// The percent of disk usage before which image garbage collection is never run.
	ImageGcLowThreshold *int `pulumi:"imageGcLowThreshold"`
	// The maximum number of processes per pod.
	PodMaxPids *int `pulumi:"podMaxPids"`
	// Topology Manager policy to use.
	TopologyManagerPolicy *string `pulumi:"topologyManagerPolicy"`
}

// Kubelet configurations of agent nodes.
type KubeletConfigResponseOutput struct{ *pulumi.OutputState }

func (KubeletConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletConfigResponse)(nil)).Elem()
}

func (o KubeletConfigResponseOutput) ToKubeletConfigResponseOutput() KubeletConfigResponseOutput {
	return o
}

func (o KubeletConfigResponseOutput) ToKubeletConfigResponseOutputWithContext(ctx context.Context) KubeletConfigResponseOutput {
	return o
}

// Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigResponseOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubeletConfigResponse) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be â‰¥ 2.
func (o KubeletConfigResponseOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ContainerLogMaxFiles }).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigResponseOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ContainerLogMaxSizeMB }).(pulumi.IntPtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits.
func (o KubeletConfigResponseOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *bool { return v.CpuCfsQuota }).(pulumi.BoolPtrOutput)
}

// Sets CPU CFS quota period value.
func (o KubeletConfigResponseOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *string { return v.CpuCfsQuotaPeriod }).(pulumi.StringPtrOutput)
}

// CPU Manager policy to use.
func (o KubeletConfigResponseOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigResponseOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *bool { return v.FailSwapOn }).(pulumi.BoolPtrOutput)
}

// The percent of disk usage after which image garbage collection is always run.
func (o KubeletConfigResponseOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ImageGcHighThreshold }).(pulumi.IntPtrOutput)
}

// The percent of disk usage before which image garbage collection is never run.
func (o KubeletConfigResponseOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ImageGcLowThreshold }).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigResponseOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.PodMaxPids }).(pulumi.IntPtrOutput)
}

// Topology Manager policy to use.
func (o KubeletConfigResponseOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *string { return v.TopologyManagerPolicy }).(pulumi.StringPtrOutput)
}

type KubeletConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (KubeletConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletConfigResponse)(nil)).Elem()
}

func (o KubeletConfigResponsePtrOutput) ToKubeletConfigResponsePtrOutput() KubeletConfigResponsePtrOutput {
	return o
}

func (o KubeletConfigResponsePtrOutput) ToKubeletConfigResponsePtrOutputWithContext(ctx context.Context) KubeletConfigResponsePtrOutput {
	return o
}

func (o KubeletConfigResponsePtrOutput) Elem() KubeletConfigResponseOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) KubeletConfigResponse {
		if v != nil {
			return *v
		}
		var ret KubeletConfigResponse
		return ret
	}).(KubeletConfigResponseOutput)
}

// Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigResponsePtrOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedUnsafeSysctls
	}).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be â‰¥ 2.
func (o KubeletConfigResponsePtrOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxFiles
	}).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigResponsePtrOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxSizeMB
	}).(pulumi.IntPtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits.
func (o KubeletConfigResponsePtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// Sets CPU CFS quota period value.
func (o KubeletConfigResponsePtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// CPU Manager policy to use.
func (o KubeletConfigResponsePtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigResponsePtrOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return v.FailSwapOn
	}).(pulumi.BoolPtrOutput)
}

// The percent of disk usage after which image garbage collection is always run.
func (o KubeletConfigResponsePtrOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcHighThreshold
	}).(pulumi.IntPtrOutput)
}

// The percent of disk usage before which image garbage collection is never run.
func (o KubeletConfigResponsePtrOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcLowThreshold
	}).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigResponsePtrOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.PodMaxPids
	}).(pulumi.IntPtrOutput)
}

// Topology Manager policy to use.
func (o KubeletConfigResponsePtrOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TopologyManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// OS configurations of Linux agent nodes.
type LinuxOSConfig struct {
	// SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
	SwapFileSizeMB *int `pulumi:"swapFileSizeMB"`
	// Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfig `pulumi:"sysctls"`
	// Transparent Huge Page defrag configuration.
	TransparentHugePageDefrag *string `pulumi:"transparentHugePageDefrag"`
	// Transparent Huge Page enabled configuration.
	TransparentHugePageEnabled *string `pulumi:"transparentHugePageEnabled"`
}

// LinuxOSConfigInput is an input type that accepts LinuxOSConfigArgs and LinuxOSConfigOutput values.
// You can construct a concrete instance of `LinuxOSConfigInput` via:
//
//	LinuxOSConfigArgs{...}
type LinuxOSConfigInput interface {
	pulumi.Input

	ToLinuxOSConfigOutput() LinuxOSConfigOutput
	ToLinuxOSConfigOutputWithContext(context.Context) LinuxOSConfigOutput
}

// OS configurations of Linux agent nodes.
type LinuxOSConfigArgs struct {
	// SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
	SwapFileSizeMB pulumi.IntPtrInput `pulumi:"swapFileSizeMB"`
	// Sysctl settings for Linux agent nodes.
	Sysctls SysctlConfigPtrInput `pulumi:"sysctls"`
	// Transparent Huge Page defrag configuration.
	TransparentHugePageDefrag pulumi.StringPtrInput `pulumi:"transparentHugePageDefrag"`
	// Transparent Huge Page enabled configuration.
	TransparentHugePageEnabled pulumi.StringPtrInput `pulumi:"transparentHugePageEnabled"`
}

func (LinuxOSConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOSConfig)(nil)).Elem()
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigOutput() LinuxOSConfigOutput {
	return i.ToLinuxOSConfigOutputWithContext(context.Background())
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigOutputWithContext(ctx context.Context) LinuxOSConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOSConfigOutput)
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return i.ToLinuxOSConfigPtrOutputWithContext(context.Background())
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOSConfigOutput).ToLinuxOSConfigPtrOutputWithContext(ctx)
}

// LinuxOSConfigPtrInput is an input type that accepts LinuxOSConfigArgs, LinuxOSConfigPtr and LinuxOSConfigPtrOutput values.
// You can construct a concrete instance of `LinuxOSConfigPtrInput` via:
//
//	        LinuxOSConfigArgs{...}
//
//	or:
//
//	        nil
type LinuxOSConfigPtrInput interface {
	pulumi.Input

	ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput
	ToLinuxOSConfigPtrOutputWithContext(context.Context) LinuxOSConfigPtrOutput
}

type linuxOSConfigPtrType LinuxOSConfigArgs

func LinuxOSConfigPtr(v *LinuxOSConfigArgs) LinuxOSConfigPtrInput {
	return (*linuxOSConfigPtrType)(v)
}

func (*linuxOSConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOSConfig)(nil)).Elem()
}

func (i *linuxOSConfigPtrType) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return i.ToLinuxOSConfigPtrOutputWithContext(context.Background())
}

func (i *linuxOSConfigPtrType) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOSConfigPtrOutput)
}

// OS configurations of Linux agent nodes.
type LinuxOSConfigOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOSConfig)(nil)).Elem()
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigOutput() LinuxOSConfigOutput {
	return o
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigOutputWithContext(ctx context.Context) LinuxOSConfigOutput {
	return o
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return o.ToLinuxOSConfigPtrOutputWithContext(context.Background())
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxOSConfig) *LinuxOSConfig {
		return &v
	}).(LinuxOSConfigPtrOutput)
}

// SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
func (o LinuxOSConfigOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *int { return v.SwapFileSizeMB }).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigOutput) Sysctls() SysctlConfigPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *SysctlConfig { return v.Sysctls }).(SysctlConfigPtrOutput)
}

// Transparent Huge Page defrag configuration.
func (o LinuxOSConfigOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *string { return v.TransparentHugePageDefrag }).(pulumi.StringPtrOutput)
}

// Transparent Huge Page enabled configuration.
func (o LinuxOSConfigOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *string { return v.TransparentHugePageEnabled }).(pulumi.StringPtrOutput)
}

type LinuxOSConfigPtrOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOSConfig)(nil)).Elem()
}

func (o LinuxOSConfigPtrOutput) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return o
}

func (o LinuxOSConfigPtrOutput) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return o
}

func (o LinuxOSConfigPtrOutput) Elem() LinuxOSConfigOutput {
	return o.ApplyT(func(v *LinuxOSConfig) LinuxOSConfig {
		if v != nil {
			return *v
		}
		var ret LinuxOSConfig
		return ret
	}).(LinuxOSConfigOutput)
}

// SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
func (o LinuxOSConfigPtrOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *int {
		if v == nil {
			return nil
		}
		return v.SwapFileSizeMB
	}).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigPtrOutput) Sysctls() SysctlConfigPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *SysctlConfig {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(SysctlConfigPtrOutput)
}

// Transparent Huge Page defrag configuration.
func (o LinuxOSConfigPtrOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageDefrag
	}).(pulumi.StringPtrOutput)
}

// Transparent Huge Page enabled configuration.
func (o LinuxOSConfigPtrOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageEnabled
	}).(pulumi.StringPtrOutput)
}

// OS configurations of Linux agent nodes.
type LinuxOSConfigResponse struct {
	// SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
	SwapFileSizeMB *int `pulumi:"swapFileSizeMB"`
	// Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfigResponse `pulumi:"sysctls"`
	// Transparent Huge Page defrag configuration.
	TransparentHugePageDefrag *string `pulumi:"transparentHugePageDefrag"`
	// Transparent Huge Page enabled configuration.
	TransparentHugePageEnabled *string `pulumi:"transparentHugePageEnabled"`
}

// OS configurations of Linux agent nodes.
type LinuxOSConfigResponseOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOSConfigResponse)(nil)).Elem()
}

func (o LinuxOSConfigResponseOutput) ToLinuxOSConfigResponseOutput() LinuxOSConfigResponseOutput {
	return o
}

func (o LinuxOSConfigResponseOutput) ToLinuxOSConfigResponseOutputWithContext(ctx context.Context) LinuxOSConfigResponseOutput {
	return o
}

// SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
func (o LinuxOSConfigResponseOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *int { return v.SwapFileSizeMB }).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigResponseOutput) Sysctls() SysctlConfigResponsePtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *SysctlConfigResponse { return v.Sysctls }).(SysctlConfigResponsePtrOutput)
}

// Transparent Huge Page defrag configuration.
func (o LinuxOSConfigResponseOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *string { return v.TransparentHugePageDefrag }).(pulumi.StringPtrOutput)
}

// Transparent Huge Page enabled configuration.
func (o LinuxOSConfigResponseOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *string { return v.TransparentHugePageEnabled }).(pulumi.StringPtrOutput)
}

type LinuxOSConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOSConfigResponse)(nil)).Elem()
}

func (o LinuxOSConfigResponsePtrOutput) ToLinuxOSConfigResponsePtrOutput() LinuxOSConfigResponsePtrOutput {
	return o
}

func (o LinuxOSConfigResponsePtrOutput) ToLinuxOSConfigResponsePtrOutputWithContext(ctx context.Context) LinuxOSConfigResponsePtrOutput {
	return o
}

func (o LinuxOSConfigResponsePtrOutput) Elem() LinuxOSConfigResponseOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) LinuxOSConfigResponse {
		if v != nil {
			return *v
		}
		var ret LinuxOSConfigResponse
		return ret
	}).(LinuxOSConfigResponseOutput)
}

// SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
func (o LinuxOSConfigResponsePtrOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.SwapFileSizeMB
	}).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigResponsePtrOutput) Sysctls() SysctlConfigResponsePtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *SysctlConfigResponse {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(SysctlConfigResponsePtrOutput)
}

// Transparent Huge Page defrag configuration.
func (o LinuxOSConfigResponsePtrOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageDefrag
	}).(pulumi.StringPtrOutput)
}

// Transparent Huge Page enabled configuration.
func (o LinuxOSConfigResponsePtrOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageEnabled
	}).(pulumi.StringPtrOutput)
}

// Describes the Power State of the cluster
type PowerStateResponse struct {
	// Tells whether the cluster is Running or Stopped
	Code *string `pulumi:"code"`
}

// Describes the Power State of the cluster
type PowerStateResponseOutput struct{ *pulumi.OutputState }

func (PowerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerStateResponse)(nil)).Elem()
}

func (o PowerStateResponseOutput) ToPowerStateResponseOutput() PowerStateResponseOutput {
	return o
}

func (o PowerStateResponseOutput) ToPowerStateResponseOutputWithContext(ctx context.Context) PowerStateResponseOutput {
	return o
}

// Tells whether the cluster is Running or Stopped
func (o PowerStateResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerStateResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Sysctl settings for Linux agent nodes.
type SysctlConfig struct {
	// Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `pulumi:"fsAioMaxNr"`
	// Sysctl setting fs.file-max.
	FsFileMax *int `pulumi:"fsFileMax"`
	// Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `pulumi:"fsInotifyMaxUserWatches"`
	// Sysctl setting fs.nr_open.
	FsNrOpen *int `pulumi:"fsNrOpen"`
	// Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `pulumi:"kernelThreadsMax"`
	// Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `pulumi:"netCoreNetdevMaxBacklog"`
	// Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `pulumi:"netCoreOptmemMax"`
	// Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `pulumi:"netCoreRmemDefault"`
	// Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `pulumi:"netCoreRmemMax"`
	// Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `pulumi:"netCoreSomaxconn"`
	// Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `pulumi:"netCoreWmemDefault"`
	// Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `pulumi:"netCoreWmemMax"`
	// Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `pulumi:"netIpv4IpLocalPortRange"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `pulumi:"netIpv4NeighDefaultGcThresh1"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `pulumi:"netIpv4NeighDefaultGcThresh2"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `pulumi:"netIpv4NeighDefaultGcThresh3"`
	// Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `pulumi:"netIpv4TcpFinTimeout"`
	// Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `pulumi:"netIpv4TcpKeepaliveProbes"`
	// Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `pulumi:"netIpv4TcpKeepaliveTime"`
	// Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `pulumi:"netIpv4TcpMaxSynBacklog"`
	// Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `pulumi:"netIpv4TcpMaxTwBuckets"`
	// Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `pulumi:"netIpv4TcpTwReuse"`
	// Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `pulumi:"netIpv4TcpkeepaliveIntvl"`
	// Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `pulumi:"netNetfilterNfConntrackBuckets"`
	// Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `pulumi:"netNetfilterNfConntrackMax"`
	// Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `pulumi:"vmMaxMapCount"`
	// Sysctl setting vm.swappiness.
	VmSwappiness *int `pulumi:"vmSwappiness"`
	// Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `pulumi:"vmVfsCachePressure"`
}

// SysctlConfigInput is an input type that accepts SysctlConfigArgs and SysctlConfigOutput values.
// You can construct a concrete instance of `SysctlConfigInput` via:
//
//	SysctlConfigArgs{...}
type SysctlConfigInput interface {
	pulumi.Input

	ToSysctlConfigOutput() SysctlConfigOutput
	ToSysctlConfigOutputWithContext(context.Context) SysctlConfigOutput
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigArgs struct {
	// Sysctl setting fs.aio-max-nr.
	FsAioMaxNr pulumi.IntPtrInput `pulumi:"fsAioMaxNr"`
	// Sysctl setting fs.file-max.
	FsFileMax pulumi.IntPtrInput `pulumi:"fsFileMax"`
	// Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches pulumi.IntPtrInput `pulumi:"fsInotifyMaxUserWatches"`
	// Sysctl setting fs.nr_open.
	FsNrOpen pulumi.IntPtrInput `pulumi:"fsNrOpen"`
	// Sysctl setting kernel.threads-max.
	KernelThreadsMax pulumi.IntPtrInput `pulumi:"kernelThreadsMax"`
	// Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog pulumi.IntPtrInput `pulumi:"netCoreNetdevMaxBacklog"`
	// Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax pulumi.IntPtrInput `pulumi:"netCoreOptmemMax"`
	// Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault pulumi.IntPtrInput `pulumi:"netCoreRmemDefault"`
	// Sysctl setting net.core.rmem_max.
	NetCoreRmemMax pulumi.IntPtrInput `pulumi:"netCoreRmemMax"`
	// Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn pulumi.IntPtrInput `pulumi:"netCoreSomaxconn"`
	// Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault pulumi.IntPtrInput `pulumi:"netCoreWmemDefault"`
	// Sysctl setting net.core.wmem_max.
	NetCoreWmemMax pulumi.IntPtrInput `pulumi:"netCoreWmemMax"`
	// Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange pulumi.StringPtrInput `pulumi:"netIpv4IpLocalPortRange"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 pulumi.IntPtrInput `pulumi:"netIpv4NeighDefaultGcThresh1"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 pulumi.IntPtrInput `pulumi:"netIpv4NeighDefaultGcThresh2"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 pulumi.IntPtrInput `pulumi:"netIpv4NeighDefaultGcThresh3"`
	// Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout pulumi.IntPtrInput `pulumi:"netIpv4TcpFinTimeout"`
	// Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes pulumi.IntPtrInput `pulumi:"netIpv4TcpKeepaliveProbes"`
	// Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime pulumi.IntPtrInput `pulumi:"netIpv4TcpKeepaliveTime"`
	// Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog pulumi.IntPtrInput `pulumi:"netIpv4TcpMaxSynBacklog"`
	// Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets pulumi.IntPtrInput `pulumi:"netIpv4TcpMaxTwBuckets"`
	// Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse pulumi.BoolPtrInput `pulumi:"netIpv4TcpTwReuse"`
	// Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl pulumi.IntPtrInput `pulumi:"netIpv4TcpkeepaliveIntvl"`
	// Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets pulumi.IntPtrInput `pulumi:"netNetfilterNfConntrackBuckets"`
	// Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax pulumi.IntPtrInput `pulumi:"netNetfilterNfConntrackMax"`
	// Sysctl setting vm.max_map_count.
	VmMaxMapCount pulumi.IntPtrInput `pulumi:"vmMaxMapCount"`
	// Sysctl setting vm.swappiness.
	VmSwappiness pulumi.IntPtrInput `pulumi:"vmSwappiness"`
	// Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure pulumi.IntPtrInput `pulumi:"vmVfsCachePressure"`
}

func (SysctlConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlConfig)(nil)).Elem()
}

func (i SysctlConfigArgs) ToSysctlConfigOutput() SysctlConfigOutput {
	return i.ToSysctlConfigOutputWithContext(context.Background())
}

func (i SysctlConfigArgs) ToSysctlConfigOutputWithContext(ctx context.Context) SysctlConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlConfigOutput)
}

func (i SysctlConfigArgs) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return i.ToSysctlConfigPtrOutputWithContext(context.Background())
}

func (i SysctlConfigArgs) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlConfigOutput).ToSysctlConfigPtrOutputWithContext(ctx)
}

// SysctlConfigPtrInput is an input type that accepts SysctlConfigArgs, SysctlConfigPtr and SysctlConfigPtrOutput values.
// You can construct a concrete instance of `SysctlConfigPtrInput` via:
//
//	        SysctlConfigArgs{...}
//
//	or:
//
//	        nil
type SysctlConfigPtrInput interface {
	pulumi.Input

	ToSysctlConfigPtrOutput() SysctlConfigPtrOutput
	ToSysctlConfigPtrOutputWithContext(context.Context) SysctlConfigPtrOutput
}

type sysctlConfigPtrType SysctlConfigArgs

func SysctlConfigPtr(v *SysctlConfigArgs) SysctlConfigPtrInput {
	return (*sysctlConfigPtrType)(v)
}

func (*sysctlConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SysctlConfig)(nil)).Elem()
}

func (i *sysctlConfigPtrType) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return i.ToSysctlConfigPtrOutputWithContext(context.Background())
}

func (i *sysctlConfigPtrType) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlConfigPtrOutput)
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigOutput struct{ *pulumi.OutputState }

func (SysctlConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlConfig)(nil)).Elem()
}

func (o SysctlConfigOutput) ToSysctlConfigOutput() SysctlConfigOutput {
	return o
}

func (o SysctlConfigOutput) ToSysctlConfigOutputWithContext(ctx context.Context) SysctlConfigOutput {
	return o
}

func (o SysctlConfigOutput) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return o.ToSysctlConfigPtrOutputWithContext(context.Background())
}

func (o SysctlConfigOutput) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SysctlConfig) *SysctlConfig {
		return &v
	}).(SysctlConfigPtrOutput)
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsAioMaxNr }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsFileMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsInotifyMaxUserWatches }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsNrOpen }).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.KernelThreadsMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreNetdevMaxBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreOptmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreRmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreRmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreSomaxconn }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreWmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreWmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *string { return v.NetIpv4IpLocalPortRange }).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4NeighDefaultGcThresh1 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4NeighDefaultGcThresh2 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4NeighDefaultGcThresh3 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpFinTimeout }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpKeepaliveProbes }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpKeepaliveTime }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpMaxSynBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpMaxTwBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *bool { return v.NetIpv4TcpTwReuse }).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpkeepaliveIntvl }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetNetfilterNfConntrackBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetNetfilterNfConntrackMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.VmMaxMapCount }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.VmSwappiness }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.VmVfsCachePressure }).(pulumi.IntPtrOutput)
}

type SysctlConfigPtrOutput struct{ *pulumi.OutputState }

func (SysctlConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SysctlConfig)(nil)).Elem()
}

func (o SysctlConfigPtrOutput) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return o
}

func (o SysctlConfigPtrOutput) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return o
}

func (o SysctlConfigPtrOutput) Elem() SysctlConfigOutput {
	return o.ApplyT(func(v *SysctlConfig) SysctlConfig {
		if v != nil {
			return *v
		}
		var ret SysctlConfig
		return ret
	}).(SysctlConfigOutput)
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigPtrOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsAioMaxNr
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigPtrOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsFileMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigPtrOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsInotifyMaxUserWatches
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigPtrOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsNrOpen
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigPtrOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.KernelThreadsMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigPtrOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreNetdevMaxBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigPtrOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreOptmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigPtrOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigPtrOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigPtrOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreSomaxconn
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigPtrOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigPtrOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigPtrOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *string {
		if v == nil {
			return nil
		}
		return v.NetIpv4IpLocalPortRange
	}).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigPtrOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh1
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigPtrOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh2
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigPtrOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh3
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigPtrOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpFinTimeout
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigPtrOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveProbes
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigPtrOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveTime
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigPtrOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxSynBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigPtrOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxTwBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigPtrOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *bool {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpTwReuse
	}).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigPtrOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpkeepaliveIntvl
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigPtrOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigPtrOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigPtrOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.VmMaxMapCount
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigPtrOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.VmSwappiness
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigPtrOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.VmVfsCachePressure
	}).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigResponse struct {
	// Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `pulumi:"fsAioMaxNr"`
	// Sysctl setting fs.file-max.
	FsFileMax *int `pulumi:"fsFileMax"`
	// Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `pulumi:"fsInotifyMaxUserWatches"`
	// Sysctl setting fs.nr_open.
	FsNrOpen *int `pulumi:"fsNrOpen"`
	// Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `pulumi:"kernelThreadsMax"`
	// Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `pulumi:"netCoreNetdevMaxBacklog"`
	// Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `pulumi:"netCoreOptmemMax"`
	// Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `pulumi:"netCoreRmemDefault"`
	// Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `pulumi:"netCoreRmemMax"`
	// Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `pulumi:"netCoreSomaxconn"`
	// Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `pulumi:"netCoreWmemDefault"`
	// Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `pulumi:"netCoreWmemMax"`
	// Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `pulumi:"netIpv4IpLocalPortRange"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `pulumi:"netIpv4NeighDefaultGcThresh1"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `pulumi:"netIpv4NeighDefaultGcThresh2"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `pulumi:"netIpv4NeighDefaultGcThresh3"`
	// Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `pulumi:"netIpv4TcpFinTimeout"`
	// Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `pulumi:"netIpv4TcpKeepaliveProbes"`
	// Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `pulumi:"netIpv4TcpKeepaliveTime"`
	// Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `pulumi:"netIpv4TcpMaxSynBacklog"`
	// Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `pulumi:"netIpv4TcpMaxTwBuckets"`
	// Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `pulumi:"netIpv4TcpTwReuse"`
	// Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `pulumi:"netIpv4TcpkeepaliveIntvl"`
	// Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `pulumi:"netNetfilterNfConntrackBuckets"`
	// Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `pulumi:"netNetfilterNfConntrackMax"`
	// Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `pulumi:"vmMaxMapCount"`
	// Sysctl setting vm.swappiness.
	VmSwappiness *int `pulumi:"vmSwappiness"`
	// Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `pulumi:"vmVfsCachePressure"`
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigResponseOutput struct{ *pulumi.OutputState }

func (SysctlConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlConfigResponse)(nil)).Elem()
}

func (o SysctlConfigResponseOutput) ToSysctlConfigResponseOutput() SysctlConfigResponseOutput {
	return o
}

func (o SysctlConfigResponseOutput) ToSysctlConfigResponseOutputWithContext(ctx context.Context) SysctlConfigResponseOutput {
	return o
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigResponseOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsAioMaxNr }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigResponseOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsFileMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigResponseOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsInotifyMaxUserWatches }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigResponseOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsNrOpen }).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigResponseOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.KernelThreadsMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigResponseOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreNetdevMaxBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigResponseOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreOptmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigResponseOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreRmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigResponseOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreRmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigResponseOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreSomaxconn }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigResponseOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreWmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigResponseOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreWmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigResponseOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *string { return v.NetIpv4IpLocalPortRange }).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigResponseOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4NeighDefaultGcThresh1 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigResponseOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4NeighDefaultGcThresh2 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigResponseOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4NeighDefaultGcThresh3 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigResponseOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpFinTimeout }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigResponseOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpKeepaliveProbes }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigResponseOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpKeepaliveTime }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigResponseOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpMaxSynBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigResponseOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpMaxTwBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigResponseOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *bool { return v.NetIpv4TcpTwReuse }).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigResponseOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpkeepaliveIntvl }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigResponseOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetNetfilterNfConntrackBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigResponseOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetNetfilterNfConntrackMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigResponseOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.VmMaxMapCount }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigResponseOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.VmSwappiness }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigResponseOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.VmVfsCachePressure }).(pulumi.IntPtrOutput)
}

type SysctlConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SysctlConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SysctlConfigResponse)(nil)).Elem()
}

func (o SysctlConfigResponsePtrOutput) ToSysctlConfigResponsePtrOutput() SysctlConfigResponsePtrOutput {
	return o
}

func (o SysctlConfigResponsePtrOutput) ToSysctlConfigResponsePtrOutputWithContext(ctx context.Context) SysctlConfigResponsePtrOutput {
	return o
}

func (o SysctlConfigResponsePtrOutput) Elem() SysctlConfigResponseOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) SysctlConfigResponse {
		if v != nil {
			return *v
		}
		var ret SysctlConfigResponse
		return ret
	}).(SysctlConfigResponseOutput)
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigResponsePtrOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsAioMaxNr
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigResponsePtrOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsFileMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigResponsePtrOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsInotifyMaxUserWatches
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigResponsePtrOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsNrOpen
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigResponsePtrOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.KernelThreadsMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigResponsePtrOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreNetdevMaxBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigResponsePtrOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreOptmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigResponsePtrOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigResponsePtrOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigResponsePtrOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreSomaxconn
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigResponsePtrOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigResponsePtrOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigResponsePtrOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetIpv4IpLocalPortRange
	}).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigResponsePtrOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh1
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigResponsePtrOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh2
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigResponsePtrOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh3
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpFinTimeout
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveProbes
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveTime
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxSynBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxTwBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpTwReuse
	}).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpkeepaliveIntvl
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigResponsePtrOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigResponsePtrOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigResponsePtrOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.VmMaxMapCount
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigResponsePtrOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.VmSwappiness
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigResponsePtrOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.VmVfsCachePressure
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsResponseOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(KubeletConfigOutput{})
	pulumi.RegisterOutputType(KubeletConfigPtrOutput{})
	pulumi.RegisterOutputType(KubeletConfigResponseOutput{})
	pulumi.RegisterOutputType(KubeletConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigPtrOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigResponseOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(PowerStateResponseOutput{})
	pulumi.RegisterOutputType(SysctlConfigOutput{})
	pulumi.RegisterOutputType(SysctlConfigPtrOutput{})
	pulumi.RegisterOutputType(SysctlConfigResponseOutput{})
	pulumi.RegisterOutputType(SysctlConfigResponsePtrOutput{})
}
