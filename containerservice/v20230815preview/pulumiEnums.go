// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230815preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ManagedClusterUpgradeType is the type of upgrade to be applied.
type ManagedClusterUpgradeType string

const (
	// Full upgrades the control plane and all agent pools of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set.
	ManagedClusterUpgradeTypeFull = ManagedClusterUpgradeType("Full")
	// NodeImageOnly upgrades only the node images of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to NOT be set.
	ManagedClusterUpgradeTypeNodeImageOnly = ManagedClusterUpgradeType("NodeImageOnly")
)

func (ManagedClusterUpgradeType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpgradeType)(nil)).Elem()
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypeOutput() ManagedClusterUpgradeTypeOutput {
	return pulumi.ToOutput(e).(ManagedClusterUpgradeTypeOutput)
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypeOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedClusterUpgradeTypeOutput)
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return e.ToManagedClusterUpgradeTypePtrOutputWithContext(context.Background())
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return ManagedClusterUpgradeType(e).ToManagedClusterUpgradeTypeOutputWithContext(ctx).ToManagedClusterUpgradeTypePtrOutputWithContext(ctx)
}

func (e ManagedClusterUpgradeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterUpgradeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterUpgradeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedClusterUpgradeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedClusterUpgradeTypeOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpgradeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpgradeType)(nil)).Elem()
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypeOutput() ManagedClusterUpgradeTypeOutput {
	return o
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypeOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypeOutput {
	return o
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return o.ToManagedClusterUpgradeTypePtrOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterUpgradeType) *ManagedClusterUpgradeType {
		return &v
	}).(ManagedClusterUpgradeTypePtrOutput)
}

func (o ManagedClusterUpgradeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterUpgradeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedClusterUpgradeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterUpgradeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedClusterUpgradeTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpgradeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterUpgradeType)(nil)).Elem()
}

func (o ManagedClusterUpgradeTypePtrOutput) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return o
}

func (o ManagedClusterUpgradeTypePtrOutput) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return o
}

func (o ManagedClusterUpgradeTypePtrOutput) Elem() ManagedClusterUpgradeTypeOutput {
	return o.ApplyT(func(v *ManagedClusterUpgradeType) ManagedClusterUpgradeType {
		if v != nil {
			return *v
		}
		var ret ManagedClusterUpgradeType
		return ret
	}).(ManagedClusterUpgradeTypeOutput)
}

func (o ManagedClusterUpgradeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedClusterUpgradeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedClusterUpgradeTypeInput is an input type that accepts values of the ManagedClusterUpgradeType enum
// A concrete instance of `ManagedClusterUpgradeTypeInput` can be one of the following:
//
//	ManagedClusterUpgradeTypeFull
//	ManagedClusterUpgradeTypeNodeImageOnly
type ManagedClusterUpgradeTypeInput interface {
	pulumi.Input

	ToManagedClusterUpgradeTypeOutput() ManagedClusterUpgradeTypeOutput
	ToManagedClusterUpgradeTypeOutputWithContext(context.Context) ManagedClusterUpgradeTypeOutput
}

var managedClusterUpgradeTypePtrType = reflect.TypeOf((**ManagedClusterUpgradeType)(nil)).Elem()

type ManagedClusterUpgradeTypePtrInput interface {
	pulumi.Input

	ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput
	ToManagedClusterUpgradeTypePtrOutputWithContext(context.Context) ManagedClusterUpgradeTypePtrOutput
}

type managedClusterUpgradeTypePtr string

func ManagedClusterUpgradeTypePtr(v string) ManagedClusterUpgradeTypePtrInput {
	return (*managedClusterUpgradeTypePtr)(&v)
}

func (*managedClusterUpgradeTypePtr) ElementType() reflect.Type {
	return managedClusterUpgradeTypePtrType
}

func (in *managedClusterUpgradeTypePtr) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedClusterUpgradeTypePtrOutput)
}

func (in *managedClusterUpgradeTypePtr) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedClusterUpgradeTypePtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned, UserAssigned")
)

func (ManagedServiceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return e.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return ManagedServiceIdentityType(e).ToManagedServiceIdentityTypeOutputWithContext(ctx).ToManagedServiceIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedServiceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedServiceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentityType) *ManagedServiceIdentityType {
		return &v
	}).(ManagedServiceIdentityTypePtrOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedServiceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) Elem() ManagedServiceIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityType) ManagedServiceIdentityType {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityType
		return ret
	}).(ManagedServiceIdentityTypeOutput)
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedServiceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedServiceIdentityTypeInput is an input type that accepts values of the ManagedServiceIdentityType enum
// A concrete instance of `ManagedServiceIdentityTypeInput` can be one of the following:
//
//	ManagedServiceIdentityTypeNone
//	ManagedServiceIdentityTypeSystemAssigned
//	ManagedServiceIdentityTypeUserAssigned
//	ManagedServiceIdentityType_SystemAssigned_UserAssigned
type ManagedServiceIdentityTypeInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput
	ToManagedServiceIdentityTypeOutputWithContext(context.Context) ManagedServiceIdentityTypeOutput
}

var managedServiceIdentityTypePtrType = reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()

type ManagedServiceIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput
	ToManagedServiceIdentityTypePtrOutputWithContext(context.Context) ManagedServiceIdentityTypePtrOutput
}

type managedServiceIdentityTypePtr string

func ManagedServiceIdentityTypePtr(v string) ManagedServiceIdentityTypePtrInput {
	return (*managedServiceIdentityTypePtr)(&v)
}

func (*managedServiceIdentityTypePtr) ElementType() reflect.Type {
	return managedServiceIdentityTypePtrType
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedServiceIdentityTypePtrOutput)
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedServiceIdentityTypePtrOutput)
}

// The node image upgrade type.
type NodeImageSelectionType string

const (
	// Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions.
	NodeImageSelectionTypeLatest = NodeImageSelectionType("Latest")
	// The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'.
	NodeImageSelectionTypeConsistent = NodeImageSelectionType("Consistent")
)

func (NodeImageSelectionType) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelectionType)(nil)).Elem()
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypeOutput() NodeImageSelectionTypeOutput {
	return pulumi.ToOutput(e).(NodeImageSelectionTypeOutput)
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypeOutputWithContext(ctx context.Context) NodeImageSelectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NodeImageSelectionTypeOutput)
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return e.ToNodeImageSelectionTypePtrOutputWithContext(context.Background())
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return NodeImageSelectionType(e).ToNodeImageSelectionTypeOutputWithContext(ctx).ToNodeImageSelectionTypePtrOutputWithContext(ctx)
}

func (e NodeImageSelectionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeImageSelectionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeImageSelectionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeImageSelectionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NodeImageSelectionTypeOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelectionType)(nil)).Elem()
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypeOutput() NodeImageSelectionTypeOutput {
	return o
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypeOutputWithContext(ctx context.Context) NodeImageSelectionTypeOutput {
	return o
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return o.ToNodeImageSelectionTypePtrOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeImageSelectionType) *NodeImageSelectionType {
		return &v
	}).(NodeImageSelectionTypePtrOutput)
}

func (o NodeImageSelectionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeImageSelectionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NodeImageSelectionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeImageSelectionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NodeImageSelectionTypePtrOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeImageSelectionType)(nil)).Elem()
}

func (o NodeImageSelectionTypePtrOutput) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return o
}

func (o NodeImageSelectionTypePtrOutput) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return o
}

func (o NodeImageSelectionTypePtrOutput) Elem() NodeImageSelectionTypeOutput {
	return o.ApplyT(func(v *NodeImageSelectionType) NodeImageSelectionType {
		if v != nil {
			return *v
		}
		var ret NodeImageSelectionType
		return ret
	}).(NodeImageSelectionTypeOutput)
}

func (o NodeImageSelectionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NodeImageSelectionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NodeImageSelectionTypeInput is an input type that accepts values of the NodeImageSelectionType enum
// A concrete instance of `NodeImageSelectionTypeInput` can be one of the following:
//
//	NodeImageSelectionTypeLatest
//	NodeImageSelectionTypeConsistent
type NodeImageSelectionTypeInput interface {
	pulumi.Input

	ToNodeImageSelectionTypeOutput() NodeImageSelectionTypeOutput
	ToNodeImageSelectionTypeOutputWithContext(context.Context) NodeImageSelectionTypeOutput
}

var nodeImageSelectionTypePtrType = reflect.TypeOf((**NodeImageSelectionType)(nil)).Elem()

type NodeImageSelectionTypePtrInput interface {
	pulumi.Input

	ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput
	ToNodeImageSelectionTypePtrOutputWithContext(context.Context) NodeImageSelectionTypePtrOutput
}

type nodeImageSelectionTypePtr string

func NodeImageSelectionTypePtr(v string) NodeImageSelectionTypePtrInput {
	return (*nodeImageSelectionTypePtr)(&v)
}

func (*nodeImageSelectionTypePtr) ElementType() reflect.Type {
	return nodeImageSelectionTypePtrType
}

func (in *nodeImageSelectionTypePtr) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return pulumi.ToOutput(in).(NodeImageSelectionTypePtrOutput)
}

func (in *nodeImageSelectionTypePtr) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NodeImageSelectionTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedClusterUpgradeTypeOutput{})
	pulumi.RegisterOutputType(ManagedClusterUpgradeTypePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionTypeOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionTypePtrOutput{})
}
