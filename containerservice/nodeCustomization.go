// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Node Customization resource.
//
// Uses Azure REST API version 2025-08-02-preview.
//
// Other available API versions: 2025-09-02-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native containerservice [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type NodeCustomization struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
	ETag pulumi.StringOutput `pulumi:"eTag"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties NodeCustomizationPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNodeCustomization registers a new resource with the given unique name, arguments, and options.
func NewNodeCustomization(ctx *pulumi.Context,
	name string, args *NodeCustomizationArgs, opts ...pulumi.ResourceOption) (*NodeCustomization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerservice/v20250802preview:NodeCustomization"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20250902preview:NodeCustomization"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource NodeCustomization
	err := ctx.RegisterResource("azure-native:containerservice:NodeCustomization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeCustomization gets an existing NodeCustomization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeCustomization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeCustomizationState, opts ...pulumi.ResourceOption) (*NodeCustomization, error) {
	var resource NodeCustomization
	err := ctx.ReadResource("azure-native:containerservice:NodeCustomization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeCustomization resources.
type nodeCustomizationState struct {
}

type NodeCustomizationState struct {
}

func (NodeCustomizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeCustomizationState)(nil)).Elem()
}

type nodeCustomizationArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the Node Customization resource.
	NodeCustomizationName *string `pulumi:"nodeCustomizationName"`
	// The resource-specific properties for this resource.
	Properties *NodeCustomizationProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NodeCustomization resource.
type NodeCustomizationArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the Node Customization resource.
	NodeCustomizationName pulumi.StringPtrInput
	// The resource-specific properties for this resource.
	Properties NodeCustomizationPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (NodeCustomizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeCustomizationArgs)(nil)).Elem()
}

type NodeCustomizationInput interface {
	pulumi.Input

	ToNodeCustomizationOutput() NodeCustomizationOutput
	ToNodeCustomizationOutputWithContext(ctx context.Context) NodeCustomizationOutput
}

func (*NodeCustomization) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeCustomization)(nil)).Elem()
}

func (i *NodeCustomization) ToNodeCustomizationOutput() NodeCustomizationOutput {
	return i.ToNodeCustomizationOutputWithContext(context.Background())
}

func (i *NodeCustomization) ToNodeCustomizationOutputWithContext(ctx context.Context) NodeCustomizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeCustomizationOutput)
}

type NodeCustomizationOutput struct{ *pulumi.OutputState }

func (NodeCustomizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeCustomization)(nil)).Elem()
}

func (o NodeCustomizationOutput) ToNodeCustomizationOutput() NodeCustomizationOutput {
	return o
}

func (o NodeCustomizationOutput) ToNodeCustomizationOutputWithContext(ctx context.Context) NodeCustomizationOutput {
	return o
}

// The Azure API version of the resource.
func (o NodeCustomizationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeCustomization) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
func (o NodeCustomizationOutput) ETag() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeCustomization) pulumi.StringOutput { return v.ETag }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o NodeCustomizationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeCustomization) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o NodeCustomizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeCustomization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o NodeCustomizationOutput) Properties() NodeCustomizationPropertiesResponseOutput {
	return o.ApplyT(func(v *NodeCustomization) NodeCustomizationPropertiesResponseOutput { return v.Properties }).(NodeCustomizationPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o NodeCustomizationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NodeCustomization) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o NodeCustomizationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeCustomization) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o NodeCustomizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeCustomization) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(NodeCustomizationOutput{})
}
