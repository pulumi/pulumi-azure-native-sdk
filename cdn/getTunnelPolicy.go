// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets an existing tunnel policy within a profile.
//
// Uses Azure REST API version 2024-06-01-preview.
func LookupTunnelPolicy(ctx *pulumi.Context, args *LookupTunnelPolicyArgs, opts ...pulumi.InvokeOption) (*LookupTunnelPolicyResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupTunnelPolicyResult
	err := ctx.Invoke("azure-native:cdn:getTunnelPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTunnelPolicyArgs struct {
	// Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
	ProfileName string `pulumi:"profileName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the Tunnel Policy under the profile.
	TunnelPolicyName string `pulumi:"tunnelPolicyName"`
}

// Tunnel Policy maps domains to target endpoints to process traffic over the tunnelling protocol.
type LookupTunnelPolicyResult struct {
	DeploymentStatus string `pulumi:"deploymentStatus"`
	// Domains referenced by this tunnel policy.
	Domains []ActivatedResourceReferenceResponse `pulumi:"domains"`
	// Resource ID.
	Id string `pulumi:"id"`
	// Resource name.
	Name string `pulumi:"name"`
	// Provisioning status
	ProvisioningState string `pulumi:"provisioningState"`
	// Read only system data
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Target Groups referenced by this tunnel policy.
	TargetGroups []ResourceReferenceResponse `pulumi:"targetGroups"`
	// Protocol this tunnel will use for allowing traffic to backends.
	TunnelType *string `pulumi:"tunnelType"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupTunnelPolicyOutput(ctx *pulumi.Context, args LookupTunnelPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupTunnelPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTunnelPolicyResultOutput, error) {
			args := v.(LookupTunnelPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:cdn:getTunnelPolicy", args, LookupTunnelPolicyResultOutput{}, options).(LookupTunnelPolicyResultOutput), nil
		}).(LookupTunnelPolicyResultOutput)
}

type LookupTunnelPolicyOutputArgs struct {
	// Name of the Azure Front Door Standard or Azure Front Door Premium which is unique within the resource group.
	ProfileName pulumi.StringInput `pulumi:"profileName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the Tunnel Policy under the profile.
	TunnelPolicyName pulumi.StringInput `pulumi:"tunnelPolicyName"`
}

func (LookupTunnelPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTunnelPolicyArgs)(nil)).Elem()
}

// Tunnel Policy maps domains to target endpoints to process traffic over the tunnelling protocol.
type LookupTunnelPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupTunnelPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTunnelPolicyResult)(nil)).Elem()
}

func (o LookupTunnelPolicyResultOutput) ToLookupTunnelPolicyResultOutput() LookupTunnelPolicyResultOutput {
	return o
}

func (o LookupTunnelPolicyResultOutput) ToLookupTunnelPolicyResultOutputWithContext(ctx context.Context) LookupTunnelPolicyResultOutput {
	return o
}

func (o LookupTunnelPolicyResultOutput) DeploymentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) string { return v.DeploymentStatus }).(pulumi.StringOutput)
}

// Domains referenced by this tunnel policy.
func (o LookupTunnelPolicyResultOutput) Domains() ActivatedResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) []ActivatedResourceReferenceResponse { return v.Domains }).(ActivatedResourceReferenceResponseArrayOutput)
}

// Resource ID.
func (o LookupTunnelPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupTunnelPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning status
func (o LookupTunnelPolicyResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Read only system data
func (o LookupTunnelPolicyResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Target Groups referenced by this tunnel policy.
func (o LookupTunnelPolicyResultOutput) TargetGroups() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) []ResourceReferenceResponse { return v.TargetGroups }).(ResourceReferenceResponseArrayOutput)
}

// Protocol this tunnel will use for allowing traffic to backends.
func (o LookupTunnelPolicyResultOutput) TunnelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) *string { return v.TunnelType }).(pulumi.StringPtrOutput)
}

// Resource type.
func (o LookupTunnelPolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelPolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTunnelPolicyResultOutput{})
}
