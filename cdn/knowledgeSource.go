// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines a knowledge source resource for a web agent.
//
// Uses Azure REST API version 2025-09-01-preview.
type KnowledgeSource struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Description of the knowledge source.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The last time the knowledge source was updated.
	LastRefreshedTime pulumi.StringOutput `pulumi:"lastRefreshedTime"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning status of the knowledge source.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Format or origin of the knowledge source.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the units of time for scheduling update intervals for the knowledge source.
	UpdateFrequency pulumi.StringPtrOutput `pulumi:"updateFrequency"`
	// Endpoint or location of the knowledge source.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewKnowledgeSource registers a new resource with the given unique name, arguments, and options.
func NewKnowledgeSource(ctx *pulumi.Context,
	name string, args *KnowledgeSourceArgs, opts ...pulumi.ResourceOption) (*KnowledgeSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceType'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.WebAgentName == nil {
		return nil, errors.New("invalid value for required argument 'WebAgentName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cdn/v20250901preview:KnowledgeSource"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KnowledgeSource
	err := ctx.RegisterResource("azure-native:cdn:KnowledgeSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKnowledgeSource gets an existing KnowledgeSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKnowledgeSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KnowledgeSourceState, opts ...pulumi.ResourceOption) (*KnowledgeSource, error) {
	var resource KnowledgeSource
	err := ctx.ReadResource("azure-native:cdn:KnowledgeSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KnowledgeSource resources.
type knowledgeSourceState struct {
}

type KnowledgeSourceState struct {
}

func (KnowledgeSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*knowledgeSourceState)(nil)).Elem()
}

type knowledgeSourceArgs struct {
	// Description of the knowledge source.
	Description *string `pulumi:"description"`
	// The name of the knowledge source.
	KnowledgeSourceName *string `pulumi:"knowledgeSourceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Format or origin of the knowledge source.
	SourceType string `pulumi:"sourceType"`
	// Specifies the units of time for scheduling update intervals for the knowledge source.
	UpdateFrequency *string `pulumi:"updateFrequency"`
	// Endpoint or location of the knowledge source.
	Url string `pulumi:"url"`
	// The name of the web agent.
	WebAgentName string `pulumi:"webAgentName"`
}

// The set of arguments for constructing a KnowledgeSource resource.
type KnowledgeSourceArgs struct {
	// Description of the knowledge source.
	Description pulumi.StringPtrInput
	// The name of the knowledge source.
	KnowledgeSourceName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Format or origin of the knowledge source.
	SourceType pulumi.StringInput
	// Specifies the units of time for scheduling update intervals for the knowledge source.
	UpdateFrequency pulumi.StringPtrInput
	// Endpoint or location of the knowledge source.
	Url pulumi.StringInput
	// The name of the web agent.
	WebAgentName pulumi.StringInput
}

func (KnowledgeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*knowledgeSourceArgs)(nil)).Elem()
}

type KnowledgeSourceInput interface {
	pulumi.Input

	ToKnowledgeSourceOutput() KnowledgeSourceOutput
	ToKnowledgeSourceOutputWithContext(ctx context.Context) KnowledgeSourceOutput
}

func (*KnowledgeSource) ElementType() reflect.Type {
	return reflect.TypeOf((**KnowledgeSource)(nil)).Elem()
}

func (i *KnowledgeSource) ToKnowledgeSourceOutput() KnowledgeSourceOutput {
	return i.ToKnowledgeSourceOutputWithContext(context.Background())
}

func (i *KnowledgeSource) ToKnowledgeSourceOutputWithContext(ctx context.Context) KnowledgeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeSourceOutput)
}

type KnowledgeSourceOutput struct{ *pulumi.OutputState }

func (KnowledgeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KnowledgeSource)(nil)).Elem()
}

func (o KnowledgeSourceOutput) ToKnowledgeSourceOutput() KnowledgeSourceOutput {
	return o
}

func (o KnowledgeSourceOutput) ToKnowledgeSourceOutputWithContext(ctx context.Context) KnowledgeSourceOutput {
	return o
}

// The Azure API version of the resource.
func (o KnowledgeSourceOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Description of the knowledge source.
func (o KnowledgeSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The last time the knowledge source was updated.
func (o KnowledgeSourceOutput) LastRefreshedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringOutput { return v.LastRefreshedTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o KnowledgeSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning status of the knowledge source.
func (o KnowledgeSourceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Format or origin of the knowledge source.
func (o KnowledgeSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o KnowledgeSourceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *KnowledgeSource) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o KnowledgeSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the units of time for scheduling update intervals for the knowledge source.
func (o KnowledgeSourceOutput) UpdateFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringPtrOutput { return v.UpdateFrequency }).(pulumi.StringPtrOutput)
}

// Endpoint or location of the knowledge source.
func (o KnowledgeSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *KnowledgeSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(KnowledgeSourceOutput{})
}
