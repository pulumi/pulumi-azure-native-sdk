// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240722preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Concrete tracked resource types can be created by aliasing this type using a specific property type.
type EdgeActionVersion struct {
	pulumi.CustomResourceState

	// The deployment type
	DeploymentType pulumi.StringOutput `pulumi:"deploymentType"`
	// The active state
	IsDefaultVersion pulumi.StringOutput `pulumi:"isDefaultVersion"`
	// The last update time in UTC for package update
	LastPackageUpdateTime pulumi.StringOutput `pulumi:"lastPackageUpdateTime"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The validation status
	ValidationStatus pulumi.StringOutput `pulumi:"validationStatus"`
}

// NewEdgeActionVersion registers a new resource with the given unique name, arguments, and options.
func NewEdgeActionVersion(ctx *pulumi.Context,
	name string, args *EdgeActionVersionArgs, opts ...pulumi.ResourceOption) (*EdgeActionVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentType == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentType'")
	}
	if args.EdgeActionName == nil {
		return nil, errors.New("invalid value for required argument 'EdgeActionName'")
	}
	if args.IsDefaultVersion == nil {
		return nil, errors.New("invalid value for required argument 'IsDefaultVersion'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EdgeActionVersion
	err := ctx.RegisterResource("azure-native:cdn/v20240722preview:EdgeActionVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeActionVersion gets an existing EdgeActionVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeActionVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeActionVersionState, opts ...pulumi.ResourceOption) (*EdgeActionVersion, error) {
	var resource EdgeActionVersion
	err := ctx.ReadResource("azure-native:cdn/v20240722preview:EdgeActionVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeActionVersion resources.
type edgeActionVersionState struct {
}

type EdgeActionVersionState struct {
}

func (EdgeActionVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeActionVersionState)(nil)).Elem()
}

type edgeActionVersionArgs struct {
	// The deployment type
	DeploymentType string `pulumi:"deploymentType"`
	// The name of the Edge Action
	EdgeActionName string `pulumi:"edgeActionName"`
	// The active state
	IsDefaultVersion string `pulumi:"isDefaultVersion"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the Edge Action version
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a EdgeActionVersion resource.
type EdgeActionVersionArgs struct {
	// The deployment type
	DeploymentType pulumi.StringInput
	// The name of the Edge Action
	EdgeActionName pulumi.StringInput
	// The active state
	IsDefaultVersion pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the Edge Action version
	Version pulumi.StringPtrInput
}

func (EdgeActionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeActionVersionArgs)(nil)).Elem()
}

type EdgeActionVersionInput interface {
	pulumi.Input

	ToEdgeActionVersionOutput() EdgeActionVersionOutput
	ToEdgeActionVersionOutputWithContext(ctx context.Context) EdgeActionVersionOutput
}

func (*EdgeActionVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeActionVersion)(nil)).Elem()
}

func (i *EdgeActionVersion) ToEdgeActionVersionOutput() EdgeActionVersionOutput {
	return i.ToEdgeActionVersionOutputWithContext(context.Background())
}

func (i *EdgeActionVersion) ToEdgeActionVersionOutputWithContext(ctx context.Context) EdgeActionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeActionVersionOutput)
}

type EdgeActionVersionOutput struct{ *pulumi.OutputState }

func (EdgeActionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeActionVersion)(nil)).Elem()
}

func (o EdgeActionVersionOutput) ToEdgeActionVersionOutput() EdgeActionVersionOutput {
	return o
}

func (o EdgeActionVersionOutput) ToEdgeActionVersionOutputWithContext(ctx context.Context) EdgeActionVersionOutput {
	return o
}

// The deployment type
func (o EdgeActionVersionOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.DeploymentType }).(pulumi.StringOutput)
}

// The active state
func (o EdgeActionVersionOutput) IsDefaultVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.IsDefaultVersion }).(pulumi.StringOutput)
}

// The last update time in UTC for package update
func (o EdgeActionVersionOutput) LastPackageUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.LastPackageUpdateTime }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o EdgeActionVersionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EdgeActionVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state
func (o EdgeActionVersionOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EdgeActionVersionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *EdgeActionVersion) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o EdgeActionVersionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EdgeActionVersionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The validation status
func (o EdgeActionVersionOutput) ValidationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeActionVersion) pulumi.StringOutput { return v.ValidationStatus }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EdgeActionVersionOutput{})
}
