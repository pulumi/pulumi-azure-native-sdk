// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a replication link.
// Azure REST API version: 2023-05-01-preview.
func LookupReplicationLink(ctx *pulumi.Context, args *LookupReplicationLinkArgs, opts ...pulumi.InvokeOption) (*LookupReplicationLinkResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupReplicationLinkResult
	err := ctx.Invoke("azure-native:sql:getReplicationLink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupReplicationLinkArgs struct {
	// The name of the database.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the replication link.
	LinkId string `pulumi:"linkId"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
}

// A replication link.
type LookupReplicationLinkResult struct {
	// Resource ID.
	Id string `pulumi:"id"`
	// Whether the user is currently allowed to terminate the link.
	IsTerminationAllowed bool `pulumi:"isTerminationAllowed"`
	// Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
	LinkType *string `pulumi:"linkType"`
	// Resource name.
	Name string `pulumi:"name"`
	// Resource partner database.
	PartnerDatabase string `pulumi:"partnerDatabase"`
	// Resource partner database Id.
	PartnerDatabaseId string `pulumi:"partnerDatabaseId"`
	// Resource partner location.
	PartnerLocation string `pulumi:"partnerLocation"`
	// Partner replication role.
	PartnerRole string `pulumi:"partnerRole"`
	// Resource partner server.
	PartnerServer string `pulumi:"partnerServer"`
	// Seeding completion percentage for the link.
	PercentComplete int `pulumi:"percentComplete"`
	// Replication mode.
	ReplicationMode string `pulumi:"replicationMode"`
	// Replication state (PENDING, SEEDING, CATCHUP, SUSPENDED).
	ReplicationState string `pulumi:"replicationState"`
	// Local replication role.
	Role string `pulumi:"role"`
	// Time at which the link was created.
	StartTime string `pulumi:"startTime"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupReplicationLinkOutput(ctx *pulumi.Context, args LookupReplicationLinkOutputArgs, opts ...pulumi.InvokeOption) LookupReplicationLinkResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReplicationLinkResult, error) {
			args := v.(LookupReplicationLinkArgs)
			r, err := LookupReplicationLink(ctx, &args, opts...)
			var s LookupReplicationLinkResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupReplicationLinkResultOutput)
}

type LookupReplicationLinkOutputArgs struct {
	// The name of the database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the replication link.
	LinkId pulumi.StringInput `pulumi:"linkId"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
}

func (LookupReplicationLinkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationLinkArgs)(nil)).Elem()
}

// A replication link.
type LookupReplicationLinkResultOutput struct{ *pulumi.OutputState }

func (LookupReplicationLinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationLinkResult)(nil)).Elem()
}

func (o LookupReplicationLinkResultOutput) ToLookupReplicationLinkResultOutput() LookupReplicationLinkResultOutput {
	return o
}

func (o LookupReplicationLinkResultOutput) ToLookupReplicationLinkResultOutputWithContext(ctx context.Context) LookupReplicationLinkResultOutput {
	return o
}

// Resource ID.
func (o LookupReplicationLinkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the user is currently allowed to terminate the link.
func (o LookupReplicationLinkResultOutput) IsTerminationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) bool { return v.IsTerminationAllowed }).(pulumi.BoolOutput)
}

// Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
func (o LookupReplicationLinkResultOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o LookupReplicationLinkResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.Name }).(pulumi.StringOutput)
}

// Resource partner database.
func (o LookupReplicationLinkResultOutput) PartnerDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.PartnerDatabase }).(pulumi.StringOutput)
}

// Resource partner database Id.
func (o LookupReplicationLinkResultOutput) PartnerDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.PartnerDatabaseId }).(pulumi.StringOutput)
}

// Resource partner location.
func (o LookupReplicationLinkResultOutput) PartnerLocation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.PartnerLocation }).(pulumi.StringOutput)
}

// Partner replication role.
func (o LookupReplicationLinkResultOutput) PartnerRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.PartnerRole }).(pulumi.StringOutput)
}

// Resource partner server.
func (o LookupReplicationLinkResultOutput) PartnerServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.PartnerServer }).(pulumi.StringOutput)
}

// Seeding completion percentage for the link.
func (o LookupReplicationLinkResultOutput) PercentComplete() pulumi.IntOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) int { return v.PercentComplete }).(pulumi.IntOutput)
}

// Replication mode.
func (o LookupReplicationLinkResultOutput) ReplicationMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.ReplicationMode }).(pulumi.StringOutput)
}

// Replication state (PENDING, SEEDING, CATCHUP, SUSPENDED).
func (o LookupReplicationLinkResultOutput) ReplicationState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.ReplicationState }).(pulumi.StringOutput)
}

// Local replication role.
func (o LookupReplicationLinkResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.Role }).(pulumi.StringOutput)
}

// Time at which the link was created.
func (o LookupReplicationLinkResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// Resource type.
func (o LookupReplicationLinkResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationLinkResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReplicationLinkResultOutput{})
}
