// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Azure SQL virtual cluster.
//
// Uses Azure REST API version 2024-11-01-preview.
type VirtualCluster struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// List of resources in this virtual cluster.
	ChildResources pulumi.StringArrayOutput `pulumi:"childResources"`
	// Resource location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Subnet resource ID for the virtual cluster.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Virtual cluster version.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewVirtualCluster registers a new resource with the given unique name, arguments, and options.
func NewVirtualCluster(ctx *pulumi.Context,
	name string, args *VirtualClusterArgs, opts ...pulumi.ResourceOption) (*VirtualCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:sql/v20241101preview:VirtualCluster"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VirtualCluster
	err := ctx.RegisterResource("azure-native:sql:VirtualCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualCluster gets an existing VirtualCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualClusterState, opts ...pulumi.ResourceOption) (*VirtualCluster, error) {
	var resource VirtualCluster
	err := ctx.ReadResource("azure-native:sql:VirtualCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualCluster resources.
type virtualClusterState struct {
}

type VirtualClusterState struct {
}

func (VirtualClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualClusterState)(nil)).Elem()
}

type virtualClusterArgs struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Virtual cluster version.
	Version *string `pulumi:"version"`
	// The name of the virtual cluster.
	VirtualClusterName *string `pulumi:"virtualClusterName"`
}

// The set of arguments for constructing a VirtualCluster resource.
type VirtualClusterArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Virtual cluster version.
	Version pulumi.StringPtrInput
	// The name of the virtual cluster.
	VirtualClusterName pulumi.StringPtrInput
}

func (VirtualClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualClusterArgs)(nil)).Elem()
}

type VirtualClusterInput interface {
	pulumi.Input

	ToVirtualClusterOutput() VirtualClusterOutput
	ToVirtualClusterOutputWithContext(ctx context.Context) VirtualClusterOutput
}

func (*VirtualCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCluster)(nil)).Elem()
}

func (i *VirtualCluster) ToVirtualClusterOutput() VirtualClusterOutput {
	return i.ToVirtualClusterOutputWithContext(context.Background())
}

func (i *VirtualCluster) ToVirtualClusterOutputWithContext(ctx context.Context) VirtualClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualClusterOutput)
}

type VirtualClusterOutput struct{ *pulumi.OutputState }

func (VirtualClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualCluster)(nil)).Elem()
}

func (o VirtualClusterOutput) ToVirtualClusterOutput() VirtualClusterOutput {
	return o
}

func (o VirtualClusterOutput) ToVirtualClusterOutputWithContext(ctx context.Context) VirtualClusterOutput {
	return o
}

// The Azure API version of the resource.
func (o VirtualClusterOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// List of resources in this virtual cluster.
func (o VirtualClusterOutput) ChildResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringArrayOutput { return v.ChildResources }).(pulumi.StringArrayOutput)
}

// Resource location.
func (o VirtualClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name.
func (o VirtualClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Subnet resource ID for the virtual cluster.
func (o VirtualClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Resource tags.
func (o VirtualClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o VirtualClusterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Virtual cluster version.
func (o VirtualClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualCluster) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualClusterOutput{})
}
