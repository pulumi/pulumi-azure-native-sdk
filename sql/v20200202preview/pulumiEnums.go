// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200202preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Collation of the metadata catalog.
type CatalogCollationType string

const (
	CatalogCollationType_DATABASE_DEFAULT             = CatalogCollationType("DATABASE_DEFAULT")
	CatalogCollationType_SQL_Latin1_General_CP1_CI_AS = CatalogCollationType("SQL_Latin1_General_CP1_CI_AS")
)

func (CatalogCollationType) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCollationType)(nil)).Elem()
}

func (e CatalogCollationType) ToCatalogCollationTypeOutput() CatalogCollationTypeOutput {
	return pulumi.ToOutput(e).(CatalogCollationTypeOutput)
}

func (e CatalogCollationType) ToCatalogCollationTypeOutputWithContext(ctx context.Context) CatalogCollationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CatalogCollationTypeOutput)
}

func (e CatalogCollationType) ToCatalogCollationTypePtrOutput() CatalogCollationTypePtrOutput {
	return e.ToCatalogCollationTypePtrOutputWithContext(context.Background())
}

func (e CatalogCollationType) ToCatalogCollationTypePtrOutputWithContext(ctx context.Context) CatalogCollationTypePtrOutput {
	return CatalogCollationType(e).ToCatalogCollationTypeOutputWithContext(ctx).ToCatalogCollationTypePtrOutputWithContext(ctx)
}

func (e CatalogCollationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CatalogCollationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CatalogCollationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CatalogCollationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CatalogCollationTypeOutput struct{ *pulumi.OutputState }

func (CatalogCollationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCollationType)(nil)).Elem()
}

func (o CatalogCollationTypeOutput) ToCatalogCollationTypeOutput() CatalogCollationTypeOutput {
	return o
}

func (o CatalogCollationTypeOutput) ToCatalogCollationTypeOutputWithContext(ctx context.Context) CatalogCollationTypeOutput {
	return o
}

func (o CatalogCollationTypeOutput) ToCatalogCollationTypePtrOutput() CatalogCollationTypePtrOutput {
	return o.ToCatalogCollationTypePtrOutputWithContext(context.Background())
}

func (o CatalogCollationTypeOutput) ToCatalogCollationTypePtrOutputWithContext(ctx context.Context) CatalogCollationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CatalogCollationType) *CatalogCollationType {
		return &v
	}).(CatalogCollationTypePtrOutput)
}

func (o CatalogCollationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CatalogCollationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CatalogCollationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CatalogCollationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CatalogCollationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CatalogCollationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CatalogCollationTypePtrOutput struct{ *pulumi.OutputState }

func (CatalogCollationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCollationType)(nil)).Elem()
}

func (o CatalogCollationTypePtrOutput) ToCatalogCollationTypePtrOutput() CatalogCollationTypePtrOutput {
	return o
}

func (o CatalogCollationTypePtrOutput) ToCatalogCollationTypePtrOutputWithContext(ctx context.Context) CatalogCollationTypePtrOutput {
	return o
}

func (o CatalogCollationTypePtrOutput) Elem() CatalogCollationTypeOutput {
	return o.ApplyT(func(v *CatalogCollationType) CatalogCollationType {
		if v != nil {
			return *v
		}
		var ret CatalogCollationType
		return ret
	}).(CatalogCollationTypeOutput)
}

func (o CatalogCollationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CatalogCollationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CatalogCollationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CatalogCollationTypeInput is an input type that accepts values of the CatalogCollationType enum
// A concrete instance of `CatalogCollationTypeInput` can be one of the following:
//
//	CatalogCollationType_DATABASE_DEFAULT
//	CatalogCollationType_SQL_Latin1_General_CP1_CI_AS
type CatalogCollationTypeInput interface {
	pulumi.Input

	ToCatalogCollationTypeOutput() CatalogCollationTypeOutput
	ToCatalogCollationTypeOutputWithContext(context.Context) CatalogCollationTypeOutput
}

var catalogCollationTypePtrType = reflect.TypeOf((**CatalogCollationType)(nil)).Elem()

type CatalogCollationTypePtrInput interface {
	pulumi.Input

	ToCatalogCollationTypePtrOutput() CatalogCollationTypePtrOutput
	ToCatalogCollationTypePtrOutputWithContext(context.Context) CatalogCollationTypePtrOutput
}

type catalogCollationTypePtr string

func CatalogCollationTypePtr(v string) CatalogCollationTypePtrInput {
	return (*catalogCollationTypePtr)(&v)
}

func (*catalogCollationTypePtr) ElementType() reflect.Type {
	return catalogCollationTypePtrType
}

func (in *catalogCollationTypePtr) ToCatalogCollationTypePtrOutput() CatalogCollationTypePtrOutput {
	return pulumi.ToOutput(in).(CatalogCollationTypePtrOutput)
}

func (in *catalogCollationTypePtr) ToCatalogCollationTypePtrOutputWithContext(ctx context.Context) CatalogCollationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CatalogCollationTypePtrOutput)
}

func (in *catalogCollationTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CatalogCollationType] {
	return pulumix.Output[*CatalogCollationType]{
		OutputState: in.ToCatalogCollationTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the mode of database creation.
//
// Default: regular database creation.
//
// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
//
// Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
//
// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
//
// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
//
// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
//
// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
//
// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
type CreateMode string

const (
	CreateModeDefault                        = CreateMode("Default")
	CreateModeCopy                           = CreateMode("Copy")
	CreateModeSecondary                      = CreateMode("Secondary")
	CreateModePointInTimeRestore             = CreateMode("PointInTimeRestore")
	CreateModeRestore                        = CreateMode("Restore")
	CreateModeRecovery                       = CreateMode("Recovery")
	CreateModeRestoreExternalBackup          = CreateMode("RestoreExternalBackup")
	CreateModeRestoreExternalBackupSecondary = CreateMode("RestoreExternalBackupSecondary")
	CreateModeRestoreLongTermRetentionBackup = CreateMode("RestoreLongTermRetentionBackup")
	CreateModeOnlineSecondary                = CreateMode("OnlineSecondary")
)

func (CreateMode) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateMode)(nil)).Elem()
}

func (e CreateMode) ToCreateModeOutput() CreateModeOutput {
	return pulumi.ToOutput(e).(CreateModeOutput)
}

func (e CreateMode) ToCreateModeOutputWithContext(ctx context.Context) CreateModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CreateModeOutput)
}

func (e CreateMode) ToCreateModePtrOutput() CreateModePtrOutput {
	return e.ToCreateModePtrOutputWithContext(context.Background())
}

func (e CreateMode) ToCreateModePtrOutputWithContext(ctx context.Context) CreateModePtrOutput {
	return CreateMode(e).ToCreateModeOutputWithContext(ctx).ToCreateModePtrOutputWithContext(ctx)
}

func (e CreateMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreateMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreateMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CreateMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CreateModeOutput struct{ *pulumi.OutputState }

func (CreateModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateMode)(nil)).Elem()
}

func (o CreateModeOutput) ToCreateModeOutput() CreateModeOutput {
	return o
}

func (o CreateModeOutput) ToCreateModeOutputWithContext(ctx context.Context) CreateModeOutput {
	return o
}

func (o CreateModeOutput) ToCreateModePtrOutput() CreateModePtrOutput {
	return o.ToCreateModePtrOutputWithContext(context.Background())
}

func (o CreateModeOutput) ToCreateModePtrOutputWithContext(ctx context.Context) CreateModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CreateMode) *CreateMode {
		return &v
	}).(CreateModePtrOutput)
}

func (o CreateModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CreateModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CreateMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CreateModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CreateModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CreateMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CreateModePtrOutput struct{ *pulumi.OutputState }

func (CreateModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateMode)(nil)).Elem()
}

func (o CreateModePtrOutput) ToCreateModePtrOutput() CreateModePtrOutput {
	return o
}

func (o CreateModePtrOutput) ToCreateModePtrOutputWithContext(ctx context.Context) CreateModePtrOutput {
	return o
}

func (o CreateModePtrOutput) Elem() CreateModeOutput {
	return o.ApplyT(func(v *CreateMode) CreateMode {
		if v != nil {
			return *v
		}
		var ret CreateMode
		return ret
	}).(CreateModeOutput)
}

func (o CreateModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CreateModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CreateMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CreateModeInput is an input type that accepts values of the CreateMode enum
// A concrete instance of `CreateModeInput` can be one of the following:
//
//	CreateModeDefault
//	CreateModeCopy
//	CreateModeSecondary
//	CreateModePointInTimeRestore
//	CreateModeRestore
//	CreateModeRecovery
//	CreateModeRestoreExternalBackup
//	CreateModeRestoreExternalBackupSecondary
//	CreateModeRestoreLongTermRetentionBackup
//	CreateModeOnlineSecondary
type CreateModeInput interface {
	pulumi.Input

	ToCreateModeOutput() CreateModeOutput
	ToCreateModeOutputWithContext(context.Context) CreateModeOutput
}

var createModePtrType = reflect.TypeOf((**CreateMode)(nil)).Elem()

type CreateModePtrInput interface {
	pulumi.Input

	ToCreateModePtrOutput() CreateModePtrOutput
	ToCreateModePtrOutputWithContext(context.Context) CreateModePtrOutput
}

type createModePtr string

func CreateModePtr(v string) CreateModePtrInput {
	return (*createModePtr)(&v)
}

func (*createModePtr) ElementType() reflect.Type {
	return createModePtrType
}

func (in *createModePtr) ToCreateModePtrOutput() CreateModePtrOutput {
	return pulumi.ToOutput(in).(CreateModePtrOutput)
}

func (in *createModePtr) ToCreateModePtrOutputWithContext(ctx context.Context) CreateModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CreateModePtrOutput)
}

func (in *createModePtr) ToOutput(ctx context.Context) pulumix.Output[*CreateMode] {
	return pulumix.Output[*CreateMode]{
		OutputState: in.ToCreateModePtrOutputWithContext(ctx).OutputState,
	}
}

// The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit.
type DatabaseLicenseType string

const (
	DatabaseLicenseTypeLicenseIncluded = DatabaseLicenseType("LicenseIncluded")
	DatabaseLicenseTypeBasePrice       = DatabaseLicenseType("BasePrice")
)

func (DatabaseLicenseType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseLicenseType)(nil)).Elem()
}

func (e DatabaseLicenseType) ToDatabaseLicenseTypeOutput() DatabaseLicenseTypeOutput {
	return pulumi.ToOutput(e).(DatabaseLicenseTypeOutput)
}

func (e DatabaseLicenseType) ToDatabaseLicenseTypeOutputWithContext(ctx context.Context) DatabaseLicenseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseLicenseTypeOutput)
}

func (e DatabaseLicenseType) ToDatabaseLicenseTypePtrOutput() DatabaseLicenseTypePtrOutput {
	return e.ToDatabaseLicenseTypePtrOutputWithContext(context.Background())
}

func (e DatabaseLicenseType) ToDatabaseLicenseTypePtrOutputWithContext(ctx context.Context) DatabaseLicenseTypePtrOutput {
	return DatabaseLicenseType(e).ToDatabaseLicenseTypeOutputWithContext(ctx).ToDatabaseLicenseTypePtrOutputWithContext(ctx)
}

func (e DatabaseLicenseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseLicenseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseLicenseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseLicenseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseLicenseTypeOutput struct{ *pulumi.OutputState }

func (DatabaseLicenseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseLicenseType)(nil)).Elem()
}

func (o DatabaseLicenseTypeOutput) ToDatabaseLicenseTypeOutput() DatabaseLicenseTypeOutput {
	return o
}

func (o DatabaseLicenseTypeOutput) ToDatabaseLicenseTypeOutputWithContext(ctx context.Context) DatabaseLicenseTypeOutput {
	return o
}

func (o DatabaseLicenseTypeOutput) ToDatabaseLicenseTypePtrOutput() DatabaseLicenseTypePtrOutput {
	return o.ToDatabaseLicenseTypePtrOutputWithContext(context.Background())
}

func (o DatabaseLicenseTypeOutput) ToDatabaseLicenseTypePtrOutputWithContext(ctx context.Context) DatabaseLicenseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseLicenseType) *DatabaseLicenseType {
		return &v
	}).(DatabaseLicenseTypePtrOutput)
}

func (o DatabaseLicenseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseLicenseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseLicenseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseLicenseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseLicenseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseLicenseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseLicenseTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseLicenseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseLicenseType)(nil)).Elem()
}

func (o DatabaseLicenseTypePtrOutput) ToDatabaseLicenseTypePtrOutput() DatabaseLicenseTypePtrOutput {
	return o
}

func (o DatabaseLicenseTypePtrOutput) ToDatabaseLicenseTypePtrOutputWithContext(ctx context.Context) DatabaseLicenseTypePtrOutput {
	return o
}

func (o DatabaseLicenseTypePtrOutput) Elem() DatabaseLicenseTypeOutput {
	return o.ApplyT(func(v *DatabaseLicenseType) DatabaseLicenseType {
		if v != nil {
			return *v
		}
		var ret DatabaseLicenseType
		return ret
	}).(DatabaseLicenseTypeOutput)
}

func (o DatabaseLicenseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseLicenseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseLicenseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseLicenseTypeInput is an input type that accepts values of the DatabaseLicenseType enum
// A concrete instance of `DatabaseLicenseTypeInput` can be one of the following:
//
//	DatabaseLicenseTypeLicenseIncluded
//	DatabaseLicenseTypeBasePrice
type DatabaseLicenseTypeInput interface {
	pulumi.Input

	ToDatabaseLicenseTypeOutput() DatabaseLicenseTypeOutput
	ToDatabaseLicenseTypeOutputWithContext(context.Context) DatabaseLicenseTypeOutput
}

var databaseLicenseTypePtrType = reflect.TypeOf((**DatabaseLicenseType)(nil)).Elem()

type DatabaseLicenseTypePtrInput interface {
	pulumi.Input

	ToDatabaseLicenseTypePtrOutput() DatabaseLicenseTypePtrOutput
	ToDatabaseLicenseTypePtrOutputWithContext(context.Context) DatabaseLicenseTypePtrOutput
}

type databaseLicenseTypePtr string

func DatabaseLicenseTypePtr(v string) DatabaseLicenseTypePtrInput {
	return (*databaseLicenseTypePtr)(&v)
}

func (*databaseLicenseTypePtr) ElementType() reflect.Type {
	return databaseLicenseTypePtrType
}

func (in *databaseLicenseTypePtr) ToDatabaseLicenseTypePtrOutput() DatabaseLicenseTypePtrOutput {
	return pulumi.ToOutput(in).(DatabaseLicenseTypePtrOutput)
}

func (in *databaseLicenseTypePtr) ToDatabaseLicenseTypePtrOutputWithContext(ctx context.Context) DatabaseLicenseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseLicenseTypePtrOutput)
}

func (in *databaseLicenseTypePtr) ToOutput(ctx context.Context) pulumix.Output[*DatabaseLicenseType] {
	return pulumix.Output[*DatabaseLicenseType]{
		OutputState: in.ToDatabaseLicenseTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The state of read-only routing. If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica in the same region.
type DatabaseReadScale string

const (
	DatabaseReadScaleEnabled  = DatabaseReadScale("Enabled")
	DatabaseReadScaleDisabled = DatabaseReadScale("Disabled")
)

func (DatabaseReadScale) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReadScale)(nil)).Elem()
}

func (e DatabaseReadScale) ToDatabaseReadScaleOutput() DatabaseReadScaleOutput {
	return pulumi.ToOutput(e).(DatabaseReadScaleOutput)
}

func (e DatabaseReadScale) ToDatabaseReadScaleOutputWithContext(ctx context.Context) DatabaseReadScaleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseReadScaleOutput)
}

func (e DatabaseReadScale) ToDatabaseReadScalePtrOutput() DatabaseReadScalePtrOutput {
	return e.ToDatabaseReadScalePtrOutputWithContext(context.Background())
}

func (e DatabaseReadScale) ToDatabaseReadScalePtrOutputWithContext(ctx context.Context) DatabaseReadScalePtrOutput {
	return DatabaseReadScale(e).ToDatabaseReadScaleOutputWithContext(ctx).ToDatabaseReadScalePtrOutputWithContext(ctx)
}

func (e DatabaseReadScale) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseReadScale) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseReadScale) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseReadScale) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseReadScaleOutput struct{ *pulumi.OutputState }

func (DatabaseReadScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseReadScale)(nil)).Elem()
}

func (o DatabaseReadScaleOutput) ToDatabaseReadScaleOutput() DatabaseReadScaleOutput {
	return o
}

func (o DatabaseReadScaleOutput) ToDatabaseReadScaleOutputWithContext(ctx context.Context) DatabaseReadScaleOutput {
	return o
}

func (o DatabaseReadScaleOutput) ToDatabaseReadScalePtrOutput() DatabaseReadScalePtrOutput {
	return o.ToDatabaseReadScalePtrOutputWithContext(context.Background())
}

func (o DatabaseReadScaleOutput) ToDatabaseReadScalePtrOutputWithContext(ctx context.Context) DatabaseReadScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseReadScale) *DatabaseReadScale {
		return &v
	}).(DatabaseReadScalePtrOutput)
}

func (o DatabaseReadScaleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseReadScaleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseReadScale) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseReadScaleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseReadScaleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseReadScale) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseReadScalePtrOutput struct{ *pulumi.OutputState }

func (DatabaseReadScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseReadScale)(nil)).Elem()
}

func (o DatabaseReadScalePtrOutput) ToDatabaseReadScalePtrOutput() DatabaseReadScalePtrOutput {
	return o
}

func (o DatabaseReadScalePtrOutput) ToDatabaseReadScalePtrOutputWithContext(ctx context.Context) DatabaseReadScalePtrOutput {
	return o
}

func (o DatabaseReadScalePtrOutput) Elem() DatabaseReadScaleOutput {
	return o.ApplyT(func(v *DatabaseReadScale) DatabaseReadScale {
		if v != nil {
			return *v
		}
		var ret DatabaseReadScale
		return ret
	}).(DatabaseReadScaleOutput)
}

func (o DatabaseReadScalePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseReadScalePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseReadScale) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseReadScaleInput is an input type that accepts values of the DatabaseReadScale enum
// A concrete instance of `DatabaseReadScaleInput` can be one of the following:
//
//	DatabaseReadScaleEnabled
//	DatabaseReadScaleDisabled
type DatabaseReadScaleInput interface {
	pulumi.Input

	ToDatabaseReadScaleOutput() DatabaseReadScaleOutput
	ToDatabaseReadScaleOutputWithContext(context.Context) DatabaseReadScaleOutput
}

var databaseReadScalePtrType = reflect.TypeOf((**DatabaseReadScale)(nil)).Elem()

type DatabaseReadScalePtrInput interface {
	pulumi.Input

	ToDatabaseReadScalePtrOutput() DatabaseReadScalePtrOutput
	ToDatabaseReadScalePtrOutputWithContext(context.Context) DatabaseReadScalePtrOutput
}

type databaseReadScalePtr string

func DatabaseReadScalePtr(v string) DatabaseReadScalePtrInput {
	return (*databaseReadScalePtr)(&v)
}

func (*databaseReadScalePtr) ElementType() reflect.Type {
	return databaseReadScalePtrType
}

func (in *databaseReadScalePtr) ToDatabaseReadScalePtrOutput() DatabaseReadScalePtrOutput {
	return pulumi.ToOutput(in).(DatabaseReadScalePtrOutput)
}

func (in *databaseReadScalePtr) ToDatabaseReadScalePtrOutputWithContext(ctx context.Context) DatabaseReadScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseReadScalePtrOutput)
}

func (in *databaseReadScalePtr) ToOutput(ctx context.Context) pulumix.Output[*DatabaseReadScale] {
	return pulumix.Output[*DatabaseReadScale]{
		OutputState: in.ToDatabaseReadScalePtrOutputWithContext(ctx).OutputState,
	}
}

// The name of the sample schema to apply when creating this database.
type SampleName string

const (
	SampleNameAdventureWorksLT       = SampleName("AdventureWorksLT")
	SampleNameWideWorldImportersStd  = SampleName("WideWorldImportersStd")
	SampleNameWideWorldImportersFull = SampleName("WideWorldImportersFull")
)

func (SampleName) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleName)(nil)).Elem()
}

func (e SampleName) ToSampleNameOutput() SampleNameOutput {
	return pulumi.ToOutput(e).(SampleNameOutput)
}

func (e SampleName) ToSampleNameOutputWithContext(ctx context.Context) SampleNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SampleNameOutput)
}

func (e SampleName) ToSampleNamePtrOutput() SampleNamePtrOutput {
	return e.ToSampleNamePtrOutputWithContext(context.Background())
}

func (e SampleName) ToSampleNamePtrOutputWithContext(ctx context.Context) SampleNamePtrOutput {
	return SampleName(e).ToSampleNameOutputWithContext(ctx).ToSampleNamePtrOutputWithContext(ctx)
}

func (e SampleName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SampleName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SampleName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SampleName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SampleNameOutput struct{ *pulumi.OutputState }

func (SampleNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleName)(nil)).Elem()
}

func (o SampleNameOutput) ToSampleNameOutput() SampleNameOutput {
	return o
}

func (o SampleNameOutput) ToSampleNameOutputWithContext(ctx context.Context) SampleNameOutput {
	return o
}

func (o SampleNameOutput) ToSampleNamePtrOutput() SampleNamePtrOutput {
	return o.ToSampleNamePtrOutputWithContext(context.Background())
}

func (o SampleNameOutput) ToSampleNamePtrOutputWithContext(ctx context.Context) SampleNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SampleName) *SampleName {
		return &v
	}).(SampleNamePtrOutput)
}

func (o SampleNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SampleNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SampleName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SampleNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SampleNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SampleName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SampleNamePtrOutput struct{ *pulumi.OutputState }

func (SampleNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SampleName)(nil)).Elem()
}

func (o SampleNamePtrOutput) ToSampleNamePtrOutput() SampleNamePtrOutput {
	return o
}

func (o SampleNamePtrOutput) ToSampleNamePtrOutputWithContext(ctx context.Context) SampleNamePtrOutput {
	return o
}

func (o SampleNamePtrOutput) Elem() SampleNameOutput {
	return o.ApplyT(func(v *SampleName) SampleName {
		if v != nil {
			return *v
		}
		var ret SampleName
		return ret
	}).(SampleNameOutput)
}

func (o SampleNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SampleNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SampleName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SampleNameInput is an input type that accepts values of the SampleName enum
// A concrete instance of `SampleNameInput` can be one of the following:
//
//	SampleNameAdventureWorksLT
//	SampleNameWideWorldImportersStd
//	SampleNameWideWorldImportersFull
type SampleNameInput interface {
	pulumi.Input

	ToSampleNameOutput() SampleNameOutput
	ToSampleNameOutputWithContext(context.Context) SampleNameOutput
}

var sampleNamePtrType = reflect.TypeOf((**SampleName)(nil)).Elem()

type SampleNamePtrInput interface {
	pulumi.Input

	ToSampleNamePtrOutput() SampleNamePtrOutput
	ToSampleNamePtrOutputWithContext(context.Context) SampleNamePtrOutput
}

type sampleNamePtr string

func SampleNamePtr(v string) SampleNamePtrInput {
	return (*sampleNamePtr)(&v)
}

func (*sampleNamePtr) ElementType() reflect.Type {
	return sampleNamePtrType
}

func (in *sampleNamePtr) ToSampleNamePtrOutput() SampleNamePtrOutput {
	return pulumi.ToOutput(in).(SampleNamePtrOutput)
}

func (in *sampleNamePtr) ToSampleNamePtrOutputWithContext(ctx context.Context) SampleNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SampleNamePtrOutput)
}

func (in *sampleNamePtr) ToOutput(ctx context.Context) pulumix.Output[*SampleName] {
	return pulumix.Output[*SampleName]{
		OutputState: in.ToSampleNamePtrOutputWithContext(ctx).OutputState,
	}
}

// The storage account type used to store backups for this database.
type StorageAccountType string

const (
	StorageAccountTypeGRS = StorageAccountType("GRS")
	StorageAccountTypeLRS = StorageAccountType("LRS")
	StorageAccountTypeZRS = StorageAccountType("ZRS")
)

func (StorageAccountType) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountType)(nil)).Elem()
}

func (e StorageAccountType) ToStorageAccountTypeOutput() StorageAccountTypeOutput {
	return pulumi.ToOutput(e).(StorageAccountTypeOutput)
}

func (e StorageAccountType) ToStorageAccountTypeOutputWithContext(ctx context.Context) StorageAccountTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StorageAccountTypeOutput)
}

func (e StorageAccountType) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return e.ToStorageAccountTypePtrOutputWithContext(context.Background())
}

func (e StorageAccountType) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return StorageAccountType(e).ToStorageAccountTypeOutputWithContext(ctx).ToStorageAccountTypePtrOutputWithContext(ctx)
}

func (e StorageAccountType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageAccountType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageAccountType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StorageAccountType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StorageAccountTypeOutput struct{ *pulumi.OutputState }

func (StorageAccountTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountType)(nil)).Elem()
}

func (o StorageAccountTypeOutput) ToStorageAccountTypeOutput() StorageAccountTypeOutput {
	return o
}

func (o StorageAccountTypeOutput) ToStorageAccountTypeOutputWithContext(ctx context.Context) StorageAccountTypeOutput {
	return o
}

func (o StorageAccountTypeOutput) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return o.ToStorageAccountTypePtrOutputWithContext(context.Background())
}

func (o StorageAccountTypeOutput) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageAccountType) *StorageAccountType {
		return &v
	}).(StorageAccountTypePtrOutput)
}

func (o StorageAccountTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StorageAccountTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageAccountType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StorageAccountTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageAccountTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageAccountType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StorageAccountTypePtrOutput struct{ *pulumi.OutputState }

func (StorageAccountTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountType)(nil)).Elem()
}

func (o StorageAccountTypePtrOutput) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return o
}

func (o StorageAccountTypePtrOutput) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return o
}

func (o StorageAccountTypePtrOutput) Elem() StorageAccountTypeOutput {
	return o.ApplyT(func(v *StorageAccountType) StorageAccountType {
		if v != nil {
			return *v
		}
		var ret StorageAccountType
		return ret
	}).(StorageAccountTypeOutput)
}

func (o StorageAccountTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageAccountTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StorageAccountType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StorageAccountTypeInput is an input type that accepts values of the StorageAccountType enum
// A concrete instance of `StorageAccountTypeInput` can be one of the following:
//
//	StorageAccountTypeGRS
//	StorageAccountTypeLRS
//	StorageAccountTypeZRS
type StorageAccountTypeInput interface {
	pulumi.Input

	ToStorageAccountTypeOutput() StorageAccountTypeOutput
	ToStorageAccountTypeOutputWithContext(context.Context) StorageAccountTypeOutput
}

var storageAccountTypePtrType = reflect.TypeOf((**StorageAccountType)(nil)).Elem()

type StorageAccountTypePtrInput interface {
	pulumi.Input

	ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput
	ToStorageAccountTypePtrOutputWithContext(context.Context) StorageAccountTypePtrOutput
}

type storageAccountTypePtr string

func StorageAccountTypePtr(v string) StorageAccountTypePtrInput {
	return (*storageAccountTypePtr)(&v)
}

func (*storageAccountTypePtr) ElementType() reflect.Type {
	return storageAccountTypePtrType
}

func (in *storageAccountTypePtr) ToStorageAccountTypePtrOutput() StorageAccountTypePtrOutput {
	return pulumi.ToOutput(in).(StorageAccountTypePtrOutput)
}

func (in *storageAccountTypePtr) ToStorageAccountTypePtrOutputWithContext(ctx context.Context) StorageAccountTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StorageAccountTypePtrOutput)
}

func (in *storageAccountTypePtr) ToOutput(ctx context.Context) pulumix.Output[*StorageAccountType] {
	return pulumix.Output[*StorageAccountType]{
		OutputState: in.ToStorageAccountTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(CatalogCollationTypeOutput{})
	pulumi.RegisterOutputType(CatalogCollationTypePtrOutput{})
	pulumi.RegisterOutputType(CreateModeOutput{})
	pulumi.RegisterOutputType(CreateModePtrOutput{})
	pulumi.RegisterOutputType(DatabaseLicenseTypeOutput{})
	pulumi.RegisterOutputType(DatabaseLicenseTypePtrOutput{})
	pulumi.RegisterOutputType(DatabaseReadScaleOutput{})
	pulumi.RegisterOutputType(DatabaseReadScalePtrOutput{})
	pulumi.RegisterOutputType(SampleNameOutput{})
	pulumi.RegisterOutputType(SampleNamePtrOutput{})
	pulumi.RegisterOutputType(StorageAccountTypeOutput{})
	pulumi.RegisterOutputType(StorageAccountTypePtrOutput{})
}
