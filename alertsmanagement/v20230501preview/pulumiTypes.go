// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Add action groups to alert processing rule.
type AddActionGroups struct {
	// List of action group Ids to add to alert processing rule.
	ActionGroupIds []string `pulumi:"actionGroupIds"`
	// Action that should be applied.
	// Expected value is 'AddActionGroups'.
	ActionType string `pulumi:"actionType"`
}

// AddActionGroupsInput is an input type that accepts AddActionGroupsArgs and AddActionGroupsOutput values.
// You can construct a concrete instance of `AddActionGroupsInput` via:
//
//	AddActionGroupsArgs{...}
type AddActionGroupsInput interface {
	pulumi.Input

	ToAddActionGroupsOutput() AddActionGroupsOutput
	ToAddActionGroupsOutputWithContext(context.Context) AddActionGroupsOutput
}

// Add action groups to alert processing rule.
type AddActionGroupsArgs struct {
	// List of action group Ids to add to alert processing rule.
	ActionGroupIds pulumi.StringArrayInput `pulumi:"actionGroupIds"`
	// Action that should be applied.
	// Expected value is 'AddActionGroups'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
}

func (AddActionGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddActionGroups)(nil)).Elem()
}

func (i AddActionGroupsArgs) ToAddActionGroupsOutput() AddActionGroupsOutput {
	return i.ToAddActionGroupsOutputWithContext(context.Background())
}

func (i AddActionGroupsArgs) ToAddActionGroupsOutputWithContext(ctx context.Context) AddActionGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddActionGroupsOutput)
}

// Add action groups to alert processing rule.
type AddActionGroupsOutput struct{ *pulumi.OutputState }

func (AddActionGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddActionGroups)(nil)).Elem()
}

func (o AddActionGroupsOutput) ToAddActionGroupsOutput() AddActionGroupsOutput {
	return o
}

func (o AddActionGroupsOutput) ToAddActionGroupsOutputWithContext(ctx context.Context) AddActionGroupsOutput {
	return o
}

// List of action group Ids to add to alert processing rule.
func (o AddActionGroupsOutput) ActionGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AddActionGroups) []string { return v.ActionGroupIds }).(pulumi.StringArrayOutput)
}

// Action that should be applied.
// Expected value is 'AddActionGroups'.
func (o AddActionGroupsOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v AddActionGroups) string { return v.ActionType }).(pulumi.StringOutput)
}

// Add action groups to alert processing rule.
type AddActionGroupsResponse struct {
	// List of action group Ids to add to alert processing rule.
	ActionGroupIds []string `pulumi:"actionGroupIds"`
	// Action that should be applied.
	// Expected value is 'AddActionGroups'.
	ActionType string `pulumi:"actionType"`
}

// Add action groups to alert processing rule.
type AddActionGroupsResponseOutput struct{ *pulumi.OutputState }

func (AddActionGroupsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddActionGroupsResponse)(nil)).Elem()
}

func (o AddActionGroupsResponseOutput) ToAddActionGroupsResponseOutput() AddActionGroupsResponseOutput {
	return o
}

func (o AddActionGroupsResponseOutput) ToAddActionGroupsResponseOutputWithContext(ctx context.Context) AddActionGroupsResponseOutput {
	return o
}

// List of action group Ids to add to alert processing rule.
func (o AddActionGroupsResponseOutput) ActionGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AddActionGroupsResponse) []string { return v.ActionGroupIds }).(pulumi.StringArrayOutput)
}

// Action that should be applied.
// Expected value is 'AddActionGroups'.
func (o AddActionGroupsResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v AddActionGroupsResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// Alert processing rule properties defining scopes, conditions and scheduling logic for alert processing rule.
type AlertProcessingRuleProperties struct {
	// Actions to be applied.
	Actions []interface{} `pulumi:"actions"`
	// Conditions on which alerts will be filtered.
	Conditions []Condition `pulumi:"conditions"`
	// Description of alert processing rule.
	Description *string `pulumi:"description"`
	// Indicates if the given alert processing rule is enabled or disabled.
	Enabled *bool `pulumi:"enabled"`
	// Scheduling for alert processing rule.
	Schedule *Schedule `pulumi:"schedule"`
	// Scopes on which alert processing rule will apply.
	Scopes []string `pulumi:"scopes"`
}

// Defaults sets the appropriate defaults for AlertProcessingRuleProperties
func (val *AlertProcessingRuleProperties) Defaults() *AlertProcessingRuleProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := true
		tmp.Enabled = &enabled_
	}
	return &tmp
}

// AlertProcessingRulePropertiesInput is an input type that accepts AlertProcessingRulePropertiesArgs and AlertProcessingRulePropertiesOutput values.
// You can construct a concrete instance of `AlertProcessingRulePropertiesInput` via:
//
//	AlertProcessingRulePropertiesArgs{...}
type AlertProcessingRulePropertiesInput interface {
	pulumi.Input

	ToAlertProcessingRulePropertiesOutput() AlertProcessingRulePropertiesOutput
	ToAlertProcessingRulePropertiesOutputWithContext(context.Context) AlertProcessingRulePropertiesOutput
}

// Alert processing rule properties defining scopes, conditions and scheduling logic for alert processing rule.
type AlertProcessingRulePropertiesArgs struct {
	// Actions to be applied.
	Actions pulumi.ArrayInput `pulumi:"actions"`
	// Conditions on which alerts will be filtered.
	Conditions ConditionArrayInput `pulumi:"conditions"`
	// Description of alert processing rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates if the given alert processing rule is enabled or disabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Scheduling for alert processing rule.
	Schedule SchedulePtrInput `pulumi:"schedule"`
	// Scopes on which alert processing rule will apply.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

// Defaults sets the appropriate defaults for AlertProcessingRulePropertiesArgs
func (val *AlertProcessingRulePropertiesArgs) Defaults() *AlertProcessingRulePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (AlertProcessingRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleProperties)(nil)).Elem()
}

func (i AlertProcessingRulePropertiesArgs) ToAlertProcessingRulePropertiesOutput() AlertProcessingRulePropertiesOutput {
	return i.ToAlertProcessingRulePropertiesOutputWithContext(context.Background())
}

func (i AlertProcessingRulePropertiesArgs) ToAlertProcessingRulePropertiesOutputWithContext(ctx context.Context) AlertProcessingRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRulePropertiesOutput)
}

func (i AlertProcessingRulePropertiesArgs) ToAlertProcessingRulePropertiesPtrOutput() AlertProcessingRulePropertiesPtrOutput {
	return i.ToAlertProcessingRulePropertiesPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRulePropertiesArgs) ToAlertProcessingRulePropertiesPtrOutputWithContext(ctx context.Context) AlertProcessingRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRulePropertiesOutput).ToAlertProcessingRulePropertiesPtrOutputWithContext(ctx)
}

// AlertProcessingRulePropertiesPtrInput is an input type that accepts AlertProcessingRulePropertiesArgs, AlertProcessingRulePropertiesPtr and AlertProcessingRulePropertiesPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRulePropertiesPtrInput` via:
//
//	        AlertProcessingRulePropertiesArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRulePropertiesPtrInput interface {
	pulumi.Input

	ToAlertProcessingRulePropertiesPtrOutput() AlertProcessingRulePropertiesPtrOutput
	ToAlertProcessingRulePropertiesPtrOutputWithContext(context.Context) AlertProcessingRulePropertiesPtrOutput
}

type alertProcessingRulePropertiesPtrType AlertProcessingRulePropertiesArgs

func AlertProcessingRulePropertiesPtr(v *AlertProcessingRulePropertiesArgs) AlertProcessingRulePropertiesPtrInput {
	return (*alertProcessingRulePropertiesPtrType)(v)
}

func (*alertProcessingRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleProperties)(nil)).Elem()
}

func (i *alertProcessingRulePropertiesPtrType) ToAlertProcessingRulePropertiesPtrOutput() AlertProcessingRulePropertiesPtrOutput {
	return i.ToAlertProcessingRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRulePropertiesPtrType) ToAlertProcessingRulePropertiesPtrOutputWithContext(ctx context.Context) AlertProcessingRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRulePropertiesPtrOutput)
}

// Alert processing rule properties defining scopes, conditions and scheduling logic for alert processing rule.
type AlertProcessingRulePropertiesOutput struct{ *pulumi.OutputState }

func (AlertProcessingRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleProperties)(nil)).Elem()
}

func (o AlertProcessingRulePropertiesOutput) ToAlertProcessingRulePropertiesOutput() AlertProcessingRulePropertiesOutput {
	return o
}

func (o AlertProcessingRulePropertiesOutput) ToAlertProcessingRulePropertiesOutputWithContext(ctx context.Context) AlertProcessingRulePropertiesOutput {
	return o
}

func (o AlertProcessingRulePropertiesOutput) ToAlertProcessingRulePropertiesPtrOutput() AlertProcessingRulePropertiesPtrOutput {
	return o.ToAlertProcessingRulePropertiesPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRulePropertiesOutput) ToAlertProcessingRulePropertiesPtrOutputWithContext(ctx context.Context) AlertProcessingRulePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleProperties) *AlertProcessingRuleProperties {
		return &v
	}).(AlertProcessingRulePropertiesPtrOutput)
}

// Actions to be applied.
func (o AlertProcessingRulePropertiesOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleProperties) []interface{} { return v.Actions }).(pulumi.ArrayOutput)
}

// Conditions on which alerts will be filtered.
func (o AlertProcessingRulePropertiesOutput) Conditions() ConditionArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleProperties) []Condition { return v.Conditions }).(ConditionArrayOutput)
}

// Description of alert processing rule.
func (o AlertProcessingRulePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates if the given alert processing rule is enabled or disabled.
func (o AlertProcessingRulePropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Scheduling for alert processing rule.
func (o AlertProcessingRulePropertiesOutput) Schedule() SchedulePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleProperties) *Schedule { return v.Schedule }).(SchedulePtrOutput)
}

// Scopes on which alert processing rule will apply.
func (o AlertProcessingRulePropertiesOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleProperties) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type AlertProcessingRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleProperties)(nil)).Elem()
}

func (o AlertProcessingRulePropertiesPtrOutput) ToAlertProcessingRulePropertiesPtrOutput() AlertProcessingRulePropertiesPtrOutput {
	return o
}

func (o AlertProcessingRulePropertiesPtrOutput) ToAlertProcessingRulePropertiesPtrOutputWithContext(ctx context.Context) AlertProcessingRulePropertiesPtrOutput {
	return o
}

func (o AlertProcessingRulePropertiesPtrOutput) Elem() AlertProcessingRulePropertiesOutput {
	return o.ApplyT(func(v *AlertProcessingRuleProperties) AlertProcessingRuleProperties {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleProperties
		return ret
	}).(AlertProcessingRulePropertiesOutput)
}

// Actions to be applied.
func (o AlertProcessingRulePropertiesPtrOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleProperties) []interface{} {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(pulumi.ArrayOutput)
}

// Conditions on which alerts will be filtered.
func (o AlertProcessingRulePropertiesPtrOutput) Conditions() ConditionArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleProperties) []Condition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ConditionArrayOutput)
}

// Description of alert processing rule.
func (o AlertProcessingRulePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates if the given alert processing rule is enabled or disabled.
func (o AlertProcessingRulePropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Scheduling for alert processing rule.
func (o AlertProcessingRulePropertiesPtrOutput) Schedule() SchedulePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleProperties) *Schedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(SchedulePtrOutput)
}

// Scopes on which alert processing rule will apply.
func (o AlertProcessingRulePropertiesPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleProperties) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Alert processing rule properties defining scopes, conditions and scheduling logic for alert processing rule.
type AlertProcessingRulePropertiesResponse struct {
	// Actions to be applied.
	Actions []interface{} `pulumi:"actions"`
	// Conditions on which alerts will be filtered.
	Conditions []ConditionResponse `pulumi:"conditions"`
	// Description of alert processing rule.
	Description *string `pulumi:"description"`
	// Indicates if the given alert processing rule is enabled or disabled.
	Enabled *bool `pulumi:"enabled"`
	// Scheduling for alert processing rule.
	Schedule *ScheduleResponse `pulumi:"schedule"`
	// Scopes on which alert processing rule will apply.
	Scopes []string `pulumi:"scopes"`
}

// Defaults sets the appropriate defaults for AlertProcessingRulePropertiesResponse
func (val *AlertProcessingRulePropertiesResponse) Defaults() *AlertProcessingRulePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := true
		tmp.Enabled = &enabled_
	}
	return &tmp
}

// Alert processing rule properties defining scopes, conditions and scheduling logic for alert processing rule.
type AlertProcessingRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AlertProcessingRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRulePropertiesResponse)(nil)).Elem()
}

func (o AlertProcessingRulePropertiesResponseOutput) ToAlertProcessingRulePropertiesResponseOutput() AlertProcessingRulePropertiesResponseOutput {
	return o
}

func (o AlertProcessingRulePropertiesResponseOutput) ToAlertProcessingRulePropertiesResponseOutputWithContext(ctx context.Context) AlertProcessingRulePropertiesResponseOutput {
	return o
}

// Actions to be applied.
func (o AlertProcessingRulePropertiesResponseOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v AlertProcessingRulePropertiesResponse) []interface{} { return v.Actions }).(pulumi.ArrayOutput)
}

// Conditions on which alerts will be filtered.
func (o AlertProcessingRulePropertiesResponseOutput) Conditions() ConditionResponseArrayOutput {
	return o.ApplyT(func(v AlertProcessingRulePropertiesResponse) []ConditionResponse { return v.Conditions }).(ConditionResponseArrayOutput)
}

// Description of alert processing rule.
func (o AlertProcessingRulePropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRulePropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates if the given alert processing rule is enabled or disabled.
func (o AlertProcessingRulePropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertProcessingRulePropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Scheduling for alert processing rule.
func (o AlertProcessingRulePropertiesResponseOutput) Schedule() ScheduleResponsePtrOutput {
	return o.ApplyT(func(v AlertProcessingRulePropertiesResponse) *ScheduleResponse { return v.Schedule }).(ScheduleResponsePtrOutput)
}

// Scopes on which alert processing rule will apply.
func (o AlertProcessingRulePropertiesResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRulePropertiesResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Condition to trigger an alert processing rule.
type Condition struct {
	// Field for a given condition.
	Field *string `pulumi:"field"`
	// Operator for a given condition.
	Operator *string `pulumi:"operator"`
	// List of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//	ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// Condition to trigger an alert processing rule.
type ConditionArgs struct {
	// Field for a given condition.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// Operator for a given condition.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// List of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

// ConditionArrayInput is an input type that accepts ConditionArray and ConditionArrayOutput values.
// You can construct a concrete instance of `ConditionArrayInput` via:
//
//	ConditionArray{ ConditionArgs{...} }
type ConditionArrayInput interface {
	pulumi.Input

	ToConditionArrayOutput() ConditionArrayOutput
	ToConditionArrayOutputWithContext(context.Context) ConditionArrayOutput
}

type ConditionArray []ConditionInput

func (ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (i ConditionArray) ToConditionArrayOutput() ConditionArrayOutput {
	return i.ToConditionArrayOutputWithContext(context.Background())
}

func (i ConditionArray) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionArrayOutput)
}

// Condition to trigger an alert processing rule.
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

// Field for a given condition.
func (o ConditionOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// Operator for a given condition.
func (o ConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// List of values to match for a given condition.
func (o ConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Condition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionArrayOutput struct{ *pulumi.OutputState }

func (ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (o ConditionArrayOutput) ToConditionArrayOutput() ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) Index(i pulumi.IntInput) ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Condition {
		return vs[0].([]Condition)[vs[1].(int)]
	}).(ConditionOutput)
}

// Condition to trigger an alert processing rule.
type ConditionResponse struct {
	// Field for a given condition.
	Field *string `pulumi:"field"`
	// Operator for a given condition.
	Operator *string `pulumi:"operator"`
	// List of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// Condition to trigger an alert processing rule.
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

// Field for a given condition.
func (o ConditionResponseOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// Operator for a given condition.
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// List of values to match for a given condition.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutput() ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutputWithContext(ctx context.Context) ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) Index(i pulumi.IntInput) ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionResponse {
		return vs[0].([]ConditionResponse)[vs[1].(int)]
	}).(ConditionResponseOutput)
}

// Add logic for alerts correlation.
type CorrelateAlerts struct {
	// Action that should be applied.
	// Expected value is 'CorrelateAlerts'.
	ActionType string `pulumi:"actionType"`
	// The list of conditions for the alerts correlations.
	CorrelateBy []CorrelateBy `pulumi:"correlateBy"`
	// The required duration (in ISO8601 format) for the alerts correlation.
	CorrelationInterval string `pulumi:"correlationInterval"`
	// Indicates how to handle child alerts notifications.
	NotificationsForCorrelatedAlerts *string `pulumi:"notificationsForCorrelatedAlerts"`
	// The priority of this correlation.
	Priority int `pulumi:"priority"`
}

// Defaults sets the appropriate defaults for CorrelateAlerts
func (val *CorrelateAlerts) Defaults() *CorrelateAlerts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.NotificationsForCorrelatedAlerts == nil {
		notificationsForCorrelatedAlerts_ := "SuppressAlways"
		tmp.NotificationsForCorrelatedAlerts = &notificationsForCorrelatedAlerts_
	}
	return &tmp
}

// CorrelateAlertsInput is an input type that accepts CorrelateAlertsArgs and CorrelateAlertsOutput values.
// You can construct a concrete instance of `CorrelateAlertsInput` via:
//
//	CorrelateAlertsArgs{...}
type CorrelateAlertsInput interface {
	pulumi.Input

	ToCorrelateAlertsOutput() CorrelateAlertsOutput
	ToCorrelateAlertsOutputWithContext(context.Context) CorrelateAlertsOutput
}

// Add logic for alerts correlation.
type CorrelateAlertsArgs struct {
	// Action that should be applied.
	// Expected value is 'CorrelateAlerts'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// The list of conditions for the alerts correlations.
	CorrelateBy CorrelateByArrayInput `pulumi:"correlateBy"`
	// The required duration (in ISO8601 format) for the alerts correlation.
	CorrelationInterval pulumi.StringInput `pulumi:"correlationInterval"`
	// Indicates how to handle child alerts notifications.
	NotificationsForCorrelatedAlerts pulumi.StringPtrInput `pulumi:"notificationsForCorrelatedAlerts"`
	// The priority of this correlation.
	Priority pulumi.IntInput `pulumi:"priority"`
}

// Defaults sets the appropriate defaults for CorrelateAlertsArgs
func (val *CorrelateAlertsArgs) Defaults() *CorrelateAlertsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.NotificationsForCorrelatedAlerts == nil {
		tmp.NotificationsForCorrelatedAlerts = pulumi.StringPtr("SuppressAlways")
	}
	return &tmp
}
func (CorrelateAlertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelateAlerts)(nil)).Elem()
}

func (i CorrelateAlertsArgs) ToCorrelateAlertsOutput() CorrelateAlertsOutput {
	return i.ToCorrelateAlertsOutputWithContext(context.Background())
}

func (i CorrelateAlertsArgs) ToCorrelateAlertsOutputWithContext(ctx context.Context) CorrelateAlertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelateAlertsOutput)
}

// Add logic for alerts correlation.
type CorrelateAlertsOutput struct{ *pulumi.OutputState }

func (CorrelateAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelateAlerts)(nil)).Elem()
}

func (o CorrelateAlertsOutput) ToCorrelateAlertsOutput() CorrelateAlertsOutput {
	return o
}

func (o CorrelateAlertsOutput) ToCorrelateAlertsOutputWithContext(ctx context.Context) CorrelateAlertsOutput {
	return o
}

// Action that should be applied.
// Expected value is 'CorrelateAlerts'.
func (o CorrelateAlertsOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v CorrelateAlerts) string { return v.ActionType }).(pulumi.StringOutput)
}

// The list of conditions for the alerts correlations.
func (o CorrelateAlertsOutput) CorrelateBy() CorrelateByArrayOutput {
	return o.ApplyT(func(v CorrelateAlerts) []CorrelateBy { return v.CorrelateBy }).(CorrelateByArrayOutput)
}

// The required duration (in ISO8601 format) for the alerts correlation.
func (o CorrelateAlertsOutput) CorrelationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v CorrelateAlerts) string { return v.CorrelationInterval }).(pulumi.StringOutput)
}

// Indicates how to handle child alerts notifications.
func (o CorrelateAlertsOutput) NotificationsForCorrelatedAlerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelateAlerts) *string { return v.NotificationsForCorrelatedAlerts }).(pulumi.StringPtrOutput)
}

// The priority of this correlation.
func (o CorrelateAlertsOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v CorrelateAlerts) int { return v.Priority }).(pulumi.IntOutput)
}

// Add logic for alerts correlation.
type CorrelateAlertsResponse struct {
	// Action that should be applied.
	// Expected value is 'CorrelateAlerts'.
	ActionType string `pulumi:"actionType"`
	// The list of conditions for the alerts correlations.
	CorrelateBy []CorrelateByResponse `pulumi:"correlateBy"`
	// The required duration (in ISO8601 format) for the alerts correlation.
	CorrelationInterval string `pulumi:"correlationInterval"`
	// Indicates how to handle child alerts notifications.
	NotificationsForCorrelatedAlerts *string `pulumi:"notificationsForCorrelatedAlerts"`
	// The priority of this correlation.
	Priority int `pulumi:"priority"`
}

// Defaults sets the appropriate defaults for CorrelateAlertsResponse
func (val *CorrelateAlertsResponse) Defaults() *CorrelateAlertsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.NotificationsForCorrelatedAlerts == nil {
		notificationsForCorrelatedAlerts_ := "SuppressAlways"
		tmp.NotificationsForCorrelatedAlerts = &notificationsForCorrelatedAlerts_
	}
	return &tmp
}

// Add logic for alerts correlation.
type CorrelateAlertsResponseOutput struct{ *pulumi.OutputState }

func (CorrelateAlertsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelateAlertsResponse)(nil)).Elem()
}

func (o CorrelateAlertsResponseOutput) ToCorrelateAlertsResponseOutput() CorrelateAlertsResponseOutput {
	return o
}

func (o CorrelateAlertsResponseOutput) ToCorrelateAlertsResponseOutputWithContext(ctx context.Context) CorrelateAlertsResponseOutput {
	return o
}

// Action that should be applied.
// Expected value is 'CorrelateAlerts'.
func (o CorrelateAlertsResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v CorrelateAlertsResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// The list of conditions for the alerts correlations.
func (o CorrelateAlertsResponseOutput) CorrelateBy() CorrelateByResponseArrayOutput {
	return o.ApplyT(func(v CorrelateAlertsResponse) []CorrelateByResponse { return v.CorrelateBy }).(CorrelateByResponseArrayOutput)
}

// The required duration (in ISO8601 format) for the alerts correlation.
func (o CorrelateAlertsResponseOutput) CorrelationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v CorrelateAlertsResponse) string { return v.CorrelationInterval }).(pulumi.StringOutput)
}

// Indicates how to handle child alerts notifications.
func (o CorrelateAlertsResponseOutput) NotificationsForCorrelatedAlerts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelateAlertsResponse) *string { return v.NotificationsForCorrelatedAlerts }).(pulumi.StringPtrOutput)
}

// The priority of this correlation.
func (o CorrelateAlertsResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v CorrelateAlertsResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// The logic for the correlation.
type CorrelateBy struct {
	// The JPath of the property that the alerts should be correlated by.
	Field *string `pulumi:"field"`
}

// CorrelateByInput is an input type that accepts CorrelateByArgs and CorrelateByOutput values.
// You can construct a concrete instance of `CorrelateByInput` via:
//
//	CorrelateByArgs{...}
type CorrelateByInput interface {
	pulumi.Input

	ToCorrelateByOutput() CorrelateByOutput
	ToCorrelateByOutputWithContext(context.Context) CorrelateByOutput
}

// The logic for the correlation.
type CorrelateByArgs struct {
	// The JPath of the property that the alerts should be correlated by.
	Field pulumi.StringPtrInput `pulumi:"field"`
}

func (CorrelateByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelateBy)(nil)).Elem()
}

func (i CorrelateByArgs) ToCorrelateByOutput() CorrelateByOutput {
	return i.ToCorrelateByOutputWithContext(context.Background())
}

func (i CorrelateByArgs) ToCorrelateByOutputWithContext(ctx context.Context) CorrelateByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelateByOutput)
}

// CorrelateByArrayInput is an input type that accepts CorrelateByArray and CorrelateByArrayOutput values.
// You can construct a concrete instance of `CorrelateByArrayInput` via:
//
//	CorrelateByArray{ CorrelateByArgs{...} }
type CorrelateByArrayInput interface {
	pulumi.Input

	ToCorrelateByArrayOutput() CorrelateByArrayOutput
	ToCorrelateByArrayOutputWithContext(context.Context) CorrelateByArrayOutput
}

type CorrelateByArray []CorrelateByInput

func (CorrelateByArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CorrelateBy)(nil)).Elem()
}

func (i CorrelateByArray) ToCorrelateByArrayOutput() CorrelateByArrayOutput {
	return i.ToCorrelateByArrayOutputWithContext(context.Background())
}

func (i CorrelateByArray) ToCorrelateByArrayOutputWithContext(ctx context.Context) CorrelateByArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelateByArrayOutput)
}

// The logic for the correlation.
type CorrelateByOutput struct{ *pulumi.OutputState }

func (CorrelateByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelateBy)(nil)).Elem()
}

func (o CorrelateByOutput) ToCorrelateByOutput() CorrelateByOutput {
	return o
}

func (o CorrelateByOutput) ToCorrelateByOutputWithContext(ctx context.Context) CorrelateByOutput {
	return o
}

// The JPath of the property that the alerts should be correlated by.
func (o CorrelateByOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelateBy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type CorrelateByArrayOutput struct{ *pulumi.OutputState }

func (CorrelateByArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CorrelateBy)(nil)).Elem()
}

func (o CorrelateByArrayOutput) ToCorrelateByArrayOutput() CorrelateByArrayOutput {
	return o
}

func (o CorrelateByArrayOutput) ToCorrelateByArrayOutputWithContext(ctx context.Context) CorrelateByArrayOutput {
	return o
}

func (o CorrelateByArrayOutput) Index(i pulumi.IntInput) CorrelateByOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CorrelateBy {
		return vs[0].([]CorrelateBy)[vs[1].(int)]
	}).(CorrelateByOutput)
}

// The logic for the correlation.
type CorrelateByResponse struct {
	// The JPath of the property that the alerts should be correlated by.
	Field *string `pulumi:"field"`
}

// The logic for the correlation.
type CorrelateByResponseOutput struct{ *pulumi.OutputState }

func (CorrelateByResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelateByResponse)(nil)).Elem()
}

func (o CorrelateByResponseOutput) ToCorrelateByResponseOutput() CorrelateByResponseOutput {
	return o
}

func (o CorrelateByResponseOutput) ToCorrelateByResponseOutputWithContext(ctx context.Context) CorrelateByResponseOutput {
	return o
}

// The JPath of the property that the alerts should be correlated by.
func (o CorrelateByResponseOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelateByResponse) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type CorrelateByResponseArrayOutput struct{ *pulumi.OutputState }

func (CorrelateByResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CorrelateByResponse)(nil)).Elem()
}

func (o CorrelateByResponseArrayOutput) ToCorrelateByResponseArrayOutput() CorrelateByResponseArrayOutput {
	return o
}

func (o CorrelateByResponseArrayOutput) ToCorrelateByResponseArrayOutputWithContext(ctx context.Context) CorrelateByResponseArrayOutput {
	return o
}

func (o CorrelateByResponseArrayOutput) Index(i pulumi.IntInput) CorrelateByResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CorrelateByResponse {
		return vs[0].([]CorrelateByResponse)[vs[1].(int)]
	}).(CorrelateByResponseOutput)
}

// Daily recurrence object.
type DailyRecurrence struct {
	// End time for recurrence.
	EndTime string `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Daily'.
	RecurrenceType string `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime string `pulumi:"startTime"`
}

// DailyRecurrenceInput is an input type that accepts DailyRecurrenceArgs and DailyRecurrenceOutput values.
// You can construct a concrete instance of `DailyRecurrenceInput` via:
//
//	DailyRecurrenceArgs{...}
type DailyRecurrenceInput interface {
	pulumi.Input

	ToDailyRecurrenceOutput() DailyRecurrenceOutput
	ToDailyRecurrenceOutputWithContext(context.Context) DailyRecurrenceOutput
}

// Daily recurrence object.
type DailyRecurrenceArgs struct {
	// End time for recurrence.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Daily'.
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (DailyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRecurrence)(nil)).Elem()
}

func (i DailyRecurrenceArgs) ToDailyRecurrenceOutput() DailyRecurrenceOutput {
	return i.ToDailyRecurrenceOutputWithContext(context.Background())
}

func (i DailyRecurrenceArgs) ToDailyRecurrenceOutputWithContext(ctx context.Context) DailyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyRecurrenceOutput)
}

// Daily recurrence object.
type DailyRecurrenceOutput struct{ *pulumi.OutputState }

func (DailyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRecurrence)(nil)).Elem()
}

func (o DailyRecurrenceOutput) ToDailyRecurrenceOutput() DailyRecurrenceOutput {
	return o
}

func (o DailyRecurrenceOutput) ToDailyRecurrenceOutputWithContext(ctx context.Context) DailyRecurrenceOutput {
	return o
}

// End time for recurrence.
func (o DailyRecurrenceOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v DailyRecurrence) string { return v.EndTime }).(pulumi.StringOutput)
}

// Specifies when the recurrence should be applied.
// Expected value is 'Daily'.
func (o DailyRecurrenceOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DailyRecurrence) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Start time for recurrence.
func (o DailyRecurrenceOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v DailyRecurrence) string { return v.StartTime }).(pulumi.StringOutput)
}

// Daily recurrence object.
type DailyRecurrenceResponse struct {
	// End time for recurrence.
	EndTime string `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Daily'.
	RecurrenceType string `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime string `pulumi:"startTime"`
}

// Daily recurrence object.
type DailyRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (DailyRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRecurrenceResponse)(nil)).Elem()
}

func (o DailyRecurrenceResponseOutput) ToDailyRecurrenceResponseOutput() DailyRecurrenceResponseOutput {
	return o
}

func (o DailyRecurrenceResponseOutput) ToDailyRecurrenceResponseOutputWithContext(ctx context.Context) DailyRecurrenceResponseOutput {
	return o
}

// End time for recurrence.
func (o DailyRecurrenceResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v DailyRecurrenceResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Specifies when the recurrence should be applied.
// Expected value is 'Daily'.
func (o DailyRecurrenceResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DailyRecurrenceResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Start time for recurrence.
func (o DailyRecurrenceResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v DailyRecurrenceResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Monthly recurrence object.
type MonthlyRecurrence struct {
	// Specifies the values for monthly recurrence pattern.
	DaysOfMonth []int `pulumi:"daysOfMonth"`
	// End time for recurrence.
	EndTime *string `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Monthly'.
	RecurrenceType string `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime *string `pulumi:"startTime"`
}

// MonthlyRecurrenceInput is an input type that accepts MonthlyRecurrenceArgs and MonthlyRecurrenceOutput values.
// You can construct a concrete instance of `MonthlyRecurrenceInput` via:
//
//	MonthlyRecurrenceArgs{...}
type MonthlyRecurrenceInput interface {
	pulumi.Input

	ToMonthlyRecurrenceOutput() MonthlyRecurrenceOutput
	ToMonthlyRecurrenceOutputWithContext(context.Context) MonthlyRecurrenceOutput
}

// Monthly recurrence object.
type MonthlyRecurrenceArgs struct {
	// Specifies the values for monthly recurrence pattern.
	DaysOfMonth pulumi.IntArrayInput `pulumi:"daysOfMonth"`
	// End time for recurrence.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Monthly'.
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (MonthlyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyRecurrence)(nil)).Elem()
}

func (i MonthlyRecurrenceArgs) ToMonthlyRecurrenceOutput() MonthlyRecurrenceOutput {
	return i.ToMonthlyRecurrenceOutputWithContext(context.Background())
}

func (i MonthlyRecurrenceArgs) ToMonthlyRecurrenceOutputWithContext(ctx context.Context) MonthlyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyRecurrenceOutput)
}

// Monthly recurrence object.
type MonthlyRecurrenceOutput struct{ *pulumi.OutputState }

func (MonthlyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyRecurrence)(nil)).Elem()
}

func (o MonthlyRecurrenceOutput) ToMonthlyRecurrenceOutput() MonthlyRecurrenceOutput {
	return o
}

func (o MonthlyRecurrenceOutput) ToMonthlyRecurrenceOutputWithContext(ctx context.Context) MonthlyRecurrenceOutput {
	return o
}

// Specifies the values for monthly recurrence pattern.
func (o MonthlyRecurrenceOutput) DaysOfMonth() pulumi.IntArrayOutput {
	return o.ApplyT(func(v MonthlyRecurrence) []int { return v.DaysOfMonth }).(pulumi.IntArrayOutput)
}

// End time for recurrence.
func (o MonthlyRecurrenceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlyRecurrence) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies when the recurrence should be applied.
// Expected value is 'Monthly'.
func (o MonthlyRecurrenceOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v MonthlyRecurrence) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Start time for recurrence.
func (o MonthlyRecurrenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlyRecurrence) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Monthly recurrence object.
type MonthlyRecurrenceResponse struct {
	// Specifies the values for monthly recurrence pattern.
	DaysOfMonth []int `pulumi:"daysOfMonth"`
	// End time for recurrence.
	EndTime *string `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Monthly'.
	RecurrenceType string `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime *string `pulumi:"startTime"`
}

// Monthly recurrence object.
type MonthlyRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (MonthlyRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyRecurrenceResponse)(nil)).Elem()
}

func (o MonthlyRecurrenceResponseOutput) ToMonthlyRecurrenceResponseOutput() MonthlyRecurrenceResponseOutput {
	return o
}

func (o MonthlyRecurrenceResponseOutput) ToMonthlyRecurrenceResponseOutputWithContext(ctx context.Context) MonthlyRecurrenceResponseOutput {
	return o
}

// Specifies the values for monthly recurrence pattern.
func (o MonthlyRecurrenceResponseOutput) DaysOfMonth() pulumi.IntArrayOutput {
	return o.ApplyT(func(v MonthlyRecurrenceResponse) []int { return v.DaysOfMonth }).(pulumi.IntArrayOutput)
}

// End time for recurrence.
func (o MonthlyRecurrenceResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlyRecurrenceResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies when the recurrence should be applied.
// Expected value is 'Monthly'.
func (o MonthlyRecurrenceResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v MonthlyRecurrenceResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Start time for recurrence.
func (o MonthlyRecurrenceResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlyRecurrenceResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Indicates if all action groups should be removed.
type RemoveAllActionGroups struct {
	// Action that should be applied.
	// Expected value is 'RemoveAllActionGroups'.
	ActionType string `pulumi:"actionType"`
}

// RemoveAllActionGroupsInput is an input type that accepts RemoveAllActionGroupsArgs and RemoveAllActionGroupsOutput values.
// You can construct a concrete instance of `RemoveAllActionGroupsInput` via:
//
//	RemoveAllActionGroupsArgs{...}
type RemoveAllActionGroupsInput interface {
	pulumi.Input

	ToRemoveAllActionGroupsOutput() RemoveAllActionGroupsOutput
	ToRemoveAllActionGroupsOutputWithContext(context.Context) RemoveAllActionGroupsOutput
}

// Indicates if all action groups should be removed.
type RemoveAllActionGroupsArgs struct {
	// Action that should be applied.
	// Expected value is 'RemoveAllActionGroups'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
}

func (RemoveAllActionGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoveAllActionGroups)(nil)).Elem()
}

func (i RemoveAllActionGroupsArgs) ToRemoveAllActionGroupsOutput() RemoveAllActionGroupsOutput {
	return i.ToRemoveAllActionGroupsOutputWithContext(context.Background())
}

func (i RemoveAllActionGroupsArgs) ToRemoveAllActionGroupsOutputWithContext(ctx context.Context) RemoveAllActionGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoveAllActionGroupsOutput)
}

// Indicates if all action groups should be removed.
type RemoveAllActionGroupsOutput struct{ *pulumi.OutputState }

func (RemoveAllActionGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoveAllActionGroups)(nil)).Elem()
}

func (o RemoveAllActionGroupsOutput) ToRemoveAllActionGroupsOutput() RemoveAllActionGroupsOutput {
	return o
}

func (o RemoveAllActionGroupsOutput) ToRemoveAllActionGroupsOutputWithContext(ctx context.Context) RemoveAllActionGroupsOutput {
	return o
}

// Action that should be applied.
// Expected value is 'RemoveAllActionGroups'.
func (o RemoveAllActionGroupsOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v RemoveAllActionGroups) string { return v.ActionType }).(pulumi.StringOutput)
}

// Indicates if all action groups should be removed.
type RemoveAllActionGroupsResponse struct {
	// Action that should be applied.
	// Expected value is 'RemoveAllActionGroups'.
	ActionType string `pulumi:"actionType"`
}

// Indicates if all action groups should be removed.
type RemoveAllActionGroupsResponseOutput struct{ *pulumi.OutputState }

func (RemoveAllActionGroupsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoveAllActionGroupsResponse)(nil)).Elem()
}

func (o RemoveAllActionGroupsResponseOutput) ToRemoveAllActionGroupsResponseOutput() RemoveAllActionGroupsResponseOutput {
	return o
}

func (o RemoveAllActionGroupsResponseOutput) ToRemoveAllActionGroupsResponseOutputWithContext(ctx context.Context) RemoveAllActionGroupsResponseOutput {
	return o
}

// Action that should be applied.
// Expected value is 'RemoveAllActionGroups'.
func (o RemoveAllActionGroupsResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v RemoveAllActionGroupsResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// Scheduling configuration for a given alert processing rule.
type Schedule struct {
	// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveFrom *string `pulumi:"effectiveFrom"`
	// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveUntil *string `pulumi:"effectiveUntil"`
	// List of recurrences.
	Recurrences []interface{} `pulumi:"recurrences"`
	// Scheduling time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//	ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Scheduling configuration for a given alert processing rule.
type ScheduleArgs struct {
	// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveFrom pulumi.StringPtrInput `pulumi:"effectiveFrom"`
	// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveUntil pulumi.StringPtrInput `pulumi:"effectiveUntil"`
	// List of recurrences.
	Recurrences pulumi.ArrayInput `pulumi:"recurrences"`
	// Scheduling time zone.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i ScheduleArgs) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput).ToSchedulePtrOutputWithContext(ctx)
}

// SchedulePtrInput is an input type that accepts ScheduleArgs, SchedulePtr and SchedulePtrOutput values.
// You can construct a concrete instance of `SchedulePtrInput` via:
//
//	        ScheduleArgs{...}
//
//	or:
//
//	        nil
type SchedulePtrInput interface {
	pulumi.Input

	ToSchedulePtrOutput() SchedulePtrOutput
	ToSchedulePtrOutputWithContext(context.Context) SchedulePtrOutput
}

type schedulePtrType ScheduleArgs

func SchedulePtr(v *ScheduleArgs) SchedulePtrInput {
	return (*schedulePtrType)(v)
}

func (*schedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *schedulePtrType) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i *schedulePtrType) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePtrOutput)
}

// Scheduling configuration for a given alert processing rule.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o.ToSchedulePtrOutputWithContext(context.Background())
}

func (o ScheduleOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Schedule) *Schedule {
		return &v
	}).(SchedulePtrOutput)
}

// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
func (o ScheduleOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schedule) *string { return v.EffectiveFrom }).(pulumi.StringPtrOutput)
}

// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
func (o ScheduleOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schedule) *string { return v.EffectiveUntil }).(pulumi.StringPtrOutput)
}

// List of recurrences.
func (o ScheduleOutput) Recurrences() pulumi.ArrayOutput {
	return o.ApplyT(func(v Schedule) []interface{} { return v.Recurrences }).(pulumi.ArrayOutput)
}

// Scheduling time zone.
func (o ScheduleOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schedule) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type SchedulePtrOutput struct{ *pulumi.OutputState }

func (SchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o SchedulePtrOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) Elem() ScheduleOutput {
	return o.ApplyT(func(v *Schedule) Schedule {
		if v != nil {
			return *v
		}
		var ret Schedule
		return ret
	}).(ScheduleOutput)
}

// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
func (o SchedulePtrOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveFrom
	}).(pulumi.StringPtrOutput)
}

// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
func (o SchedulePtrOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveUntil
	}).(pulumi.StringPtrOutput)
}

// List of recurrences.
func (o SchedulePtrOutput) Recurrences() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Schedule) []interface{} {
		if v == nil {
			return nil
		}
		return v.Recurrences
	}).(pulumi.ArrayOutput)
}

// Scheduling time zone.
func (o SchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Scheduling configuration for a given alert processing rule.
type ScheduleResponse struct {
	// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveFrom *string `pulumi:"effectiveFrom"`
	// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveUntil *string `pulumi:"effectiveUntil"`
	// List of recurrences.
	Recurrences []interface{} `pulumi:"recurrences"`
	// Scheduling time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// Scheduling configuration for a given alert processing rule.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
func (o ScheduleResponseOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.EffectiveFrom }).(pulumi.StringPtrOutput)
}

// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
func (o ScheduleResponseOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.EffectiveUntil }).(pulumi.StringPtrOutput)
}

// List of recurrences.
func (o ScheduleResponseOutput) Recurrences() pulumi.ArrayOutput {
	return o.ApplyT(func(v ScheduleResponse) []interface{} { return v.Recurrences }).(pulumi.ArrayOutput)
}

// Scheduling time zone.
func (o ScheduleResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type ScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) Elem() ScheduleResponseOutput {
	return o.ApplyT(func(v *ScheduleResponse) ScheduleResponse {
		if v != nil {
			return *v
		}
		var ret ScheduleResponse
		return ret
	}).(ScheduleResponseOutput)
}

// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
func (o ScheduleResponsePtrOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveFrom
	}).(pulumi.StringPtrOutput)
}

// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
func (o ScheduleResponsePtrOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveUntil
	}).(pulumi.StringPtrOutput)
}

// List of recurrences.
func (o ScheduleResponsePtrOutput) Recurrences() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ScheduleResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.Recurrences
	}).(pulumi.ArrayOutput)
}

// Scheduling time zone.
func (o ScheduleResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Weekly recurrence object.
type WeeklyRecurrence struct {
	// Specifies the values for weekly recurrence pattern.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// End time for recurrence.
	EndTime *string `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Weekly'.
	RecurrenceType string `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime *string `pulumi:"startTime"`
}

// WeeklyRecurrenceInput is an input type that accepts WeeklyRecurrenceArgs and WeeklyRecurrenceOutput values.
// You can construct a concrete instance of `WeeklyRecurrenceInput` via:
//
//	WeeklyRecurrenceArgs{...}
type WeeklyRecurrenceInput interface {
	pulumi.Input

	ToWeeklyRecurrenceOutput() WeeklyRecurrenceOutput
	ToWeeklyRecurrenceOutputWithContext(context.Context) WeeklyRecurrenceOutput
}

// Weekly recurrence object.
type WeeklyRecurrenceArgs struct {
	// Specifies the values for weekly recurrence pattern.
	DaysOfWeek pulumi.StringArrayInput `pulumi:"daysOfWeek"`
	// End time for recurrence.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Weekly'.
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (WeeklyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRecurrence)(nil)).Elem()
}

func (i WeeklyRecurrenceArgs) ToWeeklyRecurrenceOutput() WeeklyRecurrenceOutput {
	return i.ToWeeklyRecurrenceOutputWithContext(context.Background())
}

func (i WeeklyRecurrenceArgs) ToWeeklyRecurrenceOutputWithContext(ctx context.Context) WeeklyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyRecurrenceOutput)
}

// Weekly recurrence object.
type WeeklyRecurrenceOutput struct{ *pulumi.OutputState }

func (WeeklyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRecurrence)(nil)).Elem()
}

func (o WeeklyRecurrenceOutput) ToWeeklyRecurrenceOutput() WeeklyRecurrenceOutput {
	return o
}

func (o WeeklyRecurrenceOutput) ToWeeklyRecurrenceOutputWithContext(ctx context.Context) WeeklyRecurrenceOutput {
	return o
}

// Specifies the values for weekly recurrence pattern.
func (o WeeklyRecurrenceOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyRecurrence) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// End time for recurrence.
func (o WeeklyRecurrenceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklyRecurrence) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies when the recurrence should be applied.
// Expected value is 'Weekly'.
func (o WeeklyRecurrenceOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyRecurrence) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Start time for recurrence.
func (o WeeklyRecurrenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklyRecurrence) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Weekly recurrence object.
type WeeklyRecurrenceResponse struct {
	// Specifies the values for weekly recurrence pattern.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// End time for recurrence.
	EndTime *string `pulumi:"endTime"`
	// Specifies when the recurrence should be applied.
	// Expected value is 'Weekly'.
	RecurrenceType string `pulumi:"recurrenceType"`
	// Start time for recurrence.
	StartTime *string `pulumi:"startTime"`
}

// Weekly recurrence object.
type WeeklyRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (WeeklyRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRecurrenceResponse)(nil)).Elem()
}

func (o WeeklyRecurrenceResponseOutput) ToWeeklyRecurrenceResponseOutput() WeeklyRecurrenceResponseOutput {
	return o
}

func (o WeeklyRecurrenceResponseOutput) ToWeeklyRecurrenceResponseOutputWithContext(ctx context.Context) WeeklyRecurrenceResponseOutput {
	return o
}

// Specifies the values for weekly recurrence pattern.
func (o WeeklyRecurrenceResponseOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyRecurrenceResponse) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// End time for recurrence.
func (o WeeklyRecurrenceResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklyRecurrenceResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies when the recurrence should be applied.
// Expected value is 'Weekly'.
func (o WeeklyRecurrenceResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyRecurrenceResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Start time for recurrence.
func (o WeeklyRecurrenceResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeeklyRecurrenceResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AddActionGroupsOutput{})
	pulumi.RegisterOutputType(AddActionGroupsResponseOutput{})
	pulumi.RegisterOutputType(AlertProcessingRulePropertiesOutput{})
	pulumi.RegisterOutputType(AlertProcessingRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionArrayOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(CorrelateAlertsOutput{})
	pulumi.RegisterOutputType(CorrelateAlertsResponseOutput{})
	pulumi.RegisterOutputType(CorrelateByOutput{})
	pulumi.RegisterOutputType(CorrelateByArrayOutput{})
	pulumi.RegisterOutputType(CorrelateByResponseOutput{})
	pulumi.RegisterOutputType(CorrelateByResponseArrayOutput{})
	pulumi.RegisterOutputType(DailyRecurrenceOutput{})
	pulumi.RegisterOutputType(DailyRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(MonthlyRecurrenceOutput{})
	pulumi.RegisterOutputType(MonthlyRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(RemoveAllActionGroupsOutput{})
	pulumi.RegisterOutputType(RemoveAllActionGroupsResponseOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(SchedulePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(WeeklyRecurrenceOutput{})
	pulumi.RegisterOutputType(WeeklyRecurrenceResponseOutput{})
}
