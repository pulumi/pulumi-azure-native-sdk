// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alertsmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Issue resource
//
// Uses Azure REST API version 2025-03-01-preview.
type Issue struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties IssuePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIssue registers a new resource with the given unique name, arguments, and options.
func NewIssue(ctx *pulumi.Context,
	name string, args *IssueArgs, opts ...pulumi.ResourceOption) (*Issue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:alertsmanagement/v20250301preview:Issue"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Issue
	err := ctx.RegisterResource("azure-native:alertsmanagement:Issue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssue gets an existing Issue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssueState, opts ...pulumi.ResourceOption) (*Issue, error) {
	var resource Issue
	err := ctx.ReadResource("azure-native:alertsmanagement:Issue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Issue resources.
type issueState struct {
}

type IssueState struct {
}

func (IssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*issueState)(nil)).Elem()
}

type issueArgs struct {
	// The name of the IssueResource
	IssueName *string `pulumi:"issueName"`
	// The resource-specific properties for this resource.
	Properties *IssueProperties `pulumi:"properties"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
}

// The set of arguments for constructing a Issue resource.
type IssueArgs struct {
	// The name of the IssueResource
	IssueName pulumi.StringPtrInput
	// The resource-specific properties for this resource.
	Properties IssuePropertiesPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
}

func (IssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issueArgs)(nil)).Elem()
}

type IssueInput interface {
	pulumi.Input

	ToIssueOutput() IssueOutput
	ToIssueOutputWithContext(ctx context.Context) IssueOutput
}

func (*Issue) ElementType() reflect.Type {
	return reflect.TypeOf((**Issue)(nil)).Elem()
}

func (i *Issue) ToIssueOutput() IssueOutput {
	return i.ToIssueOutputWithContext(context.Background())
}

func (i *Issue) ToIssueOutputWithContext(ctx context.Context) IssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueOutput)
}

type IssueOutput struct{ *pulumi.OutputState }

func (IssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Issue)(nil)).Elem()
}

func (o IssueOutput) ToIssueOutput() IssueOutput {
	return o
}

func (o IssueOutput) ToIssueOutputWithContext(ctx context.Context) IssueOutput {
	return o
}

// The Azure API version of the resource.
func (o IssueOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Issue) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o IssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Issue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o IssueOutput) Properties() IssuePropertiesResponseOutput {
	return o.ApplyT(func(v *Issue) IssuePropertiesResponseOutput { return v.Properties }).(IssuePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o IssueOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Issue) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o IssueOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Issue) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(IssueOutput{})
}
