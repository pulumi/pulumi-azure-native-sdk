// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Defines a component binding for a provider.
type BindingProperties struct {
	// Configuration values for the binding.
	Config interface{} `pulumi:"config"`
	// Name of the provider.
	Provider string `pulumi:"provider"`
	// Role that the provider binds to with the component.
	Role string `pulumi:"role"`
}

// BindingPropertiesInput is an input type that accepts BindingPropertiesArgs and BindingPropertiesOutput values.
// You can construct a concrete instance of `BindingPropertiesInput` via:
//
//	BindingPropertiesArgs{...}
type BindingPropertiesInput interface {
	pulumi.Input

	ToBindingPropertiesOutput() BindingPropertiesOutput
	ToBindingPropertiesOutputWithContext(context.Context) BindingPropertiesOutput
}

// Defines a component binding for a provider.
type BindingPropertiesArgs struct {
	// Configuration values for the binding.
	Config pulumi.Input `pulumi:"config"`
	// Name of the provider.
	Provider pulumi.StringInput `pulumi:"provider"`
	// Role that the provider binds to with the component.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingProperties)(nil)).Elem()
}

func (i BindingPropertiesArgs) ToBindingPropertiesOutput() BindingPropertiesOutput {
	return i.ToBindingPropertiesOutputWithContext(context.Background())
}

func (i BindingPropertiesArgs) ToBindingPropertiesOutputWithContext(ctx context.Context) BindingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingPropertiesOutput)
}

// BindingPropertiesArrayInput is an input type that accepts BindingPropertiesArray and BindingPropertiesArrayOutput values.
// You can construct a concrete instance of `BindingPropertiesArrayInput` via:
//
//	BindingPropertiesArray{ BindingPropertiesArgs{...} }
type BindingPropertiesArrayInput interface {
	pulumi.Input

	ToBindingPropertiesArrayOutput() BindingPropertiesArrayOutput
	ToBindingPropertiesArrayOutputWithContext(context.Context) BindingPropertiesArrayOutput
}

type BindingPropertiesArray []BindingPropertiesInput

func (BindingPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingProperties)(nil)).Elem()
}

func (i BindingPropertiesArray) ToBindingPropertiesArrayOutput() BindingPropertiesArrayOutput {
	return i.ToBindingPropertiesArrayOutputWithContext(context.Background())
}

func (i BindingPropertiesArray) ToBindingPropertiesArrayOutputWithContext(ctx context.Context) BindingPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingPropertiesArrayOutput)
}

// Defines a component binding for a provider.
type BindingPropertiesOutput struct{ *pulumi.OutputState }

func (BindingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingProperties)(nil)).Elem()
}

func (o BindingPropertiesOutput) ToBindingPropertiesOutput() BindingPropertiesOutput {
	return o
}

func (o BindingPropertiesOutput) ToBindingPropertiesOutputWithContext(ctx context.Context) BindingPropertiesOutput {
	return o
}

// Configuration values for the binding.
func (o BindingPropertiesOutput) Config() pulumi.AnyOutput {
	return o.ApplyT(func(v BindingProperties) interface{} { return v.Config }).(pulumi.AnyOutput)
}

// Name of the provider.
func (o BindingPropertiesOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v BindingProperties) string { return v.Provider }).(pulumi.StringOutput)
}

// Role that the provider binds to with the component.
func (o BindingPropertiesOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingProperties) string { return v.Role }).(pulumi.StringOutput)
}

type BindingPropertiesArrayOutput struct{ *pulumi.OutputState }

func (BindingPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingProperties)(nil)).Elem()
}

func (o BindingPropertiesArrayOutput) ToBindingPropertiesArrayOutput() BindingPropertiesArrayOutput {
	return o
}

func (o BindingPropertiesArrayOutput) ToBindingPropertiesArrayOutputWithContext(ctx context.Context) BindingPropertiesArrayOutput {
	return o
}

func (o BindingPropertiesArrayOutput) Index(i pulumi.IntInput) BindingPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingProperties {
		return vs[0].([]BindingProperties)[vs[1].(int)]
	}).(BindingPropertiesOutput)
}

// Defines a component binding for a provider.
type BindingPropertiesResponse struct {
	// Configuration values for the binding.
	Config interface{} `pulumi:"config"`
	// Name of the provider.
	Provider string `pulumi:"provider"`
	// Role that the provider binds to with the component.
	Role string `pulumi:"role"`
}

// Defines a component binding for a provider.
type BindingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BindingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingPropertiesResponse)(nil)).Elem()
}

func (o BindingPropertiesResponseOutput) ToBindingPropertiesResponseOutput() BindingPropertiesResponseOutput {
	return o
}

func (o BindingPropertiesResponseOutput) ToBindingPropertiesResponseOutputWithContext(ctx context.Context) BindingPropertiesResponseOutput {
	return o
}

// Configuration values for the binding.
func (o BindingPropertiesResponseOutput) Config() pulumi.AnyOutput {
	return o.ApplyT(func(v BindingPropertiesResponse) interface{} { return v.Config }).(pulumi.AnyOutput)
}

// Name of the provider.
func (o BindingPropertiesResponseOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v BindingPropertiesResponse) string { return v.Provider }).(pulumi.StringOutput)
}

// Role that the provider binds to with the component.
func (o BindingPropertiesResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingPropertiesResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingPropertiesResponse)(nil)).Elem()
}

func (o BindingPropertiesResponseArrayOutput) ToBindingPropertiesResponseArrayOutput() BindingPropertiesResponseArrayOutput {
	return o
}

func (o BindingPropertiesResponseArrayOutput) ToBindingPropertiesResponseArrayOutputWithContext(ctx context.Context) BindingPropertiesResponseArrayOutput {
	return o
}

func (o BindingPropertiesResponseArrayOutput) Index(i pulumi.IntInput) BindingPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingPropertiesResponse {
		return vs[0].([]BindingPropertiesResponse)[vs[1].(int)]
	}).(BindingPropertiesResponseOutput)
}

// Defines a desired runtime component.
type ComponentProperties struct {
	// Component dependencies.
	Dependencies []string `pulumi:"dependencies"`
	// Name of the component.
	Name string `pulumi:"name"`
	// Properties of the component.
	Properties interface{} `pulumi:"properties"`
	// Component type.
	Type string `pulumi:"type"`
}

// ComponentPropertiesInput is an input type that accepts ComponentPropertiesArgs and ComponentPropertiesOutput values.
// You can construct a concrete instance of `ComponentPropertiesInput` via:
//
//	ComponentPropertiesArgs{...}
type ComponentPropertiesInput interface {
	pulumi.Input

	ToComponentPropertiesOutput() ComponentPropertiesOutput
	ToComponentPropertiesOutputWithContext(context.Context) ComponentPropertiesOutput
}

// Defines a desired runtime component.
type ComponentPropertiesArgs struct {
	// Component dependencies.
	Dependencies pulumi.StringArrayInput `pulumi:"dependencies"`
	// Name of the component.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the component.
	Properties pulumi.Input `pulumi:"properties"`
	// Component type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComponentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperties)(nil)).Elem()
}

func (i ComponentPropertiesArgs) ToComponentPropertiesOutput() ComponentPropertiesOutput {
	return i.ToComponentPropertiesOutputWithContext(context.Background())
}

func (i ComponentPropertiesArgs) ToComponentPropertiesOutputWithContext(ctx context.Context) ComponentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertiesOutput)
}

// ComponentPropertiesArrayInput is an input type that accepts ComponentPropertiesArray and ComponentPropertiesArrayOutput values.
// You can construct a concrete instance of `ComponentPropertiesArrayInput` via:
//
//	ComponentPropertiesArray{ ComponentPropertiesArgs{...} }
type ComponentPropertiesArrayInput interface {
	pulumi.Input

	ToComponentPropertiesArrayOutput() ComponentPropertiesArrayOutput
	ToComponentPropertiesArrayOutputWithContext(context.Context) ComponentPropertiesArrayOutput
}

type ComponentPropertiesArray []ComponentPropertiesInput

func (ComponentPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentProperties)(nil)).Elem()
}

func (i ComponentPropertiesArray) ToComponentPropertiesArrayOutput() ComponentPropertiesArrayOutput {
	return i.ToComponentPropertiesArrayOutputWithContext(context.Background())
}

func (i ComponentPropertiesArray) ToComponentPropertiesArrayOutputWithContext(ctx context.Context) ComponentPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertiesArrayOutput)
}

// Defines a desired runtime component.
type ComponentPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperties)(nil)).Elem()
}

func (o ComponentPropertiesOutput) ToComponentPropertiesOutput() ComponentPropertiesOutput {
	return o
}

func (o ComponentPropertiesOutput) ToComponentPropertiesOutputWithContext(ctx context.Context) ComponentPropertiesOutput {
	return o
}

// Component dependencies.
func (o ComponentPropertiesOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComponentProperties) []string { return v.Dependencies }).(pulumi.StringArrayOutput)
}

// Name of the component.
func (o ComponentPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentProperties) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the component.
func (o ComponentPropertiesOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentProperties) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

// Component type.
func (o ComponentPropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentProperties) string { return v.Type }).(pulumi.StringOutput)
}

type ComponentPropertiesArrayOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentProperties)(nil)).Elem()
}

func (o ComponentPropertiesArrayOutput) ToComponentPropertiesArrayOutput() ComponentPropertiesArrayOutput {
	return o
}

func (o ComponentPropertiesArrayOutput) ToComponentPropertiesArrayOutputWithContext(ctx context.Context) ComponentPropertiesArrayOutput {
	return o
}

func (o ComponentPropertiesArrayOutput) Index(i pulumi.IntInput) ComponentPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentProperties {
		return vs[0].([]ComponentProperties)[vs[1].(int)]
	}).(ComponentPropertiesOutput)
}

// Defines a desired runtime component.
type ComponentPropertiesResponse struct {
	// Component dependencies.
	Dependencies []string `pulumi:"dependencies"`
	// Name of the component.
	Name string `pulumi:"name"`
	// Properties of the component.
	Properties interface{} `pulumi:"properties"`
	// Component type.
	Type string `pulumi:"type"`
}

// Defines a desired runtime component.
type ComponentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentPropertiesResponse)(nil)).Elem()
}

func (o ComponentPropertiesResponseOutput) ToComponentPropertiesResponseOutput() ComponentPropertiesResponseOutput {
	return o
}

func (o ComponentPropertiesResponseOutput) ToComponentPropertiesResponseOutputWithContext(ctx context.Context) ComponentPropertiesResponseOutput {
	return o
}

// Component dependencies.
func (o ComponentPropertiesResponseOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComponentPropertiesResponse) []string { return v.Dependencies }).(pulumi.StringArrayOutput)
}

// Name of the component.
func (o ComponentPropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentPropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the component.
func (o ComponentPropertiesResponseOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentPropertiesResponse) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

// Component type.
func (o ComponentPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ComponentPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentPropertiesResponse)(nil)).Elem()
}

func (o ComponentPropertiesResponseArrayOutput) ToComponentPropertiesResponseArrayOutput() ComponentPropertiesResponseArrayOutput {
	return o
}

func (o ComponentPropertiesResponseArrayOutput) ToComponentPropertiesResponseArrayOutputWithContext(ctx context.Context) ComponentPropertiesResponseArrayOutput {
	return o
}

func (o ComponentPropertiesResponseArrayOutput) Index(i pulumi.IntInput) ComponentPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentPropertiesResponse {
		return vs[0].([]ComponentPropertiesResponse)[vs[1].(int)]
	}).(ComponentPropertiesResponseOutput)
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocation struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// The type of the extended location.
	Type string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationArgs struct {
	// The name of the extended location.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the extended location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationResponse struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// The type of the extended location.
	Type string `pulumi:"type"`
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Reconciliation Policy.
type ReconciliationPolicy struct {
	// Policy interval.
	Interval *string `pulumi:"interval"`
	// Policy type
	Type string `pulumi:"type"`
}

// ReconciliationPolicyInput is an input type that accepts ReconciliationPolicyArgs and ReconciliationPolicyOutput values.
// You can construct a concrete instance of `ReconciliationPolicyInput` via:
//
//	ReconciliationPolicyArgs{...}
type ReconciliationPolicyInput interface {
	pulumi.Input

	ToReconciliationPolicyOutput() ReconciliationPolicyOutput
	ToReconciliationPolicyOutputWithContext(context.Context) ReconciliationPolicyOutput
}

// Reconciliation Policy.
type ReconciliationPolicyArgs struct {
	// Policy interval.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Policy type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReconciliationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReconciliationPolicy)(nil)).Elem()
}

func (i ReconciliationPolicyArgs) ToReconciliationPolicyOutput() ReconciliationPolicyOutput {
	return i.ToReconciliationPolicyOutputWithContext(context.Background())
}

func (i ReconciliationPolicyArgs) ToReconciliationPolicyOutputWithContext(ctx context.Context) ReconciliationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReconciliationPolicyOutput)
}

func (i ReconciliationPolicyArgs) ToReconciliationPolicyPtrOutput() ReconciliationPolicyPtrOutput {
	return i.ToReconciliationPolicyPtrOutputWithContext(context.Background())
}

func (i ReconciliationPolicyArgs) ToReconciliationPolicyPtrOutputWithContext(ctx context.Context) ReconciliationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReconciliationPolicyOutput).ToReconciliationPolicyPtrOutputWithContext(ctx)
}

// ReconciliationPolicyPtrInput is an input type that accepts ReconciliationPolicyArgs, ReconciliationPolicyPtr and ReconciliationPolicyPtrOutput values.
// You can construct a concrete instance of `ReconciliationPolicyPtrInput` via:
//
//	        ReconciliationPolicyArgs{...}
//
//	or:
//
//	        nil
type ReconciliationPolicyPtrInput interface {
	pulumi.Input

	ToReconciliationPolicyPtrOutput() ReconciliationPolicyPtrOutput
	ToReconciliationPolicyPtrOutputWithContext(context.Context) ReconciliationPolicyPtrOutput
}

type reconciliationPolicyPtrType ReconciliationPolicyArgs

func ReconciliationPolicyPtr(v *ReconciliationPolicyArgs) ReconciliationPolicyPtrInput {
	return (*reconciliationPolicyPtrType)(v)
}

func (*reconciliationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReconciliationPolicy)(nil)).Elem()
}

func (i *reconciliationPolicyPtrType) ToReconciliationPolicyPtrOutput() ReconciliationPolicyPtrOutput {
	return i.ToReconciliationPolicyPtrOutputWithContext(context.Background())
}

func (i *reconciliationPolicyPtrType) ToReconciliationPolicyPtrOutputWithContext(ctx context.Context) ReconciliationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReconciliationPolicyPtrOutput)
}

// Reconciliation Policy.
type ReconciliationPolicyOutput struct{ *pulumi.OutputState }

func (ReconciliationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReconciliationPolicy)(nil)).Elem()
}

func (o ReconciliationPolicyOutput) ToReconciliationPolicyOutput() ReconciliationPolicyOutput {
	return o
}

func (o ReconciliationPolicyOutput) ToReconciliationPolicyOutputWithContext(ctx context.Context) ReconciliationPolicyOutput {
	return o
}

func (o ReconciliationPolicyOutput) ToReconciliationPolicyPtrOutput() ReconciliationPolicyPtrOutput {
	return o.ToReconciliationPolicyPtrOutputWithContext(context.Background())
}

func (o ReconciliationPolicyOutput) ToReconciliationPolicyPtrOutputWithContext(ctx context.Context) ReconciliationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReconciliationPolicy) *ReconciliationPolicy {
		return &v
	}).(ReconciliationPolicyPtrOutput)
}

// Policy interval.
func (o ReconciliationPolicyOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReconciliationPolicy) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Policy type
func (o ReconciliationPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReconciliationPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type ReconciliationPolicyPtrOutput struct{ *pulumi.OutputState }

func (ReconciliationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReconciliationPolicy)(nil)).Elem()
}

func (o ReconciliationPolicyPtrOutput) ToReconciliationPolicyPtrOutput() ReconciliationPolicyPtrOutput {
	return o
}

func (o ReconciliationPolicyPtrOutput) ToReconciliationPolicyPtrOutputWithContext(ctx context.Context) ReconciliationPolicyPtrOutput {
	return o
}

func (o ReconciliationPolicyPtrOutput) Elem() ReconciliationPolicyOutput {
	return o.ApplyT(func(v *ReconciliationPolicy) ReconciliationPolicy {
		if v != nil {
			return *v
		}
		var ret ReconciliationPolicy
		return ret
	}).(ReconciliationPolicyOutput)
}

// Policy interval.
func (o ReconciliationPolicyPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReconciliationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Policy type
func (o ReconciliationPolicyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReconciliationPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Reconciliation Policy.
type ReconciliationPolicyResponse struct {
	// Policy interval.
	Interval *string `pulumi:"interval"`
	// Policy type
	Type string `pulumi:"type"`
}

// Reconciliation Policy.
type ReconciliationPolicyResponseOutput struct{ *pulumi.OutputState }

func (ReconciliationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReconciliationPolicyResponse)(nil)).Elem()
}

func (o ReconciliationPolicyResponseOutput) ToReconciliationPolicyResponseOutput() ReconciliationPolicyResponseOutput {
	return o
}

func (o ReconciliationPolicyResponseOutput) ToReconciliationPolicyResponseOutputWithContext(ctx context.Context) ReconciliationPolicyResponseOutput {
	return o
}

// Policy interval.
func (o ReconciliationPolicyResponseOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReconciliationPolicyResponse) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Policy type
func (o ReconciliationPolicyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReconciliationPolicyResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReconciliationPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ReconciliationPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReconciliationPolicyResponse)(nil)).Elem()
}

func (o ReconciliationPolicyResponsePtrOutput) ToReconciliationPolicyResponsePtrOutput() ReconciliationPolicyResponsePtrOutput {
	return o
}

func (o ReconciliationPolicyResponsePtrOutput) ToReconciliationPolicyResponsePtrOutputWithContext(ctx context.Context) ReconciliationPolicyResponsePtrOutput {
	return o
}

func (o ReconciliationPolicyResponsePtrOutput) Elem() ReconciliationPolicyResponseOutput {
	return o.ApplyT(func(v *ReconciliationPolicyResponse) ReconciliationPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ReconciliationPolicyResponse
		return ret
	}).(ReconciliationPolicyResponseOutput)
}

// Policy interval.
func (o ReconciliationPolicyResponsePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReconciliationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Policy type
func (o ReconciliationPolicyResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReconciliationPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Properties of the reference target.
type TargetSelectorProperties struct {
	// Name of the target.
	Name *string `pulumi:"name"`
}

// TargetSelectorPropertiesInput is an input type that accepts TargetSelectorPropertiesArgs and TargetSelectorPropertiesOutput values.
// You can construct a concrete instance of `TargetSelectorPropertiesInput` via:
//
//	TargetSelectorPropertiesArgs{...}
type TargetSelectorPropertiesInput interface {
	pulumi.Input

	ToTargetSelectorPropertiesOutput() TargetSelectorPropertiesOutput
	ToTargetSelectorPropertiesOutputWithContext(context.Context) TargetSelectorPropertiesOutput
}

// Properties of the reference target.
type TargetSelectorPropertiesArgs struct {
	// Name of the target.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TargetSelectorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetSelectorProperties)(nil)).Elem()
}

func (i TargetSelectorPropertiesArgs) ToTargetSelectorPropertiesOutput() TargetSelectorPropertiesOutput {
	return i.ToTargetSelectorPropertiesOutputWithContext(context.Background())
}

func (i TargetSelectorPropertiesArgs) ToTargetSelectorPropertiesOutputWithContext(ctx context.Context) TargetSelectorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetSelectorPropertiesOutput)
}

func (i TargetSelectorPropertiesArgs) ToTargetSelectorPropertiesPtrOutput() TargetSelectorPropertiesPtrOutput {
	return i.ToTargetSelectorPropertiesPtrOutputWithContext(context.Background())
}

func (i TargetSelectorPropertiesArgs) ToTargetSelectorPropertiesPtrOutputWithContext(ctx context.Context) TargetSelectorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetSelectorPropertiesOutput).ToTargetSelectorPropertiesPtrOutputWithContext(ctx)
}

// TargetSelectorPropertiesPtrInput is an input type that accepts TargetSelectorPropertiesArgs, TargetSelectorPropertiesPtr and TargetSelectorPropertiesPtrOutput values.
// You can construct a concrete instance of `TargetSelectorPropertiesPtrInput` via:
//
//	        TargetSelectorPropertiesArgs{...}
//
//	or:
//
//	        nil
type TargetSelectorPropertiesPtrInput interface {
	pulumi.Input

	ToTargetSelectorPropertiesPtrOutput() TargetSelectorPropertiesPtrOutput
	ToTargetSelectorPropertiesPtrOutputWithContext(context.Context) TargetSelectorPropertiesPtrOutput
}

type targetSelectorPropertiesPtrType TargetSelectorPropertiesArgs

func TargetSelectorPropertiesPtr(v *TargetSelectorPropertiesArgs) TargetSelectorPropertiesPtrInput {
	return (*targetSelectorPropertiesPtrType)(v)
}

func (*targetSelectorPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetSelectorProperties)(nil)).Elem()
}

func (i *targetSelectorPropertiesPtrType) ToTargetSelectorPropertiesPtrOutput() TargetSelectorPropertiesPtrOutput {
	return i.ToTargetSelectorPropertiesPtrOutputWithContext(context.Background())
}

func (i *targetSelectorPropertiesPtrType) ToTargetSelectorPropertiesPtrOutputWithContext(ctx context.Context) TargetSelectorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetSelectorPropertiesPtrOutput)
}

// Properties of the reference target.
type TargetSelectorPropertiesOutput struct{ *pulumi.OutputState }

func (TargetSelectorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetSelectorProperties)(nil)).Elem()
}

func (o TargetSelectorPropertiesOutput) ToTargetSelectorPropertiesOutput() TargetSelectorPropertiesOutput {
	return o
}

func (o TargetSelectorPropertiesOutput) ToTargetSelectorPropertiesOutputWithContext(ctx context.Context) TargetSelectorPropertiesOutput {
	return o
}

func (o TargetSelectorPropertiesOutput) ToTargetSelectorPropertiesPtrOutput() TargetSelectorPropertiesPtrOutput {
	return o.ToTargetSelectorPropertiesPtrOutputWithContext(context.Background())
}

func (o TargetSelectorPropertiesOutput) ToTargetSelectorPropertiesPtrOutputWithContext(ctx context.Context) TargetSelectorPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetSelectorProperties) *TargetSelectorProperties {
		return &v
	}).(TargetSelectorPropertiesPtrOutput)
}

// Name of the target.
func (o TargetSelectorPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetSelectorProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TargetSelectorPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TargetSelectorPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetSelectorProperties)(nil)).Elem()
}

func (o TargetSelectorPropertiesPtrOutput) ToTargetSelectorPropertiesPtrOutput() TargetSelectorPropertiesPtrOutput {
	return o
}

func (o TargetSelectorPropertiesPtrOutput) ToTargetSelectorPropertiesPtrOutputWithContext(ctx context.Context) TargetSelectorPropertiesPtrOutput {
	return o
}

func (o TargetSelectorPropertiesPtrOutput) Elem() TargetSelectorPropertiesOutput {
	return o.ApplyT(func(v *TargetSelectorProperties) TargetSelectorProperties {
		if v != nil {
			return *v
		}
		var ret TargetSelectorProperties
		return ret
	}).(TargetSelectorPropertiesOutput)
}

// Name of the target.
func (o TargetSelectorPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetSelectorProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Properties of the reference target.
type TargetSelectorPropertiesResponse struct {
	// Name of the target.
	Name *string `pulumi:"name"`
}

// Properties of the reference target.
type TargetSelectorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TargetSelectorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetSelectorPropertiesResponse)(nil)).Elem()
}

func (o TargetSelectorPropertiesResponseOutput) ToTargetSelectorPropertiesResponseOutput() TargetSelectorPropertiesResponseOutput {
	return o
}

func (o TargetSelectorPropertiesResponseOutput) ToTargetSelectorPropertiesResponseOutputWithContext(ctx context.Context) TargetSelectorPropertiesResponseOutput {
	return o
}

// Name of the target.
func (o TargetSelectorPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetSelectorPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TargetSelectorPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TargetSelectorPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetSelectorPropertiesResponse)(nil)).Elem()
}

func (o TargetSelectorPropertiesResponsePtrOutput) ToTargetSelectorPropertiesResponsePtrOutput() TargetSelectorPropertiesResponsePtrOutput {
	return o
}

func (o TargetSelectorPropertiesResponsePtrOutput) ToTargetSelectorPropertiesResponsePtrOutputWithContext(ctx context.Context) TargetSelectorPropertiesResponsePtrOutput {
	return o
}

func (o TargetSelectorPropertiesResponsePtrOutput) Elem() TargetSelectorPropertiesResponseOutput {
	return o.ApplyT(func(v *TargetSelectorPropertiesResponse) TargetSelectorPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret TargetSelectorPropertiesResponse
		return ret
	}).(TargetSelectorPropertiesResponseOutput)
}

// Name of the target.
func (o TargetSelectorPropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetSelectorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Defines a desired runtime component.
type TopologiesProperties struct {
	// bindings description.
	Bindings []BindingProperties `pulumi:"bindings"`
}

// TopologiesPropertiesInput is an input type that accepts TopologiesPropertiesArgs and TopologiesPropertiesOutput values.
// You can construct a concrete instance of `TopologiesPropertiesInput` via:
//
//	TopologiesPropertiesArgs{...}
type TopologiesPropertiesInput interface {
	pulumi.Input

	ToTopologiesPropertiesOutput() TopologiesPropertiesOutput
	ToTopologiesPropertiesOutputWithContext(context.Context) TopologiesPropertiesOutput
}

// Defines a desired runtime component.
type TopologiesPropertiesArgs struct {
	// bindings description.
	Bindings BindingPropertiesArrayInput `pulumi:"bindings"`
}

func (TopologiesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologiesProperties)(nil)).Elem()
}

func (i TopologiesPropertiesArgs) ToTopologiesPropertiesOutput() TopologiesPropertiesOutput {
	return i.ToTopologiesPropertiesOutputWithContext(context.Background())
}

func (i TopologiesPropertiesArgs) ToTopologiesPropertiesOutputWithContext(ctx context.Context) TopologiesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologiesPropertiesOutput)
}

// TopologiesPropertiesArrayInput is an input type that accepts TopologiesPropertiesArray and TopologiesPropertiesArrayOutput values.
// You can construct a concrete instance of `TopologiesPropertiesArrayInput` via:
//
//	TopologiesPropertiesArray{ TopologiesPropertiesArgs{...} }
type TopologiesPropertiesArrayInput interface {
	pulumi.Input

	ToTopologiesPropertiesArrayOutput() TopologiesPropertiesArrayOutput
	ToTopologiesPropertiesArrayOutputWithContext(context.Context) TopologiesPropertiesArrayOutput
}

type TopologiesPropertiesArray []TopologiesPropertiesInput

func (TopologiesPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologiesProperties)(nil)).Elem()
}

func (i TopologiesPropertiesArray) ToTopologiesPropertiesArrayOutput() TopologiesPropertiesArrayOutput {
	return i.ToTopologiesPropertiesArrayOutputWithContext(context.Background())
}

func (i TopologiesPropertiesArray) ToTopologiesPropertiesArrayOutputWithContext(ctx context.Context) TopologiesPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopologiesPropertiesArrayOutput)
}

// Defines a desired runtime component.
type TopologiesPropertiesOutput struct{ *pulumi.OutputState }

func (TopologiesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologiesProperties)(nil)).Elem()
}

func (o TopologiesPropertiesOutput) ToTopologiesPropertiesOutput() TopologiesPropertiesOutput {
	return o
}

func (o TopologiesPropertiesOutput) ToTopologiesPropertiesOutputWithContext(ctx context.Context) TopologiesPropertiesOutput {
	return o
}

// bindings description.
func (o TopologiesPropertiesOutput) Bindings() BindingPropertiesArrayOutput {
	return o.ApplyT(func(v TopologiesProperties) []BindingProperties { return v.Bindings }).(BindingPropertiesArrayOutput)
}

type TopologiesPropertiesArrayOutput struct{ *pulumi.OutputState }

func (TopologiesPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologiesProperties)(nil)).Elem()
}

func (o TopologiesPropertiesArrayOutput) ToTopologiesPropertiesArrayOutput() TopologiesPropertiesArrayOutput {
	return o
}

func (o TopologiesPropertiesArrayOutput) ToTopologiesPropertiesArrayOutputWithContext(ctx context.Context) TopologiesPropertiesArrayOutput {
	return o
}

func (o TopologiesPropertiesArrayOutput) Index(i pulumi.IntInput) TopologiesPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologiesProperties {
		return vs[0].([]TopologiesProperties)[vs[1].(int)]
	}).(TopologiesPropertiesOutput)
}

// Defines a desired runtime component.
type TopologiesPropertiesResponse struct {
	// bindings description.
	Bindings []BindingPropertiesResponse `pulumi:"bindings"`
}

// Defines a desired runtime component.
type TopologiesPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TopologiesPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopologiesPropertiesResponse)(nil)).Elem()
}

func (o TopologiesPropertiesResponseOutput) ToTopologiesPropertiesResponseOutput() TopologiesPropertiesResponseOutput {
	return o
}

func (o TopologiesPropertiesResponseOutput) ToTopologiesPropertiesResponseOutputWithContext(ctx context.Context) TopologiesPropertiesResponseOutput {
	return o
}

// bindings description.
func (o TopologiesPropertiesResponseOutput) Bindings() BindingPropertiesResponseArrayOutput {
	return o.ApplyT(func(v TopologiesPropertiesResponse) []BindingPropertiesResponse { return v.Bindings }).(BindingPropertiesResponseArrayOutput)
}

type TopologiesPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (TopologiesPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopologiesPropertiesResponse)(nil)).Elem()
}

func (o TopologiesPropertiesResponseArrayOutput) ToTopologiesPropertiesResponseArrayOutput() TopologiesPropertiesResponseArrayOutput {
	return o
}

func (o TopologiesPropertiesResponseArrayOutput) ToTopologiesPropertiesResponseArrayOutputWithContext(ctx context.Context) TopologiesPropertiesResponseArrayOutput {
	return o
}

func (o TopologiesPropertiesResponseArrayOutput) Index(i pulumi.IntInput) TopologiesPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopologiesPropertiesResponse {
		return vs[0].([]TopologiesPropertiesResponse)[vs[1].(int)]
	}).(TopologiesPropertiesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BindingPropertiesOutput{})
	pulumi.RegisterOutputType(BindingPropertiesArrayOutput{})
	pulumi.RegisterOutputType(BindingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BindingPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesArrayOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ReconciliationPolicyOutput{})
	pulumi.RegisterOutputType(ReconciliationPolicyPtrOutput{})
	pulumi.RegisterOutputType(ReconciliationPolicyResponseOutput{})
	pulumi.RegisterOutputType(ReconciliationPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TargetSelectorPropertiesOutput{})
	pulumi.RegisterOutputType(TargetSelectorPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TargetSelectorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TargetSelectorPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TopologiesPropertiesOutput{})
	pulumi.RegisterOutputType(TopologiesPropertiesArrayOutput{})
	pulumi.RegisterOutputType(TopologiesPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TopologiesPropertiesResponseArrayOutput{})
}
