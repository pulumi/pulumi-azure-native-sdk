// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230620preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves information about the view of a license.
func LookupLicense(ctx *pulumi.Context, args *LookupLicenseArgs, opts ...pulumi.InvokeOption) (*LookupLicenseResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupLicenseResult
	err := ctx.Invoke("azure-native:hybridcompute/v20230620preview:getLicense", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLicenseArgs struct {
	// The name of the license.
	LicenseName string `pulumi:"licenseName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Describes a license in a hybrid machine.
type LookupLicenseResult struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Describes the properties of a License.
	LicenseDetails *LicenseDetailsResponse `pulumi:"licenseDetails"`
	// The type of the license resource.
	LicenseType *string `pulumi:"licenseType"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Describes the tenant id.
	TenantId *string `pulumi:"tenantId"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupLicenseOutput(ctx *pulumi.Context, args LookupLicenseOutputArgs, opts ...pulumi.InvokeOption) LookupLicenseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLicenseResult, error) {
			args := v.(LookupLicenseArgs)
			r, err := LookupLicense(ctx, &args, opts...)
			var s LookupLicenseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLicenseResultOutput)
}

type LookupLicenseOutputArgs struct {
	// The name of the license.
	LicenseName pulumi.StringInput `pulumi:"licenseName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupLicenseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseArgs)(nil)).Elem()
}

// Describes a license in a hybrid machine.
type LookupLicenseResultOutput struct{ *pulumi.OutputState }

func (LookupLicenseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseResult)(nil)).Elem()
}

func (o LookupLicenseResultOutput) ToLookupLicenseResultOutput() LookupLicenseResultOutput {
	return o
}

func (o LookupLicenseResultOutput) ToLookupLicenseResultOutputWithContext(ctx context.Context) LookupLicenseResultOutput {
	return o
}

func (o LookupLicenseResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupLicenseResult] {
	return pulumix.Output[LookupLicenseResult]{
		OutputState: o.OutputState,
	}
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupLicenseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Describes the properties of a License.
func (o LookupLicenseResultOutput) LicenseDetails() LicenseDetailsResponsePtrOutput {
	return o.ApplyT(func(v LookupLicenseResult) *LicenseDetailsResponse { return v.LicenseDetails }).(LicenseDetailsResponsePtrOutput)
}

// The type of the license resource.
func (o LookupLicenseResultOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseResult) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o LookupLicenseResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupLicenseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state, which only appears in the response.
func (o LookupLicenseResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupLicenseResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupLicenseResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupLicenseResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLicenseResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Describes the tenant id.
func (o LookupLicenseResultOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseResult) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupLicenseResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLicenseResultOutput{})
}
