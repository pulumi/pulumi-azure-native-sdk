// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hybridcompute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The operation to get a run command.
// Azure REST API version: 2023-10-03-preview.
func LookupMachineRunCommand(ctx *pulumi.Context, args *LookupMachineRunCommandArgs, opts ...pulumi.InvokeOption) (*LookupMachineRunCommandResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupMachineRunCommandResult
	err := ctx.Invoke("azure-native:hybridcompute:getMachineRunCommand", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupMachineRunCommandArgs struct {
	// The name of the hybrid machine.
	MachineName string `pulumi:"machineName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the run command.
	RunCommandName string `pulumi:"runCommandName"`
}

// Describes a Run Command
type LookupMachineRunCommandResult struct {
	// Optional. If set to true, provisioning will complete as soon as script starts and will not wait for script to complete.
	AsyncExecution *bool `pulumi:"asyncExecution"`
	// User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
	ErrorBlobManagedIdentity *RunCommandManagedIdentityResponse `pulumi:"errorBlobManagedIdentity"`
	// Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
	ErrorBlobUri *string `pulumi:"errorBlobUri"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The machine run command instance view.
	InstanceView MachineRunCommandInstanceViewResponse `pulumi:"instanceView"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
	OutputBlobManagedIdentity *RunCommandManagedIdentityResponse `pulumi:"outputBlobManagedIdentity"`
	// Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter.
	OutputBlobUri *string `pulumi:"outputBlobUri"`
	// The parameters used by the script.
	Parameters []RunCommandInputParameterResponse `pulumi:"parameters"`
	// The parameters used by the script.
	ProtectedParameters []RunCommandInputParameterResponse `pulumi:"protectedParameters"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies the user account password on the machine when executing the run command.
	RunAsPassword *string `pulumi:"runAsPassword"`
	// Specifies the user account on the machine when executing the run command.
	RunAsUser *string `pulumi:"runAsUser"`
	// The source of the run command script.
	Source *MachineRunCommandScriptSourceResponse `pulumi:"source"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The timeout in seconds to execute the run command.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupMachineRunCommandResult
func (val *LookupMachineRunCommandResult) Defaults() *LookupMachineRunCommandResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AsyncExecution == nil {
		asyncExecution_ := false
		tmp.AsyncExecution = &asyncExecution_
	}
	return &tmp
}

func LookupMachineRunCommandOutput(ctx *pulumi.Context, args LookupMachineRunCommandOutputArgs, opts ...pulumi.InvokeOption) LookupMachineRunCommandResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMachineRunCommandResult, error) {
			args := v.(LookupMachineRunCommandArgs)
			r, err := LookupMachineRunCommand(ctx, &args, opts...)
			var s LookupMachineRunCommandResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMachineRunCommandResultOutput)
}

type LookupMachineRunCommandOutputArgs struct {
	// The name of the hybrid machine.
	MachineName pulumi.StringInput `pulumi:"machineName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the run command.
	RunCommandName pulumi.StringInput `pulumi:"runCommandName"`
}

func (LookupMachineRunCommandOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMachineRunCommandArgs)(nil)).Elem()
}

// Describes a Run Command
type LookupMachineRunCommandResultOutput struct{ *pulumi.OutputState }

func (LookupMachineRunCommandResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMachineRunCommandResult)(nil)).Elem()
}

func (o LookupMachineRunCommandResultOutput) ToLookupMachineRunCommandResultOutput() LookupMachineRunCommandResultOutput {
	return o
}

func (o LookupMachineRunCommandResultOutput) ToLookupMachineRunCommandResultOutputWithContext(ctx context.Context) LookupMachineRunCommandResultOutput {
	return o
}

// Optional. If set to true, provisioning will complete as soon as script starts and will not wait for script to complete.
func (o LookupMachineRunCommandResultOutput) AsyncExecution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *bool { return v.AsyncExecution }).(pulumi.BoolPtrOutput)
}

// User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
func (o LookupMachineRunCommandResultOutput) ErrorBlobManagedIdentity() RunCommandManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *RunCommandManagedIdentityResponse {
		return v.ErrorBlobManagedIdentity
	}).(RunCommandManagedIdentityResponsePtrOutput)
}

// Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
func (o LookupMachineRunCommandResultOutput) ErrorBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *string { return v.ErrorBlobUri }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupMachineRunCommandResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) string { return v.Id }).(pulumi.StringOutput)
}

// The machine run command instance view.
func (o LookupMachineRunCommandResultOutput) InstanceView() MachineRunCommandInstanceViewResponseOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) MachineRunCommandInstanceViewResponse { return v.InstanceView }).(MachineRunCommandInstanceViewResponseOutput)
}

// The geo-location where the resource lives
func (o LookupMachineRunCommandResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupMachineRunCommandResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) string { return v.Name }).(pulumi.StringOutput)
}

// User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged
func (o LookupMachineRunCommandResultOutput) OutputBlobManagedIdentity() RunCommandManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *RunCommandManagedIdentityResponse {
		return v.OutputBlobManagedIdentity
	}).(RunCommandManagedIdentityResponsePtrOutput)
}

// Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter.
func (o LookupMachineRunCommandResultOutput) OutputBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *string { return v.OutputBlobUri }).(pulumi.StringPtrOutput)
}

// The parameters used by the script.
func (o LookupMachineRunCommandResultOutput) Parameters() RunCommandInputParameterResponseArrayOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) []RunCommandInputParameterResponse { return v.Parameters }).(RunCommandInputParameterResponseArrayOutput)
}

// The parameters used by the script.
func (o LookupMachineRunCommandResultOutput) ProtectedParameters() RunCommandInputParameterResponseArrayOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) []RunCommandInputParameterResponse { return v.ProtectedParameters }).(RunCommandInputParameterResponseArrayOutput)
}

// The provisioning state, which only appears in the response.
func (o LookupMachineRunCommandResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies the user account password on the machine when executing the run command.
func (o LookupMachineRunCommandResultOutput) RunAsPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *string { return v.RunAsPassword }).(pulumi.StringPtrOutput)
}

// Specifies the user account on the machine when executing the run command.
func (o LookupMachineRunCommandResultOutput) RunAsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *string { return v.RunAsUser }).(pulumi.StringPtrOutput)
}

// The source of the run command script.
func (o LookupMachineRunCommandResultOutput) Source() MachineRunCommandScriptSourceResponsePtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *MachineRunCommandScriptSourceResponse { return v.Source }).(MachineRunCommandScriptSourceResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupMachineRunCommandResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupMachineRunCommandResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The timeout in seconds to execute the run command.
func (o LookupMachineRunCommandResultOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupMachineRunCommandResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMachineRunCommandResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMachineRunCommandResultOutput{})
}
