// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231003preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Indicates which kind of Arc machine placement on-premises, such as HCI, SCVMM or VMware etc.
type ArcKindEnum string

const (
	ArcKindEnumAVS    = ArcKindEnum("AVS")
	ArcKindEnumHCI    = ArcKindEnum("HCI")
	ArcKindEnumSCVMM  = ArcKindEnum("SCVMM")
	ArcKindEnumVMware = ArcKindEnum("VMware")
	ArcKindEnumEPS    = ArcKindEnum("EPS")
	ArcKindEnumGCP    = ArcKindEnum("GCP")
	ArcKindEnumAWS    = ArcKindEnum("AWS")
)

func (ArcKindEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcKindEnum)(nil)).Elem()
}

func (e ArcKindEnum) ToArcKindEnumOutput() ArcKindEnumOutput {
	return pulumi.ToOutput(e).(ArcKindEnumOutput)
}

func (e ArcKindEnum) ToArcKindEnumOutputWithContext(ctx context.Context) ArcKindEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ArcKindEnumOutput)
}

func (e ArcKindEnum) ToArcKindEnumPtrOutput() ArcKindEnumPtrOutput {
	return e.ToArcKindEnumPtrOutputWithContext(context.Background())
}

func (e ArcKindEnum) ToArcKindEnumPtrOutputWithContext(ctx context.Context) ArcKindEnumPtrOutput {
	return ArcKindEnum(e).ToArcKindEnumOutputWithContext(ctx).ToArcKindEnumPtrOutputWithContext(ctx)
}

func (e ArcKindEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcKindEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcKindEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArcKindEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ArcKindEnumOutput struct{ *pulumi.OutputState }

func (ArcKindEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcKindEnum)(nil)).Elem()
}

func (o ArcKindEnumOutput) ToArcKindEnumOutput() ArcKindEnumOutput {
	return o
}

func (o ArcKindEnumOutput) ToArcKindEnumOutputWithContext(ctx context.Context) ArcKindEnumOutput {
	return o
}

func (o ArcKindEnumOutput) ToArcKindEnumPtrOutput() ArcKindEnumPtrOutput {
	return o.ToArcKindEnumPtrOutputWithContext(context.Background())
}

func (o ArcKindEnumOutput) ToArcKindEnumPtrOutputWithContext(ctx context.Context) ArcKindEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArcKindEnum) *ArcKindEnum {
		return &v
	}).(ArcKindEnumPtrOutput)
}

func (o ArcKindEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ArcKindEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcKindEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ArcKindEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcKindEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcKindEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ArcKindEnumPtrOutput struct{ *pulumi.OutputState }

func (ArcKindEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcKindEnum)(nil)).Elem()
}

func (o ArcKindEnumPtrOutput) ToArcKindEnumPtrOutput() ArcKindEnumPtrOutput {
	return o
}

func (o ArcKindEnumPtrOutput) ToArcKindEnumPtrOutputWithContext(ctx context.Context) ArcKindEnumPtrOutput {
	return o
}

func (o ArcKindEnumPtrOutput) Elem() ArcKindEnumOutput {
	return o.ApplyT(func(v *ArcKindEnum) ArcKindEnum {
		if v != nil {
			return *v
		}
		var ret ArcKindEnum
		return ret
	}).(ArcKindEnumOutput)
}

func (o ArcKindEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcKindEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ArcKindEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ArcKindEnumInput is an input type that accepts values of the ArcKindEnum enum
// A concrete instance of `ArcKindEnumInput` can be one of the following:
//
//	ArcKindEnumAVS
//	ArcKindEnumHCI
//	ArcKindEnumSCVMM
//	ArcKindEnumVMware
//	ArcKindEnumEPS
//	ArcKindEnumGCP
//	ArcKindEnumAWS
type ArcKindEnumInput interface {
	pulumi.Input

	ToArcKindEnumOutput() ArcKindEnumOutput
	ToArcKindEnumOutputWithContext(context.Context) ArcKindEnumOutput
}

var arcKindEnumPtrType = reflect.TypeOf((**ArcKindEnum)(nil)).Elem()

type ArcKindEnumPtrInput interface {
	pulumi.Input

	ToArcKindEnumPtrOutput() ArcKindEnumPtrOutput
	ToArcKindEnumPtrOutputWithContext(context.Context) ArcKindEnumPtrOutput
}

type arcKindEnumPtr string

func ArcKindEnumPtr(v string) ArcKindEnumPtrInput {
	return (*arcKindEnumPtr)(&v)
}

func (*arcKindEnumPtr) ElementType() reflect.Type {
	return arcKindEnumPtrType
}

func (in *arcKindEnumPtr) ToArcKindEnumPtrOutput() ArcKindEnumPtrOutput {
	return pulumi.ToOutput(in).(ArcKindEnumPtrOutput)
}

func (in *arcKindEnumPtr) ToArcKindEnumPtrOutputWithContext(ctx context.Context) ArcKindEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ArcKindEnumPtrOutput)
}

func (in *arcKindEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*ArcKindEnum] {
	return pulumix.Output[*ArcKindEnum]{
		OutputState: in.ToArcKindEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the assessment mode.
type AssessmentModeTypes string

const (
	AssessmentModeTypesImageDefault        = AssessmentModeTypes("ImageDefault")
	AssessmentModeTypesAutomaticByPlatform = AssessmentModeTypes("AutomaticByPlatform")
)

func (AssessmentModeTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentModeTypes)(nil)).Elem()
}

func (e AssessmentModeTypes) ToAssessmentModeTypesOutput() AssessmentModeTypesOutput {
	return pulumi.ToOutput(e).(AssessmentModeTypesOutput)
}

func (e AssessmentModeTypes) ToAssessmentModeTypesOutputWithContext(ctx context.Context) AssessmentModeTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AssessmentModeTypesOutput)
}

func (e AssessmentModeTypes) ToAssessmentModeTypesPtrOutput() AssessmentModeTypesPtrOutput {
	return e.ToAssessmentModeTypesPtrOutputWithContext(context.Background())
}

func (e AssessmentModeTypes) ToAssessmentModeTypesPtrOutputWithContext(ctx context.Context) AssessmentModeTypesPtrOutput {
	return AssessmentModeTypes(e).ToAssessmentModeTypesOutputWithContext(ctx).ToAssessmentModeTypesPtrOutputWithContext(ctx)
}

func (e AssessmentModeTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentModeTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentModeTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AssessmentModeTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AssessmentModeTypesOutput struct{ *pulumi.OutputState }

func (AssessmentModeTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentModeTypes)(nil)).Elem()
}

func (o AssessmentModeTypesOutput) ToAssessmentModeTypesOutput() AssessmentModeTypesOutput {
	return o
}

func (o AssessmentModeTypesOutput) ToAssessmentModeTypesOutputWithContext(ctx context.Context) AssessmentModeTypesOutput {
	return o
}

func (o AssessmentModeTypesOutput) ToAssessmentModeTypesPtrOutput() AssessmentModeTypesPtrOutput {
	return o.ToAssessmentModeTypesPtrOutputWithContext(context.Background())
}

func (o AssessmentModeTypesOutput) ToAssessmentModeTypesPtrOutputWithContext(ctx context.Context) AssessmentModeTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentModeTypes) *AssessmentModeTypes {
		return &v
	}).(AssessmentModeTypesPtrOutput)
}

func (o AssessmentModeTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AssessmentModeTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentModeTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AssessmentModeTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentModeTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentModeTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AssessmentModeTypesPtrOutput struct{ *pulumi.OutputState }

func (AssessmentModeTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentModeTypes)(nil)).Elem()
}

func (o AssessmentModeTypesPtrOutput) ToAssessmentModeTypesPtrOutput() AssessmentModeTypesPtrOutput {
	return o
}

func (o AssessmentModeTypesPtrOutput) ToAssessmentModeTypesPtrOutputWithContext(ctx context.Context) AssessmentModeTypesPtrOutput {
	return o
}

func (o AssessmentModeTypesPtrOutput) Elem() AssessmentModeTypesOutput {
	return o.ApplyT(func(v *AssessmentModeTypes) AssessmentModeTypes {
		if v != nil {
			return *v
		}
		var ret AssessmentModeTypes
		return ret
	}).(AssessmentModeTypesOutput)
}

func (o AssessmentModeTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentModeTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AssessmentModeTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AssessmentModeTypesInput is an input type that accepts values of the AssessmentModeTypes enum
// A concrete instance of `AssessmentModeTypesInput` can be one of the following:
//
//	AssessmentModeTypesImageDefault
//	AssessmentModeTypesAutomaticByPlatform
type AssessmentModeTypesInput interface {
	pulumi.Input

	ToAssessmentModeTypesOutput() AssessmentModeTypesOutput
	ToAssessmentModeTypesOutputWithContext(context.Context) AssessmentModeTypesOutput
}

var assessmentModeTypesPtrType = reflect.TypeOf((**AssessmentModeTypes)(nil)).Elem()

type AssessmentModeTypesPtrInput interface {
	pulumi.Input

	ToAssessmentModeTypesPtrOutput() AssessmentModeTypesPtrOutput
	ToAssessmentModeTypesPtrOutputWithContext(context.Context) AssessmentModeTypesPtrOutput
}

type assessmentModeTypesPtr string

func AssessmentModeTypesPtr(v string) AssessmentModeTypesPtrInput {
	return (*assessmentModeTypesPtr)(&v)
}

func (*assessmentModeTypesPtr) ElementType() reflect.Type {
	return assessmentModeTypesPtrType
}

func (in *assessmentModeTypesPtr) ToAssessmentModeTypesPtrOutput() AssessmentModeTypesPtrOutput {
	return pulumi.ToOutput(in).(AssessmentModeTypesPtrOutput)
}

func (in *assessmentModeTypesPtr) ToAssessmentModeTypesPtrOutputWithContext(ctx context.Context) AssessmentModeTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AssessmentModeTypesPtrOutput)
}

func (in *assessmentModeTypesPtr) ToOutput(ctx context.Context) pulumix.Output[*AssessmentModeTypes] {
	return pulumix.Output[*AssessmentModeTypes]{
		OutputState: in.ToAssessmentModeTypesPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the license assignment state (Assigned or NotAssigned).
type LicenseAssignmentState string

const (
	LicenseAssignmentStateAssigned    = LicenseAssignmentState("Assigned")
	LicenseAssignmentStateNotAssigned = LicenseAssignmentState("NotAssigned")
)

func (LicenseAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseAssignmentState)(nil)).Elem()
}

func (e LicenseAssignmentState) ToLicenseAssignmentStateOutput() LicenseAssignmentStateOutput {
	return pulumi.ToOutput(e).(LicenseAssignmentStateOutput)
}

func (e LicenseAssignmentState) ToLicenseAssignmentStateOutputWithContext(ctx context.Context) LicenseAssignmentStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseAssignmentStateOutput)
}

func (e LicenseAssignmentState) ToLicenseAssignmentStatePtrOutput() LicenseAssignmentStatePtrOutput {
	return e.ToLicenseAssignmentStatePtrOutputWithContext(context.Background())
}

func (e LicenseAssignmentState) ToLicenseAssignmentStatePtrOutputWithContext(ctx context.Context) LicenseAssignmentStatePtrOutput {
	return LicenseAssignmentState(e).ToLicenseAssignmentStateOutputWithContext(ctx).ToLicenseAssignmentStatePtrOutputWithContext(ctx)
}

func (e LicenseAssignmentState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseAssignmentState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseAssignmentState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseAssignmentState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseAssignmentStateOutput struct{ *pulumi.OutputState }

func (LicenseAssignmentStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseAssignmentState)(nil)).Elem()
}

func (o LicenseAssignmentStateOutput) ToLicenseAssignmentStateOutput() LicenseAssignmentStateOutput {
	return o
}

func (o LicenseAssignmentStateOutput) ToLicenseAssignmentStateOutputWithContext(ctx context.Context) LicenseAssignmentStateOutput {
	return o
}

func (o LicenseAssignmentStateOutput) ToLicenseAssignmentStatePtrOutput() LicenseAssignmentStatePtrOutput {
	return o.ToLicenseAssignmentStatePtrOutputWithContext(context.Background())
}

func (o LicenseAssignmentStateOutput) ToLicenseAssignmentStatePtrOutputWithContext(ctx context.Context) LicenseAssignmentStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseAssignmentState) *LicenseAssignmentState {
		return &v
	}).(LicenseAssignmentStatePtrOutput)
}

func (o LicenseAssignmentStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseAssignmentStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseAssignmentState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseAssignmentStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseAssignmentStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseAssignmentState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseAssignmentStatePtrOutput struct{ *pulumi.OutputState }

func (LicenseAssignmentStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseAssignmentState)(nil)).Elem()
}

func (o LicenseAssignmentStatePtrOutput) ToLicenseAssignmentStatePtrOutput() LicenseAssignmentStatePtrOutput {
	return o
}

func (o LicenseAssignmentStatePtrOutput) ToLicenseAssignmentStatePtrOutputWithContext(ctx context.Context) LicenseAssignmentStatePtrOutput {
	return o
}

func (o LicenseAssignmentStatePtrOutput) Elem() LicenseAssignmentStateOutput {
	return o.ApplyT(func(v *LicenseAssignmentState) LicenseAssignmentState {
		if v != nil {
			return *v
		}
		var ret LicenseAssignmentState
		return ret
	}).(LicenseAssignmentStateOutput)
}

func (o LicenseAssignmentStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseAssignmentStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseAssignmentState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseAssignmentStateInput is an input type that accepts values of the LicenseAssignmentState enum
// A concrete instance of `LicenseAssignmentStateInput` can be one of the following:
//
//	LicenseAssignmentStateAssigned
//	LicenseAssignmentStateNotAssigned
type LicenseAssignmentStateInput interface {
	pulumi.Input

	ToLicenseAssignmentStateOutput() LicenseAssignmentStateOutput
	ToLicenseAssignmentStateOutputWithContext(context.Context) LicenseAssignmentStateOutput
}

var licenseAssignmentStatePtrType = reflect.TypeOf((**LicenseAssignmentState)(nil)).Elem()

type LicenseAssignmentStatePtrInput interface {
	pulumi.Input

	ToLicenseAssignmentStatePtrOutput() LicenseAssignmentStatePtrOutput
	ToLicenseAssignmentStatePtrOutputWithContext(context.Context) LicenseAssignmentStatePtrOutput
}

type licenseAssignmentStatePtr string

func LicenseAssignmentStatePtr(v string) LicenseAssignmentStatePtrInput {
	return (*licenseAssignmentStatePtr)(&v)
}

func (*licenseAssignmentStatePtr) ElementType() reflect.Type {
	return licenseAssignmentStatePtrType
}

func (in *licenseAssignmentStatePtr) ToLicenseAssignmentStatePtrOutput() LicenseAssignmentStatePtrOutput {
	return pulumi.ToOutput(in).(LicenseAssignmentStatePtrOutput)
}

func (in *licenseAssignmentStatePtr) ToLicenseAssignmentStatePtrOutputWithContext(ctx context.Context) LicenseAssignmentStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseAssignmentStatePtrOutput)
}

func (in *licenseAssignmentStatePtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseAssignmentState] {
	return pulumix.Output[*LicenseAssignmentState]{
		OutputState: in.ToLicenseAssignmentStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the license core type (pCore or vCore).
type LicenseCoreType string

const (
	LicenseCoreTypePCore = LicenseCoreType("pCore")
	LicenseCoreTypeVCore = LicenseCoreType("vCore")
)

func (LicenseCoreType) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseCoreType)(nil)).Elem()
}

func (e LicenseCoreType) ToLicenseCoreTypeOutput() LicenseCoreTypeOutput {
	return pulumi.ToOutput(e).(LicenseCoreTypeOutput)
}

func (e LicenseCoreType) ToLicenseCoreTypeOutputWithContext(ctx context.Context) LicenseCoreTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseCoreTypeOutput)
}

func (e LicenseCoreType) ToLicenseCoreTypePtrOutput() LicenseCoreTypePtrOutput {
	return e.ToLicenseCoreTypePtrOutputWithContext(context.Background())
}

func (e LicenseCoreType) ToLicenseCoreTypePtrOutputWithContext(ctx context.Context) LicenseCoreTypePtrOutput {
	return LicenseCoreType(e).ToLicenseCoreTypeOutputWithContext(ctx).ToLicenseCoreTypePtrOutputWithContext(ctx)
}

func (e LicenseCoreType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseCoreType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseCoreType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseCoreType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseCoreTypeOutput struct{ *pulumi.OutputState }

func (LicenseCoreTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseCoreType)(nil)).Elem()
}

func (o LicenseCoreTypeOutput) ToLicenseCoreTypeOutput() LicenseCoreTypeOutput {
	return o
}

func (o LicenseCoreTypeOutput) ToLicenseCoreTypeOutputWithContext(ctx context.Context) LicenseCoreTypeOutput {
	return o
}

func (o LicenseCoreTypeOutput) ToLicenseCoreTypePtrOutput() LicenseCoreTypePtrOutput {
	return o.ToLicenseCoreTypePtrOutputWithContext(context.Background())
}

func (o LicenseCoreTypeOutput) ToLicenseCoreTypePtrOutputWithContext(ctx context.Context) LicenseCoreTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseCoreType) *LicenseCoreType {
		return &v
	}).(LicenseCoreTypePtrOutput)
}

func (o LicenseCoreTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseCoreTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseCoreType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseCoreTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseCoreTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseCoreType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseCoreTypePtrOutput struct{ *pulumi.OutputState }

func (LicenseCoreTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseCoreType)(nil)).Elem()
}

func (o LicenseCoreTypePtrOutput) ToLicenseCoreTypePtrOutput() LicenseCoreTypePtrOutput {
	return o
}

func (o LicenseCoreTypePtrOutput) ToLicenseCoreTypePtrOutputWithContext(ctx context.Context) LicenseCoreTypePtrOutput {
	return o
}

func (o LicenseCoreTypePtrOutput) Elem() LicenseCoreTypeOutput {
	return o.ApplyT(func(v *LicenseCoreType) LicenseCoreType {
		if v != nil {
			return *v
		}
		var ret LicenseCoreType
		return ret
	}).(LicenseCoreTypeOutput)
}

func (o LicenseCoreTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseCoreTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseCoreType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseCoreTypeInput is an input type that accepts values of the LicenseCoreType enum
// A concrete instance of `LicenseCoreTypeInput` can be one of the following:
//
//	LicenseCoreTypePCore
//	LicenseCoreTypeVCore
type LicenseCoreTypeInput interface {
	pulumi.Input

	ToLicenseCoreTypeOutput() LicenseCoreTypeOutput
	ToLicenseCoreTypeOutputWithContext(context.Context) LicenseCoreTypeOutput
}

var licenseCoreTypePtrType = reflect.TypeOf((**LicenseCoreType)(nil)).Elem()

type LicenseCoreTypePtrInput interface {
	pulumi.Input

	ToLicenseCoreTypePtrOutput() LicenseCoreTypePtrOutput
	ToLicenseCoreTypePtrOutputWithContext(context.Context) LicenseCoreTypePtrOutput
}

type licenseCoreTypePtr string

func LicenseCoreTypePtr(v string) LicenseCoreTypePtrInput {
	return (*licenseCoreTypePtr)(&v)
}

func (*licenseCoreTypePtr) ElementType() reflect.Type {
	return licenseCoreTypePtrType
}

func (in *licenseCoreTypePtr) ToLicenseCoreTypePtrOutput() LicenseCoreTypePtrOutput {
	return pulumi.ToOutput(in).(LicenseCoreTypePtrOutput)
}

func (in *licenseCoreTypePtr) ToLicenseCoreTypePtrOutputWithContext(ctx context.Context) LicenseCoreTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseCoreTypePtrOutput)
}

func (in *licenseCoreTypePtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseCoreType] {
	return pulumix.Output[*LicenseCoreType]{
		OutputState: in.ToLicenseCoreTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the edition of the license. The values are either Standard or Datacenter.
type LicenseEdition string

const (
	LicenseEditionStandard   = LicenseEdition("Standard")
	LicenseEditionDatacenter = LicenseEdition("Datacenter")
)

func (LicenseEdition) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseEdition)(nil)).Elem()
}

func (e LicenseEdition) ToLicenseEditionOutput() LicenseEditionOutput {
	return pulumi.ToOutput(e).(LicenseEditionOutput)
}

func (e LicenseEdition) ToLicenseEditionOutputWithContext(ctx context.Context) LicenseEditionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseEditionOutput)
}

func (e LicenseEdition) ToLicenseEditionPtrOutput() LicenseEditionPtrOutput {
	return e.ToLicenseEditionPtrOutputWithContext(context.Background())
}

func (e LicenseEdition) ToLicenseEditionPtrOutputWithContext(ctx context.Context) LicenseEditionPtrOutput {
	return LicenseEdition(e).ToLicenseEditionOutputWithContext(ctx).ToLicenseEditionPtrOutputWithContext(ctx)
}

func (e LicenseEdition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseEdition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseEdition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseEdition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseEditionOutput struct{ *pulumi.OutputState }

func (LicenseEditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseEdition)(nil)).Elem()
}

func (o LicenseEditionOutput) ToLicenseEditionOutput() LicenseEditionOutput {
	return o
}

func (o LicenseEditionOutput) ToLicenseEditionOutputWithContext(ctx context.Context) LicenseEditionOutput {
	return o
}

func (o LicenseEditionOutput) ToLicenseEditionPtrOutput() LicenseEditionPtrOutput {
	return o.ToLicenseEditionPtrOutputWithContext(context.Background())
}

func (o LicenseEditionOutput) ToLicenseEditionPtrOutputWithContext(ctx context.Context) LicenseEditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseEdition) *LicenseEdition {
		return &v
	}).(LicenseEditionPtrOutput)
}

func (o LicenseEditionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseEditionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseEdition) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseEditionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseEditionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseEdition) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseEditionPtrOutput struct{ *pulumi.OutputState }

func (LicenseEditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseEdition)(nil)).Elem()
}

func (o LicenseEditionPtrOutput) ToLicenseEditionPtrOutput() LicenseEditionPtrOutput {
	return o
}

func (o LicenseEditionPtrOutput) ToLicenseEditionPtrOutputWithContext(ctx context.Context) LicenseEditionPtrOutput {
	return o
}

func (o LicenseEditionPtrOutput) Elem() LicenseEditionOutput {
	return o.ApplyT(func(v *LicenseEdition) LicenseEdition {
		if v != nil {
			return *v
		}
		var ret LicenseEdition
		return ret
	}).(LicenseEditionOutput)
}

func (o LicenseEditionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseEditionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseEdition) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseEditionInput is an input type that accepts values of the LicenseEdition enum
// A concrete instance of `LicenseEditionInput` can be one of the following:
//
//	LicenseEditionStandard
//	LicenseEditionDatacenter
type LicenseEditionInput interface {
	pulumi.Input

	ToLicenseEditionOutput() LicenseEditionOutput
	ToLicenseEditionOutputWithContext(context.Context) LicenseEditionOutput
}

var licenseEditionPtrType = reflect.TypeOf((**LicenseEdition)(nil)).Elem()

type LicenseEditionPtrInput interface {
	pulumi.Input

	ToLicenseEditionPtrOutput() LicenseEditionPtrOutput
	ToLicenseEditionPtrOutputWithContext(context.Context) LicenseEditionPtrOutput
}

type licenseEditionPtr string

func LicenseEditionPtr(v string) LicenseEditionPtrInput {
	return (*licenseEditionPtr)(&v)
}

func (*licenseEditionPtr) ElementType() reflect.Type {
	return licenseEditionPtrType
}

func (in *licenseEditionPtr) ToLicenseEditionPtrOutput() LicenseEditionPtrOutput {
	return pulumi.ToOutput(in).(LicenseEditionPtrOutput)
}

func (in *licenseEditionPtr) ToLicenseEditionPtrOutputWithContext(ctx context.Context) LicenseEditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseEditionPtrOutput)
}

func (in *licenseEditionPtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseEdition] {
	return pulumix.Output[*LicenseEdition]{
		OutputState: in.ToLicenseEditionPtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the product type of the license.
type LicenseProfileProductType string

const (
	LicenseProfileProductTypeWindowsServer        = LicenseProfileProductType("WindowsServer")
	LicenseProfileProductTypeWindowsIoTEnterprise = LicenseProfileProductType("WindowsIoTEnterprise")
)

func (LicenseProfileProductType) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseProfileProductType)(nil)).Elem()
}

func (e LicenseProfileProductType) ToLicenseProfileProductTypeOutput() LicenseProfileProductTypeOutput {
	return pulumi.ToOutput(e).(LicenseProfileProductTypeOutput)
}

func (e LicenseProfileProductType) ToLicenseProfileProductTypeOutputWithContext(ctx context.Context) LicenseProfileProductTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseProfileProductTypeOutput)
}

func (e LicenseProfileProductType) ToLicenseProfileProductTypePtrOutput() LicenseProfileProductTypePtrOutput {
	return e.ToLicenseProfileProductTypePtrOutputWithContext(context.Background())
}

func (e LicenseProfileProductType) ToLicenseProfileProductTypePtrOutputWithContext(ctx context.Context) LicenseProfileProductTypePtrOutput {
	return LicenseProfileProductType(e).ToLicenseProfileProductTypeOutputWithContext(ctx).ToLicenseProfileProductTypePtrOutputWithContext(ctx)
}

func (e LicenseProfileProductType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseProfileProductType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseProfileProductType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseProfileProductType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseProfileProductTypeOutput struct{ *pulumi.OutputState }

func (LicenseProfileProductTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseProfileProductType)(nil)).Elem()
}

func (o LicenseProfileProductTypeOutput) ToLicenseProfileProductTypeOutput() LicenseProfileProductTypeOutput {
	return o
}

func (o LicenseProfileProductTypeOutput) ToLicenseProfileProductTypeOutputWithContext(ctx context.Context) LicenseProfileProductTypeOutput {
	return o
}

func (o LicenseProfileProductTypeOutput) ToLicenseProfileProductTypePtrOutput() LicenseProfileProductTypePtrOutput {
	return o.ToLicenseProfileProductTypePtrOutputWithContext(context.Background())
}

func (o LicenseProfileProductTypeOutput) ToLicenseProfileProductTypePtrOutputWithContext(ctx context.Context) LicenseProfileProductTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseProfileProductType) *LicenseProfileProductType {
		return &v
	}).(LicenseProfileProductTypePtrOutput)
}

func (o LicenseProfileProductTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseProfileProductTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseProfileProductType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseProfileProductTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseProfileProductTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseProfileProductType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseProfileProductTypePtrOutput struct{ *pulumi.OutputState }

func (LicenseProfileProductTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseProfileProductType)(nil)).Elem()
}

func (o LicenseProfileProductTypePtrOutput) ToLicenseProfileProductTypePtrOutput() LicenseProfileProductTypePtrOutput {
	return o
}

func (o LicenseProfileProductTypePtrOutput) ToLicenseProfileProductTypePtrOutputWithContext(ctx context.Context) LicenseProfileProductTypePtrOutput {
	return o
}

func (o LicenseProfileProductTypePtrOutput) Elem() LicenseProfileProductTypeOutput {
	return o.ApplyT(func(v *LicenseProfileProductType) LicenseProfileProductType {
		if v != nil {
			return *v
		}
		var ret LicenseProfileProductType
		return ret
	}).(LicenseProfileProductTypeOutput)
}

func (o LicenseProfileProductTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseProfileProductTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseProfileProductType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseProfileProductTypeInput is an input type that accepts values of the LicenseProfileProductType enum
// A concrete instance of `LicenseProfileProductTypeInput` can be one of the following:
//
//	LicenseProfileProductTypeWindowsServer
//	LicenseProfileProductTypeWindowsIoTEnterprise
type LicenseProfileProductTypeInput interface {
	pulumi.Input

	ToLicenseProfileProductTypeOutput() LicenseProfileProductTypeOutput
	ToLicenseProfileProductTypeOutputWithContext(context.Context) LicenseProfileProductTypeOutput
}

var licenseProfileProductTypePtrType = reflect.TypeOf((**LicenseProfileProductType)(nil)).Elem()

type LicenseProfileProductTypePtrInput interface {
	pulumi.Input

	ToLicenseProfileProductTypePtrOutput() LicenseProfileProductTypePtrOutput
	ToLicenseProfileProductTypePtrOutputWithContext(context.Context) LicenseProfileProductTypePtrOutput
}

type licenseProfileProductTypePtr string

func LicenseProfileProductTypePtr(v string) LicenseProfileProductTypePtrInput {
	return (*licenseProfileProductTypePtr)(&v)
}

func (*licenseProfileProductTypePtr) ElementType() reflect.Type {
	return licenseProfileProductTypePtrType
}

func (in *licenseProfileProductTypePtr) ToLicenseProfileProductTypePtrOutput() LicenseProfileProductTypePtrOutput {
	return pulumi.ToOutput(in).(LicenseProfileProductTypePtrOutput)
}

func (in *licenseProfileProductTypePtr) ToLicenseProfileProductTypePtrOutputWithContext(ctx context.Context) LicenseProfileProductTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseProfileProductTypePtrOutput)
}

func (in *licenseProfileProductTypePtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseProfileProductType] {
	return pulumix.Output[*LicenseProfileProductType]{
		OutputState: in.ToLicenseProfileProductTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the subscription status of the product.
type LicenseProfileSubscriptionStatus string

const (
	LicenseProfileSubscriptionStatusUnknown  = LicenseProfileSubscriptionStatus("Unknown")
	LicenseProfileSubscriptionStatusEnabling = LicenseProfileSubscriptionStatus("Enabling")
	LicenseProfileSubscriptionStatusEnabled  = LicenseProfileSubscriptionStatus("Enabled")
	LicenseProfileSubscriptionStatusDisabled = LicenseProfileSubscriptionStatus("Disabled")
)

func (LicenseProfileSubscriptionStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseProfileSubscriptionStatus)(nil)).Elem()
}

func (e LicenseProfileSubscriptionStatus) ToLicenseProfileSubscriptionStatusOutput() LicenseProfileSubscriptionStatusOutput {
	return pulumi.ToOutput(e).(LicenseProfileSubscriptionStatusOutput)
}

func (e LicenseProfileSubscriptionStatus) ToLicenseProfileSubscriptionStatusOutputWithContext(ctx context.Context) LicenseProfileSubscriptionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseProfileSubscriptionStatusOutput)
}

func (e LicenseProfileSubscriptionStatus) ToLicenseProfileSubscriptionStatusPtrOutput() LicenseProfileSubscriptionStatusPtrOutput {
	return e.ToLicenseProfileSubscriptionStatusPtrOutputWithContext(context.Background())
}

func (e LicenseProfileSubscriptionStatus) ToLicenseProfileSubscriptionStatusPtrOutputWithContext(ctx context.Context) LicenseProfileSubscriptionStatusPtrOutput {
	return LicenseProfileSubscriptionStatus(e).ToLicenseProfileSubscriptionStatusOutputWithContext(ctx).ToLicenseProfileSubscriptionStatusPtrOutputWithContext(ctx)
}

func (e LicenseProfileSubscriptionStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseProfileSubscriptionStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseProfileSubscriptionStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseProfileSubscriptionStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseProfileSubscriptionStatusOutput struct{ *pulumi.OutputState }

func (LicenseProfileSubscriptionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseProfileSubscriptionStatus)(nil)).Elem()
}

func (o LicenseProfileSubscriptionStatusOutput) ToLicenseProfileSubscriptionStatusOutput() LicenseProfileSubscriptionStatusOutput {
	return o
}

func (o LicenseProfileSubscriptionStatusOutput) ToLicenseProfileSubscriptionStatusOutputWithContext(ctx context.Context) LicenseProfileSubscriptionStatusOutput {
	return o
}

func (o LicenseProfileSubscriptionStatusOutput) ToLicenseProfileSubscriptionStatusPtrOutput() LicenseProfileSubscriptionStatusPtrOutput {
	return o.ToLicenseProfileSubscriptionStatusPtrOutputWithContext(context.Background())
}

func (o LicenseProfileSubscriptionStatusOutput) ToLicenseProfileSubscriptionStatusPtrOutputWithContext(ctx context.Context) LicenseProfileSubscriptionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseProfileSubscriptionStatus) *LicenseProfileSubscriptionStatus {
		return &v
	}).(LicenseProfileSubscriptionStatusPtrOutput)
}

func (o LicenseProfileSubscriptionStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseProfileSubscriptionStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseProfileSubscriptionStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseProfileSubscriptionStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseProfileSubscriptionStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseProfileSubscriptionStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseProfileSubscriptionStatusPtrOutput struct{ *pulumi.OutputState }

func (LicenseProfileSubscriptionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseProfileSubscriptionStatus)(nil)).Elem()
}

func (o LicenseProfileSubscriptionStatusPtrOutput) ToLicenseProfileSubscriptionStatusPtrOutput() LicenseProfileSubscriptionStatusPtrOutput {
	return o
}

func (o LicenseProfileSubscriptionStatusPtrOutput) ToLicenseProfileSubscriptionStatusPtrOutputWithContext(ctx context.Context) LicenseProfileSubscriptionStatusPtrOutput {
	return o
}

func (o LicenseProfileSubscriptionStatusPtrOutput) Elem() LicenseProfileSubscriptionStatusOutput {
	return o.ApplyT(func(v *LicenseProfileSubscriptionStatus) LicenseProfileSubscriptionStatus {
		if v != nil {
			return *v
		}
		var ret LicenseProfileSubscriptionStatus
		return ret
	}).(LicenseProfileSubscriptionStatusOutput)
}

func (o LicenseProfileSubscriptionStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseProfileSubscriptionStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseProfileSubscriptionStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseProfileSubscriptionStatusInput is an input type that accepts values of the LicenseProfileSubscriptionStatus enum
// A concrete instance of `LicenseProfileSubscriptionStatusInput` can be one of the following:
//
//	LicenseProfileSubscriptionStatusUnknown
//	LicenseProfileSubscriptionStatusEnabling
//	LicenseProfileSubscriptionStatusEnabled
//	LicenseProfileSubscriptionStatusDisabled
type LicenseProfileSubscriptionStatusInput interface {
	pulumi.Input

	ToLicenseProfileSubscriptionStatusOutput() LicenseProfileSubscriptionStatusOutput
	ToLicenseProfileSubscriptionStatusOutputWithContext(context.Context) LicenseProfileSubscriptionStatusOutput
}

var licenseProfileSubscriptionStatusPtrType = reflect.TypeOf((**LicenseProfileSubscriptionStatus)(nil)).Elem()

type LicenseProfileSubscriptionStatusPtrInput interface {
	pulumi.Input

	ToLicenseProfileSubscriptionStatusPtrOutput() LicenseProfileSubscriptionStatusPtrOutput
	ToLicenseProfileSubscriptionStatusPtrOutputWithContext(context.Context) LicenseProfileSubscriptionStatusPtrOutput
}

type licenseProfileSubscriptionStatusPtr string

func LicenseProfileSubscriptionStatusPtr(v string) LicenseProfileSubscriptionStatusPtrInput {
	return (*licenseProfileSubscriptionStatusPtr)(&v)
}

func (*licenseProfileSubscriptionStatusPtr) ElementType() reflect.Type {
	return licenseProfileSubscriptionStatusPtrType
}

func (in *licenseProfileSubscriptionStatusPtr) ToLicenseProfileSubscriptionStatusPtrOutput() LicenseProfileSubscriptionStatusPtrOutput {
	return pulumi.ToOutput(in).(LicenseProfileSubscriptionStatusPtrOutput)
}

func (in *licenseProfileSubscriptionStatusPtr) ToLicenseProfileSubscriptionStatusPtrOutputWithContext(ctx context.Context) LicenseProfileSubscriptionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseProfileSubscriptionStatusPtrOutput)
}

func (in *licenseProfileSubscriptionStatusPtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseProfileSubscriptionStatus] {
	return pulumix.Output[*LicenseProfileSubscriptionStatus]{
		OutputState: in.ToLicenseProfileSubscriptionStatusPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the state of the license.
type LicenseStateEnum string

const (
	LicenseStateEnumActivated   = LicenseStateEnum("Activated")
	LicenseStateEnumDeactivated = LicenseStateEnum("Deactivated")
)

func (LicenseStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseStateEnum)(nil)).Elem()
}

func (e LicenseStateEnum) ToLicenseStateEnumOutput() LicenseStateEnumOutput {
	return pulumi.ToOutput(e).(LicenseStateEnumOutput)
}

func (e LicenseStateEnum) ToLicenseStateEnumOutputWithContext(ctx context.Context) LicenseStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseStateEnumOutput)
}

func (e LicenseStateEnum) ToLicenseStateEnumPtrOutput() LicenseStateEnumPtrOutput {
	return e.ToLicenseStateEnumPtrOutputWithContext(context.Background())
}

func (e LicenseStateEnum) ToLicenseStateEnumPtrOutputWithContext(ctx context.Context) LicenseStateEnumPtrOutput {
	return LicenseStateEnum(e).ToLicenseStateEnumOutputWithContext(ctx).ToLicenseStateEnumPtrOutputWithContext(ctx)
}

func (e LicenseStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseStateEnumOutput struct{ *pulumi.OutputState }

func (LicenseStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseStateEnum)(nil)).Elem()
}

func (o LicenseStateEnumOutput) ToLicenseStateEnumOutput() LicenseStateEnumOutput {
	return o
}

func (o LicenseStateEnumOutput) ToLicenseStateEnumOutputWithContext(ctx context.Context) LicenseStateEnumOutput {
	return o
}

func (o LicenseStateEnumOutput) ToLicenseStateEnumPtrOutput() LicenseStateEnumPtrOutput {
	return o.ToLicenseStateEnumPtrOutputWithContext(context.Background())
}

func (o LicenseStateEnumOutput) ToLicenseStateEnumPtrOutputWithContext(ctx context.Context) LicenseStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseStateEnum) *LicenseStateEnum {
		return &v
	}).(LicenseStateEnumPtrOutput)
}

func (o LicenseStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseStateEnumPtrOutput struct{ *pulumi.OutputState }

func (LicenseStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseStateEnum)(nil)).Elem()
}

func (o LicenseStateEnumPtrOutput) ToLicenseStateEnumPtrOutput() LicenseStateEnumPtrOutput {
	return o
}

func (o LicenseStateEnumPtrOutput) ToLicenseStateEnumPtrOutputWithContext(ctx context.Context) LicenseStateEnumPtrOutput {
	return o
}

func (o LicenseStateEnumPtrOutput) Elem() LicenseStateEnumOutput {
	return o.ApplyT(func(v *LicenseStateEnum) LicenseStateEnum {
		if v != nil {
			return *v
		}
		var ret LicenseStateEnum
		return ret
	}).(LicenseStateEnumOutput)
}

func (o LicenseStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseStateEnumInput is an input type that accepts values of the LicenseStateEnum enum
// A concrete instance of `LicenseStateEnumInput` can be one of the following:
//
//	LicenseStateEnumActivated
//	LicenseStateEnumDeactivated
type LicenseStateEnumInput interface {
	pulumi.Input

	ToLicenseStateEnumOutput() LicenseStateEnumOutput
	ToLicenseStateEnumOutputWithContext(context.Context) LicenseStateEnumOutput
}

var licenseStateEnumPtrType = reflect.TypeOf((**LicenseStateEnum)(nil)).Elem()

type LicenseStateEnumPtrInput interface {
	pulumi.Input

	ToLicenseStateEnumPtrOutput() LicenseStateEnumPtrOutput
	ToLicenseStateEnumPtrOutputWithContext(context.Context) LicenseStateEnumPtrOutput
}

type licenseStateEnumPtr string

func LicenseStateEnumPtr(v string) LicenseStateEnumPtrInput {
	return (*licenseStateEnumPtr)(&v)
}

func (*licenseStateEnumPtr) ElementType() reflect.Type {
	return licenseStateEnumPtrType
}

func (in *licenseStateEnumPtr) ToLicenseStateEnumPtrOutput() LicenseStateEnumPtrOutput {
	return pulumi.ToOutput(in).(LicenseStateEnumPtrOutput)
}

func (in *licenseStateEnumPtr) ToLicenseStateEnumPtrOutputWithContext(ctx context.Context) LicenseStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseStateEnumPtrOutput)
}

func (in *licenseStateEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseStateEnum] {
	return pulumix.Output[*LicenseStateEnum]{
		OutputState: in.ToLicenseStateEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the license target server.
type LicenseTarget string

const (
	LicenseTarget_Windows_Server_2012    = LicenseTarget("Windows Server 2012")
	LicenseTarget_Windows_Server_2012_R2 = LicenseTarget("Windows Server 2012 R2")
)

func (LicenseTarget) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseTarget)(nil)).Elem()
}

func (e LicenseTarget) ToLicenseTargetOutput() LicenseTargetOutput {
	return pulumi.ToOutput(e).(LicenseTargetOutput)
}

func (e LicenseTarget) ToLicenseTargetOutputWithContext(ctx context.Context) LicenseTargetOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseTargetOutput)
}

func (e LicenseTarget) ToLicenseTargetPtrOutput() LicenseTargetPtrOutput {
	return e.ToLicenseTargetPtrOutputWithContext(context.Background())
}

func (e LicenseTarget) ToLicenseTargetPtrOutputWithContext(ctx context.Context) LicenseTargetPtrOutput {
	return LicenseTarget(e).ToLicenseTargetOutputWithContext(ctx).ToLicenseTargetPtrOutputWithContext(ctx)
}

func (e LicenseTarget) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseTarget) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseTarget) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseTarget) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseTargetOutput struct{ *pulumi.OutputState }

func (LicenseTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseTarget)(nil)).Elem()
}

func (o LicenseTargetOutput) ToLicenseTargetOutput() LicenseTargetOutput {
	return o
}

func (o LicenseTargetOutput) ToLicenseTargetOutputWithContext(ctx context.Context) LicenseTargetOutput {
	return o
}

func (o LicenseTargetOutput) ToLicenseTargetPtrOutput() LicenseTargetPtrOutput {
	return o.ToLicenseTargetPtrOutputWithContext(context.Background())
}

func (o LicenseTargetOutput) ToLicenseTargetPtrOutputWithContext(ctx context.Context) LicenseTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseTarget) *LicenseTarget {
		return &v
	}).(LicenseTargetPtrOutput)
}

func (o LicenseTargetOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseTargetOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseTarget) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseTargetOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseTargetOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseTarget) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseTargetPtrOutput struct{ *pulumi.OutputState }

func (LicenseTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseTarget)(nil)).Elem()
}

func (o LicenseTargetPtrOutput) ToLicenseTargetPtrOutput() LicenseTargetPtrOutput {
	return o
}

func (o LicenseTargetPtrOutput) ToLicenseTargetPtrOutputWithContext(ctx context.Context) LicenseTargetPtrOutput {
	return o
}

func (o LicenseTargetPtrOutput) Elem() LicenseTargetOutput {
	return o.ApplyT(func(v *LicenseTarget) LicenseTarget {
		if v != nil {
			return *v
		}
		var ret LicenseTarget
		return ret
	}).(LicenseTargetOutput)
}

func (o LicenseTargetPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseTargetPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseTarget) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseTargetInput is an input type that accepts values of the LicenseTarget enum
// A concrete instance of `LicenseTargetInput` can be one of the following:
//
//	LicenseTarget_Windows_Server_2012
//	LicenseTarget_Windows_Server_2012_R2
type LicenseTargetInput interface {
	pulumi.Input

	ToLicenseTargetOutput() LicenseTargetOutput
	ToLicenseTargetOutputWithContext(context.Context) LicenseTargetOutput
}

var licenseTargetPtrType = reflect.TypeOf((**LicenseTarget)(nil)).Elem()

type LicenseTargetPtrInput interface {
	pulumi.Input

	ToLicenseTargetPtrOutput() LicenseTargetPtrOutput
	ToLicenseTargetPtrOutputWithContext(context.Context) LicenseTargetPtrOutput
}

type licenseTargetPtr string

func LicenseTargetPtr(v string) LicenseTargetPtrInput {
	return (*licenseTargetPtr)(&v)
}

func (*licenseTargetPtr) ElementType() reflect.Type {
	return licenseTargetPtrType
}

func (in *licenseTargetPtr) ToLicenseTargetPtrOutput() LicenseTargetPtrOutput {
	return pulumi.ToOutput(in).(LicenseTargetPtrOutput)
}

func (in *licenseTargetPtr) ToLicenseTargetPtrOutputWithContext(ctx context.Context) LicenseTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseTargetPtrOutput)
}

func (in *licenseTargetPtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseTarget] {
	return pulumix.Output[*LicenseTarget]{
		OutputState: in.ToLicenseTargetPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of the license resource.
type LicenseTypeEnum string

const (
	LicenseTypeEnumESU = LicenseTypeEnum("ESU")
)

func (LicenseTypeEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseTypeEnum)(nil)).Elem()
}

func (e LicenseTypeEnum) ToLicenseTypeEnumOutput() LicenseTypeEnumOutput {
	return pulumi.ToOutput(e).(LicenseTypeEnumOutput)
}

func (e LicenseTypeEnum) ToLicenseTypeEnumOutputWithContext(ctx context.Context) LicenseTypeEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseTypeEnumOutput)
}

func (e LicenseTypeEnum) ToLicenseTypeEnumPtrOutput() LicenseTypeEnumPtrOutput {
	return e.ToLicenseTypeEnumPtrOutputWithContext(context.Background())
}

func (e LicenseTypeEnum) ToLicenseTypeEnumPtrOutputWithContext(ctx context.Context) LicenseTypeEnumPtrOutput {
	return LicenseTypeEnum(e).ToLicenseTypeEnumOutputWithContext(ctx).ToLicenseTypeEnumPtrOutputWithContext(ctx)
}

func (e LicenseTypeEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseTypeEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseTypeEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseTypeEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseTypeEnumOutput struct{ *pulumi.OutputState }

func (LicenseTypeEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseTypeEnum)(nil)).Elem()
}

func (o LicenseTypeEnumOutput) ToLicenseTypeEnumOutput() LicenseTypeEnumOutput {
	return o
}

func (o LicenseTypeEnumOutput) ToLicenseTypeEnumOutputWithContext(ctx context.Context) LicenseTypeEnumOutput {
	return o
}

func (o LicenseTypeEnumOutput) ToLicenseTypeEnumPtrOutput() LicenseTypeEnumPtrOutput {
	return o.ToLicenseTypeEnumPtrOutputWithContext(context.Background())
}

func (o LicenseTypeEnumOutput) ToLicenseTypeEnumPtrOutputWithContext(ctx context.Context) LicenseTypeEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseTypeEnum) *LicenseTypeEnum {
		return &v
	}).(LicenseTypeEnumPtrOutput)
}

func (o LicenseTypeEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseTypeEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseTypeEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseTypeEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseTypeEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseTypeEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseTypeEnumPtrOutput struct{ *pulumi.OutputState }

func (LicenseTypeEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseTypeEnum)(nil)).Elem()
}

func (o LicenseTypeEnumPtrOutput) ToLicenseTypeEnumPtrOutput() LicenseTypeEnumPtrOutput {
	return o
}

func (o LicenseTypeEnumPtrOutput) ToLicenseTypeEnumPtrOutputWithContext(ctx context.Context) LicenseTypeEnumPtrOutput {
	return o
}

func (o LicenseTypeEnumPtrOutput) Elem() LicenseTypeEnumOutput {
	return o.ApplyT(func(v *LicenseTypeEnum) LicenseTypeEnum {
		if v != nil {
			return *v
		}
		var ret LicenseTypeEnum
		return ret
	}).(LicenseTypeEnumOutput)
}

func (o LicenseTypeEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseTypeEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseTypeEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseTypeEnumInput is an input type that accepts values of the LicenseTypeEnum enum
// A concrete instance of `LicenseTypeEnumInput` can be one of the following:
//
//	LicenseTypeEnumESU
type LicenseTypeEnumInput interface {
	pulumi.Input

	ToLicenseTypeEnumOutput() LicenseTypeEnumOutput
	ToLicenseTypeEnumOutputWithContext(context.Context) LicenseTypeEnumOutput
}

var licenseTypeEnumPtrType = reflect.TypeOf((**LicenseTypeEnum)(nil)).Elem()

type LicenseTypeEnumPtrInput interface {
	pulumi.Input

	ToLicenseTypeEnumPtrOutput() LicenseTypeEnumPtrOutput
	ToLicenseTypeEnumPtrOutputWithContext(context.Context) LicenseTypeEnumPtrOutput
}

type licenseTypeEnumPtr string

func LicenseTypeEnumPtr(v string) LicenseTypeEnumPtrInput {
	return (*licenseTypeEnumPtr)(&v)
}

func (*licenseTypeEnumPtr) ElementType() reflect.Type {
	return licenseTypeEnumPtrType
}

func (in *licenseTypeEnumPtr) ToLicenseTypeEnumPtrOutput() LicenseTypeEnumPtrOutput {
	return pulumi.ToOutput(in).(LicenseTypeEnumPtrOutput)
}

func (in *licenseTypeEnumPtr) ToLicenseTypeEnumPtrOutputWithContext(ctx context.Context) LicenseTypeEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseTypeEnumPtrOutput)
}

func (in *licenseTypeEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*LicenseTypeEnum] {
	return pulumix.Output[*LicenseTypeEnum]{
		OutputState: in.ToLicenseTypeEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the patch mode.
type PatchModeTypes string

const (
	PatchModeTypesImageDefault        = PatchModeTypes("ImageDefault")
	PatchModeTypesAutomaticByPlatform = PatchModeTypes("AutomaticByPlatform")
	PatchModeTypesAutomaticByOS       = PatchModeTypes("AutomaticByOS")
	PatchModeTypesManual              = PatchModeTypes("Manual")
)

func (PatchModeTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchModeTypes)(nil)).Elem()
}

func (e PatchModeTypes) ToPatchModeTypesOutput() PatchModeTypesOutput {
	return pulumi.ToOutput(e).(PatchModeTypesOutput)
}

func (e PatchModeTypes) ToPatchModeTypesOutputWithContext(ctx context.Context) PatchModeTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PatchModeTypesOutput)
}

func (e PatchModeTypes) ToPatchModeTypesPtrOutput() PatchModeTypesPtrOutput {
	return e.ToPatchModeTypesPtrOutputWithContext(context.Background())
}

func (e PatchModeTypes) ToPatchModeTypesPtrOutputWithContext(ctx context.Context) PatchModeTypesPtrOutput {
	return PatchModeTypes(e).ToPatchModeTypesOutputWithContext(ctx).ToPatchModeTypesPtrOutputWithContext(ctx)
}

func (e PatchModeTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchModeTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchModeTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PatchModeTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PatchModeTypesOutput struct{ *pulumi.OutputState }

func (PatchModeTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchModeTypes)(nil)).Elem()
}

func (o PatchModeTypesOutput) ToPatchModeTypesOutput() PatchModeTypesOutput {
	return o
}

func (o PatchModeTypesOutput) ToPatchModeTypesOutputWithContext(ctx context.Context) PatchModeTypesOutput {
	return o
}

func (o PatchModeTypesOutput) ToPatchModeTypesPtrOutput() PatchModeTypesPtrOutput {
	return o.ToPatchModeTypesPtrOutputWithContext(context.Background())
}

func (o PatchModeTypesOutput) ToPatchModeTypesPtrOutputWithContext(ctx context.Context) PatchModeTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchModeTypes) *PatchModeTypes {
		return &v
	}).(PatchModeTypesPtrOutput)
}

func (o PatchModeTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PatchModeTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchModeTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PatchModeTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchModeTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchModeTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PatchModeTypesPtrOutput struct{ *pulumi.OutputState }

func (PatchModeTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchModeTypes)(nil)).Elem()
}

func (o PatchModeTypesPtrOutput) ToPatchModeTypesPtrOutput() PatchModeTypesPtrOutput {
	return o
}

func (o PatchModeTypesPtrOutput) ToPatchModeTypesPtrOutputWithContext(ctx context.Context) PatchModeTypesPtrOutput {
	return o
}

func (o PatchModeTypesPtrOutput) Elem() PatchModeTypesOutput {
	return o.ApplyT(func(v *PatchModeTypes) PatchModeTypes {
		if v != nil {
			return *v
		}
		var ret PatchModeTypes
		return ret
	}).(PatchModeTypesOutput)
}

func (o PatchModeTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchModeTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PatchModeTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PatchModeTypesInput is an input type that accepts values of the PatchModeTypes enum
// A concrete instance of `PatchModeTypesInput` can be one of the following:
//
//	PatchModeTypesImageDefault
//	PatchModeTypesAutomaticByPlatform
//	PatchModeTypesAutomaticByOS
//	PatchModeTypesManual
type PatchModeTypesInput interface {
	pulumi.Input

	ToPatchModeTypesOutput() PatchModeTypesOutput
	ToPatchModeTypesOutputWithContext(context.Context) PatchModeTypesOutput
}

var patchModeTypesPtrType = reflect.TypeOf((**PatchModeTypes)(nil)).Elem()

type PatchModeTypesPtrInput interface {
	pulumi.Input

	ToPatchModeTypesPtrOutput() PatchModeTypesPtrOutput
	ToPatchModeTypesPtrOutputWithContext(context.Context) PatchModeTypesPtrOutput
}

type patchModeTypesPtr string

func PatchModeTypesPtr(v string) PatchModeTypesPtrInput {
	return (*patchModeTypesPtr)(&v)
}

func (*patchModeTypesPtr) ElementType() reflect.Type {
	return patchModeTypesPtrType
}

func (in *patchModeTypesPtr) ToPatchModeTypesPtrOutput() PatchModeTypesPtrOutput {
	return pulumi.ToOutput(in).(PatchModeTypesPtrOutput)
}

func (in *patchModeTypesPtr) ToPatchModeTypesPtrOutputWithContext(ctx context.Context) PatchModeTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PatchModeTypesPtrOutput)
}

func (in *patchModeTypesPtr) ToOutput(ctx context.Context) pulumix.Output[*PatchModeTypes] {
	return pulumix.Output[*PatchModeTypes]{
		OutputState: in.ToPatchModeTypesPtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
type PublicNetworkAccessType string

const (
	// Allows Azure Arc agents to communicate with Azure Arc services over both public (internet) and private endpoints.
	PublicNetworkAccessTypeEnabled = PublicNetworkAccessType("Enabled")
	// Does not allow Azure Arc agents to communicate with Azure Arc services over public (internet) endpoints. The agents must use the private link.
	PublicNetworkAccessTypeDisabled = PublicNetworkAccessType("Disabled")
)

func (PublicNetworkAccessType) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicNetworkAccessType)(nil)).Elem()
}

func (e PublicNetworkAccessType) ToPublicNetworkAccessTypeOutput() PublicNetworkAccessTypeOutput {
	return pulumi.ToOutput(e).(PublicNetworkAccessTypeOutput)
}

func (e PublicNetworkAccessType) ToPublicNetworkAccessTypeOutputWithContext(ctx context.Context) PublicNetworkAccessTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PublicNetworkAccessTypeOutput)
}

func (e PublicNetworkAccessType) ToPublicNetworkAccessTypePtrOutput() PublicNetworkAccessTypePtrOutput {
	return e.ToPublicNetworkAccessTypePtrOutputWithContext(context.Background())
}

func (e PublicNetworkAccessType) ToPublicNetworkAccessTypePtrOutputWithContext(ctx context.Context) PublicNetworkAccessTypePtrOutput {
	return PublicNetworkAccessType(e).ToPublicNetworkAccessTypeOutputWithContext(ctx).ToPublicNetworkAccessTypePtrOutputWithContext(ctx)
}

func (e PublicNetworkAccessType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicNetworkAccessType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicNetworkAccessType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicNetworkAccessType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PublicNetworkAccessTypeOutput struct{ *pulumi.OutputState }

func (PublicNetworkAccessTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicNetworkAccessType)(nil)).Elem()
}

func (o PublicNetworkAccessTypeOutput) ToPublicNetworkAccessTypeOutput() PublicNetworkAccessTypeOutput {
	return o
}

func (o PublicNetworkAccessTypeOutput) ToPublicNetworkAccessTypeOutputWithContext(ctx context.Context) PublicNetworkAccessTypeOutput {
	return o
}

func (o PublicNetworkAccessTypeOutput) ToPublicNetworkAccessTypePtrOutput() PublicNetworkAccessTypePtrOutput {
	return o.ToPublicNetworkAccessTypePtrOutputWithContext(context.Background())
}

func (o PublicNetworkAccessTypeOutput) ToPublicNetworkAccessTypePtrOutputWithContext(ctx context.Context) PublicNetworkAccessTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicNetworkAccessType) *PublicNetworkAccessType {
		return &v
	}).(PublicNetworkAccessTypePtrOutput)
}

func (o PublicNetworkAccessTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PublicNetworkAccessTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicNetworkAccessType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PublicNetworkAccessTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicNetworkAccessTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicNetworkAccessType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PublicNetworkAccessTypePtrOutput struct{ *pulumi.OutputState }

func (PublicNetworkAccessTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicNetworkAccessType)(nil)).Elem()
}

func (o PublicNetworkAccessTypePtrOutput) ToPublicNetworkAccessTypePtrOutput() PublicNetworkAccessTypePtrOutput {
	return o
}

func (o PublicNetworkAccessTypePtrOutput) ToPublicNetworkAccessTypePtrOutputWithContext(ctx context.Context) PublicNetworkAccessTypePtrOutput {
	return o
}

func (o PublicNetworkAccessTypePtrOutput) Elem() PublicNetworkAccessTypeOutput {
	return o.ApplyT(func(v *PublicNetworkAccessType) PublicNetworkAccessType {
		if v != nil {
			return *v
		}
		var ret PublicNetworkAccessType
		return ret
	}).(PublicNetworkAccessTypeOutput)
}

func (o PublicNetworkAccessTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicNetworkAccessTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PublicNetworkAccessType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PublicNetworkAccessTypeInput is an input type that accepts values of the PublicNetworkAccessType enum
// A concrete instance of `PublicNetworkAccessTypeInput` can be one of the following:
//
//	PublicNetworkAccessTypeEnabled
//	PublicNetworkAccessTypeDisabled
type PublicNetworkAccessTypeInput interface {
	pulumi.Input

	ToPublicNetworkAccessTypeOutput() PublicNetworkAccessTypeOutput
	ToPublicNetworkAccessTypeOutputWithContext(context.Context) PublicNetworkAccessTypeOutput
}

var publicNetworkAccessTypePtrType = reflect.TypeOf((**PublicNetworkAccessType)(nil)).Elem()

type PublicNetworkAccessTypePtrInput interface {
	pulumi.Input

	ToPublicNetworkAccessTypePtrOutput() PublicNetworkAccessTypePtrOutput
	ToPublicNetworkAccessTypePtrOutputWithContext(context.Context) PublicNetworkAccessTypePtrOutput
}

type publicNetworkAccessTypePtr string

func PublicNetworkAccessTypePtr(v string) PublicNetworkAccessTypePtrInput {
	return (*publicNetworkAccessTypePtr)(&v)
}

func (*publicNetworkAccessTypePtr) ElementType() reflect.Type {
	return publicNetworkAccessTypePtrType
}

func (in *publicNetworkAccessTypePtr) ToPublicNetworkAccessTypePtrOutput() PublicNetworkAccessTypePtrOutput {
	return pulumi.ToOutput(in).(PublicNetworkAccessTypePtrOutput)
}

func (in *publicNetworkAccessTypePtr) ToPublicNetworkAccessTypePtrOutputWithContext(ctx context.Context) PublicNetworkAccessTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PublicNetworkAccessTypePtrOutput)
}

func (in *publicNetworkAccessTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PublicNetworkAccessType] {
	return pulumix.Output[*PublicNetworkAccessType]{
		OutputState: in.ToPublicNetworkAccessTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The identity type.
type ResourceIdentityType string

const (
	ResourceIdentityTypeSystemAssigned = ResourceIdentityType("SystemAssigned")
)

func (ResourceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return e.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return ResourceIdentityType(e).ToResourceIdentityTypeOutputWithContext(ctx).ToResourceIdentityTypePtrOutputWithContext(ctx)
}

func (e ResourceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentityType) *ResourceIdentityType {
		return &v
	}).(ResourceIdentityTypePtrOutput)
}

func (o ResourceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) Elem() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v *ResourceIdentityType) ResourceIdentityType {
		if v != nil {
			return *v
		}
		var ret ResourceIdentityType
		return ret
	}).(ResourceIdentityTypeOutput)
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceIdentityTypeInput is an input type that accepts values of the ResourceIdentityType enum
// A concrete instance of `ResourceIdentityTypeInput` can be one of the following:
//
//	ResourceIdentityTypeSystemAssigned
type ResourceIdentityTypeInput interface {
	pulumi.Input

	ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput
	ToResourceIdentityTypeOutputWithContext(context.Context) ResourceIdentityTypeOutput
}

var resourceIdentityTypePtrType = reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()

type ResourceIdentityTypePtrInput interface {
	pulumi.Input

	ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput
	ToResourceIdentityTypePtrOutputWithContext(context.Context) ResourceIdentityTypePtrOutput
}

type resourceIdentityTypePtr string

func ResourceIdentityTypePtr(v string) ResourceIdentityTypePtrInput {
	return (*resourceIdentityTypePtr)(&v)
}

func (*resourceIdentityTypePtr) ElementType() reflect.Type {
	return resourceIdentityTypePtrType
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceIdentityTypePtrOutput)
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceIdentityTypePtrOutput)
}

func (in *resourceIdentityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ResourceIdentityType] {
	return pulumix.Output[*ResourceIdentityType]{
		OutputState: in.ToResourceIdentityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The level code.
type StatusLevelTypes string

const (
	StatusLevelTypesInfo    = StatusLevelTypes("Info")
	StatusLevelTypesWarning = StatusLevelTypes("Warning")
	StatusLevelTypesError   = StatusLevelTypes("Error")
)

func (StatusLevelTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusLevelTypes)(nil)).Elem()
}

func (e StatusLevelTypes) ToStatusLevelTypesOutput() StatusLevelTypesOutput {
	return pulumi.ToOutput(e).(StatusLevelTypesOutput)
}

func (e StatusLevelTypes) ToStatusLevelTypesOutputWithContext(ctx context.Context) StatusLevelTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StatusLevelTypesOutput)
}

func (e StatusLevelTypes) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return e.ToStatusLevelTypesPtrOutputWithContext(context.Background())
}

func (e StatusLevelTypes) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return StatusLevelTypes(e).ToStatusLevelTypesOutputWithContext(ctx).ToStatusLevelTypesPtrOutputWithContext(ctx)
}

func (e StatusLevelTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusLevelTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusLevelTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StatusLevelTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StatusLevelTypesOutput struct{ *pulumi.OutputState }

func (StatusLevelTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusLevelTypes)(nil)).Elem()
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesOutput() StatusLevelTypesOutput {
	return o
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesOutputWithContext(ctx context.Context) StatusLevelTypesOutput {
	return o
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return o.ToStatusLevelTypesPtrOutputWithContext(context.Background())
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusLevelTypes) *StatusLevelTypes {
		return &v
	}).(StatusLevelTypesPtrOutput)
}

func (o StatusLevelTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StatusLevelTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusLevelTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StatusLevelTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusLevelTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusLevelTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatusLevelTypesPtrOutput struct{ *pulumi.OutputState }

func (StatusLevelTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusLevelTypes)(nil)).Elem()
}

func (o StatusLevelTypesPtrOutput) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return o
}

func (o StatusLevelTypesPtrOutput) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return o
}

func (o StatusLevelTypesPtrOutput) Elem() StatusLevelTypesOutput {
	return o.ApplyT(func(v *StatusLevelTypes) StatusLevelTypes {
		if v != nil {
			return *v
		}
		var ret StatusLevelTypes
		return ret
	}).(StatusLevelTypesOutput)
}

func (o StatusLevelTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusLevelTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StatusLevelTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StatusLevelTypesInput is an input type that accepts values of the StatusLevelTypes enum
// A concrete instance of `StatusLevelTypesInput` can be one of the following:
//
//	StatusLevelTypesInfo
//	StatusLevelTypesWarning
//	StatusLevelTypesError
type StatusLevelTypesInput interface {
	pulumi.Input

	ToStatusLevelTypesOutput() StatusLevelTypesOutput
	ToStatusLevelTypesOutputWithContext(context.Context) StatusLevelTypesOutput
}

var statusLevelTypesPtrType = reflect.TypeOf((**StatusLevelTypes)(nil)).Elem()

type StatusLevelTypesPtrInput interface {
	pulumi.Input

	ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput
	ToStatusLevelTypesPtrOutputWithContext(context.Context) StatusLevelTypesPtrOutput
}

type statusLevelTypesPtr string

func StatusLevelTypesPtr(v string) StatusLevelTypesPtrInput {
	return (*statusLevelTypesPtr)(&v)
}

func (*statusLevelTypesPtr) ElementType() reflect.Type {
	return statusLevelTypesPtrType
}

func (in *statusLevelTypesPtr) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return pulumi.ToOutput(in).(StatusLevelTypesPtrOutput)
}

func (in *statusLevelTypesPtr) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StatusLevelTypesPtrOutput)
}

func (in *statusLevelTypesPtr) ToOutput(ctx context.Context) pulumix.Output[*StatusLevelTypes] {
	return pulumix.Output[*StatusLevelTypes]{
		OutputState: in.ToStatusLevelTypesPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(ArcKindEnumOutput{})
	pulumi.RegisterOutputType(ArcKindEnumPtrOutput{})
	pulumi.RegisterOutputType(AssessmentModeTypesOutput{})
	pulumi.RegisterOutputType(AssessmentModeTypesPtrOutput{})
	pulumi.RegisterOutputType(LicenseAssignmentStateOutput{})
	pulumi.RegisterOutputType(LicenseAssignmentStatePtrOutput{})
	pulumi.RegisterOutputType(LicenseCoreTypeOutput{})
	pulumi.RegisterOutputType(LicenseCoreTypePtrOutput{})
	pulumi.RegisterOutputType(LicenseEditionOutput{})
	pulumi.RegisterOutputType(LicenseEditionPtrOutput{})
	pulumi.RegisterOutputType(LicenseProfileProductTypeOutput{})
	pulumi.RegisterOutputType(LicenseProfileProductTypePtrOutput{})
	pulumi.RegisterOutputType(LicenseProfileSubscriptionStatusOutput{})
	pulumi.RegisterOutputType(LicenseProfileSubscriptionStatusPtrOutput{})
	pulumi.RegisterOutputType(LicenseStateEnumOutput{})
	pulumi.RegisterOutputType(LicenseStateEnumPtrOutput{})
	pulumi.RegisterOutputType(LicenseTargetOutput{})
	pulumi.RegisterOutputType(LicenseTargetPtrOutput{})
	pulumi.RegisterOutputType(LicenseTypeEnumOutput{})
	pulumi.RegisterOutputType(LicenseTypeEnumPtrOutput{})
	pulumi.RegisterOutputType(PatchModeTypesOutput{})
	pulumi.RegisterOutputType(PatchModeTypesPtrOutput{})
	pulumi.RegisterOutputType(PublicNetworkAccessTypeOutput{})
	pulumi.RegisterOutputType(PublicNetworkAccessTypePtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(StatusLevelTypesOutput{})
	pulumi.RegisterOutputType(StatusLevelTypesPtrOutput{})
}
