// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230515preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about the Runtime Environment
func LookupRuntimeEnvironment(ctx *pulumi.Context, args *LookupRuntimeEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupRuntimeEnvironmentResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupRuntimeEnvironmentResult
	err := ctx.Invoke("azure-native:automation/v20230515preview:getRuntimeEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRuntimeEnvironmentArgs struct {
	// The name of the automation account.
	AutomationAccountName string `pulumi:"automationAccountName"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Runtime Environment.
	RuntimeEnvironmentName string `pulumi:"runtimeEnvironmentName"`
}

// Definition of the Runtime Environment type.
type LookupRuntimeEnvironmentResult struct {
	// List of Default packages for Environment
	DefaultPackages map[string]string `pulumi:"defaultPackages"`
	// Gets or sets the description.
	Description *string `pulumi:"description"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Language of Runtime Environment
	Language *string `pulumi:"language"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Version of Language
	Version *string `pulumi:"version"`
}

func LookupRuntimeEnvironmentOutput(ctx *pulumi.Context, args LookupRuntimeEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupRuntimeEnvironmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRuntimeEnvironmentResult, error) {
			args := v.(LookupRuntimeEnvironmentArgs)
			r, err := LookupRuntimeEnvironment(ctx, &args, opts...)
			var s LookupRuntimeEnvironmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRuntimeEnvironmentResultOutput)
}

type LookupRuntimeEnvironmentOutputArgs struct {
	// The name of the automation account.
	AutomationAccountName pulumi.StringInput `pulumi:"automationAccountName"`
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the Runtime Environment.
	RuntimeEnvironmentName pulumi.StringInput `pulumi:"runtimeEnvironmentName"`
}

func (LookupRuntimeEnvironmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuntimeEnvironmentArgs)(nil)).Elem()
}

// Definition of the Runtime Environment type.
type LookupRuntimeEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupRuntimeEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuntimeEnvironmentResult)(nil)).Elem()
}

func (o LookupRuntimeEnvironmentResultOutput) ToLookupRuntimeEnvironmentResultOutput() LookupRuntimeEnvironmentResultOutput {
	return o
}

func (o LookupRuntimeEnvironmentResultOutput) ToLookupRuntimeEnvironmentResultOutputWithContext(ctx context.Context) LookupRuntimeEnvironmentResultOutput {
	return o
}

// List of Default packages for Environment
func (o LookupRuntimeEnvironmentResultOutput) DefaultPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) map[string]string { return v.DefaultPackages }).(pulumi.StringMapOutput)
}

// Gets or sets the description.
func (o LookupRuntimeEnvironmentResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupRuntimeEnvironmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Language of Runtime Environment
func (o LookupRuntimeEnvironmentResultOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o LookupRuntimeEnvironmentResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupRuntimeEnvironmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupRuntimeEnvironmentResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupRuntimeEnvironmentResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupRuntimeEnvironmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) string { return v.Type }).(pulumi.StringOutput)
}

// Version of Language
func (o LookupRuntimeEnvironmentResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuntimeEnvironmentResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRuntimeEnvironmentResultOutput{})
}
