// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagemover

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Strategy to use for copy.
type CopyMode string

const (
	CopyModeAdditive = CopyMode("Additive")
	CopyModeMirror   = CopyMode("Mirror")
)

func (CopyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyMode)(nil)).Elem()
}

func (e CopyMode) ToCopyModeOutput() CopyModeOutput {
	return pulumi.ToOutput(e).(CopyModeOutput)
}

func (e CopyMode) ToCopyModeOutputWithContext(ctx context.Context) CopyModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CopyModeOutput)
}

func (e CopyMode) ToCopyModePtrOutput() CopyModePtrOutput {
	return e.ToCopyModePtrOutputWithContext(context.Background())
}

func (e CopyMode) ToCopyModePtrOutputWithContext(ctx context.Context) CopyModePtrOutput {
	return CopyMode(e).ToCopyModeOutputWithContext(ctx).ToCopyModePtrOutputWithContext(ctx)
}

func (e CopyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CopyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CopyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CopyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CopyModeOutput struct{ *pulumi.OutputState }

func (CopyModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyMode)(nil)).Elem()
}

func (o CopyModeOutput) ToCopyModeOutput() CopyModeOutput {
	return o
}

func (o CopyModeOutput) ToCopyModeOutputWithContext(ctx context.Context) CopyModeOutput {
	return o
}

func (o CopyModeOutput) ToCopyModePtrOutput() CopyModePtrOutput {
	return o.ToCopyModePtrOutputWithContext(context.Background())
}

func (o CopyModeOutput) ToCopyModePtrOutputWithContext(ctx context.Context) CopyModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CopyMode) *CopyMode {
		return &v
	}).(CopyModePtrOutput)
}

func (o CopyModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CopyModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CopyMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CopyModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CopyModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CopyMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CopyModePtrOutput struct{ *pulumi.OutputState }

func (CopyModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyMode)(nil)).Elem()
}

func (o CopyModePtrOutput) ToCopyModePtrOutput() CopyModePtrOutput {
	return o
}

func (o CopyModePtrOutput) ToCopyModePtrOutputWithContext(ctx context.Context) CopyModePtrOutput {
	return o
}

func (o CopyModePtrOutput) Elem() CopyModeOutput {
	return o.ApplyT(func(v *CopyMode) CopyMode {
		if v != nil {
			return *v
		}
		var ret CopyMode
		return ret
	}).(CopyModeOutput)
}

func (o CopyModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CopyModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CopyMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CopyModeInput is an input type that accepts values of the CopyMode enum
// A concrete instance of `CopyModeInput` can be one of the following:
//
//	CopyModeAdditive
//	CopyModeMirror
type CopyModeInput interface {
	pulumi.Input

	ToCopyModeOutput() CopyModeOutput
	ToCopyModeOutputWithContext(context.Context) CopyModeOutput
}

var copyModePtrType = reflect.TypeOf((**CopyMode)(nil)).Elem()

type CopyModePtrInput interface {
	pulumi.Input

	ToCopyModePtrOutput() CopyModePtrOutput
	ToCopyModePtrOutputWithContext(context.Context) CopyModePtrOutput
}

type copyModePtr string

func CopyModePtr(v string) CopyModePtrInput {
	return (*copyModePtr)(&v)
}

func (*copyModePtr) ElementType() reflect.Type {
	return copyModePtrType
}

func (in *copyModePtr) ToCopyModePtrOutput() CopyModePtrOutput {
	return pulumi.ToOutput(in).(CopyModePtrOutput)
}

func (in *copyModePtr) ToCopyModePtrOutputWithContext(ctx context.Context) CopyModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CopyModePtrOutput)
}

// The Credentials type.
type CredentialType string

const (
	CredentialTypeAzureKeyVaultSmb = CredentialType("AzureKeyVaultSmb")
)

// The day of week.
type DayOfWeek string

const (
	DayOfWeekMonday    = DayOfWeek("Monday")
	DayOfWeekTuesday   = DayOfWeek("Tuesday")
	DayOfWeekWednesday = DayOfWeek("Wednesday")
	DayOfWeekThursday  = DayOfWeek("Thursday")
	DayOfWeekFriday    = DayOfWeek("Friday")
	DayOfWeekSaturday  = DayOfWeek("Saturday")
	DayOfWeekSunday    = DayOfWeek("Sunday")
)

func (DayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (e DayOfWeek) ToDayOfWeekOutput() DayOfWeekOutput {
	return pulumi.ToOutput(e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return e.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return DayOfWeek(e).ToDayOfWeekOutputWithContext(ctx).ToDayOfWeekPtrOutputWithContext(ctx)
}

func (e DayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DayOfWeekOutput struct{ *pulumi.OutputState }

func (DayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekOutput) ToDayOfWeekOutput() DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DayOfWeek) *DayOfWeek {
		return &v
	}).(DayOfWeekPtrOutput)
}

func (o DayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) Elem() DayOfWeekOutput {
	return o.ApplyT(func(v *DayOfWeek) DayOfWeek {
		if v != nil {
			return *v
		}
		var ret DayOfWeek
		return ret
	}).(DayOfWeekOutput)
}

func (o DayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DayOfWeekInput is an input type that accepts values of the DayOfWeek enum
// A concrete instance of `DayOfWeekInput` can be one of the following:
//
//	DayOfWeekMonday
//	DayOfWeekTuesday
//	DayOfWeekWednesday
//	DayOfWeekThursday
//	DayOfWeekFriday
//	DayOfWeekSaturday
//	DayOfWeekSunday
type DayOfWeekInput interface {
	pulumi.Input

	ToDayOfWeekOutput() DayOfWeekOutput
	ToDayOfWeekOutputWithContext(context.Context) DayOfWeekOutput
}

var dayOfWeekPtrType = reflect.TypeOf((**DayOfWeek)(nil)).Elem()

type DayOfWeekPtrInput interface {
	pulumi.Input

	ToDayOfWeekPtrOutput() DayOfWeekPtrOutput
	ToDayOfWeekPtrOutputWithContext(context.Context) DayOfWeekPtrOutput
}

type dayOfWeekPtr string

func DayOfWeekPtr(v string) DayOfWeekPtrInput {
	return (*dayOfWeekPtr)(&v)
}

func (*dayOfWeekPtr) ElementType() reflect.Type {
	return dayOfWeekPtrType
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DayOfWeekPtrOutput)
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DayOfWeekPtrOutput)
}

// DayOfWeekArrayInput is an input type that accepts DayOfWeekArray and DayOfWeekArrayOutput values.
// You can construct a concrete instance of `DayOfWeekArrayInput` via:
//
//	DayOfWeekArray{ DayOfWeekArgs{...} }
type DayOfWeekArrayInput interface {
	pulumi.Input

	ToDayOfWeekArrayOutput() DayOfWeekArrayOutput
	ToDayOfWeekArrayOutputWithContext(context.Context) DayOfWeekArrayOutput
}

type DayOfWeekArray []DayOfWeek

func (DayOfWeekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DayOfWeek)(nil)).Elem()
}

func (i DayOfWeekArray) ToDayOfWeekArrayOutput() DayOfWeekArrayOutput {
	return i.ToDayOfWeekArrayOutputWithContext(context.Background())
}

func (i DayOfWeekArray) ToDayOfWeekArrayOutputWithContext(ctx context.Context) DayOfWeekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DayOfWeekArrayOutput)
}

type DayOfWeekArrayOutput struct{ *pulumi.OutputState }

func (DayOfWeekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekArrayOutput) ToDayOfWeekArrayOutput() DayOfWeekArrayOutput {
	return o
}

func (o DayOfWeekArrayOutput) ToDayOfWeekArrayOutputWithContext(ctx context.Context) DayOfWeekArrayOutput {
	return o
}

func (o DayOfWeekArrayOutput) Index(i pulumi.IntInput) DayOfWeekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DayOfWeek {
		return vs[0].([]DayOfWeek)[vs[1].(int)]
	}).(DayOfWeekOutput)
}

// The Endpoint resource type.
type EndpointType string

const (
	EndpointTypeAzureStorageBlobContainer = EndpointType("AzureStorageBlobContainer")
	EndpointTypeNfsMount                  = EndpointType("NfsMount")
	EndpointTypeAzureStorageSmbFileShare  = EndpointType("AzureStorageSmbFileShare")
	EndpointTypeSmbMount                  = EndpointType("SmbMount")
)

// The NFS protocol version.
type NfsVersion string

const (
	NfsVersionNFSauto = NfsVersion("NFSauto")
	NfsVersionNFSv3   = NfsVersion("NFSv3")
	NfsVersionNFSv4   = NfsVersion("NFSv4")
)

func (NfsVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsVersion)(nil)).Elem()
}

func (e NfsVersion) ToNfsVersionOutput() NfsVersionOutput {
	return pulumi.ToOutput(e).(NfsVersionOutput)
}

func (e NfsVersion) ToNfsVersionOutputWithContext(ctx context.Context) NfsVersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NfsVersionOutput)
}

func (e NfsVersion) ToNfsVersionPtrOutput() NfsVersionPtrOutput {
	return e.ToNfsVersionPtrOutputWithContext(context.Background())
}

func (e NfsVersion) ToNfsVersionPtrOutputWithContext(ctx context.Context) NfsVersionPtrOutput {
	return NfsVersion(e).ToNfsVersionOutputWithContext(ctx).ToNfsVersionPtrOutputWithContext(ctx)
}

func (e NfsVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NfsVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NfsVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NfsVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NfsVersionOutput struct{ *pulumi.OutputState }

func (NfsVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsVersion)(nil)).Elem()
}

func (o NfsVersionOutput) ToNfsVersionOutput() NfsVersionOutput {
	return o
}

func (o NfsVersionOutput) ToNfsVersionOutputWithContext(ctx context.Context) NfsVersionOutput {
	return o
}

func (o NfsVersionOutput) ToNfsVersionPtrOutput() NfsVersionPtrOutput {
	return o.ToNfsVersionPtrOutputWithContext(context.Background())
}

func (o NfsVersionOutput) ToNfsVersionPtrOutputWithContext(ctx context.Context) NfsVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NfsVersion) *NfsVersion {
		return &v
	}).(NfsVersionPtrOutput)
}

func (o NfsVersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NfsVersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NfsVersion) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NfsVersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NfsVersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NfsVersion) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NfsVersionPtrOutput struct{ *pulumi.OutputState }

func (NfsVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NfsVersion)(nil)).Elem()
}

func (o NfsVersionPtrOutput) ToNfsVersionPtrOutput() NfsVersionPtrOutput {
	return o
}

func (o NfsVersionPtrOutput) ToNfsVersionPtrOutputWithContext(ctx context.Context) NfsVersionPtrOutput {
	return o
}

func (o NfsVersionPtrOutput) Elem() NfsVersionOutput {
	return o.ApplyT(func(v *NfsVersion) NfsVersion {
		if v != nil {
			return *v
		}
		var ret NfsVersion
		return ret
	}).(NfsVersionOutput)
}

func (o NfsVersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NfsVersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NfsVersion) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NfsVersionInput is an input type that accepts values of the NfsVersion enum
// A concrete instance of `NfsVersionInput` can be one of the following:
//
//	NfsVersionNFSauto
//	NfsVersionNFSv3
//	NfsVersionNFSv4
type NfsVersionInput interface {
	pulumi.Input

	ToNfsVersionOutput() NfsVersionOutput
	ToNfsVersionOutputWithContext(context.Context) NfsVersionOutput
}

var nfsVersionPtrType = reflect.TypeOf((**NfsVersion)(nil)).Elem()

type NfsVersionPtrInput interface {
	pulumi.Input

	ToNfsVersionPtrOutput() NfsVersionPtrOutput
	ToNfsVersionPtrOutputWithContext(context.Context) NfsVersionPtrOutput
}

type nfsVersionPtr string

func NfsVersionPtr(v string) NfsVersionPtrInput {
	return (*nfsVersionPtr)(&v)
}

func (*nfsVersionPtr) ElementType() reflect.Type {
	return nfsVersionPtrType
}

func (in *nfsVersionPtr) ToNfsVersionPtrOutput() NfsVersionPtrOutput {
	return pulumi.ToOutput(in).(NfsVersionPtrOutput)
}

func (in *nfsVersionPtr) ToNfsVersionPtrOutputWithContext(ctx context.Context) NfsVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NfsVersionPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CopyModeOutput{})
	pulumi.RegisterOutputType(CopyModePtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekOutput{})
	pulumi.RegisterOutputType(DayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekArrayOutput{})
	pulumi.RegisterOutputType(NfsVersionOutput{})
	pulumi.RegisterOutputType(NfsVersionPtrOutput{})
}
