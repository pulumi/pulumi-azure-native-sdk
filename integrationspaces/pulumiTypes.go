// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package integrationspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// The properties of business process development artifact.
type BusinessProcessDevelopmentArtifactPropertiesResponse struct {
	// The business process mapping.
	BusinessProcessMapping map[string]BusinessProcessMappingItemResponse `pulumi:"businessProcessMapping"`
	// The business process stages.
	BusinessProcessStages map[string]BusinessProcessStageResponse `pulumi:"businessProcessStages"`
	// The description of the business process.
	Description *string `pulumi:"description"`
	// The business process identifier.
	Identifier *BusinessProcessIdentifierResponse `pulumi:"identifier"`
	// The tracking profile for the business process.
	TrackingProfiles map[string]TrackingProfileDefinitionResponse `pulumi:"trackingProfiles"`
}

// The properties of business process development artifact.
type BusinessProcessDevelopmentArtifactPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BusinessProcessDevelopmentArtifactPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessDevelopmentArtifactPropertiesResponse)(nil)).Elem()
}

func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) ToBusinessProcessDevelopmentArtifactPropertiesResponseOutput() BusinessProcessDevelopmentArtifactPropertiesResponseOutput {
	return o
}

func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) ToBusinessProcessDevelopmentArtifactPropertiesResponseOutputWithContext(ctx context.Context) BusinessProcessDevelopmentArtifactPropertiesResponseOutput {
	return o
}

func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessDevelopmentArtifactPropertiesResponse] {
	return pulumix.Output[BusinessProcessDevelopmentArtifactPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The business process mapping.
func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) BusinessProcessMapping() BusinessProcessMappingItemResponseMapOutput {
	return o.ApplyT(func(v BusinessProcessDevelopmentArtifactPropertiesResponse) map[string]BusinessProcessMappingItemResponse {
		return v.BusinessProcessMapping
	}).(BusinessProcessMappingItemResponseMapOutput)
}

// The business process stages.
func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) BusinessProcessStages() BusinessProcessStageResponseMapOutput {
	return o.ApplyT(func(v BusinessProcessDevelopmentArtifactPropertiesResponse) map[string]BusinessProcessStageResponse {
		return v.BusinessProcessStages
	}).(BusinessProcessStageResponseMapOutput)
}

// The description of the business process.
func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessDevelopmentArtifactPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The business process identifier.
func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) Identifier() BusinessProcessIdentifierResponsePtrOutput {
	return o.ApplyT(func(v BusinessProcessDevelopmentArtifactPropertiesResponse) *BusinessProcessIdentifierResponse {
		return v.Identifier
	}).(BusinessProcessIdentifierResponsePtrOutput)
}

// The tracking profile for the business process.
func (o BusinessProcessDevelopmentArtifactPropertiesResponseOutput) TrackingProfiles() TrackingProfileDefinitionResponseMapOutput {
	return o.ApplyT(func(v BusinessProcessDevelopmentArtifactPropertiesResponse) map[string]TrackingProfileDefinitionResponse {
		return v.TrackingProfiles
	}).(TrackingProfileDefinitionResponseMapOutput)
}

type BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessProcessDevelopmentArtifactPropertiesResponse)(nil)).Elem()
}

func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) ToBusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput() BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput {
	return o
}

func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) ToBusinessProcessDevelopmentArtifactPropertiesResponsePtrOutputWithContext(ctx context.Context) BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput {
	return o
}

func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessProcessDevelopmentArtifactPropertiesResponse] {
	return pulumix.Output[*BusinessProcessDevelopmentArtifactPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) Elem() BusinessProcessDevelopmentArtifactPropertiesResponseOutput {
	return o.ApplyT(func(v *BusinessProcessDevelopmentArtifactPropertiesResponse) BusinessProcessDevelopmentArtifactPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret BusinessProcessDevelopmentArtifactPropertiesResponse
		return ret
	}).(BusinessProcessDevelopmentArtifactPropertiesResponseOutput)
}

// The business process mapping.
func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) BusinessProcessMapping() BusinessProcessMappingItemResponseMapOutput {
	return o.ApplyT(func(v *BusinessProcessDevelopmentArtifactPropertiesResponse) map[string]BusinessProcessMappingItemResponse {
		if v == nil {
			return nil
		}
		return v.BusinessProcessMapping
	}).(BusinessProcessMappingItemResponseMapOutput)
}

// The business process stages.
func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) BusinessProcessStages() BusinessProcessStageResponseMapOutput {
	return o.ApplyT(func(v *BusinessProcessDevelopmentArtifactPropertiesResponse) map[string]BusinessProcessStageResponse {
		if v == nil {
			return nil
		}
		return v.BusinessProcessStages
	}).(BusinessProcessStageResponseMapOutput)
}

// The description of the business process.
func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessProcessDevelopmentArtifactPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The business process identifier.
func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) Identifier() BusinessProcessIdentifierResponsePtrOutput {
	return o.ApplyT(func(v *BusinessProcessDevelopmentArtifactPropertiesResponse) *BusinessProcessIdentifierResponse {
		if v == nil {
			return nil
		}
		return v.Identifier
	}).(BusinessProcessIdentifierResponsePtrOutput)
}

// The tracking profile for the business process.
func (o BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput) TrackingProfiles() TrackingProfileDefinitionResponseMapOutput {
	return o.ApplyT(func(v *BusinessProcessDevelopmentArtifactPropertiesResponse) map[string]TrackingProfileDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.TrackingProfiles
	}).(TrackingProfileDefinitionResponseMapOutput)
}

// The properties of business process identifier.
type BusinessProcessIdentifier struct {
	// The property name of the business process identifier.
	PropertyName *string `pulumi:"propertyName"`
	// The property type of the business process identifier.
	PropertyType *string `pulumi:"propertyType"`
}

// BusinessProcessIdentifierInput is an input type that accepts BusinessProcessIdentifierArgs and BusinessProcessIdentifierOutput values.
// You can construct a concrete instance of `BusinessProcessIdentifierInput` via:
//
//	BusinessProcessIdentifierArgs{...}
type BusinessProcessIdentifierInput interface {
	pulumi.Input

	ToBusinessProcessIdentifierOutput() BusinessProcessIdentifierOutput
	ToBusinessProcessIdentifierOutputWithContext(context.Context) BusinessProcessIdentifierOutput
}

// The properties of business process identifier.
type BusinessProcessIdentifierArgs struct {
	// The property name of the business process identifier.
	PropertyName pulumi.StringPtrInput `pulumi:"propertyName"`
	// The property type of the business process identifier.
	PropertyType pulumi.StringPtrInput `pulumi:"propertyType"`
}

func (BusinessProcessIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessIdentifier)(nil)).Elem()
}

func (i BusinessProcessIdentifierArgs) ToBusinessProcessIdentifierOutput() BusinessProcessIdentifierOutput {
	return i.ToBusinessProcessIdentifierOutputWithContext(context.Background())
}

func (i BusinessProcessIdentifierArgs) ToBusinessProcessIdentifierOutputWithContext(ctx context.Context) BusinessProcessIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessProcessIdentifierOutput)
}

func (i BusinessProcessIdentifierArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessIdentifier] {
	return pulumix.Output[BusinessProcessIdentifier]{
		OutputState: i.ToBusinessProcessIdentifierOutputWithContext(ctx).OutputState,
	}
}

func (i BusinessProcessIdentifierArgs) ToBusinessProcessIdentifierPtrOutput() BusinessProcessIdentifierPtrOutput {
	return i.ToBusinessProcessIdentifierPtrOutputWithContext(context.Background())
}

func (i BusinessProcessIdentifierArgs) ToBusinessProcessIdentifierPtrOutputWithContext(ctx context.Context) BusinessProcessIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessProcessIdentifierOutput).ToBusinessProcessIdentifierPtrOutputWithContext(ctx)
}

// BusinessProcessIdentifierPtrInput is an input type that accepts BusinessProcessIdentifierArgs, BusinessProcessIdentifierPtr and BusinessProcessIdentifierPtrOutput values.
// You can construct a concrete instance of `BusinessProcessIdentifierPtrInput` via:
//
//	        BusinessProcessIdentifierArgs{...}
//
//	or:
//
//	        nil
type BusinessProcessIdentifierPtrInput interface {
	pulumi.Input

	ToBusinessProcessIdentifierPtrOutput() BusinessProcessIdentifierPtrOutput
	ToBusinessProcessIdentifierPtrOutputWithContext(context.Context) BusinessProcessIdentifierPtrOutput
}

type businessProcessIdentifierPtrType BusinessProcessIdentifierArgs

func BusinessProcessIdentifierPtr(v *BusinessProcessIdentifierArgs) BusinessProcessIdentifierPtrInput {
	return (*businessProcessIdentifierPtrType)(v)
}

func (*businessProcessIdentifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessProcessIdentifier)(nil)).Elem()
}

func (i *businessProcessIdentifierPtrType) ToBusinessProcessIdentifierPtrOutput() BusinessProcessIdentifierPtrOutput {
	return i.ToBusinessProcessIdentifierPtrOutputWithContext(context.Background())
}

func (i *businessProcessIdentifierPtrType) ToBusinessProcessIdentifierPtrOutputWithContext(ctx context.Context) BusinessProcessIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessProcessIdentifierPtrOutput)
}

func (i *businessProcessIdentifierPtrType) ToOutput(ctx context.Context) pulumix.Output[*BusinessProcessIdentifier] {
	return pulumix.Output[*BusinessProcessIdentifier]{
		OutputState: i.ToBusinessProcessIdentifierPtrOutputWithContext(ctx).OutputState,
	}
}

// The properties of business process identifier.
type BusinessProcessIdentifierOutput struct{ *pulumi.OutputState }

func (BusinessProcessIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessIdentifier)(nil)).Elem()
}

func (o BusinessProcessIdentifierOutput) ToBusinessProcessIdentifierOutput() BusinessProcessIdentifierOutput {
	return o
}

func (o BusinessProcessIdentifierOutput) ToBusinessProcessIdentifierOutputWithContext(ctx context.Context) BusinessProcessIdentifierOutput {
	return o
}

func (o BusinessProcessIdentifierOutput) ToBusinessProcessIdentifierPtrOutput() BusinessProcessIdentifierPtrOutput {
	return o.ToBusinessProcessIdentifierPtrOutputWithContext(context.Background())
}

func (o BusinessProcessIdentifierOutput) ToBusinessProcessIdentifierPtrOutputWithContext(ctx context.Context) BusinessProcessIdentifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BusinessProcessIdentifier) *BusinessProcessIdentifier {
		return &v
	}).(BusinessProcessIdentifierPtrOutput)
}

func (o BusinessProcessIdentifierOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessIdentifier] {
	return pulumix.Output[BusinessProcessIdentifier]{
		OutputState: o.OutputState,
	}
}

// The property name of the business process identifier.
func (o BusinessProcessIdentifierOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessIdentifier) *string { return v.PropertyName }).(pulumi.StringPtrOutput)
}

// The property type of the business process identifier.
func (o BusinessProcessIdentifierOutput) PropertyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessIdentifier) *string { return v.PropertyType }).(pulumi.StringPtrOutput)
}

type BusinessProcessIdentifierPtrOutput struct{ *pulumi.OutputState }

func (BusinessProcessIdentifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessProcessIdentifier)(nil)).Elem()
}

func (o BusinessProcessIdentifierPtrOutput) ToBusinessProcessIdentifierPtrOutput() BusinessProcessIdentifierPtrOutput {
	return o
}

func (o BusinessProcessIdentifierPtrOutput) ToBusinessProcessIdentifierPtrOutputWithContext(ctx context.Context) BusinessProcessIdentifierPtrOutput {
	return o
}

func (o BusinessProcessIdentifierPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessProcessIdentifier] {
	return pulumix.Output[*BusinessProcessIdentifier]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessIdentifierPtrOutput) Elem() BusinessProcessIdentifierOutput {
	return o.ApplyT(func(v *BusinessProcessIdentifier) BusinessProcessIdentifier {
		if v != nil {
			return *v
		}
		var ret BusinessProcessIdentifier
		return ret
	}).(BusinessProcessIdentifierOutput)
}

// The property name of the business process identifier.
func (o BusinessProcessIdentifierPtrOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessProcessIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.PropertyName
	}).(pulumi.StringPtrOutput)
}

// The property type of the business process identifier.
func (o BusinessProcessIdentifierPtrOutput) PropertyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessProcessIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.PropertyType
	}).(pulumi.StringPtrOutput)
}

// The properties of business process identifier.
type BusinessProcessIdentifierResponse struct {
	// The property name of the business process identifier.
	PropertyName *string `pulumi:"propertyName"`
	// The property type of the business process identifier.
	PropertyType *string `pulumi:"propertyType"`
}

// The properties of business process identifier.
type BusinessProcessIdentifierResponseOutput struct{ *pulumi.OutputState }

func (BusinessProcessIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessIdentifierResponse)(nil)).Elem()
}

func (o BusinessProcessIdentifierResponseOutput) ToBusinessProcessIdentifierResponseOutput() BusinessProcessIdentifierResponseOutput {
	return o
}

func (o BusinessProcessIdentifierResponseOutput) ToBusinessProcessIdentifierResponseOutputWithContext(ctx context.Context) BusinessProcessIdentifierResponseOutput {
	return o
}

func (o BusinessProcessIdentifierResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessIdentifierResponse] {
	return pulumix.Output[BusinessProcessIdentifierResponse]{
		OutputState: o.OutputState,
	}
}

// The property name of the business process identifier.
func (o BusinessProcessIdentifierResponseOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessIdentifierResponse) *string { return v.PropertyName }).(pulumi.StringPtrOutput)
}

// The property type of the business process identifier.
func (o BusinessProcessIdentifierResponseOutput) PropertyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessIdentifierResponse) *string { return v.PropertyType }).(pulumi.StringPtrOutput)
}

type BusinessProcessIdentifierResponsePtrOutput struct{ *pulumi.OutputState }

func (BusinessProcessIdentifierResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessProcessIdentifierResponse)(nil)).Elem()
}

func (o BusinessProcessIdentifierResponsePtrOutput) ToBusinessProcessIdentifierResponsePtrOutput() BusinessProcessIdentifierResponsePtrOutput {
	return o
}

func (o BusinessProcessIdentifierResponsePtrOutput) ToBusinessProcessIdentifierResponsePtrOutputWithContext(ctx context.Context) BusinessProcessIdentifierResponsePtrOutput {
	return o
}

func (o BusinessProcessIdentifierResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessProcessIdentifierResponse] {
	return pulumix.Output[*BusinessProcessIdentifierResponse]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessIdentifierResponsePtrOutput) Elem() BusinessProcessIdentifierResponseOutput {
	return o.ApplyT(func(v *BusinessProcessIdentifierResponse) BusinessProcessIdentifierResponse {
		if v != nil {
			return *v
		}
		var ret BusinessProcessIdentifierResponse
		return ret
	}).(BusinessProcessIdentifierResponseOutput)
}

// The property name of the business process identifier.
func (o BusinessProcessIdentifierResponsePtrOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessProcessIdentifierResponse) *string {
		if v == nil {
			return nil
		}
		return v.PropertyName
	}).(pulumi.StringPtrOutput)
}

// The property type of the business process identifier.
func (o BusinessProcessIdentifierResponsePtrOutput) PropertyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessProcessIdentifierResponse) *string {
		if v == nil {
			return nil
		}
		return v.PropertyType
	}).(pulumi.StringPtrOutput)
}

// The properties of business process mapping.
type BusinessProcessMappingItem struct {
	// The logic app resource id.
	LogicAppResourceId *string `pulumi:"logicAppResourceId"`
	// The operation name.
	OperationName *string `pulumi:"operationName"`
	// The mapping item operation type of the business process.
	OperationType *string `pulumi:"operationType"`
	// The workflow name within the logic app.
	WorkflowName *string `pulumi:"workflowName"`
}

// BusinessProcessMappingItemInput is an input type that accepts BusinessProcessMappingItemArgs and BusinessProcessMappingItemOutput values.
// You can construct a concrete instance of `BusinessProcessMappingItemInput` via:
//
//	BusinessProcessMappingItemArgs{...}
type BusinessProcessMappingItemInput interface {
	pulumi.Input

	ToBusinessProcessMappingItemOutput() BusinessProcessMappingItemOutput
	ToBusinessProcessMappingItemOutputWithContext(context.Context) BusinessProcessMappingItemOutput
}

// The properties of business process mapping.
type BusinessProcessMappingItemArgs struct {
	// The logic app resource id.
	LogicAppResourceId pulumi.StringPtrInput `pulumi:"logicAppResourceId"`
	// The operation name.
	OperationName pulumi.StringPtrInput `pulumi:"operationName"`
	// The mapping item operation type of the business process.
	OperationType pulumi.StringPtrInput `pulumi:"operationType"`
	// The workflow name within the logic app.
	WorkflowName pulumi.StringPtrInput `pulumi:"workflowName"`
}

func (BusinessProcessMappingItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessMappingItem)(nil)).Elem()
}

func (i BusinessProcessMappingItemArgs) ToBusinessProcessMappingItemOutput() BusinessProcessMappingItemOutput {
	return i.ToBusinessProcessMappingItemOutputWithContext(context.Background())
}

func (i BusinessProcessMappingItemArgs) ToBusinessProcessMappingItemOutputWithContext(ctx context.Context) BusinessProcessMappingItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessProcessMappingItemOutput)
}

func (i BusinessProcessMappingItemArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessMappingItem] {
	return pulumix.Output[BusinessProcessMappingItem]{
		OutputState: i.ToBusinessProcessMappingItemOutputWithContext(ctx).OutputState,
	}
}

// BusinessProcessMappingItemMapInput is an input type that accepts BusinessProcessMappingItemMap and BusinessProcessMappingItemMapOutput values.
// You can construct a concrete instance of `BusinessProcessMappingItemMapInput` via:
//
//	BusinessProcessMappingItemMap{ "key": BusinessProcessMappingItemArgs{...} }
type BusinessProcessMappingItemMapInput interface {
	pulumi.Input

	ToBusinessProcessMappingItemMapOutput() BusinessProcessMappingItemMapOutput
	ToBusinessProcessMappingItemMapOutputWithContext(context.Context) BusinessProcessMappingItemMapOutput
}

type BusinessProcessMappingItemMap map[string]BusinessProcessMappingItemInput

func (BusinessProcessMappingItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BusinessProcessMappingItem)(nil)).Elem()
}

func (i BusinessProcessMappingItemMap) ToBusinessProcessMappingItemMapOutput() BusinessProcessMappingItemMapOutput {
	return i.ToBusinessProcessMappingItemMapOutputWithContext(context.Background())
}

func (i BusinessProcessMappingItemMap) ToBusinessProcessMappingItemMapOutputWithContext(ctx context.Context) BusinessProcessMappingItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessProcessMappingItemMapOutput)
}

func (i BusinessProcessMappingItemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]BusinessProcessMappingItem] {
	return pulumix.Output[map[string]BusinessProcessMappingItem]{
		OutputState: i.ToBusinessProcessMappingItemMapOutputWithContext(ctx).OutputState,
	}
}

// The properties of business process mapping.
type BusinessProcessMappingItemOutput struct{ *pulumi.OutputState }

func (BusinessProcessMappingItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessMappingItem)(nil)).Elem()
}

func (o BusinessProcessMappingItemOutput) ToBusinessProcessMappingItemOutput() BusinessProcessMappingItemOutput {
	return o
}

func (o BusinessProcessMappingItemOutput) ToBusinessProcessMappingItemOutputWithContext(ctx context.Context) BusinessProcessMappingItemOutput {
	return o
}

func (o BusinessProcessMappingItemOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessMappingItem] {
	return pulumix.Output[BusinessProcessMappingItem]{
		OutputState: o.OutputState,
	}
}

// The logic app resource id.
func (o BusinessProcessMappingItemOutput) LogicAppResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItem) *string { return v.LogicAppResourceId }).(pulumi.StringPtrOutput)
}

// The operation name.
func (o BusinessProcessMappingItemOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItem) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// The mapping item operation type of the business process.
func (o BusinessProcessMappingItemOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItem) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// The workflow name within the logic app.
func (o BusinessProcessMappingItemOutput) WorkflowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItem) *string { return v.WorkflowName }).(pulumi.StringPtrOutput)
}

type BusinessProcessMappingItemMapOutput struct{ *pulumi.OutputState }

func (BusinessProcessMappingItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BusinessProcessMappingItem)(nil)).Elem()
}

func (o BusinessProcessMappingItemMapOutput) ToBusinessProcessMappingItemMapOutput() BusinessProcessMappingItemMapOutput {
	return o
}

func (o BusinessProcessMappingItemMapOutput) ToBusinessProcessMappingItemMapOutputWithContext(ctx context.Context) BusinessProcessMappingItemMapOutput {
	return o
}

func (o BusinessProcessMappingItemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]BusinessProcessMappingItem] {
	return pulumix.Output[map[string]BusinessProcessMappingItem]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessMappingItemMapOutput) MapIndex(k pulumi.StringInput) BusinessProcessMappingItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BusinessProcessMappingItem {
		return vs[0].(map[string]BusinessProcessMappingItem)[vs[1].(string)]
	}).(BusinessProcessMappingItemOutput)
}

// The properties of business process mapping.
type BusinessProcessMappingItemResponse struct {
	// The logic app resource id.
	LogicAppResourceId *string `pulumi:"logicAppResourceId"`
	// The operation name.
	OperationName *string `pulumi:"operationName"`
	// The mapping item operation type of the business process.
	OperationType *string `pulumi:"operationType"`
	// The workflow name within the logic app.
	WorkflowName *string `pulumi:"workflowName"`
}

// The properties of business process mapping.
type BusinessProcessMappingItemResponseOutput struct{ *pulumi.OutputState }

func (BusinessProcessMappingItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessMappingItemResponse)(nil)).Elem()
}

func (o BusinessProcessMappingItemResponseOutput) ToBusinessProcessMappingItemResponseOutput() BusinessProcessMappingItemResponseOutput {
	return o
}

func (o BusinessProcessMappingItemResponseOutput) ToBusinessProcessMappingItemResponseOutputWithContext(ctx context.Context) BusinessProcessMappingItemResponseOutput {
	return o
}

func (o BusinessProcessMappingItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessMappingItemResponse] {
	return pulumix.Output[BusinessProcessMappingItemResponse]{
		OutputState: o.OutputState,
	}
}

// The logic app resource id.
func (o BusinessProcessMappingItemResponseOutput) LogicAppResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItemResponse) *string { return v.LogicAppResourceId }).(pulumi.StringPtrOutput)
}

// The operation name.
func (o BusinessProcessMappingItemResponseOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItemResponse) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// The mapping item operation type of the business process.
func (o BusinessProcessMappingItemResponseOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItemResponse) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// The workflow name within the logic app.
func (o BusinessProcessMappingItemResponseOutput) WorkflowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessMappingItemResponse) *string { return v.WorkflowName }).(pulumi.StringPtrOutput)
}

type BusinessProcessMappingItemResponseMapOutput struct{ *pulumi.OutputState }

func (BusinessProcessMappingItemResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BusinessProcessMappingItemResponse)(nil)).Elem()
}

func (o BusinessProcessMappingItemResponseMapOutput) ToBusinessProcessMappingItemResponseMapOutput() BusinessProcessMappingItemResponseMapOutput {
	return o
}

func (o BusinessProcessMappingItemResponseMapOutput) ToBusinessProcessMappingItemResponseMapOutputWithContext(ctx context.Context) BusinessProcessMappingItemResponseMapOutput {
	return o
}

func (o BusinessProcessMappingItemResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]BusinessProcessMappingItemResponse] {
	return pulumix.Output[map[string]BusinessProcessMappingItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessMappingItemResponseMapOutput) MapIndex(k pulumi.StringInput) BusinessProcessMappingItemResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BusinessProcessMappingItemResponse {
		return vs[0].(map[string]BusinessProcessMappingItemResponse)[vs[1].(string)]
	}).(BusinessProcessMappingItemResponseOutput)
}

// The business process reference.
type BusinessProcessReferenceResponse struct {
	// The business process name.
	Name *string `pulumi:"name"`
	// The business process version.
	Version *string `pulumi:"version"`
}

// The business process reference.
type BusinessProcessReferenceResponseOutput struct{ *pulumi.OutputState }

func (BusinessProcessReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessReferenceResponse)(nil)).Elem()
}

func (o BusinessProcessReferenceResponseOutput) ToBusinessProcessReferenceResponseOutput() BusinessProcessReferenceResponseOutput {
	return o
}

func (o BusinessProcessReferenceResponseOutput) ToBusinessProcessReferenceResponseOutputWithContext(ctx context.Context) BusinessProcessReferenceResponseOutput {
	return o
}

func (o BusinessProcessReferenceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessReferenceResponse] {
	return pulumix.Output[BusinessProcessReferenceResponse]{
		OutputState: o.OutputState,
	}
}

// The business process name.
func (o BusinessProcessReferenceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessReferenceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The business process version.
func (o BusinessProcessReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type BusinessProcessReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (BusinessProcessReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessProcessReferenceResponse)(nil)).Elem()
}

func (o BusinessProcessReferenceResponsePtrOutput) ToBusinessProcessReferenceResponsePtrOutput() BusinessProcessReferenceResponsePtrOutput {
	return o
}

func (o BusinessProcessReferenceResponsePtrOutput) ToBusinessProcessReferenceResponsePtrOutputWithContext(ctx context.Context) BusinessProcessReferenceResponsePtrOutput {
	return o
}

func (o BusinessProcessReferenceResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BusinessProcessReferenceResponse] {
	return pulumix.Output[*BusinessProcessReferenceResponse]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessReferenceResponsePtrOutput) Elem() BusinessProcessReferenceResponseOutput {
	return o.ApplyT(func(v *BusinessProcessReferenceResponse) BusinessProcessReferenceResponse {
		if v != nil {
			return *v
		}
		var ret BusinessProcessReferenceResponse
		return ret
	}).(BusinessProcessReferenceResponseOutput)
}

// The business process name.
func (o BusinessProcessReferenceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessProcessReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The business process version.
func (o BusinessProcessReferenceResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessProcessReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The properties of business process stage.
type BusinessProcessStage struct {
	// The description of the business stage.
	Description *string `pulumi:"description"`
	// The properties within the properties of the business process stage.
	Properties map[string]string `pulumi:"properties"`
	// The property to keep track of stages before current in the business process stage.
	StagesBefore []string `pulumi:"stagesBefore"`
}

// BusinessProcessStageInput is an input type that accepts BusinessProcessStageArgs and BusinessProcessStageOutput values.
// You can construct a concrete instance of `BusinessProcessStageInput` via:
//
//	BusinessProcessStageArgs{...}
type BusinessProcessStageInput interface {
	pulumi.Input

	ToBusinessProcessStageOutput() BusinessProcessStageOutput
	ToBusinessProcessStageOutputWithContext(context.Context) BusinessProcessStageOutput
}

// The properties of business process stage.
type BusinessProcessStageArgs struct {
	// The description of the business stage.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The properties within the properties of the business process stage.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// The property to keep track of stages before current in the business process stage.
	StagesBefore pulumi.StringArrayInput `pulumi:"stagesBefore"`
}

func (BusinessProcessStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessStage)(nil)).Elem()
}

func (i BusinessProcessStageArgs) ToBusinessProcessStageOutput() BusinessProcessStageOutput {
	return i.ToBusinessProcessStageOutputWithContext(context.Background())
}

func (i BusinessProcessStageArgs) ToBusinessProcessStageOutputWithContext(ctx context.Context) BusinessProcessStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessProcessStageOutput)
}

func (i BusinessProcessStageArgs) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessStage] {
	return pulumix.Output[BusinessProcessStage]{
		OutputState: i.ToBusinessProcessStageOutputWithContext(ctx).OutputState,
	}
}

// BusinessProcessStageMapInput is an input type that accepts BusinessProcessStageMap and BusinessProcessStageMapOutput values.
// You can construct a concrete instance of `BusinessProcessStageMapInput` via:
//
//	BusinessProcessStageMap{ "key": BusinessProcessStageArgs{...} }
type BusinessProcessStageMapInput interface {
	pulumi.Input

	ToBusinessProcessStageMapOutput() BusinessProcessStageMapOutput
	ToBusinessProcessStageMapOutputWithContext(context.Context) BusinessProcessStageMapOutput
}

type BusinessProcessStageMap map[string]BusinessProcessStageInput

func (BusinessProcessStageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BusinessProcessStage)(nil)).Elem()
}

func (i BusinessProcessStageMap) ToBusinessProcessStageMapOutput() BusinessProcessStageMapOutput {
	return i.ToBusinessProcessStageMapOutputWithContext(context.Background())
}

func (i BusinessProcessStageMap) ToBusinessProcessStageMapOutputWithContext(ctx context.Context) BusinessProcessStageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessProcessStageMapOutput)
}

func (i BusinessProcessStageMap) ToOutput(ctx context.Context) pulumix.Output[map[string]BusinessProcessStage] {
	return pulumix.Output[map[string]BusinessProcessStage]{
		OutputState: i.ToBusinessProcessStageMapOutputWithContext(ctx).OutputState,
	}
}

// The properties of business process stage.
type BusinessProcessStageOutput struct{ *pulumi.OutputState }

func (BusinessProcessStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessStage)(nil)).Elem()
}

func (o BusinessProcessStageOutput) ToBusinessProcessStageOutput() BusinessProcessStageOutput {
	return o
}

func (o BusinessProcessStageOutput) ToBusinessProcessStageOutputWithContext(ctx context.Context) BusinessProcessStageOutput {
	return o
}

func (o BusinessProcessStageOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessStage] {
	return pulumix.Output[BusinessProcessStage]{
		OutputState: o.OutputState,
	}
}

// The description of the business stage.
func (o BusinessProcessStageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessStage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The properties within the properties of the business process stage.
func (o BusinessProcessStageOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BusinessProcessStage) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// The property to keep track of stages before current in the business process stage.
func (o BusinessProcessStageOutput) StagesBefore() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BusinessProcessStage) []string { return v.StagesBefore }).(pulumi.StringArrayOutput)
}

type BusinessProcessStageMapOutput struct{ *pulumi.OutputState }

func (BusinessProcessStageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BusinessProcessStage)(nil)).Elem()
}

func (o BusinessProcessStageMapOutput) ToBusinessProcessStageMapOutput() BusinessProcessStageMapOutput {
	return o
}

func (o BusinessProcessStageMapOutput) ToBusinessProcessStageMapOutputWithContext(ctx context.Context) BusinessProcessStageMapOutput {
	return o
}

func (o BusinessProcessStageMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]BusinessProcessStage] {
	return pulumix.Output[map[string]BusinessProcessStage]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessStageMapOutput) MapIndex(k pulumi.StringInput) BusinessProcessStageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BusinessProcessStage {
		return vs[0].(map[string]BusinessProcessStage)[vs[1].(string)]
	}).(BusinessProcessStageOutput)
}

// The properties of business process stage.
type BusinessProcessStageResponse struct {
	// The description of the business stage.
	Description *string `pulumi:"description"`
	// The properties within the properties of the business process stage.
	Properties map[string]string `pulumi:"properties"`
	// The property to keep track of stages before current in the business process stage.
	StagesBefore []string `pulumi:"stagesBefore"`
}

// The properties of business process stage.
type BusinessProcessStageResponseOutput struct{ *pulumi.OutputState }

func (BusinessProcessStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessProcessStageResponse)(nil)).Elem()
}

func (o BusinessProcessStageResponseOutput) ToBusinessProcessStageResponseOutput() BusinessProcessStageResponseOutput {
	return o
}

func (o BusinessProcessStageResponseOutput) ToBusinessProcessStageResponseOutputWithContext(ctx context.Context) BusinessProcessStageResponseOutput {
	return o
}

func (o BusinessProcessStageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BusinessProcessStageResponse] {
	return pulumix.Output[BusinessProcessStageResponse]{
		OutputState: o.OutputState,
	}
}

// The description of the business stage.
func (o BusinessProcessStageResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessProcessStageResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The properties within the properties of the business process stage.
func (o BusinessProcessStageResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BusinessProcessStageResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// The property to keep track of stages before current in the business process stage.
func (o BusinessProcessStageResponseOutput) StagesBefore() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BusinessProcessStageResponse) []string { return v.StagesBefore }).(pulumi.StringArrayOutput)
}

type BusinessProcessStageResponseMapOutput struct{ *pulumi.OutputState }

func (BusinessProcessStageResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BusinessProcessStageResponse)(nil)).Elem()
}

func (o BusinessProcessStageResponseMapOutput) ToBusinessProcessStageResponseMapOutput() BusinessProcessStageResponseMapOutput {
	return o
}

func (o BusinessProcessStageResponseMapOutput) ToBusinessProcessStageResponseMapOutputWithContext(ctx context.Context) BusinessProcessStageResponseMapOutput {
	return o
}

func (o BusinessProcessStageResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]BusinessProcessStageResponse] {
	return pulumix.Output[map[string]BusinessProcessStageResponse]{
		OutputState: o.OutputState,
	}
}

func (o BusinessProcessStageResponseMapOutput) MapIndex(k pulumi.StringInput) BusinessProcessStageResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BusinessProcessStageResponse {
		return vs[0].(map[string]BusinessProcessStageResponse)[vs[1].(string)]
	}).(BusinessProcessStageResponseOutput)
}

// The workflow tracking definition.
type FlowTrackingDefinitionResponse struct {
	// The tracking correlation context.
	CorrelationContext *TrackingCorrelationContextResponse `pulumi:"correlationContext"`
	// The tracking events.
	Events map[string]TrackingEventDefinitionResponse `pulumi:"events"`
}

// The workflow tracking definition.
type FlowTrackingDefinitionResponseOutput struct{ *pulumi.OutputState }

func (FlowTrackingDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowTrackingDefinitionResponse)(nil)).Elem()
}

func (o FlowTrackingDefinitionResponseOutput) ToFlowTrackingDefinitionResponseOutput() FlowTrackingDefinitionResponseOutput {
	return o
}

func (o FlowTrackingDefinitionResponseOutput) ToFlowTrackingDefinitionResponseOutputWithContext(ctx context.Context) FlowTrackingDefinitionResponseOutput {
	return o
}

func (o FlowTrackingDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FlowTrackingDefinitionResponse] {
	return pulumix.Output[FlowTrackingDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The tracking correlation context.
func (o FlowTrackingDefinitionResponseOutput) CorrelationContext() TrackingCorrelationContextResponsePtrOutput {
	return o.ApplyT(func(v FlowTrackingDefinitionResponse) *TrackingCorrelationContextResponse {
		return v.CorrelationContext
	}).(TrackingCorrelationContextResponsePtrOutput)
}

// The tracking events.
func (o FlowTrackingDefinitionResponseOutput) Events() TrackingEventDefinitionResponseMapOutput {
	return o.ApplyT(func(v FlowTrackingDefinitionResponse) map[string]TrackingEventDefinitionResponse { return v.Events }).(TrackingEventDefinitionResponseMapOutput)
}

type FlowTrackingDefinitionResponseMapOutput struct{ *pulumi.OutputState }

func (FlowTrackingDefinitionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlowTrackingDefinitionResponse)(nil)).Elem()
}

func (o FlowTrackingDefinitionResponseMapOutput) ToFlowTrackingDefinitionResponseMapOutput() FlowTrackingDefinitionResponseMapOutput {
	return o
}

func (o FlowTrackingDefinitionResponseMapOutput) ToFlowTrackingDefinitionResponseMapOutputWithContext(ctx context.Context) FlowTrackingDefinitionResponseMapOutput {
	return o
}

func (o FlowTrackingDefinitionResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]FlowTrackingDefinitionResponse] {
	return pulumix.Output[map[string]FlowTrackingDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o FlowTrackingDefinitionResponseMapOutput) MapIndex(k pulumi.StringInput) FlowTrackingDefinitionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlowTrackingDefinitionResponse {
		return vs[0].(map[string]FlowTrackingDefinitionResponse)[vs[1].(string)]
	}).(FlowTrackingDefinitionResponseOutput)
}

// The business process development artifact save or get response.
type SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse struct {
	// The name of the business process development artifact.
	Name string `pulumi:"name"`
	// The properties of the business process development artifact.
	Properties *BusinessProcessDevelopmentArtifactPropertiesResponse `pulumi:"properties"`
	// The system data of the business process development artifact.
	SystemData SystemDataResponse `pulumi:"systemData"`
}

// The business process development artifact save or get response.
type SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput struct{ *pulumi.OutputState }

func (SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse)(nil)).Elem()
}

func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput) ToSaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput() SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput {
	return o
}

func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput) ToSaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutputWithContext(ctx context.Context) SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput {
	return o
}

func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse] {
	return pulumix.Output[SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the business process development artifact.
func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the business process development artifact.
func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput) Properties() BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse) *BusinessProcessDevelopmentArtifactPropertiesResponse {
		return v.Properties
	}).(BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput)
}

// The system data of the business process development artifact.
func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse) SystemDataResponse {
		return v.SystemData
	}).(SystemDataResponseOutput)
}

type SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput struct{ *pulumi.OutputState }

func (SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse)(nil)).Elem()
}

func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput) ToSaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput() SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput {
	return o
}

func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput) ToSaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutputWithContext(ctx context.Context) SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput {
	return o
}

func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse] {
	return pulumix.Output[[]SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse]{
		OutputState: o.OutputState,
	}
}

func (o SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput) Index(i pulumi.IntInput) SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse {
		return vs[0].([]SaveOrGetBusinessProcessDevelopmentArtifactResponseResponse)[vs[1].(int)]
	}).(SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The tracking correlation context.
type TrackingCorrelationContextResponse struct {
	// The operation name for correlation context.
	OperationName *string `pulumi:"operationName"`
	// The operation type for correlation context.
	OperationType *string `pulumi:"operationType"`
	// The name of the correlation property.
	PropertyName *string `pulumi:"propertyName"`
	// The template expression for correlation context property value.
	Value *string `pulumi:"value"`
}

// The tracking correlation context.
type TrackingCorrelationContextResponseOutput struct{ *pulumi.OutputState }

func (TrackingCorrelationContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingCorrelationContextResponse)(nil)).Elem()
}

func (o TrackingCorrelationContextResponseOutput) ToTrackingCorrelationContextResponseOutput() TrackingCorrelationContextResponseOutput {
	return o
}

func (o TrackingCorrelationContextResponseOutput) ToTrackingCorrelationContextResponseOutputWithContext(ctx context.Context) TrackingCorrelationContextResponseOutput {
	return o
}

func (o TrackingCorrelationContextResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TrackingCorrelationContextResponse] {
	return pulumix.Output[TrackingCorrelationContextResponse]{
		OutputState: o.OutputState,
	}
}

// The operation name for correlation context.
func (o TrackingCorrelationContextResponseOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingCorrelationContextResponse) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// The operation type for correlation context.
func (o TrackingCorrelationContextResponseOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingCorrelationContextResponse) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// The name of the correlation property.
func (o TrackingCorrelationContextResponseOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingCorrelationContextResponse) *string { return v.PropertyName }).(pulumi.StringPtrOutput)
}

// The template expression for correlation context property value.
func (o TrackingCorrelationContextResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingCorrelationContextResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TrackingCorrelationContextResponsePtrOutput struct{ *pulumi.OutputState }

func (TrackingCorrelationContextResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrackingCorrelationContextResponse)(nil)).Elem()
}

func (o TrackingCorrelationContextResponsePtrOutput) ToTrackingCorrelationContextResponsePtrOutput() TrackingCorrelationContextResponsePtrOutput {
	return o
}

func (o TrackingCorrelationContextResponsePtrOutput) ToTrackingCorrelationContextResponsePtrOutputWithContext(ctx context.Context) TrackingCorrelationContextResponsePtrOutput {
	return o
}

func (o TrackingCorrelationContextResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TrackingCorrelationContextResponse] {
	return pulumix.Output[*TrackingCorrelationContextResponse]{
		OutputState: o.OutputState,
	}
}

func (o TrackingCorrelationContextResponsePtrOutput) Elem() TrackingCorrelationContextResponseOutput {
	return o.ApplyT(func(v *TrackingCorrelationContextResponse) TrackingCorrelationContextResponse {
		if v != nil {
			return *v
		}
		var ret TrackingCorrelationContextResponse
		return ret
	}).(TrackingCorrelationContextResponseOutput)
}

// The operation name for correlation context.
func (o TrackingCorrelationContextResponsePtrOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrackingCorrelationContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationName
	}).(pulumi.StringPtrOutput)
}

// The operation type for correlation context.
func (o TrackingCorrelationContextResponsePtrOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrackingCorrelationContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationType
	}).(pulumi.StringPtrOutput)
}

// The name of the correlation property.
func (o TrackingCorrelationContextResponsePtrOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrackingCorrelationContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.PropertyName
	}).(pulumi.StringPtrOutput)
}

// The template expression for correlation context property value.
func (o TrackingCorrelationContextResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrackingCorrelationContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The properties of tracking data store.
type TrackingDataStore struct {
	// The data store ingestion URI.
	DataStoreIngestionUri string `pulumi:"dataStoreIngestionUri"`
	// The data store resource id.
	DataStoreResourceId string `pulumi:"dataStoreResourceId"`
	// The data store URI.
	DataStoreUri string `pulumi:"dataStoreUri"`
	// The database name.
	DatabaseName string `pulumi:"databaseName"`
}

// TrackingDataStoreInput is an input type that accepts TrackingDataStoreArgs and TrackingDataStoreOutput values.
// You can construct a concrete instance of `TrackingDataStoreInput` via:
//
//	TrackingDataStoreArgs{...}
type TrackingDataStoreInput interface {
	pulumi.Input

	ToTrackingDataStoreOutput() TrackingDataStoreOutput
	ToTrackingDataStoreOutputWithContext(context.Context) TrackingDataStoreOutput
}

// The properties of tracking data store.
type TrackingDataStoreArgs struct {
	// The data store ingestion URI.
	DataStoreIngestionUri pulumi.StringInput `pulumi:"dataStoreIngestionUri"`
	// The data store resource id.
	DataStoreResourceId pulumi.StringInput `pulumi:"dataStoreResourceId"`
	// The data store URI.
	DataStoreUri pulumi.StringInput `pulumi:"dataStoreUri"`
	// The database name.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
}

func (TrackingDataStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingDataStore)(nil)).Elem()
}

func (i TrackingDataStoreArgs) ToTrackingDataStoreOutput() TrackingDataStoreOutput {
	return i.ToTrackingDataStoreOutputWithContext(context.Background())
}

func (i TrackingDataStoreArgs) ToTrackingDataStoreOutputWithContext(ctx context.Context) TrackingDataStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackingDataStoreOutput)
}

func (i TrackingDataStoreArgs) ToOutput(ctx context.Context) pulumix.Output[TrackingDataStore] {
	return pulumix.Output[TrackingDataStore]{
		OutputState: i.ToTrackingDataStoreOutputWithContext(ctx).OutputState,
	}
}

// TrackingDataStoreMapInput is an input type that accepts TrackingDataStoreMap and TrackingDataStoreMapOutput values.
// You can construct a concrete instance of `TrackingDataStoreMapInput` via:
//
//	TrackingDataStoreMap{ "key": TrackingDataStoreArgs{...} }
type TrackingDataStoreMapInput interface {
	pulumi.Input

	ToTrackingDataStoreMapOutput() TrackingDataStoreMapOutput
	ToTrackingDataStoreMapOutputWithContext(context.Context) TrackingDataStoreMapOutput
}

type TrackingDataStoreMap map[string]TrackingDataStoreInput

func (TrackingDataStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TrackingDataStore)(nil)).Elem()
}

func (i TrackingDataStoreMap) ToTrackingDataStoreMapOutput() TrackingDataStoreMapOutput {
	return i.ToTrackingDataStoreMapOutputWithContext(context.Background())
}

func (i TrackingDataStoreMap) ToTrackingDataStoreMapOutputWithContext(ctx context.Context) TrackingDataStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackingDataStoreMapOutput)
}

func (i TrackingDataStoreMap) ToOutput(ctx context.Context) pulumix.Output[map[string]TrackingDataStore] {
	return pulumix.Output[map[string]TrackingDataStore]{
		OutputState: i.ToTrackingDataStoreMapOutputWithContext(ctx).OutputState,
	}
}

// The properties of tracking data store.
type TrackingDataStoreOutput struct{ *pulumi.OutputState }

func (TrackingDataStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingDataStore)(nil)).Elem()
}

func (o TrackingDataStoreOutput) ToTrackingDataStoreOutput() TrackingDataStoreOutput {
	return o
}

func (o TrackingDataStoreOutput) ToTrackingDataStoreOutputWithContext(ctx context.Context) TrackingDataStoreOutput {
	return o
}

func (o TrackingDataStoreOutput) ToOutput(ctx context.Context) pulumix.Output[TrackingDataStore] {
	return pulumix.Output[TrackingDataStore]{
		OutputState: o.OutputState,
	}
}

// The data store ingestion URI.
func (o TrackingDataStoreOutput) DataStoreIngestionUri() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStore) string { return v.DataStoreIngestionUri }).(pulumi.StringOutput)
}

// The data store resource id.
func (o TrackingDataStoreOutput) DataStoreResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStore) string { return v.DataStoreResourceId }).(pulumi.StringOutput)
}

// The data store URI.
func (o TrackingDataStoreOutput) DataStoreUri() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStore) string { return v.DataStoreUri }).(pulumi.StringOutput)
}

// The database name.
func (o TrackingDataStoreOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStore) string { return v.DatabaseName }).(pulumi.StringOutput)
}

type TrackingDataStoreMapOutput struct{ *pulumi.OutputState }

func (TrackingDataStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TrackingDataStore)(nil)).Elem()
}

func (o TrackingDataStoreMapOutput) ToTrackingDataStoreMapOutput() TrackingDataStoreMapOutput {
	return o
}

func (o TrackingDataStoreMapOutput) ToTrackingDataStoreMapOutputWithContext(ctx context.Context) TrackingDataStoreMapOutput {
	return o
}

func (o TrackingDataStoreMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]TrackingDataStore] {
	return pulumix.Output[map[string]TrackingDataStore]{
		OutputState: o.OutputState,
	}
}

func (o TrackingDataStoreMapOutput) MapIndex(k pulumi.StringInput) TrackingDataStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TrackingDataStore {
		return vs[0].(map[string]TrackingDataStore)[vs[1].(string)]
	}).(TrackingDataStoreOutput)
}

// The properties of tracking data store.
type TrackingDataStoreResponse struct {
	// The data store ingestion URI.
	DataStoreIngestionUri string `pulumi:"dataStoreIngestionUri"`
	// The data store resource id.
	DataStoreResourceId string `pulumi:"dataStoreResourceId"`
	// The data store URI.
	DataStoreUri string `pulumi:"dataStoreUri"`
	// The database name.
	DatabaseName string `pulumi:"databaseName"`
}

// The properties of tracking data store.
type TrackingDataStoreResponseOutput struct{ *pulumi.OutputState }

func (TrackingDataStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingDataStoreResponse)(nil)).Elem()
}

func (o TrackingDataStoreResponseOutput) ToTrackingDataStoreResponseOutput() TrackingDataStoreResponseOutput {
	return o
}

func (o TrackingDataStoreResponseOutput) ToTrackingDataStoreResponseOutputWithContext(ctx context.Context) TrackingDataStoreResponseOutput {
	return o
}

func (o TrackingDataStoreResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TrackingDataStoreResponse] {
	return pulumix.Output[TrackingDataStoreResponse]{
		OutputState: o.OutputState,
	}
}

// The data store ingestion URI.
func (o TrackingDataStoreResponseOutput) DataStoreIngestionUri() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStoreResponse) string { return v.DataStoreIngestionUri }).(pulumi.StringOutput)
}

// The data store resource id.
func (o TrackingDataStoreResponseOutput) DataStoreResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStoreResponse) string { return v.DataStoreResourceId }).(pulumi.StringOutput)
}

// The data store URI.
func (o TrackingDataStoreResponseOutput) DataStoreUri() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStoreResponse) string { return v.DataStoreUri }).(pulumi.StringOutput)
}

// The database name.
func (o TrackingDataStoreResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v TrackingDataStoreResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

type TrackingDataStoreResponseMapOutput struct{ *pulumi.OutputState }

func (TrackingDataStoreResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TrackingDataStoreResponse)(nil)).Elem()
}

func (o TrackingDataStoreResponseMapOutput) ToTrackingDataStoreResponseMapOutput() TrackingDataStoreResponseMapOutput {
	return o
}

func (o TrackingDataStoreResponseMapOutput) ToTrackingDataStoreResponseMapOutputWithContext(ctx context.Context) TrackingDataStoreResponseMapOutput {
	return o
}

func (o TrackingDataStoreResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]TrackingDataStoreResponse] {
	return pulumix.Output[map[string]TrackingDataStoreResponse]{
		OutputState: o.OutputState,
	}
}

func (o TrackingDataStoreResponseMapOutput) MapIndex(k pulumi.StringInput) TrackingDataStoreResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TrackingDataStoreResponse {
		return vs[0].(map[string]TrackingDataStoreResponse)[vs[1].(string)]
	}).(TrackingDataStoreResponseOutput)
}

// The tracking event definition.
type TrackingEventDefinitionResponse struct {
	// The operation name.
	OperationName *string `pulumi:"operationName"`
	// The operation type.
	OperationType *string `pulumi:"operationType"`
	// The properties to be collected for event.
	Properties map[string]interface{} `pulumi:"properties"`
}

// The tracking event definition.
type TrackingEventDefinitionResponseOutput struct{ *pulumi.OutputState }

func (TrackingEventDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingEventDefinitionResponse)(nil)).Elem()
}

func (o TrackingEventDefinitionResponseOutput) ToTrackingEventDefinitionResponseOutput() TrackingEventDefinitionResponseOutput {
	return o
}

func (o TrackingEventDefinitionResponseOutput) ToTrackingEventDefinitionResponseOutputWithContext(ctx context.Context) TrackingEventDefinitionResponseOutput {
	return o
}

func (o TrackingEventDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TrackingEventDefinitionResponse] {
	return pulumix.Output[TrackingEventDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The operation name.
func (o TrackingEventDefinitionResponseOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingEventDefinitionResponse) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// The operation type.
func (o TrackingEventDefinitionResponseOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingEventDefinitionResponse) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// The properties to be collected for event.
func (o TrackingEventDefinitionResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v TrackingEventDefinitionResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type TrackingEventDefinitionResponseMapOutput struct{ *pulumi.OutputState }

func (TrackingEventDefinitionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TrackingEventDefinitionResponse)(nil)).Elem()
}

func (o TrackingEventDefinitionResponseMapOutput) ToTrackingEventDefinitionResponseMapOutput() TrackingEventDefinitionResponseMapOutput {
	return o
}

func (o TrackingEventDefinitionResponseMapOutput) ToTrackingEventDefinitionResponseMapOutputWithContext(ctx context.Context) TrackingEventDefinitionResponseMapOutput {
	return o
}

func (o TrackingEventDefinitionResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]TrackingEventDefinitionResponse] {
	return pulumix.Output[map[string]TrackingEventDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o TrackingEventDefinitionResponseMapOutput) MapIndex(k pulumi.StringInput) TrackingEventDefinitionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TrackingEventDefinitionResponse {
		return vs[0].(map[string]TrackingEventDefinitionResponse)[vs[1].(string)]
	}).(TrackingEventDefinitionResponseOutput)
}

// The tracking profile for the business process
type TrackingProfileDefinitionResponse struct {
	// The business process reference.
	BusinessProcess *BusinessProcessReferenceResponse `pulumi:"businessProcess"`
	// The tracking definition schema uri.
	Schema *string `pulumi:"schema"`
	// The tracking definitions.
	TrackingDefinitions map[string]FlowTrackingDefinitionResponse `pulumi:"trackingDefinitions"`
}

// The tracking profile for the business process
type TrackingProfileDefinitionResponseOutput struct{ *pulumi.OutputState }

func (TrackingProfileDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingProfileDefinitionResponse)(nil)).Elem()
}

func (o TrackingProfileDefinitionResponseOutput) ToTrackingProfileDefinitionResponseOutput() TrackingProfileDefinitionResponseOutput {
	return o
}

func (o TrackingProfileDefinitionResponseOutput) ToTrackingProfileDefinitionResponseOutputWithContext(ctx context.Context) TrackingProfileDefinitionResponseOutput {
	return o
}

func (o TrackingProfileDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TrackingProfileDefinitionResponse] {
	return pulumix.Output[TrackingProfileDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The business process reference.
func (o TrackingProfileDefinitionResponseOutput) BusinessProcess() BusinessProcessReferenceResponsePtrOutput {
	return o.ApplyT(func(v TrackingProfileDefinitionResponse) *BusinessProcessReferenceResponse { return v.BusinessProcess }).(BusinessProcessReferenceResponsePtrOutput)
}

// The tracking definition schema uri.
func (o TrackingProfileDefinitionResponseOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingProfileDefinitionResponse) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// The tracking definitions.
func (o TrackingProfileDefinitionResponseOutput) TrackingDefinitions() FlowTrackingDefinitionResponseMapOutput {
	return o.ApplyT(func(v TrackingProfileDefinitionResponse) map[string]FlowTrackingDefinitionResponse {
		return v.TrackingDefinitions
	}).(FlowTrackingDefinitionResponseMapOutput)
}

type TrackingProfileDefinitionResponseMapOutput struct{ *pulumi.OutputState }

func (TrackingProfileDefinitionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TrackingProfileDefinitionResponse)(nil)).Elem()
}

func (o TrackingProfileDefinitionResponseMapOutput) ToTrackingProfileDefinitionResponseMapOutput() TrackingProfileDefinitionResponseMapOutput {
	return o
}

func (o TrackingProfileDefinitionResponseMapOutput) ToTrackingProfileDefinitionResponseMapOutputWithContext(ctx context.Context) TrackingProfileDefinitionResponseMapOutput {
	return o
}

func (o TrackingProfileDefinitionResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]TrackingProfileDefinitionResponse] {
	return pulumix.Output[map[string]TrackingProfileDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o TrackingProfileDefinitionResponseMapOutput) MapIndex(k pulumi.StringInput) TrackingProfileDefinitionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TrackingProfileDefinitionResponse {
		return vs[0].(map[string]TrackingProfileDefinitionResponse)[vs[1].(string)]
	}).(TrackingProfileDefinitionResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BusinessProcessDevelopmentArtifactPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BusinessProcessDevelopmentArtifactPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BusinessProcessIdentifierOutput{})
	pulumi.RegisterOutputType(BusinessProcessIdentifierPtrOutput{})
	pulumi.RegisterOutputType(BusinessProcessIdentifierResponseOutput{})
	pulumi.RegisterOutputType(BusinessProcessIdentifierResponsePtrOutput{})
	pulumi.RegisterOutputType(BusinessProcessMappingItemOutput{})
	pulumi.RegisterOutputType(BusinessProcessMappingItemMapOutput{})
	pulumi.RegisterOutputType(BusinessProcessMappingItemResponseOutput{})
	pulumi.RegisterOutputType(BusinessProcessMappingItemResponseMapOutput{})
	pulumi.RegisterOutputType(BusinessProcessReferenceResponseOutput{})
	pulumi.RegisterOutputType(BusinessProcessReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(BusinessProcessStageOutput{})
	pulumi.RegisterOutputType(BusinessProcessStageMapOutput{})
	pulumi.RegisterOutputType(BusinessProcessStageResponseOutput{})
	pulumi.RegisterOutputType(BusinessProcessStageResponseMapOutput{})
	pulumi.RegisterOutputType(FlowTrackingDefinitionResponseOutput{})
	pulumi.RegisterOutputType(FlowTrackingDefinitionResponseMapOutput{})
	pulumi.RegisterOutputType(SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseOutput{})
	pulumi.RegisterOutputType(SaveOrGetBusinessProcessDevelopmentArtifactResponseResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TrackingCorrelationContextResponseOutput{})
	pulumi.RegisterOutputType(TrackingCorrelationContextResponsePtrOutput{})
	pulumi.RegisterOutputType(TrackingDataStoreOutput{})
	pulumi.RegisterOutputType(TrackingDataStoreMapOutput{})
	pulumi.RegisterOutputType(TrackingDataStoreResponseOutput{})
	pulumi.RegisterOutputType(TrackingDataStoreResponseMapOutput{})
	pulumi.RegisterOutputType(TrackingEventDefinitionResponseOutput{})
	pulumi.RegisterOutputType(TrackingEventDefinitionResponseMapOutput{})
	pulumi.RegisterOutputType(TrackingProfileDefinitionResponseOutput{})
	pulumi.RegisterOutputType(TrackingProfileDefinitionResponseMapOutput{})
}
