// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Parameters to create and update an Azure Cosmos DB MongoMI Role Definition.
//
// Uses Azure REST API version 2025-05-01-preview.
type MongoMIResourceMongoMIRoleDefinition struct {
	pulumi.CustomResourceState

	// A set of fully qualified Scopes at or below which MongoMI Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes pulumi.StringArrayOutput `pulumi:"assignableScopes"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The set of operations allowed through this Role Definition.
	Permissions PermissionResponseArrayOutput `pulumi:"permissions"`
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName pulumi.StringPtrOutput `pulumi:"roleName"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMongoMIResourceMongoMIRoleDefinition registers a new resource with the given unique name, arguments, and options.
func NewMongoMIResourceMongoMIRoleDefinition(ctx *pulumi.Context,
	name string, args *MongoMIResourceMongoMIRoleDefinitionArgs, opts ...pulumi.ResourceOption) (*MongoMIResourceMongoMIRoleDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cosmosdb/v20250501preview:MongoMIResourceMongoMIRoleDefinition"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MongoMIResourceMongoMIRoleDefinition
	err := ctx.RegisterResource("azure-native:cosmosdb:MongoMIResourceMongoMIRoleDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoMIResourceMongoMIRoleDefinition gets an existing MongoMIResourceMongoMIRoleDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoMIResourceMongoMIRoleDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoMIResourceMongoMIRoleDefinitionState, opts ...pulumi.ResourceOption) (*MongoMIResourceMongoMIRoleDefinition, error) {
	var resource MongoMIResourceMongoMIRoleDefinition
	err := ctx.ReadResource("azure-native:cosmosdb:MongoMIResourceMongoMIRoleDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoMIResourceMongoMIRoleDefinition resources.
type mongoMIResourceMongoMIRoleDefinitionState struct {
}

type MongoMIResourceMongoMIRoleDefinitionState struct {
}

func (MongoMIResourceMongoMIRoleDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoMIResourceMongoMIRoleDefinitionState)(nil)).Elem()
}

type mongoMIResourceMongoMIRoleDefinitionArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// A set of fully qualified Scopes at or below which MongoMI Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes []string `pulumi:"assignableScopes"`
	// The path id for the Role Definition.
	Id *string `pulumi:"id"`
	// The set of operations allowed through this Role Definition.
	Permissions []Permission `pulumi:"permissions"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Definition.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName *string `pulumi:"roleName"`
	// Indicates whether the Role Definition was built-in or user created.
	Type *RoleDefinitionType `pulumi:"type"`
}

// The set of arguments for constructing a MongoMIResourceMongoMIRoleDefinition resource.
type MongoMIResourceMongoMIRoleDefinitionArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput
	// A set of fully qualified Scopes at or below which MongoMI Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes pulumi.StringArrayInput
	// The path id for the Role Definition.
	Id pulumi.StringPtrInput
	// The set of operations allowed through this Role Definition.
	Permissions PermissionArrayInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The GUID for the Role Definition.
	RoleDefinitionId pulumi.StringPtrInput
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName pulumi.StringPtrInput
	// Indicates whether the Role Definition was built-in or user created.
	Type RoleDefinitionTypePtrInput
}

func (MongoMIResourceMongoMIRoleDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoMIResourceMongoMIRoleDefinitionArgs)(nil)).Elem()
}

type MongoMIResourceMongoMIRoleDefinitionInput interface {
	pulumi.Input

	ToMongoMIResourceMongoMIRoleDefinitionOutput() MongoMIResourceMongoMIRoleDefinitionOutput
	ToMongoMIResourceMongoMIRoleDefinitionOutputWithContext(ctx context.Context) MongoMIResourceMongoMIRoleDefinitionOutput
}

func (*MongoMIResourceMongoMIRoleDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoMIResourceMongoMIRoleDefinition)(nil)).Elem()
}

func (i *MongoMIResourceMongoMIRoleDefinition) ToMongoMIResourceMongoMIRoleDefinitionOutput() MongoMIResourceMongoMIRoleDefinitionOutput {
	return i.ToMongoMIResourceMongoMIRoleDefinitionOutputWithContext(context.Background())
}

func (i *MongoMIResourceMongoMIRoleDefinition) ToMongoMIResourceMongoMIRoleDefinitionOutputWithContext(ctx context.Context) MongoMIResourceMongoMIRoleDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoMIResourceMongoMIRoleDefinitionOutput)
}

type MongoMIResourceMongoMIRoleDefinitionOutput struct{ *pulumi.OutputState }

func (MongoMIResourceMongoMIRoleDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoMIResourceMongoMIRoleDefinition)(nil)).Elem()
}

func (o MongoMIResourceMongoMIRoleDefinitionOutput) ToMongoMIResourceMongoMIRoleDefinitionOutput() MongoMIResourceMongoMIRoleDefinitionOutput {
	return o
}

func (o MongoMIResourceMongoMIRoleDefinitionOutput) ToMongoMIResourceMongoMIRoleDefinitionOutputWithContext(ctx context.Context) MongoMIResourceMongoMIRoleDefinitionOutput {
	return o
}

// A set of fully qualified Scopes at or below which MongoMI Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
func (o MongoMIResourceMongoMIRoleDefinitionOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleDefinition) pulumi.StringArrayOutput { return v.AssignableScopes }).(pulumi.StringArrayOutput)
}

// The Azure API version of the resource.
func (o MongoMIResourceMongoMIRoleDefinitionOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleDefinition) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o MongoMIResourceMongoMIRoleDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The set of operations allowed through this Role Definition.
func (o MongoMIResourceMongoMIRoleDefinitionOutput) Permissions() PermissionResponseArrayOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleDefinition) PermissionResponseArrayOutput { return v.Permissions }).(PermissionResponseArrayOutput)
}

// A user-friendly name for the Role Definition. Must be unique for the database account.
func (o MongoMIResourceMongoMIRoleDefinitionOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleDefinition) pulumi.StringPtrOutput { return v.RoleName }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o MongoMIResourceMongoMIRoleDefinitionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleDefinition) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o MongoMIResourceMongoMIRoleDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MongoMIResourceMongoMIRoleDefinitionOutput{})
}
