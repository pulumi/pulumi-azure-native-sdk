// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the properties of an existing Azure Cosmos DB Gremlin Role Definition with the given Id.
//
// Uses Azure REST API version 2025-05-01-preview.
func LookupGremlinResourceGremlinRoleDefinition(ctx *pulumi.Context, args *LookupGremlinResourceGremlinRoleDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupGremlinResourceGremlinRoleDefinitionResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupGremlinResourceGremlinRoleDefinitionResult
	err := ctx.Invoke("azure-native:cosmosdb:getGremlinResourceGremlinRoleDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGremlinResourceGremlinRoleDefinitionArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Definition.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// Parameters to create and update an Azure Cosmos DB Gremlin Role Definition.
type LookupGremlinResourceGremlinRoleDefinitionResult struct {
	// A set of fully qualified Scopes at or below which Gremlin Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes []string `pulumi:"assignableScopes"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The set of operations allowed through this Role Definition.
	Permissions []PermissionResponse `pulumi:"permissions"`
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName *string `pulumi:"roleName"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupGremlinResourceGremlinRoleDefinitionOutput(ctx *pulumi.Context, args LookupGremlinResourceGremlinRoleDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupGremlinResourceGremlinRoleDefinitionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGremlinResourceGremlinRoleDefinitionResultOutput, error) {
			args := v.(LookupGremlinResourceGremlinRoleDefinitionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:cosmosdb:getGremlinResourceGremlinRoleDefinition", args, LookupGremlinResourceGremlinRoleDefinitionResultOutput{}, options).(LookupGremlinResourceGremlinRoleDefinitionResultOutput), nil
		}).(LookupGremlinResourceGremlinRoleDefinitionResultOutput)
}

type LookupGremlinResourceGremlinRoleDefinitionOutputArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The GUID for the Role Definition.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
}

func (LookupGremlinResourceGremlinRoleDefinitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGremlinResourceGremlinRoleDefinitionArgs)(nil)).Elem()
}

// Parameters to create and update an Azure Cosmos DB Gremlin Role Definition.
type LookupGremlinResourceGremlinRoleDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupGremlinResourceGremlinRoleDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGremlinResourceGremlinRoleDefinitionResult)(nil)).Elem()
}

func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) ToLookupGremlinResourceGremlinRoleDefinitionResultOutput() LookupGremlinResourceGremlinRoleDefinitionResultOutput {
	return o
}

func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) ToLookupGremlinResourceGremlinRoleDefinitionResultOutputWithContext(ctx context.Context) LookupGremlinResourceGremlinRoleDefinitionResultOutput {
	return o
}

// A set of fully qualified Scopes at or below which Gremlin Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) []string { return v.AssignableScopes }).(pulumi.StringArrayOutput)
}

// The Azure API version of the resource.
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The set of operations allowed through this Role Definition.
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) Permissions() PermissionResponseArrayOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) []PermissionResponse { return v.Permissions }).(PermissionResponseArrayOutput)
}

// A user-friendly name for the Role Definition. Must be unique for the database account.
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupGremlinResourceGremlinRoleDefinitionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGremlinResourceGremlinRoleDefinitionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGremlinResourceGremlinRoleDefinitionResultOutput{})
}
