// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Parameters to create and update an Azure Cosmos DB Table Role Assignment.
// Azure REST API version: 2024-12-01-preview.
type TableResourceTableRoleAssignment struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Table Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId pulumi.StringPtrOutput `pulumi:"principalId"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId pulumi.StringPtrOutput `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this Table Role Assignment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTableResourceTableRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewTableResourceTableRoleAssignment(ctx *pulumi.Context,
	name string, args *TableResourceTableRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*TableResourceTableRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cosmosdb/v20241201preview:TableResourceTableRoleAssignment"),
		},
		{
			Type: pulumi.String("azure-native:documentdb/v20241201preview:TableResourceTableRoleAssignment"),
		},
		{
			Type: pulumi.String("azure-native:documentdb:TableResourceTableRoleAssignment"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TableResourceTableRoleAssignment
	err := ctx.RegisterResource("azure-native:cosmosdb:TableResourceTableRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableResourceTableRoleAssignment gets an existing TableResourceTableRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableResourceTableRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableResourceTableRoleAssignmentState, opts ...pulumi.ResourceOption) (*TableResourceTableRoleAssignment, error) {
	var resource TableResourceTableRoleAssignment
	err := ctx.ReadResource("azure-native:cosmosdb:TableResourceTableRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableResourceTableRoleAssignment resources.
type tableResourceTableRoleAssignmentState struct {
}

type TableResourceTableRoleAssignmentState struct {
}

func (TableResourceTableRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableResourceTableRoleAssignmentState)(nil)).Elem()
}

type tableResourceTableRoleAssignmentArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Table Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId *string `pulumi:"principalId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Assignment.
	RoleAssignmentId *string `pulumi:"roleAssignmentId"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this Table Role Assignment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a TableResourceTableRoleAssignment resource.
type TableResourceTableRoleAssignmentArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Table Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The GUID for the Role Assignment.
	RoleAssignmentId pulumi.StringPtrInput
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId pulumi.StringPtrInput
	// The data plane resource path for which access is being granted through this Table Role Assignment.
	Scope pulumi.StringPtrInput
}

func (TableResourceTableRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableResourceTableRoleAssignmentArgs)(nil)).Elem()
}

type TableResourceTableRoleAssignmentInput interface {
	pulumi.Input

	ToTableResourceTableRoleAssignmentOutput() TableResourceTableRoleAssignmentOutput
	ToTableResourceTableRoleAssignmentOutputWithContext(ctx context.Context) TableResourceTableRoleAssignmentOutput
}

func (*TableResourceTableRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResourceTableRoleAssignment)(nil)).Elem()
}

func (i *TableResourceTableRoleAssignment) ToTableResourceTableRoleAssignmentOutput() TableResourceTableRoleAssignmentOutput {
	return i.ToTableResourceTableRoleAssignmentOutputWithContext(context.Background())
}

func (i *TableResourceTableRoleAssignment) ToTableResourceTableRoleAssignmentOutputWithContext(ctx context.Context) TableResourceTableRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourceTableRoleAssignmentOutput)
}

type TableResourceTableRoleAssignmentOutput struct{ *pulumi.OutputState }

func (TableResourceTableRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResourceTableRoleAssignment)(nil)).Elem()
}

func (o TableResourceTableRoleAssignmentOutput) ToTableResourceTableRoleAssignmentOutput() TableResourceTableRoleAssignmentOutput {
	return o
}

func (o TableResourceTableRoleAssignmentOutput) ToTableResourceTableRoleAssignmentOutputWithContext(ctx context.Context) TableResourceTableRoleAssignmentOutput {
	return o
}

// The Azure API version of the resource.
func (o TableResourceTableRoleAssignmentOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o TableResourceTableRoleAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Table Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
func (o TableResourceTableRoleAssignmentOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) pulumi.StringPtrOutput { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Provisioning state of the resource.
func (o TableResourceTableRoleAssignmentOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The unique identifier for the associated Role Definition.
func (o TableResourceTableRoleAssignmentOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) pulumi.StringPtrOutput { return v.RoleDefinitionId }).(pulumi.StringPtrOutput)
}

// The data plane resource path for which access is being granted through this Table Role Assignment.
func (o TableResourceTableRoleAssignmentOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o TableResourceTableRoleAssignmentOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o TableResourceTableRoleAssignmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TableResourceTableRoleAssignment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TableResourceTableRoleAssignmentOutput{})
}
