// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Parameters to create and update an Azure Cosmos DB MongoMI Role Assignment.
//
// Uses Azure REST API version 2025-05-01-preview.
type MongoMIResourceMongoMIRoleAssignment struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this MongoMI Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId pulumi.StringPtrOutput `pulumi:"principalId"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId pulumi.StringPtrOutput `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this MongoMI Role Assignment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMongoMIResourceMongoMIRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewMongoMIResourceMongoMIRoleAssignment(ctx *pulumi.Context,
	name string, args *MongoMIResourceMongoMIRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*MongoMIResourceMongoMIRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cosmosdb/v20250501preview:MongoMIResourceMongoMIRoleAssignment"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MongoMIResourceMongoMIRoleAssignment
	err := ctx.RegisterResource("azure-native:cosmosdb:MongoMIResourceMongoMIRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoMIResourceMongoMIRoleAssignment gets an existing MongoMIResourceMongoMIRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoMIResourceMongoMIRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoMIResourceMongoMIRoleAssignmentState, opts ...pulumi.ResourceOption) (*MongoMIResourceMongoMIRoleAssignment, error) {
	var resource MongoMIResourceMongoMIRoleAssignment
	err := ctx.ReadResource("azure-native:cosmosdb:MongoMIResourceMongoMIRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoMIResourceMongoMIRoleAssignment resources.
type mongoMIResourceMongoMIRoleAssignmentState struct {
}

type MongoMIResourceMongoMIRoleAssignmentState struct {
}

func (MongoMIResourceMongoMIRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoMIResourceMongoMIRoleAssignmentState)(nil)).Elem()
}

type mongoMIResourceMongoMIRoleAssignmentArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this MongoMI Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId *string `pulumi:"principalId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Assignment.
	RoleAssignmentId *string `pulumi:"roleAssignmentId"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this MongoMI Role Assignment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a MongoMIResourceMongoMIRoleAssignment resource.
type MongoMIResourceMongoMIRoleAssignmentArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this MongoMI Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The GUID for the Role Assignment.
	RoleAssignmentId pulumi.StringPtrInput
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId pulumi.StringPtrInput
	// The data plane resource path for which access is being granted through this MongoMI Role Assignment.
	Scope pulumi.StringPtrInput
}

func (MongoMIResourceMongoMIRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoMIResourceMongoMIRoleAssignmentArgs)(nil)).Elem()
}

type MongoMIResourceMongoMIRoleAssignmentInput interface {
	pulumi.Input

	ToMongoMIResourceMongoMIRoleAssignmentOutput() MongoMIResourceMongoMIRoleAssignmentOutput
	ToMongoMIResourceMongoMIRoleAssignmentOutputWithContext(ctx context.Context) MongoMIResourceMongoMIRoleAssignmentOutput
}

func (*MongoMIResourceMongoMIRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoMIResourceMongoMIRoleAssignment)(nil)).Elem()
}

func (i *MongoMIResourceMongoMIRoleAssignment) ToMongoMIResourceMongoMIRoleAssignmentOutput() MongoMIResourceMongoMIRoleAssignmentOutput {
	return i.ToMongoMIResourceMongoMIRoleAssignmentOutputWithContext(context.Background())
}

func (i *MongoMIResourceMongoMIRoleAssignment) ToMongoMIResourceMongoMIRoleAssignmentOutputWithContext(ctx context.Context) MongoMIResourceMongoMIRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoMIResourceMongoMIRoleAssignmentOutput)
}

type MongoMIResourceMongoMIRoleAssignmentOutput struct{ *pulumi.OutputState }

func (MongoMIResourceMongoMIRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoMIResourceMongoMIRoleAssignment)(nil)).Elem()
}

func (o MongoMIResourceMongoMIRoleAssignmentOutput) ToMongoMIResourceMongoMIRoleAssignmentOutput() MongoMIResourceMongoMIRoleAssignmentOutput {
	return o
}

func (o MongoMIResourceMongoMIRoleAssignmentOutput) ToMongoMIResourceMongoMIRoleAssignmentOutputWithContext(ctx context.Context) MongoMIResourceMongoMIRoleAssignmentOutput {
	return o
}

// The Azure API version of the resource.
func (o MongoMIResourceMongoMIRoleAssignmentOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o MongoMIResourceMongoMIRoleAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this MongoMI Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
func (o MongoMIResourceMongoMIRoleAssignmentOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) pulumi.StringPtrOutput { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Provisioning state of the resource.
func (o MongoMIResourceMongoMIRoleAssignmentOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The unique identifier for the associated Role Definition.
func (o MongoMIResourceMongoMIRoleAssignmentOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) pulumi.StringPtrOutput { return v.RoleDefinitionId }).(pulumi.StringPtrOutput)
}

// The data plane resource path for which access is being granted through this MongoMI Role Assignment.
func (o MongoMIResourceMongoMIRoleAssignmentOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o MongoMIResourceMongoMIRoleAssignmentOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o MongoMIResourceMongoMIRoleAssignmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoMIResourceMongoMIRoleAssignment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MongoMIResourceMongoMIRoleAssignmentOutput{})
}
