// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package durabletask

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Task Hub resource belonging to the scheduler
//
// Uses Azure REST API version 2024-10-01-preview.
type TaskHub struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties TaskHubPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTaskHub registers a new resource with the given unique name, arguments, and options.
func NewTaskHub(ctx *pulumi.Context,
	name string, args *TaskHubArgs, opts ...pulumi.ResourceOption) (*TaskHub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SchedulerName == nil {
		return nil, errors.New("invalid value for required argument 'SchedulerName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:durabletask/v20241001preview:TaskHub"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TaskHub
	err := ctx.RegisterResource("azure-native:durabletask:TaskHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskHub gets an existing TaskHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskHubState, opts ...pulumi.ResourceOption) (*TaskHub, error) {
	var resource TaskHub
	err := ctx.ReadResource("azure-native:durabletask:TaskHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskHub resources.
type taskHubState struct {
}

type TaskHubState struct {
}

func (TaskHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskHubState)(nil)).Elem()
}

type taskHubArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Scheduler
	SchedulerName string `pulumi:"schedulerName"`
	// The name of the TaskHub
	TaskHubName *string `pulumi:"taskHubName"`
}

// The set of arguments for constructing a TaskHub resource.
type TaskHubArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the Scheduler
	SchedulerName pulumi.StringInput
	// The name of the TaskHub
	TaskHubName pulumi.StringPtrInput
}

func (TaskHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskHubArgs)(nil)).Elem()
}

type TaskHubInput interface {
	pulumi.Input

	ToTaskHubOutput() TaskHubOutput
	ToTaskHubOutputWithContext(ctx context.Context) TaskHubOutput
}

func (*TaskHub) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskHub)(nil)).Elem()
}

func (i *TaskHub) ToTaskHubOutput() TaskHubOutput {
	return i.ToTaskHubOutputWithContext(context.Background())
}

func (i *TaskHub) ToTaskHubOutputWithContext(ctx context.Context) TaskHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskHubOutput)
}

type TaskHubOutput struct{ *pulumi.OutputState }

func (TaskHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskHub)(nil)).Elem()
}

func (o TaskHubOutput) ToTaskHubOutput() TaskHubOutput {
	return o
}

func (o TaskHubOutput) ToTaskHubOutputWithContext(ctx context.Context) TaskHubOutput {
	return o
}

// The name of the resource
func (o TaskHubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskHub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o TaskHubOutput) Properties() TaskHubPropertiesResponseOutput {
	return o.ApplyT(func(v *TaskHub) TaskHubPropertiesResponseOutput { return v.Properties }).(TaskHubPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o TaskHubOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *TaskHub) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o TaskHubOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskHub) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TaskHubOutput{})
}
