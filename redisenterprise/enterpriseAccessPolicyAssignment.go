// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redisenterprise

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the access policy assignment of Redis Enterprise database
// Azure REST API version: 2024-09-01-preview.
type EnterpriseAccessPolicyAssignment struct {
	pulumi.CustomResourceState

	// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
	AccessPolicyName pulumi.StringOutput `pulumi:"accessPolicyName"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Current provisioning status of the access policy assignment.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The user associated with the access policy.
	User AccessPolicyAssignmentPropertiesResponseUserOutput `pulumi:"user"`
}

// NewEnterpriseAccessPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseAccessPolicyAssignment(ctx *pulumi.Context,
	name string, args *EnterpriseAccessPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*EnterpriseAccessPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'AccessPolicyName'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cache/v20240901preview:AccessPolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240901preview:EnterpriseAccessPolicyAssignment"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnterpriseAccessPolicyAssignment
	err := ctx.RegisterResource("azure-native:redisenterprise:EnterpriseAccessPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseAccessPolicyAssignment gets an existing EnterpriseAccessPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseAccessPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseAccessPolicyAssignmentState, opts ...pulumi.ResourceOption) (*EnterpriseAccessPolicyAssignment, error) {
	var resource EnterpriseAccessPolicyAssignment
	err := ctx.ReadResource("azure-native:redisenterprise:EnterpriseAccessPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseAccessPolicyAssignment resources.
type enterpriseAccessPolicyAssignmentState struct {
}

type EnterpriseAccessPolicyAssignmentState struct {
}

func (EnterpriseAccessPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseAccessPolicyAssignmentState)(nil)).Elem()
}

type enterpriseAccessPolicyAssignmentArgs struct {
	// The name of the Redis Enterprise database access policy assignment.
	AccessPolicyAssignmentName *string `pulumi:"accessPolicyAssignmentName"`
	// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
	AccessPolicyName string `pulumi:"accessPolicyName"`
	// The name of the Redis Enterprise cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the Redis Enterprise database.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The user associated with the access policy.
	User AccessPolicyAssignmentPropertiesUser `pulumi:"user"`
}

// The set of arguments for constructing a EnterpriseAccessPolicyAssignment resource.
type EnterpriseAccessPolicyAssignmentArgs struct {
	// The name of the Redis Enterprise database access policy assignment.
	AccessPolicyAssignmentName pulumi.StringPtrInput
	// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
	AccessPolicyName pulumi.StringInput
	// The name of the Redis Enterprise cluster.
	ClusterName pulumi.StringInput
	// The name of the Redis Enterprise database.
	DatabaseName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The user associated with the access policy.
	User AccessPolicyAssignmentPropertiesUserInput
}

func (EnterpriseAccessPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseAccessPolicyAssignmentArgs)(nil)).Elem()
}

type EnterpriseAccessPolicyAssignmentInput interface {
	pulumi.Input

	ToEnterpriseAccessPolicyAssignmentOutput() EnterpriseAccessPolicyAssignmentOutput
	ToEnterpriseAccessPolicyAssignmentOutputWithContext(ctx context.Context) EnterpriseAccessPolicyAssignmentOutput
}

func (*EnterpriseAccessPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseAccessPolicyAssignment)(nil)).Elem()
}

func (i *EnterpriseAccessPolicyAssignment) ToEnterpriseAccessPolicyAssignmentOutput() EnterpriseAccessPolicyAssignmentOutput {
	return i.ToEnterpriseAccessPolicyAssignmentOutputWithContext(context.Background())
}

func (i *EnterpriseAccessPolicyAssignment) ToEnterpriseAccessPolicyAssignmentOutputWithContext(ctx context.Context) EnterpriseAccessPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseAccessPolicyAssignmentOutput)
}

type EnterpriseAccessPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (EnterpriseAccessPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseAccessPolicyAssignment)(nil)).Elem()
}

func (o EnterpriseAccessPolicyAssignmentOutput) ToEnterpriseAccessPolicyAssignmentOutput() EnterpriseAccessPolicyAssignmentOutput {
	return o
}

func (o EnterpriseAccessPolicyAssignmentOutput) ToEnterpriseAccessPolicyAssignmentOutputWithContext(ctx context.Context) EnterpriseAccessPolicyAssignmentOutput {
	return o
}

// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
func (o EnterpriseAccessPolicyAssignmentOutput) AccessPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseAccessPolicyAssignment) pulumi.StringOutput { return v.AccessPolicyName }).(pulumi.StringOutput)
}

// The Azure API version of the resource.
func (o EnterpriseAccessPolicyAssignmentOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseAccessPolicyAssignment) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o EnterpriseAccessPolicyAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseAccessPolicyAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Current provisioning status of the access policy assignment.
func (o EnterpriseAccessPolicyAssignmentOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseAccessPolicyAssignment) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EnterpriseAccessPolicyAssignmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseAccessPolicyAssignment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The user associated with the access policy.
func (o EnterpriseAccessPolicyAssignmentOutput) User() AccessPolicyAssignmentPropertiesResponseUserOutput {
	return o.ApplyT(func(v *EnterpriseAccessPolicyAssignment) AccessPolicyAssignmentPropertiesResponseUserOutput {
		return v.User
	}).(AccessPolicyAssignmentPropertiesResponseUserOutput)
}

func init() {
	pulumi.RegisterOutputType(EnterpriseAccessPolicyAssignmentOutput{})
}
