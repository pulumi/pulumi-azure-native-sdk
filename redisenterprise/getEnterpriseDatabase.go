// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redisenterprise

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a database in a RedisEnterprise cluster.
// Azure REST API version: 2024-03-01-preview.
func LookupEnterpriseDatabase(ctx *pulumi.Context, args *LookupEnterpriseDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupEnterpriseDatabaseResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupEnterpriseDatabaseResult
	err := ctx.Invoke("azure-native:redisenterprise:getEnterpriseDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEnterpriseDatabaseArgs struct {
	// The name of the Redis Enterprise cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the Redis Enterprise database.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Describes a database on the RedisEnterprise cluster
type LookupEnterpriseDatabaseResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol *string `pulumi:"clientProtocol"`
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy *string `pulumi:"clusteringPolicy"`
	// Option to defer upgrade when newest version is released - default is NotDeferred. Learn more:  https://aka.ms/redisversionupgrade
	DeferUpgrade *string `pulumi:"deferUpgrade"`
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Optional set of properties to configure geo replication for this database.
	GeoReplication *DatabasePropertiesResponseGeoReplication `pulumi:"geoReplication"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules []ModuleResponse `pulumi:"modules"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Persistence settings
	Persistence *PersistenceResponse `pulumi:"persistence"`
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port *int `pulumi:"port"`
	// Current provisioning status of the database
	ProvisioningState string `pulumi:"provisioningState"`
	// Version of Redis the database is running on, e.g. '6.0'
	RedisVersion string `pulumi:"redisVersion"`
	// Current resource status of the database
	ResourceState string `pulumi:"resourceState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupEnterpriseDatabaseOutput(ctx *pulumi.Context, args LookupEnterpriseDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupEnterpriseDatabaseResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEnterpriseDatabaseResultOutput, error) {
			args := v.(LookupEnterpriseDatabaseArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:redisenterprise:getEnterpriseDatabase", args, LookupEnterpriseDatabaseResultOutput{}, options).(LookupEnterpriseDatabaseResultOutput), nil
		}).(LookupEnterpriseDatabaseResultOutput)
}

type LookupEnterpriseDatabaseOutputArgs struct {
	// The name of the Redis Enterprise cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the Redis Enterprise database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupEnterpriseDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnterpriseDatabaseArgs)(nil)).Elem()
}

// Describes a database on the RedisEnterprise cluster
type LookupEnterpriseDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupEnterpriseDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnterpriseDatabaseResult)(nil)).Elem()
}

func (o LookupEnterpriseDatabaseResultOutput) ToLookupEnterpriseDatabaseResultOutput() LookupEnterpriseDatabaseResultOutput {
	return o
}

func (o LookupEnterpriseDatabaseResultOutput) ToLookupEnterpriseDatabaseResultOutputWithContext(ctx context.Context) LookupEnterpriseDatabaseResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupEnterpriseDatabaseResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
func (o LookupEnterpriseDatabaseResultOutput) ClientProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) *string { return v.ClientProtocol }).(pulumi.StringPtrOutput)
}

// Clustering policy - default is OSSCluster. Specified at create time.
func (o LookupEnterpriseDatabaseResultOutput) ClusteringPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) *string { return v.ClusteringPolicy }).(pulumi.StringPtrOutput)
}

// Option to defer upgrade when newest version is released - default is NotDeferred. Learn more:  https://aka.ms/redisversionupgrade
func (o LookupEnterpriseDatabaseResultOutput) DeferUpgrade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) *string { return v.DeferUpgrade }).(pulumi.StringPtrOutput)
}

// Redis eviction policy - default is VolatileLRU
func (o LookupEnterpriseDatabaseResultOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) *string { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Optional set of properties to configure geo replication for this database.
func (o LookupEnterpriseDatabaseResultOutput) GeoReplication() DatabasePropertiesResponseGeoReplicationPtrOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) *DatabasePropertiesResponseGeoReplication {
		return v.GeoReplication
	}).(DatabasePropertiesResponseGeoReplicationPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupEnterpriseDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Optional set of redis modules to enable in this database - modules can only be added at creation time.
func (o LookupEnterpriseDatabaseResultOutput) Modules() ModuleResponseArrayOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) []ModuleResponse { return v.Modules }).(ModuleResponseArrayOutput)
}

// The name of the resource
func (o LookupEnterpriseDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// Persistence settings
func (o LookupEnterpriseDatabaseResultOutput) Persistence() PersistenceResponsePtrOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) *PersistenceResponse { return v.Persistence }).(PersistenceResponsePtrOutput)
}

// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
func (o LookupEnterpriseDatabaseResultOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Current provisioning status of the database
func (o LookupEnterpriseDatabaseResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Version of Redis the database is running on, e.g. '6.0'
func (o LookupEnterpriseDatabaseResultOutput) RedisVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) string { return v.RedisVersion }).(pulumi.StringOutput)
}

// Current resource status of the database
func (o LookupEnterpriseDatabaseResultOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) string { return v.ResourceState }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupEnterpriseDatabaseResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnterpriseDatabaseResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnterpriseDatabaseResultOutput{})
}
