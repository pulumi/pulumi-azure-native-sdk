// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redisenterprise

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the RedisEnterprise cluster
//
// Uses Azure REST API version 2024-03-01-preview.
//
// Other available API versions: 2020-10-01-preview, 2021-02-01-preview, 2021-03-01, 2021-08-01, 2022-01-01, 2022-11-01-preview, 2023-03-01-preview, 2023-07-01, 2023-08-01-preview, 2023-10-01-preview, 2023-11-01, 2024-02-01, 2024-06-01-preview, 2024-09-01-preview, 2024-10-01, 2025-04-01, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native redisenterprise [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type RedisEnterprise struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Encryption-at-rest configuration for the cluster.
	Encryption ClusterPropertiesResponseEncryptionPtrOutput `pulumi:"encryption"`
	// DNS name of the cluster endpoint
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// The identity of the resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The minimum TLS version for the cluster to support, e.g. '1.2'
	MinimumTlsVersion pulumi.StringPtrOutput `pulumi:"minimumTlsVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// List of private endpoint connections associated with the specified RedisEnterprise cluster
	PrivateEndpointConnections PrivateEndpointConnectionResponseArrayOutput `pulumi:"privateEndpointConnections"`
	// Current provisioning status of the cluster
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Version of redis the cluster supports, e.g. '6'
	RedisVersion pulumi.StringOutput `pulumi:"redisVersion"`
	// Current resource status of the cluster
	ResourceState pulumi.StringOutput `pulumi:"resourceState"`
	// The SKU to create, which affects price, performance, and features.
	Sku SkuResponseOutput `pulumi:"sku"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The Availability Zones where this cluster will be deployed.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewRedisEnterprise registers a new resource with the given unique name, arguments, and options.
func NewRedisEnterprise(ctx *pulumi.Context,
	name string, args *RedisEnterpriseArgs, opts ...pulumi.ResourceOption) (*RedisEnterprise, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cache/v20201001preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20230301preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20230701:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20230801preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20231001preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20231101:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240201:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240301preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240601preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240901preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20241001:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:cache:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20201001preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20210201preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20210301:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20210801:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20220101:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20221101preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20230301preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20230701:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20230801preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20231001preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20231101:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240201:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240301preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240601preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240901preview:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20241001:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20250401:RedisEnterprise"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20250501preview:RedisEnterprise"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RedisEnterprise
	err := ctx.RegisterResource("azure-native:redisenterprise:RedisEnterprise", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisEnterprise gets an existing RedisEnterprise resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisEnterprise(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisEnterpriseState, opts ...pulumi.ResourceOption) (*RedisEnterprise, error) {
	var resource RedisEnterprise
	err := ctx.ReadResource("azure-native:redisenterprise:RedisEnterprise", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisEnterprise resources.
type redisEnterpriseState struct {
}

type RedisEnterpriseState struct {
}

func (RedisEnterpriseState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisEnterpriseState)(nil)).Elem()
}

type redisEnterpriseArgs struct {
	// The name of the Redis Enterprise cluster.
	ClusterName *string `pulumi:"clusterName"`
	// Encryption-at-rest configuration for the cluster.
	Encryption *ClusterPropertiesEncryption `pulumi:"encryption"`
	// The identity of the resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The minimum TLS version for the cluster to support, e.g. '1.2'
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU to create, which affects price, performance, and features.
	Sku Sku `pulumi:"sku"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The Availability Zones where this cluster will be deployed.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a RedisEnterprise resource.
type RedisEnterpriseArgs struct {
	// The name of the Redis Enterprise cluster.
	ClusterName pulumi.StringPtrInput
	// Encryption-at-rest configuration for the cluster.
	Encryption ClusterPropertiesEncryptionPtrInput
	// The identity of the resource.
	Identity ManagedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The minimum TLS version for the cluster to support, e.g. '1.2'
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The SKU to create, which affects price, performance, and features.
	Sku SkuInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The Availability Zones where this cluster will be deployed.
	Zones pulumi.StringArrayInput
}

func (RedisEnterpriseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisEnterpriseArgs)(nil)).Elem()
}

type RedisEnterpriseInput interface {
	pulumi.Input

	ToRedisEnterpriseOutput() RedisEnterpriseOutput
	ToRedisEnterpriseOutputWithContext(ctx context.Context) RedisEnterpriseOutput
}

func (*RedisEnterprise) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisEnterprise)(nil)).Elem()
}

func (i *RedisEnterprise) ToRedisEnterpriseOutput() RedisEnterpriseOutput {
	return i.ToRedisEnterpriseOutputWithContext(context.Background())
}

func (i *RedisEnterprise) ToRedisEnterpriseOutputWithContext(ctx context.Context) RedisEnterpriseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisEnterpriseOutput)
}

type RedisEnterpriseOutput struct{ *pulumi.OutputState }

func (RedisEnterpriseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisEnterprise)(nil)).Elem()
}

func (o RedisEnterpriseOutput) ToRedisEnterpriseOutput() RedisEnterpriseOutput {
	return o
}

func (o RedisEnterpriseOutput) ToRedisEnterpriseOutputWithContext(ctx context.Context) RedisEnterpriseOutput {
	return o
}

// The Azure API version of the resource.
func (o RedisEnterpriseOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Encryption-at-rest configuration for the cluster.
func (o RedisEnterpriseOutput) Encryption() ClusterPropertiesResponseEncryptionPtrOutput {
	return o.ApplyT(func(v *RedisEnterprise) ClusterPropertiesResponseEncryptionPtrOutput { return v.Encryption }).(ClusterPropertiesResponseEncryptionPtrOutput)
}

// DNS name of the cluster endpoint
func (o RedisEnterpriseOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// The identity of the resource.
func (o RedisEnterpriseOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *RedisEnterprise) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o RedisEnterpriseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The minimum TLS version for the cluster to support, e.g. '1.2'
func (o RedisEnterpriseOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringPtrOutput { return v.MinimumTlsVersion }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o RedisEnterpriseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of private endpoint connections associated with the specified RedisEnterprise cluster
func (o RedisEnterpriseOutput) PrivateEndpointConnections() PrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v *RedisEnterprise) PrivateEndpointConnectionResponseArrayOutput {
		return v.PrivateEndpointConnections
	}).(PrivateEndpointConnectionResponseArrayOutput)
}

// Current provisioning status of the cluster
func (o RedisEnterpriseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Version of redis the cluster supports, e.g. '6'
func (o RedisEnterpriseOutput) RedisVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.RedisVersion }).(pulumi.StringOutput)
}

// Current resource status of the cluster
func (o RedisEnterpriseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.ResourceState }).(pulumi.StringOutput)
}

// The SKU to create, which affects price, performance, and features.
func (o RedisEnterpriseOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v *RedisEnterprise) SkuResponseOutput { return v.Sku }).(SkuResponseOutput)
}

// Resource tags.
func (o RedisEnterpriseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o RedisEnterpriseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The Availability Zones where this cluster will be deployed.
func (o RedisEnterpriseOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisEnterprise) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(RedisEnterpriseOutput{})
}
