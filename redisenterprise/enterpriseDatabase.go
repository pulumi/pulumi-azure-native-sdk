// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redisenterprise

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a database on the RedisEnterprise cluster
// Azure REST API version: 2024-03-01-preview.
type EnterpriseDatabase struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol pulumi.StringPtrOutput `pulumi:"clientProtocol"`
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy pulumi.StringPtrOutput `pulumi:"clusteringPolicy"`
	// Option to defer upgrade when newest version is released - default is NotDeferred. Learn more:  https://aka.ms/redisversionupgrade
	DeferUpgrade pulumi.StringPtrOutput `pulumi:"deferUpgrade"`
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// Optional set of properties to configure geo replication for this database.
	GeoReplication DatabasePropertiesResponseGeoReplicationPtrOutput `pulumi:"geoReplication"`
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules ModuleResponseArrayOutput `pulumi:"modules"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Persistence settings
	Persistence PersistenceResponsePtrOutput `pulumi:"persistence"`
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Current provisioning status of the database
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Version of Redis the database is running on, e.g. '6.0'
	RedisVersion pulumi.StringOutput `pulumi:"redisVersion"`
	// Current resource status of the database
	ResourceState pulumi.StringOutput `pulumi:"resourceState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEnterpriseDatabase registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseDatabase(ctx *pulumi.Context,
	name string, args *EnterpriseDatabaseArgs, opts ...pulumi.ResourceOption) (*EnterpriseDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cache/v20230301preview:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20230701:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20230801preview:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20231001preview:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20231101:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240201:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240301preview:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240601preview:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20240901preview:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20241001:Database"),
		},
		{
			Type: pulumi.String("azure-native:cache:Database"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20201001preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20210201preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20210301:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20210801:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20220101:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20221101preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20230301preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20230701:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20230801preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20231001preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20231101:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240201:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240301preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240601preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240901preview:EnterpriseDatabase"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20241001:EnterpriseDatabase"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnterpriseDatabase
	err := ctx.RegisterResource("azure-native:redisenterprise:EnterpriseDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseDatabase gets an existing EnterpriseDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseDatabaseState, opts ...pulumi.ResourceOption) (*EnterpriseDatabase, error) {
	var resource EnterpriseDatabase
	err := ctx.ReadResource("azure-native:redisenterprise:EnterpriseDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseDatabase resources.
type enterpriseDatabaseState struct {
}

type EnterpriseDatabaseState struct {
}

func (EnterpriseDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseDatabaseState)(nil)).Elem()
}

type enterpriseDatabaseArgs struct {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol *string `pulumi:"clientProtocol"`
	// The name of the Redis Enterprise cluster.
	ClusterName string `pulumi:"clusterName"`
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy *string `pulumi:"clusteringPolicy"`
	// The name of the Redis Enterprise database.
	DatabaseName *string `pulumi:"databaseName"`
	// Option to defer upgrade when newest version is released - default is NotDeferred. Learn more:  https://aka.ms/redisversionupgrade
	DeferUpgrade *string `pulumi:"deferUpgrade"`
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Optional set of properties to configure geo replication for this database.
	GeoReplication *DatabasePropertiesGeoReplication `pulumi:"geoReplication"`
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules []Module `pulumi:"modules"`
	// Persistence settings
	Persistence *Persistence `pulumi:"persistence"`
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port *int `pulumi:"port"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a EnterpriseDatabase resource.
type EnterpriseDatabaseArgs struct {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol pulumi.StringPtrInput
	// The name of the Redis Enterprise cluster.
	ClusterName pulumi.StringInput
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy pulumi.StringPtrInput
	// The name of the Redis Enterprise database.
	DatabaseName pulumi.StringPtrInput
	// Option to defer upgrade when newest version is released - default is NotDeferred. Learn more:  https://aka.ms/redisversionupgrade
	DeferUpgrade pulumi.StringPtrInput
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy pulumi.StringPtrInput
	// Optional set of properties to configure geo replication for this database.
	GeoReplication DatabasePropertiesGeoReplicationPtrInput
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules ModuleArrayInput
	// Persistence settings
	Persistence PersistencePtrInput
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port pulumi.IntPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (EnterpriseDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseDatabaseArgs)(nil)).Elem()
}

type EnterpriseDatabaseInput interface {
	pulumi.Input

	ToEnterpriseDatabaseOutput() EnterpriseDatabaseOutput
	ToEnterpriseDatabaseOutputWithContext(ctx context.Context) EnterpriseDatabaseOutput
}

func (*EnterpriseDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseDatabase)(nil)).Elem()
}

func (i *EnterpriseDatabase) ToEnterpriseDatabaseOutput() EnterpriseDatabaseOutput {
	return i.ToEnterpriseDatabaseOutputWithContext(context.Background())
}

func (i *EnterpriseDatabase) ToEnterpriseDatabaseOutputWithContext(ctx context.Context) EnterpriseDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseDatabaseOutput)
}

type EnterpriseDatabaseOutput struct{ *pulumi.OutputState }

func (EnterpriseDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseDatabase)(nil)).Elem()
}

func (o EnterpriseDatabaseOutput) ToEnterpriseDatabaseOutput() EnterpriseDatabaseOutput {
	return o
}

func (o EnterpriseDatabaseOutput) ToEnterpriseDatabaseOutputWithContext(ctx context.Context) EnterpriseDatabaseOutput {
	return o
}

// The Azure API version of the resource.
func (o EnterpriseDatabaseOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
func (o EnterpriseDatabaseOutput) ClientProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringPtrOutput { return v.ClientProtocol }).(pulumi.StringPtrOutput)
}

// Clustering policy - default is OSSCluster. Specified at create time.
func (o EnterpriseDatabaseOutput) ClusteringPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringPtrOutput { return v.ClusteringPolicy }).(pulumi.StringPtrOutput)
}

// Option to defer upgrade when newest version is released - default is NotDeferred. Learn more:  https://aka.ms/redisversionupgrade
func (o EnterpriseDatabaseOutput) DeferUpgrade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringPtrOutput { return v.DeferUpgrade }).(pulumi.StringPtrOutput)
}

// Redis eviction policy - default is VolatileLRU
func (o EnterpriseDatabaseOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringPtrOutput { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Optional set of properties to configure geo replication for this database.
func (o EnterpriseDatabaseOutput) GeoReplication() DatabasePropertiesResponseGeoReplicationPtrOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) DatabasePropertiesResponseGeoReplicationPtrOutput { return v.GeoReplication }).(DatabasePropertiesResponseGeoReplicationPtrOutput)
}

// Optional set of redis modules to enable in this database - modules can only be added at creation time.
func (o EnterpriseDatabaseOutput) Modules() ModuleResponseArrayOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) ModuleResponseArrayOutput { return v.Modules }).(ModuleResponseArrayOutput)
}

// The name of the resource
func (o EnterpriseDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Persistence settings
func (o EnterpriseDatabaseOutput) Persistence() PersistenceResponsePtrOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) PersistenceResponsePtrOutput { return v.Persistence }).(PersistenceResponsePtrOutput)
}

// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
func (o EnterpriseDatabaseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// Current provisioning status of the database
func (o EnterpriseDatabaseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Version of Redis the database is running on, e.g. '6.0'
func (o EnterpriseDatabaseOutput) RedisVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringOutput { return v.RedisVersion }).(pulumi.StringOutput)
}

// Current resource status of the database
func (o EnterpriseDatabaseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringOutput { return v.ResourceState }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EnterpriseDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EnterpriseDatabaseOutput{})
}
