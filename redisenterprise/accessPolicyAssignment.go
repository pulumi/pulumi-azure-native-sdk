// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redisenterprise

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the access policy assignment of Redis Enterprise database
//
// Uses Azure REST API version 2025-05-01-preview.
//
// Other available API versions: 2024-09-01-preview, 2025-04-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native redisenterprise [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type AccessPolicyAssignment struct {
	pulumi.CustomResourceState

	// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
	AccessPolicyName pulumi.StringOutput `pulumi:"accessPolicyName"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Current provisioning status of the access policy assignment.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The user associated with the access policy.
	User AccessPolicyAssignmentPropertiesResponseUserOutput `pulumi:"user"`
}

// NewAccessPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicyAssignment(ctx *pulumi.Context,
	name string, args *AccessPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*AccessPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'AccessPolicyName'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cache/v20240901preview:AccessPolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20240901preview:AccessPolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20250401:AccessPolicyAssignment"),
		},
		{
			Type: pulumi.String("azure-native:redisenterprise/v20250501preview:AccessPolicyAssignment"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AccessPolicyAssignment
	err := ctx.RegisterResource("azure-native:redisenterprise:AccessPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicyAssignment gets an existing AccessPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyAssignmentState, opts ...pulumi.ResourceOption) (*AccessPolicyAssignment, error) {
	var resource AccessPolicyAssignment
	err := ctx.ReadResource("azure-native:redisenterprise:AccessPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicyAssignment resources.
type accessPolicyAssignmentState struct {
}

type AccessPolicyAssignmentState struct {
}

func (AccessPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyAssignmentState)(nil)).Elem()
}

type accessPolicyAssignmentArgs struct {
	// The name of the Redis Enterprise database access policy assignment.
	AccessPolicyAssignmentName *string `pulumi:"accessPolicyAssignmentName"`
	// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
	AccessPolicyName string `pulumi:"accessPolicyName"`
	// The name of the Redis Enterprise cluster. Name must be 1-60 characters long. Allowed characters(A-Z, a-z, 0-9) and hyphen(-). There can be no leading nor trailing nor consecutive hyphens
	ClusterName string `pulumi:"clusterName"`
	// The name of the Redis Enterprise database.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The user associated with the access policy.
	User AccessPolicyAssignmentPropertiesUser `pulumi:"user"`
}

// The set of arguments for constructing a AccessPolicyAssignment resource.
type AccessPolicyAssignmentArgs struct {
	// The name of the Redis Enterprise database access policy assignment.
	AccessPolicyAssignmentName pulumi.StringPtrInput
	// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
	AccessPolicyName pulumi.StringInput
	// The name of the Redis Enterprise cluster. Name must be 1-60 characters long. Allowed characters(A-Z, a-z, 0-9) and hyphen(-). There can be no leading nor trailing nor consecutive hyphens
	ClusterName pulumi.StringInput
	// The name of the Redis Enterprise database.
	DatabaseName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The user associated with the access policy.
	User AccessPolicyAssignmentPropertiesUserInput
}

func (AccessPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyAssignmentArgs)(nil)).Elem()
}

type AccessPolicyAssignmentInput interface {
	pulumi.Input

	ToAccessPolicyAssignmentOutput() AccessPolicyAssignmentOutput
	ToAccessPolicyAssignmentOutputWithContext(ctx context.Context) AccessPolicyAssignmentOutput
}

func (*AccessPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyAssignment)(nil)).Elem()
}

func (i *AccessPolicyAssignment) ToAccessPolicyAssignmentOutput() AccessPolicyAssignmentOutput {
	return i.ToAccessPolicyAssignmentOutputWithContext(context.Background())
}

func (i *AccessPolicyAssignment) ToAccessPolicyAssignmentOutputWithContext(ctx context.Context) AccessPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyAssignmentOutput)
}

type AccessPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (AccessPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyAssignment)(nil)).Elem()
}

func (o AccessPolicyAssignmentOutput) ToAccessPolicyAssignmentOutput() AccessPolicyAssignmentOutput {
	return o
}

func (o AccessPolicyAssignmentOutput) ToAccessPolicyAssignmentOutputWithContext(ctx context.Context) AccessPolicyAssignmentOutput {
	return o
}

// Name of access policy under specific access policy assignment. Only "default" policy is supported for now.
func (o AccessPolicyAssignmentOutput) AccessPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) pulumi.StringOutput { return v.AccessPolicyName }).(pulumi.StringOutput)
}

// The Azure API version of the resource.
func (o AccessPolicyAssignmentOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o AccessPolicyAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Current provisioning status of the access policy assignment.
func (o AccessPolicyAssignmentOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o AccessPolicyAssignmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The user associated with the access policy.
func (o AccessPolicyAssignmentOutput) User() AccessPolicyAssignmentPropertiesResponseUserOutput {
	return o.ApplyT(func(v *AccessPolicyAssignment) AccessPolicyAssignmentPropertiesResponseUserOutput { return v.User }).(AccessPolicyAssignmentPropertiesResponseUserOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessPolicyAssignmentOutput{})
}
