// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The participant property reference.
type ParticipantPropertyReference struct {
	// The interaction property that maps to the profile property.
	InteractionPropertyName string `pulumi:"interactionPropertyName"`
	// The profile property that maps to the interaction property.
	ProfilePropertyName string `pulumi:"profilePropertyName"`
}

// ParticipantPropertyReferenceInput is an input type that accepts ParticipantPropertyReferenceArgs and ParticipantPropertyReferenceOutput values.
// You can construct a concrete instance of `ParticipantPropertyReferenceInput` via:
//
//	ParticipantPropertyReferenceArgs{...}
type ParticipantPropertyReferenceInput interface {
	pulumi.Input

	ToParticipantPropertyReferenceOutput() ParticipantPropertyReferenceOutput
	ToParticipantPropertyReferenceOutputWithContext(context.Context) ParticipantPropertyReferenceOutput
}

// The participant property reference.
type ParticipantPropertyReferenceArgs struct {
	// The interaction property that maps to the profile property.
	InteractionPropertyName pulumi.StringInput `pulumi:"interactionPropertyName"`
	// The profile property that maps to the interaction property.
	ProfilePropertyName pulumi.StringInput `pulumi:"profilePropertyName"`
}

func (ParticipantPropertyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantPropertyReference)(nil)).Elem()
}

func (i ParticipantPropertyReferenceArgs) ToParticipantPropertyReferenceOutput() ParticipantPropertyReferenceOutput {
	return i.ToParticipantPropertyReferenceOutputWithContext(context.Background())
}

func (i ParticipantPropertyReferenceArgs) ToParticipantPropertyReferenceOutputWithContext(ctx context.Context) ParticipantPropertyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantPropertyReferenceOutput)
}

// ParticipantPropertyReferenceArrayInput is an input type that accepts ParticipantPropertyReferenceArray and ParticipantPropertyReferenceArrayOutput values.
// You can construct a concrete instance of `ParticipantPropertyReferenceArrayInput` via:
//
//	ParticipantPropertyReferenceArray{ ParticipantPropertyReferenceArgs{...} }
type ParticipantPropertyReferenceArrayInput interface {
	pulumi.Input

	ToParticipantPropertyReferenceArrayOutput() ParticipantPropertyReferenceArrayOutput
	ToParticipantPropertyReferenceArrayOutputWithContext(context.Context) ParticipantPropertyReferenceArrayOutput
}

type ParticipantPropertyReferenceArray []ParticipantPropertyReferenceInput

func (ParticipantPropertyReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantPropertyReference)(nil)).Elem()
}

func (i ParticipantPropertyReferenceArray) ToParticipantPropertyReferenceArrayOutput() ParticipantPropertyReferenceArrayOutput {
	return i.ToParticipantPropertyReferenceArrayOutputWithContext(context.Background())
}

func (i ParticipantPropertyReferenceArray) ToParticipantPropertyReferenceArrayOutputWithContext(ctx context.Context) ParticipantPropertyReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantPropertyReferenceArrayOutput)
}

// The participant property reference.
type ParticipantPropertyReferenceOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantPropertyReference)(nil)).Elem()
}

func (o ParticipantPropertyReferenceOutput) ToParticipantPropertyReferenceOutput() ParticipantPropertyReferenceOutput {
	return o
}

func (o ParticipantPropertyReferenceOutput) ToParticipantPropertyReferenceOutputWithContext(ctx context.Context) ParticipantPropertyReferenceOutput {
	return o
}

// The interaction property that maps to the profile property.
func (o ParticipantPropertyReferenceOutput) InteractionPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReference) string { return v.InteractionPropertyName }).(pulumi.StringOutput)
}

// The profile property that maps to the interaction property.
func (o ParticipantPropertyReferenceOutput) ProfilePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReference) string { return v.ProfilePropertyName }).(pulumi.StringOutput)
}

type ParticipantPropertyReferenceArrayOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantPropertyReference)(nil)).Elem()
}

func (o ParticipantPropertyReferenceArrayOutput) ToParticipantPropertyReferenceArrayOutput() ParticipantPropertyReferenceArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceArrayOutput) ToParticipantPropertyReferenceArrayOutputWithContext(ctx context.Context) ParticipantPropertyReferenceArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceArrayOutput) Index(i pulumi.IntInput) ParticipantPropertyReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParticipantPropertyReference {
		return vs[0].([]ParticipantPropertyReference)[vs[1].(int)]
	}).(ParticipantPropertyReferenceOutput)
}

// The participant property reference.
type ParticipantPropertyReferenceResponse struct {
	// The interaction property that maps to the profile property.
	InteractionPropertyName string `pulumi:"interactionPropertyName"`
	// The profile property that maps to the interaction property.
	ProfilePropertyName string `pulumi:"profilePropertyName"`
}

// The participant property reference.
type ParticipantPropertyReferenceResponseOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantPropertyReferenceResponse)(nil)).Elem()
}

func (o ParticipantPropertyReferenceResponseOutput) ToParticipantPropertyReferenceResponseOutput() ParticipantPropertyReferenceResponseOutput {
	return o
}

func (o ParticipantPropertyReferenceResponseOutput) ToParticipantPropertyReferenceResponseOutputWithContext(ctx context.Context) ParticipantPropertyReferenceResponseOutput {
	return o
}

// The interaction property that maps to the profile property.
func (o ParticipantPropertyReferenceResponseOutput) InteractionPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReferenceResponse) string { return v.InteractionPropertyName }).(pulumi.StringOutput)
}

// The profile property that maps to the interaction property.
func (o ParticipantPropertyReferenceResponseOutput) ProfilePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReferenceResponse) string { return v.ProfilePropertyName }).(pulumi.StringOutput)
}

type ParticipantPropertyReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantPropertyReferenceResponse)(nil)).Elem()
}

func (o ParticipantPropertyReferenceResponseArrayOutput) ToParticipantPropertyReferenceResponseArrayOutput() ParticipantPropertyReferenceResponseArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceResponseArrayOutput) ToParticipantPropertyReferenceResponseArrayOutputWithContext(ctx context.Context) ParticipantPropertyReferenceResponseArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceResponseArrayOutput) Index(i pulumi.IntInput) ParticipantPropertyReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParticipantPropertyReferenceResponse {
		return vs[0].([]ParticipantPropertyReferenceResponse)[vs[1].(int)]
	}).(ParticipantPropertyReferenceResponseOutput)
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMapping struct {
	// The field name on the Interaction Type.
	InteractionFieldName string `pulumi:"interactionFieldName"`
	// Link type.
	LinkType *LinkTypes `pulumi:"linkType"`
	// The field name on the Relationship metadata.
	RelationshipFieldName string `pulumi:"relationshipFieldName"`
}

// RelationshipLinkFieldMappingInput is an input type that accepts RelationshipLinkFieldMappingArgs and RelationshipLinkFieldMappingOutput values.
// You can construct a concrete instance of `RelationshipLinkFieldMappingInput` via:
//
//	RelationshipLinkFieldMappingArgs{...}
type RelationshipLinkFieldMappingInput interface {
	pulumi.Input

	ToRelationshipLinkFieldMappingOutput() RelationshipLinkFieldMappingOutput
	ToRelationshipLinkFieldMappingOutputWithContext(context.Context) RelationshipLinkFieldMappingOutput
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingArgs struct {
	// The field name on the Interaction Type.
	InteractionFieldName pulumi.StringInput `pulumi:"interactionFieldName"`
	// Link type.
	LinkType LinkTypesPtrInput `pulumi:"linkType"`
	// The field name on the Relationship metadata.
	RelationshipFieldName pulumi.StringInput `pulumi:"relationshipFieldName"`
}

func (RelationshipLinkFieldMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkFieldMapping)(nil)).Elem()
}

func (i RelationshipLinkFieldMappingArgs) ToRelationshipLinkFieldMappingOutput() RelationshipLinkFieldMappingOutput {
	return i.ToRelationshipLinkFieldMappingOutputWithContext(context.Background())
}

func (i RelationshipLinkFieldMappingArgs) ToRelationshipLinkFieldMappingOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkFieldMappingOutput)
}

// RelationshipLinkFieldMappingArrayInput is an input type that accepts RelationshipLinkFieldMappingArray and RelationshipLinkFieldMappingArrayOutput values.
// You can construct a concrete instance of `RelationshipLinkFieldMappingArrayInput` via:
//
//	RelationshipLinkFieldMappingArray{ RelationshipLinkFieldMappingArgs{...} }
type RelationshipLinkFieldMappingArrayInput interface {
	pulumi.Input

	ToRelationshipLinkFieldMappingArrayOutput() RelationshipLinkFieldMappingArrayOutput
	ToRelationshipLinkFieldMappingArrayOutputWithContext(context.Context) RelationshipLinkFieldMappingArrayOutput
}

type RelationshipLinkFieldMappingArray []RelationshipLinkFieldMappingInput

func (RelationshipLinkFieldMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipLinkFieldMapping)(nil)).Elem()
}

func (i RelationshipLinkFieldMappingArray) ToRelationshipLinkFieldMappingArrayOutput() RelationshipLinkFieldMappingArrayOutput {
	return i.ToRelationshipLinkFieldMappingArrayOutputWithContext(context.Background())
}

func (i RelationshipLinkFieldMappingArray) ToRelationshipLinkFieldMappingArrayOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkFieldMappingArrayOutput)
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkFieldMapping)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingOutput) ToRelationshipLinkFieldMappingOutput() RelationshipLinkFieldMappingOutput {
	return o
}

func (o RelationshipLinkFieldMappingOutput) ToRelationshipLinkFieldMappingOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingOutput {
	return o
}

// The field name on the Interaction Type.
func (o RelationshipLinkFieldMappingOutput) InteractionFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMapping) string { return v.InteractionFieldName }).(pulumi.StringOutput)
}

// Link type.
func (o RelationshipLinkFieldMappingOutput) LinkType() LinkTypesPtrOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMapping) *LinkTypes { return v.LinkType }).(LinkTypesPtrOutput)
}

// The field name on the Relationship metadata.
func (o RelationshipLinkFieldMappingOutput) RelationshipFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMapping) string { return v.RelationshipFieldName }).(pulumi.StringOutput)
}

type RelationshipLinkFieldMappingArrayOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipLinkFieldMapping)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingArrayOutput) ToRelationshipLinkFieldMappingArrayOutput() RelationshipLinkFieldMappingArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingArrayOutput) ToRelationshipLinkFieldMappingArrayOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingArrayOutput) Index(i pulumi.IntInput) RelationshipLinkFieldMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipLinkFieldMapping {
		return vs[0].([]RelationshipLinkFieldMapping)[vs[1].(int)]
	}).(RelationshipLinkFieldMappingOutput)
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingResponse struct {
	// The field name on the Interaction Type.
	InteractionFieldName string `pulumi:"interactionFieldName"`
	// Link type.
	LinkType *string `pulumi:"linkType"`
	// The field name on the Relationship metadata.
	RelationshipFieldName string `pulumi:"relationshipFieldName"`
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingResponseOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkFieldMappingResponse)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingResponseOutput) ToRelationshipLinkFieldMappingResponseOutput() RelationshipLinkFieldMappingResponseOutput {
	return o
}

func (o RelationshipLinkFieldMappingResponseOutput) ToRelationshipLinkFieldMappingResponseOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingResponseOutput {
	return o
}

// The field name on the Interaction Type.
func (o RelationshipLinkFieldMappingResponseOutput) InteractionFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMappingResponse) string { return v.InteractionFieldName }).(pulumi.StringOutput)
}

// Link type.
func (o RelationshipLinkFieldMappingResponseOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMappingResponse) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

// The field name on the Relationship metadata.
func (o RelationshipLinkFieldMappingResponseOutput) RelationshipFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMappingResponse) string { return v.RelationshipFieldName }).(pulumi.StringOutput)
}

type RelationshipLinkFieldMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipLinkFieldMappingResponse)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingResponseArrayOutput) ToRelationshipLinkFieldMappingResponseArrayOutput() RelationshipLinkFieldMappingResponseArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingResponseArrayOutput) ToRelationshipLinkFieldMappingResponseArrayOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingResponseArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingResponseArrayOutput) Index(i pulumi.IntInput) RelationshipLinkFieldMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipLinkFieldMappingResponse {
		return vs[0].([]RelationshipLinkFieldMappingResponse)[vs[1].(int)]
	}).(RelationshipLinkFieldMappingResponseOutput)
}

// Metadata for a Link's property mapping.
type TypePropertiesMapping struct {
	//  Property name on the source Interaction Type.
	InteractionTypePropertyName string `pulumi:"interactionTypePropertyName"`
	// Flag to indicate whether the Profile Type property is an id on the Profile Type.
	IsProfileTypeId *bool `pulumi:"isProfileTypeId"`
	// Link type.
	LinkType *LinkTypes `pulumi:"linkType"`
	// Property name on the target Profile Type.
	ProfileTypePropertyName string `pulumi:"profileTypePropertyName"`
}

// TypePropertiesMappingInput is an input type that accepts TypePropertiesMappingArgs and TypePropertiesMappingOutput values.
// You can construct a concrete instance of `TypePropertiesMappingInput` via:
//
//	TypePropertiesMappingArgs{...}
type TypePropertiesMappingInput interface {
	pulumi.Input

	ToTypePropertiesMappingOutput() TypePropertiesMappingOutput
	ToTypePropertiesMappingOutputWithContext(context.Context) TypePropertiesMappingOutput
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingArgs struct {
	//  Property name on the source Interaction Type.
	InteractionTypePropertyName pulumi.StringInput `pulumi:"interactionTypePropertyName"`
	// Flag to indicate whether the Profile Type property is an id on the Profile Type.
	IsProfileTypeId pulumi.BoolPtrInput `pulumi:"isProfileTypeId"`
	// Link type.
	LinkType LinkTypesPtrInput `pulumi:"linkType"`
	// Property name on the target Profile Type.
	ProfileTypePropertyName pulumi.StringInput `pulumi:"profileTypePropertyName"`
}

func (TypePropertiesMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypePropertiesMapping)(nil)).Elem()
}

func (i TypePropertiesMappingArgs) ToTypePropertiesMappingOutput() TypePropertiesMappingOutput {
	return i.ToTypePropertiesMappingOutputWithContext(context.Background())
}

func (i TypePropertiesMappingArgs) ToTypePropertiesMappingOutputWithContext(ctx context.Context) TypePropertiesMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypePropertiesMappingOutput)
}

// TypePropertiesMappingArrayInput is an input type that accepts TypePropertiesMappingArray and TypePropertiesMappingArrayOutput values.
// You can construct a concrete instance of `TypePropertiesMappingArrayInput` via:
//
//	TypePropertiesMappingArray{ TypePropertiesMappingArgs{...} }
type TypePropertiesMappingArrayInput interface {
	pulumi.Input

	ToTypePropertiesMappingArrayOutput() TypePropertiesMappingArrayOutput
	ToTypePropertiesMappingArrayOutputWithContext(context.Context) TypePropertiesMappingArrayOutput
}

type TypePropertiesMappingArray []TypePropertiesMappingInput

func (TypePropertiesMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypePropertiesMapping)(nil)).Elem()
}

func (i TypePropertiesMappingArray) ToTypePropertiesMappingArrayOutput() TypePropertiesMappingArrayOutput {
	return i.ToTypePropertiesMappingArrayOutputWithContext(context.Background())
}

func (i TypePropertiesMappingArray) ToTypePropertiesMappingArrayOutputWithContext(ctx context.Context) TypePropertiesMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypePropertiesMappingArrayOutput)
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypePropertiesMapping)(nil)).Elem()
}

func (o TypePropertiesMappingOutput) ToTypePropertiesMappingOutput() TypePropertiesMappingOutput {
	return o
}

func (o TypePropertiesMappingOutput) ToTypePropertiesMappingOutputWithContext(ctx context.Context) TypePropertiesMappingOutput {
	return o
}

// Property name on the source Interaction Type.
func (o TypePropertiesMappingOutput) InteractionTypePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMapping) string { return v.InteractionTypePropertyName }).(pulumi.StringOutput)
}

// Flag to indicate whether the Profile Type property is an id on the Profile Type.
func (o TypePropertiesMappingOutput) IsProfileTypeId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TypePropertiesMapping) *bool { return v.IsProfileTypeId }).(pulumi.BoolPtrOutput)
}

// Link type.
func (o TypePropertiesMappingOutput) LinkType() LinkTypesPtrOutput {
	return o.ApplyT(func(v TypePropertiesMapping) *LinkTypes { return v.LinkType }).(LinkTypesPtrOutput)
}

// Property name on the target Profile Type.
func (o TypePropertiesMappingOutput) ProfileTypePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMapping) string { return v.ProfileTypePropertyName }).(pulumi.StringOutput)
}

type TypePropertiesMappingArrayOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypePropertiesMapping)(nil)).Elem()
}

func (o TypePropertiesMappingArrayOutput) ToTypePropertiesMappingArrayOutput() TypePropertiesMappingArrayOutput {
	return o
}

func (o TypePropertiesMappingArrayOutput) ToTypePropertiesMappingArrayOutputWithContext(ctx context.Context) TypePropertiesMappingArrayOutput {
	return o
}

func (o TypePropertiesMappingArrayOutput) Index(i pulumi.IntInput) TypePropertiesMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TypePropertiesMapping {
		return vs[0].([]TypePropertiesMapping)[vs[1].(int)]
	}).(TypePropertiesMappingOutput)
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingResponse struct {
	//  Property name on the source Interaction Type.
	InteractionTypePropertyName string `pulumi:"interactionTypePropertyName"`
	// Flag to indicate whether the Profile Type property is an id on the Profile Type.
	IsProfileTypeId *bool `pulumi:"isProfileTypeId"`
	// Link type.
	LinkType *string `pulumi:"linkType"`
	// Property name on the target Profile Type.
	ProfileTypePropertyName string `pulumi:"profileTypePropertyName"`
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingResponseOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypePropertiesMappingResponse)(nil)).Elem()
}

func (o TypePropertiesMappingResponseOutput) ToTypePropertiesMappingResponseOutput() TypePropertiesMappingResponseOutput {
	return o
}

func (o TypePropertiesMappingResponseOutput) ToTypePropertiesMappingResponseOutputWithContext(ctx context.Context) TypePropertiesMappingResponseOutput {
	return o
}

// Property name on the source Interaction Type.
func (o TypePropertiesMappingResponseOutput) InteractionTypePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMappingResponse) string { return v.InteractionTypePropertyName }).(pulumi.StringOutput)
}

// Flag to indicate whether the Profile Type property is an id on the Profile Type.
func (o TypePropertiesMappingResponseOutput) IsProfileTypeId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TypePropertiesMappingResponse) *bool { return v.IsProfileTypeId }).(pulumi.BoolPtrOutput)
}

// Link type.
func (o TypePropertiesMappingResponseOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypePropertiesMappingResponse) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

// Property name on the target Profile Type.
func (o TypePropertiesMappingResponseOutput) ProfileTypePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMappingResponse) string { return v.ProfileTypePropertyName }).(pulumi.StringOutput)
}

type TypePropertiesMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypePropertiesMappingResponse)(nil)).Elem()
}

func (o TypePropertiesMappingResponseArrayOutput) ToTypePropertiesMappingResponseArrayOutput() TypePropertiesMappingResponseArrayOutput {
	return o
}

func (o TypePropertiesMappingResponseArrayOutput) ToTypePropertiesMappingResponseArrayOutputWithContext(ctx context.Context) TypePropertiesMappingResponseArrayOutput {
	return o
}

func (o TypePropertiesMappingResponseArrayOutput) Index(i pulumi.IntInput) TypePropertiesMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TypePropertiesMappingResponse {
		return vs[0].([]TypePropertiesMappingResponse)[vs[1].(int)]
	}).(TypePropertiesMappingResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ParticipantPropertyReferenceOutput{})
	pulumi.RegisterOutputType(ParticipantPropertyReferenceArrayOutput{})
	pulumi.RegisterOutputType(ParticipantPropertyReferenceResponseOutput{})
	pulumi.RegisterOutputType(ParticipantPropertyReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingArrayOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingResponseOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingArrayOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingResponseOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingResponseArrayOutput{})
}
