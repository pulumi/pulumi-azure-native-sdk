// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
type InstanceOperationType string

const (
	InstanceOperationTypeUpsert = InstanceOperationType("Upsert")
	InstanceOperationTypeDelete = InstanceOperationType("Delete")
)

func (InstanceOperationType) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceOperationType)(nil)).Elem()
}

func (e InstanceOperationType) ToInstanceOperationTypeOutput() InstanceOperationTypeOutput {
	return pulumi.ToOutput(e).(InstanceOperationTypeOutput)
}

func (e InstanceOperationType) ToInstanceOperationTypeOutputWithContext(ctx context.Context) InstanceOperationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InstanceOperationTypeOutput)
}

func (e InstanceOperationType) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return e.ToInstanceOperationTypePtrOutputWithContext(context.Background())
}

func (e InstanceOperationType) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return InstanceOperationType(e).ToInstanceOperationTypeOutputWithContext(ctx).ToInstanceOperationTypePtrOutputWithContext(ctx)
}

func (e InstanceOperationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceOperationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceOperationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceOperationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InstanceOperationTypeOutput struct{ *pulumi.OutputState }

func (InstanceOperationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceOperationType)(nil)).Elem()
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypeOutput() InstanceOperationTypeOutput {
	return o
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypeOutputWithContext(ctx context.Context) InstanceOperationTypeOutput {
	return o
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return o.ToInstanceOperationTypePtrOutputWithContext(context.Background())
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceOperationType) *InstanceOperationType {
		return &v
	}).(InstanceOperationTypePtrOutput)
}

func (o InstanceOperationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InstanceOperationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InstanceOperationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InstanceOperationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InstanceOperationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InstanceOperationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InstanceOperationTypePtrOutput struct{ *pulumi.OutputState }

func (InstanceOperationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceOperationType)(nil)).Elem()
}

func (o InstanceOperationTypePtrOutput) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return o
}

func (o InstanceOperationTypePtrOutput) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return o
}

func (o InstanceOperationTypePtrOutput) Elem() InstanceOperationTypeOutput {
	return o.ApplyT(func(v *InstanceOperationType) InstanceOperationType {
		if v != nil {
			return *v
		}
		var ret InstanceOperationType
		return ret
	}).(InstanceOperationTypeOutput)
}

func (o InstanceOperationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InstanceOperationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InstanceOperationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InstanceOperationTypeInput is an input type that accepts InstanceOperationTypeArgs and InstanceOperationTypeOutput values.
// You can construct a concrete instance of `InstanceOperationTypeInput` via:
//
//	InstanceOperationTypeArgs{...}
type InstanceOperationTypeInput interface {
	pulumi.Input

	ToInstanceOperationTypeOutput() InstanceOperationTypeOutput
	ToInstanceOperationTypeOutputWithContext(context.Context) InstanceOperationTypeOutput
}

var instanceOperationTypePtrType = reflect.TypeOf((**InstanceOperationType)(nil)).Elem()

type InstanceOperationTypePtrInput interface {
	pulumi.Input

	ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput
	ToInstanceOperationTypePtrOutputWithContext(context.Context) InstanceOperationTypePtrOutput
}

type instanceOperationTypePtr string

func InstanceOperationTypePtr(v string) InstanceOperationTypePtrInput {
	return (*instanceOperationTypePtr)(&v)
}

func (*instanceOperationTypePtr) ElementType() reflect.Type {
	return instanceOperationTypePtrType
}

func (in *instanceOperationTypePtr) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return pulumi.ToOutput(in).(InstanceOperationTypePtrOutput)
}

func (in *instanceOperationTypePtr) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InstanceOperationTypePtrOutput)
}

// Link type.
type LinkTypes string

const (
	LinkTypesUpdateAlways = LinkTypes("UpdateAlways")
	LinkTypesCopyIfNull   = LinkTypes("CopyIfNull")
)

func (LinkTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkTypes)(nil)).Elem()
}

func (e LinkTypes) ToLinkTypesOutput() LinkTypesOutput {
	return pulumi.ToOutput(e).(LinkTypesOutput)
}

func (e LinkTypes) ToLinkTypesOutputWithContext(ctx context.Context) LinkTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LinkTypesOutput)
}

func (e LinkTypes) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return e.ToLinkTypesPtrOutputWithContext(context.Background())
}

func (e LinkTypes) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return LinkTypes(e).ToLinkTypesOutputWithContext(ctx).ToLinkTypesPtrOutputWithContext(ctx)
}

func (e LinkTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LinkTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LinkTypesOutput struct{ *pulumi.OutputState }

func (LinkTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkTypes)(nil)).Elem()
}

func (o LinkTypesOutput) ToLinkTypesOutput() LinkTypesOutput {
	return o
}

func (o LinkTypesOutput) ToLinkTypesOutputWithContext(ctx context.Context) LinkTypesOutput {
	return o
}

func (o LinkTypesOutput) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return o.ToLinkTypesPtrOutputWithContext(context.Background())
}

func (o LinkTypesOutput) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkTypes) *LinkTypes {
		return &v
	}).(LinkTypesPtrOutput)
}

func (o LinkTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LinkTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LinkTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LinkTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LinkTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LinkTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LinkTypesPtrOutput struct{ *pulumi.OutputState }

func (LinkTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkTypes)(nil)).Elem()
}

func (o LinkTypesPtrOutput) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return o
}

func (o LinkTypesPtrOutput) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return o
}

func (o LinkTypesPtrOutput) Elem() LinkTypesOutput {
	return o.ApplyT(func(v *LinkTypes) LinkTypes {
		if v != nil {
			return *v
		}
		var ret LinkTypes
		return ret
	}).(LinkTypesOutput)
}

func (o LinkTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LinkTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LinkTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LinkTypesInput is an input type that accepts LinkTypesArgs and LinkTypesOutput values.
// You can construct a concrete instance of `LinkTypesInput` via:
//
//	LinkTypesArgs{...}
type LinkTypesInput interface {
	pulumi.Input

	ToLinkTypesOutput() LinkTypesOutput
	ToLinkTypesOutputWithContext(context.Context) LinkTypesOutput
}

var linkTypesPtrType = reflect.TypeOf((**LinkTypes)(nil)).Elem()

type LinkTypesPtrInput interface {
	pulumi.Input

	ToLinkTypesPtrOutput() LinkTypesPtrOutput
	ToLinkTypesPtrOutputWithContext(context.Context) LinkTypesPtrOutput
}

type linkTypesPtr string

func LinkTypesPtr(v string) LinkTypesPtrInput {
	return (*linkTypesPtr)(&v)
}

func (*linkTypesPtr) ElementType() reflect.Type {
	return linkTypesPtrType
}

func (in *linkTypesPtr) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return pulumi.ToOutput(in).(LinkTypesPtrOutput)
}

func (in *linkTypesPtr) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LinkTypesPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceOperationTypeOutput{})
	pulumi.RegisterOutputType(InstanceOperationTypePtrOutput{})
	pulumi.RegisterOutputType(LinkTypesOutput{})
	pulumi.RegisterOutputType(LinkTypesPtrOutput{})
}
