// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysqldiscovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The MySQLSite resource definition.
//
// Uses Azure REST API version 2024-09-30-preview. In version 2.x of the Azure Native provider, it used API version 2024-09-30-preview.
type MySQLSite struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The extended location.
	ExtendedLocation ExtendedLocationResponseOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The mapped master Site Id.
	MasterSiteId pulumi.StringOutput `pulumi:"masterSiteId"`
	// The mapped migrate project Id.
	MigrateProjectId pulumi.StringOutput `pulumi:"migrateProjectId"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Gets or sets the provisioning state.
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMySQLSite registers a new resource with the given unique name, arguments, and options.
func NewMySQLSite(ctx *pulumi.Context,
	name string, args *MySQLSiteArgs, opts ...pulumi.ResourceOption) (*MySQLSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.MasterSiteId == nil {
		return nil, errors.New("invalid value for required argument 'MasterSiteId'")
	}
	if args.MigrateProjectId == nil {
		return nil, errors.New("invalid value for required argument 'MigrateProjectId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:mysqldiscovery/v20240930preview:MySQLSite"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MySQLSite
	err := ctx.RegisterResource("azure-native:mysqldiscovery:MySQLSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMySQLSite gets an existing MySQLSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMySQLSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MySQLSiteState, opts ...pulumi.ResourceOption) (*MySQLSite, error) {
	var resource MySQLSite
	err := ctx.ReadResource("azure-native:mysqldiscovery:MySQLSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MySQLSite resources.
type mySQLSiteState struct {
}

type MySQLSiteState struct {
}

func (MySQLSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*mySQLSiteState)(nil)).Elem()
}

type mySQLSiteArgs struct {
	// The extended location.
	ExtendedLocation ExtendedLocation `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The mapped master Site Id.
	MasterSiteId string `pulumi:"masterSiteId"`
	// The mapped migrate project Id.
	MigrateProjectId string `pulumi:"migrateProjectId"`
	// Gets or sets the provisioning state.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of Site
	SiteName *string `pulumi:"siteName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MySQLSite resource.
type MySQLSiteArgs struct {
	// The extended location.
	ExtendedLocation ExtendedLocationInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The mapped master Site Id.
	MasterSiteId pulumi.StringInput
	// The mapped migrate project Id.
	MigrateProjectId pulumi.StringInput
	// Gets or sets the provisioning state.
	ProvisioningState pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of Site
	SiteName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (MySQLSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mySQLSiteArgs)(nil)).Elem()
}

type MySQLSiteInput interface {
	pulumi.Input

	ToMySQLSiteOutput() MySQLSiteOutput
	ToMySQLSiteOutputWithContext(ctx context.Context) MySQLSiteOutput
}

func (*MySQLSite) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLSite)(nil)).Elem()
}

func (i *MySQLSite) ToMySQLSiteOutput() MySQLSiteOutput {
	return i.ToMySQLSiteOutputWithContext(context.Background())
}

func (i *MySQLSite) ToMySQLSiteOutputWithContext(ctx context.Context) MySQLSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySQLSiteOutput)
}

type MySQLSiteOutput struct{ *pulumi.OutputState }

func (MySQLSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySQLSite)(nil)).Elem()
}

func (o MySQLSiteOutput) ToMySQLSiteOutput() MySQLSiteOutput {
	return o
}

func (o MySQLSiteOutput) ToMySQLSiteOutputWithContext(ctx context.Context) MySQLSiteOutput {
	return o
}

// The Azure API version of the resource.
func (o MySQLSiteOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The extended location.
func (o MySQLSiteOutput) ExtendedLocation() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *MySQLSite) ExtendedLocationResponseOutput { return v.ExtendedLocation }).(ExtendedLocationResponseOutput)
}

// The geo-location where the resource lives
func (o MySQLSiteOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The mapped master Site Id.
func (o MySQLSiteOutput) MasterSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringOutput { return v.MasterSiteId }).(pulumi.StringOutput)
}

// The mapped migrate project Id.
func (o MySQLSiteOutput) MigrateProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringOutput { return v.MigrateProjectId }).(pulumi.StringOutput)
}

// The name of the resource
func (o MySQLSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Gets or sets the provisioning state.
func (o MySQLSiteOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringPtrOutput { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o MySQLSiteOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *MySQLSite) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o MySQLSiteOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o MySQLSiteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MySQLSite) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MySQLSiteOutput{})
}
