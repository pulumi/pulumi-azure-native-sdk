// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The multi cloud resource's cloud name.
type CloudName string

const (
	CloudNameAzure       = CloudName("Azure")
	CloudNameAWS         = CloudName("AWS")
	CloudNameGCP         = CloudName("GCP")
	CloudNameGithub      = CloudName("Github")
	CloudNameAzureDevOps = CloudName("AzureDevOps")
	CloudNameGitLab      = CloudName("GitLab")
)

func (CloudName) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudName)(nil)).Elem()
}

func (e CloudName) ToCloudNameOutput() CloudNameOutput {
	return pulumi.ToOutput(e).(CloudNameOutput)
}

func (e CloudName) ToCloudNameOutputWithContext(ctx context.Context) CloudNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CloudNameOutput)
}

func (e CloudName) ToCloudNamePtrOutput() CloudNamePtrOutput {
	return e.ToCloudNamePtrOutputWithContext(context.Background())
}

func (e CloudName) ToCloudNamePtrOutputWithContext(ctx context.Context) CloudNamePtrOutput {
	return CloudName(e).ToCloudNameOutputWithContext(ctx).ToCloudNamePtrOutputWithContext(ctx)
}

func (e CloudName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CloudName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CloudName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CloudName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CloudNameOutput struct{ *pulumi.OutputState }

func (CloudNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudName)(nil)).Elem()
}

func (o CloudNameOutput) ToCloudNameOutput() CloudNameOutput {
	return o
}

func (o CloudNameOutput) ToCloudNameOutputWithContext(ctx context.Context) CloudNameOutput {
	return o
}

func (o CloudNameOutput) ToCloudNamePtrOutput() CloudNamePtrOutput {
	return o.ToCloudNamePtrOutputWithContext(context.Background())
}

func (o CloudNameOutput) ToCloudNamePtrOutputWithContext(ctx context.Context) CloudNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudName) *CloudName {
		return &v
	}).(CloudNamePtrOutput)
}

func (o CloudNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CloudNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CloudName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CloudNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CloudNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CloudName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CloudNamePtrOutput struct{ *pulumi.OutputState }

func (CloudNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudName)(nil)).Elem()
}

func (o CloudNamePtrOutput) ToCloudNamePtrOutput() CloudNamePtrOutput {
	return o
}

func (o CloudNamePtrOutput) ToCloudNamePtrOutputWithContext(ctx context.Context) CloudNamePtrOutput {
	return o
}

func (o CloudNamePtrOutput) Elem() CloudNameOutput {
	return o.ApplyT(func(v *CloudName) CloudName {
		if v != nil {
			return *v
		}
		var ret CloudName
		return ret
	}).(CloudNameOutput)
}

func (o CloudNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CloudNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CloudName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CloudNameInput is an input type that accepts values of the CloudName enum
// A concrete instance of `CloudNameInput` can be one of the following:
//
//	CloudNameAzure
//	CloudNameAWS
//	CloudNameGCP
//	CloudNameGithub
//	CloudNameAzureDevOps
//	CloudNameGitLab
type CloudNameInput interface {
	pulumi.Input

	ToCloudNameOutput() CloudNameOutput
	ToCloudNameOutputWithContext(context.Context) CloudNameOutput
}

var cloudNamePtrType = reflect.TypeOf((**CloudName)(nil)).Elem()

type CloudNamePtrInput interface {
	pulumi.Input

	ToCloudNamePtrOutput() CloudNamePtrOutput
	ToCloudNamePtrOutputWithContext(context.Context) CloudNamePtrOutput
}

type cloudNamePtr string

func CloudNamePtr(v string) CloudNamePtrInput {
	return (*cloudNamePtr)(&v)
}

func (*cloudNamePtr) ElementType() reflect.Type {
	return cloudNamePtrType
}

func (in *cloudNamePtr) ToCloudNamePtrOutput() CloudNamePtrOutput {
	return pulumi.ToOutput(in).(CloudNamePtrOutput)
}

func (in *cloudNamePtr) ToCloudNamePtrOutputWithContext(ctx context.Context) CloudNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CloudNamePtrOutput)
}

func (in *cloudNamePtr) ToOutput(ctx context.Context) pulumix.Output[*CloudName] {
	return pulumix.Output[*CloudName]{
		OutputState: in.ToCloudNamePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of the environment data.
type EnvironmentType string

const (
	EnvironmentTypeAwsAccount       = EnvironmentType("AwsAccount")
	EnvironmentTypeGcpProject       = EnvironmentType("GcpProject")
	EnvironmentTypeGithubScope      = EnvironmentType("GithubScope")
	EnvironmentTypeAzureDevOpsScope = EnvironmentType("AzureDevOpsScope")
	EnvironmentTypeGitlabScope      = EnvironmentType("GitlabScope")
)

// The type of the security offering.
type OfferingType string

const (
	OfferingTypeCspmMonitorAws               = OfferingType("CspmMonitorAws")
	OfferingTypeDefenderForContainersAws     = OfferingType("DefenderForContainersAws")
	OfferingTypeDefenderForServersAws        = OfferingType("DefenderForServersAws")
	OfferingTypeDefenderForDatabasesAws      = OfferingType("DefenderForDatabasesAws")
	OfferingTypeInformationProtectionAws     = OfferingType("InformationProtectionAws")
	OfferingTypeCspmMonitorGcp               = OfferingType("CspmMonitorGcp")
	OfferingTypeCspmMonitorGithub            = OfferingType("CspmMonitorGithub")
	OfferingTypeCspmMonitorAzureDevOps       = OfferingType("CspmMonitorAzureDevOps")
	OfferingTypeDefenderForServersGcp        = OfferingType("DefenderForServersGcp")
	OfferingTypeDefenderForContainersGcp     = OfferingType("DefenderForContainersGcp")
	OfferingTypeDefenderForDatabasesGcp      = OfferingType("DefenderForDatabasesGcp")
	OfferingTypeDefenderCspmAws              = OfferingType("DefenderCspmAws")
	OfferingTypeDefenderCspmGcp              = OfferingType("DefenderCspmGcp")
	OfferingTypeDefenderForDevOpsGithub      = OfferingType("DefenderForDevOpsGithub")
	OfferingTypeDefenderForDevOpsAzureDevOps = OfferingType("DefenderForDevOpsAzureDevOps")
	OfferingTypeCspmMonitorGitLab            = OfferingType("CspmMonitorGitLab")
	OfferingTypeDefenderForDevOpsGitLab      = OfferingType("DefenderForDevOpsGitLab")
)

// The multi cloud account's membership type in the organization
type OrganizationMembershipType string

const (
	OrganizationMembershipTypeMember       = OrganizationMembershipType("Member")
	OrganizationMembershipTypeOrganization = OrganizationMembershipType("Organization")
)

// The scanning mode for the VM scan.
type ScanningMode string

const (
	ScanningModeDefault = ScanningMode("Default")
)

func (ScanningMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanningMode)(nil)).Elem()
}

func (e ScanningMode) ToScanningModeOutput() ScanningModeOutput {
	return pulumi.ToOutput(e).(ScanningModeOutput)
}

func (e ScanningMode) ToScanningModeOutputWithContext(ctx context.Context) ScanningModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanningModeOutput)
}

func (e ScanningMode) ToScanningModePtrOutput() ScanningModePtrOutput {
	return e.ToScanningModePtrOutputWithContext(context.Background())
}

func (e ScanningMode) ToScanningModePtrOutputWithContext(ctx context.Context) ScanningModePtrOutput {
	return ScanningMode(e).ToScanningModeOutputWithContext(ctx).ToScanningModePtrOutputWithContext(ctx)
}

func (e ScanningMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanningMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanningMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanningMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanningModeOutput struct{ *pulumi.OutputState }

func (ScanningModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanningMode)(nil)).Elem()
}

func (o ScanningModeOutput) ToScanningModeOutput() ScanningModeOutput {
	return o
}

func (o ScanningModeOutput) ToScanningModeOutputWithContext(ctx context.Context) ScanningModeOutput {
	return o
}

func (o ScanningModeOutput) ToScanningModePtrOutput() ScanningModePtrOutput {
	return o.ToScanningModePtrOutputWithContext(context.Background())
}

func (o ScanningModeOutput) ToScanningModePtrOutputWithContext(ctx context.Context) ScanningModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanningMode) *ScanningMode {
		return &v
	}).(ScanningModePtrOutput)
}

func (o ScanningModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanningModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanningMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanningModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanningModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanningMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanningModePtrOutput struct{ *pulumi.OutputState }

func (ScanningModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanningMode)(nil)).Elem()
}

func (o ScanningModePtrOutput) ToScanningModePtrOutput() ScanningModePtrOutput {
	return o
}

func (o ScanningModePtrOutput) ToScanningModePtrOutputWithContext(ctx context.Context) ScanningModePtrOutput {
	return o
}

func (o ScanningModePtrOutput) Elem() ScanningModeOutput {
	return o.ApplyT(func(v *ScanningMode) ScanningMode {
		if v != nil {
			return *v
		}
		var ret ScanningMode
		return ret
	}).(ScanningModeOutput)
}

func (o ScanningModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanningModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanningMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanningModeInput is an input type that accepts values of the ScanningMode enum
// A concrete instance of `ScanningModeInput` can be one of the following:
//
//	ScanningModeDefault
type ScanningModeInput interface {
	pulumi.Input

	ToScanningModeOutput() ScanningModeOutput
	ToScanningModeOutputWithContext(context.Context) ScanningModeOutput
}

var scanningModePtrType = reflect.TypeOf((**ScanningMode)(nil)).Elem()

type ScanningModePtrInput interface {
	pulumi.Input

	ToScanningModePtrOutput() ScanningModePtrOutput
	ToScanningModePtrOutputWithContext(context.Context) ScanningModePtrOutput
}

type scanningModePtr string

func ScanningModePtr(v string) ScanningModePtrInput {
	return (*scanningModePtr)(&v)
}

func (*scanningModePtr) ElementType() reflect.Type {
	return scanningModePtrType
}

func (in *scanningModePtr) ToScanningModePtrOutput() ScanningModePtrOutput {
	return pulumi.ToOutput(in).(ScanningModePtrOutput)
}

func (in *scanningModePtr) ToScanningModePtrOutputWithContext(ctx context.Context) ScanningModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanningModePtrOutput)
}

func (in *scanningModePtr) ToOutput(ctx context.Context) pulumix.Output[*ScanningMode] {
	return pulumix.Output[*ScanningMode]{
		OutputState: in.ToScanningModePtrOutputWithContext(ctx).OutputState,
	}
}

// The available sub plans
type SubPlan string

const (
	SubPlanP1 = SubPlan("P1")
	SubPlanP2 = SubPlan("P2")
)

func (SubPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*SubPlan)(nil)).Elem()
}

func (e SubPlan) ToSubPlanOutput() SubPlanOutput {
	return pulumi.ToOutput(e).(SubPlanOutput)
}

func (e SubPlan) ToSubPlanOutputWithContext(ctx context.Context) SubPlanOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubPlanOutput)
}

func (e SubPlan) ToSubPlanPtrOutput() SubPlanPtrOutput {
	return e.ToSubPlanPtrOutputWithContext(context.Background())
}

func (e SubPlan) ToSubPlanPtrOutputWithContext(ctx context.Context) SubPlanPtrOutput {
	return SubPlan(e).ToSubPlanOutputWithContext(ctx).ToSubPlanPtrOutputWithContext(ctx)
}

func (e SubPlan) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubPlan) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubPlan) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubPlan) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubPlanOutput struct{ *pulumi.OutputState }

func (SubPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubPlan)(nil)).Elem()
}

func (o SubPlanOutput) ToSubPlanOutput() SubPlanOutput {
	return o
}

func (o SubPlanOutput) ToSubPlanOutputWithContext(ctx context.Context) SubPlanOutput {
	return o
}

func (o SubPlanOutput) ToSubPlanPtrOutput() SubPlanPtrOutput {
	return o.ToSubPlanPtrOutputWithContext(context.Background())
}

func (o SubPlanOutput) ToSubPlanPtrOutputWithContext(ctx context.Context) SubPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubPlan) *SubPlan {
		return &v
	}).(SubPlanPtrOutput)
}

func (o SubPlanOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubPlanOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubPlan) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubPlanOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubPlanOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubPlan) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubPlanPtrOutput struct{ *pulumi.OutputState }

func (SubPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubPlan)(nil)).Elem()
}

func (o SubPlanPtrOutput) ToSubPlanPtrOutput() SubPlanPtrOutput {
	return o
}

func (o SubPlanPtrOutput) ToSubPlanPtrOutputWithContext(ctx context.Context) SubPlanPtrOutput {
	return o
}

func (o SubPlanPtrOutput) Elem() SubPlanOutput {
	return o.ApplyT(func(v *SubPlan) SubPlan {
		if v != nil {
			return *v
		}
		var ret SubPlan
		return ret
	}).(SubPlanOutput)
}

func (o SubPlanPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubPlanPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubPlan) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubPlanInput is an input type that accepts values of the SubPlan enum
// A concrete instance of `SubPlanInput` can be one of the following:
//
//	SubPlanP1
//	SubPlanP2
type SubPlanInput interface {
	pulumi.Input

	ToSubPlanOutput() SubPlanOutput
	ToSubPlanOutputWithContext(context.Context) SubPlanOutput
}

var subPlanPtrType = reflect.TypeOf((**SubPlan)(nil)).Elem()

type SubPlanPtrInput interface {
	pulumi.Input

	ToSubPlanPtrOutput() SubPlanPtrOutput
	ToSubPlanPtrOutputWithContext(context.Context) SubPlanPtrOutput
}

type subPlanPtr string

func SubPlanPtr(v string) SubPlanPtrInput {
	return (*subPlanPtr)(&v)
}

func (*subPlanPtr) ElementType() reflect.Type {
	return subPlanPtrType
}

func (in *subPlanPtr) ToSubPlanPtrOutput() SubPlanPtrOutput {
	return pulumi.ToOutput(in).(SubPlanPtrOutput)
}

func (in *subPlanPtr) ToSubPlanPtrOutputWithContext(ctx context.Context) SubPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubPlanPtrOutput)
}

func (in *subPlanPtr) ToOutput(ctx context.Context) pulumix.Output[*SubPlan] {
	return pulumix.Output[*SubPlan]{
		OutputState: in.ToSubPlanPtrOutputWithContext(ctx).OutputState,
	}
}

// The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'
type Type string

const (
	TypeQualys = Type("Qualys")
	TypeTVM    = Type("TVM")
)

func (Type) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (e Type) ToTypeOutput() TypeOutput {
	return pulumi.ToOutput(e).(TypeOutput)
}

func (e Type) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TypeOutput)
}

func (e Type) ToTypePtrOutput() TypePtrOutput {
	return e.ToTypePtrOutputWithContext(context.Background())
}

func (e Type) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return Type(e).ToTypeOutputWithContext(ctx).ToTypePtrOutputWithContext(ctx)
}

func (e Type) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Type) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

func (o TypeOutput) ToTypePtrOutput() TypePtrOutput {
	return o.ToTypePtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Type) *Type {
		return &v
	}).(TypePtrOutput)
}

func (o TypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TypePtrOutput struct{ *pulumi.OutputState }

func (TypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (o TypePtrOutput) ToTypePtrOutput() TypePtrOutput {
	return o
}

func (o TypePtrOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o
}

func (o TypePtrOutput) Elem() TypeOutput {
	return o.ApplyT(func(v *Type) Type {
		if v != nil {
			return *v
		}
		var ret Type
		return ret
	}).(TypeOutput)
}

func (o TypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Type) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TypeInput is an input type that accepts values of the Type enum
// A concrete instance of `TypeInput` can be one of the following:
//
//	TypeQualys
//	TypeTVM
type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(context.Context) TypeOutput
}

var typePtrType = reflect.TypeOf((**Type)(nil)).Elem()

type TypePtrInput interface {
	pulumi.Input

	ToTypePtrOutput() TypePtrOutput
	ToTypePtrOutputWithContext(context.Context) TypePtrOutput
}

type typePtr string

func TypePtr(v string) TypePtrInput {
	return (*typePtr)(&v)
}

func (*typePtr) ElementType() reflect.Type {
	return typePtrType
}

func (in *typePtr) ToTypePtrOutput() TypePtrOutput {
	return pulumi.ToOutput(in).(TypePtrOutput)
}

func (in *typePtr) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TypePtrOutput)
}

func (in *typePtr) ToOutput(ctx context.Context) pulumix.Output[*Type] {
	return pulumix.Output[*Type]{
		OutputState: in.ToTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(CloudNameOutput{})
	pulumi.RegisterOutputType(CloudNamePtrOutput{})
	pulumi.RegisterOutputType(ScanningModeOutput{})
	pulumi.RegisterOutputType(ScanningModePtrOutput{})
	pulumi.RegisterOutputType(SubPlanOutput{})
	pulumi.RegisterOutputType(SubPlanPtrOutput{})
	pulumi.RegisterOutputType(TypeOutput{})
	pulumi.RegisterOutputType(TypePtrOutput{})
}
