// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the Defender plans pricing configurations of the selected scope (valid scopes are resource id or a subscription id). At the resource level, supported resource types are 'VirtualMachines, VMSS and ARC Machines'.
func LookupPricing(ctx *pulumi.Context, args *LookupPricingArgs, opts ...pulumi.InvokeOption) (*LookupPricingResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupPricingResult
	err := ctx.Invoke("azure-native:security/v20240101:getPricing", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPricingArgs struct {
	// name of the pricing configuration
	PricingName string `pulumi:"pricingName"`
	// The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
	ScopeId string `pulumi:"scopeId"`
}

// Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
type LookupPricingResult struct {
	// Optional. True if the plan is deprecated. If there are replacing plans they will appear in `replacedBy` property
	Deprecated bool `pulumi:"deprecated"`
	// Optional. If `pricingTier` is `Standard` then this property holds the date of the last time the `pricingTier` was set to `Standard`, when available (e.g 2023-03-01T12:42:42.1921106Z).
	EnablementTime string `pulumi:"enablementTime"`
	// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
	Enforce *string `pulumi:"enforce"`
	// Optional. List of extensions offered under a plan.
	Extensions []ExtensionResponse `pulumi:"extensions"`
	// The duration left for the subscriptions free trial period - in ISO 8601 format (e.g. P3Y6M4DT12H30M5S).
	FreeTrialRemainingTime string `pulumi:"freeTrialRemainingTime"`
	// Resource Id
	Id string `pulumi:"id"`
	// "inherited" = "True" indicates that the current scope inherits its pricing configuration from its parent. The ID of the parent scope that provides the inherited configuration is displayed in the "inheritedFrom" field. On the other hand, "inherited" = "False" indicates that the current scope has its own pricing configuration explicitly set, and does not inherit from its parent. This field is read only and available only for resource-level pricing.
	Inherited string `pulumi:"inherited"`
	// The id of the scope inherited from. "Null" if not inherited. This field is only available for resource-level pricing.
	InheritedFrom string `pulumi:"inheritedFrom"`
	// Resource name
	Name string `pulumi:"name"`
	// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
	PricingTier string `pulumi:"pricingTier"`
	// Optional. List of plans that replace this plan. This property exists only if this plan is deprecated.
	ReplacedBy []string `pulumi:"replacedBy"`
	// This field is available for subscription-level only, and reflects the coverage status of the resources under the subscription. Please note: The "pricingTier" field reflects the plan status of the subscription. However, since the plan status can also be defined at the resource level, there might be misalignment between the subscription's plan status and the resource status. This field helps indicate the coverage status of the resources.
	ResourcesCoverageStatus string `pulumi:"resourcesCoverageStatus"`
	// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
	SubPlan *string `pulumi:"subPlan"`
	// Resource type
	Type string `pulumi:"type"`
}

func LookupPricingOutput(ctx *pulumi.Context, args LookupPricingOutputArgs, opts ...pulumi.InvokeOption) LookupPricingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPricingResult, error) {
			args := v.(LookupPricingArgs)
			r, err := LookupPricing(ctx, &args, opts...)
			var s LookupPricingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPricingResultOutput)
}

type LookupPricingOutputArgs struct {
	// name of the pricing configuration
	PricingName pulumi.StringInput `pulumi:"pricingName"`
	// The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
	ScopeId pulumi.StringInput `pulumi:"scopeId"`
}

func (LookupPricingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPricingArgs)(nil)).Elem()
}

// Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
type LookupPricingResultOutput struct{ *pulumi.OutputState }

func (LookupPricingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPricingResult)(nil)).Elem()
}

func (o LookupPricingResultOutput) ToLookupPricingResultOutput() LookupPricingResultOutput {
	return o
}

func (o LookupPricingResultOutput) ToLookupPricingResultOutputWithContext(ctx context.Context) LookupPricingResultOutput {
	return o
}

// Optional. True if the plan is deprecated. If there are replacing plans they will appear in `replacedBy` property
func (o LookupPricingResultOutput) Deprecated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPricingResult) bool { return v.Deprecated }).(pulumi.BoolOutput)
}

// Optional. If `pricingTier` is `Standard` then this property holds the date of the last time the `pricingTier` was set to `Standard`, when available (e.g 2023-03-01T12:42:42.1921106Z).
func (o LookupPricingResultOutput) EnablementTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.EnablementTime }).(pulumi.StringOutput)
}

// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
func (o LookupPricingResultOutput) Enforce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPricingResult) *string { return v.Enforce }).(pulumi.StringPtrOutput)
}

// Optional. List of extensions offered under a plan.
func (o LookupPricingResultOutput) Extensions() ExtensionResponseArrayOutput {
	return o.ApplyT(func(v LookupPricingResult) []ExtensionResponse { return v.Extensions }).(ExtensionResponseArrayOutput)
}

// The duration left for the subscriptions free trial period - in ISO 8601 format (e.g. P3Y6M4DT12H30M5S).
func (o LookupPricingResultOutput) FreeTrialRemainingTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.FreeTrialRemainingTime }).(pulumi.StringOutput)
}

// Resource Id
func (o LookupPricingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.Id }).(pulumi.StringOutput)
}

// "inherited" = "True" indicates that the current scope inherits its pricing configuration from its parent. The ID of the parent scope that provides the inherited configuration is displayed in the "inheritedFrom" field. On the other hand, "inherited" = "False" indicates that the current scope has its own pricing configuration explicitly set, and does not inherit from its parent. This field is read only and available only for resource-level pricing.
func (o LookupPricingResultOutput) Inherited() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.Inherited }).(pulumi.StringOutput)
}

// The id of the scope inherited from. "Null" if not inherited. This field is only available for resource-level pricing.
func (o LookupPricingResultOutput) InheritedFrom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.InheritedFrom }).(pulumi.StringOutput)
}

// Resource name
func (o LookupPricingResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
func (o LookupPricingResultOutput) PricingTier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.PricingTier }).(pulumi.StringOutput)
}

// Optional. List of plans that replace this plan. This property exists only if this plan is deprecated.
func (o LookupPricingResultOutput) ReplacedBy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPricingResult) []string { return v.ReplacedBy }).(pulumi.StringArrayOutput)
}

// This field is available for subscription-level only, and reflects the coverage status of the resources under the subscription. Please note: The "pricingTier" field reflects the plan status of the subscription. However, since the plan status can also be defined at the resource level, there might be misalignment between the subscription's plan status and the resource status. This field helps indicate the coverage status of the resources.
func (o LookupPricingResultOutput) ResourcesCoverageStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.ResourcesCoverageStatus }).(pulumi.StringOutput)
}

// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
func (o LookupPricingResultOutput) SubPlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPricingResult) *string { return v.SubPlan }).(pulumi.StringPtrOutput)
}

// Resource type
func (o LookupPricingResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPricingResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPricingResultOutput{})
}
