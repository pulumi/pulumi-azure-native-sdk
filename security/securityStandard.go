// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package security

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Security Standard on a resource
//
// Uses Azure REST API version 2024-08-01. In version 2.x of the Azure Native provider, it used API version 2024-08-01.
type SecurityStandard struct {
	pulumi.CustomResourceState

	// List of assessment keys to apply to standard scope.
	Assessments PartialAssessmentPropertiesResponseArrayOutput `pulumi:"assessments"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// List of all standard supported clouds.
	CloudProviders pulumi.StringArrayOutput `pulumi:"cloudProviders"`
	// Description of the standard
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display name of the standard, equivalent to the standardId
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The security standard metadata.
	Metadata StandardMetadataResponsePtrOutput `pulumi:"metadata"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy set definition id associated with the standard.
	PolicySetDefinitionId pulumi.StringPtrOutput `pulumi:"policySetDefinitionId"`
	// Standard type (Custom or Default or Compliance only currently)
	StandardType pulumi.StringOutput `pulumi:"standardType"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSecurityStandard registers a new resource with the given unique name, arguments, and options.
func NewSecurityStandard(ctx *pulumi.Context,
	name string, args *SecurityStandardArgs, opts ...pulumi.ResourceOption) (*SecurityStandard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:security/v20240801:SecurityStandard"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SecurityStandard
	err := ctx.RegisterResource("azure-native:security:SecurityStandard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityStandard gets an existing SecurityStandard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityStandard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityStandardState, opts ...pulumi.ResourceOption) (*SecurityStandard, error) {
	var resource SecurityStandard
	err := ctx.ReadResource("azure-native:security:SecurityStandard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityStandard resources.
type securityStandardState struct {
}

type SecurityStandardState struct {
}

func (SecurityStandardState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityStandardState)(nil)).Elem()
}

type securityStandardArgs struct {
	// List of assessment keys to apply to standard scope.
	Assessments []PartialAssessmentProperties `pulumi:"assessments"`
	// List of all standard supported clouds.
	CloudProviders []string `pulumi:"cloudProviders"`
	// Description of the standard
	Description *string `pulumi:"description"`
	// Display name of the standard, equivalent to the standardId
	DisplayName *string `pulumi:"displayName"`
	// The policy set definition id associated with the standard.
	PolicySetDefinitionId *string `pulumi:"policySetDefinitionId"`
	// The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
	Scope string `pulumi:"scope"`
	// The Security Standard key - unique key for the standard type
	StandardId *string `pulumi:"standardId"`
}

// The set of arguments for constructing a SecurityStandard resource.
type SecurityStandardArgs struct {
	// List of assessment keys to apply to standard scope.
	Assessments PartialAssessmentPropertiesArrayInput
	// List of all standard supported clouds.
	CloudProviders pulumi.StringArrayInput
	// Description of the standard
	Description pulumi.StringPtrInput
	// Display name of the standard, equivalent to the standardId
	DisplayName pulumi.StringPtrInput
	// The policy set definition id associated with the standard.
	PolicySetDefinitionId pulumi.StringPtrInput
	// The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
	Scope pulumi.StringInput
	// The Security Standard key - unique key for the standard type
	StandardId pulumi.StringPtrInput
}

func (SecurityStandardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityStandardArgs)(nil)).Elem()
}

type SecurityStandardInput interface {
	pulumi.Input

	ToSecurityStandardOutput() SecurityStandardOutput
	ToSecurityStandardOutputWithContext(ctx context.Context) SecurityStandardOutput
}

func (*SecurityStandard) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityStandard)(nil)).Elem()
}

func (i *SecurityStandard) ToSecurityStandardOutput() SecurityStandardOutput {
	return i.ToSecurityStandardOutputWithContext(context.Background())
}

func (i *SecurityStandard) ToSecurityStandardOutputWithContext(ctx context.Context) SecurityStandardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityStandardOutput)
}

type SecurityStandardOutput struct{ *pulumi.OutputState }

func (SecurityStandardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityStandard)(nil)).Elem()
}

func (o SecurityStandardOutput) ToSecurityStandardOutput() SecurityStandardOutput {
	return o
}

func (o SecurityStandardOutput) ToSecurityStandardOutputWithContext(ctx context.Context) SecurityStandardOutput {
	return o
}

// List of assessment keys to apply to standard scope.
func (o SecurityStandardOutput) Assessments() PartialAssessmentPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *SecurityStandard) PartialAssessmentPropertiesResponseArrayOutput { return v.Assessments }).(PartialAssessmentPropertiesResponseArrayOutput)
}

// The Azure API version of the resource.
func (o SecurityStandardOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// List of all standard supported clouds.
func (o SecurityStandardOutput) CloudProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringArrayOutput { return v.CloudProviders }).(pulumi.StringArrayOutput)
}

// Description of the standard
func (o SecurityStandardOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of the standard, equivalent to the standardId
func (o SecurityStandardOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The security standard metadata.
func (o SecurityStandardOutput) Metadata() StandardMetadataResponsePtrOutput {
	return o.ApplyT(func(v *SecurityStandard) StandardMetadataResponsePtrOutput { return v.Metadata }).(StandardMetadataResponsePtrOutput)
}

// Resource name
func (o SecurityStandardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy set definition id associated with the standard.
func (o SecurityStandardOutput) PolicySetDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringPtrOutput { return v.PolicySetDefinitionId }).(pulumi.StringPtrOutput)
}

// Standard type (Custom or Default or Compliance only currently)
func (o SecurityStandardOutput) StandardType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringOutput { return v.StandardType }).(pulumi.StringOutput)
}

// Resource type
func (o SecurityStandardOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityStandard) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SecurityStandardOutput{})
}
