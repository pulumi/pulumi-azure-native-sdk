// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package security

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
// Azure REST API version: 2024-01-01.
type Pricing struct {
	pulumi.CustomResourceState

	// Optional. True if the plan is deprecated. If there are replacing plans they will appear in `replacedBy` property
	Deprecated pulumi.BoolOutput `pulumi:"deprecated"`
	// Optional. If `pricingTier` is `Standard` then this property holds the date of the last time the `pricingTier` was set to `Standard`, when available (e.g 2023-03-01T12:42:42.1921106Z).
	EnablementTime pulumi.StringOutput `pulumi:"enablementTime"`
	// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
	Enforce pulumi.StringPtrOutput `pulumi:"enforce"`
	// Optional. List of extensions offered under a plan.
	Extensions ExtensionResponseArrayOutput `pulumi:"extensions"`
	// The duration left for the subscriptions free trial period - in ISO 8601 format (e.g. P3Y6M4DT12H30M5S).
	FreeTrialRemainingTime pulumi.StringOutput `pulumi:"freeTrialRemainingTime"`
	// "inherited" = "True" indicates that the current scope inherits its pricing configuration from its parent. The ID of the parent scope that provides the inherited configuration is displayed in the "inheritedFrom" field. On the other hand, "inherited" = "False" indicates that the current scope has its own pricing configuration explicitly set, and does not inherit from its parent. This field is read only and available only for resource-level pricing.
	Inherited pulumi.StringOutput `pulumi:"inherited"`
	// The id of the scope inherited from. "Null" if not inherited. This field is only available for resource-level pricing.
	InheritedFrom pulumi.StringOutput `pulumi:"inheritedFrom"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
	PricingTier pulumi.StringOutput `pulumi:"pricingTier"`
	// Optional. List of plans that replace this plan. This property exists only if this plan is deprecated.
	ReplacedBy pulumi.StringArrayOutput `pulumi:"replacedBy"`
	// This field is available for subscription-level only, and reflects the coverage status of the resources under the subscription. Please note: The "pricingTier" field reflects the plan status of the subscription. However, since the plan status can also be defined at the resource level, there might be misalignment between the subscription's plan status and the resource status. This field helps indicate the coverage status of the resources.
	ResourcesCoverageStatus pulumi.StringOutput `pulumi:"resourcesCoverageStatus"`
	// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
	SubPlan pulumi.StringPtrOutput `pulumi:"subPlan"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPricing registers a new resource with the given unique name, arguments, and options.
func NewPricing(ctx *pulumi.Context,
	name string, args *PricingArgs, opts ...pulumi.ResourceOption) (*Pricing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PricingTier == nil {
		return nil, errors.New("invalid value for required argument 'PricingTier'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:security/v20240101:Pricing"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Pricing
	err := ctx.RegisterResource("azure-native:security:Pricing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPricing gets an existing Pricing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPricing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PricingState, opts ...pulumi.ResourceOption) (*Pricing, error) {
	var resource Pricing
	err := ctx.ReadResource("azure-native:security:Pricing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pricing resources.
type pricingState struct {
}

type PricingState struct {
}

func (PricingState) ElementType() reflect.Type {
	return reflect.TypeOf((*pricingState)(nil)).Elem()
}

type pricingArgs struct {
	// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
	Enforce *string `pulumi:"enforce"`
	// Optional. List of extensions offered under a plan.
	Extensions []Extension `pulumi:"extensions"`
	// name of the pricing configuration
	PricingName *string `pulumi:"pricingName"`
	// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
	PricingTier string `pulumi:"pricingTier"`
	// The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
	ScopeId string `pulumi:"scopeId"`
	// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
	SubPlan *string `pulumi:"subPlan"`
}

// The set of arguments for constructing a Pricing resource.
type PricingArgs struct {
	// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
	Enforce pulumi.StringPtrInput
	// Optional. List of extensions offered under a plan.
	Extensions ExtensionArrayInput
	// name of the pricing configuration
	PricingName pulumi.StringPtrInput
	// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
	PricingTier pulumi.StringInput
	// The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
	ScopeId pulumi.StringInput
	// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
	SubPlan pulumi.StringPtrInput
}

func (PricingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pricingArgs)(nil)).Elem()
}

type PricingInput interface {
	pulumi.Input

	ToPricingOutput() PricingOutput
	ToPricingOutputWithContext(ctx context.Context) PricingOutput
}

func (*Pricing) ElementType() reflect.Type {
	return reflect.TypeOf((**Pricing)(nil)).Elem()
}

func (i *Pricing) ToPricingOutput() PricingOutput {
	return i.ToPricingOutputWithContext(context.Background())
}

func (i *Pricing) ToPricingOutputWithContext(ctx context.Context) PricingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PricingOutput)
}

type PricingOutput struct{ *pulumi.OutputState }

func (PricingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pricing)(nil)).Elem()
}

func (o PricingOutput) ToPricingOutput() PricingOutput {
	return o
}

func (o PricingOutput) ToPricingOutputWithContext(ctx context.Context) PricingOutput {
	return o
}

// Optional. True if the plan is deprecated. If there are replacing plans they will appear in `replacedBy` property
func (o PricingOutput) Deprecated() pulumi.BoolOutput {
	return o.ApplyT(func(v *Pricing) pulumi.BoolOutput { return v.Deprecated }).(pulumi.BoolOutput)
}

// Optional. If `pricingTier` is `Standard` then this property holds the date of the last time the `pricingTier` was set to `Standard`, when available (e.g 2023-03-01T12:42:42.1921106Z).
func (o PricingOutput) EnablementTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.EnablementTime }).(pulumi.StringOutput)
}

// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
func (o PricingOutput) Enforce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringPtrOutput { return v.Enforce }).(pulumi.StringPtrOutput)
}

// Optional. List of extensions offered under a plan.
func (o PricingOutput) Extensions() ExtensionResponseArrayOutput {
	return o.ApplyT(func(v *Pricing) ExtensionResponseArrayOutput { return v.Extensions }).(ExtensionResponseArrayOutput)
}

// The duration left for the subscriptions free trial period - in ISO 8601 format (e.g. P3Y6M4DT12H30M5S).
func (o PricingOutput) FreeTrialRemainingTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.FreeTrialRemainingTime }).(pulumi.StringOutput)
}

// "inherited" = "True" indicates that the current scope inherits its pricing configuration from its parent. The ID of the parent scope that provides the inherited configuration is displayed in the "inheritedFrom" field. On the other hand, "inherited" = "False" indicates that the current scope has its own pricing configuration explicitly set, and does not inherit from its parent. This field is read only and available only for resource-level pricing.
func (o PricingOutput) Inherited() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.Inherited }).(pulumi.StringOutput)
}

// The id of the scope inherited from. "Null" if not inherited. This field is only available for resource-level pricing.
func (o PricingOutput) InheritedFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.InheritedFrom }).(pulumi.StringOutput)
}

// Resource name
func (o PricingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
func (o PricingOutput) PricingTier() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.PricingTier }).(pulumi.StringOutput)
}

// Optional. List of plans that replace this plan. This property exists only if this plan is deprecated.
func (o PricingOutput) ReplacedBy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringArrayOutput { return v.ReplacedBy }).(pulumi.StringArrayOutput)
}

// This field is available for subscription-level only, and reflects the coverage status of the resources under the subscription. Please note: The "pricingTier" field reflects the plan status of the subscription. However, since the plan status can also be defined at the resource level, there might be misalignment between the subscription's plan status and the resource status. This field helps indicate the coverage status of the resources.
func (o PricingOutput) ResourcesCoverageStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.ResourcesCoverageStatus }).(pulumi.StringOutput)
}

// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' & 'P2', where for resource level only 'P1' sub plan is supported.
func (o PricingOutput) SubPlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringPtrOutput { return v.SubPlan }).(pulumi.StringPtrOutput)
}

// Resource type
func (o PricingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Pricing) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PricingOutput{})
}
