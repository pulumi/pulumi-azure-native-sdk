// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of the action that will be triggered by the Automation
type ActionType string

const (
	ActionTypeLogicApp  = ActionType("LogicApp")
	ActionTypeEventHub  = ActionType("EventHub")
	ActionTypeWorkspace = ActionType("Workspace")
)

// A valid event source type.
type EventSource string

const (
	EventSourceAssessments                            = EventSource("Assessments")
	EventSourceAssessmentsSnapshot                    = EventSource("AssessmentsSnapshot")
	EventSourceSubAssessments                         = EventSource("SubAssessments")
	EventSourceSubAssessmentsSnapshot                 = EventSource("SubAssessmentsSnapshot")
	EventSourceAlerts                                 = EventSource("Alerts")
	EventSourceSecureScores                           = EventSource("SecureScores")
	EventSourceSecureScoresSnapshot                   = EventSource("SecureScoresSnapshot")
	EventSourceSecureScoreControls                    = EventSource("SecureScoreControls")
	EventSourceSecureScoreControlsSnapshot            = EventSource("SecureScoreControlsSnapshot")
	EventSourceRegulatoryComplianceAssessment         = EventSource("RegulatoryComplianceAssessment")
	EventSourceRegulatoryComplianceAssessmentSnapshot = EventSource("RegulatoryComplianceAssessmentSnapshot")
	EventSourceAttackPaths                            = EventSource("AttackPaths")
	EventSourceAttackPathsSnapshot                    = EventSource("AttackPathsSnapshot")
)

func (EventSource) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSource)(nil)).Elem()
}

func (e EventSource) ToEventSourceOutput() EventSourceOutput {
	return pulumi.ToOutput(e).(EventSourceOutput)
}

func (e EventSource) ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventSourceOutput)
}

func (e EventSource) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return e.ToEventSourcePtrOutputWithContext(context.Background())
}

func (e EventSource) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return EventSource(e).ToEventSourceOutputWithContext(ctx).ToEventSourcePtrOutputWithContext(ctx)
}

func (e EventSource) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventSource) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventSource) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventSource) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventSourceOutput struct{ *pulumi.OutputState }

func (EventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSource)(nil)).Elem()
}

func (o EventSourceOutput) ToEventSourceOutput() EventSourceOutput {
	return o
}

func (o EventSourceOutput) ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput {
	return o
}

func (o EventSourceOutput) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return o.ToEventSourcePtrOutputWithContext(context.Background())
}

func (o EventSourceOutput) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSource) *EventSource {
		return &v
	}).(EventSourcePtrOutput)
}

func (o EventSourceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventSourceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventSource) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventSourceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventSourceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventSource) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventSourcePtrOutput struct{ *pulumi.OutputState }

func (EventSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSource)(nil)).Elem()
}

func (o EventSourcePtrOutput) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return o
}

func (o EventSourcePtrOutput) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return o
}

func (o EventSourcePtrOutput) Elem() EventSourceOutput {
	return o.ApplyT(func(v *EventSource) EventSource {
		if v != nil {
			return *v
		}
		var ret EventSource
		return ret
	}).(EventSourceOutput)
}

func (o EventSourcePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventSourcePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventSource) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventSourceInput is an input type that accepts values of the EventSource enum
// A concrete instance of `EventSourceInput` can be one of the following:
//
//	EventSourceAssessments
//	EventSourceAssessmentsSnapshot
//	EventSourceSubAssessments
//	EventSourceSubAssessmentsSnapshot
//	EventSourceAlerts
//	EventSourceSecureScores
//	EventSourceSecureScoresSnapshot
//	EventSourceSecureScoreControls
//	EventSourceSecureScoreControlsSnapshot
//	EventSourceRegulatoryComplianceAssessment
//	EventSourceRegulatoryComplianceAssessmentSnapshot
//	EventSourceAttackPaths
//	EventSourceAttackPathsSnapshot
type EventSourceInput interface {
	pulumi.Input

	ToEventSourceOutput() EventSourceOutput
	ToEventSourceOutputWithContext(context.Context) EventSourceOutput
}

var eventSourcePtrType = reflect.TypeOf((**EventSource)(nil)).Elem()

type EventSourcePtrInput interface {
	pulumi.Input

	ToEventSourcePtrOutput() EventSourcePtrOutput
	ToEventSourcePtrOutputWithContext(context.Context) EventSourcePtrOutput
}

type eventSourcePtr string

func EventSourcePtr(v string) EventSourcePtrInput {
	return (*eventSourcePtr)(&v)
}

func (*eventSourcePtr) ElementType() reflect.Type {
	return eventSourcePtrType
}

func (in *eventSourcePtr) ToEventSourcePtrOutput() EventSourcePtrOutput {
	return pulumi.ToOutput(in).(EventSourcePtrOutput)
}

func (in *eventSourcePtr) ToEventSourcePtrOutputWithContext(ctx context.Context) EventSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventSourcePtrOutput)
}

// Defines the minimal attach path risk level which will be sent as email notifications
type MinimalRiskLevel string

const (
	// Get notifications on new attack paths with Critical risk level
	MinimalRiskLevelCritical = MinimalRiskLevel("Critical")
	// Get notifications on new attack paths with High or Critical risk level
	MinimalRiskLevelHigh = MinimalRiskLevel("High")
	// Get notifications on new attach paths with Medium, High or Critical risk level
	MinimalRiskLevelMedium = MinimalRiskLevel("Medium")
	// Get notifications on new attach paths with Low, Medium, High or Critical risk level
	MinimalRiskLevelLow = MinimalRiskLevel("Low")
)

func (MinimalRiskLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*MinimalRiskLevel)(nil)).Elem()
}

func (e MinimalRiskLevel) ToMinimalRiskLevelOutput() MinimalRiskLevelOutput {
	return pulumi.ToOutput(e).(MinimalRiskLevelOutput)
}

func (e MinimalRiskLevel) ToMinimalRiskLevelOutputWithContext(ctx context.Context) MinimalRiskLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MinimalRiskLevelOutput)
}

func (e MinimalRiskLevel) ToMinimalRiskLevelPtrOutput() MinimalRiskLevelPtrOutput {
	return e.ToMinimalRiskLevelPtrOutputWithContext(context.Background())
}

func (e MinimalRiskLevel) ToMinimalRiskLevelPtrOutputWithContext(ctx context.Context) MinimalRiskLevelPtrOutput {
	return MinimalRiskLevel(e).ToMinimalRiskLevelOutputWithContext(ctx).ToMinimalRiskLevelPtrOutputWithContext(ctx)
}

func (e MinimalRiskLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MinimalRiskLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MinimalRiskLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MinimalRiskLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MinimalRiskLevelOutput struct{ *pulumi.OutputState }

func (MinimalRiskLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MinimalRiskLevel)(nil)).Elem()
}

func (o MinimalRiskLevelOutput) ToMinimalRiskLevelOutput() MinimalRiskLevelOutput {
	return o
}

func (o MinimalRiskLevelOutput) ToMinimalRiskLevelOutputWithContext(ctx context.Context) MinimalRiskLevelOutput {
	return o
}

func (o MinimalRiskLevelOutput) ToMinimalRiskLevelPtrOutput() MinimalRiskLevelPtrOutput {
	return o.ToMinimalRiskLevelPtrOutputWithContext(context.Background())
}

func (o MinimalRiskLevelOutput) ToMinimalRiskLevelPtrOutputWithContext(ctx context.Context) MinimalRiskLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MinimalRiskLevel) *MinimalRiskLevel {
		return &v
	}).(MinimalRiskLevelPtrOutput)
}

func (o MinimalRiskLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MinimalRiskLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MinimalRiskLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MinimalRiskLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MinimalRiskLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MinimalRiskLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MinimalRiskLevelPtrOutput struct{ *pulumi.OutputState }

func (MinimalRiskLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MinimalRiskLevel)(nil)).Elem()
}

func (o MinimalRiskLevelPtrOutput) ToMinimalRiskLevelPtrOutput() MinimalRiskLevelPtrOutput {
	return o
}

func (o MinimalRiskLevelPtrOutput) ToMinimalRiskLevelPtrOutputWithContext(ctx context.Context) MinimalRiskLevelPtrOutput {
	return o
}

func (o MinimalRiskLevelPtrOutput) Elem() MinimalRiskLevelOutput {
	return o.ApplyT(func(v *MinimalRiskLevel) MinimalRiskLevel {
		if v != nil {
			return *v
		}
		var ret MinimalRiskLevel
		return ret
	}).(MinimalRiskLevelOutput)
}

func (o MinimalRiskLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MinimalRiskLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MinimalRiskLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MinimalRiskLevelInput is an input type that accepts values of the MinimalRiskLevel enum
// A concrete instance of `MinimalRiskLevelInput` can be one of the following:
//
//	MinimalRiskLevelCritical
//	MinimalRiskLevelHigh
//	MinimalRiskLevelMedium
//	MinimalRiskLevelLow
type MinimalRiskLevelInput interface {
	pulumi.Input

	ToMinimalRiskLevelOutput() MinimalRiskLevelOutput
	ToMinimalRiskLevelOutputWithContext(context.Context) MinimalRiskLevelOutput
}

var minimalRiskLevelPtrType = reflect.TypeOf((**MinimalRiskLevel)(nil)).Elem()

type MinimalRiskLevelPtrInput interface {
	pulumi.Input

	ToMinimalRiskLevelPtrOutput() MinimalRiskLevelPtrOutput
	ToMinimalRiskLevelPtrOutputWithContext(context.Context) MinimalRiskLevelPtrOutput
}

type minimalRiskLevelPtr string

func MinimalRiskLevelPtr(v string) MinimalRiskLevelPtrInput {
	return (*minimalRiskLevelPtr)(&v)
}

func (*minimalRiskLevelPtr) ElementType() reflect.Type {
	return minimalRiskLevelPtrType
}

func (in *minimalRiskLevelPtr) ToMinimalRiskLevelPtrOutput() MinimalRiskLevelPtrOutput {
	return pulumi.ToOutput(in).(MinimalRiskLevelPtrOutput)
}

func (in *minimalRiskLevelPtr) ToMinimalRiskLevelPtrOutputWithContext(ctx context.Context) MinimalRiskLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MinimalRiskLevelPtrOutput)
}

// Defines the minimal alert severity which will be sent as email notifications
type MinimalSeverity string

const (
	// Get notifications on new alerts with High severity
	MinimalSeverityHigh = MinimalSeverity("High")
	// Get notifications on new alerts with Medium or High severity
	MinimalSeverityMedium = MinimalSeverity("Medium")
	// Get notifications on new alerts with Low, Medium or High severity
	MinimalSeverityLow = MinimalSeverity("Low")
)

func (MinimalSeverity) ElementType() reflect.Type {
	return reflect.TypeOf((*MinimalSeverity)(nil)).Elem()
}

func (e MinimalSeverity) ToMinimalSeverityOutput() MinimalSeverityOutput {
	return pulumi.ToOutput(e).(MinimalSeverityOutput)
}

func (e MinimalSeverity) ToMinimalSeverityOutputWithContext(ctx context.Context) MinimalSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MinimalSeverityOutput)
}

func (e MinimalSeverity) ToMinimalSeverityPtrOutput() MinimalSeverityPtrOutput {
	return e.ToMinimalSeverityPtrOutputWithContext(context.Background())
}

func (e MinimalSeverity) ToMinimalSeverityPtrOutputWithContext(ctx context.Context) MinimalSeverityPtrOutput {
	return MinimalSeverity(e).ToMinimalSeverityOutputWithContext(ctx).ToMinimalSeverityPtrOutputWithContext(ctx)
}

func (e MinimalSeverity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MinimalSeverity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MinimalSeverity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MinimalSeverity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MinimalSeverityOutput struct{ *pulumi.OutputState }

func (MinimalSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MinimalSeverity)(nil)).Elem()
}

func (o MinimalSeverityOutput) ToMinimalSeverityOutput() MinimalSeverityOutput {
	return o
}

func (o MinimalSeverityOutput) ToMinimalSeverityOutputWithContext(ctx context.Context) MinimalSeverityOutput {
	return o
}

func (o MinimalSeverityOutput) ToMinimalSeverityPtrOutput() MinimalSeverityPtrOutput {
	return o.ToMinimalSeverityPtrOutputWithContext(context.Background())
}

func (o MinimalSeverityOutput) ToMinimalSeverityPtrOutputWithContext(ctx context.Context) MinimalSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MinimalSeverity) *MinimalSeverity {
		return &v
	}).(MinimalSeverityPtrOutput)
}

func (o MinimalSeverityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MinimalSeverityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MinimalSeverity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MinimalSeverityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MinimalSeverityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MinimalSeverity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MinimalSeverityPtrOutput struct{ *pulumi.OutputState }

func (MinimalSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MinimalSeverity)(nil)).Elem()
}

func (o MinimalSeverityPtrOutput) ToMinimalSeverityPtrOutput() MinimalSeverityPtrOutput {
	return o
}

func (o MinimalSeverityPtrOutput) ToMinimalSeverityPtrOutputWithContext(ctx context.Context) MinimalSeverityPtrOutput {
	return o
}

func (o MinimalSeverityPtrOutput) Elem() MinimalSeverityOutput {
	return o.ApplyT(func(v *MinimalSeverity) MinimalSeverity {
		if v != nil {
			return *v
		}
		var ret MinimalSeverity
		return ret
	}).(MinimalSeverityOutput)
}

func (o MinimalSeverityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MinimalSeverityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MinimalSeverity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MinimalSeverityInput is an input type that accepts values of the MinimalSeverity enum
// A concrete instance of `MinimalSeverityInput` can be one of the following:
//
//	MinimalSeverityHigh
//	MinimalSeverityMedium
//	MinimalSeverityLow
type MinimalSeverityInput interface {
	pulumi.Input

	ToMinimalSeverityOutput() MinimalSeverityOutput
	ToMinimalSeverityOutputWithContext(context.Context) MinimalSeverityOutput
}

var minimalSeverityPtrType = reflect.TypeOf((**MinimalSeverity)(nil)).Elem()

type MinimalSeverityPtrInput interface {
	pulumi.Input

	ToMinimalSeverityPtrOutput() MinimalSeverityPtrOutput
	ToMinimalSeverityPtrOutputWithContext(context.Context) MinimalSeverityPtrOutput
}

type minimalSeverityPtr string

func MinimalSeverityPtr(v string) MinimalSeverityPtrInput {
	return (*minimalSeverityPtr)(&v)
}

func (*minimalSeverityPtr) ElementType() reflect.Type {
	return minimalSeverityPtrType
}

func (in *minimalSeverityPtr) ToMinimalSeverityPtrOutput() MinimalSeverityPtrOutput {
	return pulumi.ToOutput(in).(MinimalSeverityPtrOutput)
}

func (in *minimalSeverityPtr) ToMinimalSeverityPtrOutputWithContext(ctx context.Context) MinimalSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MinimalSeverityPtrOutput)
}

// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
type Operator string

const (
	// Applies for decimal and non-decimal operands
	OperatorEquals = Operator("Equals")
	// Applies only for decimal operands
	OperatorGreaterThan = Operator("GreaterThan")
	// Applies only for decimal operands
	OperatorGreaterThanOrEqualTo = Operator("GreaterThanOrEqualTo")
	// Applies only for decimal operands
	OperatorLesserThan = Operator("LesserThan")
	// Applies only for decimal operands
	OperatorLesserThanOrEqualTo = Operator("LesserThanOrEqualTo")
	// Applies  for decimal and non-decimal operands
	OperatorNotEquals = Operator("NotEquals")
	// Applies only for non-decimal operands
	OperatorContains = Operator("Contains")
	// Applies only for non-decimal operands
	OperatorStartsWith = Operator("StartsWith")
	// Applies only for non-decimal operands
	OperatorEndsWith = Operator("EndsWith")
)

func (Operator) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (e Operator) ToOperatorOutput() OperatorOutput {
	return pulumi.ToOutput(e).(OperatorOutput)
}

func (e Operator) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorOutput)
}

func (e Operator) ToOperatorPtrOutput() OperatorPtrOutput {
	return e.ToOperatorPtrOutputWithContext(context.Background())
}

func (e Operator) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return Operator(e).ToOperatorOutputWithContext(ctx).ToOperatorPtrOutputWithContext(ctx)
}

func (e Operator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Operator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorOutput struct{ *pulumi.OutputState }

func (OperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (o OperatorOutput) ToOperatorOutput() OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o.ToOperatorPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Operator) *Operator {
		return &v
	}).(OperatorPtrOutput)
}

func (o OperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorPtrOutput struct{ *pulumi.OutputState }

func (OperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Operator)(nil)).Elem()
}

func (o OperatorPtrOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) Elem() OperatorOutput {
	return o.ApplyT(func(v *Operator) Operator {
		if v != nil {
			return *v
		}
		var ret Operator
		return ret
	}).(OperatorOutput)
}

func (o OperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Operator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatorInput is an input type that accepts values of the Operator enum
// A concrete instance of `OperatorInput` can be one of the following:
//
//	OperatorEquals
//	OperatorGreaterThan
//	OperatorGreaterThanOrEqualTo
//	OperatorLesserThan
//	OperatorLesserThanOrEqualTo
//	OperatorNotEquals
//	OperatorContains
//	OperatorStartsWith
//	OperatorEndsWith
type OperatorInput interface {
	pulumi.Input

	ToOperatorOutput() OperatorOutput
	ToOperatorOutputWithContext(context.Context) OperatorOutput
}

var operatorPtrType = reflect.TypeOf((**Operator)(nil)).Elem()

type OperatorPtrInput interface {
	pulumi.Input

	ToOperatorPtrOutput() OperatorPtrOutput
	ToOperatorPtrOutputWithContext(context.Context) OperatorPtrOutput
}

type operatorPtr string

func OperatorPtr(v string) OperatorPtrInput {
	return (*operatorPtr)(&v)
}

func (*operatorPtr) ElementType() reflect.Type {
	return operatorPtrType
}

func (in *operatorPtr) ToOperatorPtrOutput() OperatorPtrOutput {
	return pulumi.ToOutput(in).(OperatorPtrOutput)
}

func (in *operatorPtr) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorPtrOutput)
}

// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
type PropertyType string

const (
	PropertyTypeString  = PropertyType("String")
	PropertyTypeInteger = PropertyType("Integer")
	PropertyTypeNumber  = PropertyType("Number")
	PropertyTypeBoolean = PropertyType("Boolean")
)

func (PropertyType) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyType)(nil)).Elem()
}

func (e PropertyType) ToPropertyTypeOutput() PropertyTypeOutput {
	return pulumi.ToOutput(e).(PropertyTypeOutput)
}

func (e PropertyType) ToPropertyTypeOutputWithContext(ctx context.Context) PropertyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PropertyTypeOutput)
}

func (e PropertyType) ToPropertyTypePtrOutput() PropertyTypePtrOutput {
	return e.ToPropertyTypePtrOutputWithContext(context.Background())
}

func (e PropertyType) ToPropertyTypePtrOutputWithContext(ctx context.Context) PropertyTypePtrOutput {
	return PropertyType(e).ToPropertyTypeOutputWithContext(ctx).ToPropertyTypePtrOutputWithContext(ctx)
}

func (e PropertyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PropertyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PropertyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PropertyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PropertyTypeOutput struct{ *pulumi.OutputState }

func (PropertyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyType)(nil)).Elem()
}

func (o PropertyTypeOutput) ToPropertyTypeOutput() PropertyTypeOutput {
	return o
}

func (o PropertyTypeOutput) ToPropertyTypeOutputWithContext(ctx context.Context) PropertyTypeOutput {
	return o
}

func (o PropertyTypeOutput) ToPropertyTypePtrOutput() PropertyTypePtrOutput {
	return o.ToPropertyTypePtrOutputWithContext(context.Background())
}

func (o PropertyTypeOutput) ToPropertyTypePtrOutputWithContext(ctx context.Context) PropertyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PropertyType) *PropertyType {
		return &v
	}).(PropertyTypePtrOutput)
}

func (o PropertyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PropertyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PropertyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PropertyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PropertyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PropertyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PropertyTypePtrOutput struct{ *pulumi.OutputState }

func (PropertyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyType)(nil)).Elem()
}

func (o PropertyTypePtrOutput) ToPropertyTypePtrOutput() PropertyTypePtrOutput {
	return o
}

func (o PropertyTypePtrOutput) ToPropertyTypePtrOutputWithContext(ctx context.Context) PropertyTypePtrOutput {
	return o
}

func (o PropertyTypePtrOutput) Elem() PropertyTypeOutput {
	return o.ApplyT(func(v *PropertyType) PropertyType {
		if v != nil {
			return *v
		}
		var ret PropertyType
		return ret
	}).(PropertyTypeOutput)
}

func (o PropertyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PropertyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PropertyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PropertyTypeInput is an input type that accepts values of the PropertyType enum
// A concrete instance of `PropertyTypeInput` can be one of the following:
//
//	PropertyTypeString
//	PropertyTypeInteger
//	PropertyTypeNumber
//	PropertyTypeBoolean
type PropertyTypeInput interface {
	pulumi.Input

	ToPropertyTypeOutput() PropertyTypeOutput
	ToPropertyTypeOutputWithContext(context.Context) PropertyTypeOutput
}

var propertyTypePtrType = reflect.TypeOf((**PropertyType)(nil)).Elem()

type PropertyTypePtrInput interface {
	pulumi.Input

	ToPropertyTypePtrOutput() PropertyTypePtrOutput
	ToPropertyTypePtrOutputWithContext(context.Context) PropertyTypePtrOutput
}

type propertyTypePtr string

func PropertyTypePtr(v string) PropertyTypePtrInput {
	return (*propertyTypePtr)(&v)
}

func (*propertyTypePtr) ElementType() reflect.Type {
	return propertyTypePtrType
}

func (in *propertyTypePtr) ToPropertyTypePtrOutput() PropertyTypePtrOutput {
	return pulumi.ToOutput(in).(PropertyTypePtrOutput)
}

func (in *propertyTypePtr) ToPropertyTypePtrOutputWithContext(ctx context.Context) PropertyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PropertyTypePtrOutput)
}

// A possible role to configure sending security notification alerts to
type SecurityContactRole string

const (
	// If enabled, send notification on new alerts to the account admins
	SecurityContactRoleAccountAdmin = SecurityContactRole("AccountAdmin")
	// If enabled, send notification on new alerts to the service admins
	SecurityContactRoleServiceAdmin = SecurityContactRole("ServiceAdmin")
	// If enabled, send notification on new alerts to the subscription owners
	SecurityContactRoleOwner = SecurityContactRole("Owner")
	// If enabled, send notification on new alerts to the subscription contributors
	SecurityContactRoleContributor = SecurityContactRole("Contributor")
)

func (SecurityContactRole) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContactRole)(nil)).Elem()
}

func (e SecurityContactRole) ToSecurityContactRoleOutput() SecurityContactRoleOutput {
	return pulumi.ToOutput(e).(SecurityContactRoleOutput)
}

func (e SecurityContactRole) ToSecurityContactRoleOutputWithContext(ctx context.Context) SecurityContactRoleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SecurityContactRoleOutput)
}

func (e SecurityContactRole) ToSecurityContactRolePtrOutput() SecurityContactRolePtrOutput {
	return e.ToSecurityContactRolePtrOutputWithContext(context.Background())
}

func (e SecurityContactRole) ToSecurityContactRolePtrOutputWithContext(ctx context.Context) SecurityContactRolePtrOutput {
	return SecurityContactRole(e).ToSecurityContactRoleOutputWithContext(ctx).ToSecurityContactRolePtrOutputWithContext(ctx)
}

func (e SecurityContactRole) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityContactRole) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityContactRole) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecurityContactRole) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SecurityContactRoleOutput struct{ *pulumi.OutputState }

func (SecurityContactRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContactRole)(nil)).Elem()
}

func (o SecurityContactRoleOutput) ToSecurityContactRoleOutput() SecurityContactRoleOutput {
	return o
}

func (o SecurityContactRoleOutput) ToSecurityContactRoleOutputWithContext(ctx context.Context) SecurityContactRoleOutput {
	return o
}

func (o SecurityContactRoleOutput) ToSecurityContactRolePtrOutput() SecurityContactRolePtrOutput {
	return o.ToSecurityContactRolePtrOutputWithContext(context.Background())
}

func (o SecurityContactRoleOutput) ToSecurityContactRolePtrOutputWithContext(ctx context.Context) SecurityContactRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityContactRole) *SecurityContactRole {
		return &v
	}).(SecurityContactRolePtrOutput)
}

func (o SecurityContactRoleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SecurityContactRoleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecurityContactRole) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SecurityContactRoleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecurityContactRoleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecurityContactRole) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SecurityContactRolePtrOutput struct{ *pulumi.OutputState }

func (SecurityContactRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContactRole)(nil)).Elem()
}

func (o SecurityContactRolePtrOutput) ToSecurityContactRolePtrOutput() SecurityContactRolePtrOutput {
	return o
}

func (o SecurityContactRolePtrOutput) ToSecurityContactRolePtrOutputWithContext(ctx context.Context) SecurityContactRolePtrOutput {
	return o
}

func (o SecurityContactRolePtrOutput) Elem() SecurityContactRoleOutput {
	return o.ApplyT(func(v *SecurityContactRole) SecurityContactRole {
		if v != nil {
			return *v
		}
		var ret SecurityContactRole
		return ret
	}).(SecurityContactRoleOutput)
}

func (o SecurityContactRolePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecurityContactRolePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SecurityContactRole) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SecurityContactRoleInput is an input type that accepts values of the SecurityContactRole enum
// A concrete instance of `SecurityContactRoleInput` can be one of the following:
//
//	SecurityContactRoleAccountAdmin
//	SecurityContactRoleServiceAdmin
//	SecurityContactRoleOwner
//	SecurityContactRoleContributor
type SecurityContactRoleInput interface {
	pulumi.Input

	ToSecurityContactRoleOutput() SecurityContactRoleOutput
	ToSecurityContactRoleOutputWithContext(context.Context) SecurityContactRoleOutput
}

var securityContactRolePtrType = reflect.TypeOf((**SecurityContactRole)(nil)).Elem()

type SecurityContactRolePtrInput interface {
	pulumi.Input

	ToSecurityContactRolePtrOutput() SecurityContactRolePtrOutput
	ToSecurityContactRolePtrOutputWithContext(context.Context) SecurityContactRolePtrOutput
}

type securityContactRolePtr string

func SecurityContactRolePtr(v string) SecurityContactRolePtrInput {
	return (*securityContactRolePtr)(&v)
}

func (*securityContactRolePtr) ElementType() reflect.Type {
	return securityContactRolePtrType
}

func (in *securityContactRolePtr) ToSecurityContactRolePtrOutput() SecurityContactRolePtrOutput {
	return pulumi.ToOutput(in).(SecurityContactRolePtrOutput)
}

func (in *securityContactRolePtr) ToSecurityContactRolePtrOutputWithContext(ctx context.Context) SecurityContactRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SecurityContactRolePtrOutput)
}

// The source type that will trigger the notification
type SourceType string

const (
	SourceTypeAlert      = SourceType("Alert")
	SourceTypeAttackPath = SourceType("AttackPath")
)

// Defines whether to send email notifications from AMicrosoft Defender for Cloud to persons with specific RBAC roles on the subscription.
type State string

const (
	// Send notification on new alerts to the subscription's admins
	StateOn = State("On")
	// Don't send notification on new alerts to the subscription's admins
	StateOff = State("Off")
)

func (State) ElementType() reflect.Type {
	return reflect.TypeOf((*State)(nil)).Elem()
}

func (e State) ToStateOutput() StateOutput {
	return pulumi.ToOutput(e).(StateOutput)
}

func (e State) ToStateOutputWithContext(ctx context.Context) StateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StateOutput)
}

func (e State) ToStatePtrOutput() StatePtrOutput {
	return e.ToStatePtrOutputWithContext(context.Background())
}

func (e State) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return State(e).ToStateOutputWithContext(ctx).ToStatePtrOutputWithContext(ctx)
}

func (e State) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e State) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e State) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e State) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StateOutput struct{ *pulumi.OutputState }

func (StateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*State)(nil)).Elem()
}

func (o StateOutput) ToStateOutput() StateOutput {
	return o
}

func (o StateOutput) ToStateOutputWithContext(ctx context.Context) StateOutput {
	return o
}

func (o StateOutput) ToStatePtrOutput() StatePtrOutput {
	return o.ToStatePtrOutputWithContext(context.Background())
}

func (o StateOutput) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v State) *State {
		return &v
	}).(StatePtrOutput)
}

func (o StateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e State) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e State) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatePtrOutput struct{ *pulumi.OutputState }

func (StatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**State)(nil)).Elem()
}

func (o StatePtrOutput) ToStatePtrOutput() StatePtrOutput {
	return o
}

func (o StatePtrOutput) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return o
}

func (o StatePtrOutput) Elem() StateOutput {
	return o.ApplyT(func(v *State) State {
		if v != nil {
			return *v
		}
		var ret State
		return ret
	}).(StateOutput)
}

func (o StatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *State) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StateInput is an input type that accepts values of the State enum
// A concrete instance of `StateInput` can be one of the following:
//
//	StateOn
//	StateOff
type StateInput interface {
	pulumi.Input

	ToStateOutput() StateOutput
	ToStateOutputWithContext(context.Context) StateOutput
}

var statePtrType = reflect.TypeOf((**State)(nil)).Elem()

type StatePtrInput interface {
	pulumi.Input

	ToStatePtrOutput() StatePtrOutput
	ToStatePtrOutputWithContext(context.Context) StatePtrOutput
}

type statePtr string

func StatePtr(v string) StatePtrInput {
	return (*statePtr)(&v)
}

func (*statePtr) ElementType() reflect.Type {
	return statePtrType
}

func (in *statePtr) ToStatePtrOutput() StatePtrOutput {
	return pulumi.ToOutput(in).(StatePtrOutput)
}

func (in *statePtr) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StatePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EventSourceOutput{})
	pulumi.RegisterOutputType(EventSourcePtrOutput{})
	pulumi.RegisterOutputType(MinimalRiskLevelOutput{})
	pulumi.RegisterOutputType(MinimalRiskLevelPtrOutput{})
	pulumi.RegisterOutputType(MinimalSeverityOutput{})
	pulumi.RegisterOutputType(MinimalSeverityPtrOutput{})
	pulumi.RegisterOutputType(OperatorOutput{})
	pulumi.RegisterOutputType(OperatorPtrOutput{})
	pulumi.RegisterOutputType(PropertyTypeOutput{})
	pulumi.RegisterOutputType(PropertyTypePtrOutput{})
	pulumi.RegisterOutputType(SecurityContactRoleOutput{})
	pulumi.RegisterOutputType(SecurityContactRolePtrOutput{})
	pulumi.RegisterOutputType(StateOutput{})
	pulumi.RegisterOutputType(StatePtrOutput{})
}
