// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package security

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Governance rule over a given scope
// Azure REST API version: 2022-01-01-preview.
type GovernanceRule struct {
	pulumi.CustomResourceState

	// Description of the governance rule
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display name of the governance rule
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Excluded scopes, filter out the descendants of the scope (on management scopes)
	ExcludedScopes pulumi.StringArrayOutput `pulumi:"excludedScopes"`
	// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
	GovernanceEmailNotification GovernanceRuleEmailNotificationResponsePtrOutput `pulumi:"governanceEmailNotification"`
	// Defines whether the rule is management scope rule (master connector as a single scope or management scope)
	IncludeMemberScopes pulumi.BoolPtrOutput `pulumi:"includeMemberScopes"`
	// Defines whether the rule is active/inactive
	IsDisabled pulumi.BoolPtrOutput `pulumi:"isDisabled"`
	// Defines whether there is a grace period on the governance rule
	IsGracePeriod pulumi.BoolPtrOutput `pulumi:"isGracePeriod"`
	// The governance rule metadata
	Metadata GovernanceRuleMetadataResponsePtrOutput `pulumi:"metadata"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
	OwnerSource GovernanceRuleOwnerSourceResponseOutput `pulumi:"ownerSource"`
	// Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
	RemediationTimeframe pulumi.StringPtrOutput `pulumi:"remediationTimeframe"`
	// The governance rule priority, priority to the lower number. Rules with the same priority on the same scope will not be allowed
	RulePriority pulumi.IntOutput `pulumi:"rulePriority"`
	// The rule type of the governance rule, defines the source of the rule e.g. Integrated
	RuleType pulumi.StringOutput `pulumi:"ruleType"`
	// The governance rule source, what the rule affects, e.g. Assessments
	SourceResourceType pulumi.StringOutput `pulumi:"sourceResourceType"`
	// The tenantId (GUID)
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGovernanceRule registers a new resource with the given unique name, arguments, and options.
func NewGovernanceRule(ctx *pulumi.Context,
	name string, args *GovernanceRuleArgs, opts ...pulumi.ResourceOption) (*GovernanceRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.OwnerSource == nil {
		return nil, errors.New("invalid value for required argument 'OwnerSource'")
	}
	if args.RulePriority == nil {
		return nil, errors.New("invalid value for required argument 'RulePriority'")
	}
	if args.RuleType == nil {
		return nil, errors.New("invalid value for required argument 'RuleType'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	if args.SourceResourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceResourceType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:security/v20220101preview:GovernanceRule"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GovernanceRule
	err := ctx.RegisterResource("azure-native:security:GovernanceRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGovernanceRule gets an existing GovernanceRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGovernanceRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GovernanceRuleState, opts ...pulumi.ResourceOption) (*GovernanceRule, error) {
	var resource GovernanceRule
	err := ctx.ReadResource("azure-native:security:GovernanceRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GovernanceRule resources.
type governanceRuleState struct {
}

type GovernanceRuleState struct {
}

func (GovernanceRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*governanceRuleState)(nil)).Elem()
}

type governanceRuleArgs struct {
	// Description of the governance rule
	Description *string `pulumi:"description"`
	// Display name of the governance rule
	DisplayName string `pulumi:"displayName"`
	// Excluded scopes, filter out the descendants of the scope (on management scopes)
	ExcludedScopes []string `pulumi:"excludedScopes"`
	// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
	GovernanceEmailNotification *GovernanceRuleEmailNotification `pulumi:"governanceEmailNotification"`
	// Defines whether the rule is management scope rule (master connector as a single scope or management scope)
	IncludeMemberScopes *bool `pulumi:"includeMemberScopes"`
	// Defines whether the rule is active/inactive
	IsDisabled *bool `pulumi:"isDisabled"`
	// Defines whether there is a grace period on the governance rule
	IsGracePeriod *bool `pulumi:"isGracePeriod"`
	// The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
	OwnerSource GovernanceRuleOwnerSource `pulumi:"ownerSource"`
	// Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
	RemediationTimeframe *string `pulumi:"remediationTimeframe"`
	// The governance rule key - unique key for the standard governance rule (GUID)
	RuleId *string `pulumi:"ruleId"`
	// The governance rule priority, priority to the lower number. Rules with the same priority on the same scope will not be allowed
	RulePriority int `pulumi:"rulePriority"`
	// The rule type of the governance rule, defines the source of the rule e.g. Integrated
	RuleType string `pulumi:"ruleType"`
	// The scope of the Governance rules. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
	Scope string `pulumi:"scope"`
	// The governance rule source, what the rule affects, e.g. Assessments
	SourceResourceType string `pulumi:"sourceResourceType"`
}

// The set of arguments for constructing a GovernanceRule resource.
type GovernanceRuleArgs struct {
	// Description of the governance rule
	Description pulumi.StringPtrInput
	// Display name of the governance rule
	DisplayName pulumi.StringInput
	// Excluded scopes, filter out the descendants of the scope (on management scopes)
	ExcludedScopes pulumi.StringArrayInput
	// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
	GovernanceEmailNotification GovernanceRuleEmailNotificationPtrInput
	// Defines whether the rule is management scope rule (master connector as a single scope or management scope)
	IncludeMemberScopes pulumi.BoolPtrInput
	// Defines whether the rule is active/inactive
	IsDisabled pulumi.BoolPtrInput
	// Defines whether there is a grace period on the governance rule
	IsGracePeriod pulumi.BoolPtrInput
	// The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
	OwnerSource GovernanceRuleOwnerSourceInput
	// Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
	RemediationTimeframe pulumi.StringPtrInput
	// The governance rule key - unique key for the standard governance rule (GUID)
	RuleId pulumi.StringPtrInput
	// The governance rule priority, priority to the lower number. Rules with the same priority on the same scope will not be allowed
	RulePriority pulumi.IntInput
	// The rule type of the governance rule, defines the source of the rule e.g. Integrated
	RuleType pulumi.StringInput
	// The scope of the Governance rules. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
	Scope pulumi.StringInput
	// The governance rule source, what the rule affects, e.g. Assessments
	SourceResourceType pulumi.StringInput
}

func (GovernanceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*governanceRuleArgs)(nil)).Elem()
}

type GovernanceRuleInput interface {
	pulumi.Input

	ToGovernanceRuleOutput() GovernanceRuleOutput
	ToGovernanceRuleOutputWithContext(ctx context.Context) GovernanceRuleOutput
}

func (*GovernanceRule) ElementType() reflect.Type {
	return reflect.TypeOf((**GovernanceRule)(nil)).Elem()
}

func (i *GovernanceRule) ToGovernanceRuleOutput() GovernanceRuleOutput {
	return i.ToGovernanceRuleOutputWithContext(context.Background())
}

func (i *GovernanceRule) ToGovernanceRuleOutputWithContext(ctx context.Context) GovernanceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GovernanceRuleOutput)
}

func (i *GovernanceRule) ToOutput(ctx context.Context) pulumix.Output[*GovernanceRule] {
	return pulumix.Output[*GovernanceRule]{
		OutputState: i.ToGovernanceRuleOutputWithContext(ctx).OutputState,
	}
}

type GovernanceRuleOutput struct{ *pulumi.OutputState }

func (GovernanceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GovernanceRule)(nil)).Elem()
}

func (o GovernanceRuleOutput) ToGovernanceRuleOutput() GovernanceRuleOutput {
	return o
}

func (o GovernanceRuleOutput) ToGovernanceRuleOutputWithContext(ctx context.Context) GovernanceRuleOutput {
	return o
}

func (o GovernanceRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*GovernanceRule] {
	return pulumix.Output[*GovernanceRule]{
		OutputState: o.OutputState,
	}
}

// Description of the governance rule
func (o GovernanceRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of the governance rule
func (o GovernanceRuleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Excluded scopes, filter out the descendants of the scope (on management scopes)
func (o GovernanceRuleOutput) ExcludedScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringArrayOutput { return v.ExcludedScopes }).(pulumi.StringArrayOutput)
}

// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
func (o GovernanceRuleOutput) GovernanceEmailNotification() GovernanceRuleEmailNotificationResponsePtrOutput {
	return o.ApplyT(func(v *GovernanceRule) GovernanceRuleEmailNotificationResponsePtrOutput {
		return v.GovernanceEmailNotification
	}).(GovernanceRuleEmailNotificationResponsePtrOutput)
}

// Defines whether the rule is management scope rule (master connector as a single scope or management scope)
func (o GovernanceRuleOutput) IncludeMemberScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.BoolPtrOutput { return v.IncludeMemberScopes }).(pulumi.BoolPtrOutput)
}

// Defines whether the rule is active/inactive
func (o GovernanceRuleOutput) IsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.BoolPtrOutput { return v.IsDisabled }).(pulumi.BoolPtrOutput)
}

// Defines whether there is a grace period on the governance rule
func (o GovernanceRuleOutput) IsGracePeriod() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.BoolPtrOutput { return v.IsGracePeriod }).(pulumi.BoolPtrOutput)
}

// The governance rule metadata
func (o GovernanceRuleOutput) Metadata() GovernanceRuleMetadataResponsePtrOutput {
	return o.ApplyT(func(v *GovernanceRule) GovernanceRuleMetadataResponsePtrOutput { return v.Metadata }).(GovernanceRuleMetadataResponsePtrOutput)
}

// Resource name
func (o GovernanceRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
func (o GovernanceRuleOutput) OwnerSource() GovernanceRuleOwnerSourceResponseOutput {
	return o.ApplyT(func(v *GovernanceRule) GovernanceRuleOwnerSourceResponseOutput { return v.OwnerSource }).(GovernanceRuleOwnerSourceResponseOutput)
}

// Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
func (o GovernanceRuleOutput) RemediationTimeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringPtrOutput { return v.RemediationTimeframe }).(pulumi.StringPtrOutput)
}

// The governance rule priority, priority to the lower number. Rules with the same priority on the same scope will not be allowed
func (o GovernanceRuleOutput) RulePriority() pulumi.IntOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.IntOutput { return v.RulePriority }).(pulumi.IntOutput)
}

// The rule type of the governance rule, defines the source of the rule e.g. Integrated
func (o GovernanceRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringOutput { return v.RuleType }).(pulumi.StringOutput)
}

// The governance rule source, what the rule affects, e.g. Assessments
func (o GovernanceRuleOutput) SourceResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringOutput { return v.SourceResourceType }).(pulumi.StringOutput)
}

// The tenantId (GUID)
func (o GovernanceRuleOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Resource type
func (o GovernanceRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GovernanceRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GovernanceRuleOutput{})
}
