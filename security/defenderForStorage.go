// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package security

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Defender for Storage resource.
//
// Uses Azure REST API version 2024-10-01-preview. In version 2.x of the Azure Native provider, it used API version 2022-12-01-preview.
//
// Other available API versions: 2022-12-01-preview, 2024-08-01-preview, 2025-01-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native security [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type DefenderForStorage struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Defender for Storage resource properties.
	Properties DefenderForStorageSettingPropertiesResponseOutput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDefenderForStorage registers a new resource with the given unique name, arguments, and options.
func NewDefenderForStorage(ctx *pulumi.Context,
	name string, args *DefenderForStorageArgs, opts ...pulumi.ResourceOption) (*DefenderForStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:security/v20221201preview:DefenderForStorage"),
		},
		{
			Type: pulumi.String("azure-native:security/v20240801preview:DefenderForStorage"),
		},
		{
			Type: pulumi.String("azure-native:security/v20241001preview:DefenderForStorage"),
		},
		{
			Type: pulumi.String("azure-native:security/v20250101:DefenderForStorage"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DefenderForStorage
	err := ctx.RegisterResource("azure-native:security:DefenderForStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefenderForStorage gets an existing DefenderForStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefenderForStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefenderForStorageState, opts ...pulumi.ResourceOption) (*DefenderForStorage, error) {
	var resource DefenderForStorage
	err := ctx.ReadResource("azure-native:security:DefenderForStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefenderForStorage resources.
type defenderForStorageState struct {
}

type DefenderForStorageState struct {
}

func (DefenderForStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*defenderForStorageState)(nil)).Elem()
}

type defenderForStorageArgs struct {
	// Defender for Storage resource properties.
	Properties *DefenderForStorageSettingProperties `pulumi:"properties"`
	// The identifier of the resource.
	ResourceId string `pulumi:"resourceId"`
	// Defender for Storage setting name.
	SettingName *string `pulumi:"settingName"`
}

// The set of arguments for constructing a DefenderForStorage resource.
type DefenderForStorageArgs struct {
	// Defender for Storage resource properties.
	Properties DefenderForStorageSettingPropertiesPtrInput
	// The identifier of the resource.
	ResourceId pulumi.StringInput
	// Defender for Storage setting name.
	SettingName pulumi.StringPtrInput
}

func (DefenderForStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defenderForStorageArgs)(nil)).Elem()
}

type DefenderForStorageInput interface {
	pulumi.Input

	ToDefenderForStorageOutput() DefenderForStorageOutput
	ToDefenderForStorageOutputWithContext(ctx context.Context) DefenderForStorageOutput
}

func (*DefenderForStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenderForStorage)(nil)).Elem()
}

func (i *DefenderForStorage) ToDefenderForStorageOutput() DefenderForStorageOutput {
	return i.ToDefenderForStorageOutputWithContext(context.Background())
}

func (i *DefenderForStorage) ToDefenderForStorageOutputWithContext(ctx context.Context) DefenderForStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefenderForStorageOutput)
}

type DefenderForStorageOutput struct{ *pulumi.OutputState }

func (DefenderForStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefenderForStorage)(nil)).Elem()
}

func (o DefenderForStorageOutput) ToDefenderForStorageOutput() DefenderForStorageOutput {
	return o
}

func (o DefenderForStorageOutput) ToDefenderForStorageOutputWithContext(ctx context.Context) DefenderForStorageOutput {
	return o
}

// The Azure API version of the resource.
func (o DefenderForStorageOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DefenderForStorage) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Resource name
func (o DefenderForStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DefenderForStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defender for Storage resource properties.
func (o DefenderForStorageOutput) Properties() DefenderForStorageSettingPropertiesResponseOutput {
	return o.ApplyT(func(v *DefenderForStorage) DefenderForStorageSettingPropertiesResponseOutput { return v.Properties }).(DefenderForStorageSettingPropertiesResponseOutput)
}

// Resource type
func (o DefenderForStorageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DefenderForStorage) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DefenderForStorageOutput{})
}
