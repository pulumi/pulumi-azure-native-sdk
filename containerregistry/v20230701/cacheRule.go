// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230701

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An object that represents a cache rule for a container registry.
type CacheRule struct {
	pulumi.CustomResourceState

	// The creation date of the cache rule.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The ARM resource ID of the credential store which is associated with the cache rule.
	CredentialSetResourceId pulumi.StringPtrOutput `pulumi:"credentialSetResourceId"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Source repository pulled from upstream.
	SourceRepository pulumi.StringPtrOutput `pulumi:"sourceRepository"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Target repository specified in docker pull command.
	// Eg: docker pull myregistry.azurecr.io/{targetRepository}:{tag}
	TargetRepository pulumi.StringPtrOutput `pulumi:"targetRepository"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCacheRule registers a new resource with the given unique name, arguments, and options.
func NewCacheRule(ctx *pulumi.Context,
	name string, args *CacheRuleArgs, opts ...pulumi.ResourceOption) (*CacheRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistryName == nil {
		return nil, errors.New("invalid value for required argument 'RegistryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerregistry:CacheRule"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20230101preview:CacheRule"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20230601preview:CacheRule"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20230801preview:CacheRule"),
		},
		{
			Type: pulumi.String("azure-native:containerregistry/v20231101preview:CacheRule"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CacheRule
	err := ctx.RegisterResource("azure-native:containerregistry/v20230701:CacheRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCacheRule gets an existing CacheRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCacheRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheRuleState, opts ...pulumi.ResourceOption) (*CacheRule, error) {
	var resource CacheRule
	err := ctx.ReadResource("azure-native:containerregistry/v20230701:CacheRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CacheRule resources.
type cacheRuleState struct {
}

type CacheRuleState struct {
}

func (CacheRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheRuleState)(nil)).Elem()
}

type cacheRuleArgs struct {
	// The name of the cache rule.
	CacheRuleName *string `pulumi:"cacheRuleName"`
	// The ARM resource ID of the credential store which is associated with the cache rule.
	CredentialSetResourceId *string `pulumi:"credentialSetResourceId"`
	// The name of the container registry.
	RegistryName string `pulumi:"registryName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Source repository pulled from upstream.
	SourceRepository *string `pulumi:"sourceRepository"`
	// Target repository specified in docker pull command.
	// Eg: docker pull myregistry.azurecr.io/{targetRepository}:{tag}
	TargetRepository *string `pulumi:"targetRepository"`
}

// The set of arguments for constructing a CacheRule resource.
type CacheRuleArgs struct {
	// The name of the cache rule.
	CacheRuleName pulumi.StringPtrInput
	// The ARM resource ID of the credential store which is associated with the cache rule.
	CredentialSetResourceId pulumi.StringPtrInput
	// The name of the container registry.
	RegistryName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Source repository pulled from upstream.
	SourceRepository pulumi.StringPtrInput
	// Target repository specified in docker pull command.
	// Eg: docker pull myregistry.azurecr.io/{targetRepository}:{tag}
	TargetRepository pulumi.StringPtrInput
}

func (CacheRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheRuleArgs)(nil)).Elem()
}

type CacheRuleInput interface {
	pulumi.Input

	ToCacheRuleOutput() CacheRuleOutput
	ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput
}

func (*CacheRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRule)(nil)).Elem()
}

func (i *CacheRule) ToCacheRuleOutput() CacheRuleOutput {
	return i.ToCacheRuleOutputWithContext(context.Background())
}

func (i *CacheRule) ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRuleOutput)
}

type CacheRuleOutput struct{ *pulumi.OutputState }

func (CacheRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRule)(nil)).Elem()
}

func (o CacheRuleOutput) ToCacheRuleOutput() CacheRuleOutput {
	return o
}

func (o CacheRuleOutput) ToCacheRuleOutputWithContext(ctx context.Context) CacheRuleOutput {
	return o
}

// The creation date of the cache rule.
func (o CacheRuleOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// The ARM resource ID of the credential store which is associated with the cache rule.
func (o CacheRuleOutput) CredentialSetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.CredentialSetResourceId }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o CacheRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o CacheRuleOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Source repository pulled from upstream.
func (o CacheRuleOutput) SourceRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.SourceRepository }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o CacheRuleOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *CacheRule) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Target repository specified in docker pull command.
// Eg: docker pull myregistry.azurecr.io/{targetRepository}:{tag}
func (o CacheRuleOutput) TargetRepository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringPtrOutput { return v.TargetRepository }).(pulumi.StringPtrOutput)
}

// The type of the resource.
func (o CacheRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(CacheRuleOutput{})
}
