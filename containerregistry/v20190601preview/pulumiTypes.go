// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The properties that determine the run agent configuration.
type AgentProperties struct {
	// The CPU configuration in terms of number of cores required for the run.
	Cpu *int `pulumi:"cpu"`
}

// AgentPropertiesInput is an input type that accepts AgentPropertiesArgs and AgentPropertiesOutput values.
// You can construct a concrete instance of `AgentPropertiesInput` via:
//
//	AgentPropertiesArgs{...}
type AgentPropertiesInput interface {
	pulumi.Input

	ToAgentPropertiesOutput() AgentPropertiesOutput
	ToAgentPropertiesOutputWithContext(context.Context) AgentPropertiesOutput
}

// The properties that determine the run agent configuration.
type AgentPropertiesArgs struct {
	// The CPU configuration in terms of number of cores required for the run.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
}

func (AgentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentProperties)(nil)).Elem()
}

func (i AgentPropertiesArgs) ToAgentPropertiesOutput() AgentPropertiesOutput {
	return i.ToAgentPropertiesOutputWithContext(context.Background())
}

func (i AgentPropertiesArgs) ToAgentPropertiesOutputWithContext(ctx context.Context) AgentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPropertiesOutput)
}

func (i AgentPropertiesArgs) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return i.ToAgentPropertiesPtrOutputWithContext(context.Background())
}

func (i AgentPropertiesArgs) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPropertiesOutput).ToAgentPropertiesPtrOutputWithContext(ctx)
}

// AgentPropertiesPtrInput is an input type that accepts AgentPropertiesArgs, AgentPropertiesPtr and AgentPropertiesPtrOutput values.
// You can construct a concrete instance of `AgentPropertiesPtrInput` via:
//
//	        AgentPropertiesArgs{...}
//
//	or:
//
//	        nil
type AgentPropertiesPtrInput interface {
	pulumi.Input

	ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput
	ToAgentPropertiesPtrOutputWithContext(context.Context) AgentPropertiesPtrOutput
}

type agentPropertiesPtrType AgentPropertiesArgs

func AgentPropertiesPtr(v *AgentPropertiesArgs) AgentPropertiesPtrInput {
	return (*agentPropertiesPtrType)(v)
}

func (*agentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentProperties)(nil)).Elem()
}

func (i *agentPropertiesPtrType) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return i.ToAgentPropertiesPtrOutputWithContext(context.Background())
}

func (i *agentPropertiesPtrType) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPropertiesPtrOutput)
}

// The properties that determine the run agent configuration.
type AgentPropertiesOutput struct{ *pulumi.OutputState }

func (AgentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentProperties)(nil)).Elem()
}

func (o AgentPropertiesOutput) ToAgentPropertiesOutput() AgentPropertiesOutput {
	return o
}

func (o AgentPropertiesOutput) ToAgentPropertiesOutputWithContext(ctx context.Context) AgentPropertiesOutput {
	return o
}

func (o AgentPropertiesOutput) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return o.ToAgentPropertiesPtrOutputWithContext(context.Background())
}

func (o AgentPropertiesOutput) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentProperties) *AgentProperties {
		return &v
	}).(AgentPropertiesPtrOutput)
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentProperties) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

type AgentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AgentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentProperties)(nil)).Elem()
}

func (o AgentPropertiesPtrOutput) ToAgentPropertiesPtrOutput() AgentPropertiesPtrOutput {
	return o
}

func (o AgentPropertiesPtrOutput) ToAgentPropertiesPtrOutputWithContext(ctx context.Context) AgentPropertiesPtrOutput {
	return o
}

func (o AgentPropertiesPtrOutput) Elem() AgentPropertiesOutput {
	return o.ApplyT(func(v *AgentProperties) AgentProperties {
		if v != nil {
			return *v
		}
		var ret AgentProperties
		return ret
	}).(AgentPropertiesOutput)
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentProperties) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

// The properties that determine the run agent configuration.
type AgentPropertiesResponse struct {
	// The CPU configuration in terms of number of cores required for the run.
	Cpu *int `pulumi:"cpu"`
}

// The properties that determine the run agent configuration.
type AgentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AgentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPropertiesResponse)(nil)).Elem()
}

func (o AgentPropertiesResponseOutput) ToAgentPropertiesResponseOutput() AgentPropertiesResponseOutput {
	return o
}

func (o AgentPropertiesResponseOutput) ToAgentPropertiesResponseOutputWithContext(ctx context.Context) AgentPropertiesResponseOutput {
	return o
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesResponseOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPropertiesResponse) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

type AgentPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPropertiesResponse)(nil)).Elem()
}

func (o AgentPropertiesResponsePtrOutput) ToAgentPropertiesResponsePtrOutput() AgentPropertiesResponsePtrOutput {
	return o
}

func (o AgentPropertiesResponsePtrOutput) ToAgentPropertiesResponsePtrOutputWithContext(ctx context.Context) AgentPropertiesResponsePtrOutput {
	return o
}

func (o AgentPropertiesResponsePtrOutput) Elem() AgentPropertiesResponseOutput {
	return o.ApplyT(func(v *AgentPropertiesResponse) AgentPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AgentPropertiesResponse
		return ret
	}).(AgentPropertiesResponseOutput)
}

// The CPU configuration in terms of number of cores required for the run.
func (o AgentPropertiesResponsePtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

// The properties of a run argument.
type Argument struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for Argument
func (val *Argument) Defaults() *Argument {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// ArgumentInput is an input type that accepts ArgumentArgs and ArgumentOutput values.
// You can construct a concrete instance of `ArgumentInput` via:
//
//	ArgumentArgs{...}
type ArgumentInput interface {
	pulumi.Input

	ToArgumentOutput() ArgumentOutput
	ToArgumentOutputWithContext(context.Context) ArgumentOutput
}

// The properties of a run argument.
type ArgumentArgs struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret pulumi.BoolPtrInput `pulumi:"isSecret"`
	// The name of the argument.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the argument.
	Value pulumi.StringInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for ArgumentArgs
func (val *ArgumentArgs) Defaults() *ArgumentArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		tmp.IsSecret = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (i ArgumentArgs) ToArgumentOutput() ArgumentOutput {
	return i.ToArgumentOutputWithContext(context.Background())
}

func (i ArgumentArgs) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentOutput)
}

// ArgumentArrayInput is an input type that accepts ArgumentArray and ArgumentArrayOutput values.
// You can construct a concrete instance of `ArgumentArrayInput` via:
//
//	ArgumentArray{ ArgumentArgs{...} }
type ArgumentArrayInput interface {
	pulumi.Input

	ToArgumentArrayOutput() ArgumentArrayOutput
	ToArgumentArrayOutputWithContext(context.Context) ArgumentArrayOutput
}

type ArgumentArray []ArgumentInput

func (ArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (i ArgumentArray) ToArgumentArrayOutput() ArgumentArrayOutput {
	return i.ToArgumentArrayOutputWithContext(context.Background())
}

func (i ArgumentArray) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentArrayOutput)
}

// The properties of a run argument.
type ArgumentOutput struct{ *pulumi.OutputState }

func (ArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (o ArgumentOutput) ToArgumentOutput() ArgumentOutput {
	return o
}

func (o ArgumentOutput) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return o
}

// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
func (o ArgumentOutput) GetIsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Argument) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the argument.
func (o ArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Argument) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the argument.
func (o ArgumentOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Argument) string { return v.Value }).(pulumi.StringOutput)
}

type ArgumentArrayOutput struct{ *pulumi.OutputState }

func (ArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (o ArgumentArrayOutput) ToArgumentArrayOutput() ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) Index(i pulumi.IntInput) ArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Argument {
		return vs[0].([]Argument)[vs[1].(int)]
	}).(ArgumentOutput)
}

// The properties of a run argument.
type ArgumentResponse struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for ArgumentResponse
func (val *ArgumentResponse) Defaults() *ArgumentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// The properties of a run argument.
type ArgumentResponseOutput struct{ *pulumi.OutputState }

func (ArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgumentResponse)(nil)).Elem()
}

func (o ArgumentResponseOutput) ToArgumentResponseOutput() ArgumentResponseOutput {
	return o
}

func (o ArgumentResponseOutput) ToArgumentResponseOutputWithContext(ctx context.Context) ArgumentResponseOutput {
	return o
}

// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
func (o ArgumentResponseOutput) GetIsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArgumentResponse) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the argument.
func (o ArgumentResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the argument.
func (o ArgumentResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (ArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgumentResponse)(nil)).Elem()
}

func (o ArgumentResponseArrayOutput) ToArgumentResponseArrayOutput() ArgumentResponseArrayOutput {
	return o
}

func (o ArgumentResponseArrayOutput) ToArgumentResponseArrayOutputWithContext(ctx context.Context) ArgumentResponseArrayOutput {
	return o
}

func (o ArgumentResponseArrayOutput) Index(i pulumi.IntInput) ArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgumentResponse {
		return vs[0].([]ArgumentResponse)[vs[1].(int)]
	}).(ArgumentResponseOutput)
}

// The authorization properties for accessing the source code repository.
type AuthInfo struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType string `pulumi:"tokenType"`
}

// AuthInfoInput is an input type that accepts AuthInfoArgs and AuthInfoOutput values.
// You can construct a concrete instance of `AuthInfoInput` via:
//
//	AuthInfoArgs{...}
type AuthInfoInput interface {
	pulumi.Input

	ToAuthInfoOutput() AuthInfoOutput
	ToAuthInfoOutputWithContext(context.Context) AuthInfoOutput
}

// The authorization properties for accessing the source code repository.
type AuthInfoArgs struct {
	// Time in seconds that the token remains valid
	ExpiresIn pulumi.IntPtrInput `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token pulumi.StringInput `pulumi:"token"`
	// The type of Auth token.
	TokenType pulumi.StringInput `pulumi:"tokenType"`
}

func (AuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthInfo)(nil)).Elem()
}

func (i AuthInfoArgs) ToAuthInfoOutput() AuthInfoOutput {
	return i.ToAuthInfoOutputWithContext(context.Background())
}

func (i AuthInfoArgs) ToAuthInfoOutputWithContext(ctx context.Context) AuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthInfoOutput)
}

func (i AuthInfoArgs) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return i.ToAuthInfoPtrOutputWithContext(context.Background())
}

func (i AuthInfoArgs) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthInfoOutput).ToAuthInfoPtrOutputWithContext(ctx)
}

// AuthInfoPtrInput is an input type that accepts AuthInfoArgs, AuthInfoPtr and AuthInfoPtrOutput values.
// You can construct a concrete instance of `AuthInfoPtrInput` via:
//
//	        AuthInfoArgs{...}
//
//	or:
//
//	        nil
type AuthInfoPtrInput interface {
	pulumi.Input

	ToAuthInfoPtrOutput() AuthInfoPtrOutput
	ToAuthInfoPtrOutputWithContext(context.Context) AuthInfoPtrOutput
}

type authInfoPtrType AuthInfoArgs

func AuthInfoPtr(v *AuthInfoArgs) AuthInfoPtrInput {
	return (*authInfoPtrType)(v)
}

func (*authInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthInfo)(nil)).Elem()
}

func (i *authInfoPtrType) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return i.ToAuthInfoPtrOutputWithContext(context.Background())
}

func (i *authInfoPtrType) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthInfoPtrOutput)
}

// The authorization properties for accessing the source code repository.
type AuthInfoOutput struct{ *pulumi.OutputState }

func (AuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthInfo)(nil)).Elem()
}

func (o AuthInfoOutput) ToAuthInfoOutput() AuthInfoOutput {
	return o
}

func (o AuthInfoOutput) ToAuthInfoOutputWithContext(ctx context.Context) AuthInfoOutput {
	return o
}

func (o AuthInfoOutput) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return o.ToAuthInfoPtrOutputWithContext(context.Background())
}

func (o AuthInfoOutput) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthInfo) *AuthInfo {
		return &v
	}).(AuthInfoPtrOutput)
}

// Time in seconds that the token remains valid
func (o AuthInfoOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AuthInfo) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfo) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfo) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfo) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o AuthInfoOutput) TokenType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfo) string { return v.TokenType }).(pulumi.StringOutput)
}

type AuthInfoPtrOutput struct{ *pulumi.OutputState }

func (AuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthInfo)(nil)).Elem()
}

func (o AuthInfoPtrOutput) ToAuthInfoPtrOutput() AuthInfoPtrOutput {
	return o
}

func (o AuthInfoPtrOutput) ToAuthInfoPtrOutputWithContext(ctx context.Context) AuthInfoPtrOutput {
	return o
}

func (o AuthInfoPtrOutput) Elem() AuthInfoOutput {
	return o.ApplyT(func(v *AuthInfo) AuthInfo {
		if v != nil {
			return *v
		}
		var ret AuthInfo
		return ret
	}).(AuthInfoOutput)
}

// Time in seconds that the token remains valid
func (o AuthInfoPtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoPtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o AuthInfoPtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.TokenType
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
type AuthInfoResponse struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType string `pulumi:"tokenType"`
}

// The authorization properties for accessing the source code repository.
type AuthInfoResponseOutput struct{ *pulumi.OutputState }

func (AuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthInfoResponse)(nil)).Elem()
}

func (o AuthInfoResponseOutput) ToAuthInfoResponseOutput() AuthInfoResponseOutput {
	return o
}

func (o AuthInfoResponseOutput) ToAuthInfoResponseOutputWithContext(ctx context.Context) AuthInfoResponseOutput {
	return o
}

// Time in seconds that the token remains valid
func (o AuthInfoResponseOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AuthInfoResponse) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfoResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthInfoResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfoResponse) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o AuthInfoResponseOutput) TokenType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthInfoResponse) string { return v.TokenType }).(pulumi.StringOutput)
}

type AuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthInfoResponse)(nil)).Elem()
}

func (o AuthInfoResponsePtrOutput) ToAuthInfoResponsePtrOutput() AuthInfoResponsePtrOutput {
	return o
}

func (o AuthInfoResponsePtrOutput) ToAuthInfoResponsePtrOutputWithContext(ctx context.Context) AuthInfoResponsePtrOutput {
	return o
}

func (o AuthInfoResponsePtrOutput) Elem() AuthInfoResponseOutput {
	return o.ApplyT(func(v *AuthInfoResponse) AuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret AuthInfoResponse
		return ret
	}).(AuthInfoResponseOutput)
}

// Time in seconds that the token remains valid
func (o AuthInfoResponsePtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o AuthInfoResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o AuthInfoResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o AuthInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o AuthInfoResponsePtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TokenType
	}).(pulumi.StringPtrOutput)
}

// Properties that describe a base image dependency.
type BaseImageDependencyResponse struct {
	// The sha256-based digest of the image manifest.
	Digest *string `pulumi:"digest"`
	// The registry login server.
	Registry *string `pulumi:"registry"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The tag name.
	Tag *string `pulumi:"tag"`
	// The type of the base image dependency.
	Type *string `pulumi:"type"`
}

// Properties that describe a base image dependency.
type BaseImageDependencyResponseOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageDependencyResponse)(nil)).Elem()
}

func (o BaseImageDependencyResponseOutput) ToBaseImageDependencyResponseOutput() BaseImageDependencyResponseOutput {
	return o
}

func (o BaseImageDependencyResponseOutput) ToBaseImageDependencyResponseOutputWithContext(ctx context.Context) BaseImageDependencyResponseOutput {
	return o
}

// The sha256-based digest of the image manifest.
func (o BaseImageDependencyResponseOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The registry login server.
func (o BaseImageDependencyResponseOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// The repository name.
func (o BaseImageDependencyResponseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag name.
func (o BaseImageDependencyResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The type of the base image dependency.
func (o BaseImageDependencyResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BaseImageDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaseImageDependencyResponse)(nil)).Elem()
}

func (o BaseImageDependencyResponseArrayOutput) ToBaseImageDependencyResponseArrayOutput() BaseImageDependencyResponseArrayOutput {
	return o
}

func (o BaseImageDependencyResponseArrayOutput) ToBaseImageDependencyResponseArrayOutputWithContext(ctx context.Context) BaseImageDependencyResponseArrayOutput {
	return o
}

func (o BaseImageDependencyResponseArrayOutput) Index(i pulumi.IntInput) BaseImageDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaseImageDependencyResponse {
		return vs[0].([]BaseImageDependencyResponse)[vs[1].(int)]
	}).(BaseImageDependencyResponseOutput)
}

// The trigger based on base image dependency.
type BaseImageTrigger struct {
	// The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType string `pulumi:"baseImageTriggerType"`
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint *string `pulumi:"updateTriggerEndpoint"`
	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType *string `pulumi:"updateTriggerPayloadType"`
}

// Defaults sets the appropriate defaults for BaseImageTrigger
func (val *BaseImageTrigger) Defaults() *BaseImageTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// BaseImageTriggerInput is an input type that accepts BaseImageTriggerArgs and BaseImageTriggerOutput values.
// You can construct a concrete instance of `BaseImageTriggerInput` via:
//
//	BaseImageTriggerArgs{...}
type BaseImageTriggerInput interface {
	pulumi.Input

	ToBaseImageTriggerOutput() BaseImageTriggerOutput
	ToBaseImageTriggerOutputWithContext(context.Context) BaseImageTriggerOutput
}

// The trigger based on base image dependency.
type BaseImageTriggerArgs struct {
	// The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType pulumi.StringInput `pulumi:"baseImageTriggerType"`
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// The current status of trigger.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint pulumi.StringPtrInput `pulumi:"updateTriggerEndpoint"`
	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType pulumi.StringPtrInput `pulumi:"updateTriggerPayloadType"`
}

// Defaults sets the appropriate defaults for BaseImageTriggerArgs
func (val *BaseImageTriggerArgs) Defaults() *BaseImageTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		tmp.Status = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (BaseImageTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTrigger)(nil)).Elem()
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerOutput() BaseImageTriggerOutput {
	return i.ToBaseImageTriggerOutputWithContext(context.Background())
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerOutputWithContext(ctx context.Context) BaseImageTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageTriggerOutput)
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return i.ToBaseImageTriggerPtrOutputWithContext(context.Background())
}

func (i BaseImageTriggerArgs) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageTriggerOutput).ToBaseImageTriggerPtrOutputWithContext(ctx)
}

// BaseImageTriggerPtrInput is an input type that accepts BaseImageTriggerArgs, BaseImageTriggerPtr and BaseImageTriggerPtrOutput values.
// You can construct a concrete instance of `BaseImageTriggerPtrInput` via:
//
//	        BaseImageTriggerArgs{...}
//
//	or:
//
//	        nil
type BaseImageTriggerPtrInput interface {
	pulumi.Input

	ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput
	ToBaseImageTriggerPtrOutputWithContext(context.Context) BaseImageTriggerPtrOutput
}

type baseImageTriggerPtrType BaseImageTriggerArgs

func BaseImageTriggerPtr(v *BaseImageTriggerArgs) BaseImageTriggerPtrInput {
	return (*baseImageTriggerPtrType)(v)
}

func (*baseImageTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseImageTrigger)(nil)).Elem()
}

func (i *baseImageTriggerPtrType) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return i.ToBaseImageTriggerPtrOutputWithContext(context.Background())
}

func (i *baseImageTriggerPtrType) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseImageTriggerPtrOutput)
}

// The trigger based on base image dependency.
type BaseImageTriggerOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTrigger)(nil)).Elem()
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerOutput() BaseImageTriggerOutput {
	return o
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerOutputWithContext(ctx context.Context) BaseImageTriggerOutput {
	return o
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return o.ToBaseImageTriggerPtrOutputWithContext(context.Background())
}

func (o BaseImageTriggerOutput) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BaseImageTrigger) *BaseImageTrigger {
		return &v
	}).(BaseImageTriggerPtrOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerOutput) BaseImageTriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTrigger) string { return v.BaseImageTriggerType }).(pulumi.StringOutput)
}

// The name of the trigger.
func (o BaseImageTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTrigger) string { return v.Name }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o BaseImageTriggerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTrigger) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTrigger) *string { return v.UpdateTriggerEndpoint }).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTrigger) *string { return v.UpdateTriggerPayloadType }).(pulumi.StringPtrOutput)
}

type BaseImageTriggerPtrOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseImageTrigger)(nil)).Elem()
}

func (o BaseImageTriggerPtrOutput) ToBaseImageTriggerPtrOutput() BaseImageTriggerPtrOutput {
	return o
}

func (o BaseImageTriggerPtrOutput) ToBaseImageTriggerPtrOutputWithContext(ctx context.Context) BaseImageTriggerPtrOutput {
	return o
}

func (o BaseImageTriggerPtrOutput) Elem() BaseImageTriggerOutput {
	return o.ApplyT(func(v *BaseImageTrigger) BaseImageTrigger {
		if v != nil {
			return *v
		}
		var ret BaseImageTrigger
		return ret
	}).(BaseImageTriggerOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerPtrOutput) BaseImageTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.BaseImageTriggerType
	}).(pulumi.StringPtrOutput)
}

// The name of the trigger.
func (o BaseImageTriggerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The current status of trigger.
func (o BaseImageTriggerPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerPtrOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerPtrOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTrigger) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerPayloadType
	}).(pulumi.StringPtrOutput)
}

// The trigger based on base image dependency.
type BaseImageTriggerResponse struct {
	// The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType string `pulumi:"baseImageTriggerType"`
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint *string `pulumi:"updateTriggerEndpoint"`
	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType *string `pulumi:"updateTriggerPayloadType"`
}

// Defaults sets the appropriate defaults for BaseImageTriggerResponse
func (val *BaseImageTriggerResponse) Defaults() *BaseImageTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The trigger based on base image dependency.
type BaseImageTriggerResponseOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageTriggerResponse)(nil)).Elem()
}

func (o BaseImageTriggerResponseOutput) ToBaseImageTriggerResponseOutput() BaseImageTriggerResponseOutput {
	return o
}

func (o BaseImageTriggerResponseOutput) ToBaseImageTriggerResponseOutputWithContext(ctx context.Context) BaseImageTriggerResponseOutput {
	return o
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerResponseOutput) BaseImageTriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) string { return v.BaseImageTriggerType }).(pulumi.StringOutput)
}

// The name of the trigger.
func (o BaseImageTriggerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o BaseImageTriggerResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerResponseOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) *string { return v.UpdateTriggerEndpoint }).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerResponseOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageTriggerResponse) *string { return v.UpdateTriggerPayloadType }).(pulumi.StringPtrOutput)
}

type BaseImageTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (BaseImageTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseImageTriggerResponse)(nil)).Elem()
}

func (o BaseImageTriggerResponsePtrOutput) ToBaseImageTriggerResponsePtrOutput() BaseImageTriggerResponsePtrOutput {
	return o
}

func (o BaseImageTriggerResponsePtrOutput) ToBaseImageTriggerResponsePtrOutputWithContext(ctx context.Context) BaseImageTriggerResponsePtrOutput {
	return o
}

func (o BaseImageTriggerResponsePtrOutput) Elem() BaseImageTriggerResponseOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) BaseImageTriggerResponse {
		if v != nil {
			return *v
		}
		var ret BaseImageTriggerResponse
		return ret
	}).(BaseImageTriggerResponseOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o BaseImageTriggerResponsePtrOutput) BaseImageTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BaseImageTriggerType
	}).(pulumi.StringPtrOutput)
}

// The name of the trigger.
func (o BaseImageTriggerResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The current status of trigger.
func (o BaseImageTriggerResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The endpoint URL for receiving update triggers.
func (o BaseImageTriggerResponsePtrOutput) UpdateTriggerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Type of Payload body for Base image update triggers.
func (o BaseImageTriggerResponsePtrOutput) UpdateTriggerPayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BaseImageTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerPayloadType
	}).(pulumi.StringPtrOutput)
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type Credentials struct {
	// Describes the credential parameters for accessing other custom registries. The key
	// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
	// the value of the item will be the registry credentials for accessing the registry.
	CustomRegistries map[string]CustomRegistryCredentials `pulumi:"customRegistries"`
	// Describes the credential parameters for accessing the source registry.
	SourceRegistry *SourceRegistryCredentials `pulumi:"sourceRegistry"`
}

// CredentialsInput is an input type that accepts CredentialsArgs and CredentialsOutput values.
// You can construct a concrete instance of `CredentialsInput` via:
//
//	CredentialsArgs{...}
type CredentialsInput interface {
	pulumi.Input

	ToCredentialsOutput() CredentialsOutput
	ToCredentialsOutputWithContext(context.Context) CredentialsOutput
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsArgs struct {
	// Describes the credential parameters for accessing other custom registries. The key
	// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
	// the value of the item will be the registry credentials for accessing the registry.
	CustomRegistries CustomRegistryCredentialsMapInput `pulumi:"customRegistries"`
	// Describes the credential parameters for accessing the source registry.
	SourceRegistry SourceRegistryCredentialsPtrInput `pulumi:"sourceRegistry"`
}

func (CredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Credentials)(nil)).Elem()
}

func (i CredentialsArgs) ToCredentialsOutput() CredentialsOutput {
	return i.ToCredentialsOutputWithContext(context.Background())
}

func (i CredentialsArgs) ToCredentialsOutputWithContext(ctx context.Context) CredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsOutput)
}

func (i CredentialsArgs) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return i.ToCredentialsPtrOutputWithContext(context.Background())
}

func (i CredentialsArgs) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsOutput).ToCredentialsPtrOutputWithContext(ctx)
}

// CredentialsPtrInput is an input type that accepts CredentialsArgs, CredentialsPtr and CredentialsPtrOutput values.
// You can construct a concrete instance of `CredentialsPtrInput` via:
//
//	        CredentialsArgs{...}
//
//	or:
//
//	        nil
type CredentialsPtrInput interface {
	pulumi.Input

	ToCredentialsPtrOutput() CredentialsPtrOutput
	ToCredentialsPtrOutputWithContext(context.Context) CredentialsPtrOutput
}

type credentialsPtrType CredentialsArgs

func CredentialsPtr(v *CredentialsArgs) CredentialsPtrInput {
	return (*credentialsPtrType)(v)
}

func (*credentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Credentials)(nil)).Elem()
}

func (i *credentialsPtrType) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return i.ToCredentialsPtrOutputWithContext(context.Background())
}

func (i *credentialsPtrType) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsPtrOutput)
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsOutput struct{ *pulumi.OutputState }

func (CredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Credentials)(nil)).Elem()
}

func (o CredentialsOutput) ToCredentialsOutput() CredentialsOutput {
	return o
}

func (o CredentialsOutput) ToCredentialsOutputWithContext(ctx context.Context) CredentialsOutput {
	return o
}

func (o CredentialsOutput) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return o.ToCredentialsPtrOutputWithContext(context.Background())
}

func (o CredentialsOutput) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Credentials) *Credentials {
		return &v
	}).(CredentialsPtrOutput)
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsOutput) CustomRegistries() CustomRegistryCredentialsMapOutput {
	return o.ApplyT(func(v Credentials) map[string]CustomRegistryCredentials { return v.CustomRegistries }).(CustomRegistryCredentialsMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsOutput) SourceRegistry() SourceRegistryCredentialsPtrOutput {
	return o.ApplyT(func(v Credentials) *SourceRegistryCredentials { return v.SourceRegistry }).(SourceRegistryCredentialsPtrOutput)
}

type CredentialsPtrOutput struct{ *pulumi.OutputState }

func (CredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Credentials)(nil)).Elem()
}

func (o CredentialsPtrOutput) ToCredentialsPtrOutput() CredentialsPtrOutput {
	return o
}

func (o CredentialsPtrOutput) ToCredentialsPtrOutputWithContext(ctx context.Context) CredentialsPtrOutput {
	return o
}

func (o CredentialsPtrOutput) Elem() CredentialsOutput {
	return o.ApplyT(func(v *Credentials) Credentials {
		if v != nil {
			return *v
		}
		var ret Credentials
		return ret
	}).(CredentialsOutput)
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsPtrOutput) CustomRegistries() CustomRegistryCredentialsMapOutput {
	return o.ApplyT(func(v *Credentials) map[string]CustomRegistryCredentials {
		if v == nil {
			return nil
		}
		return v.CustomRegistries
	}).(CustomRegistryCredentialsMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsPtrOutput) SourceRegistry() SourceRegistryCredentialsPtrOutput {
	return o.ApplyT(func(v *Credentials) *SourceRegistryCredentials {
		if v == nil {
			return nil
		}
		return v.SourceRegistry
	}).(SourceRegistryCredentialsPtrOutput)
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsResponse struct {
	// Describes the credential parameters for accessing other custom registries. The key
	// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
	// the value of the item will be the registry credentials for accessing the registry.
	CustomRegistries map[string]CustomRegistryCredentialsResponse `pulumi:"customRegistries"`
	// Describes the credential parameters for accessing the source registry.
	SourceRegistry *SourceRegistryCredentialsResponse `pulumi:"sourceRegistry"`
}

// The parameters that describes a set of credentials that will be used when a run is invoked.
type CredentialsResponseOutput struct{ *pulumi.OutputState }

func (CredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CredentialsResponse)(nil)).Elem()
}

func (o CredentialsResponseOutput) ToCredentialsResponseOutput() CredentialsResponseOutput {
	return o
}

func (o CredentialsResponseOutput) ToCredentialsResponseOutputWithContext(ctx context.Context) CredentialsResponseOutput {
	return o
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsResponseOutput) CustomRegistries() CustomRegistryCredentialsResponseMapOutput {
	return o.ApplyT(func(v CredentialsResponse) map[string]CustomRegistryCredentialsResponse { return v.CustomRegistries }).(CustomRegistryCredentialsResponseMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsResponseOutput) SourceRegistry() SourceRegistryCredentialsResponsePtrOutput {
	return o.ApplyT(func(v CredentialsResponse) *SourceRegistryCredentialsResponse { return v.SourceRegistry }).(SourceRegistryCredentialsResponsePtrOutput)
}

type CredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (CredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialsResponse)(nil)).Elem()
}

func (o CredentialsResponsePtrOutput) ToCredentialsResponsePtrOutput() CredentialsResponsePtrOutput {
	return o
}

func (o CredentialsResponsePtrOutput) ToCredentialsResponsePtrOutputWithContext(ctx context.Context) CredentialsResponsePtrOutput {
	return o
}

func (o CredentialsResponsePtrOutput) Elem() CredentialsResponseOutput {
	return o.ApplyT(func(v *CredentialsResponse) CredentialsResponse {
		if v != nil {
			return *v
		}
		var ret CredentialsResponse
		return ret
	}).(CredentialsResponseOutput)
}

// Describes the credential parameters for accessing other custom registries. The key
// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
// the value of the item will be the registry credentials for accessing the registry.
func (o CredentialsResponsePtrOutput) CustomRegistries() CustomRegistryCredentialsResponseMapOutput {
	return o.ApplyT(func(v *CredentialsResponse) map[string]CustomRegistryCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.CustomRegistries
	}).(CustomRegistryCredentialsResponseMapOutput)
}

// Describes the credential parameters for accessing the source registry.
func (o CredentialsResponsePtrOutput) SourceRegistry() SourceRegistryCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *CredentialsResponse) *SourceRegistryCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.SourceRegistry
	}).(SourceRegistryCredentialsResponsePtrOutput)
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentials struct {
	// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
	// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
	// the case of a system-assigned identity, the Client ID will be determined by the runner. This
	// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
	// source of authentication used for accessing the registry.
	Identity *string `pulumi:"identity"`
	// The password for logging into the custom registry. The password is a secret
	// object that allows multiple ways of providing the value for it.
	Password *SecretObject `pulumi:"password"`
	// The username for logging into the custom registry.
	UserName *SecretObject `pulumi:"userName"`
}

// CustomRegistryCredentialsInput is an input type that accepts CustomRegistryCredentialsArgs and CustomRegistryCredentialsOutput values.
// You can construct a concrete instance of `CustomRegistryCredentialsInput` via:
//
//	CustomRegistryCredentialsArgs{...}
type CustomRegistryCredentialsInput interface {
	pulumi.Input

	ToCustomRegistryCredentialsOutput() CustomRegistryCredentialsOutput
	ToCustomRegistryCredentialsOutputWithContext(context.Context) CustomRegistryCredentialsOutput
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsArgs struct {
	// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
	// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
	// the case of a system-assigned identity, the Client ID will be determined by the runner. This
	// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
	// source of authentication used for accessing the registry.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// The password for logging into the custom registry. The password is a secret
	// object that allows multiple ways of providing the value for it.
	Password SecretObjectPtrInput `pulumi:"password"`
	// The username for logging into the custom registry.
	UserName SecretObjectPtrInput `pulumi:"userName"`
}

func (CustomRegistryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRegistryCredentials)(nil)).Elem()
}

func (i CustomRegistryCredentialsArgs) ToCustomRegistryCredentialsOutput() CustomRegistryCredentialsOutput {
	return i.ToCustomRegistryCredentialsOutputWithContext(context.Background())
}

func (i CustomRegistryCredentialsArgs) ToCustomRegistryCredentialsOutputWithContext(ctx context.Context) CustomRegistryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRegistryCredentialsOutput)
}

// CustomRegistryCredentialsMapInput is an input type that accepts CustomRegistryCredentialsMap and CustomRegistryCredentialsMapOutput values.
// You can construct a concrete instance of `CustomRegistryCredentialsMapInput` via:
//
//	CustomRegistryCredentialsMap{ "key": CustomRegistryCredentialsArgs{...} }
type CustomRegistryCredentialsMapInput interface {
	pulumi.Input

	ToCustomRegistryCredentialsMapOutput() CustomRegistryCredentialsMapOutput
	ToCustomRegistryCredentialsMapOutputWithContext(context.Context) CustomRegistryCredentialsMapOutput
}

type CustomRegistryCredentialsMap map[string]CustomRegistryCredentialsInput

func (CustomRegistryCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomRegistryCredentials)(nil)).Elem()
}

func (i CustomRegistryCredentialsMap) ToCustomRegistryCredentialsMapOutput() CustomRegistryCredentialsMapOutput {
	return i.ToCustomRegistryCredentialsMapOutputWithContext(context.Background())
}

func (i CustomRegistryCredentialsMap) ToCustomRegistryCredentialsMapOutputWithContext(ctx context.Context) CustomRegistryCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRegistryCredentialsMapOutput)
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRegistryCredentials)(nil)).Elem()
}

func (o CustomRegistryCredentialsOutput) ToCustomRegistryCredentialsOutput() CustomRegistryCredentialsOutput {
	return o
}

func (o CustomRegistryCredentialsOutput) ToCustomRegistryCredentialsOutputWithContext(ctx context.Context) CustomRegistryCredentialsOutput {
	return o
}

// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
// the case of a system-assigned identity, the Client ID will be determined by the runner. This
// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
// source of authentication used for accessing the registry.
func (o CustomRegistryCredentialsOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentials) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The password for logging into the custom registry. The password is a secret
// object that allows multiple ways of providing the value for it.
func (o CustomRegistryCredentialsOutput) Password() SecretObjectPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentials) *SecretObject { return v.Password }).(SecretObjectPtrOutput)
}

// The username for logging into the custom registry.
func (o CustomRegistryCredentialsOutput) UserName() SecretObjectPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentials) *SecretObject { return v.UserName }).(SecretObjectPtrOutput)
}

type CustomRegistryCredentialsMapOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomRegistryCredentials)(nil)).Elem()
}

func (o CustomRegistryCredentialsMapOutput) ToCustomRegistryCredentialsMapOutput() CustomRegistryCredentialsMapOutput {
	return o
}

func (o CustomRegistryCredentialsMapOutput) ToCustomRegistryCredentialsMapOutputWithContext(ctx context.Context) CustomRegistryCredentialsMapOutput {
	return o
}

func (o CustomRegistryCredentialsMapOutput) MapIndex(k pulumi.StringInput) CustomRegistryCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomRegistryCredentials {
		return vs[0].(map[string]CustomRegistryCredentials)[vs[1].(string)]
	}).(CustomRegistryCredentialsOutput)
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsResponse struct {
	// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
	// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
	// the case of a system-assigned identity, the Client ID will be determined by the runner. This
	// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
	// source of authentication used for accessing the registry.
	Identity *string `pulumi:"identity"`
	// The password for logging into the custom registry. The password is a secret
	// object that allows multiple ways of providing the value for it.
	Password *SecretObjectResponse `pulumi:"password"`
	// The username for logging into the custom registry.
	UserName *SecretObjectResponse `pulumi:"userName"`
}

// Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentialsResponseOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRegistryCredentialsResponse)(nil)).Elem()
}

func (o CustomRegistryCredentialsResponseOutput) ToCustomRegistryCredentialsResponseOutput() CustomRegistryCredentialsResponseOutput {
	return o
}

func (o CustomRegistryCredentialsResponseOutput) ToCustomRegistryCredentialsResponseOutputWithContext(ctx context.Context) CustomRegistryCredentialsResponseOutput {
	return o
}

// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
// the case of a system-assigned identity, the Client ID will be determined by the runner. This
// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
// source of authentication used for accessing the registry.
func (o CustomRegistryCredentialsResponseOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentialsResponse) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The password for logging into the custom registry. The password is a secret
// object that allows multiple ways of providing the value for it.
func (o CustomRegistryCredentialsResponseOutput) Password() SecretObjectResponsePtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentialsResponse) *SecretObjectResponse { return v.Password }).(SecretObjectResponsePtrOutput)
}

// The username for logging into the custom registry.
func (o CustomRegistryCredentialsResponseOutput) UserName() SecretObjectResponsePtrOutput {
	return o.ApplyT(func(v CustomRegistryCredentialsResponse) *SecretObjectResponse { return v.UserName }).(SecretObjectResponsePtrOutput)
}

type CustomRegistryCredentialsResponseMapOutput struct{ *pulumi.OutputState }

func (CustomRegistryCredentialsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomRegistryCredentialsResponse)(nil)).Elem()
}

func (o CustomRegistryCredentialsResponseMapOutput) ToCustomRegistryCredentialsResponseMapOutput() CustomRegistryCredentialsResponseMapOutput {
	return o
}

func (o CustomRegistryCredentialsResponseMapOutput) ToCustomRegistryCredentialsResponseMapOutputWithContext(ctx context.Context) CustomRegistryCredentialsResponseMapOutput {
	return o
}

func (o CustomRegistryCredentialsResponseMapOutput) MapIndex(k pulumi.StringInput) CustomRegistryCredentialsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomRegistryCredentialsResponse {
		return vs[0].(map[string]CustomRegistryCredentialsResponse)[vs[1].(string)]
	}).(CustomRegistryCredentialsResponseOutput)
}

// The parameters for a docker quick build.
type DockerBuildRequest struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The collection of override arguments to be used when executing the run.
	Arguments []Argument `pulumi:"arguments"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials `pulumi:"credentials"`
	// The Docker file path relative to the source location.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The platform properties against which the run has to happen.
	Platform PlatformProperties `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'DockerBuildRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildRequest
func (val *DockerBuildRequest) Defaults() *DockerBuildRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if tmp.IsPushEnabled == nil {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if tmp.NoCache == nil {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	if tmp.Timeout == nil {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// DockerBuildRequestInput is an input type that accepts DockerBuildRequestArgs and DockerBuildRequestOutput values.
// You can construct a concrete instance of `DockerBuildRequestInput` via:
//
//	DockerBuildRequestArgs{...}
type DockerBuildRequestInput interface {
	pulumi.Input

	ToDockerBuildRequestOutput() DockerBuildRequestOutput
	ToDockerBuildRequestOutputWithContext(context.Context) DockerBuildRequestOutput
}

// The parameters for a docker quick build.
type DockerBuildRequestArgs struct {
	// The machine configuration of the run agent.
	AgentConfiguration AgentPropertiesPtrInput `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName pulumi.StringPtrInput `pulumi:"agentPoolName"`
	// The collection of override arguments to be used when executing the run.
	Arguments ArgumentArrayInput `pulumi:"arguments"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials CredentialsPtrInput `pulumi:"credentials"`
	// The Docker file path relative to the source location.
	DockerFilePath pulumi.StringInput `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames pulumi.StringArrayInput `pulumi:"imageNames"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled pulumi.BoolPtrInput `pulumi:"isArchiveEnabled"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled pulumi.BoolPtrInput `pulumi:"isPushEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate pulumi.StringPtrInput `pulumi:"logTemplate"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache pulumi.BoolPtrInput `pulumi:"noCache"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesInput `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation pulumi.StringPtrInput `pulumi:"sourceLocation"`
	// The name of the target build stage for the docker build.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Run timeout in seconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'DockerBuildRequest'.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildRequestArgs
func (val *DockerBuildRequestArgs) Defaults() *DockerBuildRequestArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		tmp.IsArchiveEnabled = pulumi.BoolPtr(false)
	}
	if tmp.IsPushEnabled == nil {
		tmp.IsPushEnabled = pulumi.BoolPtr(true)
	}
	if tmp.NoCache == nil {
		tmp.NoCache = pulumi.BoolPtr(false)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.IntPtr(3600)
	}
	return &tmp
}
func (DockerBuildRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildRequest)(nil)).Elem()
}

func (i DockerBuildRequestArgs) ToDockerBuildRequestOutput() DockerBuildRequestOutput {
	return i.ToDockerBuildRequestOutputWithContext(context.Background())
}

func (i DockerBuildRequestArgs) ToDockerBuildRequestOutputWithContext(ctx context.Context) DockerBuildRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildRequestOutput)
}

func (i DockerBuildRequestArgs) ToDockerBuildRequestPtrOutput() DockerBuildRequestPtrOutput {
	return i.ToDockerBuildRequestPtrOutputWithContext(context.Background())
}

func (i DockerBuildRequestArgs) ToDockerBuildRequestPtrOutputWithContext(ctx context.Context) DockerBuildRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildRequestOutput).ToDockerBuildRequestPtrOutputWithContext(ctx)
}

// DockerBuildRequestPtrInput is an input type that accepts DockerBuildRequestArgs, DockerBuildRequestPtr and DockerBuildRequestPtrOutput values.
// You can construct a concrete instance of `DockerBuildRequestPtrInput` via:
//
//	        DockerBuildRequestArgs{...}
//
//	or:
//
//	        nil
type DockerBuildRequestPtrInput interface {
	pulumi.Input

	ToDockerBuildRequestPtrOutput() DockerBuildRequestPtrOutput
	ToDockerBuildRequestPtrOutputWithContext(context.Context) DockerBuildRequestPtrOutput
}

type dockerBuildRequestPtrType DockerBuildRequestArgs

func DockerBuildRequestPtr(v *DockerBuildRequestArgs) DockerBuildRequestPtrInput {
	return (*dockerBuildRequestPtrType)(v)
}

func (*dockerBuildRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildRequest)(nil)).Elem()
}

func (i *dockerBuildRequestPtrType) ToDockerBuildRequestPtrOutput() DockerBuildRequestPtrOutput {
	return i.ToDockerBuildRequestPtrOutputWithContext(context.Background())
}

func (i *dockerBuildRequestPtrType) ToDockerBuildRequestPtrOutputWithContext(ctx context.Context) DockerBuildRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildRequestPtrOutput)
}

// The parameters for a docker quick build.
type DockerBuildRequestOutput struct{ *pulumi.OutputState }

func (DockerBuildRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildRequest)(nil)).Elem()
}

func (o DockerBuildRequestOutput) ToDockerBuildRequestOutput() DockerBuildRequestOutput {
	return o
}

func (o DockerBuildRequestOutput) ToDockerBuildRequestOutputWithContext(ctx context.Context) DockerBuildRequestOutput {
	return o
}

func (o DockerBuildRequestOutput) ToDockerBuildRequestPtrOutput() DockerBuildRequestPtrOutput {
	return o.ToDockerBuildRequestPtrOutputWithContext(context.Background())
}

func (o DockerBuildRequestOutput) ToDockerBuildRequestPtrOutputWithContext(ctx context.Context) DockerBuildRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerBuildRequest) *DockerBuildRequest {
		return &v
	}).(DockerBuildRequestPtrOutput)
}

// The machine configuration of the run agent.
func (o DockerBuildRequestOutput) AgentConfiguration() AgentPropertiesPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *AgentProperties { return v.AgentConfiguration }).(AgentPropertiesPtrOutput)
}

// The dedicated agent pool for the run.
func (o DockerBuildRequestOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The collection of override arguments to be used when executing the run.
func (o DockerBuildRequestOutput) Arguments() ArgumentArrayOutput {
	return o.ApplyT(func(v DockerBuildRequest) []Argument { return v.Arguments }).(ArgumentArrayOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o DockerBuildRequestOutput) Credentials() CredentialsPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *Credentials { return v.Credentials }).(CredentialsPtrOutput)
}

// The Docker file path relative to the source location.
func (o DockerBuildRequestOutput) DockerFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildRequest) string { return v.DockerFilePath }).(pulumi.StringOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildRequestOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuildRequest) []string { return v.ImageNames }).(pulumi.StringArrayOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o DockerBuildRequestOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildRequestOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *bool { return v.IsPushEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o DockerBuildRequestOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildRequestOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// The platform properties against which the run has to happen.
func (o DockerBuildRequestOutput) Platform() PlatformPropertiesOutput {
	return o.ApplyT(func(v DockerBuildRequest) PlatformProperties { return v.Platform }).(PlatformPropertiesOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o DockerBuildRequestOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *string { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildRequestOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o DockerBuildRequestOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DockerBuildRequest) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'DockerBuildRequest'.
func (o DockerBuildRequestOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildRequest) string { return v.Type }).(pulumi.StringOutput)
}

type DockerBuildRequestPtrOutput struct{ *pulumi.OutputState }

func (DockerBuildRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildRequest)(nil)).Elem()
}

func (o DockerBuildRequestPtrOutput) ToDockerBuildRequestPtrOutput() DockerBuildRequestPtrOutput {
	return o
}

func (o DockerBuildRequestPtrOutput) ToDockerBuildRequestPtrOutputWithContext(ctx context.Context) DockerBuildRequestPtrOutput {
	return o
}

func (o DockerBuildRequestPtrOutput) Elem() DockerBuildRequestOutput {
	return o.ApplyT(func(v *DockerBuildRequest) DockerBuildRequest {
		if v != nil {
			return *v
		}
		var ret DockerBuildRequest
		return ret
	}).(DockerBuildRequestOutput)
}

// The machine configuration of the run agent.
func (o DockerBuildRequestPtrOutput) AgentConfiguration() AgentPropertiesPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *AgentProperties {
		if v == nil {
			return nil
		}
		return v.AgentConfiguration
	}).(AgentPropertiesPtrOutput)
}

// The dedicated agent pool for the run.
func (o DockerBuildRequestPtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The collection of override arguments to be used when executing the run.
func (o DockerBuildRequestPtrOutput) Arguments() ArgumentArrayOutput {
	return o.ApplyT(func(v *DockerBuildRequest) []Argument {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(ArgumentArrayOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o DockerBuildRequestPtrOutput) Credentials() CredentialsPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *Credentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CredentialsPtrOutput)
}

// The Docker file path relative to the source location.
func (o DockerBuildRequestPtrOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *string {
		if v == nil {
			return nil
		}
		return &v.DockerFilePath
	}).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildRequestPtrOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuildRequest) []string {
		if v == nil {
			return nil
		}
		return v.ImageNames
	}).(pulumi.StringArrayOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o DockerBuildRequestPtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildRequestPtrOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *bool {
		if v == nil {
			return nil
		}
		return v.IsPushEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o DockerBuildRequestPtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildRequestPtrOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *bool {
		if v == nil {
			return nil
		}
		return v.NoCache
	}).(pulumi.BoolPtrOutput)
}

// The platform properties against which the run has to happen.
func (o DockerBuildRequestPtrOutput) Platform() PlatformPropertiesPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *PlatformProperties {
		if v == nil {
			return nil
		}
		return &v.Platform
	}).(PlatformPropertiesPtrOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o DockerBuildRequestPtrOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocation
	}).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildRequestPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o DockerBuildRequestPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'DockerBuildRequest'.
func (o DockerBuildRequestPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The parameters for a docker quick build.
type DockerBuildRequestResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The collection of override arguments to be used when executing the run.
	Arguments []ArgumentResponse `pulumi:"arguments"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *CredentialsResponse `pulumi:"credentials"`
	// The Docker file path relative to the source location.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesResponse `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'DockerBuildRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildRequestResponse
func (val *DockerBuildRequestResponse) Defaults() *DockerBuildRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if tmp.IsPushEnabled == nil {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if tmp.NoCache == nil {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	if tmp.Timeout == nil {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The parameters for a docker quick build.
type DockerBuildRequestResponseOutput struct{ *pulumi.OutputState }

func (DockerBuildRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildRequestResponse)(nil)).Elem()
}

func (o DockerBuildRequestResponseOutput) ToDockerBuildRequestResponseOutput() DockerBuildRequestResponseOutput {
	return o
}

func (o DockerBuildRequestResponseOutput) ToDockerBuildRequestResponseOutputWithContext(ctx context.Context) DockerBuildRequestResponseOutput {
	return o
}

// The machine configuration of the run agent.
func (o DockerBuildRequestResponseOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *AgentPropertiesResponse { return v.AgentConfiguration }).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o DockerBuildRequestResponseOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The collection of override arguments to be used when executing the run.
func (o DockerBuildRequestResponseOutput) Arguments() ArgumentResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) []ArgumentResponse { return v.Arguments }).(ArgumentResponseArrayOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o DockerBuildRequestResponseOutput) Credentials() CredentialsResponsePtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *CredentialsResponse { return v.Credentials }).(CredentialsResponsePtrOutput)
}

// The Docker file path relative to the source location.
func (o DockerBuildRequestResponseOutput) DockerFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) string { return v.DockerFilePath }).(pulumi.StringOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildRequestResponseOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) []string { return v.ImageNames }).(pulumi.StringArrayOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o DockerBuildRequestResponseOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildRequestResponseOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *bool { return v.IsPushEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o DockerBuildRequestResponseOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildRequestResponseOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// The platform properties against which the run has to happen.
func (o DockerBuildRequestResponseOutput) Platform() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) PlatformPropertiesResponse { return v.Platform }).(PlatformPropertiesResponseOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o DockerBuildRequestResponseOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *string { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildRequestResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o DockerBuildRequestResponseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'DockerBuildRequest'.
func (o DockerBuildRequestResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildRequestResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DockerBuildRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerBuildRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildRequestResponse)(nil)).Elem()
}

func (o DockerBuildRequestResponsePtrOutput) ToDockerBuildRequestResponsePtrOutput() DockerBuildRequestResponsePtrOutput {
	return o
}

func (o DockerBuildRequestResponsePtrOutput) ToDockerBuildRequestResponsePtrOutputWithContext(ctx context.Context) DockerBuildRequestResponsePtrOutput {
	return o
}

func (o DockerBuildRequestResponsePtrOutput) Elem() DockerBuildRequestResponseOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) DockerBuildRequestResponse {
		if v != nil {
			return *v
		}
		var ret DockerBuildRequestResponse
		return ret
	}).(DockerBuildRequestResponseOutput)
}

// The machine configuration of the run agent.
func (o DockerBuildRequestResponsePtrOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *AgentPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.AgentConfiguration
	}).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o DockerBuildRequestResponsePtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The collection of override arguments to be used when executing the run.
func (o DockerBuildRequestResponsePtrOutput) Arguments() ArgumentResponseArrayOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) []ArgumentResponse {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(ArgumentResponseArrayOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o DockerBuildRequestResponsePtrOutput) Credentials() CredentialsResponsePtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *CredentialsResponse {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CredentialsResponsePtrOutput)
}

// The Docker file path relative to the source location.
func (o DockerBuildRequestResponsePtrOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DockerFilePath
	}).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildRequestResponsePtrOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImageNames
	}).(pulumi.StringArrayOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o DockerBuildRequestResponsePtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildRequestResponsePtrOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsPushEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o DockerBuildRequestResponsePtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildRequestResponsePtrOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NoCache
	}).(pulumi.BoolPtrOutput)
}

// The platform properties against which the run has to happen.
func (o DockerBuildRequestResponsePtrOutput) Platform() PlatformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *PlatformPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Platform
	}).(PlatformPropertiesResponsePtrOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o DockerBuildRequestResponsePtrOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocation
	}).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildRequestResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o DockerBuildRequestResponsePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'DockerBuildRequest'.
func (o DockerBuildRequestResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Docker build step.
type DockerBuildStep struct {
	// The collection of override arguments to be used when executing this build step.
	Arguments []Argument `pulumi:"arguments"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The Docker file path relative to the source context.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildStep
func (val *DockerBuildStep) Defaults() *DockerBuildStep {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsPushEnabled == nil {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if tmp.NoCache == nil {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	return &tmp
}

// DockerBuildStepInput is an input type that accepts DockerBuildStepArgs and DockerBuildStepOutput values.
// You can construct a concrete instance of `DockerBuildStepInput` via:
//
//	DockerBuildStepArgs{...}
type DockerBuildStepInput interface {
	pulumi.Input

	ToDockerBuildStepOutput() DockerBuildStepOutput
	ToDockerBuildStepOutputWithContext(context.Context) DockerBuildStepOutput
}

// The Docker build step.
type DockerBuildStepArgs struct {
	// The collection of override arguments to be used when executing this build step.
	Arguments ArgumentArrayInput `pulumi:"arguments"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken pulumi.StringPtrInput `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// The Docker file path relative to the source context.
	DockerFilePath pulumi.StringInput `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames pulumi.StringArrayInput `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled pulumi.BoolPtrInput `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache pulumi.BoolPtrInput `pulumi:"noCache"`
	// The name of the target build stage for the docker build.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildStepArgs
func (val *DockerBuildStepArgs) Defaults() *DockerBuildStepArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsPushEnabled == nil {
		tmp.IsPushEnabled = pulumi.BoolPtr(true)
	}
	if tmp.NoCache == nil {
		tmp.NoCache = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DockerBuildStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStep)(nil)).Elem()
}

func (i DockerBuildStepArgs) ToDockerBuildStepOutput() DockerBuildStepOutput {
	return i.ToDockerBuildStepOutputWithContext(context.Background())
}

func (i DockerBuildStepArgs) ToDockerBuildStepOutputWithContext(ctx context.Context) DockerBuildStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildStepOutput)
}

func (i DockerBuildStepArgs) ToDockerBuildStepPtrOutput() DockerBuildStepPtrOutput {
	return i.ToDockerBuildStepPtrOutputWithContext(context.Background())
}

func (i DockerBuildStepArgs) ToDockerBuildStepPtrOutputWithContext(ctx context.Context) DockerBuildStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildStepOutput).ToDockerBuildStepPtrOutputWithContext(ctx)
}

// DockerBuildStepPtrInput is an input type that accepts DockerBuildStepArgs, DockerBuildStepPtr and DockerBuildStepPtrOutput values.
// You can construct a concrete instance of `DockerBuildStepPtrInput` via:
//
//	        DockerBuildStepArgs{...}
//
//	or:
//
//	        nil
type DockerBuildStepPtrInput interface {
	pulumi.Input

	ToDockerBuildStepPtrOutput() DockerBuildStepPtrOutput
	ToDockerBuildStepPtrOutputWithContext(context.Context) DockerBuildStepPtrOutput
}

type dockerBuildStepPtrType DockerBuildStepArgs

func DockerBuildStepPtr(v *DockerBuildStepArgs) DockerBuildStepPtrInput {
	return (*dockerBuildStepPtrType)(v)
}

func (*dockerBuildStepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildStep)(nil)).Elem()
}

func (i *dockerBuildStepPtrType) ToDockerBuildStepPtrOutput() DockerBuildStepPtrOutput {
	return i.ToDockerBuildStepPtrOutputWithContext(context.Background())
}

func (i *dockerBuildStepPtrType) ToDockerBuildStepPtrOutputWithContext(ctx context.Context) DockerBuildStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildStepPtrOutput)
}

// The Docker build step.
type DockerBuildStepOutput struct{ *pulumi.OutputState }

func (DockerBuildStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStep)(nil)).Elem()
}

func (o DockerBuildStepOutput) ToDockerBuildStepOutput() DockerBuildStepOutput {
	return o
}

func (o DockerBuildStepOutput) ToDockerBuildStepOutputWithContext(ctx context.Context) DockerBuildStepOutput {
	return o
}

func (o DockerBuildStepOutput) ToDockerBuildStepPtrOutput() DockerBuildStepPtrOutput {
	return o.ToDockerBuildStepPtrOutputWithContext(context.Background())
}

func (o DockerBuildStepOutput) ToDockerBuildStepPtrOutputWithContext(ctx context.Context) DockerBuildStepPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerBuildStep) *DockerBuildStep {
		return &v
	}).(DockerBuildStepPtrOutput)
}

// The collection of override arguments to be used when executing this build step.
func (o DockerBuildStepOutput) Arguments() ArgumentArrayOutput {
	return o.ApplyT(func(v DockerBuildStep) []Argument { return v.Arguments }).(ArgumentArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o DockerBuildStepOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStep) *string { return v.ContextAccessToken }).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o DockerBuildStepOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStep) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source context.
func (o DockerBuildStepOutput) DockerFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStep) string { return v.DockerFilePath }).(pulumi.StringOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuildStep) []string { return v.ImageNames }).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStep) *bool { return v.IsPushEnabled }).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStep) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildStepOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStep) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'Docker'.
func (o DockerBuildStepOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStep) string { return v.Type }).(pulumi.StringOutput)
}

type DockerBuildStepPtrOutput struct{ *pulumi.OutputState }

func (DockerBuildStepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildStep)(nil)).Elem()
}

func (o DockerBuildStepPtrOutput) ToDockerBuildStepPtrOutput() DockerBuildStepPtrOutput {
	return o
}

func (o DockerBuildStepPtrOutput) ToDockerBuildStepPtrOutputWithContext(ctx context.Context) DockerBuildStepPtrOutput {
	return o
}

func (o DockerBuildStepPtrOutput) Elem() DockerBuildStepOutput {
	return o.ApplyT(func(v *DockerBuildStep) DockerBuildStep {
		if v != nil {
			return *v
		}
		var ret DockerBuildStep
		return ret
	}).(DockerBuildStepOutput)
}

// The collection of override arguments to be used when executing this build step.
func (o DockerBuildStepPtrOutput) Arguments() ArgumentArrayOutput {
	return o.ApplyT(func(v *DockerBuildStep) []Argument {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(ArgumentArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o DockerBuildStepPtrOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStep) *string {
		if v == nil {
			return nil
		}
		return v.ContextAccessToken
	}).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o DockerBuildStepPtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStep) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source context.
func (o DockerBuildStepPtrOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStep) *string {
		if v == nil {
			return nil
		}
		return &v.DockerFilePath
	}).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepPtrOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuildStep) []string {
		if v == nil {
			return nil
		}
		return v.ImageNames
	}).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepPtrOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStep) *bool {
		if v == nil {
			return nil
		}
		return v.IsPushEnabled
	}).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepPtrOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStep) *bool {
		if v == nil {
			return nil
		}
		return v.NoCache
	}).(pulumi.BoolPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildStepPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStep) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'Docker'.
func (o DockerBuildStepPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStep) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Docker build step.
type DockerBuildStepResponse struct {
	// The collection of override arguments to be used when executing this build step.
	Arguments []ArgumentResponse `pulumi:"arguments"`
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The Docker file path relative to the source context.
	DockerFilePath string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// The type of the step.
	// Expected value is 'Docker'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for DockerBuildStepResponse
func (val *DockerBuildStepResponse) Defaults() *DockerBuildStepResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsPushEnabled == nil {
		isPushEnabled_ := true
		tmp.IsPushEnabled = &isPushEnabled_
	}
	if tmp.NoCache == nil {
		noCache_ := false
		tmp.NoCache = &noCache_
	}
	return &tmp
}

// The Docker build step.
type DockerBuildStepResponseOutput struct{ *pulumi.OutputState }

func (DockerBuildStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStepResponse)(nil)).Elem()
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponseOutput() DockerBuildStepResponseOutput {
	return o
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponseOutputWithContext(ctx context.Context) DockerBuildStepResponseOutput {
	return o
}

// The collection of override arguments to be used when executing this build step.
func (o DockerBuildStepResponseOutput) Arguments() ArgumentResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []ArgumentResponse { return v.Arguments }).(ArgumentResponseArrayOutput)
}

// List of base image dependencies for a step.
func (o DockerBuildStepResponseOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []BaseImageDependencyResponse { return v.BaseImageDependencies }).(BaseImageDependencyResponseArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o DockerBuildStepResponseOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.ContextAccessToken }).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o DockerBuildStepResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source context.
func (o DockerBuildStepResponseOutput) DockerFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) string { return v.DockerFilePath }).(pulumi.StringOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepResponseOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []string { return v.ImageNames }).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepResponseOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *bool { return v.IsPushEnabled }).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepResponseOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildStepResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'Docker'.
func (o DockerBuildStepResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DockerBuildStepResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerBuildStepResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildStepResponse)(nil)).Elem()
}

func (o DockerBuildStepResponsePtrOutput) ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput {
	return o
}

func (o DockerBuildStepResponsePtrOutput) ToDockerBuildStepResponsePtrOutputWithContext(ctx context.Context) DockerBuildStepResponsePtrOutput {
	return o
}

func (o DockerBuildStepResponsePtrOutput) Elem() DockerBuildStepResponseOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) DockerBuildStepResponse {
		if v != nil {
			return *v
		}
		var ret DockerBuildStepResponse
		return ret
	}).(DockerBuildStepResponseOutput)
}

// The collection of override arguments to be used when executing this build step.
func (o DockerBuildStepResponsePtrOutput) Arguments() ArgumentResponseArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []ArgumentResponse {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(ArgumentResponseArrayOutput)
}

// List of base image dependencies for a step.
func (o DockerBuildStepResponsePtrOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []BaseImageDependencyResponse {
		if v == nil {
			return nil
		}
		return v.BaseImageDependencies
	}).(BaseImageDependencyResponseArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o DockerBuildStepResponsePtrOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextAccessToken
	}).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o DockerBuildStepResponsePtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source context.
func (o DockerBuildStepResponsePtrOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DockerFilePath
	}).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepResponsePtrOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImageNames
	}).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepResponsePtrOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsPushEnabled
	}).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepResponsePtrOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NoCache
	}).(pulumi.BoolPtrOutput)
}

// The name of the target build stage for the docker build.
func (o DockerBuildStepResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'Docker'.
func (o DockerBuildStepResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The parameters for a quick task run request.
type EncodedTaskRunRequest struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials `pulumi:"credentials"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformProperties `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'EncodedTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
}

// Defaults sets the appropriate defaults for EncodedTaskRunRequest
func (val *EncodedTaskRunRequest) Defaults() *EncodedTaskRunRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if tmp.Timeout == nil {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// EncodedTaskRunRequestInput is an input type that accepts EncodedTaskRunRequestArgs and EncodedTaskRunRequestOutput values.
// You can construct a concrete instance of `EncodedTaskRunRequestInput` via:
//
//	EncodedTaskRunRequestArgs{...}
type EncodedTaskRunRequestInput interface {
	pulumi.Input

	ToEncodedTaskRunRequestOutput() EncodedTaskRunRequestOutput
	ToEncodedTaskRunRequestOutputWithContext(context.Context) EncodedTaskRunRequestOutput
}

// The parameters for a quick task run request.
type EncodedTaskRunRequestArgs struct {
	// The machine configuration of the run agent.
	AgentConfiguration AgentPropertiesPtrInput `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName pulumi.StringPtrInput `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials CredentialsPtrInput `pulumi:"credentials"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent pulumi.StringInput `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent pulumi.StringPtrInput `pulumi:"encodedValuesContent"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled pulumi.BoolPtrInput `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate pulumi.StringPtrInput `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesInput `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation pulumi.StringPtrInput `pulumi:"sourceLocation"`
	// Run timeout in seconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'EncodedTaskRunRequest'.
	Type pulumi.StringInput `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values SetValueArrayInput `pulumi:"values"`
}

// Defaults sets the appropriate defaults for EncodedTaskRunRequestArgs
func (val *EncodedTaskRunRequestArgs) Defaults() *EncodedTaskRunRequestArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		tmp.IsArchiveEnabled = pulumi.BoolPtr(false)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.IntPtr(3600)
	}
	return &tmp
}
func (EncodedTaskRunRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncodedTaskRunRequest)(nil)).Elem()
}

func (i EncodedTaskRunRequestArgs) ToEncodedTaskRunRequestOutput() EncodedTaskRunRequestOutput {
	return i.ToEncodedTaskRunRequestOutputWithContext(context.Background())
}

func (i EncodedTaskRunRequestArgs) ToEncodedTaskRunRequestOutputWithContext(ctx context.Context) EncodedTaskRunRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncodedTaskRunRequestOutput)
}

func (i EncodedTaskRunRequestArgs) ToEncodedTaskRunRequestPtrOutput() EncodedTaskRunRequestPtrOutput {
	return i.ToEncodedTaskRunRequestPtrOutputWithContext(context.Background())
}

func (i EncodedTaskRunRequestArgs) ToEncodedTaskRunRequestPtrOutputWithContext(ctx context.Context) EncodedTaskRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncodedTaskRunRequestOutput).ToEncodedTaskRunRequestPtrOutputWithContext(ctx)
}

// EncodedTaskRunRequestPtrInput is an input type that accepts EncodedTaskRunRequestArgs, EncodedTaskRunRequestPtr and EncodedTaskRunRequestPtrOutput values.
// You can construct a concrete instance of `EncodedTaskRunRequestPtrInput` via:
//
//	        EncodedTaskRunRequestArgs{...}
//
//	or:
//
//	        nil
type EncodedTaskRunRequestPtrInput interface {
	pulumi.Input

	ToEncodedTaskRunRequestPtrOutput() EncodedTaskRunRequestPtrOutput
	ToEncodedTaskRunRequestPtrOutputWithContext(context.Context) EncodedTaskRunRequestPtrOutput
}

type encodedTaskRunRequestPtrType EncodedTaskRunRequestArgs

func EncodedTaskRunRequestPtr(v *EncodedTaskRunRequestArgs) EncodedTaskRunRequestPtrInput {
	return (*encodedTaskRunRequestPtrType)(v)
}

func (*encodedTaskRunRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncodedTaskRunRequest)(nil)).Elem()
}

func (i *encodedTaskRunRequestPtrType) ToEncodedTaskRunRequestPtrOutput() EncodedTaskRunRequestPtrOutput {
	return i.ToEncodedTaskRunRequestPtrOutputWithContext(context.Background())
}

func (i *encodedTaskRunRequestPtrType) ToEncodedTaskRunRequestPtrOutputWithContext(ctx context.Context) EncodedTaskRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncodedTaskRunRequestPtrOutput)
}

// The parameters for a quick task run request.
type EncodedTaskRunRequestOutput struct{ *pulumi.OutputState }

func (EncodedTaskRunRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncodedTaskRunRequest)(nil)).Elem()
}

func (o EncodedTaskRunRequestOutput) ToEncodedTaskRunRequestOutput() EncodedTaskRunRequestOutput {
	return o
}

func (o EncodedTaskRunRequestOutput) ToEncodedTaskRunRequestOutputWithContext(ctx context.Context) EncodedTaskRunRequestOutput {
	return o
}

func (o EncodedTaskRunRequestOutput) ToEncodedTaskRunRequestPtrOutput() EncodedTaskRunRequestPtrOutput {
	return o.ToEncodedTaskRunRequestPtrOutputWithContext(context.Background())
}

func (o EncodedTaskRunRequestOutput) ToEncodedTaskRunRequestPtrOutputWithContext(ctx context.Context) EncodedTaskRunRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncodedTaskRunRequest) *EncodedTaskRunRequest {
		return &v
	}).(EncodedTaskRunRequestPtrOutput)
}

// The machine configuration of the run agent.
func (o EncodedTaskRunRequestOutput) AgentConfiguration() AgentPropertiesPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *AgentProperties { return v.AgentConfiguration }).(AgentPropertiesPtrOutput)
}

// The dedicated agent pool for the run.
func (o EncodedTaskRunRequestOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o EncodedTaskRunRequestOutput) Credentials() CredentialsPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *Credentials { return v.Credentials }).(CredentialsPtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskRunRequestOutput) EncodedTaskContent() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) string { return v.EncodedTaskContent }).(pulumi.StringOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskRunRequestOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *string { return v.EncodedValuesContent }).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o EncodedTaskRunRequestOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o EncodedTaskRunRequestOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o EncodedTaskRunRequestOutput) Platform() PlatformPropertiesOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) PlatformProperties { return v.Platform }).(PlatformPropertiesOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o EncodedTaskRunRequestOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *string { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o EncodedTaskRunRequestOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'EncodedTaskRunRequest'.
func (o EncodedTaskRunRequestOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskRunRequestOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v EncodedTaskRunRequest) []SetValue { return v.Values }).(SetValueArrayOutput)
}

type EncodedTaskRunRequestPtrOutput struct{ *pulumi.OutputState }

func (EncodedTaskRunRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncodedTaskRunRequest)(nil)).Elem()
}

func (o EncodedTaskRunRequestPtrOutput) ToEncodedTaskRunRequestPtrOutput() EncodedTaskRunRequestPtrOutput {
	return o
}

func (o EncodedTaskRunRequestPtrOutput) ToEncodedTaskRunRequestPtrOutputWithContext(ctx context.Context) EncodedTaskRunRequestPtrOutput {
	return o
}

func (o EncodedTaskRunRequestPtrOutput) Elem() EncodedTaskRunRequestOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) EncodedTaskRunRequest {
		if v != nil {
			return *v
		}
		var ret EncodedTaskRunRequest
		return ret
	}).(EncodedTaskRunRequestOutput)
}

// The machine configuration of the run agent.
func (o EncodedTaskRunRequestPtrOutput) AgentConfiguration() AgentPropertiesPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *AgentProperties {
		if v == nil {
			return nil
		}
		return v.AgentConfiguration
	}).(AgentPropertiesPtrOutput)
}

// The dedicated agent pool for the run.
func (o EncodedTaskRunRequestPtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o EncodedTaskRunRequestPtrOutput) Credentials() CredentialsPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *Credentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CredentialsPtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskRunRequestPtrOutput) EncodedTaskContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return &v.EncodedTaskContent
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskRunRequestPtrOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.EncodedValuesContent
	}).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o EncodedTaskRunRequestPtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o EncodedTaskRunRequestPtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o EncodedTaskRunRequestPtrOutput) Platform() PlatformPropertiesPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *PlatformProperties {
		if v == nil {
			return nil
		}
		return &v.Platform
	}).(PlatformPropertiesPtrOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o EncodedTaskRunRequestPtrOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocation
	}).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o EncodedTaskRunRequestPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'EncodedTaskRunRequest'.
func (o EncodedTaskRunRequestPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskRunRequestPtrOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequest) []SetValue {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueArrayOutput)
}

// The parameters for a quick task run request.
type EncodedTaskRunRequestResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *CredentialsResponse `pulumi:"credentials"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesResponse `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'EncodedTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
}

// Defaults sets the appropriate defaults for EncodedTaskRunRequestResponse
func (val *EncodedTaskRunRequestResponse) Defaults() *EncodedTaskRunRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if tmp.Timeout == nil {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The parameters for a quick task run request.
type EncodedTaskRunRequestResponseOutput struct{ *pulumi.OutputState }

func (EncodedTaskRunRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncodedTaskRunRequestResponse)(nil)).Elem()
}

func (o EncodedTaskRunRequestResponseOutput) ToEncodedTaskRunRequestResponseOutput() EncodedTaskRunRequestResponseOutput {
	return o
}

func (o EncodedTaskRunRequestResponseOutput) ToEncodedTaskRunRequestResponseOutputWithContext(ctx context.Context) EncodedTaskRunRequestResponseOutput {
	return o
}

// The machine configuration of the run agent.
func (o EncodedTaskRunRequestResponseOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *AgentPropertiesResponse { return v.AgentConfiguration }).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o EncodedTaskRunRequestResponseOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o EncodedTaskRunRequestResponseOutput) Credentials() CredentialsResponsePtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *CredentialsResponse { return v.Credentials }).(CredentialsResponsePtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskRunRequestResponseOutput) EncodedTaskContent() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) string { return v.EncodedTaskContent }).(pulumi.StringOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskRunRequestResponseOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *string { return v.EncodedValuesContent }).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o EncodedTaskRunRequestResponseOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o EncodedTaskRunRequestResponseOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o EncodedTaskRunRequestResponseOutput) Platform() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) PlatformPropertiesResponse { return v.Platform }).(PlatformPropertiesResponseOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o EncodedTaskRunRequestResponseOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *string { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o EncodedTaskRunRequestResponseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'EncodedTaskRunRequest'.
func (o EncodedTaskRunRequestResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskRunRequestResponseOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v EncodedTaskRunRequestResponse) []SetValueResponse { return v.Values }).(SetValueResponseArrayOutput)
}

type EncodedTaskRunRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (EncodedTaskRunRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncodedTaskRunRequestResponse)(nil)).Elem()
}

func (o EncodedTaskRunRequestResponsePtrOutput) ToEncodedTaskRunRequestResponsePtrOutput() EncodedTaskRunRequestResponsePtrOutput {
	return o
}

func (o EncodedTaskRunRequestResponsePtrOutput) ToEncodedTaskRunRequestResponsePtrOutputWithContext(ctx context.Context) EncodedTaskRunRequestResponsePtrOutput {
	return o
}

func (o EncodedTaskRunRequestResponsePtrOutput) Elem() EncodedTaskRunRequestResponseOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) EncodedTaskRunRequestResponse {
		if v != nil {
			return *v
		}
		var ret EncodedTaskRunRequestResponse
		return ret
	}).(EncodedTaskRunRequestResponseOutput)
}

// The machine configuration of the run agent.
func (o EncodedTaskRunRequestResponsePtrOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *AgentPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.AgentConfiguration
	}).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o EncodedTaskRunRequestResponsePtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o EncodedTaskRunRequestResponsePtrOutput) Credentials() CredentialsResponsePtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *CredentialsResponse {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CredentialsResponsePtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskRunRequestResponsePtrOutput) EncodedTaskContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EncodedTaskContent
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskRunRequestResponsePtrOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncodedValuesContent
	}).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o EncodedTaskRunRequestResponsePtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o EncodedTaskRunRequestResponsePtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o EncodedTaskRunRequestResponsePtrOutput) Platform() PlatformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *PlatformPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Platform
	}).(PlatformPropertiesResponsePtrOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o EncodedTaskRunRequestResponsePtrOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocation
	}).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o EncodedTaskRunRequestResponsePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'EncodedTaskRunRequest'.
func (o EncodedTaskRunRequestResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskRunRequestResponsePtrOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v *EncodedTaskRunRequestResponse) []SetValueResponse {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueResponseArrayOutput)
}

// The properties of a encoded task step.
type EncodedTaskStep struct {
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The type of the step.
	// Expected value is 'EncodedTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
}

// EncodedTaskStepInput is an input type that accepts EncodedTaskStepArgs and EncodedTaskStepOutput values.
// You can construct a concrete instance of `EncodedTaskStepInput` via:
//
//	EncodedTaskStepArgs{...}
type EncodedTaskStepInput interface {
	pulumi.Input

	ToEncodedTaskStepOutput() EncodedTaskStepOutput
	ToEncodedTaskStepOutputWithContext(context.Context) EncodedTaskStepOutput
}

// The properties of a encoded task step.
type EncodedTaskStepArgs struct {
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken pulumi.StringPtrInput `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent pulumi.StringInput `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent pulumi.StringPtrInput `pulumi:"encodedValuesContent"`
	// The type of the step.
	// Expected value is 'EncodedTask'.
	Type pulumi.StringInput `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values SetValueArrayInput `pulumi:"values"`
}

func (EncodedTaskStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncodedTaskStep)(nil)).Elem()
}

func (i EncodedTaskStepArgs) ToEncodedTaskStepOutput() EncodedTaskStepOutput {
	return i.ToEncodedTaskStepOutputWithContext(context.Background())
}

func (i EncodedTaskStepArgs) ToEncodedTaskStepOutputWithContext(ctx context.Context) EncodedTaskStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncodedTaskStepOutput)
}

func (i EncodedTaskStepArgs) ToEncodedTaskStepPtrOutput() EncodedTaskStepPtrOutput {
	return i.ToEncodedTaskStepPtrOutputWithContext(context.Background())
}

func (i EncodedTaskStepArgs) ToEncodedTaskStepPtrOutputWithContext(ctx context.Context) EncodedTaskStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncodedTaskStepOutput).ToEncodedTaskStepPtrOutputWithContext(ctx)
}

// EncodedTaskStepPtrInput is an input type that accepts EncodedTaskStepArgs, EncodedTaskStepPtr and EncodedTaskStepPtrOutput values.
// You can construct a concrete instance of `EncodedTaskStepPtrInput` via:
//
//	        EncodedTaskStepArgs{...}
//
//	or:
//
//	        nil
type EncodedTaskStepPtrInput interface {
	pulumi.Input

	ToEncodedTaskStepPtrOutput() EncodedTaskStepPtrOutput
	ToEncodedTaskStepPtrOutputWithContext(context.Context) EncodedTaskStepPtrOutput
}

type encodedTaskStepPtrType EncodedTaskStepArgs

func EncodedTaskStepPtr(v *EncodedTaskStepArgs) EncodedTaskStepPtrInput {
	return (*encodedTaskStepPtrType)(v)
}

func (*encodedTaskStepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncodedTaskStep)(nil)).Elem()
}

func (i *encodedTaskStepPtrType) ToEncodedTaskStepPtrOutput() EncodedTaskStepPtrOutput {
	return i.ToEncodedTaskStepPtrOutputWithContext(context.Background())
}

func (i *encodedTaskStepPtrType) ToEncodedTaskStepPtrOutputWithContext(ctx context.Context) EncodedTaskStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncodedTaskStepPtrOutput)
}

// The properties of a encoded task step.
type EncodedTaskStepOutput struct{ *pulumi.OutputState }

func (EncodedTaskStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncodedTaskStep)(nil)).Elem()
}

func (o EncodedTaskStepOutput) ToEncodedTaskStepOutput() EncodedTaskStepOutput {
	return o
}

func (o EncodedTaskStepOutput) ToEncodedTaskStepOutputWithContext(ctx context.Context) EncodedTaskStepOutput {
	return o
}

func (o EncodedTaskStepOutput) ToEncodedTaskStepPtrOutput() EncodedTaskStepPtrOutput {
	return o.ToEncodedTaskStepPtrOutputWithContext(context.Background())
}

func (o EncodedTaskStepOutput) ToEncodedTaskStepPtrOutputWithContext(ctx context.Context) EncodedTaskStepPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncodedTaskStep) *EncodedTaskStep {
		return &v
	}).(EncodedTaskStepPtrOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o EncodedTaskStepOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskStep) *string { return v.ContextAccessToken }).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o EncodedTaskStepOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskStep) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskStepOutput) EncodedTaskContent() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskStep) string { return v.EncodedTaskContent }).(pulumi.StringOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskStepOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskStep) *string { return v.EncodedValuesContent }).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'EncodedTask'.
func (o EncodedTaskStepOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskStep) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskStepOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v EncodedTaskStep) []SetValue { return v.Values }).(SetValueArrayOutput)
}

type EncodedTaskStepPtrOutput struct{ *pulumi.OutputState }

func (EncodedTaskStepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncodedTaskStep)(nil)).Elem()
}

func (o EncodedTaskStepPtrOutput) ToEncodedTaskStepPtrOutput() EncodedTaskStepPtrOutput {
	return o
}

func (o EncodedTaskStepPtrOutput) ToEncodedTaskStepPtrOutputWithContext(ctx context.Context) EncodedTaskStepPtrOutput {
	return o
}

func (o EncodedTaskStepPtrOutput) Elem() EncodedTaskStepOutput {
	return o.ApplyT(func(v *EncodedTaskStep) EncodedTaskStep {
		if v != nil {
			return *v
		}
		var ret EncodedTaskStep
		return ret
	}).(EncodedTaskStepOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o EncodedTaskStepPtrOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStep) *string {
		if v == nil {
			return nil
		}
		return v.ContextAccessToken
	}).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o EncodedTaskStepPtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStep) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskStepPtrOutput) EncodedTaskContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStep) *string {
		if v == nil {
			return nil
		}
		return &v.EncodedTaskContent
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskStepPtrOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStep) *string {
		if v == nil {
			return nil
		}
		return v.EncodedValuesContent
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'EncodedTask'.
func (o EncodedTaskStepPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStep) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskStepPtrOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v *EncodedTaskStep) []SetValue {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueArrayOutput)
}

// The properties of a encoded task step.
type EncodedTaskStepResponse struct {
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent string `pulumi:"encodedTaskContent"`
	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string `pulumi:"encodedValuesContent"`
	// The type of the step.
	// Expected value is 'EncodedTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
}

// The properties of a encoded task step.
type EncodedTaskStepResponseOutput struct{ *pulumi.OutputState }

func (EncodedTaskStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncodedTaskStepResponse)(nil)).Elem()
}

func (o EncodedTaskStepResponseOutput) ToEncodedTaskStepResponseOutput() EncodedTaskStepResponseOutput {
	return o
}

func (o EncodedTaskStepResponseOutput) ToEncodedTaskStepResponseOutputWithContext(ctx context.Context) EncodedTaskStepResponseOutput {
	return o
}

// List of base image dependencies for a step.
func (o EncodedTaskStepResponseOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v EncodedTaskStepResponse) []BaseImageDependencyResponse { return v.BaseImageDependencies }).(BaseImageDependencyResponseArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o EncodedTaskStepResponseOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskStepResponse) *string { return v.ContextAccessToken }).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o EncodedTaskStepResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskStepResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskStepResponseOutput) EncodedTaskContent() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskStepResponse) string { return v.EncodedTaskContent }).(pulumi.StringOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskStepResponseOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncodedTaskStepResponse) *string { return v.EncodedValuesContent }).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'EncodedTask'.
func (o EncodedTaskStepResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EncodedTaskStepResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskStepResponseOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v EncodedTaskStepResponse) []SetValueResponse { return v.Values }).(SetValueResponseArrayOutput)
}

type EncodedTaskStepResponsePtrOutput struct{ *pulumi.OutputState }

func (EncodedTaskStepResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncodedTaskStepResponse)(nil)).Elem()
}

func (o EncodedTaskStepResponsePtrOutput) ToEncodedTaskStepResponsePtrOutput() EncodedTaskStepResponsePtrOutput {
	return o
}

func (o EncodedTaskStepResponsePtrOutput) ToEncodedTaskStepResponsePtrOutputWithContext(ctx context.Context) EncodedTaskStepResponsePtrOutput {
	return o
}

func (o EncodedTaskStepResponsePtrOutput) Elem() EncodedTaskStepResponseOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) EncodedTaskStepResponse {
		if v != nil {
			return *v
		}
		var ret EncodedTaskStepResponse
		return ret
	}).(EncodedTaskStepResponseOutput)
}

// List of base image dependencies for a step.
func (o EncodedTaskStepResponsePtrOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) []BaseImageDependencyResponse {
		if v == nil {
			return nil
		}
		return v.BaseImageDependencies
	}).(BaseImageDependencyResponseArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o EncodedTaskStepResponsePtrOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextAccessToken
	}).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o EncodedTaskStepResponsePtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the template/definition file content.
func (o EncodedTaskStepResponsePtrOutput) EncodedTaskContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EncodedTaskContent
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded value of the parameters/values file content.
func (o EncodedTaskStepResponsePtrOutput) EncodedValuesContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncodedValuesContent
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'EncodedTask'.
func (o EncodedTaskStepResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o EncodedTaskStepResponsePtrOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v *EncodedTaskStepResponse) []SetValueResponse {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueResponseArrayOutput)
}

// The request parameters for a scheduling run against a task file.
type FileTaskRunRequest struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials `pulumi:"credentials"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformProperties `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The template/definition file path relative to the source.
	TaskFilePath string `pulumi:"taskFilePath"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'FileTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
	// The values/parameters file path relative to the source.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// Defaults sets the appropriate defaults for FileTaskRunRequest
func (val *FileTaskRunRequest) Defaults() *FileTaskRunRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if tmp.Timeout == nil {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// FileTaskRunRequestInput is an input type that accepts FileTaskRunRequestArgs and FileTaskRunRequestOutput values.
// You can construct a concrete instance of `FileTaskRunRequestInput` via:
//
//	FileTaskRunRequestArgs{...}
type FileTaskRunRequestInput interface {
	pulumi.Input

	ToFileTaskRunRequestOutput() FileTaskRunRequestOutput
	ToFileTaskRunRequestOutputWithContext(context.Context) FileTaskRunRequestOutput
}

// The request parameters for a scheduling run against a task file.
type FileTaskRunRequestArgs struct {
	// The machine configuration of the run agent.
	AgentConfiguration AgentPropertiesPtrInput `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName pulumi.StringPtrInput `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials CredentialsPtrInput `pulumi:"credentials"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled pulumi.BoolPtrInput `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate pulumi.StringPtrInput `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesInput `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation pulumi.StringPtrInput `pulumi:"sourceLocation"`
	// The template/definition file path relative to the source.
	TaskFilePath pulumi.StringInput `pulumi:"taskFilePath"`
	// Run timeout in seconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'FileTaskRunRequest'.
	Type pulumi.StringInput `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values SetValueArrayInput `pulumi:"values"`
	// The values/parameters file path relative to the source.
	ValuesFilePath pulumi.StringPtrInput `pulumi:"valuesFilePath"`
}

// Defaults sets the appropriate defaults for FileTaskRunRequestArgs
func (val *FileTaskRunRequestArgs) Defaults() *FileTaskRunRequestArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		tmp.IsArchiveEnabled = pulumi.BoolPtr(false)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.IntPtr(3600)
	}
	return &tmp
}
func (FileTaskRunRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTaskRunRequest)(nil)).Elem()
}

func (i FileTaskRunRequestArgs) ToFileTaskRunRequestOutput() FileTaskRunRequestOutput {
	return i.ToFileTaskRunRequestOutputWithContext(context.Background())
}

func (i FileTaskRunRequestArgs) ToFileTaskRunRequestOutputWithContext(ctx context.Context) FileTaskRunRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTaskRunRequestOutput)
}

func (i FileTaskRunRequestArgs) ToFileTaskRunRequestPtrOutput() FileTaskRunRequestPtrOutput {
	return i.ToFileTaskRunRequestPtrOutputWithContext(context.Background())
}

func (i FileTaskRunRequestArgs) ToFileTaskRunRequestPtrOutputWithContext(ctx context.Context) FileTaskRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTaskRunRequestOutput).ToFileTaskRunRequestPtrOutputWithContext(ctx)
}

// FileTaskRunRequestPtrInput is an input type that accepts FileTaskRunRequestArgs, FileTaskRunRequestPtr and FileTaskRunRequestPtrOutput values.
// You can construct a concrete instance of `FileTaskRunRequestPtrInput` via:
//
//	        FileTaskRunRequestArgs{...}
//
//	or:
//
//	        nil
type FileTaskRunRequestPtrInput interface {
	pulumi.Input

	ToFileTaskRunRequestPtrOutput() FileTaskRunRequestPtrOutput
	ToFileTaskRunRequestPtrOutputWithContext(context.Context) FileTaskRunRequestPtrOutput
}

type fileTaskRunRequestPtrType FileTaskRunRequestArgs

func FileTaskRunRequestPtr(v *FileTaskRunRequestArgs) FileTaskRunRequestPtrInput {
	return (*fileTaskRunRequestPtrType)(v)
}

func (*fileTaskRunRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileTaskRunRequest)(nil)).Elem()
}

func (i *fileTaskRunRequestPtrType) ToFileTaskRunRequestPtrOutput() FileTaskRunRequestPtrOutput {
	return i.ToFileTaskRunRequestPtrOutputWithContext(context.Background())
}

func (i *fileTaskRunRequestPtrType) ToFileTaskRunRequestPtrOutputWithContext(ctx context.Context) FileTaskRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTaskRunRequestPtrOutput)
}

// The request parameters for a scheduling run against a task file.
type FileTaskRunRequestOutput struct{ *pulumi.OutputState }

func (FileTaskRunRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTaskRunRequest)(nil)).Elem()
}

func (o FileTaskRunRequestOutput) ToFileTaskRunRequestOutput() FileTaskRunRequestOutput {
	return o
}

func (o FileTaskRunRequestOutput) ToFileTaskRunRequestOutputWithContext(ctx context.Context) FileTaskRunRequestOutput {
	return o
}

func (o FileTaskRunRequestOutput) ToFileTaskRunRequestPtrOutput() FileTaskRunRequestPtrOutput {
	return o.ToFileTaskRunRequestPtrOutputWithContext(context.Background())
}

func (o FileTaskRunRequestOutput) ToFileTaskRunRequestPtrOutputWithContext(ctx context.Context) FileTaskRunRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileTaskRunRequest) *FileTaskRunRequest {
		return &v
	}).(FileTaskRunRequestPtrOutput)
}

// The machine configuration of the run agent.
func (o FileTaskRunRequestOutput) AgentConfiguration() AgentPropertiesPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *AgentProperties { return v.AgentConfiguration }).(AgentPropertiesPtrOutput)
}

// The dedicated agent pool for the run.
func (o FileTaskRunRequestOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o FileTaskRunRequestOutput) Credentials() CredentialsPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *Credentials { return v.Credentials }).(CredentialsPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o FileTaskRunRequestOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o FileTaskRunRequestOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o FileTaskRunRequestOutput) Platform() PlatformPropertiesOutput {
	return o.ApplyT(func(v FileTaskRunRequest) PlatformProperties { return v.Platform }).(PlatformPropertiesOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o FileTaskRunRequestOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *string { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The template/definition file path relative to the source.
func (o FileTaskRunRequestOutput) TaskFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskRunRequest) string { return v.TaskFilePath }).(pulumi.StringOutput)
}

// Run timeout in seconds.
func (o FileTaskRunRequestOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'FileTaskRunRequest'.
func (o FileTaskRunRequestOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskRunRequest) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskRunRequestOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v FileTaskRunRequest) []SetValue { return v.Values }).(SetValueArrayOutput)
}

// The values/parameters file path relative to the source.
func (o FileTaskRunRequestOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequest) *string { return v.ValuesFilePath }).(pulumi.StringPtrOutput)
}

type FileTaskRunRequestPtrOutput struct{ *pulumi.OutputState }

func (FileTaskRunRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileTaskRunRequest)(nil)).Elem()
}

func (o FileTaskRunRequestPtrOutput) ToFileTaskRunRequestPtrOutput() FileTaskRunRequestPtrOutput {
	return o
}

func (o FileTaskRunRequestPtrOutput) ToFileTaskRunRequestPtrOutputWithContext(ctx context.Context) FileTaskRunRequestPtrOutput {
	return o
}

func (o FileTaskRunRequestPtrOutput) Elem() FileTaskRunRequestOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) FileTaskRunRequest {
		if v != nil {
			return *v
		}
		var ret FileTaskRunRequest
		return ret
	}).(FileTaskRunRequestOutput)
}

// The machine configuration of the run agent.
func (o FileTaskRunRequestPtrOutput) AgentConfiguration() AgentPropertiesPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *AgentProperties {
		if v == nil {
			return nil
		}
		return v.AgentConfiguration
	}).(AgentPropertiesPtrOutput)
}

// The dedicated agent pool for the run.
func (o FileTaskRunRequestPtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o FileTaskRunRequestPtrOutput) Credentials() CredentialsPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *Credentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CredentialsPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o FileTaskRunRequestPtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o FileTaskRunRequestPtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o FileTaskRunRequestPtrOutput) Platform() PlatformPropertiesPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *PlatformProperties {
		if v == nil {
			return nil
		}
		return &v.Platform
	}).(PlatformPropertiesPtrOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o FileTaskRunRequestPtrOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocation
	}).(pulumi.StringPtrOutput)
}

// The template/definition file path relative to the source.
func (o FileTaskRunRequestPtrOutput) TaskFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return &v.TaskFilePath
	}).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o FileTaskRunRequestPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'FileTaskRunRequest'.
func (o FileTaskRunRequestPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskRunRequestPtrOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) []SetValue {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueArrayOutput)
}

// The values/parameters file path relative to the source.
func (o FileTaskRunRequestPtrOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFilePath
	}).(pulumi.StringPtrOutput)
}

// The request parameters for a scheduling run against a task file.
type FileTaskRunRequestResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *CredentialsResponse `pulumi:"credentials"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The platform properties against which the run has to happen.
	Platform PlatformPropertiesResponse `pulumi:"platform"`
	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The template/definition file path relative to the source.
	TaskFilePath string `pulumi:"taskFilePath"`
	// Run timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// The type of the run request.
	// Expected value is 'FileTaskRunRequest'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
	// The values/parameters file path relative to the source.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// Defaults sets the appropriate defaults for FileTaskRunRequestResponse
func (val *FileTaskRunRequestResponse) Defaults() *FileTaskRunRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	if tmp.Timeout == nil {
		timeout_ := 3600
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// The request parameters for a scheduling run against a task file.
type FileTaskRunRequestResponseOutput struct{ *pulumi.OutputState }

func (FileTaskRunRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTaskRunRequestResponse)(nil)).Elem()
}

func (o FileTaskRunRequestResponseOutput) ToFileTaskRunRequestResponseOutput() FileTaskRunRequestResponseOutput {
	return o
}

func (o FileTaskRunRequestResponseOutput) ToFileTaskRunRequestResponseOutputWithContext(ctx context.Context) FileTaskRunRequestResponseOutput {
	return o
}

// The machine configuration of the run agent.
func (o FileTaskRunRequestResponseOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *AgentPropertiesResponse { return v.AgentConfiguration }).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o FileTaskRunRequestResponseOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o FileTaskRunRequestResponseOutput) Credentials() CredentialsResponsePtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *CredentialsResponse { return v.Credentials }).(CredentialsResponsePtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o FileTaskRunRequestResponseOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o FileTaskRunRequestResponseOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o FileTaskRunRequestResponseOutput) Platform() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) PlatformPropertiesResponse { return v.Platform }).(PlatformPropertiesResponseOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o FileTaskRunRequestResponseOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *string { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The template/definition file path relative to the source.
func (o FileTaskRunRequestResponseOutput) TaskFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) string { return v.TaskFilePath }).(pulumi.StringOutput)
}

// Run timeout in seconds.
func (o FileTaskRunRequestResponseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'FileTaskRunRequest'.
func (o FileTaskRunRequestResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskRunRequestResponseOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) []SetValueResponse { return v.Values }).(SetValueResponseArrayOutput)
}

// The values/parameters file path relative to the source.
func (o FileTaskRunRequestResponseOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskRunRequestResponse) *string { return v.ValuesFilePath }).(pulumi.StringPtrOutput)
}

type FileTaskRunRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (FileTaskRunRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileTaskRunRequestResponse)(nil)).Elem()
}

func (o FileTaskRunRequestResponsePtrOutput) ToFileTaskRunRequestResponsePtrOutput() FileTaskRunRequestResponsePtrOutput {
	return o
}

func (o FileTaskRunRequestResponsePtrOutput) ToFileTaskRunRequestResponsePtrOutputWithContext(ctx context.Context) FileTaskRunRequestResponsePtrOutput {
	return o
}

func (o FileTaskRunRequestResponsePtrOutput) Elem() FileTaskRunRequestResponseOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) FileTaskRunRequestResponse {
		if v != nil {
			return *v
		}
		var ret FileTaskRunRequestResponse
		return ret
	}).(FileTaskRunRequestResponseOutput)
}

// The machine configuration of the run agent.
func (o FileTaskRunRequestResponsePtrOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *AgentPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.AgentConfiguration
	}).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o FileTaskRunRequestResponsePtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The properties that describes a set of credentials that will be used when this run is invoked.
func (o FileTaskRunRequestResponsePtrOutput) Credentials() CredentialsResponsePtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *CredentialsResponse {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CredentialsResponsePtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o FileTaskRunRequestResponsePtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o FileTaskRunRequestResponsePtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
func (o FileTaskRunRequestResponsePtrOutput) Platform() PlatformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *PlatformPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Platform
	}).(PlatformPropertiesResponsePtrOutput)
}

// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
func (o FileTaskRunRequestResponsePtrOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocation
	}).(pulumi.StringPtrOutput)
}

// The template/definition file path relative to the source.
func (o FileTaskRunRequestResponsePtrOutput) TaskFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TaskFilePath
	}).(pulumi.StringPtrOutput)
}

// Run timeout in seconds.
func (o FileTaskRunRequestResponsePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The type of the run request.
// Expected value is 'FileTaskRunRequest'.
func (o FileTaskRunRequestResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskRunRequestResponsePtrOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) []SetValueResponse {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueResponseArrayOutput)
}

// The values/parameters file path relative to the source.
func (o FileTaskRunRequestResponsePtrOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFilePath
	}).(pulumi.StringPtrOutput)
}

// The properties of a task step.
type FileTaskStep struct {
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The task template/definition file path relative to the source context.
	TaskFilePath string `pulumi:"taskFilePath"`
	// The type of the step.
	// Expected value is 'FileTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValue `pulumi:"values"`
	// The task values/parameters file path relative to the source context.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// FileTaskStepInput is an input type that accepts FileTaskStepArgs and FileTaskStepOutput values.
// You can construct a concrete instance of `FileTaskStepInput` via:
//
//	FileTaskStepArgs{...}
type FileTaskStepInput interface {
	pulumi.Input

	ToFileTaskStepOutput() FileTaskStepOutput
	ToFileTaskStepOutputWithContext(context.Context) FileTaskStepOutput
}

// The properties of a task step.
type FileTaskStepArgs struct {
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken pulumi.StringPtrInput `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// The task template/definition file path relative to the source context.
	TaskFilePath pulumi.StringInput `pulumi:"taskFilePath"`
	// The type of the step.
	// Expected value is 'FileTask'.
	Type pulumi.StringInput `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values SetValueArrayInput `pulumi:"values"`
	// The task values/parameters file path relative to the source context.
	ValuesFilePath pulumi.StringPtrInput `pulumi:"valuesFilePath"`
}

func (FileTaskStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTaskStep)(nil)).Elem()
}

func (i FileTaskStepArgs) ToFileTaskStepOutput() FileTaskStepOutput {
	return i.ToFileTaskStepOutputWithContext(context.Background())
}

func (i FileTaskStepArgs) ToFileTaskStepOutputWithContext(ctx context.Context) FileTaskStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTaskStepOutput)
}

func (i FileTaskStepArgs) ToFileTaskStepPtrOutput() FileTaskStepPtrOutput {
	return i.ToFileTaskStepPtrOutputWithContext(context.Background())
}

func (i FileTaskStepArgs) ToFileTaskStepPtrOutputWithContext(ctx context.Context) FileTaskStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTaskStepOutput).ToFileTaskStepPtrOutputWithContext(ctx)
}

// FileTaskStepPtrInput is an input type that accepts FileTaskStepArgs, FileTaskStepPtr and FileTaskStepPtrOutput values.
// You can construct a concrete instance of `FileTaskStepPtrInput` via:
//
//	        FileTaskStepArgs{...}
//
//	or:
//
//	        nil
type FileTaskStepPtrInput interface {
	pulumi.Input

	ToFileTaskStepPtrOutput() FileTaskStepPtrOutput
	ToFileTaskStepPtrOutputWithContext(context.Context) FileTaskStepPtrOutput
}

type fileTaskStepPtrType FileTaskStepArgs

func FileTaskStepPtr(v *FileTaskStepArgs) FileTaskStepPtrInput {
	return (*fileTaskStepPtrType)(v)
}

func (*fileTaskStepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileTaskStep)(nil)).Elem()
}

func (i *fileTaskStepPtrType) ToFileTaskStepPtrOutput() FileTaskStepPtrOutput {
	return i.ToFileTaskStepPtrOutputWithContext(context.Background())
}

func (i *fileTaskStepPtrType) ToFileTaskStepPtrOutputWithContext(ctx context.Context) FileTaskStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileTaskStepPtrOutput)
}

// The properties of a task step.
type FileTaskStepOutput struct{ *pulumi.OutputState }

func (FileTaskStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTaskStep)(nil)).Elem()
}

func (o FileTaskStepOutput) ToFileTaskStepOutput() FileTaskStepOutput {
	return o
}

func (o FileTaskStepOutput) ToFileTaskStepOutputWithContext(ctx context.Context) FileTaskStepOutput {
	return o
}

func (o FileTaskStepOutput) ToFileTaskStepPtrOutput() FileTaskStepPtrOutput {
	return o.ToFileTaskStepPtrOutputWithContext(context.Background())
}

func (o FileTaskStepOutput) ToFileTaskStepPtrOutputWithContext(ctx context.Context) FileTaskStepPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileTaskStep) *FileTaskStep {
		return &v
	}).(FileTaskStepPtrOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o FileTaskStepOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskStep) *string { return v.ContextAccessToken }).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o FileTaskStepOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskStep) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The task template/definition file path relative to the source context.
func (o FileTaskStepOutput) TaskFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskStep) string { return v.TaskFilePath }).(pulumi.StringOutput)
}

// The type of the step.
// Expected value is 'FileTask'.
func (o FileTaskStepOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskStep) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskStepOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v FileTaskStep) []SetValue { return v.Values }).(SetValueArrayOutput)
}

// The task values/parameters file path relative to the source context.
func (o FileTaskStepOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskStep) *string { return v.ValuesFilePath }).(pulumi.StringPtrOutput)
}

type FileTaskStepPtrOutput struct{ *pulumi.OutputState }

func (FileTaskStepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileTaskStep)(nil)).Elem()
}

func (o FileTaskStepPtrOutput) ToFileTaskStepPtrOutput() FileTaskStepPtrOutput {
	return o
}

func (o FileTaskStepPtrOutput) ToFileTaskStepPtrOutputWithContext(ctx context.Context) FileTaskStepPtrOutput {
	return o
}

func (o FileTaskStepPtrOutput) Elem() FileTaskStepOutput {
	return o.ApplyT(func(v *FileTaskStep) FileTaskStep {
		if v != nil {
			return *v
		}
		var ret FileTaskStep
		return ret
	}).(FileTaskStepOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o FileTaskStepPtrOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStep) *string {
		if v == nil {
			return nil
		}
		return v.ContextAccessToken
	}).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o FileTaskStepPtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStep) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The task template/definition file path relative to the source context.
func (o FileTaskStepPtrOutput) TaskFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStep) *string {
		if v == nil {
			return nil
		}
		return &v.TaskFilePath
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'FileTask'.
func (o FileTaskStepPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStep) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskStepPtrOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v *FileTaskStep) []SetValue {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueArrayOutput)
}

// The task values/parameters file path relative to the source context.
func (o FileTaskStepPtrOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStep) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFilePath
	}).(pulumi.StringPtrOutput)
}

// The properties of a task step.
type FileTaskStepResponse struct {
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string `pulumi:"contextAccessToken"`
	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string `pulumi:"contextPath"`
	// The task template/definition file path relative to the source context.
	TaskFilePath string `pulumi:"taskFilePath"`
	// The type of the step.
	// Expected value is 'FileTask'.
	Type string `pulumi:"type"`
	// The collection of overridable values that can be passed when running a task.
	Values []SetValueResponse `pulumi:"values"`
	// The task values/parameters file path relative to the source context.
	ValuesFilePath *string `pulumi:"valuesFilePath"`
}

// The properties of a task step.
type FileTaskStepResponseOutput struct{ *pulumi.OutputState }

func (FileTaskStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileTaskStepResponse)(nil)).Elem()
}

func (o FileTaskStepResponseOutput) ToFileTaskStepResponseOutput() FileTaskStepResponseOutput {
	return o
}

func (o FileTaskStepResponseOutput) ToFileTaskStepResponseOutputWithContext(ctx context.Context) FileTaskStepResponseOutput {
	return o
}

// List of base image dependencies for a step.
func (o FileTaskStepResponseOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v FileTaskStepResponse) []BaseImageDependencyResponse { return v.BaseImageDependencies }).(BaseImageDependencyResponseArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o FileTaskStepResponseOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskStepResponse) *string { return v.ContextAccessToken }).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o FileTaskStepResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskStepResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The task template/definition file path relative to the source context.
func (o FileTaskStepResponseOutput) TaskFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskStepResponse) string { return v.TaskFilePath }).(pulumi.StringOutput)
}

// The type of the step.
// Expected value is 'FileTask'.
func (o FileTaskStepResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileTaskStepResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskStepResponseOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v FileTaskStepResponse) []SetValueResponse { return v.Values }).(SetValueResponseArrayOutput)
}

// The task values/parameters file path relative to the source context.
func (o FileTaskStepResponseOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileTaskStepResponse) *string { return v.ValuesFilePath }).(pulumi.StringPtrOutput)
}

type FileTaskStepResponsePtrOutput struct{ *pulumi.OutputState }

func (FileTaskStepResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileTaskStepResponse)(nil)).Elem()
}

func (o FileTaskStepResponsePtrOutput) ToFileTaskStepResponsePtrOutput() FileTaskStepResponsePtrOutput {
	return o
}

func (o FileTaskStepResponsePtrOutput) ToFileTaskStepResponsePtrOutputWithContext(ctx context.Context) FileTaskStepResponsePtrOutput {
	return o
}

func (o FileTaskStepResponsePtrOutput) Elem() FileTaskStepResponseOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) FileTaskStepResponse {
		if v != nil {
			return *v
		}
		var ret FileTaskStepResponse
		return ret
	}).(FileTaskStepResponseOutput)
}

// List of base image dependencies for a step.
func (o FileTaskStepResponsePtrOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) []BaseImageDependencyResponse {
		if v == nil {
			return nil
		}
		return v.BaseImageDependencies
	}).(BaseImageDependencyResponseArrayOutput)
}

// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
func (o FileTaskStepResponsePtrOutput) ContextAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextAccessToken
	}).(pulumi.StringPtrOutput)
}

// The URL(absolute or relative) of the source context for the task step.
func (o FileTaskStepResponsePtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The task template/definition file path relative to the source context.
func (o FileTaskStepResponsePtrOutput) TaskFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TaskFilePath
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
// Expected value is 'FileTask'.
func (o FileTaskStepResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a task.
func (o FileTaskStepResponsePtrOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) []SetValueResponse {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueResponseArrayOutput)
}

// The task values/parameters file path relative to the source context.
func (o FileTaskStepResponsePtrOutput) ValuesFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileTaskStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFilePath
	}).(pulumi.StringPtrOutput)
}

// Managed identity for the resource.
type IdentityProperties struct {
	// The principal ID of resource identity.
	PrincipalId *string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId *string `pulumi:"tenantId"`
	// The identity type.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity
	// dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserIdentityProperties `pulumi:"userAssignedIdentities"`
}

// IdentityPropertiesInput is an input type that accepts IdentityPropertiesArgs and IdentityPropertiesOutput values.
// You can construct a concrete instance of `IdentityPropertiesInput` via:
//
//	IdentityPropertiesArgs{...}
type IdentityPropertiesInput interface {
	pulumi.Input

	ToIdentityPropertiesOutput() IdentityPropertiesOutput
	ToIdentityPropertiesOutputWithContext(context.Context) IdentityPropertiesOutput
}

// Managed identity for the resource.
type IdentityPropertiesArgs struct {
	// The principal ID of resource identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The identity type.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity
	// dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities UserIdentityPropertiesMapInput `pulumi:"userAssignedIdentities"`
}

func (IdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return i.ToIdentityPropertiesOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput)
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput).ToIdentityPropertiesPtrOutputWithContext(ctx)
}

// IdentityPropertiesPtrInput is an input type that accepts IdentityPropertiesArgs, IdentityPropertiesPtr and IdentityPropertiesPtrOutput values.
// You can construct a concrete instance of `IdentityPropertiesPtrInput` via:
//
//	        IdentityPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdentityPropertiesPtrInput interface {
	pulumi.Input

	ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput
	ToIdentityPropertiesPtrOutputWithContext(context.Context) IdentityPropertiesPtrOutput
}

type identityPropertiesPtrType IdentityPropertiesArgs

func IdentityPropertiesPtr(v *IdentityPropertiesArgs) IdentityPropertiesPtrInput {
	return (*identityPropertiesPtrType)(v)
}

func (*identityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesPtrOutput)
}

// Managed identity for the resource.
type IdentityPropertiesOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProperties) *IdentityProperties {
		return &v
	}).(IdentityPropertiesPtrOutput)
}

// The principal ID of resource identity.
func (o IdentityPropertiesOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProperties) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProperties) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v IdentityProperties) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesOutput) UserAssignedIdentities() UserIdentityPropertiesMapOutput {
	return o.ApplyT(func(v IdentityProperties) map[string]UserIdentityProperties { return v.UserAssignedIdentities }).(UserIdentityPropertiesMapOutput)
}

type IdentityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) Elem() IdentityPropertiesOutput {
	return o.ApplyT(func(v *IdentityProperties) IdentityProperties {
		if v != nil {
			return *v
		}
		var ret IdentityProperties
		return ret
	}).(IdentityPropertiesOutput)
}

// The principal ID of resource identity.
func (o IdentityPropertiesPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesPtrOutput) UserAssignedIdentities() UserIdentityPropertiesMapOutput {
	return o.ApplyT(func(v *IdentityProperties) map[string]UserIdentityProperties {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesMapOutput)
}

// Managed identity for the resource.
type IdentityPropertiesResponse struct {
	// The principal ID of resource identity.
	PrincipalId *string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId *string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity
	// dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserIdentityPropertiesResponse `pulumi:"userAssignedIdentities"`
}

// Managed identity for the resource.
type IdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutput() IdentityPropertiesResponseOutput {
	return o
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutputWithContext(ctx context.Context) IdentityPropertiesResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityPropertiesResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesResponseOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) map[string]UserIdentityPropertiesResponse {
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesResponseMapOutput)
}

type IdentityPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutput() IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutputWithContext(ctx context.Context) IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) Elem() IdentityPropertiesResponseOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) IdentityPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IdentityPropertiesResponse
		return ret
	}).(IdentityPropertiesResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityPropertiesResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity
// dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
//
//	providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPropertiesResponsePtrOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) map[string]UserIdentityPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesResponseMapOutput)
}

// Properties for a registry image.
type ImageDescriptorResponse struct {
	// The sha256-based digest of the image manifest.
	Digest *string `pulumi:"digest"`
	// The registry login server.
	Registry *string `pulumi:"registry"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The tag name.
	Tag *string `pulumi:"tag"`
}

// Properties for a registry image.
type ImageDescriptorResponseOutput struct{ *pulumi.OutputState }

func (ImageDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDescriptorResponse)(nil)).Elem()
}

func (o ImageDescriptorResponseOutput) ToImageDescriptorResponseOutput() ImageDescriptorResponseOutput {
	return o
}

func (o ImageDescriptorResponseOutput) ToImageDescriptorResponseOutputWithContext(ctx context.Context) ImageDescriptorResponseOutput {
	return o
}

// The sha256-based digest of the image manifest.
func (o ImageDescriptorResponseOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The registry login server.
func (o ImageDescriptorResponseOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// The repository name.
func (o ImageDescriptorResponseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag name.
func (o ImageDescriptorResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDescriptorResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImageDescriptorResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageDescriptorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDescriptorResponse)(nil)).Elem()
}

func (o ImageDescriptorResponseArrayOutput) ToImageDescriptorResponseArrayOutput() ImageDescriptorResponseArrayOutput {
	return o
}

func (o ImageDescriptorResponseArrayOutput) ToImageDescriptorResponseArrayOutputWithContext(ctx context.Context) ImageDescriptorResponseArrayOutput {
	return o
}

func (o ImageDescriptorResponseArrayOutput) Index(i pulumi.IntInput) ImageDescriptorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageDescriptorResponse {
		return vs[0].([]ImageDescriptorResponse)[vs[1].(int)]
	}).(ImageDescriptorResponseOutput)
}

// The image update trigger that caused a build.
type ImageUpdateTriggerResponse struct {
	// The unique ID of the trigger.
	Id *string `pulumi:"id"`
	// The list of image updates that caused the build.
	Images []ImageDescriptorResponse `pulumi:"images"`
	// The timestamp when the image update happened.
	Timestamp *string `pulumi:"timestamp"`
}

// The image update trigger that caused a build.
type ImageUpdateTriggerResponseOutput struct{ *pulumi.OutputState }

func (ImageUpdateTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateTriggerResponse)(nil)).Elem()
}

func (o ImageUpdateTriggerResponseOutput) ToImageUpdateTriggerResponseOutput() ImageUpdateTriggerResponseOutput {
	return o
}

func (o ImageUpdateTriggerResponseOutput) ToImageUpdateTriggerResponseOutputWithContext(ctx context.Context) ImageUpdateTriggerResponseOutput {
	return o
}

// The unique ID of the trigger.
func (o ImageUpdateTriggerResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateTriggerResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of image updates that caused the build.
func (o ImageUpdateTriggerResponseOutput) Images() ImageDescriptorResponseArrayOutput {
	return o.ApplyT(func(v ImageUpdateTriggerResponse) []ImageDescriptorResponse { return v.Images }).(ImageDescriptorResponseArrayOutput)
}

// The timestamp when the image update happened.
func (o ImageUpdateTriggerResponseOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateTriggerResponse) *string { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type ImageUpdateTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateTriggerResponse)(nil)).Elem()
}

func (o ImageUpdateTriggerResponsePtrOutput) ToImageUpdateTriggerResponsePtrOutput() ImageUpdateTriggerResponsePtrOutput {
	return o
}

func (o ImageUpdateTriggerResponsePtrOutput) ToImageUpdateTriggerResponsePtrOutputWithContext(ctx context.Context) ImageUpdateTriggerResponsePtrOutput {
	return o
}

func (o ImageUpdateTriggerResponsePtrOutput) Elem() ImageUpdateTriggerResponseOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) ImageUpdateTriggerResponse {
		if v != nil {
			return *v
		}
		var ret ImageUpdateTriggerResponse
		return ret
	}).(ImageUpdateTriggerResponseOutput)
}

// The unique ID of the trigger.
func (o ImageUpdateTriggerResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The list of image updates that caused the build.
func (o ImageUpdateTriggerResponsePtrOutput) Images() ImageDescriptorResponseArrayOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) []ImageDescriptorResponse {
		if v == nil {
			return nil
		}
		return v.Images
	}).(ImageDescriptorResponseArrayOutput)
}

// The timestamp when the image update happened.
func (o ImageUpdateTriggerResponsePtrOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timestamp
	}).(pulumi.StringPtrOutput)
}

type OverrideTaskStepProperties struct {
	// Gets or sets the collection of override arguments to be used when
	// executing a build step.
	Arguments []Argument `pulumi:"arguments"`
	// The source context against which run has to be queued.
	ContextPath *string `pulumi:"contextPath"`
	// The file against which run has to be queued.
	File *string `pulumi:"file"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
	UpdateTriggerToken *string `pulumi:"updateTriggerToken"`
	// The collection of overridable values that can be passed when running a Task.
	Values []SetValue `pulumi:"values"`
}

// OverrideTaskStepPropertiesInput is an input type that accepts OverrideTaskStepPropertiesArgs and OverrideTaskStepPropertiesOutput values.
// You can construct a concrete instance of `OverrideTaskStepPropertiesInput` via:
//
//	OverrideTaskStepPropertiesArgs{...}
type OverrideTaskStepPropertiesInput interface {
	pulumi.Input

	ToOverrideTaskStepPropertiesOutput() OverrideTaskStepPropertiesOutput
	ToOverrideTaskStepPropertiesOutputWithContext(context.Context) OverrideTaskStepPropertiesOutput
}

type OverrideTaskStepPropertiesArgs struct {
	// Gets or sets the collection of override arguments to be used when
	// executing a build step.
	Arguments ArgumentArrayInput `pulumi:"arguments"`
	// The source context against which run has to be queued.
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// The file against which run has to be queued.
	File pulumi.StringPtrInput `pulumi:"file"`
	// The name of the target build stage for the docker build.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
	UpdateTriggerToken pulumi.StringPtrInput `pulumi:"updateTriggerToken"`
	// The collection of overridable values that can be passed when running a Task.
	Values SetValueArrayInput `pulumi:"values"`
}

func (OverrideTaskStepPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OverrideTaskStepProperties)(nil)).Elem()
}

func (i OverrideTaskStepPropertiesArgs) ToOverrideTaskStepPropertiesOutput() OverrideTaskStepPropertiesOutput {
	return i.ToOverrideTaskStepPropertiesOutputWithContext(context.Background())
}

func (i OverrideTaskStepPropertiesArgs) ToOverrideTaskStepPropertiesOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideTaskStepPropertiesOutput)
}

func (i OverrideTaskStepPropertiesArgs) ToOverrideTaskStepPropertiesPtrOutput() OverrideTaskStepPropertiesPtrOutput {
	return i.ToOverrideTaskStepPropertiesPtrOutputWithContext(context.Background())
}

func (i OverrideTaskStepPropertiesArgs) ToOverrideTaskStepPropertiesPtrOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideTaskStepPropertiesOutput).ToOverrideTaskStepPropertiesPtrOutputWithContext(ctx)
}

// OverrideTaskStepPropertiesPtrInput is an input type that accepts OverrideTaskStepPropertiesArgs, OverrideTaskStepPropertiesPtr and OverrideTaskStepPropertiesPtrOutput values.
// You can construct a concrete instance of `OverrideTaskStepPropertiesPtrInput` via:
//
//	        OverrideTaskStepPropertiesArgs{...}
//
//	or:
//
//	        nil
type OverrideTaskStepPropertiesPtrInput interface {
	pulumi.Input

	ToOverrideTaskStepPropertiesPtrOutput() OverrideTaskStepPropertiesPtrOutput
	ToOverrideTaskStepPropertiesPtrOutputWithContext(context.Context) OverrideTaskStepPropertiesPtrOutput
}

type overrideTaskStepPropertiesPtrType OverrideTaskStepPropertiesArgs

func OverrideTaskStepPropertiesPtr(v *OverrideTaskStepPropertiesArgs) OverrideTaskStepPropertiesPtrInput {
	return (*overrideTaskStepPropertiesPtrType)(v)
}

func (*overrideTaskStepPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OverrideTaskStepProperties)(nil)).Elem()
}

func (i *overrideTaskStepPropertiesPtrType) ToOverrideTaskStepPropertiesPtrOutput() OverrideTaskStepPropertiesPtrOutput {
	return i.ToOverrideTaskStepPropertiesPtrOutputWithContext(context.Background())
}

func (i *overrideTaskStepPropertiesPtrType) ToOverrideTaskStepPropertiesPtrOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideTaskStepPropertiesPtrOutput)
}

type OverrideTaskStepPropertiesOutput struct{ *pulumi.OutputState }

func (OverrideTaskStepPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OverrideTaskStepProperties)(nil)).Elem()
}

func (o OverrideTaskStepPropertiesOutput) ToOverrideTaskStepPropertiesOutput() OverrideTaskStepPropertiesOutput {
	return o
}

func (o OverrideTaskStepPropertiesOutput) ToOverrideTaskStepPropertiesOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesOutput {
	return o
}

func (o OverrideTaskStepPropertiesOutput) ToOverrideTaskStepPropertiesPtrOutput() OverrideTaskStepPropertiesPtrOutput {
	return o.ToOverrideTaskStepPropertiesPtrOutputWithContext(context.Background())
}

func (o OverrideTaskStepPropertiesOutput) ToOverrideTaskStepPropertiesPtrOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OverrideTaskStepProperties) *OverrideTaskStepProperties {
		return &v
	}).(OverrideTaskStepPropertiesPtrOutput)
}

// Gets or sets the collection of override arguments to be used when
// executing a build step.
func (o OverrideTaskStepPropertiesOutput) Arguments() ArgumentArrayOutput {
	return o.ApplyT(func(v OverrideTaskStepProperties) []Argument { return v.Arguments }).(ArgumentArrayOutput)
}

// The source context against which run has to be queued.
func (o OverrideTaskStepPropertiesOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepProperties) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The file against which run has to be queued.
func (o OverrideTaskStepPropertiesOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepProperties) *string { return v.File }).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o OverrideTaskStepPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
func (o OverrideTaskStepPropertiesOutput) UpdateTriggerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepProperties) *string { return v.UpdateTriggerToken }).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a Task.
func (o OverrideTaskStepPropertiesOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v OverrideTaskStepProperties) []SetValue { return v.Values }).(SetValueArrayOutput)
}

type OverrideTaskStepPropertiesPtrOutput struct{ *pulumi.OutputState }

func (OverrideTaskStepPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OverrideTaskStepProperties)(nil)).Elem()
}

func (o OverrideTaskStepPropertiesPtrOutput) ToOverrideTaskStepPropertiesPtrOutput() OverrideTaskStepPropertiesPtrOutput {
	return o
}

func (o OverrideTaskStepPropertiesPtrOutput) ToOverrideTaskStepPropertiesPtrOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesPtrOutput {
	return o
}

func (o OverrideTaskStepPropertiesPtrOutput) Elem() OverrideTaskStepPropertiesOutput {
	return o.ApplyT(func(v *OverrideTaskStepProperties) OverrideTaskStepProperties {
		if v != nil {
			return *v
		}
		var ret OverrideTaskStepProperties
		return ret
	}).(OverrideTaskStepPropertiesOutput)
}

// Gets or sets the collection of override arguments to be used when
// executing a build step.
func (o OverrideTaskStepPropertiesPtrOutput) Arguments() ArgumentArrayOutput {
	return o.ApplyT(func(v *OverrideTaskStepProperties) []Argument {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(ArgumentArrayOutput)
}

// The source context against which run has to be queued.
func (o OverrideTaskStepPropertiesPtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepProperties) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The file against which run has to be queued.
func (o OverrideTaskStepPropertiesPtrOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepProperties) *string {
		if v == nil {
			return nil
		}
		return v.File
	}).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o OverrideTaskStepPropertiesPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepProperties) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
func (o OverrideTaskStepPropertiesPtrOutput) UpdateTriggerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepProperties) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerToken
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a Task.
func (o OverrideTaskStepPropertiesPtrOutput) Values() SetValueArrayOutput {
	return o.ApplyT(func(v *OverrideTaskStepProperties) []SetValue {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueArrayOutput)
}

type OverrideTaskStepPropertiesResponse struct {
	// Gets or sets the collection of override arguments to be used when
	// executing a build step.
	Arguments []ArgumentResponse `pulumi:"arguments"`
	// The source context against which run has to be queued.
	ContextPath *string `pulumi:"contextPath"`
	// The file against which run has to be queued.
	File *string `pulumi:"file"`
	// The name of the target build stage for the docker build.
	Target *string `pulumi:"target"`
	// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
	UpdateTriggerToken *string `pulumi:"updateTriggerToken"`
	// The collection of overridable values that can be passed when running a Task.
	Values []SetValueResponse `pulumi:"values"`
}

type OverrideTaskStepPropertiesResponseOutput struct{ *pulumi.OutputState }

func (OverrideTaskStepPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OverrideTaskStepPropertiesResponse)(nil)).Elem()
}

func (o OverrideTaskStepPropertiesResponseOutput) ToOverrideTaskStepPropertiesResponseOutput() OverrideTaskStepPropertiesResponseOutput {
	return o
}

func (o OverrideTaskStepPropertiesResponseOutput) ToOverrideTaskStepPropertiesResponseOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesResponseOutput {
	return o
}

// Gets or sets the collection of override arguments to be used when
// executing a build step.
func (o OverrideTaskStepPropertiesResponseOutput) Arguments() ArgumentResponseArrayOutput {
	return o.ApplyT(func(v OverrideTaskStepPropertiesResponse) []ArgumentResponse { return v.Arguments }).(ArgumentResponseArrayOutput)
}

// The source context against which run has to be queued.
func (o OverrideTaskStepPropertiesResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepPropertiesResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The file against which run has to be queued.
func (o OverrideTaskStepPropertiesResponseOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepPropertiesResponse) *string { return v.File }).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o OverrideTaskStepPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
func (o OverrideTaskStepPropertiesResponseOutput) UpdateTriggerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideTaskStepPropertiesResponse) *string { return v.UpdateTriggerToken }).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a Task.
func (o OverrideTaskStepPropertiesResponseOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v OverrideTaskStepPropertiesResponse) []SetValueResponse { return v.Values }).(SetValueResponseArrayOutput)
}

type OverrideTaskStepPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (OverrideTaskStepPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OverrideTaskStepPropertiesResponse)(nil)).Elem()
}

func (o OverrideTaskStepPropertiesResponsePtrOutput) ToOverrideTaskStepPropertiesResponsePtrOutput() OverrideTaskStepPropertiesResponsePtrOutput {
	return o
}

func (o OverrideTaskStepPropertiesResponsePtrOutput) ToOverrideTaskStepPropertiesResponsePtrOutputWithContext(ctx context.Context) OverrideTaskStepPropertiesResponsePtrOutput {
	return o
}

func (o OverrideTaskStepPropertiesResponsePtrOutput) Elem() OverrideTaskStepPropertiesResponseOutput {
	return o.ApplyT(func(v *OverrideTaskStepPropertiesResponse) OverrideTaskStepPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret OverrideTaskStepPropertiesResponse
		return ret
	}).(OverrideTaskStepPropertiesResponseOutput)
}

// Gets or sets the collection of override arguments to be used when
// executing a build step.
func (o OverrideTaskStepPropertiesResponsePtrOutput) Arguments() ArgumentResponseArrayOutput {
	return o.ApplyT(func(v *OverrideTaskStepPropertiesResponse) []ArgumentResponse {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(ArgumentResponseArrayOutput)
}

// The source context against which run has to be queued.
func (o OverrideTaskStepPropertiesResponsePtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The file against which run has to be queued.
func (o OverrideTaskStepPropertiesResponsePtrOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.File
	}).(pulumi.StringPtrOutput)
}

// The name of the target build stage for the docker build.
func (o OverrideTaskStepPropertiesResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
func (o OverrideTaskStepPropertiesResponsePtrOutput) UpdateTriggerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OverrideTaskStepPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTriggerToken
	}).(pulumi.StringPtrOutput)
}

// The collection of overridable values that can be passed when running a Task.
func (o OverrideTaskStepPropertiesResponsePtrOutput) Values() SetValueResponseArrayOutput {
	return o.ApplyT(func(v *OverrideTaskStepPropertiesResponse) []SetValueResponse {
		if v == nil {
			return nil
		}
		return v.Values
	}).(SetValueResponseArrayOutput)
}

// The platform properties against which the run has to happen.
type PlatformProperties struct {
	// The OS architecture.
	Architecture *string `pulumi:"architecture"`
	// The operating system type required for the run.
	Os string `pulumi:"os"`
	// Variant of the CPU.
	Variant *string `pulumi:"variant"`
}

// PlatformPropertiesInput is an input type that accepts PlatformPropertiesArgs and PlatformPropertiesOutput values.
// You can construct a concrete instance of `PlatformPropertiesInput` via:
//
//	PlatformPropertiesArgs{...}
type PlatformPropertiesInput interface {
	pulumi.Input

	ToPlatformPropertiesOutput() PlatformPropertiesOutput
	ToPlatformPropertiesOutputWithContext(context.Context) PlatformPropertiesOutput
}

// The platform properties against which the run has to happen.
type PlatformPropertiesArgs struct {
	// The OS architecture.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The operating system type required for the run.
	Os pulumi.StringInput `pulumi:"os"`
	// Variant of the CPU.
	Variant pulumi.StringPtrInput `pulumi:"variant"`
}

func (PlatformPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformProperties)(nil)).Elem()
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutput() PlatformPropertiesOutput {
	return i.ToPlatformPropertiesOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutputWithContext(ctx context.Context) PlatformPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput)
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput).ToPlatformPropertiesPtrOutputWithContext(ctx)
}

// PlatformPropertiesPtrInput is an input type that accepts PlatformPropertiesArgs, PlatformPropertiesPtr and PlatformPropertiesPtrOutput values.
// You can construct a concrete instance of `PlatformPropertiesPtrInput` via:
//
//	        PlatformPropertiesArgs{...}
//
//	or:
//
//	        nil
type PlatformPropertiesPtrInput interface {
	pulumi.Input

	ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput
	ToPlatformPropertiesPtrOutputWithContext(context.Context) PlatformPropertiesPtrOutput
}

type platformPropertiesPtrType PlatformPropertiesArgs

func PlatformPropertiesPtr(v *PlatformPropertiesArgs) PlatformPropertiesPtrInput {
	return (*platformPropertiesPtrType)(v)
}

func (*platformPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformProperties)(nil)).Elem()
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesPtrOutput)
}

// The platform properties against which the run has to happen.
type PlatformPropertiesOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformProperties)(nil)).Elem()
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesOutput() PlatformPropertiesOutput {
	return o
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesOutputWithContext(ctx context.Context) PlatformPropertiesOutput {
	return o
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return o.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (o PlatformPropertiesOutput) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlatformProperties) *PlatformProperties {
		return &v
	}).(PlatformPropertiesPtrOutput)
}

// The OS architecture.
func (o PlatformPropertiesOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformProperties) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformProperties) string { return v.Os }).(pulumi.StringOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformProperties) *string { return v.Variant }).(pulumi.StringPtrOutput)
}

type PlatformPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformProperties)(nil)).Elem()
}

func (o PlatformPropertiesPtrOutput) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return o
}

func (o PlatformPropertiesPtrOutput) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return o
}

func (o PlatformPropertiesPtrOutput) Elem() PlatformPropertiesOutput {
	return o.ApplyT(func(v *PlatformProperties) PlatformProperties {
		if v != nil {
			return *v
		}
		var ret PlatformProperties
		return ret
	}).(PlatformPropertiesOutput)
}

// The OS architecture.
func (o PlatformPropertiesPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesPtrOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Os
	}).(pulumi.StringPtrOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesPtrOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformProperties) *string {
		if v == nil {
			return nil
		}
		return v.Variant
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the run has to happen.
type PlatformPropertiesResponse struct {
	// The OS architecture.
	Architecture *string `pulumi:"architecture"`
	// The operating system type required for the run.
	Os string `pulumi:"os"`
	// Variant of the CPU.
	Variant *string `pulumi:"variant"`
}

// The platform properties against which the run has to happen.
type PlatformPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutput() PlatformPropertiesResponseOutput {
	return o
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutputWithContext(ctx context.Context) PlatformPropertiesResponseOutput {
	return o
}

// The OS architecture.
func (o PlatformPropertiesResponseOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesResponseOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) string { return v.Os }).(pulumi.StringOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesResponseOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *string { return v.Variant }).(pulumi.StringPtrOutput)
}

type PlatformPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) Elem() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) PlatformPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PlatformPropertiesResponse
		return ret
	}).(PlatformPropertiesResponseOutput)
}

// The OS architecture.
func (o PlatformPropertiesResponsePtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The operating system type required for the run.
func (o PlatformPropertiesResponsePtrOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Os
	}).(pulumi.StringPtrOutput)
}

// Variant of the CPU.
func (o PlatformPropertiesResponsePtrOutput) Variant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Variant
	}).(pulumi.StringPtrOutput)
}

// Run resource properties
type RunResponse struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentPropertiesResponse `pulumi:"agentConfiguration"`
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The time the run was scheduled.
	CreateTime *string `pulumi:"createTime"`
	// The list of custom registries that were logged in during this run.
	CustomRegistries []string `pulumi:"customRegistries"`
	// The time the run finished.
	FinishTime *string `pulumi:"finishTime"`
	// The resource ID.
	Id string `pulumi:"id"`
	// The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
	ImageUpdateTrigger *ImageUpdateTriggerResponse `pulumi:"imageUpdateTrigger"`
	// The value that indicates whether archiving is enabled or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The last updated time for the run.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The image description for the log artifact.
	LogArtifact ImageDescriptorResponse `pulumi:"logArtifact"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
	OutputImages []ImageDescriptorResponse `pulumi:"outputImages"`
	// The platform properties against which the run will happen.
	Platform *PlatformPropertiesResponse `pulumi:"platform"`
	// The provisioning state of a run.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The error message received from backend systems after the run is scheduled.
	RunErrorMessage string `pulumi:"runErrorMessage"`
	// The unique identifier for the run.
	RunId *string `pulumi:"runId"`
	// The type of run.
	RunType *string `pulumi:"runType"`
	// The scope of the credentials that were used to login to the source registry during this run.
	SourceRegistryAuth *string `pulumi:"sourceRegistryAuth"`
	// The source trigger that caused the run.
	SourceTrigger *SourceTriggerDescriptorResponse `pulumi:"sourceTrigger"`
	// The time the run started.
	StartTime *string `pulumi:"startTime"`
	// The current status of the run.
	Status *string `pulumi:"status"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The task against which run was scheduled.
	Task *string `pulumi:"task"`
	// The timer trigger that caused the run.
	TimerTrigger *TimerTriggerDescriptorResponse `pulumi:"timerTrigger"`
	// The type of the resource.
	Type string `pulumi:"type"`
	// The update trigger token passed for the Run.
	UpdateTriggerToken *string `pulumi:"updateTriggerToken"`
}

// Defaults sets the appropriate defaults for RunResponse
func (val *RunResponse) Defaults() *RunResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	return &tmp
}

// Run resource properties
type RunResponseOutput struct{ *pulumi.OutputState }

func (RunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunResponse)(nil)).Elem()
}

func (o RunResponseOutput) ToRunResponseOutput() RunResponseOutput {
	return o
}

func (o RunResponseOutput) ToRunResponseOutputWithContext(ctx context.Context) RunResponseOutput {
	return o
}

// The machine configuration of the run agent.
func (o RunResponseOutput) AgentConfiguration() AgentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *AgentPropertiesResponse { return v.AgentConfiguration }).(AgentPropertiesResponsePtrOutput)
}

// The dedicated agent pool for the run.
func (o RunResponseOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The time the run was scheduled.
func (o RunResponseOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// The list of custom registries that were logged in during this run.
func (o RunResponseOutput) CustomRegistries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RunResponse) []string { return v.CustomRegistries }).(pulumi.StringArrayOutput)
}

// The time the run finished.
func (o RunResponseOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// The resource ID.
func (o RunResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
func (o RunResponseOutput) ImageUpdateTrigger() ImageUpdateTriggerResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *ImageUpdateTriggerResponse { return v.ImageUpdateTrigger }).(ImageUpdateTriggerResponsePtrOutput)
}

// The value that indicates whether archiving is enabled or not.
func (o RunResponseOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RunResponse) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The last updated time for the run.
func (o RunResponseOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The image description for the log artifact.
func (o RunResponseOutput) LogArtifact() ImageDescriptorResponseOutput {
	return o.ApplyT(func(v RunResponse) ImageDescriptorResponse { return v.LogArtifact }).(ImageDescriptorResponseOutput)
}

// The name of the resource.
func (o RunResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
func (o RunResponseOutput) OutputImages() ImageDescriptorResponseArrayOutput {
	return o.ApplyT(func(v RunResponse) []ImageDescriptorResponse { return v.OutputImages }).(ImageDescriptorResponseArrayOutput)
}

// The platform properties against which the run will happen.
func (o RunResponseOutput) Platform() PlatformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *PlatformPropertiesResponse { return v.Platform }).(PlatformPropertiesResponsePtrOutput)
}

// The provisioning state of a run.
func (o RunResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The error message received from backend systems after the run is scheduled.
func (o RunResponseOutput) RunErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.RunErrorMessage }).(pulumi.StringOutput)
}

// The unique identifier for the run.
func (o RunResponseOutput) RunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.RunId }).(pulumi.StringPtrOutput)
}

// The type of run.
func (o RunResponseOutput) RunType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.RunType }).(pulumi.StringPtrOutput)
}

// The scope of the credentials that were used to login to the source registry during this run.
func (o RunResponseOutput) SourceRegistryAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.SourceRegistryAuth }).(pulumi.StringPtrOutput)
}

// The source trigger that caused the run.
func (o RunResponseOutput) SourceTrigger() SourceTriggerDescriptorResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *SourceTriggerDescriptorResponse { return v.SourceTrigger }).(SourceTriggerDescriptorResponsePtrOutput)
}

// The time the run started.
func (o RunResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The current status of the run.
func (o RunResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o RunResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v RunResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The task against which run was scheduled.
func (o RunResponseOutput) Task() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.Task }).(pulumi.StringPtrOutput)
}

// The timer trigger that caused the run.
func (o RunResponseOutput) TimerTrigger() TimerTriggerDescriptorResponsePtrOutput {
	return o.ApplyT(func(v RunResponse) *TimerTriggerDescriptorResponse { return v.TimerTrigger }).(TimerTriggerDescriptorResponsePtrOutput)
}

// The type of the resource.
func (o RunResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RunResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The update trigger token passed for the Run.
func (o RunResponseOutput) UpdateTriggerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResponse) *string { return v.UpdateTriggerToken }).(pulumi.StringPtrOutput)
}

// Describes the properties of a secret object value.
type SecretObject struct {
	// The type of the secret object which determines how the value of the secret object has to be
	// interpreted.
	Type *string `pulumi:"type"`
	// The value of the secret. The format of this value will be determined
	// based on the type of the secret object. If the type is Opaque, the value will be
	// used as is without any modification.
	Value *string `pulumi:"value"`
}

// SecretObjectInput is an input type that accepts SecretObjectArgs and SecretObjectOutput values.
// You can construct a concrete instance of `SecretObjectInput` via:
//
//	SecretObjectArgs{...}
type SecretObjectInput interface {
	pulumi.Input

	ToSecretObjectOutput() SecretObjectOutput
	ToSecretObjectOutputWithContext(context.Context) SecretObjectOutput
}

// Describes the properties of a secret object value.
type SecretObjectArgs struct {
	// The type of the secret object which determines how the value of the secret object has to be
	// interpreted.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the secret. The format of this value will be determined
	// based on the type of the secret object. If the type is Opaque, the value will be
	// used as is without any modification.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SecretObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObject)(nil)).Elem()
}

func (i SecretObjectArgs) ToSecretObjectOutput() SecretObjectOutput {
	return i.ToSecretObjectOutputWithContext(context.Background())
}

func (i SecretObjectArgs) ToSecretObjectOutputWithContext(ctx context.Context) SecretObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretObjectOutput)
}

func (i SecretObjectArgs) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return i.ToSecretObjectPtrOutputWithContext(context.Background())
}

func (i SecretObjectArgs) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretObjectOutput).ToSecretObjectPtrOutputWithContext(ctx)
}

// SecretObjectPtrInput is an input type that accepts SecretObjectArgs, SecretObjectPtr and SecretObjectPtrOutput values.
// You can construct a concrete instance of `SecretObjectPtrInput` via:
//
//	        SecretObjectArgs{...}
//
//	or:
//
//	        nil
type SecretObjectPtrInput interface {
	pulumi.Input

	ToSecretObjectPtrOutput() SecretObjectPtrOutput
	ToSecretObjectPtrOutputWithContext(context.Context) SecretObjectPtrOutput
}

type secretObjectPtrType SecretObjectArgs

func SecretObjectPtr(v *SecretObjectArgs) SecretObjectPtrInput {
	return (*secretObjectPtrType)(v)
}

func (*secretObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretObject)(nil)).Elem()
}

func (i *secretObjectPtrType) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return i.ToSecretObjectPtrOutputWithContext(context.Background())
}

func (i *secretObjectPtrType) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretObjectPtrOutput)
}

// Describes the properties of a secret object value.
type SecretObjectOutput struct{ *pulumi.OutputState }

func (SecretObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObject)(nil)).Elem()
}

func (o SecretObjectOutput) ToSecretObjectOutput() SecretObjectOutput {
	return o
}

func (o SecretObjectOutput) ToSecretObjectOutputWithContext(ctx context.Context) SecretObjectOutput {
	return o
}

func (o SecretObjectOutput) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return o.ToSecretObjectPtrOutputWithContext(context.Background())
}

func (o SecretObjectOutput) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretObject) *SecretObject {
		return &v
	}).(SecretObjectPtrOutput)
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObject) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObject) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SecretObjectPtrOutput struct{ *pulumi.OutputState }

func (SecretObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretObject)(nil)).Elem()
}

func (o SecretObjectPtrOutput) ToSecretObjectPtrOutput() SecretObjectPtrOutput {
	return o
}

func (o SecretObjectPtrOutput) ToSecretObjectPtrOutputWithContext(ctx context.Context) SecretObjectPtrOutput {
	return o
}

func (o SecretObjectPtrOutput) Elem() SecretObjectOutput {
	return o.ApplyT(func(v *SecretObject) SecretObject {
		if v != nil {
			return *v
		}
		var ret SecretObject
		return ret
	}).(SecretObjectOutput)
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObject) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObject) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Describes the properties of a secret object value.
type SecretObjectResponse struct {
	// The type of the secret object which determines how the value of the secret object has to be
	// interpreted.
	Type *string `pulumi:"type"`
	// The value of the secret. The format of this value will be determined
	// based on the type of the secret object. If the type is Opaque, the value will be
	// used as is without any modification.
	Value *string `pulumi:"value"`
}

// Describes the properties of a secret object value.
type SecretObjectResponseOutput struct{ *pulumi.OutputState }

func (SecretObjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretObjectResponse)(nil)).Elem()
}

func (o SecretObjectResponseOutput) ToSecretObjectResponseOutput() SecretObjectResponseOutput {
	return o
}

func (o SecretObjectResponseOutput) ToSecretObjectResponseOutputWithContext(ctx context.Context) SecretObjectResponseOutput {
	return o
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObjectResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretObjectResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SecretObjectResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretObjectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretObjectResponse)(nil)).Elem()
}

func (o SecretObjectResponsePtrOutput) ToSecretObjectResponsePtrOutput() SecretObjectResponsePtrOutput {
	return o
}

func (o SecretObjectResponsePtrOutput) ToSecretObjectResponsePtrOutputWithContext(ctx context.Context) SecretObjectResponsePtrOutput {
	return o
}

func (o SecretObjectResponsePtrOutput) Elem() SecretObjectResponseOutput {
	return o.ApplyT(func(v *SecretObjectResponse) SecretObjectResponse {
		if v != nil {
			return *v
		}
		var ret SecretObjectResponse
		return ret
	}).(SecretObjectResponseOutput)
}

// The type of the secret object which determines how the value of the secret object has to be
// interpreted.
func (o SecretObjectResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The value of the secret. The format of this value will be determined
// based on the type of the secret object. If the type is Opaque, the value will be
// used as is without any modification.
func (o SecretObjectResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The properties of a overridable value that can be passed to a task template.
type SetValue struct {
	// Flag to indicate whether the value represents a secret or not.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the overridable value.
	Name string `pulumi:"name"`
	// The overridable value.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for SetValue
func (val *SetValue) Defaults() *SetValue {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// SetValueInput is an input type that accepts SetValueArgs and SetValueOutput values.
// You can construct a concrete instance of `SetValueInput` via:
//
//	SetValueArgs{...}
type SetValueInput interface {
	pulumi.Input

	ToSetValueOutput() SetValueOutput
	ToSetValueOutputWithContext(context.Context) SetValueOutput
}

// The properties of a overridable value that can be passed to a task template.
type SetValueArgs struct {
	// Flag to indicate whether the value represents a secret or not.
	IsSecret pulumi.BoolPtrInput `pulumi:"isSecret"`
	// The name of the overridable value.
	Name pulumi.StringInput `pulumi:"name"`
	// The overridable value.
	Value pulumi.StringInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for SetValueArgs
func (val *SetValueArgs) Defaults() *SetValueArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		tmp.IsSecret = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (SetValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetValue)(nil)).Elem()
}

func (i SetValueArgs) ToSetValueOutput() SetValueOutput {
	return i.ToSetValueOutputWithContext(context.Background())
}

func (i SetValueArgs) ToSetValueOutputWithContext(ctx context.Context) SetValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetValueOutput)
}

// SetValueArrayInput is an input type that accepts SetValueArray and SetValueArrayOutput values.
// You can construct a concrete instance of `SetValueArrayInput` via:
//
//	SetValueArray{ SetValueArgs{...} }
type SetValueArrayInput interface {
	pulumi.Input

	ToSetValueArrayOutput() SetValueArrayOutput
	ToSetValueArrayOutputWithContext(context.Context) SetValueArrayOutput
}

type SetValueArray []SetValueInput

func (SetValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetValue)(nil)).Elem()
}

func (i SetValueArray) ToSetValueArrayOutput() SetValueArrayOutput {
	return i.ToSetValueArrayOutputWithContext(context.Background())
}

func (i SetValueArray) ToSetValueArrayOutputWithContext(ctx context.Context) SetValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetValueArrayOutput)
}

// The properties of a overridable value that can be passed to a task template.
type SetValueOutput struct{ *pulumi.OutputState }

func (SetValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetValue)(nil)).Elem()
}

func (o SetValueOutput) ToSetValueOutput() SetValueOutput {
	return o
}

func (o SetValueOutput) ToSetValueOutputWithContext(ctx context.Context) SetValueOutput {
	return o
}

// Flag to indicate whether the value represents a secret or not.
func (o SetValueOutput) GetIsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SetValue) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the overridable value.
func (o SetValueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SetValue) string { return v.Name }).(pulumi.StringOutput)
}

// The overridable value.
func (o SetValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SetValue) string { return v.Value }).(pulumi.StringOutput)
}

type SetValueArrayOutput struct{ *pulumi.OutputState }

func (SetValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetValue)(nil)).Elem()
}

func (o SetValueArrayOutput) ToSetValueArrayOutput() SetValueArrayOutput {
	return o
}

func (o SetValueArrayOutput) ToSetValueArrayOutputWithContext(ctx context.Context) SetValueArrayOutput {
	return o
}

func (o SetValueArrayOutput) Index(i pulumi.IntInput) SetValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SetValue {
		return vs[0].([]SetValue)[vs[1].(int)]
	}).(SetValueOutput)
}

// The properties of a overridable value that can be passed to a task template.
type SetValueResponse struct {
	// Flag to indicate whether the value represents a secret or not.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the overridable value.
	Name string `pulumi:"name"`
	// The overridable value.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for SetValueResponse
func (val *SetValueResponse) Defaults() *SetValueResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// The properties of a overridable value that can be passed to a task template.
type SetValueResponseOutput struct{ *pulumi.OutputState }

func (SetValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetValueResponse)(nil)).Elem()
}

func (o SetValueResponseOutput) ToSetValueResponseOutput() SetValueResponseOutput {
	return o
}

func (o SetValueResponseOutput) ToSetValueResponseOutputWithContext(ctx context.Context) SetValueResponseOutput {
	return o
}

// Flag to indicate whether the value represents a secret or not.
func (o SetValueResponseOutput) GetIsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SetValueResponse) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the overridable value.
func (o SetValueResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SetValueResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The overridable value.
func (o SetValueResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SetValueResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SetValueResponseArrayOutput struct{ *pulumi.OutputState }

func (SetValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SetValueResponse)(nil)).Elem()
}

func (o SetValueResponseArrayOutput) ToSetValueResponseArrayOutput() SetValueResponseArrayOutput {
	return o
}

func (o SetValueResponseArrayOutput) ToSetValueResponseArrayOutputWithContext(ctx context.Context) SetValueResponseArrayOutput {
	return o
}

func (o SetValueResponseArrayOutput) Index(i pulumi.IntInput) SetValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SetValueResponse {
		return vs[0].([]SetValueResponse)[vs[1].(int)]
	}).(SetValueResponseOutput)
}

// The properties of the source code repository.
type SourceProperties struct {
	// The branch name of the source code.
	Branch *string `pulumi:"branch"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties *AuthInfo `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// SourcePropertiesInput is an input type that accepts SourcePropertiesArgs and SourcePropertiesOutput values.
// You can construct a concrete instance of `SourcePropertiesInput` via:
//
//	SourcePropertiesArgs{...}
type SourcePropertiesInput interface {
	pulumi.Input

	ToSourcePropertiesOutput() SourcePropertiesOutput
	ToSourcePropertiesOutputWithContext(context.Context) SourcePropertiesOutput
}

// The properties of the source code repository.
type SourcePropertiesArgs struct {
	// The branch name of the source code.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The full URL to the source code repository
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties AuthInfoPtrInput `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType pulumi.StringInput `pulumi:"sourceControlType"`
}

func (SourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProperties)(nil)).Elem()
}

func (i SourcePropertiesArgs) ToSourcePropertiesOutput() SourcePropertiesOutput {
	return i.ToSourcePropertiesOutputWithContext(context.Background())
}

func (i SourcePropertiesArgs) ToSourcePropertiesOutputWithContext(ctx context.Context) SourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePropertiesOutput)
}

// The properties of the source code repository.
type SourcePropertiesOutput struct{ *pulumi.OutputState }

func (SourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProperties)(nil)).Elem()
}

func (o SourcePropertiesOutput) ToSourcePropertiesOutput() SourcePropertiesOutput {
	return o
}

func (o SourcePropertiesOutput) ToSourcePropertiesOutputWithContext(ctx context.Context) SourcePropertiesOutput {
	return o
}

// The branch name of the source code.
func (o SourcePropertiesOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceProperties) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The full URL to the source code repository
func (o SourcePropertiesOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceProperties) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository and to set up
// webhooks for notifications.
func (o SourcePropertiesOutput) SourceControlAuthProperties() AuthInfoPtrOutput {
	return o.ApplyT(func(v SourceProperties) *AuthInfo { return v.SourceControlAuthProperties }).(AuthInfoPtrOutput)
}

// The type of source control service.
func (o SourcePropertiesOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceProperties) string { return v.SourceControlType }).(pulumi.StringOutput)
}

// The properties of the source code repository.
type SourcePropertiesResponse struct {
	// The branch name of the source code.
	Branch *string `pulumi:"branch"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties *AuthInfoResponse `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// The properties of the source code repository.
type SourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourcePropertiesResponse)(nil)).Elem()
}

func (o SourcePropertiesResponseOutput) ToSourcePropertiesResponseOutput() SourcePropertiesResponseOutput {
	return o
}

func (o SourcePropertiesResponseOutput) ToSourcePropertiesResponseOutputWithContext(ctx context.Context) SourcePropertiesResponseOutput {
	return o
}

// The branch name of the source code.
func (o SourcePropertiesResponseOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The full URL to the source code repository
func (o SourcePropertiesResponseOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository and to set up
// webhooks for notifications.
func (o SourcePropertiesResponseOutput) SourceControlAuthProperties() AuthInfoResponsePtrOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) *AuthInfoResponse { return v.SourceControlAuthProperties }).(AuthInfoResponsePtrOutput)
}

// The type of source control service.
func (o SourcePropertiesResponseOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourcePropertiesResponse) string { return v.SourceControlType }).(pulumi.StringOutput)
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentials struct {
	// The authentication mode which determines the source registry login scope. The credentials for the source registry
	// will be generated using the given scope. These credentials will be used to login to
	// the source registry during the run.
	LoginMode *string `pulumi:"loginMode"`
}

// SourceRegistryCredentialsInput is an input type that accepts SourceRegistryCredentialsArgs and SourceRegistryCredentialsOutput values.
// You can construct a concrete instance of `SourceRegistryCredentialsInput` via:
//
//	SourceRegistryCredentialsArgs{...}
type SourceRegistryCredentialsInput interface {
	pulumi.Input

	ToSourceRegistryCredentialsOutput() SourceRegistryCredentialsOutput
	ToSourceRegistryCredentialsOutputWithContext(context.Context) SourceRegistryCredentialsOutput
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsArgs struct {
	// The authentication mode which determines the source registry login scope. The credentials for the source registry
	// will be generated using the given scope. These credentials will be used to login to
	// the source registry during the run.
	LoginMode pulumi.StringPtrInput `pulumi:"loginMode"`
}

func (SourceRegistryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryCredentials)(nil)).Elem()
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsOutput() SourceRegistryCredentialsOutput {
	return i.ToSourceRegistryCredentialsOutputWithContext(context.Background())
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsOutputWithContext(ctx context.Context) SourceRegistryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRegistryCredentialsOutput)
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return i.ToSourceRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (i SourceRegistryCredentialsArgs) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRegistryCredentialsOutput).ToSourceRegistryCredentialsPtrOutputWithContext(ctx)
}

// SourceRegistryCredentialsPtrInput is an input type that accepts SourceRegistryCredentialsArgs, SourceRegistryCredentialsPtr and SourceRegistryCredentialsPtrOutput values.
// You can construct a concrete instance of `SourceRegistryCredentialsPtrInput` via:
//
//	        SourceRegistryCredentialsArgs{...}
//
//	or:
//
//	        nil
type SourceRegistryCredentialsPtrInput interface {
	pulumi.Input

	ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput
	ToSourceRegistryCredentialsPtrOutputWithContext(context.Context) SourceRegistryCredentialsPtrOutput
}

type sourceRegistryCredentialsPtrType SourceRegistryCredentialsArgs

func SourceRegistryCredentialsPtr(v *SourceRegistryCredentialsArgs) SourceRegistryCredentialsPtrInput {
	return (*sourceRegistryCredentialsPtrType)(v)
}

func (*sourceRegistryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRegistryCredentials)(nil)).Elem()
}

func (i *sourceRegistryCredentialsPtrType) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return i.ToSourceRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (i *sourceRegistryCredentialsPtrType) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRegistryCredentialsPtrOutput)
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryCredentials)(nil)).Elem()
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsOutput() SourceRegistryCredentialsOutput {
	return o
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsOutputWithContext(ctx context.Context) SourceRegistryCredentialsOutput {
	return o
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return o.ToSourceRegistryCredentialsPtrOutputWithContext(context.Background())
}

func (o SourceRegistryCredentialsOutput) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceRegistryCredentials) *SourceRegistryCredentials {
		return &v
	}).(SourceRegistryCredentialsPtrOutput)
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceRegistryCredentials) *string { return v.LoginMode }).(pulumi.StringPtrOutput)
}

type SourceRegistryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRegistryCredentials)(nil)).Elem()
}

func (o SourceRegistryCredentialsPtrOutput) ToSourceRegistryCredentialsPtrOutput() SourceRegistryCredentialsPtrOutput {
	return o
}

func (o SourceRegistryCredentialsPtrOutput) ToSourceRegistryCredentialsPtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsPtrOutput {
	return o
}

func (o SourceRegistryCredentialsPtrOutput) Elem() SourceRegistryCredentialsOutput {
	return o.ApplyT(func(v *SourceRegistryCredentials) SourceRegistryCredentials {
		if v != nil {
			return *v
		}
		var ret SourceRegistryCredentials
		return ret
	}).(SourceRegistryCredentialsOutput)
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsPtrOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRegistryCredentials) *string {
		if v == nil {
			return nil
		}
		return v.LoginMode
	}).(pulumi.StringPtrOutput)
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsResponse struct {
	// The authentication mode which determines the source registry login scope. The credentials for the source registry
	// will be generated using the given scope. These credentials will be used to login to
	// the source registry during the run.
	LoginMode *string `pulumi:"loginMode"`
}

// Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentialsResponseOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRegistryCredentialsResponse)(nil)).Elem()
}

func (o SourceRegistryCredentialsResponseOutput) ToSourceRegistryCredentialsResponseOutput() SourceRegistryCredentialsResponseOutput {
	return o
}

func (o SourceRegistryCredentialsResponseOutput) ToSourceRegistryCredentialsResponseOutputWithContext(ctx context.Context) SourceRegistryCredentialsResponseOutput {
	return o
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsResponseOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceRegistryCredentialsResponse) *string { return v.LoginMode }).(pulumi.StringPtrOutput)
}

type SourceRegistryCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceRegistryCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRegistryCredentialsResponse)(nil)).Elem()
}

func (o SourceRegistryCredentialsResponsePtrOutput) ToSourceRegistryCredentialsResponsePtrOutput() SourceRegistryCredentialsResponsePtrOutput {
	return o
}

func (o SourceRegistryCredentialsResponsePtrOutput) ToSourceRegistryCredentialsResponsePtrOutputWithContext(ctx context.Context) SourceRegistryCredentialsResponsePtrOutput {
	return o
}

func (o SourceRegistryCredentialsResponsePtrOutput) Elem() SourceRegistryCredentialsResponseOutput {
	return o.ApplyT(func(v *SourceRegistryCredentialsResponse) SourceRegistryCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret SourceRegistryCredentialsResponse
		return ret
	}).(SourceRegistryCredentialsResponseOutput)
}

// The authentication mode which determines the source registry login scope. The credentials for the source registry
// will be generated using the given scope. These credentials will be used to login to
// the source registry during the run.
func (o SourceRegistryCredentialsResponsePtrOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRegistryCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoginMode
	}).(pulumi.StringPtrOutput)
}

// The properties of a source based trigger.
type SourceTrigger struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The properties that describes the source(code) for the task.
	SourceRepository SourceProperties `pulumi:"sourceRepository"`
	// The source event corresponding to the trigger.
	SourceTriggerEvents []string `pulumi:"sourceTriggerEvents"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for SourceTrigger
func (val *SourceTrigger) Defaults() *SourceTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// SourceTriggerInput is an input type that accepts SourceTriggerArgs and SourceTriggerOutput values.
// You can construct a concrete instance of `SourceTriggerInput` via:
//
//	SourceTriggerArgs{...}
type SourceTriggerInput interface {
	pulumi.Input

	ToSourceTriggerOutput() SourceTriggerOutput
	ToSourceTriggerOutputWithContext(context.Context) SourceTriggerOutput
}

// The properties of a source based trigger.
type SourceTriggerArgs struct {
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties that describes the source(code) for the task.
	SourceRepository SourcePropertiesInput `pulumi:"sourceRepository"`
	// The source event corresponding to the trigger.
	SourceTriggerEvents pulumi.StringArrayInput `pulumi:"sourceTriggerEvents"`
	// The current status of trigger.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

// Defaults sets the appropriate defaults for SourceTriggerArgs
func (val *SourceTriggerArgs) Defaults() *SourceTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		tmp.Status = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (SourceTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTrigger)(nil)).Elem()
}

func (i SourceTriggerArgs) ToSourceTriggerOutput() SourceTriggerOutput {
	return i.ToSourceTriggerOutputWithContext(context.Background())
}

func (i SourceTriggerArgs) ToSourceTriggerOutputWithContext(ctx context.Context) SourceTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTriggerOutput)
}

// SourceTriggerArrayInput is an input type that accepts SourceTriggerArray and SourceTriggerArrayOutput values.
// You can construct a concrete instance of `SourceTriggerArrayInput` via:
//
//	SourceTriggerArray{ SourceTriggerArgs{...} }
type SourceTriggerArrayInput interface {
	pulumi.Input

	ToSourceTriggerArrayOutput() SourceTriggerArrayOutput
	ToSourceTriggerArrayOutputWithContext(context.Context) SourceTriggerArrayOutput
}

type SourceTriggerArray []SourceTriggerInput

func (SourceTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceTrigger)(nil)).Elem()
}

func (i SourceTriggerArray) ToSourceTriggerArrayOutput() SourceTriggerArrayOutput {
	return i.ToSourceTriggerArrayOutputWithContext(context.Background())
}

func (i SourceTriggerArray) ToSourceTriggerArrayOutputWithContext(ctx context.Context) SourceTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTriggerArrayOutput)
}

// The properties of a source based trigger.
type SourceTriggerOutput struct{ *pulumi.OutputState }

func (SourceTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTrigger)(nil)).Elem()
}

func (o SourceTriggerOutput) ToSourceTriggerOutput() SourceTriggerOutput {
	return o
}

func (o SourceTriggerOutput) ToSourceTriggerOutputWithContext(ctx context.Context) SourceTriggerOutput {
	return o
}

// The name of the trigger.
func (o SourceTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceTrigger) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that describes the source(code) for the task.
func (o SourceTriggerOutput) SourceRepository() SourcePropertiesOutput {
	return o.ApplyT(func(v SourceTrigger) SourceProperties { return v.SourceRepository }).(SourcePropertiesOutput)
}

// The source event corresponding to the trigger.
func (o SourceTriggerOutput) SourceTriggerEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceTrigger) []string { return v.SourceTriggerEvents }).(pulumi.StringArrayOutput)
}

// The current status of trigger.
func (o SourceTriggerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTrigger) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SourceTriggerArrayOutput struct{ *pulumi.OutputState }

func (SourceTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceTrigger)(nil)).Elem()
}

func (o SourceTriggerArrayOutput) ToSourceTriggerArrayOutput() SourceTriggerArrayOutput {
	return o
}

func (o SourceTriggerArrayOutput) ToSourceTriggerArrayOutputWithContext(ctx context.Context) SourceTriggerArrayOutput {
	return o
}

func (o SourceTriggerArrayOutput) Index(i pulumi.IntInput) SourceTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceTrigger {
		return vs[0].([]SourceTrigger)[vs[1].(int)]
	}).(SourceTriggerOutput)
}

// The source trigger that caused a run.
type SourceTriggerDescriptorResponse struct {
	// The branch name in the repository.
	BranchName *string `pulumi:"branchName"`
	// The unique ID that identifies a commit.
	CommitId *string `pulumi:"commitId"`
	// The event type of the trigger.
	EventType *string `pulumi:"eventType"`
	// The unique ID of the trigger.
	Id *string `pulumi:"id"`
	// The source control provider type.
	ProviderType *string `pulumi:"providerType"`
	// The unique ID that identifies pull request.
	PullRequestId *string `pulumi:"pullRequestId"`
	// The repository URL.
	RepositoryUrl *string `pulumi:"repositoryUrl"`
}

// The source trigger that caused a run.
type SourceTriggerDescriptorResponseOutput struct{ *pulumi.OutputState }

func (SourceTriggerDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTriggerDescriptorResponse)(nil)).Elem()
}

func (o SourceTriggerDescriptorResponseOutput) ToSourceTriggerDescriptorResponseOutput() SourceTriggerDescriptorResponseOutput {
	return o
}

func (o SourceTriggerDescriptorResponseOutput) ToSourceTriggerDescriptorResponseOutputWithContext(ctx context.Context) SourceTriggerDescriptorResponseOutput {
	return o
}

// The branch name in the repository.
func (o SourceTriggerDescriptorResponseOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// The unique ID that identifies a commit.
func (o SourceTriggerDescriptorResponseOutput) CommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.CommitId }).(pulumi.StringPtrOutput)
}

// The event type of the trigger.
func (o SourceTriggerDescriptorResponseOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// The unique ID of the trigger.
func (o SourceTriggerDescriptorResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The source control provider type.
func (o SourceTriggerDescriptorResponseOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.ProviderType }).(pulumi.StringPtrOutput)
}

// The unique ID that identifies pull request.
func (o SourceTriggerDescriptorResponseOutput) PullRequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.PullRequestId }).(pulumi.StringPtrOutput)
}

// The repository URL.
func (o SourceTriggerDescriptorResponseOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerDescriptorResponse) *string { return v.RepositoryUrl }).(pulumi.StringPtrOutput)
}

type SourceTriggerDescriptorResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceTriggerDescriptorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTriggerDescriptorResponse)(nil)).Elem()
}

func (o SourceTriggerDescriptorResponsePtrOutput) ToSourceTriggerDescriptorResponsePtrOutput() SourceTriggerDescriptorResponsePtrOutput {
	return o
}

func (o SourceTriggerDescriptorResponsePtrOutput) ToSourceTriggerDescriptorResponsePtrOutputWithContext(ctx context.Context) SourceTriggerDescriptorResponsePtrOutput {
	return o
}

func (o SourceTriggerDescriptorResponsePtrOutput) Elem() SourceTriggerDescriptorResponseOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) SourceTriggerDescriptorResponse {
		if v != nil {
			return *v
		}
		var ret SourceTriggerDescriptorResponse
		return ret
	}).(SourceTriggerDescriptorResponseOutput)
}

// The branch name in the repository.
func (o SourceTriggerDescriptorResponsePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// The unique ID that identifies a commit.
func (o SourceTriggerDescriptorResponsePtrOutput) CommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommitId
	}).(pulumi.StringPtrOutput)
}

// The event type of the trigger.
func (o SourceTriggerDescriptorResponsePtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// The unique ID of the trigger.
func (o SourceTriggerDescriptorResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The source control provider type.
func (o SourceTriggerDescriptorResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// The unique ID that identifies pull request.
func (o SourceTriggerDescriptorResponsePtrOutput) PullRequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.PullRequestId
	}).(pulumi.StringPtrOutput)
}

// The repository URL.
func (o SourceTriggerDescriptorResponsePtrOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// The properties of a source based trigger.
type SourceTriggerResponse struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The properties that describes the source(code) for the task.
	SourceRepository SourcePropertiesResponse `pulumi:"sourceRepository"`
	// The source event corresponding to the trigger.
	SourceTriggerEvents []string `pulumi:"sourceTriggerEvents"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for SourceTriggerResponse
func (val *SourceTriggerResponse) Defaults() *SourceTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The properties of a source based trigger.
type SourceTriggerResponseOutput struct{ *pulumi.OutputState }

func (SourceTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceTriggerResponse)(nil)).Elem()
}

func (o SourceTriggerResponseOutput) ToSourceTriggerResponseOutput() SourceTriggerResponseOutput {
	return o
}

func (o SourceTriggerResponseOutput) ToSourceTriggerResponseOutputWithContext(ctx context.Context) SourceTriggerResponseOutput {
	return o
}

// The name of the trigger.
func (o SourceTriggerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceTriggerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that describes the source(code) for the task.
func (o SourceTriggerResponseOutput) SourceRepository() SourcePropertiesResponseOutput {
	return o.ApplyT(func(v SourceTriggerResponse) SourcePropertiesResponse { return v.SourceRepository }).(SourcePropertiesResponseOutput)
}

// The source event corresponding to the trigger.
func (o SourceTriggerResponseOutput) SourceTriggerEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceTriggerResponse) []string { return v.SourceTriggerEvents }).(pulumi.StringArrayOutput)
}

// The current status of trigger.
func (o SourceTriggerResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceTriggerResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SourceTriggerResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceTriggerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceTriggerResponse)(nil)).Elem()
}

func (o SourceTriggerResponseArrayOutput) ToSourceTriggerResponseArrayOutput() SourceTriggerResponseArrayOutput {
	return o
}

func (o SourceTriggerResponseArrayOutput) ToSourceTriggerResponseArrayOutputWithContext(ctx context.Context) SourceTriggerResponseArrayOutput {
	return o
}

func (o SourceTriggerResponseArrayOutput) Index(i pulumi.IntInput) SourceTriggerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceTriggerResponse {
		return vs[0].([]SourceTriggerResponse)[vs[1].(int)]
	}).(SourceTriggerResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource modification (UTC).
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource modification (UTC).
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The parameters for a task run request.
type TaskRunRequest struct {
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// Set of overridable parameters that can be passed when running a Task.
	OverrideTaskStepProperties *OverrideTaskStepProperties `pulumi:"overrideTaskStepProperties"`
	// The resource ID of task against which run has to be queued.
	TaskId string `pulumi:"taskId"`
	// The type of the run request.
	// Expected value is 'TaskRunRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TaskRunRequest
func (val *TaskRunRequest) Defaults() *TaskRunRequest {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	return &tmp
}

// TaskRunRequestInput is an input type that accepts TaskRunRequestArgs and TaskRunRequestOutput values.
// You can construct a concrete instance of `TaskRunRequestInput` via:
//
//	TaskRunRequestArgs{...}
type TaskRunRequestInput interface {
	pulumi.Input

	ToTaskRunRequestOutput() TaskRunRequestOutput
	ToTaskRunRequestOutputWithContext(context.Context) TaskRunRequestOutput
}

// The parameters for a task run request.
type TaskRunRequestArgs struct {
	// The dedicated agent pool for the run.
	AgentPoolName pulumi.StringPtrInput `pulumi:"agentPoolName"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled pulumi.BoolPtrInput `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate pulumi.StringPtrInput `pulumi:"logTemplate"`
	// Set of overridable parameters that can be passed when running a Task.
	OverrideTaskStepProperties OverrideTaskStepPropertiesPtrInput `pulumi:"overrideTaskStepProperties"`
	// The resource ID of task against which run has to be queued.
	TaskId pulumi.StringInput `pulumi:"taskId"`
	// The type of the run request.
	// Expected value is 'TaskRunRequest'.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TaskRunRequestArgs
func (val *TaskRunRequestArgs) Defaults() *TaskRunRequestArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		tmp.IsArchiveEnabled = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (TaskRunRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRunRequest)(nil)).Elem()
}

func (i TaskRunRequestArgs) ToTaskRunRequestOutput() TaskRunRequestOutput {
	return i.ToTaskRunRequestOutputWithContext(context.Background())
}

func (i TaskRunRequestArgs) ToTaskRunRequestOutputWithContext(ctx context.Context) TaskRunRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskRunRequestOutput)
}

func (i TaskRunRequestArgs) ToTaskRunRequestPtrOutput() TaskRunRequestPtrOutput {
	return i.ToTaskRunRequestPtrOutputWithContext(context.Background())
}

func (i TaskRunRequestArgs) ToTaskRunRequestPtrOutputWithContext(ctx context.Context) TaskRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskRunRequestOutput).ToTaskRunRequestPtrOutputWithContext(ctx)
}

// TaskRunRequestPtrInput is an input type that accepts TaskRunRequestArgs, TaskRunRequestPtr and TaskRunRequestPtrOutput values.
// You can construct a concrete instance of `TaskRunRequestPtrInput` via:
//
//	        TaskRunRequestArgs{...}
//
//	or:
//
//	        nil
type TaskRunRequestPtrInput interface {
	pulumi.Input

	ToTaskRunRequestPtrOutput() TaskRunRequestPtrOutput
	ToTaskRunRequestPtrOutputWithContext(context.Context) TaskRunRequestPtrOutput
}

type taskRunRequestPtrType TaskRunRequestArgs

func TaskRunRequestPtr(v *TaskRunRequestArgs) TaskRunRequestPtrInput {
	return (*taskRunRequestPtrType)(v)
}

func (*taskRunRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskRunRequest)(nil)).Elem()
}

func (i *taskRunRequestPtrType) ToTaskRunRequestPtrOutput() TaskRunRequestPtrOutput {
	return i.ToTaskRunRequestPtrOutputWithContext(context.Background())
}

func (i *taskRunRequestPtrType) ToTaskRunRequestPtrOutputWithContext(ctx context.Context) TaskRunRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskRunRequestPtrOutput)
}

// The parameters for a task run request.
type TaskRunRequestOutput struct{ *pulumi.OutputState }

func (TaskRunRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRunRequest)(nil)).Elem()
}

func (o TaskRunRequestOutput) ToTaskRunRequestOutput() TaskRunRequestOutput {
	return o
}

func (o TaskRunRequestOutput) ToTaskRunRequestOutputWithContext(ctx context.Context) TaskRunRequestOutput {
	return o
}

func (o TaskRunRequestOutput) ToTaskRunRequestPtrOutput() TaskRunRequestPtrOutput {
	return o.ToTaskRunRequestPtrOutputWithContext(context.Background())
}

func (o TaskRunRequestOutput) ToTaskRunRequestPtrOutputWithContext(ctx context.Context) TaskRunRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskRunRequest) *TaskRunRequest {
		return &v
	}).(TaskRunRequestPtrOutput)
}

// The dedicated agent pool for the run.
func (o TaskRunRequestOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunRequest) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o TaskRunRequestOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskRunRequest) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o TaskRunRequestOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunRequest) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// Set of overridable parameters that can be passed when running a Task.
func (o TaskRunRequestOutput) OverrideTaskStepProperties() OverrideTaskStepPropertiesPtrOutput {
	return o.ApplyT(func(v TaskRunRequest) *OverrideTaskStepProperties { return v.OverrideTaskStepProperties }).(OverrideTaskStepPropertiesPtrOutput)
}

// The resource ID of task against which run has to be queued.
func (o TaskRunRequestOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunRequest) string { return v.TaskId }).(pulumi.StringOutput)
}

// The type of the run request.
// Expected value is 'TaskRunRequest'.
func (o TaskRunRequestOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunRequest) string { return v.Type }).(pulumi.StringOutput)
}

type TaskRunRequestPtrOutput struct{ *pulumi.OutputState }

func (TaskRunRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskRunRequest)(nil)).Elem()
}

func (o TaskRunRequestPtrOutput) ToTaskRunRequestPtrOutput() TaskRunRequestPtrOutput {
	return o
}

func (o TaskRunRequestPtrOutput) ToTaskRunRequestPtrOutputWithContext(ctx context.Context) TaskRunRequestPtrOutput {
	return o
}

func (o TaskRunRequestPtrOutput) Elem() TaskRunRequestOutput {
	return o.ApplyT(func(v *TaskRunRequest) TaskRunRequest {
		if v != nil {
			return *v
		}
		var ret TaskRunRequest
		return ret
	}).(TaskRunRequestOutput)
}

// The dedicated agent pool for the run.
func (o TaskRunRequestPtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o TaskRunRequestPtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskRunRequest) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o TaskRunRequestPtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// Set of overridable parameters that can be passed when running a Task.
func (o TaskRunRequestPtrOutput) OverrideTaskStepProperties() OverrideTaskStepPropertiesPtrOutput {
	return o.ApplyT(func(v *TaskRunRequest) *OverrideTaskStepProperties {
		if v == nil {
			return nil
		}
		return v.OverrideTaskStepProperties
	}).(OverrideTaskStepPropertiesPtrOutput)
}

// The resource ID of task against which run has to be queued.
func (o TaskRunRequestPtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return &v.TaskId
	}).(pulumi.StringPtrOutput)
}

// The type of the run request.
// Expected value is 'TaskRunRequest'.
func (o TaskRunRequestPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The parameters for a task run request.
type TaskRunRequestResponse struct {
	// The dedicated agent pool for the run.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool `pulumi:"isArchiveEnabled"`
	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// Set of overridable parameters that can be passed when running a Task.
	OverrideTaskStepProperties *OverrideTaskStepPropertiesResponse `pulumi:"overrideTaskStepProperties"`
	// The resource ID of task against which run has to be queued.
	TaskId string `pulumi:"taskId"`
	// The type of the run request.
	// Expected value is 'TaskRunRequest'.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for TaskRunRequestResponse
func (val *TaskRunRequestResponse) Defaults() *TaskRunRequestResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchiveEnabled == nil {
		isArchiveEnabled_ := false
		tmp.IsArchiveEnabled = &isArchiveEnabled_
	}
	return &tmp
}

// The parameters for a task run request.
type TaskRunRequestResponseOutput struct{ *pulumi.OutputState }

func (TaskRunRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRunRequestResponse)(nil)).Elem()
}

func (o TaskRunRequestResponseOutput) ToTaskRunRequestResponseOutput() TaskRunRequestResponseOutput {
	return o
}

func (o TaskRunRequestResponseOutput) ToTaskRunRequestResponseOutputWithContext(ctx context.Context) TaskRunRequestResponseOutput {
	return o
}

// The dedicated agent pool for the run.
func (o TaskRunRequestResponseOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunRequestResponse) *string { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o TaskRunRequestResponseOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskRunRequestResponse) *bool { return v.IsArchiveEnabled }).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o TaskRunRequestResponseOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunRequestResponse) *string { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// Set of overridable parameters that can be passed when running a Task.
func (o TaskRunRequestResponseOutput) OverrideTaskStepProperties() OverrideTaskStepPropertiesResponsePtrOutput {
	return o.ApplyT(func(v TaskRunRequestResponse) *OverrideTaskStepPropertiesResponse {
		return v.OverrideTaskStepProperties
	}).(OverrideTaskStepPropertiesResponsePtrOutput)
}

// The resource ID of task against which run has to be queued.
func (o TaskRunRequestResponseOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunRequestResponse) string { return v.TaskId }).(pulumi.StringOutput)
}

// The type of the run request.
// Expected value is 'TaskRunRequest'.
func (o TaskRunRequestResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunRequestResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TaskRunRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (TaskRunRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskRunRequestResponse)(nil)).Elem()
}

func (o TaskRunRequestResponsePtrOutput) ToTaskRunRequestResponsePtrOutput() TaskRunRequestResponsePtrOutput {
	return o
}

func (o TaskRunRequestResponsePtrOutput) ToTaskRunRequestResponsePtrOutputWithContext(ctx context.Context) TaskRunRequestResponsePtrOutput {
	return o
}

func (o TaskRunRequestResponsePtrOutput) Elem() TaskRunRequestResponseOutput {
	return o.ApplyT(func(v *TaskRunRequestResponse) TaskRunRequestResponse {
		if v != nil {
			return *v
		}
		var ret TaskRunRequestResponse
		return ret
	}).(TaskRunRequestResponseOutput)
}

// The dedicated agent pool for the run.
func (o TaskRunRequestResponsePtrOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentPoolName
	}).(pulumi.StringPtrOutput)
}

// The value that indicates whether archiving is enabled for the run or not.
func (o TaskRunRequestResponsePtrOutput) IsArchiveEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskRunRequestResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsArchiveEnabled
	}).(pulumi.BoolPtrOutput)
}

// The template that describes the repository and tag information for run log artifact.
func (o TaskRunRequestResponsePtrOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogTemplate
	}).(pulumi.StringPtrOutput)
}

// Set of overridable parameters that can be passed when running a Task.
func (o TaskRunRequestResponsePtrOutput) OverrideTaskStepProperties() OverrideTaskStepPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *TaskRunRequestResponse) *OverrideTaskStepPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.OverrideTaskStepProperties
	}).(OverrideTaskStepPropertiesResponsePtrOutput)
}

// The resource ID of task against which run has to be queued.
func (o TaskRunRequestResponsePtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TaskId
	}).(pulumi.StringPtrOutput)
}

// The type of the run request.
// Expected value is 'TaskRunRequest'.
func (o TaskRunRequestResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties of a timer trigger.
type TimerTrigger struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The CRON expression for the task schedule
	Schedule string `pulumi:"schedule"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for TimerTrigger
func (val *TimerTrigger) Defaults() *TimerTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// TimerTriggerInput is an input type that accepts TimerTriggerArgs and TimerTriggerOutput values.
// You can construct a concrete instance of `TimerTriggerInput` via:
//
//	TimerTriggerArgs{...}
type TimerTriggerInput interface {
	pulumi.Input

	ToTimerTriggerOutput() TimerTriggerOutput
	ToTimerTriggerOutputWithContext(context.Context) TimerTriggerOutput
}

// The properties of a timer trigger.
type TimerTriggerArgs struct {
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// The CRON expression for the task schedule
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The current status of trigger.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

// Defaults sets the appropriate defaults for TimerTriggerArgs
func (val *TimerTriggerArgs) Defaults() *TimerTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		tmp.Status = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (TimerTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTrigger)(nil)).Elem()
}

func (i TimerTriggerArgs) ToTimerTriggerOutput() TimerTriggerOutput {
	return i.ToTimerTriggerOutputWithContext(context.Background())
}

func (i TimerTriggerArgs) ToTimerTriggerOutputWithContext(ctx context.Context) TimerTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimerTriggerOutput)
}

// TimerTriggerArrayInput is an input type that accepts TimerTriggerArray and TimerTriggerArrayOutput values.
// You can construct a concrete instance of `TimerTriggerArrayInput` via:
//
//	TimerTriggerArray{ TimerTriggerArgs{...} }
type TimerTriggerArrayInput interface {
	pulumi.Input

	ToTimerTriggerArrayOutput() TimerTriggerArrayOutput
	ToTimerTriggerArrayOutputWithContext(context.Context) TimerTriggerArrayOutput
}

type TimerTriggerArray []TimerTriggerInput

func (TimerTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimerTrigger)(nil)).Elem()
}

func (i TimerTriggerArray) ToTimerTriggerArrayOutput() TimerTriggerArrayOutput {
	return i.ToTimerTriggerArrayOutputWithContext(context.Background())
}

func (i TimerTriggerArray) ToTimerTriggerArrayOutputWithContext(ctx context.Context) TimerTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimerTriggerArrayOutput)
}

// The properties of a timer trigger.
type TimerTriggerOutput struct{ *pulumi.OutputState }

func (TimerTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTrigger)(nil)).Elem()
}

func (o TimerTriggerOutput) ToTimerTriggerOutput() TimerTriggerOutput {
	return o
}

func (o TimerTriggerOutput) ToTimerTriggerOutputWithContext(ctx context.Context) TimerTriggerOutput {
	return o
}

// The name of the trigger.
func (o TimerTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTrigger) string { return v.Name }).(pulumi.StringOutput)
}

// The CRON expression for the task schedule
func (o TimerTriggerOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTrigger) string { return v.Schedule }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o TimerTriggerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTrigger) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type TimerTriggerArrayOutput struct{ *pulumi.OutputState }

func (TimerTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimerTrigger)(nil)).Elem()
}

func (o TimerTriggerArrayOutput) ToTimerTriggerArrayOutput() TimerTriggerArrayOutput {
	return o
}

func (o TimerTriggerArrayOutput) ToTimerTriggerArrayOutputWithContext(ctx context.Context) TimerTriggerArrayOutput {
	return o
}

func (o TimerTriggerArrayOutput) Index(i pulumi.IntInput) TimerTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimerTrigger {
		return vs[0].([]TimerTrigger)[vs[1].(int)]
	}).(TimerTriggerOutput)
}

type TimerTriggerDescriptorResponse struct {
	// The occurrence that triggered the run.
	ScheduleOccurrence *string `pulumi:"scheduleOccurrence"`
	// The timer trigger name that caused the run.
	TimerTriggerName *string `pulumi:"timerTriggerName"`
}

type TimerTriggerDescriptorResponseOutput struct{ *pulumi.OutputState }

func (TimerTriggerDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTriggerDescriptorResponse)(nil)).Elem()
}

func (o TimerTriggerDescriptorResponseOutput) ToTimerTriggerDescriptorResponseOutput() TimerTriggerDescriptorResponseOutput {
	return o
}

func (o TimerTriggerDescriptorResponseOutput) ToTimerTriggerDescriptorResponseOutputWithContext(ctx context.Context) TimerTriggerDescriptorResponseOutput {
	return o
}

// The occurrence that triggered the run.
func (o TimerTriggerDescriptorResponseOutput) ScheduleOccurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTriggerDescriptorResponse) *string { return v.ScheduleOccurrence }).(pulumi.StringPtrOutput)
}

// The timer trigger name that caused the run.
func (o TimerTriggerDescriptorResponseOutput) TimerTriggerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTriggerDescriptorResponse) *string { return v.TimerTriggerName }).(pulumi.StringPtrOutput)
}

type TimerTriggerDescriptorResponsePtrOutput struct{ *pulumi.OutputState }

func (TimerTriggerDescriptorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimerTriggerDescriptorResponse)(nil)).Elem()
}

func (o TimerTriggerDescriptorResponsePtrOutput) ToTimerTriggerDescriptorResponsePtrOutput() TimerTriggerDescriptorResponsePtrOutput {
	return o
}

func (o TimerTriggerDescriptorResponsePtrOutput) ToTimerTriggerDescriptorResponsePtrOutputWithContext(ctx context.Context) TimerTriggerDescriptorResponsePtrOutput {
	return o
}

func (o TimerTriggerDescriptorResponsePtrOutput) Elem() TimerTriggerDescriptorResponseOutput {
	return o.ApplyT(func(v *TimerTriggerDescriptorResponse) TimerTriggerDescriptorResponse {
		if v != nil {
			return *v
		}
		var ret TimerTriggerDescriptorResponse
		return ret
	}).(TimerTriggerDescriptorResponseOutput)
}

// The occurrence that triggered the run.
func (o TimerTriggerDescriptorResponsePtrOutput) ScheduleOccurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimerTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleOccurrence
	}).(pulumi.StringPtrOutput)
}

// The timer trigger name that caused the run.
func (o TimerTriggerDescriptorResponsePtrOutput) TimerTriggerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimerTriggerDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimerTriggerName
	}).(pulumi.StringPtrOutput)
}

// The properties of a timer trigger.
type TimerTriggerResponse struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
	// The CRON expression for the task schedule
	Schedule string `pulumi:"schedule"`
	// The current status of trigger.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for TimerTriggerResponse
func (val *TimerTriggerResponse) Defaults() *TimerTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Enabled"
		tmp.Status = &status_
	}
	return &tmp
}

// The properties of a timer trigger.
type TimerTriggerResponseOutput struct{ *pulumi.OutputState }

func (TimerTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimerTriggerResponse)(nil)).Elem()
}

func (o TimerTriggerResponseOutput) ToTimerTriggerResponseOutput() TimerTriggerResponseOutput {
	return o
}

func (o TimerTriggerResponseOutput) ToTimerTriggerResponseOutputWithContext(ctx context.Context) TimerTriggerResponseOutput {
	return o
}

// The name of the trigger.
func (o TimerTriggerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTriggerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The CRON expression for the task schedule
func (o TimerTriggerResponseOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v TimerTriggerResponse) string { return v.Schedule }).(pulumi.StringOutput)
}

// The current status of trigger.
func (o TimerTriggerResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimerTriggerResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type TimerTriggerResponseArrayOutput struct{ *pulumi.OutputState }

func (TimerTriggerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimerTriggerResponse)(nil)).Elem()
}

func (o TimerTriggerResponseArrayOutput) ToTimerTriggerResponseArrayOutput() TimerTriggerResponseArrayOutput {
	return o
}

func (o TimerTriggerResponseArrayOutput) ToTimerTriggerResponseArrayOutputWithContext(ctx context.Context) TimerTriggerResponseArrayOutput {
	return o
}

func (o TimerTriggerResponseArrayOutput) Index(i pulumi.IntInput) TimerTriggerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimerTriggerResponse {
		return vs[0].([]TimerTriggerResponse)[vs[1].(int)]
	}).(TimerTriggerResponseOutput)
}

// The properties of a trigger.
type TriggerProperties struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger *BaseImageTrigger `pulumi:"baseImageTrigger"`
	// The collection of triggers based on source code repository.
	SourceTriggers []SourceTrigger `pulumi:"sourceTriggers"`
	// The collection of timer triggers.
	TimerTriggers []TimerTrigger `pulumi:"timerTriggers"`
}

// Defaults sets the appropriate defaults for TriggerProperties
func (val *TriggerProperties) Defaults() *TriggerProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BaseImageTrigger = tmp.BaseImageTrigger.Defaults()

	return &tmp
}

// TriggerPropertiesInput is an input type that accepts TriggerPropertiesArgs and TriggerPropertiesOutput values.
// You can construct a concrete instance of `TriggerPropertiesInput` via:
//
//	TriggerPropertiesArgs{...}
type TriggerPropertiesInput interface {
	pulumi.Input

	ToTriggerPropertiesOutput() TriggerPropertiesOutput
	ToTriggerPropertiesOutputWithContext(context.Context) TriggerPropertiesOutput
}

// The properties of a trigger.
type TriggerPropertiesArgs struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger BaseImageTriggerPtrInput `pulumi:"baseImageTrigger"`
	// The collection of triggers based on source code repository.
	SourceTriggers SourceTriggerArrayInput `pulumi:"sourceTriggers"`
	// The collection of timer triggers.
	TimerTriggers TimerTriggerArrayInput `pulumi:"timerTriggers"`
}

// Defaults sets the appropriate defaults for TriggerPropertiesArgs
func (val *TriggerPropertiesArgs) Defaults() *TriggerPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TriggerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerProperties)(nil)).Elem()
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesOutput() TriggerPropertiesOutput {
	return i.ToTriggerPropertiesOutputWithContext(context.Background())
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesOutputWithContext(ctx context.Context) TriggerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPropertiesOutput)
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return i.ToTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i TriggerPropertiesArgs) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPropertiesOutput).ToTriggerPropertiesPtrOutputWithContext(ctx)
}

// TriggerPropertiesPtrInput is an input type that accepts TriggerPropertiesArgs, TriggerPropertiesPtr and TriggerPropertiesPtrOutput values.
// You can construct a concrete instance of `TriggerPropertiesPtrInput` via:
//
//	        TriggerPropertiesArgs{...}
//
//	or:
//
//	        nil
type TriggerPropertiesPtrInput interface {
	pulumi.Input

	ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput
	ToTriggerPropertiesPtrOutputWithContext(context.Context) TriggerPropertiesPtrOutput
}

type triggerPropertiesPtrType TriggerPropertiesArgs

func TriggerPropertiesPtr(v *TriggerPropertiesArgs) TriggerPropertiesPtrInput {
	return (*triggerPropertiesPtrType)(v)
}

func (*triggerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerProperties)(nil)).Elem()
}

func (i *triggerPropertiesPtrType) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return i.ToTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i *triggerPropertiesPtrType) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPropertiesPtrOutput)
}

// The properties of a trigger.
type TriggerPropertiesOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerProperties)(nil)).Elem()
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesOutput() TriggerPropertiesOutput {
	return o
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesOutputWithContext(ctx context.Context) TriggerPropertiesOutput {
	return o
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return o.ToTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (o TriggerPropertiesOutput) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerProperties) *TriggerProperties {
		return &v
	}).(TriggerPropertiesPtrOutput)
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesOutput) BaseImageTrigger() BaseImageTriggerPtrOutput {
	return o.ApplyT(func(v TriggerProperties) *BaseImageTrigger { return v.BaseImageTrigger }).(BaseImageTriggerPtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesOutput) SourceTriggers() SourceTriggerArrayOutput {
	return o.ApplyT(func(v TriggerProperties) []SourceTrigger { return v.SourceTriggers }).(SourceTriggerArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesOutput) TimerTriggers() TimerTriggerArrayOutput {
	return o.ApplyT(func(v TriggerProperties) []TimerTrigger { return v.TimerTriggers }).(TimerTriggerArrayOutput)
}

type TriggerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerProperties)(nil)).Elem()
}

func (o TriggerPropertiesPtrOutput) ToTriggerPropertiesPtrOutput() TriggerPropertiesPtrOutput {
	return o
}

func (o TriggerPropertiesPtrOutput) ToTriggerPropertiesPtrOutputWithContext(ctx context.Context) TriggerPropertiesPtrOutput {
	return o
}

func (o TriggerPropertiesPtrOutput) Elem() TriggerPropertiesOutput {
	return o.ApplyT(func(v *TriggerProperties) TriggerProperties {
		if v != nil {
			return *v
		}
		var ret TriggerProperties
		return ret
	}).(TriggerPropertiesOutput)
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesPtrOutput) BaseImageTrigger() BaseImageTriggerPtrOutput {
	return o.ApplyT(func(v *TriggerProperties) *BaseImageTrigger {
		if v == nil {
			return nil
		}
		return v.BaseImageTrigger
	}).(BaseImageTriggerPtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesPtrOutput) SourceTriggers() SourceTriggerArrayOutput {
	return o.ApplyT(func(v *TriggerProperties) []SourceTrigger {
		if v == nil {
			return nil
		}
		return v.SourceTriggers
	}).(SourceTriggerArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesPtrOutput) TimerTriggers() TimerTriggerArrayOutput {
	return o.ApplyT(func(v *TriggerProperties) []TimerTrigger {
		if v == nil {
			return nil
		}
		return v.TimerTriggers
	}).(TimerTriggerArrayOutput)
}

// The properties of a trigger.
type TriggerPropertiesResponse struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger *BaseImageTriggerResponse `pulumi:"baseImageTrigger"`
	// The collection of triggers based on source code repository.
	SourceTriggers []SourceTriggerResponse `pulumi:"sourceTriggers"`
	// The collection of timer triggers.
	TimerTriggers []TimerTriggerResponse `pulumi:"timerTriggers"`
}

// Defaults sets the appropriate defaults for TriggerPropertiesResponse
func (val *TriggerPropertiesResponse) Defaults() *TriggerPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BaseImageTrigger = tmp.BaseImageTrigger.Defaults()

	return &tmp
}

// The properties of a trigger.
type TriggerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPropertiesResponse)(nil)).Elem()
}

func (o TriggerPropertiesResponseOutput) ToTriggerPropertiesResponseOutput() TriggerPropertiesResponseOutput {
	return o
}

func (o TriggerPropertiesResponseOutput) ToTriggerPropertiesResponseOutputWithContext(ctx context.Context) TriggerPropertiesResponseOutput {
	return o
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesResponseOutput) BaseImageTrigger() BaseImageTriggerResponsePtrOutput {
	return o.ApplyT(func(v TriggerPropertiesResponse) *BaseImageTriggerResponse { return v.BaseImageTrigger }).(BaseImageTriggerResponsePtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesResponseOutput) SourceTriggers() SourceTriggerResponseArrayOutput {
	return o.ApplyT(func(v TriggerPropertiesResponse) []SourceTriggerResponse { return v.SourceTriggers }).(SourceTriggerResponseArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesResponseOutput) TimerTriggers() TimerTriggerResponseArrayOutput {
	return o.ApplyT(func(v TriggerPropertiesResponse) []TimerTriggerResponse { return v.TimerTriggers }).(TimerTriggerResponseArrayOutput)
}

type TriggerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TriggerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPropertiesResponse)(nil)).Elem()
}

func (o TriggerPropertiesResponsePtrOutput) ToTriggerPropertiesResponsePtrOutput() TriggerPropertiesResponsePtrOutput {
	return o
}

func (o TriggerPropertiesResponsePtrOutput) ToTriggerPropertiesResponsePtrOutputWithContext(ctx context.Context) TriggerPropertiesResponsePtrOutput {
	return o
}

func (o TriggerPropertiesResponsePtrOutput) Elem() TriggerPropertiesResponseOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) TriggerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret TriggerPropertiesResponse
		return ret
	}).(TriggerPropertiesResponseOutput)
}

// The trigger based on base image dependencies.
func (o TriggerPropertiesResponsePtrOutput) BaseImageTrigger() BaseImageTriggerResponsePtrOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) *BaseImageTriggerResponse {
		if v == nil {
			return nil
		}
		return v.BaseImageTrigger
	}).(BaseImageTriggerResponsePtrOutput)
}

// The collection of triggers based on source code repository.
func (o TriggerPropertiesResponsePtrOutput) SourceTriggers() SourceTriggerResponseArrayOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) []SourceTriggerResponse {
		if v == nil {
			return nil
		}
		return v.SourceTriggers
	}).(SourceTriggerResponseArrayOutput)
}

// The collection of timer triggers.
func (o TriggerPropertiesResponsePtrOutput) TimerTriggers() TimerTriggerResponseArrayOutput {
	return o.ApplyT(func(v *TriggerPropertiesResponse) []TimerTriggerResponse {
		if v == nil {
			return nil
		}
		return v.TimerTriggers
	}).(TimerTriggerResponseArrayOutput)
}

type UserIdentityProperties struct {
	// The client id of user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId *string `pulumi:"principalId"`
}

// UserIdentityPropertiesInput is an input type that accepts UserIdentityPropertiesArgs and UserIdentityPropertiesOutput values.
// You can construct a concrete instance of `UserIdentityPropertiesInput` via:
//
//	UserIdentityPropertiesArgs{...}
type UserIdentityPropertiesInput interface {
	pulumi.Input

	ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput
	ToUserIdentityPropertiesOutputWithContext(context.Context) UserIdentityPropertiesOutput
}

type UserIdentityPropertiesArgs struct {
	// The client id of user assigned identity.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (UserIdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityProperties)(nil)).Elem()
}

func (i UserIdentityPropertiesArgs) ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput {
	return i.ToUserIdentityPropertiesOutputWithContext(context.Background())
}

func (i UserIdentityPropertiesArgs) ToUserIdentityPropertiesOutputWithContext(ctx context.Context) UserIdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPropertiesOutput)
}

// UserIdentityPropertiesMapInput is an input type that accepts UserIdentityPropertiesMap and UserIdentityPropertiesMapOutput values.
// You can construct a concrete instance of `UserIdentityPropertiesMapInput` via:
//
//	UserIdentityPropertiesMap{ "key": UserIdentityPropertiesArgs{...} }
type UserIdentityPropertiesMapInput interface {
	pulumi.Input

	ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput
	ToUserIdentityPropertiesMapOutputWithContext(context.Context) UserIdentityPropertiesMapOutput
}

type UserIdentityPropertiesMap map[string]UserIdentityPropertiesInput

func (UserIdentityPropertiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityProperties)(nil)).Elem()
}

func (i UserIdentityPropertiesMap) ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput {
	return i.ToUserIdentityPropertiesMapOutputWithContext(context.Background())
}

func (i UserIdentityPropertiesMap) ToUserIdentityPropertiesMapOutputWithContext(ctx context.Context) UserIdentityPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPropertiesMapOutput)
}

type UserIdentityPropertiesOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityProperties)(nil)).Elem()
}

func (o UserIdentityPropertiesOutput) ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput {
	return o
}

func (o UserIdentityPropertiesOutput) ToUserIdentityPropertiesOutputWithContext(ctx context.Context) UserIdentityPropertiesOutput {
	return o
}

// The client id of user assigned identity.
func (o UserIdentityPropertiesOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityProperties) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The principal id of user assigned identity.
func (o UserIdentityPropertiesOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityProperties) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityPropertiesMapOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityProperties)(nil)).Elem()
}

func (o UserIdentityPropertiesMapOutput) ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput {
	return o
}

func (o UserIdentityPropertiesMapOutput) ToUserIdentityPropertiesMapOutputWithContext(ctx context.Context) UserIdentityPropertiesMapOutput {
	return o
}

func (o UserIdentityPropertiesMapOutput) MapIndex(k pulumi.StringInput) UserIdentityPropertiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityProperties {
		return vs[0].(map[string]UserIdentityProperties)[vs[1].(string)]
	}).(UserIdentityPropertiesOutput)
}

type UserIdentityPropertiesResponse struct {
	// The client id of user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId *string `pulumi:"principalId"`
}

type UserIdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutput() UserIdentityPropertiesResponseOutput {
	return o
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseOutput {
	return o
}

// The client id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The principal id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityPropertiesResponseMapOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutput() UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) MapIndex(k pulumi.StringInput) UserIdentityPropertiesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityPropertiesResponse {
		return vs[0].(map[string]UserIdentityPropertiesResponse)[vs[1].(string)]
	}).(UserIdentityPropertiesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AgentPropertiesOutput{})
	pulumi.RegisterOutputType(AgentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AgentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AgentPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ArgumentOutput{})
	pulumi.RegisterOutputType(ArgumentArrayOutput{})
	pulumi.RegisterOutputType(ArgumentResponseOutput{})
	pulumi.RegisterOutputType(ArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(AuthInfoOutput{})
	pulumi.RegisterOutputType(AuthInfoPtrOutput{})
	pulumi.RegisterOutputType(AuthInfoResponseOutput{})
	pulumi.RegisterOutputType(AuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(BaseImageDependencyResponseOutput{})
	pulumi.RegisterOutputType(BaseImageDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerPtrOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerResponseOutput{})
	pulumi.RegisterOutputType(BaseImageTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(CredentialsOutput{})
	pulumi.RegisterOutputType(CredentialsPtrOutput{})
	pulumi.RegisterOutputType(CredentialsResponseOutput{})
	pulumi.RegisterOutputType(CredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsMapOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsResponseOutput{})
	pulumi.RegisterOutputType(CustomRegistryCredentialsResponseMapOutput{})
	pulumi.RegisterOutputType(DockerBuildRequestOutput{})
	pulumi.RegisterOutputType(DockerBuildRequestPtrOutput{})
	pulumi.RegisterOutputType(DockerBuildRequestResponseOutput{})
	pulumi.RegisterOutputType(DockerBuildRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(DockerBuildStepOutput{})
	pulumi.RegisterOutputType(DockerBuildStepPtrOutput{})
	pulumi.RegisterOutputType(DockerBuildStepResponseOutput{})
	pulumi.RegisterOutputType(DockerBuildStepResponsePtrOutput{})
	pulumi.RegisterOutputType(EncodedTaskRunRequestOutput{})
	pulumi.RegisterOutputType(EncodedTaskRunRequestPtrOutput{})
	pulumi.RegisterOutputType(EncodedTaskRunRequestResponseOutput{})
	pulumi.RegisterOutputType(EncodedTaskRunRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(EncodedTaskStepOutput{})
	pulumi.RegisterOutputType(EncodedTaskStepPtrOutput{})
	pulumi.RegisterOutputType(EncodedTaskStepResponseOutput{})
	pulumi.RegisterOutputType(EncodedTaskStepResponsePtrOutput{})
	pulumi.RegisterOutputType(FileTaskRunRequestOutput{})
	pulumi.RegisterOutputType(FileTaskRunRequestPtrOutput{})
	pulumi.RegisterOutputType(FileTaskRunRequestResponseOutput{})
	pulumi.RegisterOutputType(FileTaskRunRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(FileTaskStepOutput{})
	pulumi.RegisterOutputType(FileTaskStepPtrOutput{})
	pulumi.RegisterOutputType(FileTaskStepResponseOutput{})
	pulumi.RegisterOutputType(FileTaskStepResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageDescriptorResponseOutput{})
	pulumi.RegisterOutputType(ImageDescriptorResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageUpdateTriggerResponseOutput{})
	pulumi.RegisterOutputType(ImageUpdateTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(OverrideTaskStepPropertiesOutput{})
	pulumi.RegisterOutputType(OverrideTaskStepPropertiesPtrOutput{})
	pulumi.RegisterOutputType(OverrideTaskStepPropertiesResponseOutput{})
	pulumi.RegisterOutputType(OverrideTaskStepPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RunResponseOutput{})
	pulumi.RegisterOutputType(SecretObjectOutput{})
	pulumi.RegisterOutputType(SecretObjectPtrOutput{})
	pulumi.RegisterOutputType(SecretObjectResponseOutput{})
	pulumi.RegisterOutputType(SecretObjectResponsePtrOutput{})
	pulumi.RegisterOutputType(SetValueOutput{})
	pulumi.RegisterOutputType(SetValueArrayOutput{})
	pulumi.RegisterOutputType(SetValueResponseOutput{})
	pulumi.RegisterOutputType(SetValueResponseArrayOutput{})
	pulumi.RegisterOutputType(SourcePropertiesOutput{})
	pulumi.RegisterOutputType(SourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsResponseOutput{})
	pulumi.RegisterOutputType(SourceRegistryCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceTriggerOutput{})
	pulumi.RegisterOutputType(SourceTriggerArrayOutput{})
	pulumi.RegisterOutputType(SourceTriggerDescriptorResponseOutput{})
	pulumi.RegisterOutputType(SourceTriggerDescriptorResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceTriggerResponseOutput{})
	pulumi.RegisterOutputType(SourceTriggerResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TaskRunRequestOutput{})
	pulumi.RegisterOutputType(TaskRunRequestPtrOutput{})
	pulumi.RegisterOutputType(TaskRunRequestResponseOutput{})
	pulumi.RegisterOutputType(TaskRunRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(TimerTriggerOutput{})
	pulumi.RegisterOutputType(TimerTriggerArrayOutput{})
	pulumi.RegisterOutputType(TimerTriggerDescriptorResponseOutput{})
	pulumi.RegisterOutputType(TimerTriggerDescriptorResponsePtrOutput{})
	pulumi.RegisterOutputType(TimerTriggerResponseOutput{})
	pulumi.RegisterOutputType(TimerTriggerResponseArrayOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TriggerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesMapOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseMapOutput{})
}
