// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets NetworkRuleSet for a Namespace.
// Azure REST API version: 2022-10-01-preview.
func LookupNamespaceNetworkRuleSet(ctx *pulumi.Context, args *LookupNamespaceNetworkRuleSetArgs, opts ...pulumi.InvokeOption) (*LookupNamespaceNetworkRuleSetResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupNamespaceNetworkRuleSetResult
	err := ctx.Invoke("azure-native:eventhub:getNamespaceNetworkRuleSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupNamespaceNetworkRuleSetArgs struct {
	// The Namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Description of topic resource.
type LookupNamespaceNetworkRuleSetResult struct {
	// Default Action for Network Rule Set
	DefaultAction *string `pulumi:"defaultAction"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// List of IpRules
	IpRules []NWRuleSetIpRulesResponse `pulumi:"ipRules"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// This determines if traffic is allowed over public network. By default it is enabled. If value is SecuredByPerimeter then Inbound and Outbound communication is controlled by the network security perimeter and profile's access rules.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The system meta data relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Value that indicates whether Trusted Service Access is Enabled or not.
	TrustedServiceAccessEnabled *bool `pulumi:"trustedServiceAccessEnabled"`
	// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
	Type string `pulumi:"type"`
	// List VirtualNetwork Rules
	VirtualNetworkRules []NWRuleSetVirtualNetworkRulesResponse `pulumi:"virtualNetworkRules"`
}

// Defaults sets the appropriate defaults for LookupNamespaceNetworkRuleSetResult
func (val *LookupNamespaceNetworkRuleSetResult) Defaults() *LookupNamespaceNetworkRuleSetResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

func LookupNamespaceNetworkRuleSetOutput(ctx *pulumi.Context, args LookupNamespaceNetworkRuleSetOutputArgs, opts ...pulumi.InvokeOption) LookupNamespaceNetworkRuleSetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNamespaceNetworkRuleSetResult, error) {
			args := v.(LookupNamespaceNetworkRuleSetArgs)
			r, err := LookupNamespaceNetworkRuleSet(ctx, &args, opts...)
			var s LookupNamespaceNetworkRuleSetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNamespaceNetworkRuleSetResultOutput)
}

type LookupNamespaceNetworkRuleSetOutputArgs struct {
	// The Namespace name
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupNamespaceNetworkRuleSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceNetworkRuleSetArgs)(nil)).Elem()
}

// Description of topic resource.
type LookupNamespaceNetworkRuleSetResultOutput struct{ *pulumi.OutputState }

func (LookupNamespaceNetworkRuleSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceNetworkRuleSetResult)(nil)).Elem()
}

func (o LookupNamespaceNetworkRuleSetResultOutput) ToLookupNamespaceNetworkRuleSetResultOutput() LookupNamespaceNetworkRuleSetResultOutput {
	return o
}

func (o LookupNamespaceNetworkRuleSetResultOutput) ToLookupNamespaceNetworkRuleSetResultOutputWithContext(ctx context.Context) LookupNamespaceNetworkRuleSetResultOutput {
	return o
}

func (o LookupNamespaceNetworkRuleSetResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNamespaceNetworkRuleSetResult] {
	return pulumix.Output[LookupNamespaceNetworkRuleSetResult]{
		OutputState: o.OutputState,
	}
}

// Default Action for Network Rule Set
func (o LookupNamespaceNetworkRuleSetResultOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupNamespaceNetworkRuleSetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of IpRules
func (o LookupNamespaceNetworkRuleSetResultOutput) IpRules() NWRuleSetIpRulesResponseArrayOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) []NWRuleSetIpRulesResponse { return v.IpRules }).(NWRuleSetIpRulesResponseArrayOutput)
}

// The geo-location where the resource lives
func (o LookupNamespaceNetworkRuleSetResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupNamespaceNetworkRuleSetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) string { return v.Name }).(pulumi.StringOutput)
}

// This determines if traffic is allowed over public network. By default it is enabled. If value is SecuredByPerimeter then Inbound and Outbound communication is controlled by the network security perimeter and profile's access rules.
func (o LookupNamespaceNetworkRuleSetResultOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// The system meta data relating to this resource.
func (o LookupNamespaceNetworkRuleSetResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Value that indicates whether Trusted Service Access is Enabled or not.
func (o LookupNamespaceNetworkRuleSetResultOutput) TrustedServiceAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) *bool { return v.TrustedServiceAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
func (o LookupNamespaceNetworkRuleSetResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) string { return v.Type }).(pulumi.StringOutput)
}

// List VirtualNetwork Rules
func (o LookupNamespaceNetworkRuleSetResultOutput) VirtualNetworkRules() NWRuleSetVirtualNetworkRulesResponseArrayOutput {
	return o.ApplyT(func(v LookupNamespaceNetworkRuleSetResult) []NWRuleSetVirtualNetworkRulesResponse {
		return v.VirtualNetworkRules
	}).(NWRuleSetVirtualNetworkRulesResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNamespaceNetworkRuleSetResultOutput{})
}
