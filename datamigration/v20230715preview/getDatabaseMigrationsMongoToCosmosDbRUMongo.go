// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230715preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get Database Migration resource.
func LookupDatabaseMigrationsMongoToCosmosDbRUMongo(ctx *pulumi.Context, args *LookupDatabaseMigrationsMongoToCosmosDbRUMongoArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult
	err := ctx.Invoke("azure-native:datamigration/v20230715preview:getDatabaseMigrationsMongoToCosmosDbRUMongo", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDatabaseMigrationsMongoToCosmosDbRUMongoArgs struct {
	// Name of the migration.
	MigrationName string `pulumi:"migrationName"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the target resource/account.
	TargetResourceName string `pulumi:"targetResourceName"`
}

// Database Migration Resource for Mongo to CosmosDb.
type LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult struct {
	// List of Mongo Collections to be migrated.
	CollectionList []MongoMigrationCollectionResponse `pulumi:"collectionList"`
	// Database migration end time.
	EndedOn string `pulumi:"endedOn"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Expected value is 'MongoToCosmosDbMongo'.
	Kind string `pulumi:"kind"`
	// Error details in case of migration failure.
	MigrationFailureError ErrorInfoResponse `pulumi:"migrationFailureError"`
	// ID for current migration operation.
	MigrationOperationId *string `pulumi:"migrationOperationId"`
	// Resource Id of the Migration Service.
	MigrationService *string `pulumi:"migrationService"`
	// Migration status.
	MigrationStatus string `pulumi:"migrationStatus"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Error message for migration provisioning failure, if any.
	ProvisioningError *string `pulumi:"provisioningError"`
	// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource Id of the target resource.
	Scope *string `pulumi:"scope"`
	// Source Mongo connection details.
	SourceMongoConnection *MongoConnectionInformationResponse `pulumi:"sourceMongoConnection"`
	// Database migration start time.
	StartedOn string `pulumi:"startedOn"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Target Cosmos DB Mongo connection details.
	TargetMongoConnection *MongoConnectionInformationResponse `pulumi:"targetMongoConnection"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupDatabaseMigrationsMongoToCosmosDbRUMongoOutput(ctx *pulumi.Context, args LookupDatabaseMigrationsMongoToCosmosDbRUMongoOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult, error) {
			args := v.(LookupDatabaseMigrationsMongoToCosmosDbRUMongoArgs)
			r, err := LookupDatabaseMigrationsMongoToCosmosDbRUMongo(ctx, &args, opts...)
			var s LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput)
}

type LookupDatabaseMigrationsMongoToCosmosDbRUMongoOutputArgs struct {
	// Name of the migration.
	MigrationName pulumi.StringInput `pulumi:"migrationName"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the target resource/account.
	TargetResourceName pulumi.StringInput `pulumi:"targetResourceName"`
}

func (LookupDatabaseMigrationsMongoToCosmosDbRUMongoOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseMigrationsMongoToCosmosDbRUMongoArgs)(nil)).Elem()
}

// Database Migration Resource for Mongo to CosmosDb.
type LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult)(nil)).Elem()
}

func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) ToLookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput() LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput {
	return o
}

func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) ToLookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutputWithContext(ctx context.Context) LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput {
	return o
}

// List of Mongo Collections to be migrated.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) CollectionList() MongoMigrationCollectionResponseArrayOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) []MongoMigrationCollectionResponse {
		return v.CollectionList
	}).(MongoMigrationCollectionResponseArrayOutput)
}

// Database migration end time.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.Id }).(pulumi.StringOutput)
}

// Expected value is 'MongoToCosmosDbMongo'.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Error details in case of migration failure.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) MigrationFailureError() ErrorInfoResponseOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) ErrorInfoResponse {
		return v.MigrationFailureError
	}).(ErrorInfoResponseOutput)
}

// ID for current migration operation.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) MigrationOperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) *string { return v.MigrationOperationId }).(pulumi.StringPtrOutput)
}

// Resource Id of the Migration Service.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) MigrationService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) *string { return v.MigrationService }).(pulumi.StringPtrOutput)
}

// Migration status.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) MigrationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.MigrationStatus }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.Name }).(pulumi.StringOutput)
}

// Error message for migration provisioning failure, if any.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) ProvisioningError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) *string { return v.ProvisioningError }).(pulumi.StringPtrOutput)
}

// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource Id of the target resource.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// Source Mongo connection details.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) SourceMongoConnection() MongoConnectionInformationResponsePtrOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) *MongoConnectionInformationResponse {
		return v.SourceMongoConnection
	}).(MongoConnectionInformationResponsePtrOutput)
}

// Database migration start time.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Target Cosmos DB Mongo connection details.
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) TargetMongoConnection() MongoConnectionInformationResponsePtrOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) *MongoConnectionInformationResponse {
		return v.TargetMongoConnection
	}).(MongoConnectionInformationResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseMigrationsMongoToCosmosDbRUMongoResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseMigrationsMongoToCosmosDbRUMongoResultOutput{})
}
