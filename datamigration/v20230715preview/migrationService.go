// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230715preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Migration Service.
type MigrationService struct {
	pulumi.CustomResourceState

	// Current state of the Integration runtime.
	IntegrationRuntimeState pulumi.StringOutput `pulumi:"integrationRuntimeState"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state to track the async operation status.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMigrationService registers a new resource with the given unique name, arguments, and options.
func NewMigrationService(ctx *pulumi.Context,
	name string, args *MigrationServiceArgs, opts ...pulumi.ResourceOption) (*MigrationService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datamigration:MigrationService"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MigrationService
	err := ctx.RegisterResource("azure-native:datamigration/v20230715preview:MigrationService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMigrationService gets an existing MigrationService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMigrationService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MigrationServiceState, opts ...pulumi.ResourceOption) (*MigrationService, error) {
	var resource MigrationService
	err := ctx.ReadResource("azure-native:datamigration/v20230715preview:MigrationService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MigrationService resources.
type migrationServiceState struct {
}

type MigrationServiceState struct {
}

func (MigrationServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationServiceState)(nil)).Elem()
}

type migrationServiceArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Name of the Migration Service.
	MigrationServiceName *string `pulumi:"migrationServiceName"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MigrationService resource.
type MigrationServiceArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Name of the Migration Service.
	MigrationServiceName pulumi.StringPtrInput
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (MigrationServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationServiceArgs)(nil)).Elem()
}

type MigrationServiceInput interface {
	pulumi.Input

	ToMigrationServiceOutput() MigrationServiceOutput
	ToMigrationServiceOutputWithContext(ctx context.Context) MigrationServiceOutput
}

func (*MigrationService) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationService)(nil)).Elem()
}

func (i *MigrationService) ToMigrationServiceOutput() MigrationServiceOutput {
	return i.ToMigrationServiceOutputWithContext(context.Background())
}

func (i *MigrationService) ToMigrationServiceOutputWithContext(ctx context.Context) MigrationServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationServiceOutput)
}

type MigrationServiceOutput struct{ *pulumi.OutputState }

func (MigrationServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationService)(nil)).Elem()
}

func (o MigrationServiceOutput) ToMigrationServiceOutput() MigrationServiceOutput {
	return o
}

func (o MigrationServiceOutput) ToMigrationServiceOutputWithContext(ctx context.Context) MigrationServiceOutput {
	return o
}

// Current state of the Integration runtime.
func (o MigrationServiceOutput) IntegrationRuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationService) pulumi.StringOutput { return v.IntegrationRuntimeState }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o MigrationServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o MigrationServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state to track the async operation status.
func (o MigrationServiceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationService) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o MigrationServiceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *MigrationService) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o MigrationServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrationService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o MigrationServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrationService) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MigrationServiceOutput{})
}
