// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220330preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Azure Active Directory Application
type AzureActiveDirectoryApp struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey *string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId *string `pulumi:"applicationId"`
	// Ignore checking azure permissions on the AAD app
	IgnoreAzurePermissions *bool `pulumi:"ignoreAzurePermissions"`
	// Tenant id of the customer
	TenantId *string `pulumi:"tenantId"`
}

// AzureActiveDirectoryAppInput is an input type that accepts AzureActiveDirectoryAppArgs and AzureActiveDirectoryAppOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppInput` via:
//
//	AzureActiveDirectoryAppArgs{...}
type AzureActiveDirectoryAppInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput
	ToAzureActiveDirectoryAppOutputWithContext(context.Context) AzureActiveDirectoryAppOutput
}

// Azure Active Directory Application
type AzureActiveDirectoryAppArgs struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey pulumi.StringPtrInput `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Ignore checking azure permissions on the AAD app
	IgnoreAzurePermissions pulumi.BoolPtrInput `pulumi:"ignoreAzurePermissions"`
	// Tenant id of the customer
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (AzureActiveDirectoryAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryApp)(nil)).Elem()
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput {
	return i.ToAzureActiveDirectoryAppOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppOutputWithContext(ctx context.Context) AzureActiveDirectoryAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppOutput)
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return i.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppOutput).ToAzureActiveDirectoryAppPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryAppPtrInput is an input type that accepts AzureActiveDirectoryAppArgs, AzureActiveDirectoryAppPtr and AzureActiveDirectoryAppPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppPtrInput` via:
//
//	        AzureActiveDirectoryAppArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryAppPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput
	ToAzureActiveDirectoryAppPtrOutputWithContext(context.Context) AzureActiveDirectoryAppPtrOutput
}

type azureActiveDirectoryAppPtrType AzureActiveDirectoryAppArgs

func AzureActiveDirectoryAppPtr(v *AzureActiveDirectoryAppArgs) AzureActiveDirectoryAppPtrInput {
	return (*azureActiveDirectoryAppPtrType)(v)
}

func (*azureActiveDirectoryAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryApp)(nil)).Elem()
}

func (i *azureActiveDirectoryAppPtrType) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return i.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryAppPtrType) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppPtrOutput)
}

// Azure Active Directory Application
type AzureActiveDirectoryAppOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryApp)(nil)).Elem()
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput {
	return o
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppOutputWithContext(ctx context.Context) AzureActiveDirectoryAppOutput {
	return o
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return o.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryAppOutput) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectoryApp) *AzureActiveDirectoryApp {
		return &v
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) *string { return v.AppKey }).(pulumi.StringPtrOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Ignore checking azure permissions on the AAD app
func (o AzureActiveDirectoryAppOutput) IgnoreAzurePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) *bool { return v.IgnoreAzurePermissions }).(pulumi.BoolPtrOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryApp) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryAppPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryApp)(nil)).Elem()
}

func (o AzureActiveDirectoryAppPtrOutput) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return o
}

func (o AzureActiveDirectoryAppPtrOutput) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return o
}

func (o AzureActiveDirectoryAppPtrOutput) Elem() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) AzureActiveDirectoryApp {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryApp
		return ret
	}).(AzureActiveDirectoryAppOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppPtrOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) *string {
		if v == nil {
			return nil
		}
		return v.AppKey
	}).(pulumi.StringPtrOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Ignore checking azure permissions on the AAD app
func (o AzureActiveDirectoryAppPtrOutput) IgnoreAzurePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreAzurePermissions
	}).(pulumi.BoolPtrOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryApp) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponse struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey *string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId *string `pulumi:"applicationId"`
	// Ignore checking azure permissions on the AAD app
	IgnoreAzurePermissions *bool `pulumi:"ignoreAzurePermissions"`
	// Tenant id of the customer
	TenantId *string `pulumi:"tenantId"`
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponseOutput() AzureActiveDirectoryAppResponseOutput {
	return o
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponseOutput {
	return o
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponseOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) *string { return v.AppKey }).(pulumi.StringPtrOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponseOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Ignore checking azure permissions on the AAD app
func (o AzureActiveDirectoryAppResponseOutput) IgnoreAzurePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) *bool { return v.IgnoreAzurePermissions }).(pulumi.BoolPtrOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryAppResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryAppResponsePtrOutput) ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryAppResponsePtrOutput) ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryAppResponsePtrOutput) Elem() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) AzureActiveDirectoryAppResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryAppResponse
		return ret
	}).(AzureActiveDirectoryAppResponseOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponsePtrOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppKey
	}).(pulumi.StringPtrOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Ignore checking azure permissions on the AAD app
func (o AzureActiveDirectoryAppResponsePtrOutput) IgnoreAzurePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreAzurePermissions
	}).(pulumi.BoolPtrOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Information of the backup file
type BackupFileInfoResponse struct {
	// Sequence number of the backup file in the backup set
	FamilySequenceNumber *int `pulumi:"familySequenceNumber"`
	// Location of the backup file in shared folder
	FileLocation *string `pulumi:"fileLocation"`
	// Status of the backup file during migration
	Status *string `pulumi:"status"`
}

// Information of the backup file
type BackupFileInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupFileInfoResponse)(nil)).Elem()
}

func (o BackupFileInfoResponseOutput) ToBackupFileInfoResponseOutput() BackupFileInfoResponseOutput {
	return o
}

func (o BackupFileInfoResponseOutput) ToBackupFileInfoResponseOutputWithContext(ctx context.Context) BackupFileInfoResponseOutput {
	return o
}

// Sequence number of the backup file in the backup set
func (o BackupFileInfoResponseOutput) FamilySequenceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *int { return v.FamilySequenceNumber }).(pulumi.IntPtrOutput)
}

// Location of the backup file in shared folder
func (o BackupFileInfoResponseOutput) FileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *string { return v.FileLocation }).(pulumi.StringPtrOutput)
}

// Status of the backup file during migration
func (o BackupFileInfoResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type BackupFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (BackupFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupFileInfoResponse)(nil)).Elem()
}

func (o BackupFileInfoResponseArrayOutput) ToBackupFileInfoResponseArrayOutput() BackupFileInfoResponseArrayOutput {
	return o
}

func (o BackupFileInfoResponseArrayOutput) ToBackupFileInfoResponseArrayOutputWithContext(ctx context.Context) BackupFileInfoResponseArrayOutput {
	return o
}

func (o BackupFileInfoResponseArrayOutput) Index(i pulumi.IntInput) BackupFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupFileInfoResponse {
		return vs[0].([]BackupFileInfoResponse)[vs[1].(int)]
	}).(BackupFileInfoResponseOutput)
}

// Information of backup set
type BackupSetInfoResponse struct {
	// Date and time that the backup operation finished
	BackupFinishedDate *string `pulumi:"backupFinishedDate"`
	// Id for the set of backup files
	BackupSetId *string `pulumi:"backupSetId"`
	// Date and time that the backup operation began
	BackupStartDate *string `pulumi:"backupStartDate"`
	// Enum of the different backup types
	BackupType *string `pulumi:"backupType"`
	// Name of the database to which the backup set belongs
	DatabaseName *string `pulumi:"databaseName"`
	// First log sequence number of the backup file
	FirstLsn *string `pulumi:"firstLsn"`
	// Whether the backup set is restored or not
	IsBackupRestored *bool `pulumi:"isBackupRestored"`
	// Last log sequence number of the backup file
	LastLsn *string `pulumi:"lastLsn"`
	// Last modified time of the backup file in share location
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// List of files in the backup set
	ListOfBackupFiles []BackupFileInfoResponse `pulumi:"listOfBackupFiles"`
}

// Information of backup set
type BackupSetInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupSetInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSetInfoResponse)(nil)).Elem()
}

func (o BackupSetInfoResponseOutput) ToBackupSetInfoResponseOutput() BackupSetInfoResponseOutput {
	return o
}

func (o BackupSetInfoResponseOutput) ToBackupSetInfoResponseOutputWithContext(ctx context.Context) BackupSetInfoResponseOutput {
	return o
}

// Date and time that the backup operation finished
func (o BackupSetInfoResponseOutput) BackupFinishedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupFinishedDate }).(pulumi.StringPtrOutput)
}

// Id for the set of backup files
func (o BackupSetInfoResponseOutput) BackupSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupSetId }).(pulumi.StringPtrOutput)
}

// Date and time that the backup operation began
func (o BackupSetInfoResponseOutput) BackupStartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupStartDate }).(pulumi.StringPtrOutput)
}

// Enum of the different backup types
func (o BackupSetInfoResponseOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupType }).(pulumi.StringPtrOutput)
}

// Name of the database to which the backup set belongs
func (o BackupSetInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// First log sequence number of the backup file
func (o BackupSetInfoResponseOutput) FirstLsn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.FirstLsn }).(pulumi.StringPtrOutput)
}

// Whether the backup set is restored or not
func (o BackupSetInfoResponseOutput) IsBackupRestored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *bool { return v.IsBackupRestored }).(pulumi.BoolPtrOutput)
}

// Last log sequence number of the backup file
func (o BackupSetInfoResponseOutput) LastLsn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.LastLsn }).(pulumi.StringPtrOutput)
}

// Last modified time of the backup file in share location
func (o BackupSetInfoResponseOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.LastModifiedTime }).(pulumi.StringPtrOutput)
}

// List of files in the backup set
func (o BackupSetInfoResponseOutput) ListOfBackupFiles() BackupFileInfoResponseArrayOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) []BackupFileInfoResponse { return v.ListOfBackupFiles }).(BackupFileInfoResponseArrayOutput)
}

type BackupSetInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (BackupSetInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSetInfoResponse)(nil)).Elem()
}

func (o BackupSetInfoResponseArrayOutput) ToBackupSetInfoResponseArrayOutput() BackupSetInfoResponseArrayOutput {
	return o
}

func (o BackupSetInfoResponseArrayOutput) ToBackupSetInfoResponseArrayOutputWithContext(ctx context.Context) BackupSetInfoResponseArrayOutput {
	return o
}

func (o BackupSetInfoResponseArrayOutput) Index(i pulumi.IntInput) BackupSetInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSetInfoResponse {
		return vs[0].([]BackupSetInfoResponse)[vs[1].(int)]
	}).(BackupSetInfoResponseOutput)
}

// Blob container storage information.
type BlobShare struct {
	// SAS URI of Azure Storage Account Container.
	SasUri *string `pulumi:"sasUri"`
}

// BlobShareInput is an input type that accepts BlobShareArgs and BlobShareOutput values.
// You can construct a concrete instance of `BlobShareInput` via:
//
//	BlobShareArgs{...}
type BlobShareInput interface {
	pulumi.Input

	ToBlobShareOutput() BlobShareOutput
	ToBlobShareOutputWithContext(context.Context) BlobShareOutput
}

// Blob container storage information.
type BlobShareArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringPtrInput `pulumi:"sasUri"`
}

func (BlobShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (i BlobShareArgs) ToBlobShareOutput() BlobShareOutput {
	return i.ToBlobShareOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput)
}

func (i BlobShareArgs) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput).ToBlobSharePtrOutputWithContext(ctx)
}

// BlobSharePtrInput is an input type that accepts BlobShareArgs, BlobSharePtr and BlobSharePtrOutput values.
// You can construct a concrete instance of `BlobSharePtrInput` via:
//
//	        BlobShareArgs{...}
//
//	or:
//
//	        nil
type BlobSharePtrInput interface {
	pulumi.Input

	ToBlobSharePtrOutput() BlobSharePtrOutput
	ToBlobSharePtrOutputWithContext(context.Context) BlobSharePtrOutput
}

type blobSharePtrType BlobShareArgs

func BlobSharePtr(v *BlobShareArgs) BlobSharePtrInput {
	return (*blobSharePtrType)(v)
}

func (*blobSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (i *blobSharePtrType) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i *blobSharePtrType) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobSharePtrOutput)
}

// Blob container storage information.
type BlobShareOutput struct{ *pulumi.OutputState }

func (BlobShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (o BlobShareOutput) ToBlobShareOutput() BlobShareOutput {
	return o
}

func (o BlobShareOutput) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return o
}

func (o BlobShareOutput) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return o.ToBlobSharePtrOutputWithContext(context.Background())
}

func (o BlobShareOutput) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobShare) *BlobShare {
		return &v
	}).(BlobSharePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobShare) *string { return v.SasUri }).(pulumi.StringPtrOutput)
}

type BlobSharePtrOutput struct{ *pulumi.OutputState }

func (BlobSharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (o BlobSharePtrOutput) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return o
}

func (o BlobSharePtrOutput) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return o
}

func (o BlobSharePtrOutput) Elem() BlobShareOutput {
	return o.ApplyT(func(v *BlobShare) BlobShare {
		if v != nil {
			return *v
		}
		var ret BlobShare
		return ret
	}).(BlobShareOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobSharePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShare) *string {
		if v == nil {
			return nil
		}
		return v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Blob container storage information.
type BlobShareResponse struct {
	// SAS URI of Azure Storage Account Container.
	SasUri *string `pulumi:"sasUri"`
}

// Blob container storage information.
type BlobShareResponseOutput struct{ *pulumi.OutputState }

func (BlobShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutput() BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutputWithContext(ctx context.Context) BlobShareResponseOutput {
	return o
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponseOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobShareResponse) *string { return v.SasUri }).(pulumi.StringPtrOutput)
}

type BlobShareResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) Elem() BlobShareResponseOutput {
	return o.ApplyT(func(v *BlobShareResponse) BlobShareResponse {
		if v != nil {
			return *v
		}
		var ret BlobShareResponse
		return ret
	}).(BlobShareResponseOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponsePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfo `pulumi:"input"`
	// Task type.
	// Expected value is 'Connect.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToMongoDbTaskProperties
func (val *ConnectToMongoDbTaskProperties) Defaults() *ConnectToMongoDbTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToMongoDbTaskPropertiesInput is an input type that accepts ConnectToMongoDbTaskPropertiesArgs and ConnectToMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToMongoDbTaskPropertiesInput` via:
//
//	ConnectToMongoDbTaskPropertiesArgs{...}
type ConnectToMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput
	ToConnectToMongoDbTaskPropertiesOutputWithContext(context.Context) ConnectToMongoDbTaskPropertiesOutput
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes a connection to a MongoDB data source
	Input MongoDbConnectionInfoPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Connect.MongoDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToMongoDbTaskPropertiesArgs
func (val *ConnectToMongoDbTaskPropertiesArgs) Defaults() *ConnectToMongoDbTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskProperties)(nil)).Elem()
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput {
	return i.ToConnectToMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToMongoDbTaskPropertiesOutput)
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesPtrOutput() ConnectToMongoDbTaskPropertiesPtrOutput {
	return i.ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToMongoDbTaskPropertiesOutput).ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToMongoDbTaskPropertiesPtrInput is an input type that accepts ConnectToMongoDbTaskPropertiesArgs, ConnectToMongoDbTaskPropertiesPtr and ConnectToMongoDbTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToMongoDbTaskPropertiesPtrInput` via:
//
//	        ConnectToMongoDbTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToMongoDbTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToMongoDbTaskPropertiesPtrOutput() ConnectToMongoDbTaskPropertiesPtrOutput
	ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(context.Context) ConnectToMongoDbTaskPropertiesPtrOutput
}

type connectToMongoDbTaskPropertiesPtrType ConnectToMongoDbTaskPropertiesArgs

func ConnectToMongoDbTaskPropertiesPtr(v *ConnectToMongoDbTaskPropertiesArgs) ConnectToMongoDbTaskPropertiesPtrInput {
	return (*connectToMongoDbTaskPropertiesPtrType)(v)
}

func (*connectToMongoDbTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToMongoDbTaskProperties)(nil)).Elem()
}

func (i *connectToMongoDbTaskPropertiesPtrType) ToConnectToMongoDbTaskPropertiesPtrOutput() ConnectToMongoDbTaskPropertiesPtrOutput {
	return i.ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToMongoDbTaskPropertiesPtrType) ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToMongoDbTaskPropertiesPtrOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToMongoDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskProperties)(nil)).Elem()
}

func (o ConnectToMongoDbTaskPropertiesOutput) ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesOutput) ToConnectToMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesOutput) ToConnectToMongoDbTaskPropertiesPtrOutput() ConnectToMongoDbTaskPropertiesPtrOutput {
	return o.ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToMongoDbTaskPropertiesOutput) ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToMongoDbTaskProperties) *ConnectToMongoDbTaskProperties {
		return &v
	}).(ConnectToMongoDbTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToMongoDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Describes a connection to a MongoDB data source
func (o ConnectToMongoDbTaskPropertiesOutput) Input() MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskProperties) *MongoDbConnectionInfo { return v.Input }).(MongoDbConnectionInfoPtrOutput)
}

// Task type.
// Expected value is 'Connect.MongoDb'.
func (o ConnectToMongoDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToMongoDbTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToMongoDbTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToMongoDbTaskProperties)(nil)).Elem()
}

func (o ConnectToMongoDbTaskPropertiesPtrOutput) ToConnectToMongoDbTaskPropertiesPtrOutput() ConnectToMongoDbTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesPtrOutput) ToConnectToMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesPtrOutput) Elem() ConnectToMongoDbTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToMongoDbTaskProperties) ConnectToMongoDbTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToMongoDbTaskProperties
		return ret
	}).(ConnectToMongoDbTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToMongoDbTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToMongoDbTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Describes a connection to a MongoDB data source
func (o ConnectToMongoDbTaskPropertiesPtrOutput) Input() MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToMongoDbTaskProperties) *MongoDbConnectionInfo {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MongoDbConnectionInfoPtrOutput)
}

// Task type.
// Expected value is 'Connect.MongoDb'.
func (o ConnectToMongoDbTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToMongoDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfoResponse `pulumi:"input"`
	// An array containing a single MongoDbClusterInfo object
	Output []MongoDbClusterInfoResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Connect.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToMongoDbTaskPropertiesResponse
func (val *ConnectToMongoDbTaskPropertiesResponse) Defaults() *ConnectToMongoDbTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToMongoDbTaskPropertiesResponseOutput) ToConnectToMongoDbTaskPropertiesResponseOutput() ConnectToMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesResponseOutput) ToConnectToMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes a connection to a MongoDB data source
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Input() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) *MongoDbConnectionInfoResponse { return v.Input }).(MongoDbConnectionInfoResponsePtrOutput)
}

// An array containing a single MongoDbClusterInfo object
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Output() MongoDbClusterInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []MongoDbClusterInfoResponse { return v.Output }).(MongoDbClusterInfoResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Connect.MongoDb'.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Information for connecting to MySQL source
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Target Platform for the migration
	TargetPlatform *string `pulumi:"targetPlatform"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskInput
func (val *ConnectToSourceMySqlTaskInput) Defaults() *ConnectToSourceMySqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsOfflineMigration == nil {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// ConnectToSourceMySqlTaskInputInput is an input type that accepts ConnectToSourceMySqlTaskInputArgs and ConnectToSourceMySqlTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceMySqlTaskInputInput` via:
//
//	ConnectToSourceMySqlTaskInputArgs{...}
type ConnectToSourceMySqlTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceMySqlTaskInputOutput() ConnectToSourceMySqlTaskInputOutput
	ToConnectToSourceMySqlTaskInputOutputWithContext(context.Context) ConnectToSourceMySqlTaskInputOutput
}

// Input for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskInputArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Flag for whether or not the migration is offline
	IsOfflineMigration pulumi.BoolPtrInput `pulumi:"isOfflineMigration"`
	// Information for connecting to MySQL source
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Target Platform for the migration
	TargetPlatform pulumi.StringPtrInput `pulumi:"targetPlatform"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskInputArgs
func (val *ConnectToSourceMySqlTaskInputArgs) Defaults() *ConnectToSourceMySqlTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsOfflineMigration == nil {
		tmp.IsOfflineMigration = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (ConnectToSourceMySqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceMySqlTaskInput)(nil)).Elem()
}

func (i ConnectToSourceMySqlTaskInputArgs) ToConnectToSourceMySqlTaskInputOutput() ConnectToSourceMySqlTaskInputOutput {
	return i.ToConnectToSourceMySqlTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceMySqlTaskInputArgs) ToConnectToSourceMySqlTaskInputOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceMySqlTaskInputOutput)
}

func (i ConnectToSourceMySqlTaskInputArgs) ToConnectToSourceMySqlTaskInputPtrOutput() ConnectToSourceMySqlTaskInputPtrOutput {
	return i.ToConnectToSourceMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceMySqlTaskInputArgs) ToConnectToSourceMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceMySqlTaskInputOutput).ToConnectToSourceMySqlTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceMySqlTaskInputPtrInput is an input type that accepts ConnectToSourceMySqlTaskInputArgs, ConnectToSourceMySqlTaskInputPtr and ConnectToSourceMySqlTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceMySqlTaskInputPtrInput` via:
//
//	        ConnectToSourceMySqlTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourceMySqlTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceMySqlTaskInputPtrOutput() ConnectToSourceMySqlTaskInputPtrOutput
	ToConnectToSourceMySqlTaskInputPtrOutputWithContext(context.Context) ConnectToSourceMySqlTaskInputPtrOutput
}

type connectToSourceMySqlTaskInputPtrType ConnectToSourceMySqlTaskInputArgs

func ConnectToSourceMySqlTaskInputPtr(v *ConnectToSourceMySqlTaskInputArgs) ConnectToSourceMySqlTaskInputPtrInput {
	return (*connectToSourceMySqlTaskInputPtrType)(v)
}

func (*connectToSourceMySqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceMySqlTaskInput)(nil)).Elem()
}

func (i *connectToSourceMySqlTaskInputPtrType) ToConnectToSourceMySqlTaskInputPtrOutput() ConnectToSourceMySqlTaskInputPtrOutput {
	return i.ToConnectToSourceMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceMySqlTaskInputPtrType) ToConnectToSourceMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceMySqlTaskInputPtrOutput)
}

// Input for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourceMySqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceMySqlTaskInput)(nil)).Elem()
}

func (o ConnectToSourceMySqlTaskInputOutput) ToConnectToSourceMySqlTaskInputOutput() ConnectToSourceMySqlTaskInputOutput {
	return o
}

func (o ConnectToSourceMySqlTaskInputOutput) ToConnectToSourceMySqlTaskInputOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputOutput {
	return o
}

func (o ConnectToSourceMySqlTaskInputOutput) ToConnectToSourceMySqlTaskInputPtrOutput() ConnectToSourceMySqlTaskInputPtrOutput {
	return o.ToConnectToSourceMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceMySqlTaskInputOutput) ToConnectToSourceMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourceMySqlTaskInput) *ConnectToSourceMySqlTaskInput {
		return &v
	}).(ConnectToSourceMySqlTaskInputPtrOutput)
}

// Permission group for validations
func (o ConnectToSourceMySqlTaskInputOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInput) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether or not the migration is offline
func (o ConnectToSourceMySqlTaskInputOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInput) *bool { return v.IsOfflineMigration }).(pulumi.BoolPtrOutput)
}

// Information for connecting to MySQL source
func (o ConnectToSourceMySqlTaskInputOutput) SourceConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInput) MySqlConnectionInfo { return v.SourceConnectionInfo }).(MySqlConnectionInfoOutput)
}

// Target Platform for the migration
func (o ConnectToSourceMySqlTaskInputOutput) TargetPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInput) *string { return v.TargetPlatform }).(pulumi.StringPtrOutput)
}

type ConnectToSourceMySqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceMySqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceMySqlTaskInput)(nil)).Elem()
}

func (o ConnectToSourceMySqlTaskInputPtrOutput) ToConnectToSourceMySqlTaskInputPtrOutput() ConnectToSourceMySqlTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceMySqlTaskInputPtrOutput) ToConnectToSourceMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceMySqlTaskInputPtrOutput) Elem() ConnectToSourceMySqlTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInput) ConnectToSourceMySqlTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceMySqlTaskInput
		return ret
	}).(ConnectToSourceMySqlTaskInputOutput)
}

// Permission group for validations
func (o ConnectToSourceMySqlTaskInputPtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether or not the migration is offline
func (o ConnectToSourceMySqlTaskInputPtrOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.IsOfflineMigration
	}).(pulumi.BoolPtrOutput)
}

// Information for connecting to MySQL source
func (o ConnectToSourceMySqlTaskInputPtrOutput) SourceConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Target Platform for the migration
func (o ConnectToSourceMySqlTaskInputPtrOutput) TargetPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.TargetPlatform
	}).(pulumi.StringPtrOutput)
}

// Input for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Information for connecting to MySQL source
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Target Platform for the migration
	TargetPlatform *string `pulumi:"targetPlatform"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskInputResponse
func (val *ConnectToSourceMySqlTaskInputResponse) Defaults() *ConnectToSourceMySqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsOfflineMigration == nil {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceMySqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceMySqlTaskInputResponseOutput) ToConnectToSourceMySqlTaskInputResponseOutput() ConnectToSourceMySqlTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceMySqlTaskInputResponseOutput) ToConnectToSourceMySqlTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputResponseOutput {
	return o
}

// Permission group for validations
func (o ConnectToSourceMySqlTaskInputResponseOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInputResponse) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether or not the migration is offline
func (o ConnectToSourceMySqlTaskInputResponseOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInputResponse) *bool { return v.IsOfflineMigration }).(pulumi.BoolPtrOutput)
}

// Information for connecting to MySQL source
func (o ConnectToSourceMySqlTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Target Platform for the migration
func (o ConnectToSourceMySqlTaskInputResponseOutput) TargetPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskInputResponse) *string { return v.TargetPlatform }).(pulumi.StringPtrOutput)
}

type ConnectToSourceMySqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceMySqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceMySqlTaskInputResponsePtrOutput) ToConnectToSourceMySqlTaskInputResponsePtrOutput() ConnectToSourceMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceMySqlTaskInputResponsePtrOutput) ToConnectToSourceMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceMySqlTaskInputResponsePtrOutput) Elem() ConnectToSourceMySqlTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInputResponse) ConnectToSourceMySqlTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceMySqlTaskInputResponse
		return ret
	}).(ConnectToSourceMySqlTaskInputResponseOutput)
}

// Permission group for validations
func (o ConnectToSourceMySqlTaskInputResponsePtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether or not the migration is offline
func (o ConnectToSourceMySqlTaskInputResponsePtrOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsOfflineMigration
	}).(pulumi.BoolPtrOutput)
}

// Information for connecting to MySQL source
func (o ConnectToSourceMySqlTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Target Platform for the migration
func (o ConnectToSourceMySqlTaskInputResponsePtrOutput) TargetPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetPlatform
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceMySqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.MySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskProperties
func (val *ConnectToSourceMySqlTaskProperties) Defaults() *ConnectToSourceMySqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToSourceMySqlTaskPropertiesInput is an input type that accepts ConnectToSourceMySqlTaskPropertiesArgs and ConnectToSourceMySqlTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceMySqlTaskPropertiesInput` via:
//
//	ConnectToSourceMySqlTaskPropertiesArgs{...}
type ConnectToSourceMySqlTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceMySqlTaskPropertiesOutput() ConnectToSourceMySqlTaskPropertiesOutput
	ToConnectToSourceMySqlTaskPropertiesOutputWithContext(context.Context) ConnectToSourceMySqlTaskPropertiesOutput
}

// Properties for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceMySqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.MySql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskPropertiesArgs
func (val *ConnectToSourceMySqlTaskPropertiesArgs) Defaults() *ConnectToSourceMySqlTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToSourceMySqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceMySqlTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceMySqlTaskPropertiesArgs) ToConnectToSourceMySqlTaskPropertiesOutput() ConnectToSourceMySqlTaskPropertiesOutput {
	return i.ToConnectToSourceMySqlTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceMySqlTaskPropertiesArgs) ToConnectToSourceMySqlTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceMySqlTaskPropertiesOutput)
}

func (i ConnectToSourceMySqlTaskPropertiesArgs) ToConnectToSourceMySqlTaskPropertiesPtrOutput() ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return i.ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceMySqlTaskPropertiesArgs) ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceMySqlTaskPropertiesOutput).ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToSourceMySqlTaskPropertiesPtrInput is an input type that accepts ConnectToSourceMySqlTaskPropertiesArgs, ConnectToSourceMySqlTaskPropertiesPtr and ConnectToSourceMySqlTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceMySqlTaskPropertiesPtrInput` via:
//
//	        ConnectToSourceMySqlTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourceMySqlTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToSourceMySqlTaskPropertiesPtrOutput() ConnectToSourceMySqlTaskPropertiesPtrOutput
	ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(context.Context) ConnectToSourceMySqlTaskPropertiesPtrOutput
}

type connectToSourceMySqlTaskPropertiesPtrType ConnectToSourceMySqlTaskPropertiesArgs

func ConnectToSourceMySqlTaskPropertiesPtr(v *ConnectToSourceMySqlTaskPropertiesArgs) ConnectToSourceMySqlTaskPropertiesPtrInput {
	return (*connectToSourceMySqlTaskPropertiesPtrType)(v)
}

func (*connectToSourceMySqlTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceMySqlTaskProperties)(nil)).Elem()
}

func (i *connectToSourceMySqlTaskPropertiesPtrType) ToConnectToSourceMySqlTaskPropertiesPtrOutput() ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return i.ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToSourceMySqlTaskPropertiesPtrType) ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceMySqlTaskPropertiesPtrOutput)
}

// Properties for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceMySqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceMySqlTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceMySqlTaskPropertiesOutput) ToConnectToSourceMySqlTaskPropertiesOutput() ConnectToSourceMySqlTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceMySqlTaskPropertiesOutput) ToConnectToSourceMySqlTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceMySqlTaskPropertiesOutput) ToConnectToSourceMySqlTaskPropertiesPtrOutput() ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return o.ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceMySqlTaskPropertiesOutput) ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourceMySqlTaskProperties) *ConnectToSourceMySqlTaskProperties {
		return &v
	}).(ConnectToSourceMySqlTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceMySqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceMySqlTaskPropertiesOutput) Input() ConnectToSourceMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskProperties) *ConnectToSourceMySqlTaskInput { return v.Input }).(ConnectToSourceMySqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.MySql'.
func (o ConnectToSourceMySqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToSourceMySqlTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceMySqlTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceMySqlTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceMySqlTaskPropertiesPtrOutput) ToConnectToSourceMySqlTaskPropertiesPtrOutput() ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceMySqlTaskPropertiesPtrOutput) ToConnectToSourceMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceMySqlTaskPropertiesPtrOutput) Elem() ConnectToSourceMySqlTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskProperties) ConnectToSourceMySqlTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceMySqlTaskProperties
		return ret
	}).(ConnectToSourceMySqlTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceMySqlTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceMySqlTaskPropertiesPtrOutput) Input() ConnectToSourceMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskProperties) *ConnectToSourceMySqlTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToSourceMySqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.MySql'.
func (o ConnectToSourceMySqlTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceMySqlTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourceNonSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.MySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceMySqlTaskPropertiesResponse
func (val *ConnectToSourceMySqlTaskPropertiesResponse) Defaults() *ConnectToSourceMySqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates MySQL database connection
type ConnectToSourceMySqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceMySqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceMySqlTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) ToConnectToSourceMySqlTaskPropertiesResponseOutput() ConnectToSourceMySqlTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) ToConnectToSourceMySqlTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceMySqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) Input() ConnectToSourceMySqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskPropertiesResponse) *ConnectToSourceMySqlTaskInputResponse {
		return v.Input
	}).(ConnectToSourceMySqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) Output() ConnectToSourceNonSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskPropertiesResponse) []ConnectToSourceNonSqlTaskOutputResponse {
		return v.Output
	}).(ConnectToSourceNonSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToSource.MySql'.
func (o ConnectToSourceMySqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceMySqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Output for connect to MySQL type source
type ConnectToSourceNonSqlTaskOutputResponse struct {
	// List of databases on the server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Server properties
	ServerProperties ServerPropertiesResponse `pulumi:"serverProperties"`
	// Server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for connect to MySQL type source
type ConnectToSourceNonSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceNonSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceNonSqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceNonSqlTaskOutputResponseOutput) ToConnectToSourceNonSqlTaskOutputResponseOutput() ConnectToSourceNonSqlTaskOutputResponseOutput {
	return o
}

func (o ConnectToSourceNonSqlTaskOutputResponseOutput) ToConnectToSourceNonSqlTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourceNonSqlTaskOutputResponseOutput {
	return o
}

// List of databases on the server
func (o ConnectToSourceNonSqlTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToSourceNonSqlTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToSourceNonSqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceNonSqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Server properties
func (o ConnectToSourceNonSqlTaskOutputResponseOutput) ServerProperties() ServerPropertiesResponseOutput {
	return o.ApplyT(func(v ConnectToSourceNonSqlTaskOutputResponse) ServerPropertiesResponse { return v.ServerProperties }).(ServerPropertiesResponseOutput)
}

// Server brand version
func (o ConnectToSourceNonSqlTaskOutputResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceNonSqlTaskOutputResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToSourceNonSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceNonSqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToSourceNonSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToSourceNonSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourceNonSqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceNonSqlTaskOutputResponseArrayOutput) ToConnectToSourceNonSqlTaskOutputResponseArrayOutput() ConnectToSourceNonSqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceNonSqlTaskOutputResponseArrayOutput) ToConnectToSourceNonSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourceNonSqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceNonSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToSourceNonSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToSourceNonSqlTaskOutputResponse {
		return vs[0].([]ConnectToSourceNonSqlTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToSourceNonSqlTaskOutputResponseOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInput struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceOracleSyncTaskInputInput is an input type that accepts ConnectToSourceOracleSyncTaskInputArgs and ConnectToSourceOracleSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputInput` via:
//
//	ConnectToSourceOracleSyncTaskInputArgs{...}
type ConnectToSourceOracleSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput
	ToConnectToSourceOracleSyncTaskInputOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputOutput
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputArgs struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceOracleSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput {
	return i.ToConnectToSourceOracleSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputOutput)
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputOutput).ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceOracleSyncTaskInputPtrInput is an input type that accepts ConnectToSourceOracleSyncTaskInputArgs, ConnectToSourceOracleSyncTaskInputPtr and ConnectToSourceOracleSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputPtrInput` via:
//
//	        ConnectToSourceOracleSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourceOracleSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput
	ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput
}

type connectToSourceOracleSyncTaskInputPtrType ConnectToSourceOracleSyncTaskInputArgs

func ConnectToSourceOracleSyncTaskInputPtr(v *ConnectToSourceOracleSyncTaskInputArgs) ConnectToSourceOracleSyncTaskInputPtrInput {
	return (*connectToSourceOracleSyncTaskInputPtrType)(v)
}

func (*connectToSourceOracleSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (i *connectToSourceOracleSyncTaskInputPtrType) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceOracleSyncTaskInputPtrType) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceOracleSyncTaskInputOutput) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourceOracleSyncTaskInput) *ConnectToSourceOracleSyncTaskInput {
		return &v
	}).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputOutput) SourceConnectionInfo() OracleConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInput) OracleConnectionInfo { return v.SourceConnectionInfo }).(OracleConnectionInfoOutput)
}

type ConnectToSourceOracleSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputPtrOutput) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputPtrOutput) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputPtrOutput) Elem() ConnectToSourceOracleSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInput) ConnectToSourceOracleSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceOracleSyncTaskInput
		return ret
	}).(ConnectToSourceOracleSyncTaskInputOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputPtrOutput) SourceConnectionInfo() OracleConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInput) *OracleConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoPtrOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponse struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponseOutput() ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputResponseOutput) SourceConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInputResponse) OracleConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoResponseOutput)
}

type ConnectToSourceOracleSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) Elem() ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInputResponse) ConnectToSourceOracleSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceOracleSyncTaskInputResponse
		return ret
	}).(ConnectToSourceOracleSyncTaskInputResponseOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) SourceConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponse struct {
	// List of schemas on source server
	Databases []string `pulumi:"databases"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ToConnectToSourceOracleSyncTaskOutputResponseOutput() ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ToConnectToSourceOracleSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return o
}

// List of schemas on source server
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Source server brand version
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the source server
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToSourceOracleSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutput() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToSourceOracleSyncTaskOutputResponse {
		return vs[0].([]ConnectToSourceOracleSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToSourceOracleSyncTaskOutputResponseOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.Oracle.Sync'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceOracleSyncTaskPropertiesInput is an input type that accepts ConnectToSourceOracleSyncTaskPropertiesArgs and ConnectToSourceOracleSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskPropertiesInput` via:
//
//	ConnectToSourceOracleSyncTaskPropertiesArgs{...}
type ConnectToSourceOracleSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput
	ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceOracleSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.Oracle.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceOracleSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput {
	return i.ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskPropertiesOutput)
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesPtrOutput() ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskPropertiesOutput).ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToSourceOracleSyncTaskPropertiesPtrInput is an input type that accepts ConnectToSourceOracleSyncTaskPropertiesArgs, ConnectToSourceOracleSyncTaskPropertiesPtr and ConnectToSourceOracleSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskPropertiesPtrInput` via:
//
//	        ConnectToSourceOracleSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourceOracleSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskPropertiesPtrOutput() ConnectToSourceOracleSyncTaskPropertiesPtrOutput
	ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskPropertiesPtrOutput
}

type connectToSourceOracleSyncTaskPropertiesPtrType ConnectToSourceOracleSyncTaskPropertiesArgs

func ConnectToSourceOracleSyncTaskPropertiesPtr(v *ConnectToSourceOracleSyncTaskPropertiesArgs) ConnectToSourceOracleSyncTaskPropertiesPtrInput {
	return (*connectToSourceOracleSyncTaskPropertiesPtrType)(v)
}

func (*connectToSourceOracleSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskProperties)(nil)).Elem()
}

func (i *connectToSourceOracleSyncTaskPropertiesPtrType) ToConnectToSourceOracleSyncTaskPropertiesPtrOutput() ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToSourceOracleSyncTaskPropertiesPtrType) ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ToConnectToSourceOracleSyncTaskPropertiesPtrOutput() ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return o.ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourceOracleSyncTaskProperties) *ConnectToSourceOracleSyncTaskProperties {
		return &v
	}).(ConnectToSourceOracleSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceOracleSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceOracleSyncTaskPropertiesOutput) Input() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskProperties) *ConnectToSourceOracleSyncTaskInput { return v.Input }).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.Oracle.Sync'.
func (o ConnectToSourceOracleSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToSourceOracleSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskPropertiesPtrOutput) ToConnectToSourceOracleSyncTaskPropertiesPtrOutput() ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesPtrOutput) ToConnectToSourceOracleSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesPtrOutput) Elem() ConnectToSourceOracleSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskProperties) ConnectToSourceOracleSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceOracleSyncTaskProperties
		return ret
	}).(ConnectToSourceOracleSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceOracleSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceOracleSyncTaskPropertiesPtrOutput) Input() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskProperties) *ConnectToSourceOracleSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.Oracle.Sync'.
func (o ConnectToSourceOracleSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourceOracleSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.Oracle.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ToConnectToSourceOracleSyncTaskPropertiesResponseOutput() ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ToConnectToSourceOracleSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Input() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) *ConnectToSourceOracleSyncTaskInputResponse {
		return v.Input
	}).(ConnectToSourceOracleSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Output() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []ConnectToSourceOracleSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToSourceOracleSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToSource.Oracle.Sync'.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskInput
func (val *ConnectToSourcePostgreSqlSyncTaskInput) Defaults() *ConnectToSourcePostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// ConnectToSourcePostgreSqlSyncTaskInputInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputArgs and ConnectToSourcePostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputInput` via:
//
//	ConnectToSourcePostgreSqlSyncTaskInputArgs{...}
type ConnectToSourcePostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput
	ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskInputArgs
func (val *ConnectToSourcePostgreSqlSyncTaskInputArgs) Defaults() *ConnectToSourcePostgreSqlSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToSourcePostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputOutput)
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputOutput).ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourcePostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputArgs, ConnectToSourcePostgreSqlSyncTaskInputPtr and ConnectToSourcePostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputPtrInput` via:
//
//	        ConnectToSourcePostgreSqlSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourcePostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput
	ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput
}

type connectToSourcePostgreSqlSyncTaskInputPtrType ConnectToSourcePostgreSqlSyncTaskInputArgs

func ConnectToSourcePostgreSqlSyncTaskInputPtr(v *ConnectToSourcePostgreSqlSyncTaskInputArgs) ConnectToSourcePostgreSqlSyncTaskInputPtrInput {
	return (*connectToSourcePostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToSourcePostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToSourcePostgreSqlSyncTaskInputPtrType) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourcePostgreSqlSyncTaskInputPtrType) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourcePostgreSqlSyncTaskInput) *ConnectToSourcePostgreSqlSyncTaskInput {
		return &v
	}).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputOutput) SourceConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInput) PostgreSqlConnectionInfo { return v.SourceConnectionInfo }).(PostgreSqlConnectionInfoOutput)
}

type ConnectToSourcePostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) Elem() ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInput) ConnectToSourcePostgreSqlSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToSourcePostgreSqlSyncTaskInput
		return ret
	}).(ConnectToSourcePostgreSqlSyncTaskInputOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskInputResponse
func (val *ConnectToSourcePostgreSqlSyncTaskInputResponse) Defaults() *ConnectToSourcePostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutput() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInputResponse) ConnectToSourcePostgreSqlSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToSourcePostgreSqlSyncTaskInputResponse
		return ret
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponse struct {
	// List of databases on source server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// List of databases on source server
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the source server
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToSourcePostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToSourcePostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.PostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskProperties
func (val *ConnectToSourcePostgreSqlSyncTaskProperties) Defaults() *ConnectToSourcePostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToSourcePostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskPropertiesArgs and ConnectToSourcePostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskPropertiesInput` via:
//
//	ConnectToSourcePostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToSourcePostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput
	ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourcePostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.PostgreSql.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskPropertiesArgs
func (val *ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) Defaults() *ConnectToSourcePostgreSqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput)
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput).ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToSourcePostgreSqlSyncTaskPropertiesPtrInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskPropertiesArgs, ConnectToSourcePostgreSqlSyncTaskPropertiesPtr and ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskPropertiesPtrInput` via:
//
//	        ConnectToSourcePostgreSqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourcePostgreSqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput
	ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput
}

type connectToSourcePostgreSqlSyncTaskPropertiesPtrType ConnectToSourcePostgreSqlSyncTaskPropertiesArgs

func ConnectToSourcePostgreSqlSyncTaskPropertiesPtr(v *ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ConnectToSourcePostgreSqlSyncTaskPropertiesPtrInput {
	return (*connectToSourcePostgreSqlSyncTaskPropertiesPtrType)(v)
}

func (*connectToSourcePostgreSqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i *connectToSourcePostgreSqlSyncTaskPropertiesPtrType) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToSourcePostgreSqlSyncTaskPropertiesPtrType) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourcePostgreSqlSyncTaskProperties) *ConnectToSourcePostgreSqlSyncTaskProperties {
		return &v
	}).(ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) Input() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskProperties) *ConnectToSourcePostgreSqlSyncTaskInput {
		return v.Input
	}).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.PostgreSql.Sync'.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput) Elem() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskProperties) ConnectToSourcePostgreSqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToSourcePostgreSqlSyncTaskProperties
		return ret
	}).(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput) Input() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskProperties) *ConnectToSourcePostgreSqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.PostgreSql.Sync'.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourcePostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.PostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourcePostgreSqlSyncTaskPropertiesResponse
func (val *ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) Defaults() *ConnectToSourcePostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) *ConnectToSourcePostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []ConnectToSourcePostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToSource.PostgreSql.Sync'.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerSyncTaskProperties
func (val *ConnectToSourceSqlServerSyncTaskProperties) Defaults() *ConnectToSourceSqlServerSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToSourceSqlServerSyncTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerSyncTaskPropertiesArgs and ConnectToSourceSqlServerSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerSyncTaskPropertiesInput` via:
//
//	ConnectToSourceSqlServerSyncTaskPropertiesArgs{...}
type ConnectToSourceSqlServerSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput
	ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerSyncTaskPropertiesArgs
func (val *ConnectToSourceSqlServerSyncTaskPropertiesArgs) Defaults() *ConnectToSourceSqlServerSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToSourceSqlServerSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerSyncTaskPropertiesOutput)
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutput() ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return i.ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerSyncTaskPropertiesOutput).ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerSyncTaskPropertiesPtrInput is an input type that accepts ConnectToSourceSqlServerSyncTaskPropertiesArgs, ConnectToSourceSqlServerSyncTaskPropertiesPtr and ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerSyncTaskPropertiesPtrInput` via:
//
//	        ConnectToSourceSqlServerSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourceSqlServerSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutput() ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput
	ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(context.Context) ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput
}

type connectToSourceSqlServerSyncTaskPropertiesPtrType ConnectToSourceSqlServerSyncTaskPropertiesArgs

func ConnectToSourceSqlServerSyncTaskPropertiesPtr(v *ConnectToSourceSqlServerSyncTaskPropertiesArgs) ConnectToSourceSqlServerSyncTaskPropertiesPtrInput {
	return (*connectToSourceSqlServerSyncTaskPropertiesPtrType)(v)
}

func (*connectToSourceSqlServerSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerSyncTaskProperties)(nil)).Elem()
}

func (i *connectToSourceSqlServerSyncTaskPropertiesPtrType) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutput() ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return i.ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerSyncTaskPropertiesPtrType) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutput() ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return o.ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourceSqlServerSyncTaskProperties) *ConnectToSourceSqlServerSyncTaskProperties {
		return &v
	}).(ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) Input() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskProperties) *ConnectToSourceSqlServerTaskInput { return v.Input }).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer.Sync'.
func (o ConnectToSourceSqlServerSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutput() ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput) ToConnectToSourceSqlServerSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput) Elem() ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerSyncTaskProperties) ConnectToSourceSqlServerSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceSqlServerSyncTaskProperties
		return ret
	}).(ConnectToSourceSqlServerSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput) Input() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerSyncTaskProperties) *ConnectToSourceSqlServerTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer.Sync'.
func (o ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerSyncTaskPropertiesResponse
func (val *ConnectToSourceSqlServerSyncTaskPropertiesResponse) Defaults() *ConnectToSourceSqlServerSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutput() ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer.Sync'.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInput
func (val *ConnectToSourceSqlServerTaskInput) Defaults() *ConnectToSourceSqlServerTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CollectAgentJobs == nil {
		collectAgentJobs_ := false
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if tmp.CollectDatabases == nil {
		collectDatabases_ := true
		tmp.CollectDatabases = &collectDatabases_
	}
	if tmp.CollectLogins == nil {
		collectLogins_ := false
		tmp.CollectLogins = &collectLogins_
	}
	if tmp.CollectTdeCertificateInfo == nil {
		collectTdeCertificateInfo_ := false
		tmp.CollectTdeCertificateInfo = &collectTdeCertificateInfo_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	if tmp.ValidateSsisCatalogOnly == nil {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// ConnectToSourceSqlServerTaskInputInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs and ConnectToSourceSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputInput` via:
//
//	ConnectToSourceSqlServerTaskInputArgs{...}
type ConnectToSourceSqlServerTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput
	ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases pulumi.BoolPtrInput `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo pulumi.BoolPtrInput `pulumi:"collectTdeCertificateInfo"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields pulumi.StringPtrInput `pulumi:"encryptedKeyForSecureFields"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInputArgs
func (val *ConnectToSourceSqlServerTaskInputArgs) Defaults() *ConnectToSourceSqlServerTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CollectAgentJobs == nil {
		tmp.CollectAgentJobs = pulumi.BoolPtr(false)
	}
	if tmp.CollectDatabases == nil {
		tmp.CollectDatabases = pulumi.BoolPtr(true)
	}
	if tmp.CollectLogins == nil {
		tmp.CollectLogins = pulumi.BoolPtr(false)
	}
	if tmp.CollectTdeCertificateInfo == nil {
		tmp.CollectTdeCertificateInfo = pulumi.BoolPtr(false)
	}

	if tmp.ValidateSsisCatalogOnly == nil {
		tmp.ValidateSsisCatalogOnly = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ConnectToSourceSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return i.ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput)
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput).ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputPtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs, ConnectToSourceSqlServerTaskInputPtr and ConnectToSourceSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputPtrInput` via:
//
//	        ConnectToSourceSqlServerTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourceSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput
	ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputPtrOutput
}

type connectToSourceSqlServerTaskInputPtrType ConnectToSourceSqlServerTaskInputArgs

func ConnectToSourceSqlServerTaskInputPtr(v *ConnectToSourceSqlServerTaskInputArgs) ConnectToSourceSqlServerTaskInputPtrInput {
	return (*connectToSourceSqlServerTaskInputPtrType)(v)
}

func (*connectToSourceSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputOutput) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourceSqlServerTaskInput) *ConnectToSourceSqlServerTaskInput {
		return &v
	}).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectDatabases }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.CollectTdeCertificateInfo }).(pulumi.BoolPtrOutput)
}

// encrypted key for secure fields
func (o ConnectToSourceSqlServerTaskInputOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInput) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToSourceSqlServerTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputPtrOutput) Elem() ConnectToSourceSqlServerTaskInputOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) ConnectToSourceSqlServerTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceSqlServerTaskInput
		return ret
	}).(ConnectToSourceSqlServerTaskInputOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectDatabases
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectTdeCertificateInfo
	}).(pulumi.BoolPtrOutput)
}

// encrypted key for secure fields
func (o ConnectToSourceSqlServerTaskInputPtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputPtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskInputResponse
func (val *ConnectToSourceSqlServerTaskInputResponse) Defaults() *ConnectToSourceSqlServerTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CollectAgentJobs == nil {
		collectAgentJobs_ := false
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if tmp.CollectDatabases == nil {
		collectDatabases_ := true
		tmp.CollectDatabases = &collectDatabases_
	}
	if tmp.CollectLogins == nil {
		collectLogins_ := false
		tmp.CollectLogins = &collectLogins_
	}
	if tmp.CollectTdeCertificateInfo == nil {
		collectTdeCertificateInfo_ := false
		tmp.CollectTdeCertificateInfo = &collectTdeCertificateInfo_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	if tmp.ValidateSsisCatalogOnly == nil {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectDatabases }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectTdeCertificateInfo }).(pulumi.BoolPtrOutput)
}

// encrypted key for secure fields
func (o ConnectToSourceSqlServerTaskInputResponseOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToSourceSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) Elem() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) ConnectToSourceSqlServerTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceSqlServerTaskInputResponse
		return ret
	}).(ConnectToSourceSqlServerTaskInputResponseOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectDatabases
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectTdeCertificateInfo
	}).(pulumi.BoolPtrOutput)
}

// encrypted key for secure fields
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of Agent Job.
	JobCategory string `pulumi:"jobCategory"`
	// The owner of the Agent Job
	JobOwner string `pulumi:"jobOwner"`
	// UTC Date and time when the Agent Job was last executed.
	LastExecutedOn string `pulumi:"lastExecutedOn"`
	// Information about eligibility of agent job for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Agent Job name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'AgentJobLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput() ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original Agent Job.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of Agent Job.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobCategory() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobCategory }).(pulumi.StringOutput)
}

// The owner of the Agent Job
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobOwner() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobOwner }).(pulumi.StringOutput)
}

// UTC Date and time when the Agent Job was last executed.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) LastExecutedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.LastExecutedOn }).(pulumi.StringOutput)
}

// Information about eligibility of agent job for migration.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// Agent Job name
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
// Expected value is 'AgentJobLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse struct {
	// SQL Server compatibility level of database
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles []DatabaseFileInfoResponse `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState string `pulumi:"databaseState"`
	// Result identifier
	Id string `pulumi:"id"`
	// Database name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

// SQL Server compatibility level of database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

// The list of database files
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseFiles() DatabaseFileInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) []DatabaseFileInfoResponse {
		return v.DatabaseFiles
	}).(DatabaseFileInfoResponseArrayOutput)
}

// State of the database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseState() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.DatabaseState }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Database name
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
// Expected value is 'DatabaseLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the file in megabytes
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponse struct {
	// The default database for the login.
	DefaultDatabase string `pulumi:"defaultDatabase"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the login.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of login.
	LoginType string `pulumi:"loginType"`
	// Information about eligibility of login for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Login name.
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	// Expected value is 'LoginLevelOutput'.
	ResultType string `pulumi:"resultType"`
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput() ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

// The default database for the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) DefaultDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.DefaultDatabase }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) LoginType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.LoginType }).(pulumi.StringOutput)
}

// Information about eligibility of login for migration.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// Login name.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
// Expected value is 'LoginLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponse struct {
	// Source agent jobs as a map from agent job name to id.
	AgentJobs map[string]string `pulumi:"agentJobs"`
	// Mapping from database name to TDE certificate name, if applicable
	DatabaseTdeCertificateMapping map[string]string `pulumi:"databaseTdeCertificateMapping"`
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source logins as a map from login name to login id.
	Logins map[string]string `pulumi:"logins"`
	// Type of result - database level or task level
	// Expected value is 'TaskLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

// Source agent jobs as a map from agent job name to id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) AgentJobs() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string { return v.AgentJobs }).(pulumi.StringMapOutput)
}

// Mapping from database name to TDE certificate name, if applicable
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) DatabaseTdeCertificateMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string {
		return v.DatabaseTdeCertificateMapping
	}).(pulumi.StringMapOutput)
}

// Source databases as a map from database name to database id
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Source logins as a map from login name to login id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Logins() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) map[string]string { return v.Logins }).(pulumi.StringMapOutput)
}

// Type of result - database level or task level
// Expected value is 'TaskLevelOutput'.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskProperties
func (val *ConnectToSourceSqlServerTaskProperties) Defaults() *ConnectToSourceSqlServerTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToSourceSqlServerTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesArgs and ConnectToSourceSqlServerTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesInput` via:
//
//	ConnectToSourceSqlServerTaskPropertiesArgs{...}
type ConnectToSourceSqlServerTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput
	ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task id
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskPropertiesArgs
func (val *ConnectToSourceSqlServerTaskPropertiesArgs) Defaults() *ConnectToSourceSqlServerTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToSourceSqlServerTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesOutput)
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesPtrOutput() ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesOutput).ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskPropertiesPtrInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesArgs, ConnectToSourceSqlServerTaskPropertiesPtr and ConnectToSourceSqlServerTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesPtrInput` via:
//
//	        ConnectToSourceSqlServerTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToSourceSqlServerTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesPtrOutput() ConnectToSourceSqlServerTaskPropertiesPtrOutput
	ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesPtrOutput
}

type connectToSourceSqlServerTaskPropertiesPtrType ConnectToSourceSqlServerTaskPropertiesArgs

func ConnectToSourceSqlServerTaskPropertiesPtr(v *ConnectToSourceSqlServerTaskPropertiesArgs) ConnectToSourceSqlServerTaskPropertiesPtrInput {
	return (*connectToSourceSqlServerTaskPropertiesPtrType)(v)
}

func (*connectToSourceSqlServerTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskPropertiesPtrType) ToConnectToSourceSqlServerTaskPropertiesPtrOutput() ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskPropertiesPtrType) ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesPtrOutput() ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return o.ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskPropertiesOutput) ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToSourceSqlServerTaskProperties) *ConnectToSourceSqlServerTaskProperties {
		return &v
	}).(ConnectToSourceSqlServerTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesOutput) Input() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) *ConnectToSourceSqlServerTaskInput { return v.Input }).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Task id
func (o ConnectToSourceSqlServerTaskPropertiesOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer'.
func (o ConnectToSourceSqlServerTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToSourceSqlServerTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesPtrOutput) ToConnectToSourceSqlServerTaskPropertiesPtrOutput() ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesPtrOutput) ToConnectToSourceSqlServerTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesPtrOutput) Elem() ConnectToSourceSqlServerTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskProperties) ConnectToSourceSqlServerTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToSourceSqlServerTaskProperties
		return ret
	}).(ConnectToSourceSqlServerTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesPtrOutput) Input() ConnectToSourceSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskProperties) *ConnectToSourceSqlServerTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Task id
func (o ConnectToSourceSqlServerTaskPropertiesPtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.TaskId
	}).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer'.
func (o ConnectToSourceSqlServerTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'ConnectToSource.SqlServer'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToSourceSqlServerTaskPropertiesResponse
func (val *ConnectToSourceSqlServerTaskPropertiesResponse) Defaults() *ConnectToSourceSqlServerTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task id
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'ConnectToSource.SqlServer'.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInput struct {
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskInput
func (val *ConnectToTargetAzureDbForMySqlTaskInput) Defaults() *ConnectToTargetAzureDbForMySqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsOfflineMigration == nil {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// ConnectToTargetAzureDbForMySqlTaskInputInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputArgs and ConnectToTargetAzureDbForMySqlTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputInput` via:
//
//	ConnectToTargetAzureDbForMySqlTaskInputArgs{...}
type ConnectToTargetAzureDbForMySqlTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput
	ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputArgs struct {
	// Flag for whether or not the migration is offline
	IsOfflineMigration pulumi.BoolPtrInput `pulumi:"isOfflineMigration"`
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskInputArgs
func (val *ConnectToTargetAzureDbForMySqlTaskInputArgs) Defaults() *ConnectToTargetAzureDbForMySqlTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsOfflineMigration == nil {
		tmp.IsOfflineMigration = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (ConnectToTargetAzureDbForMySqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputOutput)
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputOutput).ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForMySqlTaskInputPtrInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputArgs, ConnectToTargetAzureDbForMySqlTaskInputPtr and ConnectToTargetAzureDbForMySqlTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputPtrInput` via:
//
//	        ConnectToTargetAzureDbForMySqlTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetAzureDbForMySqlTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput
	ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput
}

type connectToTargetAzureDbForMySqlTaskInputPtrType ConnectToTargetAzureDbForMySqlTaskInputArgs

func ConnectToTargetAzureDbForMySqlTaskInputPtr(v *ConnectToTargetAzureDbForMySqlTaskInputArgs) ConnectToTargetAzureDbForMySqlTaskInputPtrInput {
	return (*connectToTargetAzureDbForMySqlTaskInputPtrType)(v)
}

func (*connectToTargetAzureDbForMySqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (i *connectToTargetAzureDbForMySqlTaskInputPtrType) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForMySqlTaskInputPtrType) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetAzureDbForMySqlTaskInput) *ConnectToTargetAzureDbForMySqlTaskInput {
		return &v
	}).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Flag for whether or not the migration is offline
func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInput) *bool { return v.IsOfflineMigration }).(pulumi.BoolPtrOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) SourceConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInput) MySqlConnectionInfo { return v.SourceConnectionInfo }).(MySqlConnectionInfoOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputOutput) TargetConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInput) MySqlConnectionInfo { return v.TargetConnectionInfo }).(MySqlConnectionInfoOutput)
}

type ConnectToTargetAzureDbForMySqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) Elem() ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInput) ConnectToTargetAzureDbForMySqlTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetAzureDbForMySqlTaskInput
		return ret
	}).(ConnectToTargetAzureDbForMySqlTaskInputOutput)
}

// Flag for whether or not the migration is offline
func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.IsOfflineMigration
	}).(pulumi.BoolPtrOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) SourceConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputPtrOutput) TargetConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponse struct {
	// Flag for whether or not the migration is offline
	IsOfflineMigration *bool `pulumi:"isOfflineMigration"`
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskInputResponse
func (val *ConnectToTargetAzureDbForMySqlTaskInputResponse) Defaults() *ConnectToTargetAzureDbForMySqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsOfflineMigration == nil {
		isOfflineMigration_ := false
		tmp.IsOfflineMigration = &isOfflineMigration_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutput() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o
}

// Flag for whether or not the migration is offline
func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) *bool { return v.IsOfflineMigration }).(pulumi.BoolPtrOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) TargetConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) MySqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

type ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) Elem() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) ConnectToTargetAzureDbForMySqlTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetAzureDbForMySqlTaskInputResponse
		return ret
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput)
}

// Flag for whether or not the migration is offline
func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) IsOfflineMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsOfflineMigration
	}).(pulumi.BoolPtrOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) TargetConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Version of the target server
	ServerVersion string `pulumi:"serverVersion"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return o
}

// List of databases on target server
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.ServerVersion }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetAzureDbForMySqlTaskOutputResponse {
		return vs[0].([]ConnectToTargetAzureDbForMySqlTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskProperties
func (val *ConnectToTargetAzureDbForMySqlTaskProperties) Defaults() *ConnectToTargetAzureDbForMySqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToTargetAzureDbForMySqlTaskPropertiesInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskPropertiesArgs and ConnectToTargetAzureDbForMySqlTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskPropertiesInput` via:
//
//	ConnectToTargetAzureDbForMySqlTaskPropertiesArgs{...}
type ConnectToTargetAzureDbForMySqlTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput
	ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetAzureDbForMySqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForMySql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskPropertiesArgs
func (val *ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) Defaults() *ConnectToTargetAzureDbForMySqlTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput)
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput).ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForMySqlTaskPropertiesPtrInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskPropertiesArgs, ConnectToTargetAzureDbForMySqlTaskPropertiesPtr and ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskPropertiesPtrInput` via:
//
//	        ConnectToTargetAzureDbForMySqlTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetAzureDbForMySqlTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput
	ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput
}

type connectToTargetAzureDbForMySqlTaskPropertiesPtrType ConnectToTargetAzureDbForMySqlTaskPropertiesArgs

func ConnectToTargetAzureDbForMySqlTaskPropertiesPtr(v *ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ConnectToTargetAzureDbForMySqlTaskPropertiesPtrInput {
	return (*connectToTargetAzureDbForMySqlTaskPropertiesPtrType)(v)
}

func (*connectToTargetAzureDbForMySqlTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskProperties)(nil)).Elem()
}

func (i *connectToTargetAzureDbForMySqlTaskPropertiesPtrType) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForMySqlTaskPropertiesPtrType) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return o.ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetAzureDbForMySqlTaskProperties) *ConnectToTargetAzureDbForMySqlTaskProperties {
		return &v
	}).(ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) Input() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskProperties) *ConnectToTargetAzureDbForMySqlTaskInput {
		return v.Input
	}).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureDbForMySql'.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput) Elem() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskProperties) ConnectToTargetAzureDbForMySqlTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetAzureDbForMySqlTaskProperties
		return ret
	}).(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput) Input() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskProperties) *ConnectToTargetAzureDbForMySqlTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureDbForMySql'.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForMySqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForMySqlTaskPropertiesResponse
func (val *ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) Defaults() *ConnectToTargetAzureDbForMySqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Input() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) *ConnectToTargetAzureDbForMySqlTaskInputResponse {
		return v.Input
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Output() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []ConnectToTargetAzureDbForMySqlTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureDbForMySql'.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskInput
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//	ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput).ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs, ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtr and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//	        ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs

func ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtr(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
		return &v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) SourceConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) Elem() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetAzureDbForPostgreSqlSyncTaskInput
		return ret
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse
		return ret
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// List of databases on target server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//	ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput).ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs, ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtr and ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrInput` via:
//
//	        ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
}

type connectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrType ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs

func ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtr(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrInput {
	return (*connectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrType)(v)
}

func (*connectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties {
		return &v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
		return v.Input
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Elem() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties
		return ret
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Input() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureDbForPostgreSql.Sync'.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//	ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput).ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs, ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtr and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//	        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs

func ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtr(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
		return &v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) Elem() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput
		return ret
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse
		return ret
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// Mapping of schemas per database
	DatabaseSchemaMap []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap `pulumi:"databaseSchemaMap"`
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// Mapping of schemas per database
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) DatabaseSchemaMap() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap {
		return v.DatabaseSchemaMap
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput)
}

// List of databases on target server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Target server brand version
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap struct {
	Database *string  `pulumi:"database"`
	Schemas  []string `pulumi:"schemas"`
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap) *string {
		return v.Database
	}).(pulumi.StringPtrOutput)
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) Schemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap) []string {
		return v.Schemas
	}).(pulumi.StringArrayOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) Index(i pulumi.IntInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap {
		return vs[0].([]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)[vs[1].(int)]
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//	ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput).ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs, ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtr and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput` via:
//
//	        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
}

type connectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs

func ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtr(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput {
	return (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType)(v)
}

func (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties {
		return &v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
		return v.Input
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Elem() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties
		return ret
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Input() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync'.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInput struct {
	// Boolean flag indicating whether to query object counts for each database on the target server
	QueryObjectCounts *bool `pulumi:"queryObjectCounts"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInput
func (val *ConnectToTargetSqlDbTaskInput) Defaults() *ConnectToTargetSqlDbTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// ConnectToTargetSqlDbTaskInputInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs and ConnectToTargetSqlDbTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputInput` via:
//
//	ConnectToTargetSqlDbTaskInputArgs{...}
type ConnectToTargetSqlDbTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput
	ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputArgs struct {
	// Boolean flag indicating whether to query object counts for each database on the target server
	QueryObjectCounts pulumi.BoolPtrInput `pulumi:"queryObjectCounts"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInputArgs
func (val *ConnectToTargetSqlDbTaskInputArgs) Defaults() *ConnectToTargetSqlDbTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return i.ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput)
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput).ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputPtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs, ConnectToTargetSqlDbTaskInputPtr and ConnectToTargetSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputPtrInput` via:
//
//	        ConnectToTargetSqlDbTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput
	ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputPtrOutput
}

type connectToTargetSqlDbTaskInputPtrType ConnectToTargetSqlDbTaskInputArgs

func ConnectToTargetSqlDbTaskInputPtr(v *ConnectToTargetSqlDbTaskInputArgs) ConnectToTargetSqlDbTaskInputPtrInput {
	return (*connectToTargetSqlDbTaskInputPtrType)(v)
}

func (*connectToTargetSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputOutput) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlDbTaskInput) *ConnectToTargetSqlDbTaskInput {
		return &v
	}).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Boolean flag indicating whether to query object counts for each database on the target server
func (o ConnectToTargetSqlDbTaskInputOutput) QueryObjectCounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInput) *bool { return v.QueryObjectCounts }).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ConnectToTargetSqlDbTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputPtrOutput) Elem() ConnectToTargetSqlDbTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInput) ConnectToTargetSqlDbTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlDbTaskInput
		return ret
	}).(ConnectToTargetSqlDbTaskInputOutput)
}

// Boolean flag indicating whether to query object counts for each database on the target server
func (o ConnectToTargetSqlDbTaskInputPtrOutput) QueryObjectCounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.QueryObjectCounts
	}).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponse struct {
	// Boolean flag indicating whether to query object counts for each database on the target server
	QueryObjectCounts *bool `pulumi:"queryObjectCounts"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskInputResponse
func (val *ConnectToTargetSqlDbTaskInputResponse) Defaults() *ConnectToTargetSqlDbTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

// Boolean flag indicating whether to query object counts for each database on the target server
func (o ConnectToTargetSqlDbTaskInputResponseOutput) QueryObjectCounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) *bool { return v.QueryObjectCounts }).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) ConnectToTargetSqlDbTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlDbTaskInputResponse
		return ret
	}).(ConnectToTargetSqlDbTaskInputResponseOutput)
}

// Boolean flag indicating whether to query object counts for each database on the target server
func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) QueryObjectCounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.QueryObjectCounts
	}).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponse struct {
	// Source databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Result identifier
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type ConnectToTargetSqlDbTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlDbTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlDbTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlDbTaskOutputResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskProperties
func (val *ConnectToTargetSqlDbTaskProperties) Defaults() *ConnectToTargetSqlDbTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToTargetSqlDbTaskPropertiesInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesArgs and ConnectToTargetSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesInput` via:
//
//	ConnectToTargetSqlDbTaskPropertiesArgs{...}
type ConnectToTargetSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput
	ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn pulumi.StringPtrInput `pulumi:"createdOn"`
	// Task input
	Input ConnectToTargetSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskPropertiesArgs
func (val *ConnectToTargetSqlDbTaskPropertiesArgs) Defaults() *ConnectToTargetSqlDbTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesOutput)
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesPtrOutput() ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesOutput).ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskPropertiesPtrInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesArgs, ConnectToTargetSqlDbTaskPropertiesPtr and ConnectToTargetSqlDbTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesPtrInput` via:
//
//	        ConnectToTargetSqlDbTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlDbTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesPtrOutput() ConnectToTargetSqlDbTaskPropertiesPtrOutput
	ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesPtrOutput
}

type connectToTargetSqlDbTaskPropertiesPtrType ConnectToTargetSqlDbTaskPropertiesArgs

func ConnectToTargetSqlDbTaskPropertiesPtr(v *ConnectToTargetSqlDbTaskPropertiesArgs) ConnectToTargetSqlDbTaskPropertiesPtrInput {
	return (*connectToTargetSqlDbTaskPropertiesPtrType)(v)
}

func (*connectToTargetSqlDbTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskPropertiesPtrType) ToConnectToTargetSqlDbTaskPropertiesPtrOutput() ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskPropertiesPtrType) ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesPtrOutput() ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return o.ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskPropertiesOutput) ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlDbTaskProperties) *ConnectToTargetSqlDbTaskProperties {
		return &v
	}).(ConnectToTargetSqlDbTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o ConnectToTargetSqlDbTaskPropertiesOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesOutput) Input() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) *ConnectToTargetSqlDbTaskInput { return v.Input }).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb'.
func (o ConnectToTargetSqlDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToTargetSqlDbTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesPtrOutput) ToConnectToTargetSqlDbTaskPropertiesPtrOutput() ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesPtrOutput) ToConnectToTargetSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesPtrOutput) Elem() ConnectToTargetSqlDbTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskProperties) ConnectToTargetSqlDbTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlDbTaskProperties
		return ret
	}).(ConnectToTargetSqlDbTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlDbTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o ConnectToTargetSqlDbTaskPropertiesPtrOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.CreatedOn
	}).(pulumi.StringPtrOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesPtrOutput) Input() ConnectToTargetSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskProperties) *ConnectToTargetSqlDbTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb'.
func (o ConnectToTargetSqlDbTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlDbTaskPropertiesResponse
func (val *ConnectToTargetSqlDbTaskPropertiesResponse) Defaults() *ConnectToTargetSqlDbTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// DateTime in UTC when the task was created
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Input() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb'.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMISyncTaskInputInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputArgs and ConnectToTargetSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputInput` via:
//
//	ConnectToTargetSqlMISyncTaskInputArgs{...}
type ConnectToTargetSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput
	ToConnectToTargetSqlMISyncTaskInputOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputOutput)
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputOutput).ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMISyncTaskInputPtrInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputArgs, ConnectToTargetSqlMISyncTaskInputPtr and ConnectToTargetSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputPtrInput` via:
//
//	        ConnectToTargetSqlMISyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput
	ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput
}

type connectToTargetSqlMISyncTaskInputPtrType ConnectToTargetSqlMISyncTaskInputArgs

func ConnectToTargetSqlMISyncTaskInputPtr(v *ConnectToTargetSqlMISyncTaskInputArgs) ConnectToTargetSqlMISyncTaskInputPtrInput {
	return (*connectToTargetSqlMISyncTaskInputPtrType)(v)
}

func (*connectToTargetSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMISyncTaskInputPtrType) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMISyncTaskInputPtrType) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMISyncTaskInputOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlMISyncTaskInput) *ConnectToTargetSqlMISyncTaskInput {
		return &v
	}).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputOutput) AzureApp() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInput) AzureActiveDirectoryApp { return v.AzureApp }).(AzureActiveDirectoryAppOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputOutput) TargetConnectionInfo() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInput) MiSqlConnectionInfo { return v.TargetConnectionInfo }).(MiSqlConnectionInfoOutput)
}

type ConnectToTargetSqlMISyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) Elem() ConnectToTargetSqlMISyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInput) ConnectToTargetSqlMISyncTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlMISyncTaskInput
		return ret
	}).(ConnectToTargetSqlMISyncTaskInputOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) AzureApp() AzureActiveDirectoryAppPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInput) *AzureActiveDirectoryApp {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputPtrOutput) TargetConnectionInfo() MiSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInput) *MiSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponseOutput() ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse { return v.AzureApp }).(AzureActiveDirectoryAppResponseOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) ConnectToTargetSqlMISyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlMISyncTaskInputResponse
		return ret
	}).(ConnectToTargetSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponse struct {
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ToConnectToTargetSqlMISyncTaskOutputResponseOutput() ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ToConnectToTargetSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return o
}

// Target server brand version
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutput() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMISyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMISyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMISyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMISyncTaskPropertiesInput is an input type that accepts ConnectToTargetSqlMISyncTaskPropertiesArgs and ConnectToTargetSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskPropertiesInput` via:
//
//	ConnectToTargetSqlMISyncTaskPropertiesArgs{...}
type ConnectToTargetSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput
	ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return i.ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskPropertiesOutput)
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutput() ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskPropertiesOutput).ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMISyncTaskPropertiesPtrInput is an input type that accepts ConnectToTargetSqlMISyncTaskPropertiesArgs, ConnectToTargetSqlMISyncTaskPropertiesPtr and ConnectToTargetSqlMISyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskPropertiesPtrInput` via:
//
//	        ConnectToTargetSqlMISyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlMISyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskPropertiesPtrOutput() ConnectToTargetSqlMISyncTaskPropertiesPtrOutput
	ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskPropertiesPtrOutput
}

type connectToTargetSqlMISyncTaskPropertiesPtrType ConnectToTargetSqlMISyncTaskPropertiesArgs

func ConnectToTargetSqlMISyncTaskPropertiesPtr(v *ConnectToTargetSqlMISyncTaskPropertiesArgs) ConnectToTargetSqlMISyncTaskPropertiesPtrInput {
	return (*connectToTargetSqlMISyncTaskPropertiesPtrType)(v)
}

func (*connectToTargetSqlMISyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskProperties)(nil)).Elem()
}

func (i *connectToTargetSqlMISyncTaskPropertiesPtrType) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutput() ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMISyncTaskPropertiesPtrType) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutput() ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return o.ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlMISyncTaskProperties) *ConnectToTargetSqlMISyncTaskProperties {
		return &v
	}).(ConnectToTargetSqlMISyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) Input() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskProperties) *ConnectToTargetSqlMISyncTaskInput { return v.Input }).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
func (o ConnectToTargetSqlMISyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToTargetSqlMISyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskPropertiesPtrOutput) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutput() ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesPtrOutput) ToConnectToTargetSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesPtrOutput) Elem() ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskProperties) ConnectToTargetSqlMISyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlMISyncTaskProperties
		return ret
	}).(ConnectToTargetSqlMISyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMISyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlMISyncTaskPropertiesPtrOutput) Input() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskProperties) *ConnectToTargetSqlMISyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
func (o ConnectToTargetSqlMISyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutput() ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Input() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) *ConnectToTargetSqlMISyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Output() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []ConnectToTargetSqlMISyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI.Sync.LRS'.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInput struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskInput
func (val *ConnectToTargetSqlMITaskInput) Defaults() *ConnectToTargetSqlMITaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CollectAgentJobs == nil {
		collectAgentJobs_ := true
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if tmp.CollectLogins == nil {
		collectLogins_ := true
		tmp.CollectLogins = &collectLogins_
	}
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	if tmp.ValidateSsisCatalogOnly == nil {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// ConnectToTargetSqlMITaskInputInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs and ConnectToTargetSqlMITaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputInput` via:
//
//	ConnectToTargetSqlMITaskInputArgs{...}
type ConnectToTargetSqlMITaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput
	ToConnectToTargetSqlMITaskInputOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputArgs struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskInputArgs
func (val *ConnectToTargetSqlMITaskInputArgs) Defaults() *ConnectToTargetSqlMITaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CollectAgentJobs == nil {
		tmp.CollectAgentJobs = pulumi.BoolPtr(true)
	}
	if tmp.CollectLogins == nil {
		tmp.CollectLogins = pulumi.BoolPtr(true)
	}

	if tmp.ValidateSsisCatalogOnly == nil {
		tmp.ValidateSsisCatalogOnly = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ConnectToTargetSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return i.ToConnectToTargetSqlMITaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput)
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput).ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputPtrInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs, ConnectToTargetSqlMITaskInputPtr and ConnectToTargetSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputPtrInput` via:
//
//	        ConnectToTargetSqlMITaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput
	ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputPtrOutput
}

type connectToTargetSqlMITaskInputPtrType ConnectToTargetSqlMITaskInputArgs

func ConnectToTargetSqlMITaskInputPtr(v *ConnectToTargetSqlMITaskInputArgs) ConnectToTargetSqlMITaskInputPtrInput {
	return (*connectToTargetSqlMITaskInputPtrType)(v)
}

func (*connectToTargetSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputOutput) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlMITaskInput) *ConnectToTargetSqlMITaskInput {
		return &v
	}).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInput) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToTargetSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputPtrOutput) Elem() ConnectToTargetSqlMITaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) ConnectToTargetSqlMITaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlMITaskInput
		return ret
	}).(ConnectToTargetSqlMITaskInputOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputPtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputPtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputPtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponse struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskInputResponse
func (val *ConnectToTargetSqlMITaskInputResponse) Defaults() *ConnectToTargetSqlMITaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CollectAgentJobs == nil {
		collectAgentJobs_ := true
		tmp.CollectAgentJobs = &collectAgentJobs_
	}
	if tmp.CollectLogins == nil {
		collectLogins_ := true
		tmp.CollectLogins = &collectLogins_
	}
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	if tmp.ValidateSsisCatalogOnly == nil {
		validateSsisCatalogOnly_ := false
		tmp.ValidateSsisCatalogOnly = &validateSsisCatalogOnly_
	}
	return &tmp
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToTargetSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) ConnectToTargetSqlMITaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlMITaskInputResponse
		return ret
	}).(ConnectToTargetSqlMITaskInputResponseOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponse struct {
	// List of agent jobs on the target server.
	AgentJobs []string `pulumi:"agentJobs"`
	// Result identifier
	Id string `pulumi:"id"`
	// List of logins on the target server.
	Logins []string `pulumi:"logins"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

// List of agent jobs on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) AgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.AgentJobs }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// List of logins on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Logins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.Logins }).(pulumi.StringArrayOutput)
}

// Target server brand version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMITaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMITaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMITaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskProperties
func (val *ConnectToTargetSqlMITaskProperties) Defaults() *ConnectToTargetSqlMITaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToTargetSqlMITaskPropertiesInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesArgs and ConnectToTargetSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesInput` via:
//
//	ConnectToTargetSqlMITaskPropertiesArgs{...}
type ConnectToTargetSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput
	ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskPropertiesArgs
func (val *ConnectToTargetSqlMITaskPropertiesArgs) Defaults() *ConnectToTargetSqlMITaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesOutput)
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesPtrOutput() ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesOutput).ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskPropertiesPtrInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesArgs, ConnectToTargetSqlMITaskPropertiesPtr and ConnectToTargetSqlMITaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesPtrInput` via:
//
//	        ConnectToTargetSqlMITaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlMITaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesPtrOutput() ConnectToTargetSqlMITaskPropertiesPtrOutput
	ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesPtrOutput
}

type connectToTargetSqlMITaskPropertiesPtrType ConnectToTargetSqlMITaskPropertiesArgs

func ConnectToTargetSqlMITaskPropertiesPtr(v *ConnectToTargetSqlMITaskPropertiesArgs) ConnectToTargetSqlMITaskPropertiesPtrInput {
	return (*connectToTargetSqlMITaskPropertiesPtrType)(v)
}

func (*connectToTargetSqlMITaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskPropertiesPtrType) ToConnectToTargetSqlMITaskPropertiesPtrOutput() ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskPropertiesPtrType) ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesPtrOutput() ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return o.ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskPropertiesOutput) ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlMITaskProperties) *ConnectToTargetSqlMITaskProperties {
		return &v
	}).(ConnectToTargetSqlMITaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMITaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesOutput) Input() ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) *ConnectToTargetSqlMITaskInput { return v.Input }).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
func (o ConnectToTargetSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToTargetSqlMITaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesPtrOutput) ToConnectToTargetSqlMITaskPropertiesPtrOutput() ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesPtrOutput) ToConnectToTargetSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesPtrOutput) Elem() ConnectToTargetSqlMITaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskProperties) ConnectToTargetSqlMITaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlMITaskProperties
		return ret
	}).(ConnectToTargetSqlMITaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMITaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesPtrOutput) Input() ConnectToTargetSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskProperties) *ConnectToTargetSqlMITaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
func (o ConnectToTargetSqlMITaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlMITaskPropertiesResponse
func (val *ConnectToTargetSqlMITaskPropertiesResponse) Defaults() *ConnectToTargetSqlMITaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Input() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) *ConnectToTargetSqlMITaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Output() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ConnectToTargetSqlMITaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.AzureSqlDbMI'.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInput struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskInput
func (val *ConnectToTargetSqlSqlDbSyncTaskInput) Defaults() *ConnectToTargetSqlSqlDbSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// ConnectToTargetSqlSqlDbSyncTaskInputInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputArgs and ConnectToTargetSqlSqlDbSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputInput` via:
//
//	ConnectToTargetSqlSqlDbSyncTaskInputArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputArgs struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskInputArgs
func (val *ConnectToTargetSqlSqlDbSyncTaskInputArgs) Defaults() *ConnectToTargetSqlSqlDbSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetSqlSqlDbSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputOutput)
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputOutput).ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlSqlDbSyncTaskInputPtrInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputArgs, ConnectToTargetSqlSqlDbSyncTaskInputPtr and ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputPtrInput` via:
//
//	        ConnectToTargetSqlSqlDbSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlSqlDbSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput
}

type connectToTargetSqlSqlDbSyncTaskInputPtrType ConnectToTargetSqlSqlDbSyncTaskInputArgs

func ConnectToTargetSqlSqlDbSyncTaskInputPtr(v *ConnectToTargetSqlSqlDbSyncTaskInputArgs) ConnectToTargetSqlSqlDbSyncTaskInputPtrInput {
	return (*connectToTargetSqlSqlDbSyncTaskInputPtrType)(v)
}

func (*connectToTargetSqlSqlDbSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlSqlDbSyncTaskInputPtrType) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlSqlDbSyncTaskInputPtrType) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlSqlDbSyncTaskInput) *ConnectToTargetSqlSqlDbSyncTaskInput {
		return &v
	}).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) Elem() ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInput) ConnectToTargetSqlSqlDbSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlSqlDbSyncTaskInput
		return ret
	}).(ConnectToTargetSqlSqlDbSyncTaskInputOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponse struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskInputResponse
func (val *ConnectToTargetSqlSqlDbSyncTaskInputResponse) Defaults() *ConnectToTargetSqlSqlDbSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlSqlDbSyncTaskInputResponse
		return ret
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskProperties
func (val *ConnectToTargetSqlSqlDbSyncTaskProperties) Defaults() *ConnectToTargetSqlSqlDbSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ConnectToTargetSqlSqlDbSyncTaskPropertiesInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs and ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskPropertiesInput` via:
//
//	ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput
	ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlSqlDbSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs
func (val *ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) Defaults() *ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput)
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput).ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs, ConnectToTargetSqlSqlDbSyncTaskPropertiesPtr and ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrInput` via:
//
//	        ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput
	ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput
}

type connectToTargetSqlSqlDbSyncTaskPropertiesPtrType ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs

func ConnectToTargetSqlSqlDbSyncTaskPropertiesPtr(v *ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrInput {
	return (*connectToTargetSqlSqlDbSyncTaskPropertiesPtrType)(v)
}

func (*connectToTargetSqlSqlDbSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i *connectToTargetSqlSqlDbSyncTaskPropertiesPtrType) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlSqlDbSyncTaskPropertiesPtrType) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return o.ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectToTargetSqlSqlDbSyncTaskProperties) *ConnectToTargetSqlSqlDbSyncTaskProperties {
		return &v
	}).(ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) Input() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskProperties) *ConnectToTargetSqlSqlDbSyncTaskInput {
		return v.Input
	}).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb.Sync'.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput) Elem() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskProperties) ConnectToTargetSqlSqlDbSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ConnectToTargetSqlSqlDbSyncTaskProperties
		return ret
	}).(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput) Input() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskProperties) *ConnectToTargetSqlSqlDbSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb.Sync'.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ConnectToTarget.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse
func (val *ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) Defaults() *ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Input() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) *ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ConnectToTarget.SqlDb.Sync'.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Details on progress of ADF copy activity
type CopyProgressDetailsResponse struct {
	// Copy Duration in seconds
	CopyDuration int `pulumi:"copyDuration"`
	// Copy Start
	CopyStart string `pulumi:"copyStart"`
	// Copy throughput in KBps
	CopyThroughput float64 `pulumi:"copyThroughput"`
	// Bytes read
	DataRead float64 `pulumi:"dataRead"`
	// Bytes written
	DataWritten float64 `pulumi:"dataWritten"`
	// Type of parallel copy (Dynamic range, Physical partition, none).
	ParallelCopyType string `pulumi:"parallelCopyType"`
	// Rows Copied
	RowsCopied float64 `pulumi:"rowsCopied"`
	// Rows read
	RowsRead float64 `pulumi:"rowsRead"`
	// Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
	Status string `pulumi:"status"`
	// Table Name
	TableName string `pulumi:"tableName"`
	// The degree of parallelization.
	UsedParallelCopies int `pulumi:"usedParallelCopies"`
}

// Details on progress of ADF copy activity
type CopyProgressDetailsResponseOutput struct{ *pulumi.OutputState }

func (CopyProgressDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyProgressDetailsResponse)(nil)).Elem()
}

func (o CopyProgressDetailsResponseOutput) ToCopyProgressDetailsResponseOutput() CopyProgressDetailsResponseOutput {
	return o
}

func (o CopyProgressDetailsResponseOutput) ToCopyProgressDetailsResponseOutputWithContext(ctx context.Context) CopyProgressDetailsResponseOutput {
	return o
}

// Copy Duration in seconds
func (o CopyProgressDetailsResponseOutput) CopyDuration() pulumi.IntOutput {
	return o.ApplyT(func(v CopyProgressDetailsResponse) int { return v.CopyDuration }).(pulumi.IntOutput)
}

// Copy Start
func (o CopyProgressDetailsResponseOutput) CopyStart() pulumi.StringOutput {
	return o.ApplyT(func(v CopyProgressDetailsResponse) string { return v.CopyStart }).(pulumi.StringOutput)
}

// Copy throughput in KBps
func (o CopyProgressDetailsResponseOutput) CopyThroughput() pulumi.Float64Output {
	return o.ApplyT(func(v CopyProgressDetailsResponse) float64 { return v.CopyThroughput }).(pulumi.Float64Output)
}

// Bytes read
func (o CopyProgressDetailsResponseOutput) DataRead() pulumi.Float64Output {
	return o.ApplyT(func(v CopyProgressDetailsResponse) float64 { return v.DataRead }).(pulumi.Float64Output)
}

// Bytes written
func (o CopyProgressDetailsResponseOutput) DataWritten() pulumi.Float64Output {
	return o.ApplyT(func(v CopyProgressDetailsResponse) float64 { return v.DataWritten }).(pulumi.Float64Output)
}

// Type of parallel copy (Dynamic range, Physical partition, none).
func (o CopyProgressDetailsResponseOutput) ParallelCopyType() pulumi.StringOutput {
	return o.ApplyT(func(v CopyProgressDetailsResponse) string { return v.ParallelCopyType }).(pulumi.StringOutput)
}

// Rows Copied
func (o CopyProgressDetailsResponseOutput) RowsCopied() pulumi.Float64Output {
	return o.ApplyT(func(v CopyProgressDetailsResponse) float64 { return v.RowsCopied }).(pulumi.Float64Output)
}

// Rows read
func (o CopyProgressDetailsResponseOutput) RowsRead() pulumi.Float64Output {
	return o.ApplyT(func(v CopyProgressDetailsResponse) float64 { return v.RowsRead }).(pulumi.Float64Output)
}

// Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
func (o CopyProgressDetailsResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CopyProgressDetailsResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Table Name
func (o CopyProgressDetailsResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v CopyProgressDetailsResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// The degree of parallelization.
func (o CopyProgressDetailsResponseOutput) UsedParallelCopies() pulumi.IntOutput {
	return o.ApplyT(func(v CopyProgressDetailsResponse) int { return v.UsedParallelCopies }).(pulumi.IntOutput)
}

type CopyProgressDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (CopyProgressDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CopyProgressDetailsResponse)(nil)).Elem()
}

func (o CopyProgressDetailsResponseArrayOutput) ToCopyProgressDetailsResponseArrayOutput() CopyProgressDetailsResponseArrayOutput {
	return o
}

func (o CopyProgressDetailsResponseArrayOutput) ToCopyProgressDetailsResponseArrayOutputWithContext(ctx context.Context) CopyProgressDetailsResponseArrayOutput {
	return o
}

func (o CopyProgressDetailsResponseArrayOutput) Index(i pulumi.IntInput) CopyProgressDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CopyProgressDetailsResponse {
		return vs[0].([]CopyProgressDetailsResponse)[vs[1].(int)]
	}).(CopyProgressDetailsResponseOutput)
}

// Results for checksum based Data Integrity validation results
type DataIntegrityValidationResultResponse struct {
	// List of failed table names of source and target pair
	FailedObjects map[string]string `pulumi:"failedObjects"`
	// List of errors that happened while performing data integrity validation
	ValidationErrors *ValidationErrorResponse `pulumi:"validationErrors"`
}

// Results for checksum based Data Integrity validation results
type DataIntegrityValidationResultResponseOutput struct{ *pulumi.OutputState }

func (DataIntegrityValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataIntegrityValidationResultResponse)(nil)).Elem()
}

func (o DataIntegrityValidationResultResponseOutput) ToDataIntegrityValidationResultResponseOutput() DataIntegrityValidationResultResponseOutput {
	return o
}

func (o DataIntegrityValidationResultResponseOutput) ToDataIntegrityValidationResultResponseOutputWithContext(ctx context.Context) DataIntegrityValidationResultResponseOutput {
	return o
}

// List of failed table names of source and target pair
func (o DataIntegrityValidationResultResponseOutput) FailedObjects() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataIntegrityValidationResultResponse) map[string]string { return v.FailedObjects }).(pulumi.StringMapOutput)
}

// List of errors that happened while performing data integrity validation
func (o DataIntegrityValidationResultResponseOutput) ValidationErrors() ValidationErrorResponsePtrOutput {
	return o.ApplyT(func(v DataIntegrityValidationResultResponse) *ValidationErrorResponse { return v.ValidationErrors }).(ValidationErrorResponsePtrOutput)
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// Basic summary of a data item migration
type DataItemMigrationSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultResponseOutput) ToDataItemMigrationSummaryResultResponseOutput() DataItemMigrationSummaryResultResponseOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseOutput) ToDataItemMigrationSummaryResultResponseOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseOutput {
	return o
}

// Migration end time
func (o DataItemMigrationSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DataItemMigrationSummaryResultResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DataItemMigrationSummaryResultResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o DataItemMigrationSummaryResultResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o DataItemMigrationSummaryResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DataItemMigrationSummaryResultResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Migration start time
func (o DataItemMigrationSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DataItemMigrationSummaryResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DataItemMigrationSummaryResultResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DataItemMigrationSummaryResultResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DataItemMigrationSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (DataItemMigrationSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataItemMigrationSummaryResultResponse)(nil)).Elem()
}

func (o DataItemMigrationSummaryResultResponseMapOutput) ToDataItemMigrationSummaryResultResponseMapOutput() DataItemMigrationSummaryResultResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseMapOutput) ToDataItemMigrationSummaryResultResponseMapOutputWithContext(ctx context.Context) DataItemMigrationSummaryResultResponseMapOutput {
	return o
}

func (o DataItemMigrationSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) DataItemMigrationSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataItemMigrationSummaryResultResponse {
		return vs[0].(map[string]DataItemMigrationSummaryResultResponse)[vs[1].(string)]
	}).(DataItemMigrationSummaryResultResponseOutput)
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponse struct {
	// The list of backup files for the current database.
	BackupFiles []string `pulumi:"backupFiles"`
	// Date and time when the backup operation finished.
	BackupFinishDate string `pulumi:"backupFinishDate"`
	// Backup Type.
	BackupType string `pulumi:"backupType"`
	// Database name.
	DatabaseName string `pulumi:"databaseName"`
	// Number of files in the backup set.
	FamilyCount int `pulumi:"familyCount"`
	// Whether the backup set is compressed
	IsCompressed bool `pulumi:"isCompressed"`
	// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
	IsDamaged bool `pulumi:"isDamaged"`
	// Position of current database backup in the file.
	Position int `pulumi:"position"`
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseBackupInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackupInfoResponse)(nil)).Elem()
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponseOutput() DatabaseBackupInfoResponseOutput {
	return o
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponseOutputWithContext(ctx context.Context) DatabaseBackupInfoResponseOutput {
	return o
}

// The list of backup files for the current database.
func (o DatabaseBackupInfoResponseOutput) BackupFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) []string { return v.BackupFiles }).(pulumi.StringArrayOutput)
}

// Date and time when the backup operation finished.
func (o DatabaseBackupInfoResponseOutput) BackupFinishDate() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.BackupFinishDate }).(pulumi.StringOutput)
}

// Backup Type.
func (o DatabaseBackupInfoResponseOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.BackupType }).(pulumi.StringOutput)
}

// Database name.
func (o DatabaseBackupInfoResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Number of files in the backup set.
func (o DatabaseBackupInfoResponseOutput) FamilyCount() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) int { return v.FamilyCount }).(pulumi.IntOutput)
}

// Whether the backup set is compressed
func (o DatabaseBackupInfoResponseOutput) IsCompressed() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) bool { return v.IsCompressed }).(pulumi.BoolOutput)
}

// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
func (o DatabaseBackupInfoResponseOutput) IsDamaged() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) bool { return v.IsDamaged }).(pulumi.BoolOutput)
}

// Position of current database backup in the file.
func (o DatabaseBackupInfoResponseOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) int { return v.Position }).(pulumi.IntOutput)
}

type DatabaseBackupInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseBackupInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackupInfoResponse)(nil)).Elem()
}

func (o DatabaseBackupInfoResponsePtrOutput) ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput {
	return o
}

func (o DatabaseBackupInfoResponsePtrOutput) ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx context.Context) DatabaseBackupInfoResponsePtrOutput {
	return o
}

func (o DatabaseBackupInfoResponsePtrOutput) Elem() DatabaseBackupInfoResponseOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) DatabaseBackupInfoResponse {
		if v != nil {
			return *v
		}
		var ret DatabaseBackupInfoResponse
		return ret
	}).(DatabaseBackupInfoResponseOutput)
}

// The list of backup files for the current database.
func (o DatabaseBackupInfoResponsePtrOutput) BackupFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.BackupFiles
	}).(pulumi.StringArrayOutput)
}

// Date and time when the backup operation finished.
func (o DatabaseBackupInfoResponsePtrOutput) BackupFinishDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupFinishDate
	}).(pulumi.StringPtrOutput)
}

// Backup Type.
func (o DatabaseBackupInfoResponsePtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// Database name.
func (o DatabaseBackupInfoResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Number of files in the backup set.
func (o DatabaseBackupInfoResponsePtrOutput) FamilyCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FamilyCount
	}).(pulumi.IntPtrOutput)
}

// Whether the backup set is compressed
func (o DatabaseBackupInfoResponsePtrOutput) IsCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsCompressed
	}).(pulumi.BoolPtrOutput)
}

// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
func (o DatabaseBackupInfoResponsePtrOutput) IsDamaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDamaged
	}).(pulumi.BoolPtrOutput)
}

// Position of current database backup in the file.
func (o DatabaseBackupInfoResponsePtrOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Position
	}).(pulumi.IntPtrOutput)
}

// Database file specific information
type DatabaseFileInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Database file type
	FileType *string `pulumi:"fileType"`
	// Unique identifier for database file
	Id *string `pulumi:"id"`
	// Logical name of the file
	LogicalName *string `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName *string `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName *string `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB *float64 `pulumi:"sizeMB"`
}

// Database file specific information
type DatabaseFileInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput {
	return o
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutputWithContext(ctx context.Context) DatabaseFileInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseFileInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Database file type
func (o DatabaseFileInfoResponseOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

// Unique identifier for database file
func (o DatabaseFileInfoResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Logical name of the file
func (o DatabaseFileInfoResponseOutput) LogicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.LogicalName }).(pulumi.StringPtrOutput)
}

// Operating-system full path of the file
func (o DatabaseFileInfoResponseOutput) PhysicalFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.PhysicalFullName }).(pulumi.StringPtrOutput)
}

// Suggested full path of the file for restoring
func (o DatabaseFileInfoResponseOutput) RestoreFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.RestoreFullName }).(pulumi.StringPtrOutput)
}

// Size of the file in megabytes
func (o DatabaseFileInfoResponseOutput) SizeMB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *float64 { return v.SizeMB }).(pulumi.Float64PtrOutput)
}

type DatabaseFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFileInfoResponse {
		return vs[0].([]DatabaseFileInfoResponse)[vs[1].(int)]
	}).(DatabaseFileInfoResponseOutput)
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//	DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//	DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoOutput struct{ *pulumi.OutputState }

func (DatabaseInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return o
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return o
}

// Name of the database
func (o DatabaseInfoOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfo) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) Index(i pulumi.IntInput) DatabaseInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfo {
		return vs[0].([]DatabaseInfo)[vs[1].(int)]
	}).(DatabaseInfoOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// Database Migration Resource properties for SQL database.
type DatabaseMigrationPropertiesSqlDb struct {
	// Expected value is 'SqlDb'.
	Kind string `pulumi:"kind"`
	// ID tracking current migration operation.
	MigrationOperationId *string `pulumi:"migrationOperationId"`
	// Resource Id of the Migration Service.
	MigrationService *string `pulumi:"migrationService"`
	// Error message for migration provisioning failure, if any.
	ProvisioningError *string `pulumi:"provisioningError"`
	// Resource Id of the target resource (SQL VM or SQL Managed Instance).
	Scope *string `pulumi:"scope"`
	// Name of the source database.
	SourceDatabaseName *string `pulumi:"sourceDatabaseName"`
	// Source SQL Server connection details.
	SourceSqlConnection *SqlConnectionInformation `pulumi:"sourceSqlConnection"`
	// List of tables to copy.
	TableList []string `pulumi:"tableList"`
	// Database collation to be used for the target database.
	TargetDatabaseCollation *string `pulumi:"targetDatabaseCollation"`
	// Target SQL DB connection details.
	TargetSqlConnection *SqlConnectionInformation `pulumi:"targetSqlConnection"`
}

// DatabaseMigrationPropertiesSqlDbInput is an input type that accepts DatabaseMigrationPropertiesSqlDbArgs and DatabaseMigrationPropertiesSqlDbOutput values.
// You can construct a concrete instance of `DatabaseMigrationPropertiesSqlDbInput` via:
//
//	DatabaseMigrationPropertiesSqlDbArgs{...}
type DatabaseMigrationPropertiesSqlDbInput interface {
	pulumi.Input

	ToDatabaseMigrationPropertiesSqlDbOutput() DatabaseMigrationPropertiesSqlDbOutput
	ToDatabaseMigrationPropertiesSqlDbOutputWithContext(context.Context) DatabaseMigrationPropertiesSqlDbOutput
}

// Database Migration Resource properties for SQL database.
type DatabaseMigrationPropertiesSqlDbArgs struct {
	// Expected value is 'SqlDb'.
	Kind pulumi.StringInput `pulumi:"kind"`
	// ID tracking current migration operation.
	MigrationOperationId pulumi.StringPtrInput `pulumi:"migrationOperationId"`
	// Resource Id of the Migration Service.
	MigrationService pulumi.StringPtrInput `pulumi:"migrationService"`
	// Error message for migration provisioning failure, if any.
	ProvisioningError pulumi.StringPtrInput `pulumi:"provisioningError"`
	// Resource Id of the target resource (SQL VM or SQL Managed Instance).
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// Name of the source database.
	SourceDatabaseName pulumi.StringPtrInput `pulumi:"sourceDatabaseName"`
	// Source SQL Server connection details.
	SourceSqlConnection SqlConnectionInformationPtrInput `pulumi:"sourceSqlConnection"`
	// List of tables to copy.
	TableList pulumi.StringArrayInput `pulumi:"tableList"`
	// Database collation to be used for the target database.
	TargetDatabaseCollation pulumi.StringPtrInput `pulumi:"targetDatabaseCollation"`
	// Target SQL DB connection details.
	TargetSqlConnection SqlConnectionInformationPtrInput `pulumi:"targetSqlConnection"`
}

func (DatabaseMigrationPropertiesSqlDbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMigrationPropertiesSqlDb)(nil)).Elem()
}

func (i DatabaseMigrationPropertiesSqlDbArgs) ToDatabaseMigrationPropertiesSqlDbOutput() DatabaseMigrationPropertiesSqlDbOutput {
	return i.ToDatabaseMigrationPropertiesSqlDbOutputWithContext(context.Background())
}

func (i DatabaseMigrationPropertiesSqlDbArgs) ToDatabaseMigrationPropertiesSqlDbOutputWithContext(ctx context.Context) DatabaseMigrationPropertiesSqlDbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMigrationPropertiesSqlDbOutput)
}

func (i DatabaseMigrationPropertiesSqlDbArgs) ToDatabaseMigrationPropertiesSqlDbPtrOutput() DatabaseMigrationPropertiesSqlDbPtrOutput {
	return i.ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(context.Background())
}

func (i DatabaseMigrationPropertiesSqlDbArgs) ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(ctx context.Context) DatabaseMigrationPropertiesSqlDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMigrationPropertiesSqlDbOutput).ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(ctx)
}

// DatabaseMigrationPropertiesSqlDbPtrInput is an input type that accepts DatabaseMigrationPropertiesSqlDbArgs, DatabaseMigrationPropertiesSqlDbPtr and DatabaseMigrationPropertiesSqlDbPtrOutput values.
// You can construct a concrete instance of `DatabaseMigrationPropertiesSqlDbPtrInput` via:
//
//	        DatabaseMigrationPropertiesSqlDbArgs{...}
//
//	or:
//
//	        nil
type DatabaseMigrationPropertiesSqlDbPtrInput interface {
	pulumi.Input

	ToDatabaseMigrationPropertiesSqlDbPtrOutput() DatabaseMigrationPropertiesSqlDbPtrOutput
	ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(context.Context) DatabaseMigrationPropertiesSqlDbPtrOutput
}

type databaseMigrationPropertiesSqlDbPtrType DatabaseMigrationPropertiesSqlDbArgs

func DatabaseMigrationPropertiesSqlDbPtr(v *DatabaseMigrationPropertiesSqlDbArgs) DatabaseMigrationPropertiesSqlDbPtrInput {
	return (*databaseMigrationPropertiesSqlDbPtrType)(v)
}

func (*databaseMigrationPropertiesSqlDbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMigrationPropertiesSqlDb)(nil)).Elem()
}

func (i *databaseMigrationPropertiesSqlDbPtrType) ToDatabaseMigrationPropertiesSqlDbPtrOutput() DatabaseMigrationPropertiesSqlDbPtrOutput {
	return i.ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(context.Background())
}

func (i *databaseMigrationPropertiesSqlDbPtrType) ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(ctx context.Context) DatabaseMigrationPropertiesSqlDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMigrationPropertiesSqlDbPtrOutput)
}

// Database Migration Resource properties for SQL database.
type DatabaseMigrationPropertiesSqlDbOutput struct{ *pulumi.OutputState }

func (DatabaseMigrationPropertiesSqlDbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMigrationPropertiesSqlDb)(nil)).Elem()
}

func (o DatabaseMigrationPropertiesSqlDbOutput) ToDatabaseMigrationPropertiesSqlDbOutput() DatabaseMigrationPropertiesSqlDbOutput {
	return o
}

func (o DatabaseMigrationPropertiesSqlDbOutput) ToDatabaseMigrationPropertiesSqlDbOutputWithContext(ctx context.Context) DatabaseMigrationPropertiesSqlDbOutput {
	return o
}

func (o DatabaseMigrationPropertiesSqlDbOutput) ToDatabaseMigrationPropertiesSqlDbPtrOutput() DatabaseMigrationPropertiesSqlDbPtrOutput {
	return o.ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(context.Background())
}

func (o DatabaseMigrationPropertiesSqlDbOutput) ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(ctx context.Context) DatabaseMigrationPropertiesSqlDbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseMigrationPropertiesSqlDb) *DatabaseMigrationPropertiesSqlDb {
		return &v
	}).(DatabaseMigrationPropertiesSqlDbPtrOutput)
}

// Expected value is 'SqlDb'.
func (o DatabaseMigrationPropertiesSqlDbOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) string { return v.Kind }).(pulumi.StringOutput)
}

// ID tracking current migration operation.
func (o DatabaseMigrationPropertiesSqlDbOutput) MigrationOperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *string { return v.MigrationOperationId }).(pulumi.StringPtrOutput)
}

// Resource Id of the Migration Service.
func (o DatabaseMigrationPropertiesSqlDbOutput) MigrationService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *string { return v.MigrationService }).(pulumi.StringPtrOutput)
}

// Error message for migration provisioning failure, if any.
func (o DatabaseMigrationPropertiesSqlDbOutput) ProvisioningError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *string { return v.ProvisioningError }).(pulumi.StringPtrOutput)
}

// Resource Id of the target resource (SQL VM or SQL Managed Instance).
func (o DatabaseMigrationPropertiesSqlDbOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// Name of the source database.
func (o DatabaseMigrationPropertiesSqlDbOutput) SourceDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *string { return v.SourceDatabaseName }).(pulumi.StringPtrOutput)
}

// Source SQL Server connection details.
func (o DatabaseMigrationPropertiesSqlDbOutput) SourceSqlConnection() SqlConnectionInformationPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *SqlConnectionInformation { return v.SourceSqlConnection }).(SqlConnectionInformationPtrOutput)
}

// List of tables to copy.
func (o DatabaseMigrationPropertiesSqlDbOutput) TableList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) []string { return v.TableList }).(pulumi.StringArrayOutput)
}

// Database collation to be used for the target database.
func (o DatabaseMigrationPropertiesSqlDbOutput) TargetDatabaseCollation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *string { return v.TargetDatabaseCollation }).(pulumi.StringPtrOutput)
}

// Target SQL DB connection details.
func (o DatabaseMigrationPropertiesSqlDbOutput) TargetSqlConnection() SqlConnectionInformationPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDb) *SqlConnectionInformation { return v.TargetSqlConnection }).(SqlConnectionInformationPtrOutput)
}

type DatabaseMigrationPropertiesSqlDbPtrOutput struct{ *pulumi.OutputState }

func (DatabaseMigrationPropertiesSqlDbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMigrationPropertiesSqlDb)(nil)).Elem()
}

func (o DatabaseMigrationPropertiesSqlDbPtrOutput) ToDatabaseMigrationPropertiesSqlDbPtrOutput() DatabaseMigrationPropertiesSqlDbPtrOutput {
	return o
}

func (o DatabaseMigrationPropertiesSqlDbPtrOutput) ToDatabaseMigrationPropertiesSqlDbPtrOutputWithContext(ctx context.Context) DatabaseMigrationPropertiesSqlDbPtrOutput {
	return o
}

func (o DatabaseMigrationPropertiesSqlDbPtrOutput) Elem() DatabaseMigrationPropertiesSqlDbOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) DatabaseMigrationPropertiesSqlDb {
		if v != nil {
			return *v
		}
		var ret DatabaseMigrationPropertiesSqlDb
		return ret
	}).(DatabaseMigrationPropertiesSqlDbOutput)
}

// Expected value is 'SqlDb'.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// ID tracking current migration operation.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) MigrationOperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *string {
		if v == nil {
			return nil
		}
		return v.MigrationOperationId
	}).(pulumi.StringPtrOutput)
}

// Resource Id of the Migration Service.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) MigrationService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *string {
		if v == nil {
			return nil
		}
		return v.MigrationService
	}).(pulumi.StringPtrOutput)
}

// Error message for migration provisioning failure, if any.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) ProvisioningError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningError
	}).(pulumi.StringPtrOutput)
}

// Resource Id of the target resource (SQL VM or SQL Managed Instance).
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// Name of the source database.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) SourceDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *string {
		if v == nil {
			return nil
		}
		return v.SourceDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Source SQL Server connection details.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) SourceSqlConnection() SqlConnectionInformationPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *SqlConnectionInformation {
		if v == nil {
			return nil
		}
		return v.SourceSqlConnection
	}).(SqlConnectionInformationPtrOutput)
}

// List of tables to copy.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) TableList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) []string {
		if v == nil {
			return nil
		}
		return v.TableList
	}).(pulumi.StringArrayOutput)
}

// Database collation to be used for the target database.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) TargetDatabaseCollation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *string {
		if v == nil {
			return nil
		}
		return v.TargetDatabaseCollation
	}).(pulumi.StringPtrOutput)
}

// Target SQL DB connection details.
func (o DatabaseMigrationPropertiesSqlDbPtrOutput) TargetSqlConnection() SqlConnectionInformationPtrOutput {
	return o.ApplyT(func(v *DatabaseMigrationPropertiesSqlDb) *SqlConnectionInformation {
		if v == nil {
			return nil
		}
		return v.TargetSqlConnection
	}).(SqlConnectionInformationPtrOutput)
}

// Database Migration Resource properties for SQL database.
type DatabaseMigrationPropertiesSqlDbResponse struct {
	// Database migration end time.
	EndedOn string `pulumi:"endedOn"`
	// Expected value is 'SqlDb'.
	Kind string `pulumi:"kind"`
	// Error details in case of migration failure.
	MigrationFailureError ErrorInfoResponse `pulumi:"migrationFailureError"`
	// ID tracking current migration operation.
	MigrationOperationId *string `pulumi:"migrationOperationId"`
	// Resource Id of the Migration Service.
	MigrationService *string `pulumi:"migrationService"`
	// Migration status.
	MigrationStatus string `pulumi:"migrationStatus"`
	// Detailed migration status. Not included by default.
	MigrationStatusDetails SqlDbMigrationStatusDetailsResponse `pulumi:"migrationStatusDetails"`
	// Offline configuration.
	OfflineConfiguration SqlDbOfflineConfigurationResponse `pulumi:"offlineConfiguration"`
	// Error message for migration provisioning failure, if any.
	ProvisioningError *string `pulumi:"provisioningError"`
	// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource Id of the target resource (SQL VM or SQL Managed Instance).
	Scope *string `pulumi:"scope"`
	// Name of the source database.
	SourceDatabaseName *string `pulumi:"sourceDatabaseName"`
	// Name of the source sql server.
	SourceServerName string `pulumi:"sourceServerName"`
	// Source SQL Server connection details.
	SourceSqlConnection *SqlConnectionInformationResponse `pulumi:"sourceSqlConnection"`
	// Database migration start time.
	StartedOn string `pulumi:"startedOn"`
	// List of tables to copy.
	TableList []string `pulumi:"tableList"`
	// Database collation to be used for the target database.
	TargetDatabaseCollation *string `pulumi:"targetDatabaseCollation"`
	// Target SQL DB connection details.
	TargetSqlConnection *SqlConnectionInformationResponse `pulumi:"targetSqlConnection"`
}

// Database Migration Resource properties for SQL database.
type DatabaseMigrationPropertiesSqlDbResponseOutput struct{ *pulumi.OutputState }

func (DatabaseMigrationPropertiesSqlDbResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMigrationPropertiesSqlDbResponse)(nil)).Elem()
}

func (o DatabaseMigrationPropertiesSqlDbResponseOutput) ToDatabaseMigrationPropertiesSqlDbResponseOutput() DatabaseMigrationPropertiesSqlDbResponseOutput {
	return o
}

func (o DatabaseMigrationPropertiesSqlDbResponseOutput) ToDatabaseMigrationPropertiesSqlDbResponseOutputWithContext(ctx context.Context) DatabaseMigrationPropertiesSqlDbResponseOutput {
	return o
}

// Database migration end time.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Expected value is 'SqlDb'.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Error details in case of migration failure.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) MigrationFailureError() ErrorInfoResponseOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) ErrorInfoResponse { return v.MigrationFailureError }).(ErrorInfoResponseOutput)
}

// ID tracking current migration operation.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) MigrationOperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *string { return v.MigrationOperationId }).(pulumi.StringPtrOutput)
}

// Resource Id of the Migration Service.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) MigrationService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *string { return v.MigrationService }).(pulumi.StringPtrOutput)
}

// Migration status.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) MigrationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) string { return v.MigrationStatus }).(pulumi.StringOutput)
}

// Detailed migration status. Not included by default.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) MigrationStatusDetails() SqlDbMigrationStatusDetailsResponseOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) SqlDbMigrationStatusDetailsResponse {
		return v.MigrationStatusDetails
	}).(SqlDbMigrationStatusDetailsResponseOutput)
}

// Offline configuration.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) OfflineConfiguration() SqlDbOfflineConfigurationResponseOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) SqlDbOfflineConfigurationResponse {
		return v.OfflineConfiguration
	}).(SqlDbOfflineConfigurationResponseOutput)
}

// Error message for migration provisioning failure, if any.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) ProvisioningError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *string { return v.ProvisioningError }).(pulumi.StringPtrOutput)
}

// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource Id of the target resource (SQL VM or SQL Managed Instance).
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// Name of the source database.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) SourceDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *string { return v.SourceDatabaseName }).(pulumi.StringPtrOutput)
}

// Name of the source sql server.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) SourceServerName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) string { return v.SourceServerName }).(pulumi.StringOutput)
}

// Source SQL Server connection details.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) SourceSqlConnection() SqlConnectionInformationResponsePtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *SqlConnectionInformationResponse {
		return v.SourceSqlConnection
	}).(SqlConnectionInformationResponsePtrOutput)
}

// Database migration start time.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// List of tables to copy.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) TableList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) []string { return v.TableList }).(pulumi.StringArrayOutput)
}

// Database collation to be used for the target database.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) TargetDatabaseCollation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *string { return v.TargetDatabaseCollation }).(pulumi.StringPtrOutput)
}

// Target SQL DB connection details.
func (o DatabaseMigrationPropertiesSqlDbResponseOutput) TargetSqlConnection() SqlConnectionInformationResponsePtrOutput {
	return o.ApplyT(func(v DatabaseMigrationPropertiesSqlDbResponse) *SqlConnectionInformationResponse {
		return v.TargetSqlConnection
	}).(SqlConnectionInformationResponsePtrOutput)
}

// Summary of database results in the migration
type DatabaseSummaryResultResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	Name string `pulumi:"name"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

// Summary of database results in the migration
type DatabaseSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSummaryResultResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultResponseOutput) ToDatabaseSummaryResultResponseOutput() DatabaseSummaryResultResponseOutput {
	return o
}

func (o DatabaseSummaryResultResponseOutput) ToDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseOutput {
	return o
}

// Migration end time
func (o DatabaseSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o DatabaseSummaryResultResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o DatabaseSummaryResultResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o DatabaseSummaryResultResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o DatabaseSummaryResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o DatabaseSummaryResultResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o DatabaseSummaryResultResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Migration start time
func (o DatabaseSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o DatabaseSummaryResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o DatabaseSummaryResultResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSummaryResultResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type DatabaseSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (DatabaseSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseSummaryResultResponse)(nil)).Elem()
}

func (o DatabaseSummaryResultResponseMapOutput) ToDatabaseSummaryResultResponseMapOutput() DatabaseSummaryResultResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultResponseMapOutput) ToDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) DatabaseSummaryResultResponseMapOutput {
	return o
}

func (o DatabaseSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) DatabaseSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseSummaryResultResponse {
		return vs[0].(map[string]DatabaseSummaryResultResponse)[vs[1].(string)]
	}).(DatabaseSummaryResultResponseOutput)
}

// Table properties
type DatabaseTableResponse struct {
	// Indicates whether table is empty or not
	HasRows bool `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name string `pulumi:"name"`
}

// Table properties
type DatabaseTableResponseOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutput() DatabaseTableResponseOutput {
	return o
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutputWithContext(ctx context.Context) DatabaseTableResponseOutput {
	return o
}

// Indicates whether table is empty or not
func (o DatabaseTableResponseOutput) HasRows() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseTableResponse) bool { return v.HasRows }).(pulumi.BoolOutput)
}

// Schema-qualified name of the table
func (o DatabaseTableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTableResponse) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseTableResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutputWithContext(ctx context.Context) DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) Index(i pulumi.IntInput) DatabaseTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseTableResponse {
		return vs[0].([]DatabaseTableResponse)[vs[1].(int)]
	}).(DatabaseTableResponseOutput)
}

// Error details
type ErrorInfoResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message.
	Message string `pulumi:"message"`
}

// Error details
type ErrorInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorInfoResponse)(nil)).Elem()
}

func (o ErrorInfoResponseOutput) ToErrorInfoResponseOutput() ErrorInfoResponseOutput {
	return o
}

func (o ErrorInfoResponseOutput) ToErrorInfoResponseOutputWithContext(ctx context.Context) ErrorInfoResponseOutput {
	return o
}

// Error code.
func (o ErrorInfoResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorInfoResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Error message.
func (o ErrorInfoResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorInfoResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Description about the errors happen while performing migration validation
type ExecutionStatisticsResponse struct {
	// CPU Time in millisecond(s) for the query execution
	CpuTimeMs *float64 `pulumi:"cpuTimeMs"`
	// Time taken in millisecond(s) for executing the query
	ElapsedTimeMs *float64 `pulumi:"elapsedTimeMs"`
	// No. of query executions
	ExecutionCount *float64 `pulumi:"executionCount"`
	// Indicates whether the query resulted in an error
	HasErrors *bool `pulumi:"hasErrors"`
	// List of sql Errors
	SqlErrors []string `pulumi:"sqlErrors"`
	// Dictionary of sql query execution wait types and the respective statistics
	WaitStats map[string]WaitStatisticsResponse `pulumi:"waitStats"`
}

// Description about the errors happen while performing migration validation
type ExecutionStatisticsResponseOutput struct{ *pulumi.OutputState }

func (ExecutionStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStatisticsResponse)(nil)).Elem()
}

func (o ExecutionStatisticsResponseOutput) ToExecutionStatisticsResponseOutput() ExecutionStatisticsResponseOutput {
	return o
}

func (o ExecutionStatisticsResponseOutput) ToExecutionStatisticsResponseOutputWithContext(ctx context.Context) ExecutionStatisticsResponseOutput {
	return o
}

// CPU Time in millisecond(s) for the query execution
func (o ExecutionStatisticsResponseOutput) CpuTimeMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExecutionStatisticsResponse) *float64 { return v.CpuTimeMs }).(pulumi.Float64PtrOutput)
}

// Time taken in millisecond(s) for executing the query
func (o ExecutionStatisticsResponseOutput) ElapsedTimeMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExecutionStatisticsResponse) *float64 { return v.ElapsedTimeMs }).(pulumi.Float64PtrOutput)
}

// No. of query executions
func (o ExecutionStatisticsResponseOutput) ExecutionCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExecutionStatisticsResponse) *float64 { return v.ExecutionCount }).(pulumi.Float64PtrOutput)
}

// Indicates whether the query resulted in an error
func (o ExecutionStatisticsResponseOutput) HasErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExecutionStatisticsResponse) *bool { return v.HasErrors }).(pulumi.BoolPtrOutput)
}

// List of sql Errors
func (o ExecutionStatisticsResponseOutput) SqlErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecutionStatisticsResponse) []string { return v.SqlErrors }).(pulumi.StringArrayOutput)
}

// Dictionary of sql query execution wait types and the respective statistics
func (o ExecutionStatisticsResponseOutput) WaitStats() WaitStatisticsResponseMapOutput {
	return o.ApplyT(func(v ExecutionStatisticsResponse) map[string]WaitStatisticsResponse { return v.WaitStats }).(WaitStatisticsResponseMapOutput)
}

type ExecutionStatisticsResponsePtrOutput struct{ *pulumi.OutputState }

func (ExecutionStatisticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionStatisticsResponse)(nil)).Elem()
}

func (o ExecutionStatisticsResponsePtrOutput) ToExecutionStatisticsResponsePtrOutput() ExecutionStatisticsResponsePtrOutput {
	return o
}

func (o ExecutionStatisticsResponsePtrOutput) ToExecutionStatisticsResponsePtrOutputWithContext(ctx context.Context) ExecutionStatisticsResponsePtrOutput {
	return o
}

func (o ExecutionStatisticsResponsePtrOutput) Elem() ExecutionStatisticsResponseOutput {
	return o.ApplyT(func(v *ExecutionStatisticsResponse) ExecutionStatisticsResponse {
		if v != nil {
			return *v
		}
		var ret ExecutionStatisticsResponse
		return ret
	}).(ExecutionStatisticsResponseOutput)
}

// CPU Time in millisecond(s) for the query execution
func (o ExecutionStatisticsResponsePtrOutput) CpuTimeMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExecutionStatisticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.CpuTimeMs
	}).(pulumi.Float64PtrOutput)
}

// Time taken in millisecond(s) for executing the query
func (o ExecutionStatisticsResponsePtrOutput) ElapsedTimeMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExecutionStatisticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ElapsedTimeMs
	}).(pulumi.Float64PtrOutput)
}

// No. of query executions
func (o ExecutionStatisticsResponsePtrOutput) ExecutionCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExecutionStatisticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ExecutionCount
	}).(pulumi.Float64PtrOutput)
}

// Indicates whether the query resulted in an error
func (o ExecutionStatisticsResponsePtrOutput) HasErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExecutionStatisticsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.HasErrors
	}).(pulumi.BoolPtrOutput)
}

// List of sql Errors
func (o ExecutionStatisticsResponsePtrOutput) SqlErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExecutionStatisticsResponse) []string {
		if v == nil {
			return nil
		}
		return v.SqlErrors
	}).(pulumi.StringArrayOutput)
}

// Dictionary of sql query execution wait types and the respective statistics
func (o ExecutionStatisticsResponsePtrOutput) WaitStats() WaitStatisticsResponseMapOutput {
	return o.ApplyT(func(v *ExecutionStatisticsResponse) map[string]WaitStatisticsResponse {
		if v == nil {
			return nil
		}
		return v.WaitStats
	}).(WaitStatisticsResponseMapOutput)
}

// File share information with Path, Username, and Password.
type FileShare struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareInput is an input type that accepts FileShareArgs and FileShareOutput values.
// You can construct a concrete instance of `FileShareInput` via:
//
//	FileShareArgs{...}
type FileShareInput interface {
	pulumi.Input

	ToFileShareOutput() FileShareOutput
	ToFileShareOutputWithContext(context.Context) FileShareOutput
}

// File share information with Path, Username, and Password.
type FileShareArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (i FileShareArgs) ToFileShareOutput() FileShareOutput {
	return i.ToFileShareOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput)
}

func (i FileShareArgs) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput).ToFileSharePtrOutputWithContext(ctx)
}

// FileSharePtrInput is an input type that accepts FileShareArgs, FileSharePtr and FileSharePtrOutput values.
// You can construct a concrete instance of `FileSharePtrInput` via:
//
//	        FileShareArgs{...}
//
//	or:
//
//	        nil
type FileSharePtrInput interface {
	pulumi.Input

	ToFileSharePtrOutput() FileSharePtrOutput
	ToFileSharePtrOutputWithContext(context.Context) FileSharePtrOutput
}

type fileSharePtrType FileShareArgs

func FileSharePtr(v *FileShareArgs) FileSharePtrInput {
	return (*fileSharePtrType)(v)
}

func (*fileSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (i *fileSharePtrType) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i *fileSharePtrType) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSharePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareOutput struct{ *pulumi.OutputState }

func (FileShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (o FileShareOutput) ToFileShareOutput() FileShareOutput {
	return o
}

func (o FileShareOutput) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return o
}

func (o FileShareOutput) ToFileSharePtrOutput() FileSharePtrOutput {
	return o.ToFileSharePtrOutputWithContext(context.Background())
}

func (o FileShareOutput) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileShare) *FileShare {
		return &v
	}).(FileSharePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShare) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShare) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShare) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileSharePtrOutput struct{ *pulumi.OutputState }

func (FileSharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (o FileSharePtrOutput) ToFileSharePtrOutput() FileSharePtrOutput {
	return o
}

func (o FileSharePtrOutput) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return o
}

func (o FileSharePtrOutput) Elem() FileShareOutput {
	return o.ApplyT(func(v *FileShare) FileShare {
		if v != nil {
			return *v
		}
		var ret FileShare
		return ret
	}).(FileShareOutput)
}

// Password credential used to connect to the share location.
func (o FileSharePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileSharePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileSharePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShare) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareResponse struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// File share information with Path, Username, and Password.
type FileShareResponseOutput struct{ *pulumi.OutputState }

func (FileShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareResponse)(nil)).Elem()
}

func (o FileShareResponseOutput) ToFileShareResponseOutput() FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponseOutputWithContext(ctx context.Context) FileShareResponseOutput {
	return o
}

// Password credential used to connect to the share location.
func (o FileShareResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareResponse) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileShareResponsePtrOutput struct{ *pulumi.OutputState }

func (FileShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareResponse)(nil)).Elem()
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) Elem() FileShareResponseOutput {
	return o.ApplyT(func(v *FileShareResponse) FileShareResponse {
		if v != nil {
			return *v
		}
		var ret FileShareResponse
		return ret
	}).(FileShareResponseOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileShareResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInput struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShare `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInput `pulumi:"selectedCertificates"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskInput
func (val *GetTdeCertificatesSqlTaskInput) Defaults() *GetTdeCertificatesSqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// GetTdeCertificatesSqlTaskInputInput is an input type that accepts GetTdeCertificatesSqlTaskInputArgs and GetTdeCertificatesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputInput` via:
//
//	GetTdeCertificatesSqlTaskInputArgs{...}
type GetTdeCertificatesSqlTaskInputInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput
	ToGetTdeCertificatesSqlTaskInputOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputOutput
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputArgs struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareInput `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates SelectedCertificateInputArrayInput `pulumi:"selectedCertificates"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskInputArgs
func (val *GetTdeCertificatesSqlTaskInputArgs) Defaults() *GetTdeCertificatesSqlTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetTdeCertificatesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput {
	return i.ToGetTdeCertificatesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputOutput)
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputOutput).ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetTdeCertificatesSqlTaskInputPtrInput is an input type that accepts GetTdeCertificatesSqlTaskInputArgs, GetTdeCertificatesSqlTaskInputPtr and GetTdeCertificatesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputPtrInput` via:
//
//	        GetTdeCertificatesSqlTaskInputArgs{...}
//
//	or:
//
//	        nil
type GetTdeCertificatesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput
	ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputPtrOutput
}

type getTdeCertificatesSqlTaskInputPtrType GetTdeCertificatesSqlTaskInputArgs

func GetTdeCertificatesSqlTaskInputPtr(v *GetTdeCertificatesSqlTaskInputArgs) GetTdeCertificatesSqlTaskInputPtrInput {
	return (*getTdeCertificatesSqlTaskInputPtrType)(v)
}

func (*getTdeCertificatesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (i *getTdeCertificatesSqlTaskInputPtrType) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getTdeCertificatesSqlTaskInputPtrType) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return o.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetTdeCertificatesSqlTaskInputOutput) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTdeCertificatesSqlTaskInput) *GetTdeCertificatesSqlTaskInput {
		return &v
	}).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputOutput) BackupFileShare() FileShareOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInput) FileShare { return v.BackupFileShare }).(FileShareOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputOutput) ConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInput) SqlConnectionInfo { return v.ConnectionInfo }).(SqlConnectionInfoOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputOutput) SelectedCertificates() SelectedCertificateInputArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInput) []SelectedCertificateInput { return v.SelectedCertificates }).(SelectedCertificateInputArrayOutput)
}

type GetTdeCertificatesSqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputPtrOutput) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputPtrOutput) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputPtrOutput) Elem() GetTdeCertificatesSqlTaskInputOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) GetTdeCertificatesSqlTaskInput {
		if v != nil {
			return *v
		}
		var ret GetTdeCertificatesSqlTaskInput
		return ret
	}).(GetTdeCertificatesSqlTaskInputOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return &v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputPtrOutput) ConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputPtrOutput) SelectedCertificates() SelectedCertificateInputArrayOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInput) []SelectedCertificateInput {
		if v == nil {
			return nil
		}
		return v.SelectedCertificates
	}).(SelectedCertificateInputArrayOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponse struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareResponse `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInputResponse `pulumi:"selectedCertificates"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskInputResponse
func (val *GetTdeCertificatesSqlTaskInputResponse) Defaults() *GetTdeCertificatesSqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponseOutput() GetTdeCertificatesSqlTaskInputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponseOutput {
	return o
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputResponseOutput) BackupFileShare() FileShareResponseOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) FileShareResponse { return v.BackupFileShare }).(FileShareResponseOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputResponseOutput) SelectedCertificates() SelectedCertificateInputResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) []SelectedCertificateInputResponse {
		return v.SelectedCertificates
	}).(SelectedCertificateInputResponseArrayOutput)
}

type GetTdeCertificatesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) Elem() GetTdeCertificatesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) GetTdeCertificatesSqlTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret GetTdeCertificatesSqlTaskInputResponse
		return ret
	}).(GetTdeCertificatesSqlTaskInputResponseOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) SelectedCertificates() SelectedCertificateInputResponseArrayOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) []SelectedCertificateInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedCertificates
	}).(SelectedCertificateInputResponseArrayOutput)
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponse struct {
	// Mapping from certificate name to base 64 encoded format.
	Base64EncodedCertificates map[string][]string `pulumi:"base64EncodedCertificates"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ToGetTdeCertificatesSqlTaskOutputResponseOutput() GetTdeCertificatesSqlTaskOutputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ToGetTdeCertificatesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from certificate name to base 64 encoded format.
func (o GetTdeCertificatesSqlTaskOutputResponseOutput) Base64EncodedCertificates() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskOutputResponse) map[string][]string {
		return v.Base64EncodedCertificates
	}).(pulumi.StringArrayMapOutput)
}

// Validation errors
func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetTdeCertificatesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutput() GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetTdeCertificatesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTdeCertificatesSqlTaskOutputResponse {
		return vs[0].([]GetTdeCertificatesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetTdeCertificatesSqlTaskOutputResponseOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetTDECertificates.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskProperties
func (val *GetTdeCertificatesSqlTaskProperties) Defaults() *GetTdeCertificatesSqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// GetTdeCertificatesSqlTaskPropertiesInput is an input type that accepts GetTdeCertificatesSqlTaskPropertiesArgs and GetTdeCertificatesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskPropertiesInput` via:
//
//	GetTdeCertificatesSqlTaskPropertiesArgs{...}
type GetTdeCertificatesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput
	ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(context.Context) GetTdeCertificatesSqlTaskPropertiesOutput
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetTdeCertificatesSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetTDECertificates.Sql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskPropertiesArgs
func (val *GetTdeCertificatesSqlTaskPropertiesArgs) Defaults() *GetTdeCertificatesSqlTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetTdeCertificatesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskProperties)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput {
	return i.ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskPropertiesOutput)
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesPtrOutput() GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskPropertiesOutput).ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(ctx)
}

// GetTdeCertificatesSqlTaskPropertiesPtrInput is an input type that accepts GetTdeCertificatesSqlTaskPropertiesArgs, GetTdeCertificatesSqlTaskPropertiesPtr and GetTdeCertificatesSqlTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskPropertiesPtrInput` via:
//
//	        GetTdeCertificatesSqlTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type GetTdeCertificatesSqlTaskPropertiesPtrInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskPropertiesPtrOutput() GetTdeCertificatesSqlTaskPropertiesPtrOutput
	ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(context.Context) GetTdeCertificatesSqlTaskPropertiesPtrOutput
}

type getTdeCertificatesSqlTaskPropertiesPtrType GetTdeCertificatesSqlTaskPropertiesArgs

func GetTdeCertificatesSqlTaskPropertiesPtr(v *GetTdeCertificatesSqlTaskPropertiesArgs) GetTdeCertificatesSqlTaskPropertiesPtrInput {
	return (*getTdeCertificatesSqlTaskPropertiesPtrType)(v)
}

func (*getTdeCertificatesSqlTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskProperties)(nil)).Elem()
}

func (i *getTdeCertificatesSqlTaskPropertiesPtrType) ToGetTdeCertificatesSqlTaskPropertiesPtrOutput() GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *getTdeCertificatesSqlTaskPropertiesPtrType) ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskPropertiesPtrOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskProperties)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskPropertiesOutput) ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesOutput) ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesOutput) ToGetTdeCertificatesSqlTaskPropertiesPtrOutput() GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return o.ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o GetTdeCertificatesSqlTaskPropertiesOutput) ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetTdeCertificatesSqlTaskProperties) *GetTdeCertificatesSqlTaskProperties {
		return &v
	}).(GetTdeCertificatesSqlTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetTdeCertificatesSqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetTdeCertificatesSqlTaskPropertiesOutput) Input() GetTdeCertificatesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskProperties) *GetTdeCertificatesSqlTaskInput { return v.Input }).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetTDECertificates.Sql'.
func (o GetTdeCertificatesSqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type GetTdeCertificatesSqlTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskProperties)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskPropertiesPtrOutput) ToGetTdeCertificatesSqlTaskPropertiesPtrOutput() GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesPtrOutput) ToGetTdeCertificatesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesPtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesPtrOutput) Elem() GetTdeCertificatesSqlTaskPropertiesOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskProperties) GetTdeCertificatesSqlTaskProperties {
		if v != nil {
			return *v
		}
		var ret GetTdeCertificatesSqlTaskProperties
		return ret
	}).(GetTdeCertificatesSqlTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetTdeCertificatesSqlTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o GetTdeCertificatesSqlTaskPropertiesPtrOutput) Input() GetTdeCertificatesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskProperties) *GetTdeCertificatesSqlTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetTDECertificates.Sql'.
func (o GetTdeCertificatesSqlTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetTdeCertificatesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetTDECertificates.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetTdeCertificatesSqlTaskPropertiesResponse
func (val *GetTdeCertificatesSqlTaskPropertiesResponse) Defaults() *GetTdeCertificatesSqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ToGetTdeCertificatesSqlTaskPropertiesResponseOutput() GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ToGetTdeCertificatesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Input() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) *GetTdeCertificatesSqlTaskInputResponse {
		return v.Input
	}).(GetTdeCertificatesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Output() GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []GetTdeCertificatesSqlTaskOutputResponse {
		return v.Output
	}).(GetTdeCertificatesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'GetTDECertificates.Sql'.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo MySqlConnectionInfo `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskInput
func (val *GetUserTablesMySqlTaskInput) Defaults() *GetUserTablesMySqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// GetUserTablesMySqlTaskInputInput is an input type that accepts GetUserTablesMySqlTaskInputArgs and GetUserTablesMySqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesMySqlTaskInputInput` via:
//
//	GetUserTablesMySqlTaskInputArgs{...}
type GetUserTablesMySqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesMySqlTaskInputOutput() GetUserTablesMySqlTaskInputOutput
	ToGetUserTablesMySqlTaskInputOutputWithContext(context.Context) GetUserTablesMySqlTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskInputArgs struct {
	// Connection information for SQL Server
	ConnectionInfo MySqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskInputArgs
func (val *GetUserTablesMySqlTaskInputArgs) Defaults() *GetUserTablesMySqlTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesMySqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesMySqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesMySqlTaskInputArgs) ToGetUserTablesMySqlTaskInputOutput() GetUserTablesMySqlTaskInputOutput {
	return i.ToGetUserTablesMySqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesMySqlTaskInputArgs) ToGetUserTablesMySqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesMySqlTaskInputOutput)
}

func (i GetUserTablesMySqlTaskInputArgs) ToGetUserTablesMySqlTaskInputPtrOutput() GetUserTablesMySqlTaskInputPtrOutput {
	return i.ToGetUserTablesMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesMySqlTaskInputArgs) ToGetUserTablesMySqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesMySqlTaskInputOutput).ToGetUserTablesMySqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesMySqlTaskInputPtrInput is an input type that accepts GetUserTablesMySqlTaskInputArgs, GetUserTablesMySqlTaskInputPtr and GetUserTablesMySqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesMySqlTaskInputPtrInput` via:
//
//	        GetUserTablesMySqlTaskInputArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesMySqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesMySqlTaskInputPtrOutput() GetUserTablesMySqlTaskInputPtrOutput
	ToGetUserTablesMySqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesMySqlTaskInputPtrOutput
}

type getUserTablesMySqlTaskInputPtrType GetUserTablesMySqlTaskInputArgs

func GetUserTablesMySqlTaskInputPtr(v *GetUserTablesMySqlTaskInputArgs) GetUserTablesMySqlTaskInputPtrInput {
	return (*getUserTablesMySqlTaskInputPtrType)(v)
}

func (*getUserTablesMySqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesMySqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesMySqlTaskInputPtrType) ToGetUserTablesMySqlTaskInputPtrOutput() GetUserTablesMySqlTaskInputPtrOutput {
	return i.ToGetUserTablesMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesMySqlTaskInputPtrType) ToGetUserTablesMySqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesMySqlTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesMySqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskInputOutput) ToGetUserTablesMySqlTaskInputOutput() GetUserTablesMySqlTaskInputOutput {
	return o
}

func (o GetUserTablesMySqlTaskInputOutput) ToGetUserTablesMySqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputOutput {
	return o
}

func (o GetUserTablesMySqlTaskInputOutput) ToGetUserTablesMySqlTaskInputPtrOutput() GetUserTablesMySqlTaskInputPtrOutput {
	return o.ToGetUserTablesMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesMySqlTaskInputOutput) ToGetUserTablesMySqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesMySqlTaskInput) *GetUserTablesMySqlTaskInput {
		return &v
	}).(GetUserTablesMySqlTaskInputPtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesMySqlTaskInputOutput) ConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskInput) MySqlConnectionInfo { return v.ConnectionInfo }).(MySqlConnectionInfoOutput)
}

// List of database names to collect tables for
func (o GetUserTablesMySqlTaskInputOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskInput) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesMySqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesMySqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskInputPtrOutput) ToGetUserTablesMySqlTaskInputPtrOutput() GetUserTablesMySqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesMySqlTaskInputPtrOutput) ToGetUserTablesMySqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesMySqlTaskInputPtrOutput) Elem() GetUserTablesMySqlTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskInput) GetUserTablesMySqlTaskInput {
		if v != nil {
			return *v
		}
		var ret GetUserTablesMySqlTaskInput
		return ret
	}).(GetUserTablesMySqlTaskInputOutput)
}

// Connection information for SQL Server
func (o GetUserTablesMySqlTaskInputPtrOutput) ConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesMySqlTaskInputPtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo MySqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskInputResponse
func (val *GetUserTablesMySqlTaskInputResponse) Defaults() *GetUserTablesMySqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesMySqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskInputResponseOutput) ToGetUserTablesMySqlTaskInputResponseOutput() GetUserTablesMySqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesMySqlTaskInputResponseOutput) ToGetUserTablesMySqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputResponseOutput {
	return o
}

// Connection information for SQL Server
func (o GetUserTablesMySqlTaskInputResponseOutput) ConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskInputResponse) MySqlConnectionInfoResponse { return v.ConnectionInfo }).(MySqlConnectionInfoResponseOutput)
}

// List of database names to collect tables for
func (o GetUserTablesMySqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesMySqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesMySqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskInputResponsePtrOutput) ToGetUserTablesMySqlTaskInputResponsePtrOutput() GetUserTablesMySqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesMySqlTaskInputResponsePtrOutput) ToGetUserTablesMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesMySqlTaskInputResponsePtrOutput) Elem() GetUserTablesMySqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskInputResponse) GetUserTablesMySqlTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret GetUserTablesMySqlTaskInputResponse
		return ret
	}).(GetUserTablesMySqlTaskInputResponseOutput)
}

// Connection information for SQL Server
func (o GetUserTablesMySqlTaskInputResponsePtrOutput) ConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesMySqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables map[string][]DatabaseTableResponse `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesMySqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskOutputResponseOutput) ToGetUserTablesMySqlTaskOutputResponseOutput() GetUserTablesMySqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesMySqlTaskOutputResponseOutput) ToGetUserTablesMySqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of tables
func (o GetUserTablesMySqlTaskOutputResponseOutput) DatabasesToTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Result identifier
func (o GetUserTablesMySqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesMySqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesMySqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesMySqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskOutputResponseArrayOutput) ToGetUserTablesMySqlTaskOutputResponseArrayOutput() GetUserTablesMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesMySqlTaskOutputResponseArrayOutput) ToGetUserTablesMySqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesMySqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesMySqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesMySqlTaskOutputResponse {
		return vs[0].([]GetUserTablesMySqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesMySqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesMySqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskProperties
func (val *GetUserTablesMySqlTaskProperties) Defaults() *GetUserTablesMySqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// GetUserTablesMySqlTaskPropertiesInput is an input type that accepts GetUserTablesMySqlTaskPropertiesArgs and GetUserTablesMySqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesMySqlTaskPropertiesInput` via:
//
//	GetUserTablesMySqlTaskPropertiesArgs{...}
type GetUserTablesMySqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesMySqlTaskPropertiesOutput() GetUserTablesMySqlTaskPropertiesOutput
	ToGetUserTablesMySqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesMySqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesMySqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesMySql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskPropertiesArgs
func (val *GetUserTablesMySqlTaskPropertiesArgs) Defaults() *GetUserTablesMySqlTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesMySqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesMySqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesMySqlTaskPropertiesArgs) ToGetUserTablesMySqlTaskPropertiesOutput() GetUserTablesMySqlTaskPropertiesOutput {
	return i.ToGetUserTablesMySqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesMySqlTaskPropertiesArgs) ToGetUserTablesMySqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesMySqlTaskPropertiesOutput)
}

func (i GetUserTablesMySqlTaskPropertiesArgs) ToGetUserTablesMySqlTaskPropertiesPtrOutput() GetUserTablesMySqlTaskPropertiesPtrOutput {
	return i.ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i GetUserTablesMySqlTaskPropertiesArgs) ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesMySqlTaskPropertiesOutput).ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(ctx)
}

// GetUserTablesMySqlTaskPropertiesPtrInput is an input type that accepts GetUserTablesMySqlTaskPropertiesArgs, GetUserTablesMySqlTaskPropertiesPtr and GetUserTablesMySqlTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `GetUserTablesMySqlTaskPropertiesPtrInput` via:
//
//	        GetUserTablesMySqlTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesMySqlTaskPropertiesPtrInput interface {
	pulumi.Input

	ToGetUserTablesMySqlTaskPropertiesPtrOutput() GetUserTablesMySqlTaskPropertiesPtrOutput
	ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(context.Context) GetUserTablesMySqlTaskPropertiesPtrOutput
}

type getUserTablesMySqlTaskPropertiesPtrType GetUserTablesMySqlTaskPropertiesArgs

func GetUserTablesMySqlTaskPropertiesPtr(v *GetUserTablesMySqlTaskPropertiesArgs) GetUserTablesMySqlTaskPropertiesPtrInput {
	return (*getUserTablesMySqlTaskPropertiesPtrType)(v)
}

func (*getUserTablesMySqlTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesMySqlTaskProperties)(nil)).Elem()
}

func (i *getUserTablesMySqlTaskPropertiesPtrType) ToGetUserTablesMySqlTaskPropertiesPtrOutput() GetUserTablesMySqlTaskPropertiesPtrOutput {
	return i.ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *getUserTablesMySqlTaskPropertiesPtrType) ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesMySqlTaskPropertiesPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesMySqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskPropertiesOutput) ToGetUserTablesMySqlTaskPropertiesOutput() GetUserTablesMySqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesMySqlTaskPropertiesOutput) ToGetUserTablesMySqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesMySqlTaskPropertiesOutput) ToGetUserTablesMySqlTaskPropertiesPtrOutput() GetUserTablesMySqlTaskPropertiesPtrOutput {
	return o.ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o GetUserTablesMySqlTaskPropertiesOutput) ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesMySqlTaskProperties) *GetUserTablesMySqlTaskProperties {
		return &v
	}).(GetUserTablesMySqlTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesMySqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesMySqlTaskPropertiesOutput) Input() GetUserTablesMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskProperties) *GetUserTablesMySqlTaskInput { return v.Input }).(GetUserTablesMySqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTablesMySql'.
func (o GetUserTablesMySqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type GetUserTablesMySqlTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesMySqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskPropertiesPtrOutput) ToGetUserTablesMySqlTaskPropertiesPtrOutput() GetUserTablesMySqlTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesMySqlTaskPropertiesPtrOutput) ToGetUserTablesMySqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesMySqlTaskPropertiesPtrOutput) Elem() GetUserTablesMySqlTaskPropertiesOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskProperties) GetUserTablesMySqlTaskProperties {
		if v != nil {
			return *v
		}
		var ret GetUserTablesMySqlTaskProperties
		return ret
	}).(GetUserTablesMySqlTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesMySqlTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesMySqlTaskPropertiesPtrOutput) Input() GetUserTablesMySqlTaskInputPtrOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskProperties) *GetUserTablesMySqlTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(GetUserTablesMySqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTablesMySql'.
func (o GetUserTablesMySqlTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesMySqlTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesMySqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTablesMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesMySqlTaskPropertiesResponse
func (val *GetUserTablesMySqlTaskPropertiesResponse) Defaults() *GetUserTablesMySqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesMySqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesMySqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesMySqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesMySqlTaskPropertiesResponseOutput) ToGetUserTablesMySqlTaskPropertiesResponseOutput() GetUserTablesMySqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesMySqlTaskPropertiesResponseOutput) ToGetUserTablesMySqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesMySqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesMySqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesMySqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesMySqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesMySqlTaskPropertiesResponseOutput) Input() GetUserTablesMySqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskPropertiesResponse) *GetUserTablesMySqlTaskInputResponse { return v.Input }).(GetUserTablesMySqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesMySqlTaskPropertiesResponseOutput) Output() GetUserTablesMySqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskPropertiesResponse) []GetUserTablesMySqlTaskOutputResponse {
		return v.Output
	}).(GetUserTablesMySqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesMySqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'GetUserTablesMySql'.
func (o GetUserTablesMySqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesMySqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInput struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfo `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// GetUserTablesOracleTaskInputInput is an input type that accepts GetUserTablesOracleTaskInputArgs and GetUserTablesOracleTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputInput` via:
//
//	GetUserTablesOracleTaskInputArgs{...}
type GetUserTablesOracleTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput
	ToGetUserTablesOracleTaskInputOutputWithContext(context.Context) GetUserTablesOracleTaskInputOutput
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputArgs struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoInput `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas pulumi.StringArrayInput `pulumi:"selectedSchemas"`
}

func (GetUserTablesOracleTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput {
	return i.ToGetUserTablesOracleTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputOutput)
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return i.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputOutput).ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesOracleTaskInputPtrInput is an input type that accepts GetUserTablesOracleTaskInputArgs, GetUserTablesOracleTaskInputPtr and GetUserTablesOracleTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputPtrInput` via:
//
//	        GetUserTablesOracleTaskInputArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesOracleTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput
	ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Context) GetUserTablesOracleTaskInputPtrOutput
}

type getUserTablesOracleTaskInputPtrType GetUserTablesOracleTaskInputArgs

func GetUserTablesOracleTaskInputPtr(v *GetUserTablesOracleTaskInputArgs) GetUserTablesOracleTaskInputPtrInput {
	return (*getUserTablesOracleTaskInputPtrType)(v)
}

func (*getUserTablesOracleTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (i *getUserTablesOracleTaskInputPtrType) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return i.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesOracleTaskInputPtrType) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputPtrOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput {
	return o
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputOutput {
	return o
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return o.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesOracleTaskInputOutput) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesOracleTaskInput) *GetUserTablesOracleTaskInput {
		return &v
	}).(GetUserTablesOracleTaskInputPtrOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputOutput) ConnectionInfo() OracleConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInput) OracleConnectionInfo { return v.ConnectionInfo }).(OracleConnectionInfoOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInput) []string { return v.SelectedSchemas }).(pulumi.StringArrayOutput)
}

type GetUserTablesOracleTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputPtrOutput) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputPtrOutput) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputPtrOutput) Elem() GetUserTablesOracleTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInput) GetUserTablesOracleTaskInput {
		if v != nil {
			return *v
		}
		var ret GetUserTablesOracleTaskInput
		return ret
	}).(GetUserTablesOracleTaskInputOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputPtrOutput) ConnectionInfo() OracleConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInput) *OracleConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(OracleConnectionInfoPtrOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputPtrOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSchemas
	}).(pulumi.StringArrayOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponse struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponseOutput() GetUserTablesOracleTaskInputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponseOutput {
	return o
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputResponseOutput) ConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) OracleConnectionInfoResponse { return v.ConnectionInfo }).(OracleConnectionInfoResponseOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputResponseOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) []string { return v.SelectedSchemas }).(pulumi.StringArrayOutput)
}

type GetUserTablesOracleTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) Elem() GetUserTablesOracleTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) GetUserTablesOracleTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret GetUserTablesOracleTaskInputResponse
		return ret
	}).(GetUserTablesOracleTaskInputResponseOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputResponsePtrOutput) ConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputResponsePtrOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSchemas
	}).(pulumi.StringArrayOutput)
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponse struct {
	// The schema this result is for
	SchemaName string `pulumi:"schemaName"`
	// List of valid tables found for this schema
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskOutputResponseOutput) ToGetUserTablesOracleTaskOutputResponseOutput() GetUserTablesOracleTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseOutput) ToGetUserTablesOracleTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseOutput {
	return o
}

// The schema this result is for
func (o GetUserTablesOracleTaskOutputResponseOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) string { return v.SchemaName }).(pulumi.StringOutput)
}

// List of valid tables found for this schema
func (o GetUserTablesOracleTaskOutputResponseOutput) Tables() DatabaseTableResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) []DatabaseTableResponse { return v.Tables }).(DatabaseTableResponseArrayOutput)
}

// Validation errors associated with the task
func (o GetUserTablesOracleTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesOracleTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) ToGetUserTablesOracleTaskOutputResponseArrayOutput() GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) ToGetUserTablesOracleTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesOracleTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesOracleTaskOutputResponse {
		return vs[0].([]GetUserTablesOracleTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesOracleTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesOracleTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesOracle'.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesOracleTaskPropertiesInput is an input type that accepts GetUserTablesOracleTaskPropertiesArgs and GetUserTablesOracleTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskPropertiesInput` via:
//
//	GetUserTablesOracleTaskPropertiesArgs{...}
type GetUserTablesOracleTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput
	ToGetUserTablesOracleTaskPropertiesOutputWithContext(context.Context) GetUserTablesOracleTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesOracleTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesOracle'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesOracleTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskProperties)(nil)).Elem()
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput {
	return i.ToGetUserTablesOracleTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskPropertiesOutput)
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesPtrOutput() GetUserTablesOracleTaskPropertiesPtrOutput {
	return i.ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskPropertiesOutput).ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(ctx)
}

// GetUserTablesOracleTaskPropertiesPtrInput is an input type that accepts GetUserTablesOracleTaskPropertiesArgs, GetUserTablesOracleTaskPropertiesPtr and GetUserTablesOracleTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskPropertiesPtrInput` via:
//
//	        GetUserTablesOracleTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesOracleTaskPropertiesPtrInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskPropertiesPtrOutput() GetUserTablesOracleTaskPropertiesPtrOutput
	ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(context.Context) GetUserTablesOracleTaskPropertiesPtrOutput
}

type getUserTablesOracleTaskPropertiesPtrType GetUserTablesOracleTaskPropertiesArgs

func GetUserTablesOracleTaskPropertiesPtr(v *GetUserTablesOracleTaskPropertiesArgs) GetUserTablesOracleTaskPropertiesPtrInput {
	return (*getUserTablesOracleTaskPropertiesPtrType)(v)
}

func (*getUserTablesOracleTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskProperties)(nil)).Elem()
}

func (i *getUserTablesOracleTaskPropertiesPtrType) ToGetUserTablesOracleTaskPropertiesPtrOutput() GetUserTablesOracleTaskPropertiesPtrOutput {
	return i.ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *getUserTablesOracleTaskPropertiesPtrType) ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskPropertiesPtrOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskProperties)(nil)).Elem()
}

func (o GetUserTablesOracleTaskPropertiesOutput) ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesOutput) ToGetUserTablesOracleTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesOutput) ToGetUserTablesOracleTaskPropertiesPtrOutput() GetUserTablesOracleTaskPropertiesPtrOutput {
	return o.ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o GetUserTablesOracleTaskPropertiesOutput) ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesOracleTaskProperties) *GetUserTablesOracleTaskProperties {
		return &v
	}).(GetUserTablesOracleTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesOracleTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesOracleTaskPropertiesOutput) Input() GetUserTablesOracleTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskProperties) *GetUserTablesOracleTaskInput { return v.Input }).(GetUserTablesOracleTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTablesOracle'.
func (o GetUserTablesOracleTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type GetUserTablesOracleTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskProperties)(nil)).Elem()
}

func (o GetUserTablesOracleTaskPropertiesPtrOutput) ToGetUserTablesOracleTaskPropertiesPtrOutput() GetUserTablesOracleTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesPtrOutput) ToGetUserTablesOracleTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesPtrOutput) Elem() GetUserTablesOracleTaskPropertiesOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskProperties) GetUserTablesOracleTaskProperties {
		if v != nil {
			return *v
		}
		var ret GetUserTablesOracleTaskProperties
		return ret
	}).(GetUserTablesOracleTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesOracleTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesOracleTaskPropertiesPtrOutput) Input() GetUserTablesOracleTaskInputPtrOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskProperties) *GetUserTablesOracleTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(GetUserTablesOracleTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTablesOracle'.
func (o GetUserTablesOracleTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesOracleTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesOracleTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTablesOracle'.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskPropertiesResponseOutput) ToGetUserTablesOracleTaskPropertiesResponseOutput() GetUserTablesOracleTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesResponseOutput) ToGetUserTablesOracleTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesOracleTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Input() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) *GetUserTablesOracleTaskInputResponse {
		return v.Input
	}).(GetUserTablesOracleTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Output() GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []GetUserTablesOracleTaskOutputResponse {
		return v.Output
	}).(GetUserTablesOracleTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'GetUserTablesOracle'.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInput struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfo `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskInput
func (val *GetUserTablesPostgreSqlTaskInput) Defaults() *GetUserTablesPostgreSqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// GetUserTablesPostgreSqlTaskInputInput is an input type that accepts GetUserTablesPostgreSqlTaskInputArgs and GetUserTablesPostgreSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputInput` via:
//
//	GetUserTablesPostgreSqlTaskInputArgs{...}
type GetUserTablesPostgreSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput
	ToGetUserTablesPostgreSqlTaskInputOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputOutput
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputArgs struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskInputArgs
func (val *GetUserTablesPostgreSqlTaskInputArgs) Defaults() *GetUserTablesPostgreSqlTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesPostgreSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputOutput)
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputOutput).ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesPostgreSqlTaskInputPtrInput is an input type that accepts GetUserTablesPostgreSqlTaskInputArgs, GetUserTablesPostgreSqlTaskInputPtr and GetUserTablesPostgreSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputPtrInput` via:
//
//	        GetUserTablesPostgreSqlTaskInputArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesPostgreSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput
	ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput
}

type getUserTablesPostgreSqlTaskInputPtrType GetUserTablesPostgreSqlTaskInputArgs

func GetUserTablesPostgreSqlTaskInputPtr(v *GetUserTablesPostgreSqlTaskInputArgs) GetUserTablesPostgreSqlTaskInputPtrInput {
	return (*getUserTablesPostgreSqlTaskInputPtrType)(v)
}

func (*getUserTablesPostgreSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesPostgreSqlTaskInputPtrType) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesPostgreSqlTaskInputPtrType) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesPostgreSqlTaskInputOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesPostgreSqlTaskInput) *GetUserTablesPostgreSqlTaskInput {
		return &v
	}).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputOutput) ConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInput) PostgreSqlConnectionInfo { return v.ConnectionInfo }).(PostgreSqlConnectionInfoOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInput) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesPostgreSqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputPtrOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputPtrOutput) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputPtrOutput) Elem() GetUserTablesPostgreSqlTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInput) GetUserTablesPostgreSqlTaskInput {
		if v != nil {
			return *v
		}
		var ret GetUserTablesPostgreSqlTaskInput
		return ret
	}).(GetUserTablesPostgreSqlTaskInputOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputPtrOutput) ConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputPtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponse struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskInputResponse
func (val *GetUserTablesPostgreSqlTaskInputResponse) Defaults() *GetUserTablesPostgreSqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponseOutput() GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.ConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesPostgreSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) Elem() GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) GetUserTablesPostgreSqlTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret GetUserTablesPostgreSqlTaskInputResponse
		return ret
	}).(GetUserTablesPostgreSqlTaskInputResponseOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponse struct {
	// The database this result is for
	DatabaseName string `pulumi:"databaseName"`
	// List of valid tables found for this database
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ToGetUserTablesPostgreSqlTaskOutputResponseOutput() GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ToGetUserTablesPostgreSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return o
}

// The database this result is for
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// List of valid tables found for this database
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) Tables() DatabaseTableResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) []DatabaseTableResponse { return v.Tables }).(DatabaseTableResponseArrayOutput)
}

// Validation errors associated with the task
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesPostgreSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutput() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesPostgreSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesPostgreSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesPostgreSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesPostgreSql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskProperties
func (val *GetUserTablesPostgreSqlTaskProperties) Defaults() *GetUserTablesPostgreSqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// GetUserTablesPostgreSqlTaskPropertiesInput is an input type that accepts GetUserTablesPostgreSqlTaskPropertiesArgs and GetUserTablesPostgreSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskPropertiesInput` via:
//
//	GetUserTablesPostgreSqlTaskPropertiesArgs{...}
type GetUserTablesPostgreSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput
	ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesPostgreSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTablesPostgreSql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskPropertiesArgs
func (val *GetUserTablesPostgreSqlTaskPropertiesArgs) Defaults() *GetUserTablesPostgreSqlTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesPostgreSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput {
	return i.ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskPropertiesOutput)
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutput() GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskPropertiesOutput).ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(ctx)
}

// GetUserTablesPostgreSqlTaskPropertiesPtrInput is an input type that accepts GetUserTablesPostgreSqlTaskPropertiesArgs, GetUserTablesPostgreSqlTaskPropertiesPtr and GetUserTablesPostgreSqlTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskPropertiesPtrInput` via:
//
//	        GetUserTablesPostgreSqlTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesPostgreSqlTaskPropertiesPtrInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskPropertiesPtrOutput() GetUserTablesPostgreSqlTaskPropertiesPtrOutput
	ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskPropertiesPtrOutput
}

type getUserTablesPostgreSqlTaskPropertiesPtrType GetUserTablesPostgreSqlTaskPropertiesArgs

func GetUserTablesPostgreSqlTaskPropertiesPtr(v *GetUserTablesPostgreSqlTaskPropertiesArgs) GetUserTablesPostgreSqlTaskPropertiesPtrInput {
	return (*getUserTablesPostgreSqlTaskPropertiesPtrType)(v)
}

func (*getUserTablesPostgreSqlTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskProperties)(nil)).Elem()
}

func (i *getUserTablesPostgreSqlTaskPropertiesPtrType) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutput() GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *getUserTablesPostgreSqlTaskPropertiesPtrType) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskPropertiesPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutput() GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return o.ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesPostgreSqlTaskProperties) *GetUserTablesPostgreSqlTaskProperties {
		return &v
	}).(GetUserTablesPostgreSqlTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesPostgreSqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesPostgreSqlTaskPropertiesOutput) Input() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskProperties) *GetUserTablesPostgreSqlTaskInput { return v.Input }).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTablesPostgreSql'.
func (o GetUserTablesPostgreSqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type GetUserTablesPostgreSqlTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskPropertiesPtrOutput) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutput() GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesPtrOutput) ToGetUserTablesPostgreSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesPtrOutput) Elem() GetUserTablesPostgreSqlTaskPropertiesOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskProperties) GetUserTablesPostgreSqlTaskProperties {
		if v != nil {
			return *v
		}
		var ret GetUserTablesPostgreSqlTaskProperties
		return ret
	}).(GetUserTablesPostgreSqlTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesPostgreSqlTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesPostgreSqlTaskPropertiesPtrOutput) Input() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskProperties) *GetUserTablesPostgreSqlTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTablesPostgreSql'.
func (o GetUserTablesPostgreSqlTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesPostgreSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTablesPostgreSql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesPostgreSqlTaskPropertiesResponse
func (val *GetUserTablesPostgreSqlTaskPropertiesResponse) Defaults() *GetUserTablesPostgreSqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutput() GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Input() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) *GetUserTablesPostgreSqlTaskInputResponse {
		return v.Input
	}).(GetUserTablesPostgreSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Output() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []GetUserTablesPostgreSqlTaskOutputResponse {
		return v.Output
	}).(GetUserTablesPostgreSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'GetUserTablesPostgreSql'.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInput struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskInput
func (val *GetUserTablesSqlSyncTaskInput) Defaults() *GetUserTablesSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// GetUserTablesSqlSyncTaskInputInput is an input type that accepts GetUserTablesSqlSyncTaskInputArgs and GetUserTablesSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputInput` via:
//
//	GetUserTablesSqlSyncTaskInputArgs{...}
type GetUserTablesSqlSyncTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput
	ToGetUserTablesSqlSyncTaskInputOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputArgs struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases pulumi.StringArrayInput `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases pulumi.StringArrayInput `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskInputArgs
func (val *GetUserTablesSqlSyncTaskInputArgs) Defaults() *GetUserTablesSqlSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput {
	return i.ToGetUserTablesSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputOutput)
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputOutput).ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlSyncTaskInputPtrInput is an input type that accepts GetUserTablesSqlSyncTaskInputArgs, GetUserTablesSqlSyncTaskInputPtr and GetUserTablesSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputPtrInput` via:
//
//	        GetUserTablesSqlSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput
	ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputPtrOutput
}

type getUserTablesSqlSyncTaskInputPtrType GetUserTablesSqlSyncTaskInputArgs

func GetUserTablesSqlSyncTaskInputPtr(v *GetUserTablesSqlSyncTaskInputArgs) GetUserTablesSqlSyncTaskInputPtrInput {
	return (*getUserTablesSqlSyncTaskInputPtrType)(v)
}

func (*getUserTablesSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlSyncTaskInputPtrType) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlSyncTaskInputPtrType) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return o.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlSyncTaskInputOutput) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesSqlSyncTaskInput) *GetUserTablesSqlSyncTaskInput {
		return &v
	}).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) []string { return v.SelectedSourceDatabases }).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) []string { return v.SelectedTargetDatabases }).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type GetUserTablesSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputPtrOutput) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputPtrOutput) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputPtrOutput) Elem() GetUserTablesSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) GetUserTablesSqlSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret GetUserTablesSqlSyncTaskInput
		return ret
	}).(GetUserTablesSqlSyncTaskInputOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputPtrOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSourceDatabases
	}).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputPtrOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedTargetDatabases
	}).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponse struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskInputResponse
func (val *GetUserTablesSqlSyncTaskInputResponse) Defaults() *GetUserTablesSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponseOutput() GetUserTablesSqlSyncTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponseOutput {
	return o
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) []string { return v.SelectedSourceDatabases }).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) []string { return v.SelectedTargetDatabases }).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) SqlConnectionInfoResponse { return v.SourceConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type GetUserTablesSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) Elem() GetUserTablesSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) GetUserTablesSqlSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret GetUserTablesSqlSyncTaskInputResponse
		return ret
	}).(GetUserTablesSqlSyncTaskInputResponseOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSourceDatabases
	}).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedTargetDatabases
	}).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponse struct {
	// Mapping from database name to list of source tables
	DatabasesToSourceTables map[string][]DatabaseTableResponse `pulumi:"databasesToSourceTables"`
	// Mapping from database name to list of target tables
	DatabasesToTargetTables map[string][]DatabaseTableResponse `pulumi:"databasesToTargetTables"`
	// Mapping from database name to list of validation errors
	TableValidationErrors map[string][]string `pulumi:"tableValidationErrors"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ToGetUserTablesSqlSyncTaskOutputResponseOutput() GetUserTablesSqlSyncTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ToGetUserTablesSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of source tables
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) DatabasesToSourceTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToSourceTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Mapping from database name to list of target tables
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) DatabasesToTargetTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToTargetTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Mapping from database name to list of validation errors
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) TableValidationErrors() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) map[string][]string { return v.TableValidationErrors }).(pulumi.StringArrayMapOutput)
}

// Validation errors
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutput() GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlSyncTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskProperties
func (val *GetUserTablesSqlSyncTaskProperties) Defaults() *GetUserTablesSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// GetUserTablesSqlSyncTaskPropertiesInput is an input type that accepts GetUserTablesSqlSyncTaskPropertiesArgs and GetUserTablesSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskPropertiesInput` via:
//
//	GetUserTablesSqlSyncTaskPropertiesArgs{...}
type GetUserTablesSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput
	ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlSyncTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskPropertiesArgs
func (val *GetUserTablesSqlSyncTaskPropertiesArgs) Defaults() *GetUserTablesSqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput {
	return i.ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskPropertiesOutput)
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesPtrOutput() GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskPropertiesOutput).ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// GetUserTablesSqlSyncTaskPropertiesPtrInput is an input type that accepts GetUserTablesSqlSyncTaskPropertiesArgs, GetUserTablesSqlSyncTaskPropertiesPtr and GetUserTablesSqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskPropertiesPtrInput` via:
//
//	        GetUserTablesSqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesSqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskPropertiesPtrOutput() GetUserTablesSqlSyncTaskPropertiesPtrOutput
	ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(context.Context) GetUserTablesSqlSyncTaskPropertiesPtrOutput
}

type getUserTablesSqlSyncTaskPropertiesPtrType GetUserTablesSqlSyncTaskPropertiesArgs

func GetUserTablesSqlSyncTaskPropertiesPtr(v *GetUserTablesSqlSyncTaskPropertiesArgs) GetUserTablesSqlSyncTaskPropertiesPtrInput {
	return (*getUserTablesSqlSyncTaskPropertiesPtrType)(v)
}

func (*getUserTablesSqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskProperties)(nil)).Elem()
}

func (i *getUserTablesSqlSyncTaskPropertiesPtrType) ToGetUserTablesSqlSyncTaskPropertiesPtrOutput() GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlSyncTaskPropertiesPtrType) ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskProperties)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskPropertiesOutput) ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesOutput) ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesOutput) ToGetUserTablesSqlSyncTaskPropertiesPtrOutput() GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return o.ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlSyncTaskPropertiesOutput) ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesSqlSyncTaskProperties) *GetUserTablesSqlSyncTaskProperties {
		return &v
	}).(GetUserTablesSqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesSqlSyncTaskPropertiesOutput) Input() GetUserTablesSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskProperties) *GetUserTablesSqlSyncTaskInput { return v.Input }).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
func (o GetUserTablesSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type GetUserTablesSqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskProperties)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskPropertiesPtrOutput) ToGetUserTablesSqlSyncTaskPropertiesPtrOutput() GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesPtrOutput) ToGetUserTablesSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesPtrOutput) Elem() GetUserTablesSqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskProperties) GetUserTablesSqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret GetUserTablesSqlSyncTaskProperties
		return ret
	}).(GetUserTablesSqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesSqlSyncTaskPropertiesPtrOutput) Input() GetUserTablesSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskProperties) *GetUserTablesSqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
func (o GetUserTablesSqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlSyncTaskPropertiesResponse
func (val *GetUserTablesSqlSyncTaskPropertiesResponse) Defaults() *GetUserTablesSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ToGetUserTablesSqlSyncTaskPropertiesResponseOutput() GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ToGetUserTablesSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Input() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) *GetUserTablesSqlSyncTaskInputResponse {
		return v.Input
	}).(GetUserTablesSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Output() GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []GetUserTablesSqlSyncTaskOutputResponse {
		return v.Output
	}).(GetUserTablesSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'GetUserTables.AzureSqlDb.Sync'.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskInput
func (val *GetUserTablesSqlTaskInput) Defaults() *GetUserTablesSqlTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// GetUserTablesSqlTaskInputInput is an input type that accepts GetUserTablesSqlTaskInputArgs and GetUserTablesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputInput` via:
//
//	GetUserTablesSqlTaskInputArgs{...}
type GetUserTablesSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput
	ToGetUserTablesSqlTaskInputOutputWithContext(context.Context) GetUserTablesSqlTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields pulumi.StringPtrInput `pulumi:"encryptedKeyForSecureFields"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskInputArgs
func (val *GetUserTablesSqlTaskInputArgs) Defaults() *GetUserTablesSqlTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return i.ToGetUserTablesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput)
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput).ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputPtrInput is an input type that accepts GetUserTablesSqlTaskInputArgs, GetUserTablesSqlTaskInputPtr and GetUserTablesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputPtrInput` via:
//
//	        GetUserTablesSqlTaskInputArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput
	ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputPtrOutput
}

type getUserTablesSqlTaskInputPtrType GetUserTablesSqlTaskInputArgs

func GetUserTablesSqlTaskInputPtr(v *GetUserTablesSqlTaskInputArgs) GetUserTablesSqlTaskInputPtrInput {
	return (*getUserTablesSqlTaskInputPtrType)(v)
}

func (*getUserTablesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return o
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return o
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return o.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputOutput) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesSqlTaskInput) *GetUserTablesSqlTaskInput {
		return &v
	}).(GetUserTablesSqlTaskInputPtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputOutput) ConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) SqlConnectionInfo { return v.ConnectionInfo }).(SqlConnectionInfoOutput)
}

// encrypted key for secure fields
func (o GetUserTablesSqlTaskInputOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInput) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputPtrOutput) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputPtrOutput) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputPtrOutput) Elem() GetUserTablesSqlTaskInputOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) GetUserTablesSqlTaskInput {
		if v != nil {
			return *v
		}
		var ret GetUserTablesSqlTaskInput
		return ret
	}).(GetUserTablesSqlTaskInputOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputPtrOutput) ConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// encrypted key for secure fields
func (o GetUserTablesSqlTaskInputPtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputPtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskInputResponse
func (val *GetUserTablesSqlTaskInputResponse) Defaults() *GetUserTablesSqlTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConnectionInfo = *tmp.ConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponseOutput {
	return o
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// encrypted key for secure fields
func (o GetUserTablesSqlTaskInputResponseOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) Elem() GetUserTablesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) GetUserTablesSqlTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret GetUserTablesSqlTaskInputResponse
		return ret
	}).(GetUserTablesSqlTaskInputResponseOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// encrypted key for secure fields
func (o GetUserTablesSqlTaskInputResponsePtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables map[string][]DatabaseTableResponse `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of tables
func (o GetUserTablesSqlTaskOutputResponseOutput) DatabasesToTables() DatabaseTableResponseArrayMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) map[string][]DatabaseTableResponse {
		return v.DatabasesToTables
	}).(DatabaseTableResponseArrayMapOutput)
}

// Result identifier
func (o GetUserTablesSqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlTaskInput `pulumi:"input"`
	// Task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskProperties
func (val *GetUserTablesSqlTaskProperties) Defaults() *GetUserTablesSqlTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// GetUserTablesSqlTaskPropertiesInput is an input type that accepts GetUserTablesSqlTaskPropertiesArgs and GetUserTablesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesInput` via:
//
//	GetUserTablesSqlTaskPropertiesArgs{...}
type GetUserTablesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput
	ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesSqlTaskInputPtrInput `pulumi:"input"`
	// Task id
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskPropertiesArgs
func (val *GetUserTablesSqlTaskPropertiesArgs) Defaults() *GetUserTablesSqlTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GetUserTablesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return i.ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesOutput)
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesPtrOutput() GetUserTablesSqlTaskPropertiesPtrOutput {
	return i.ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesOutput).ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskPropertiesPtrInput is an input type that accepts GetUserTablesSqlTaskPropertiesArgs, GetUserTablesSqlTaskPropertiesPtr and GetUserTablesSqlTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesPtrInput` via:
//
//	        GetUserTablesSqlTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type GetUserTablesSqlTaskPropertiesPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesPtrOutput() GetUserTablesSqlTaskPropertiesPtrOutput
	ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesPtrOutput
}

type getUserTablesSqlTaskPropertiesPtrType GetUserTablesSqlTaskPropertiesArgs

func GetUserTablesSqlTaskPropertiesPtr(v *GetUserTablesSqlTaskPropertiesArgs) GetUserTablesSqlTaskPropertiesPtrInput {
	return (*getUserTablesSqlTaskPropertiesPtrType)(v)
}

func (*getUserTablesSqlTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (i *getUserTablesSqlTaskPropertiesPtrType) ToGetUserTablesSqlTaskPropertiesPtrOutput() GetUserTablesSqlTaskPropertiesPtrOutput {
	return i.ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskPropertiesPtrType) ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesPtrOutput() GetUserTablesSqlTaskPropertiesPtrOutput {
	return o.ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskPropertiesOutput) ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetUserTablesSqlTaskProperties) *GetUserTablesSqlTaskProperties {
		return &v
	}).(GetUserTablesSqlTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesOutput) Input() GetUserTablesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) *GetUserTablesSqlTaskInput { return v.Input }).(GetUserTablesSqlTaskInputPtrOutput)
}

// Task id
func (o GetUserTablesSqlTaskPropertiesOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'GetUserTables.Sql'.
func (o GetUserTablesSqlTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type GetUserTablesSqlTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesPtrOutput) ToGetUserTablesSqlTaskPropertiesPtrOutput() GetUserTablesSqlTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesPtrOutput) ToGetUserTablesSqlTaskPropertiesPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesPtrOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesPtrOutput) Elem() GetUserTablesSqlTaskPropertiesOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskProperties) GetUserTablesSqlTaskProperties {
		if v != nil {
			return *v
		}
		var ret GetUserTablesSqlTaskProperties
		return ret
	}).(GetUserTablesSqlTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesPtrOutput) Input() GetUserTablesSqlTaskInputPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskProperties) *GetUserTablesSqlTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(GetUserTablesSqlTaskInputPtrOutput)
}

// Task id
func (o GetUserTablesSqlTaskPropertiesPtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.TaskId
	}).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'GetUserTables.Sql'.
func (o GetUserTablesSqlTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'GetUserTables.Sql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for GetUserTablesSqlTaskPropertiesResponse
func (val *GetUserTablesSqlTaskPropertiesResponse) Defaults() *GetUserTablesSqlTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Input() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) *GetUserTablesSqlTaskInputResponse { return v.Input }).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Output() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []GetUserTablesSqlTaskOutputResponse { return v.Output }).(GetUserTablesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task id
func (o GetUserTablesSqlTaskPropertiesResponseOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'GetUserTables.Sql'.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfo struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'MiSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MiSqlConnectionInfoInput is an input type that accepts MiSqlConnectionInfoArgs and MiSqlConnectionInfoOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoInput` via:
//
//	MiSqlConnectionInfoArgs{...}
type MiSqlConnectionInfoInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput
	ToMiSqlConnectionInfoOutputWithContext(context.Context) MiSqlConnectionInfoOutput
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoArgs struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId pulumi.StringInput `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	// Expected value is 'MiSqlConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MiSqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfo)(nil)).Elem()
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput {
	return i.ToMiSqlConnectionInfoOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoOutputWithContext(ctx context.Context) MiSqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoOutput)
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return i.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoOutput).ToMiSqlConnectionInfoPtrOutputWithContext(ctx)
}

// MiSqlConnectionInfoPtrInput is an input type that accepts MiSqlConnectionInfoArgs, MiSqlConnectionInfoPtr and MiSqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoPtrInput` via:
//
//	        MiSqlConnectionInfoArgs{...}
//
//	or:
//
//	        nil
type MiSqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput
	ToMiSqlConnectionInfoPtrOutputWithContext(context.Context) MiSqlConnectionInfoPtrOutput
}

type miSqlConnectionInfoPtrType MiSqlConnectionInfoArgs

func MiSqlConnectionInfoPtr(v *MiSqlConnectionInfoArgs) MiSqlConnectionInfoPtrInput {
	return (*miSqlConnectionInfoPtrType)(v)
}

func (*miSqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfo)(nil)).Elem()
}

func (i *miSqlConnectionInfoPtrType) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return i.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *miSqlConnectionInfoPtrType) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoPtrOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfo)(nil)).Elem()
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput {
	return o
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoOutputWithContext(ctx context.Context) MiSqlConnectionInfoOutput {
	return o
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return o.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o MiSqlConnectionInfoOutput) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MiSqlConnectionInfo) *MiSqlConnectionInfo {
		return &v
	}).(MiSqlConnectionInfoPtrOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoOutput) ManagedInstanceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) string { return v.ManagedInstanceResourceId }).(pulumi.StringOutput)
}

// Password credential.
func (o MiSqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'MiSqlConnectionInfo'.
func (o MiSqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MiSqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MiSqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfo)(nil)).Elem()
}

func (o MiSqlConnectionInfoPtrOutput) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return o
}

func (o MiSqlConnectionInfoPtrOutput) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return o
}

func (o MiSqlConnectionInfoPtrOutput) Elem() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) MiSqlConnectionInfo {
		if v != nil {
			return *v
		}
		var ret MiSqlConnectionInfo
		return ret
	}).(MiSqlConnectionInfoOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoPtrOutput) ManagedInstanceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedInstanceResourceId
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MiSqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'MiSqlConnectionInfo'.
func (o MiSqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MiSqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponse struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	// Expected value is 'MiSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponseOutput() MiSqlConnectionInfoResponseOutput {
	return o
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponseOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponseOutput {
	return o
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoResponseOutput) ManagedInstanceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) string { return v.ManagedInstanceResourceId }).(pulumi.StringOutput)
}

// Password credential.
func (o MiSqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'MiSqlConnectionInfo'.
func (o MiSqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MiSqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MiSqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (o MiSqlConnectionInfoResponsePtrOutput) ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MiSqlConnectionInfoResponsePtrOutput) ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MiSqlConnectionInfoResponsePtrOutput) Elem() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) MiSqlConnectionInfoResponse {
		if v != nil {
			return *v
		}
		var ret MiSqlConnectionInfoResponse
		return ret
	}).(MiSqlConnectionInfoResponseOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoResponsePtrOutput) ManagedInstanceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedInstanceResourceId
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MiSqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'MiSqlConnectionInfo'.
func (o MiSqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MiSqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponse struct {
	// Name of managed instance database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponseOutput() MigrateMISyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponseOutput {
	return o
}

// Name of managed instance database
func (o MigrateMISyncCompleteCommandInputResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandInputResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type MigrateMISyncCompleteCommandInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) Elem() MigrateMISyncCompleteCommandInputResponseOutput {
	return o.ApplyT(func(v *MigrateMISyncCompleteCommandInputResponse) MigrateMISyncCompleteCommandInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateMISyncCompleteCommandInputResponse
		return ret
	}).(MigrateMISyncCompleteCommandInputResponseOutput)
}

// Name of managed instance database
func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) SourceDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMISyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandOutputResponseOutput) ToMigrateMISyncCompleteCommandOutputResponseOutput() MigrateMISyncCompleteCommandOutputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandOutputResponseOutput) ToMigrateMISyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandOutputResponseOutput {
	return o
}

// List of errors that happened during the command execution
func (o MigrateMISyncCompleteCommandOutputResponseOutput) Errors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandOutputResponse) []ReportableExceptionResponse { return v.Errors }).(ReportableExceptionResponseArrayOutput)
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponse struct {
	// Command type.
	// Expected value is 'Migrate.SqlServer.AzureDbSqlMi.Complete'.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateMISyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateMISyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) ToMigrateMISyncCompleteCommandPropertiesResponseOutput() MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) ToMigrateMISyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return o
}

// Command type.
// Expected value is 'Migrate.SqlServer.AzureDbSqlMi.Complete'.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) string { return v.CommandType }).(pulumi.StringOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Command input
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Input() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) *MigrateMISyncCompleteCommandInputResponse {
		return v.Input
	}).(MigrateMISyncCompleteCommandInputResponsePtrOutput)
}

// Command output. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Output() MigrateMISyncCompleteCommandOutputResponseOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) MigrateMISyncCompleteCommandOutputResponse {
		return v.Output
	}).(MigrateMISyncCompleteCommandOutputResponseOutput)
}

// The state of the command. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMongoDbTaskProperties
func (val *MigrateMongoDbTaskProperties) Defaults() *MigrateMongoDbTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateMongoDbTaskPropertiesInput is an input type that accepts MigrateMongoDbTaskPropertiesArgs and MigrateMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateMongoDbTaskPropertiesInput` via:
//
//	MigrateMongoDbTaskPropertiesArgs{...}
type MigrateMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput
	ToMigrateMongoDbTaskPropertiesOutputWithContext(context.Context) MigrateMongoDbTaskPropertiesOutput
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input MongoDbMigrationSettingsPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.MongoDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMongoDbTaskPropertiesArgs
func (val *MigrateMongoDbTaskPropertiesArgs) Defaults() *MigrateMongoDbTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskProperties)(nil)).Elem()
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput {
	return i.ToMigrateMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMongoDbTaskPropertiesOutput)
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesPtrOutput() MigrateMongoDbTaskPropertiesPtrOutput {
	return i.ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMongoDbTaskPropertiesOutput).ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateMongoDbTaskPropertiesPtrInput is an input type that accepts MigrateMongoDbTaskPropertiesArgs, MigrateMongoDbTaskPropertiesPtr and MigrateMongoDbTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateMongoDbTaskPropertiesPtrInput` via:
//
//	        MigrateMongoDbTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateMongoDbTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateMongoDbTaskPropertiesPtrOutput() MigrateMongoDbTaskPropertiesPtrOutput
	ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(context.Context) MigrateMongoDbTaskPropertiesPtrOutput
}

type migrateMongoDbTaskPropertiesPtrType MigrateMongoDbTaskPropertiesArgs

func MigrateMongoDbTaskPropertiesPtr(v *MigrateMongoDbTaskPropertiesArgs) MigrateMongoDbTaskPropertiesPtrInput {
	return (*migrateMongoDbTaskPropertiesPtrType)(v)
}

func (*migrateMongoDbTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMongoDbTaskProperties)(nil)).Elem()
}

func (i *migrateMongoDbTaskPropertiesPtrType) ToMigrateMongoDbTaskPropertiesPtrOutput() MigrateMongoDbTaskPropertiesPtrOutput {
	return i.ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateMongoDbTaskPropertiesPtrType) ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMongoDbTaskPropertiesPtrOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateMongoDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskProperties)(nil)).Elem()
}

func (o MigrateMongoDbTaskPropertiesOutput) ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesOutput) ToMigrateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesOutput) ToMigrateMongoDbTaskPropertiesPtrOutput() MigrateMongoDbTaskPropertiesPtrOutput {
	return o.ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateMongoDbTaskPropertiesOutput) ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateMongoDbTaskProperties) *MigrateMongoDbTaskProperties {
		return &v
	}).(MigrateMongoDbTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMongoDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Describes how a MongoDB data migration should be performed
func (o MigrateMongoDbTaskPropertiesOutput) Input() MongoDbMigrationSettingsPtrOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskProperties) *MongoDbMigrationSettings { return v.Input }).(MongoDbMigrationSettingsPtrOutput)
}

// Task type.
// Expected value is 'Migrate.MongoDb'.
func (o MigrateMongoDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateMongoDbTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateMongoDbTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMongoDbTaskProperties)(nil)).Elem()
}

func (o MigrateMongoDbTaskPropertiesPtrOutput) ToMigrateMongoDbTaskPropertiesPtrOutput() MigrateMongoDbTaskPropertiesPtrOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesPtrOutput) ToMigrateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesPtrOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesPtrOutput) Elem() MigrateMongoDbTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateMongoDbTaskProperties) MigrateMongoDbTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateMongoDbTaskProperties
		return ret
	}).(MigrateMongoDbTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMongoDbTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateMongoDbTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Describes how a MongoDB data migration should be performed
func (o MigrateMongoDbTaskPropertiesPtrOutput) Input() MongoDbMigrationSettingsPtrOutput {
	return o.ApplyT(func(v *MigrateMongoDbTaskProperties) *MongoDbMigrationSettings {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MongoDbMigrationSettingsPtrOutput)
}

// Task type.
// Expected value is 'Migrate.MongoDb'.
func (o MigrateMongoDbTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMongoDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input  *MongoDbMigrationSettingsResponse `pulumi:"input"`
	Output []interface{}                     `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMongoDbTaskPropertiesResponse
func (val *MigrateMongoDbTaskPropertiesResponse) Defaults() *MigrateMongoDbTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) ToMigrateMongoDbTaskPropertiesResponseOutput() MigrateMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) ToMigrateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes how a MongoDB data migration should be performed
func (o MigrateMongoDbTaskPropertiesResponseOutput) Input() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) *MongoDbMigrationSettingsResponse { return v.Input }).(MongoDbMigrationSettingsResponsePtrOutput)
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.MongoDb'.
func (o MigrateMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInput struct {
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateMySqlAzureDbForMySqlOfflineDatabaseInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs and MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlOfflineDatabaseInputInput` via:
//
//	MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs{...}
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput
	ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput
}

// Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs struct {
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput)
}

// MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayInput is an input type that accepts MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArray and MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayInput` via:
//
//	MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArray{ MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArgs{...} }
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput
	ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput
}

type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArray []MigrateMySqlAzureDbForMySqlOfflineDatabaseInputInput

func (MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlOfflineDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput)
}

// Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineDatabaseInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput {
	return o
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlOfflineDatabaseInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateMySqlAzureDbForMySqlOfflineDatabaseInput {
		return vs[0].([]MigrateMySqlAzureDbForMySqlOfflineDatabaseInput)[vs[1].(int)]
	}).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput)
}

// Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse struct {
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Database specific information for offline MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput {
	return o
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse {
		return vs[0].([]MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskInput struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Setting to set the source server read only
	MakeSourceServerReadOnly *bool `pulumi:"makeSourceServerReadOnly"`
	// Optional parameters for fine tuning the data transfer rate during migration
	OptionalAgentSettings map[string]string `pulumi:"optionalAgentSettings"`
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlOfflineDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Parameter to specify when the migration started
	StartedOn *string `pulumi:"startedOn"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskInput
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskInput) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MakeSourceServerReadOnly == nil {
		makeSourceServerReadOnly_ := false
		tmp.MakeSourceServerReadOnly = &makeSourceServerReadOnly_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigrateMySqlAzureDbForMySqlOfflineTaskInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs and MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlOfflineTaskInputInput` via:
//
//	MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs{...}
type MigrateMySqlAzureDbForMySqlOfflineTaskInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlOfflineTaskInputOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput
	ToMigrateMySqlAzureDbForMySqlOfflineTaskInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields pulumi.StringPtrInput `pulumi:"encryptedKeyForSecureFields"`
	// Setting to set the source server read only
	MakeSourceServerReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceServerReadOnly"`
	// Optional parameters for fine tuning the data transfer rate during migration
	OptionalAgentSettings pulumi.StringMapInput `pulumi:"optionalAgentSettings"`
	// Databases to migrate
	SelectedDatabases MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Parameter to specify when the migration started
	StartedOn pulumi.StringPtrInput `pulumi:"startedOn"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MakeSourceServerReadOnly == nil {
		tmp.MakeSourceServerReadOnly = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineTaskInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput)
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput).ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(ctx)
}

// MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrInput is an input type that accepts MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs, MigrateMySqlAzureDbForMySqlOfflineTaskInputPtr and MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrInput` via:
//
//	        MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput
	ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput
}

type migrateMySqlAzureDbForMySqlOfflineTaskInputPtrType MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs

func MigrateMySqlAzureDbForMySqlOfflineTaskInputPtr(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputArgs) MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrInput {
	return (*migrateMySqlAzureDbForMySqlOfflineTaskInputPtrType)(v)
}

func (*migrateMySqlAzureDbForMySqlOfflineTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlOfflineTaskInput)(nil)).Elem()
}

func (i *migrateMySqlAzureDbForMySqlOfflineTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateMySqlAzureDbForMySqlOfflineTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return o.ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateMySqlAzureDbForMySqlOfflineTaskInput) *MigrateMySqlAzureDbForMySqlOfflineTaskInput {
		return &v
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput)
}

// encrypted key for secure fields
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInput) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// Setting to set the source server read only
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) MakeSourceServerReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInput) *bool { return v.MakeSourceServerReadOnly }).(pulumi.BoolPtrOutput)
}

// Optional parameters for fine tuning the data transfer rate during migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) OptionalAgentSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInput) map[string]string { return v.OptionalAgentSettings }).(pulumi.StringMapOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInput) []MigrateMySqlAzureDbForMySqlOfflineDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) SourceConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInput) MySqlConnectionInfo { return v.SourceConnectionInfo }).(MySqlConnectionInfoOutput)
}

// Parameter to specify when the migration started
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInput) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput) TargetConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInput) MySqlConnectionInfo { return v.TargetConnectionInfo }).(MySqlConnectionInfoOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlOfflineTaskInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) Elem() MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) MigrateMySqlAzureDbForMySqlOfflineTaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateMySqlAzureDbForMySqlOfflineTaskInput
		return ret
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput)
}

// encrypted key for secure fields
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Setting to set the source server read only
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) MakeSourceServerReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) *bool {
		if v == nil {
			return nil
		}
		return v.MakeSourceServerReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional parameters for fine tuning the data transfer rate during migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) OptionalAgentSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) map[string]string {
		if v == nil {
			return nil
		}
		return v.OptionalAgentSettings
	}).(pulumi.StringMapOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) []MigrateMySqlAzureDbForMySqlOfflineDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) SourceConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Parameter to specify when the migration started
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput) TargetConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Setting to set the source server read only
	MakeSourceServerReadOnly *bool `pulumi:"makeSourceServerReadOnly"`
	// Optional parameters for fine tuning the data transfer rate during migration
	OptionalAgentSettings map[string]string `pulumi:"optionalAgentSettings"`
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Parameter to specify when the migration started
	StartedOn *string `pulumi:"startedOn"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MakeSourceServerReadOnly == nil {
		makeSourceServerReadOnly_ := false
		tmp.MakeSourceServerReadOnly = &makeSourceServerReadOnly_
	}
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput {
	return o
}

// encrypted key for secure fields
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *string {
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Setting to set the source server read only
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) MakeSourceServerReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *bool { return v.MakeSourceServerReadOnly }).(pulumi.BoolPtrOutput)
}

// Optional parameters for fine tuning the data transfer rate during migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) OptionalAgentSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) map[string]string {
		return v.OptionalAgentSettings
	}).(pulumi.StringMapOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) []MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Parameter to specify when the migration started
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput) TargetConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) MySqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) Elem() MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse
		return ret
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput)
}

// encrypted key for secure fields
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Setting to set the source server read only
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) MakeSourceServerReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MakeSourceServerReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional parameters for fine tuning the data transfer rate during migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) OptionalAgentSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.OptionalAgentSettings
	}).(pulumi.StringMapOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) []MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Parameter to specify when the migration started
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput) TargetConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount float64 `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last time the storage was updated
	LastStorageUpdate string `pulumi:"lastStorageUpdate"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects float64 `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted float64 `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary map[string]DataItemMigrationSummaryResultResponse `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput() MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of database/object errors.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ErrorCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) float64 { return v.ErrorCount }).(pulumi.Float64Output)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last time the storage was updated
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) LastStorageUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string {
		return v.LastStorageUpdate
	}).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Number of objects
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) NumberOfObjects() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) float64 {
		return v.NumberOfObjects
	}).(pulumi.Float64Output)
}

// Number of successfully completed objects
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) NumberOfObjectsCompleted() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) float64 {
		return v.NumberOfObjectsCompleted
	}).(pulumi.Float64Output)
}

// Summary of object results in the migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ObjectSummary() DataItemMigrationSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) map[string]DataItemMigrationSummaryResultResponse {
		return v.ObjectSummary
	}).(DataItemMigrationSummaryResultResponseMapOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string {
		return v.ResultPrefix
	}).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration stage that this database is in
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponse) string {
		return v.StatusMessage
	}).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput() MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary map[string]DatabaseSummaryResultResponse `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds float64 `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last time the storage was updated
	LastStorageUpdate string `pulumi:"lastStorageUpdate"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput() MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput {
	return o
}

// Summary of database results in the migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) DatabaseSummary() DatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) map[string]DatabaseSummaryResultResponse {
		return v.DatabaseSummary
	}).(DatabaseSummaryResultResponseMapOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) map[string]string {
		return v.Databases
	}).(pulumi.StringMapOutput)
}

// Duration of task execution in seconds.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) DurationInSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) float64 {
		return v.DurationInSeconds
	}).(pulumi.Float64Output)
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last time the storage was updated
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) LastStorageUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string {
		return v.LastStorageUpdate
	}).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Migration Report Result, provides unique url for downloading your migration report.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) MigrationReportResult() MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) *MigrationReportResultResponse {
		return v.MigrationReportResult
	}).(MigrationReportResultResponsePtrOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Migration status message
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string {
		return v.StatusMessage
	}).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Last time the storage was updated
	LastStorageUpdate string `pulumi:"lastStorageUpdate"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput() MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) float64 {
		return v.ItemsCompletedCount
	}).(pulumi.Float64Output)
}

// Number of items
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Last time the storage was updated
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) LastStorageUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string {
		return v.LastStorageUpdate
	}).(pulumi.StringOutput)
}

// Name of the item
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.ObjectName }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlOfflineTaskInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// Task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskProperties
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesInput is an input type that accepts MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs and MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesInput` via:
//
//	MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs{...}
type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput
	ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable pulumi.BoolPtrInput `pulumi:"isCloneable"`
	// Task id
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskProperties)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput)
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput).ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrInput is an input type that accepts MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs, MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtr and MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrInput` via:
//
//	        MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput
	ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput
}

type migrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrType MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs

func MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtr(v *MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesArgs) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrInput {
	return (*migrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrType)(v)
}

func (*migrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlOfflineTaskProperties)(nil)).Elem()
}

func (i *migrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrType) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrType) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskProperties)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return o.ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *MigrateMySqlAzureDbForMySqlOfflineTaskProperties {
		return &v
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) Input() MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *MigrateMySqlAzureDbForMySqlOfflineTaskInput {
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// Task id
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.MySql.AzureDbForMySql'.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlOfflineTaskProperties)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) Elem() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) MigrateMySqlAzureDbForMySqlOfflineTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateMySqlAzureDbForMySqlOfflineTaskProperties
		return ret
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) Input() MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *MigrateMySqlAzureDbForMySqlOfflineTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsCloneable
	}).(pulumi.BoolPtrOutput)
}

// Task id
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.TaskId
	}).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.MySql.AzureDbForMySql'.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlOfflineTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse
func (val *MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) Defaults() *MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations
type MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput() MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) Input() MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) *MigrateMySqlAzureDbForMySqlOfflineTaskInputResponse {
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput)
}

// whether the task can be cloned or not
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task id
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.MySql.AzureDbForMySql'.
func (o MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs and MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput` via:
//
//	MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs{...}
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput)
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray and MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput` via:
//
//	MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray{ MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs{...} }
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray []MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInput) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
		return vs[0].([]MigrateMySqlAzureDbForMySqlSyncDatabaseInput)[vs[1].(int)]
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		return vs[0].([]MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskInput
func (val *MigrateMySqlAzureDbForMySqlSyncTaskInput) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputArgs and MigrateMySqlAzureDbForMySqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputInput` via:
//
//	MigrateMySqlAzureDbForMySqlSyncTaskInputArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskInputArgs
func (val *MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput)
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput).ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputArgs, MigrateMySqlAzureDbForMySqlSyncTaskInputPtr and MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput` via:
//
//	        MigrateMySqlAzureDbForMySqlSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput
}

type migrateMySqlAzureDbForMySqlSyncTaskInputPtrType MigrateMySqlAzureDbForMySqlSyncTaskInputArgs

func MigrateMySqlAzureDbForMySqlSyncTaskInputPtr(v *MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput {
	return (*migrateMySqlAzureDbForMySqlSyncTaskInputPtrType)(v)
}

func (*migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateMySqlAzureDbForMySqlSyncTaskInput) *MigrateMySqlAzureDbForMySqlSyncTaskInput {
		return &v
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInput) []MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) SourceConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInput) MySqlConnectionInfo { return v.SourceConnectionInfo }).(MySqlConnectionInfoOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputOutput) TargetConnectionInfo() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInput) MySqlConnectionInfo { return v.TargetConnectionInfo }).(MySqlConnectionInfoOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) Elem() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) MigrateMySqlAzureDbForMySqlSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateMySqlAzureDbForMySqlSyncTaskInput
		return ret
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) []MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) SourceConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput) TargetConnectionInfo() MySqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInput) *MySqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoPtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskInputResponse
func (val *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) TargetConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MySqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) Elem() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateMySqlAzureDbForMySqlSyncTaskInputResponse
		return ret
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelErrorOutput'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.AppliedChanges
	}).(pulumi.Float64Output)
}

// Number of cdc deletes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcDeleteCounter
	}).(pulumi.Float64Output)
}

// Number of cdc inserts
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcInsertCounter
	}).(pulumi.Float64Output)
}

// Number of cdc updates
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcUpdateCounter
	}).(pulumi.Float64Output)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadCompletedTables
	}).(pulumi.Float64Output)
}

// Number of tables errored in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadErroredTables
	}).(pulumi.Float64Output)
}

// Number of tables loading in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadLoadingTables
	}).(pulumi.Float64Output)
}

// Number of tables queued in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadQueuedTables
	}).(pulumi.Float64Output)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.IncomingChanges
	}).(pulumi.Float64Output)
}

// Indicates if initial load (full load) has been completed
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) float64 { return v.Latency }).(pulumi.Float64Output)
}

// Migration state that this database is in
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.SourceServer }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.TargetServer }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter string `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter string `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter string `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcDeleteCounter }).(pulumi.StringOutput)
}

// Number of applied inserts
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcInsertCounter }).(pulumi.StringOutput)
}

// Number of applied updates
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcUpdateCounter }).(pulumi.StringOutput)
}

// Number of data errors occurred
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) float64 {
		return v.DataErrorsCounter
	}).(pulumi.Float64Output)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.FullLoadEndedOn }).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.FullLoadStartedOn }).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) float64 {
		return v.FullLoadTotalRows
	}).(pulumi.Float64Output)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) float64 {
		return v.TotalChangesApplied
	}).(pulumi.Float64Output)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskProperties
func (val *MigrateMySqlAzureDbForMySqlSyncTaskProperties) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs and MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput` via:
//
//	MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs
func (val *MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskProperties)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput)
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput).ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs, MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtr and MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrInput` via:
//
//	        MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput
}

type migrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrType MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs

func MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtr(v *MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrInput {
	return (*migrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrType)(v)
}

func (*migrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskProperties)(nil)).Elem()
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskProperties)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return o.ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateMySqlAzureDbForMySqlSyncTaskProperties) *MigrateMySqlAzureDbForMySqlSyncTaskProperties {
		return &v
	}).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) Input() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskProperties) *MigrateMySqlAzureDbForMySqlSyncTaskInput {
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskProperties)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput) Elem() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskProperties) MigrateMySqlAzureDbForMySqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateMySqlAzureDbForMySqlSyncTaskProperties
		return ret
	}).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput) Input() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskProperties) *MigrateMySqlAzureDbForMySqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse
func (val *MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) Defaults() *MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Input() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.MySql.AzureDbForMySql.Sync'.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbForPostgreSqlSyncTaskProperties
func (val *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) Defaults() *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//	MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs
func (val *MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) Defaults() *MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput).ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput is an input type that accepts MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs, MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtr and MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput` via:
//
//	        MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
}

type migrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs

func MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtr(v *MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput {
	return (*migrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType)(v)
}

func (*migrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i *migrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties {
		return &v
	}).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Elem() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) MigrateOracleAzureDbForPostgreSqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateOracleAzureDbForPostgreSqlSyncTaskProperties
		return ret
	}).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbForPostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.Oracle.AzureDbForPostgreSql.Sync'.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInput struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput` via:
//
//	MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation pulumi.StringPtrInput `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of the source schema
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput)
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput` via:
//
//	MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray{ MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs{...} }
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return o
}

// How to handle object name casing: either Preserve or ToLower
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) CaseManipulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.CaseManipulation }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of the migration pipeline
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the source schema
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInput) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
		return vs[0].([]MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)[vs[1].(int)]
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

// How to handle object name casing: either Preserve or ToLower
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) CaseManipulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.CaseManipulation }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the migration pipeline
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the source schema
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		return vs[0].([]MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbPostgreSqlSyncTaskInput
func (val *MigrateOracleAzureDbPostgreSqlSyncTaskInput) Defaults() *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs and MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputInput` via:
//
//	MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs
func (val *MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) Defaults() *MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput)
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput).ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs, MigrateOracleAzureDbPostgreSqlSyncTaskInputPtr and MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput` via:
//
//	        MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput
}

type migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs

func MigrateOracleAzureDbPostgreSqlSyncTaskInputPtr(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput {
	return (*migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType)(v)
}

func (*migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateOracleAzureDbPostgreSqlSyncTaskInput) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		return &v
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInput) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) SourceConnectionInfo() OracleConnectionInfoOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInput) OracleConnectionInfo {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) Elem() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateOracleAzureDbPostgreSqlSyncTaskInput
		return ret
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() OracleConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) *OracleConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse
func (val *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) Defaults() *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) OracleConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) Elem() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse
		return ret
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) *string {
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelErrorOutput'.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.AppliedChanges
	}).(pulumi.Float64Output)
}

// Number of cdc deletes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcDeleteCounter
	}).(pulumi.Float64Output)
}

// Number of cdc inserts
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcInsertCounter
	}).(pulumi.Float64Output)
}

// Number of cdc updates
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcUpdateCounter
	}).(pulumi.Float64Output)
}

// Name of the database
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadCompletedTables
	}).(pulumi.Float64Output)
}

// Number of tables errored in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadErroredTables
	}).(pulumi.Float64Output)
}

// Number of tables loading in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadLoadingTables
	}).(pulumi.Float64Output)
}

// Number of tables queued in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadQueuedTables
	}).(pulumi.Float64Output)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.IncomingChanges
	}).(pulumi.Float64Output)
}

// Indicates if initial load (full load) has been completed
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 { return v.Latency }).(pulumi.Float64Output)
}

// Migration state that this database is in
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.MigrationState
	}).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServer
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServer
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.CdcDeleteCounter
	}).(pulumi.Float64Output)
}

// Number of applied inserts
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.CdcInsertCounter
	}).(pulumi.Float64Output)
}

// Number of applied updates
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.CdcUpdateCounter
	}).(pulumi.Float64Output)
}

// Number of data errors occurred
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.DataErrorsCounter
	}).(pulumi.Float64Output)
}

// Name of the database
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEndedOn
	}).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadStartedOn
	}).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.FullLoadTotalRows
	}).(pulumi.Float64Output)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.LastModifiedTime
	}).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.TotalChangesApplied
	}).(pulumi.Float64Output)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting interface{} `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Tables selected for migration
	SelectedTables []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput` via:
//
//	MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.Input `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tables selected for migration
	SelectedTables MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput` via:
//
//	MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray{ MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs{...} }
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) MigrationSetting() pulumi.AnyOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) interface{} { return v.MigrationSetting }).(pulumi.AnyOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tables selected for migration
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) SelectedTables() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput {
		return v.SelectedTables
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting interface{} `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Tables selected for migration
	SelectedTables []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse `pulumi:"selectedTables"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration settings which tune the migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.AnyOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) interface{} {
		return v.MigrationSetting
	}).(pulumi.AnyOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tables selected for migration
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) SelectedTables() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse {
		return v.SelectedTables
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) *string {
		return v.TargetDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput)
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput struct {
	// Name of the table to migrate
	Name *string `pulumi:"name"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput` via:
//
//	MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs struct {
	// Name of the table to migrate
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput` via:
//
//	MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray{ MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArgs{...} }
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputInput

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput)
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return o
}

// Name of the table to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput)
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse struct {
	// Name of the table to migrate
	Name *string `pulumi:"name"`
}

// Selected tables for the migration
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return o
}

// Name of the table to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponse)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//	MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields pulumi.StringPtrInput `pulumi:"encryptedKeyForSecureFields"`
	// Databases to migrate
	SelectedDatabases MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput).ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtr and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//	        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs

func MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtr(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
		return &v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// encrypted key for secure fields
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *string {
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) SourceConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput) TargetConnectionInfo() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) PostgreSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) Elem() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput
		return ret
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput)
}

// encrypted key for secure fields
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput) *PostgreSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

// encrypted key for secure fields
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *string {
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse
		return ret
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// encrypted key for secure fields
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartedOn
	}).(pulumi.StringPtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) *string {
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelErrorOutput'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.AppliedChanges
	}).(pulumi.Float64Output)
}

// Number of cdc deletes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcDeleteCounter
	}).(pulumi.Float64Output)
}

// Number of cdc inserts
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcInsertCounter
	}).(pulumi.Float64Output)
}

// Number of cdc updates
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.CdcUpdateCounter
	}).(pulumi.Float64Output)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Migration end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.EndedOn
	}).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadCompletedTables
	}).(pulumi.Float64Output)
}

// Number of tables errored in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadErroredTables
	}).(pulumi.Float64Output)
}

// Number of tables loading in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadLoadingTables
	}).(pulumi.Float64Output)
}

// Number of tables queued in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadQueuedTables
	}).(pulumi.Float64Output)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.IncomingChanges
	}).(pulumi.Float64Output)
}

// Indicates if initial load (full load) has been completed
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.Latency
	}).(pulumi.Float64Output)
}

// Migration state that this database is in
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.MigrationState
	}).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// List of error events
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// List of error events
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Number of databases to include
	DatabaseCount *float64 `pulumi:"databaseCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server type.
	SourceServerType string `pulumi:"sourceServerType"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Migration status
	State string `pulumi:"state"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server type.
	TargetServerType string `pulumi:"targetServerType"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Number of databases to include
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) DatabaseCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) *float64 {
		return v.DatabaseCount
	}).(pulumi.Float64PtrOutput)
}

// Migration end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.EndedOn
	}).(pulumi.StringOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Source server name
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServer
	}).(pulumi.StringOutput)
}

// Source server type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerType
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

// Migration status
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.State
	}).(pulumi.StringOutput)
}

// Target server name
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServer
	}).(pulumi.StringOutput)
}

// Target server type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerType
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.CdcDeleteCounter
	}).(pulumi.Float64Output)
}

// Number of applied inserts
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.CdcInsertCounter
	}).(pulumi.Float64Output)
}

// Number of applied updates
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.CdcUpdateCounter
	}).(pulumi.Float64Output)
}

// Number of data errors occurred
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.DataErrorsCounter
	}).(pulumi.Float64Output)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Full load end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEndedOn
	}).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadStartedOn
	}).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.FullLoadTotalRows
	}).(pulumi.Float64Output)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.LastModifiedTime
	}).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.TableName
	}).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.Float64Output {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) float64 {
		return v.TotalChangesApplied
	}).(pulumi.Float64Output)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//	MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn pulumi.StringPtrInput `pulumi:"createdOn"`
	// Task input
	Input MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable pulumi.BoolPtrInput `pulumi:"isCloneable"`
	// task id
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput).ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtr and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrInput` via:
//
//	        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
}

type migratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrType MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs

func MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtr(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrInput {
	return (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrType)(v)
}

func (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties {
		return &v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Task input
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
		return v.Input
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// task id
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Elem() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties
		return ret
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.CreatedOn
	}).(pulumi.StringPtrOutput)
}

// Task input
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Input() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsCloneable
	}).(pulumi.BoolPtrOutput)
}

// task id
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.TaskId
	}).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// DateTime in UTC when the task was created
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// whether the task can be cloned or not
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// task id
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2'.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInput struct {
	// id of the database
	Id *string `pulumi:"id"`
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Settings selected for DB schema migration.
	SchemaSetting interface{} `pulumi:"schemaSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArgs and MigrateSqlServerSqlDbDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputInput` via:
//
//	MigrateSqlServerSqlDbDatabaseInputArgs{...}
type MigrateSqlServerSqlDbDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput
	ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputArgs struct {
	// id of the database
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Settings selected for DB schema migration.
	SchemaSetting pulumi.Input `pulumi:"schemaSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// MigrateSqlServerSqlDbDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArray and MigrateSqlServerSqlDbDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputArrayInput` via:
//
//	MigrateSqlServerSqlDbDatabaseInputArray{ MigrateSqlServerSqlDbDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputArray []MigrateSqlServerSqlDbDatabaseInputInput

func (MigrateSqlServerSqlDbDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputOutput) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputOutput) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return o
}

// id of the database
func (o MigrateSqlServerSqlDbDatabaseInputOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Settings selected for DB schema migration.
func (o MigrateSqlServerSqlDbDatabaseInputOutput) SchemaSetting() pulumi.AnyOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) interface{} { return v.SchemaSetting }).(pulumi.AnyOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponse struct {
	// id of the database
	Id *string `pulumi:"id"`
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Settings selected for DB schema migration.
	SchemaSetting interface{} `pulumi:"schemaSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

// id of the database
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Settings selected for DB schema migration.
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) SchemaSetting() pulumi.AnyOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) interface{} { return v.SchemaSetting }).(pulumi.AnyOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputResponseOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInput struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateSqlServerSqlDbSyncDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputArgs and MigrateSqlServerSqlDbSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputInput` via:
//
//	MigrateSqlServerSqlDbSyncDatabaseInputArgs{...}
type MigrateSqlServerSqlDbSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputArgs struct {
	// Unique identifier for database
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Schema name to be migrated
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateSqlServerSqlDbSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputOutput)
}

// MigrateSqlServerSqlDbSyncDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputArray and MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputArrayInput` via:
//
//	MigrateSqlServerSqlDbSyncDatabaseInputArray{ MigrateSqlServerSqlDbSyncDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbSyncDatabaseInputArray []MigrateSqlServerSqlDbSyncDatabaseInputInput

func (MigrateSqlServerSqlDbSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArray) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArray) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return o
}

// Unique identifier for database
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of database
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Schema name to be migrated
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Target database name
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInput) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbSyncDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlDbSyncDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbSyncDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponse struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return o
}

// Unique identifier for database
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of database
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Schema name to be migrated
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Target database name
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskInput
func (val *MigrateSqlServerSqlDbSyncTaskInput) Defaults() *MigrateSqlServerSqlDbSyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigrateSqlServerSqlDbSyncTaskInputInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputArgs and MigrateSqlServerSqlDbSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputInput` via:
//
//	MigrateSqlServerSqlDbSyncTaskInputArgs{...}
type MigrateSqlServerSqlDbSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput
	ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskInputArgs
func (val *MigrateSqlServerSqlDbSyncTaskInputArgs) Defaults() *MigrateSqlServerSqlDbSyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlDbSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputOutput)
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputOutput).ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbSyncTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputArgs, MigrateSqlServerSqlDbSyncTaskInputPtr and MigrateSqlServerSqlDbSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputPtrInput` via:
//
//	        MigrateSqlServerSqlDbSyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlDbSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput
	ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput
}

type migrateSqlServerSqlDbSyncTaskInputPtrType MigrateSqlServerSqlDbSyncTaskInputArgs

func MigrateSqlServerSqlDbSyncTaskInputPtr(v *MigrateSqlServerSqlDbSyncTaskInputArgs) MigrateSqlServerSqlDbSyncTaskInputPtrInput {
	return (*migrateSqlServerSqlDbSyncTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbSyncTaskInputPtrType) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbSyncTaskInputPtrType) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlDbSyncTaskInput) *MigrateSqlServerSqlDbSyncTaskInput {
		return &v
	}).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInput) *MigrationValidationOptions { return v.ValidationOptions }).(MigrationValidationOptionsPtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) Elem() MigrateSqlServerSqlDbSyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) MigrateSqlServerSqlDbSyncTaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlDbSyncTaskInput
		return ret
	}).(MigrateSqlServerSqlDbSyncTaskInputOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputPtrOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInput) *MigrationValidationOptions {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskInputResponse
func (val *MigrateSqlServerSqlDbSyncTaskInputResponse) Defaults() *MigrateSqlServerSqlDbSyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutput() MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) MigrateSqlServerSqlDbSyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlDbSyncTaskInputResponse
		return ret
	}).(MigrateSqlServerSqlDbSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'DatabaseLevelErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelErrorOutput'.
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges float64 `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables float64 `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables float64 `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables float64 `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables float64 `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges float64 `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency float64 `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 { return v.AppliedChanges }).(pulumi.Float64Output)
}

// Number of cdc deletes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 { return v.CdcDeleteCounter }).(pulumi.Float64Output)
}

// Number of cdc inserts
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 { return v.CdcInsertCounter }).(pulumi.Float64Output)
}

// Number of cdc updates
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 { return v.CdcUpdateCounter }).(pulumi.Float64Output)
}

// Name of the database
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadCompletedTables
	}).(pulumi.Float64Output)
}

// Number of tables errored in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadErroredTables
	}).(pulumi.Float64Output)
}

// Number of tables loading in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadLoadingTables
	}).(pulumi.Float64Output)
}

// Number of tables queued in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 {
		return v.FullLoadQueuedTables
	}).(pulumi.Float64Output)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 { return v.IncomingChanges }).(pulumi.Float64Output)
}

// Indicates if initial load (full load) has been completed
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) float64 { return v.Latency }).(pulumi.Float64Output)
}

// Migration state that this database is in
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Count of databases
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) DatabaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) int { return v.DatabaseCount }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.SourceServer }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.TargetServer }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter float64 `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter float64 `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter float64 `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter float64 `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows float64 `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied float64 `pulumi:"totalChangesApplied"`
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) float64 { return v.CdcDeleteCounter }).(pulumi.Float64Output)
}

// Number of applied inserts
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) float64 { return v.CdcInsertCounter }).(pulumi.Float64Output)
}

// Number of applied updates
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) float64 { return v.CdcUpdateCounter }).(pulumi.Float64Output)
}

// Number of data errors occurred
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) float64 { return v.DataErrorsCounter }).(pulumi.Float64Output)
}

// Name of the database
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadEndedOn }).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadEstFinishTime }).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadStartedOn }).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) float64 { return v.FullLoadTotalRows }).(pulumi.Float64Output)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) float64 { return v.TotalChangesApplied }).(pulumi.Float64Output)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskProperties
func (val *MigrateSqlServerSqlDbSyncTaskProperties) Defaults() *MigrateSqlServerSqlDbSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateSqlServerSqlDbSyncTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskPropertiesArgs and MigrateSqlServerSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskPropertiesInput` via:
//
//	MigrateSqlServerSqlDbSyncTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput
	ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlDbSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskPropertiesArgs
func (val *MigrateSqlServerSqlDbSyncTaskPropertiesArgs) Defaults() *MigrateSqlServerSqlDbSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskPropertiesOutput)
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput() MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskPropertiesOutput).ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbSyncTaskPropertiesPtrInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskPropertiesArgs, MigrateSqlServerSqlDbSyncTaskPropertiesPtr and MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskPropertiesPtrInput` via:
//
//	        MigrateSqlServerSqlDbSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlDbSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput() MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput
	ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput
}

type migrateSqlServerSqlDbSyncTaskPropertiesPtrType MigrateSqlServerSqlDbSyncTaskPropertiesArgs

func MigrateSqlServerSqlDbSyncTaskPropertiesPtr(v *MigrateSqlServerSqlDbSyncTaskPropertiesArgs) MigrateSqlServerSqlDbSyncTaskPropertiesPtrInput {
	return (*migrateSqlServerSqlDbSyncTaskPropertiesPtrType)(v)
}

func (*migrateSqlServerSqlDbSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbSyncTaskPropertiesPtrType) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput() MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbSyncTaskPropertiesPtrType) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput() MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o.ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlDbSyncTaskProperties) *MigrateSqlServerSqlDbSyncTaskProperties {
		return &v
	}).(MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) Input() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskProperties) *MigrateSqlServerSqlDbSyncTaskInput { return v.Input }).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput() MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput) Elem() MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskProperties) MigrateSqlServerSqlDbSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlDbSyncTaskProperties
		return ret
	}).(MigrateSqlServerSqlDbSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput) Input() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskProperties) *MigrateSqlServerSqlDbSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbSyncTaskPropertiesResponse
func (val *MigrateSqlServerSqlDbSyncTaskPropertiesResponse) Defaults() *MigrateSqlServerSqlDbSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput() MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) *MigrateSqlServerSqlDbSyncTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDb.Sync'.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInput struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Date and time relative to UTC when the migration was started on
	StartedOn *string `pulumi:"startedOn"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInput
func (val *MigrateSqlServerSqlDbTaskInput) Defaults() *MigrateSqlServerSqlDbTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigrateSqlServerSqlDbTaskInputInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs and MigrateSqlServerSqlDbTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputInput` via:
//
//	MigrateSqlServerSqlDbTaskInputArgs{...}
type MigrateSqlServerSqlDbTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput
	ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputArgs struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields pulumi.StringPtrInput `pulumi:"encryptedKeyForSecureFields"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Date and time relative to UTC when the migration was started on
	StartedOn pulumi.StringPtrInput `pulumi:"startedOn"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInputArgs
func (val *MigrateSqlServerSqlDbTaskInputArgs) Defaults() *MigrateSqlServerSqlDbTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput)
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput).ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs, MigrateSqlServerSqlDbTaskInputPtr and MigrateSqlServerSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputPtrInput` via:
//
//	        MigrateSqlServerSqlDbTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput
	ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput
}

type migrateSqlServerSqlDbTaskInputPtrType MigrateSqlServerSqlDbTaskInputArgs

func MigrateSqlServerSqlDbTaskInputPtr(v *MigrateSqlServerSqlDbTaskInputArgs) MigrateSqlServerSqlDbTaskInputPtrInput {
	return (*migrateSqlServerSqlDbTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlDbTaskInput) *MigrateSqlServerSqlDbTaskInput {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlDbTaskInputOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) []MigrateSqlServerSqlDbDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlDbTaskInputOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

// Options for enabling various post migration validations. Available options,
//
//	1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//	2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInput) *MigrationValidationOptions { return v.ValidationOptions }).(MigrationValidationOptionsPtrOutput)
}

type MigrateSqlServerSqlDbTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputPtrOutput) Elem() MigrateSqlServerSqlDbTaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) MigrateSqlServerSqlDbTaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlDbTaskInput
		return ret
	}).(MigrateSqlServerSqlDbTaskInputOutput)
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) []MigrateSqlServerSqlDbDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Options for enabling various post migration validations. Available options,
//
//	1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//	2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputPtrOutput) ValidationOptions() MigrationValidationOptionsPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInput) *MigrationValidationOptions {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponse struct {
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Date and time relative to UTC when the migration was started on
	StartedOn *string `pulumi:"startedOn"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskInputResponse
func (val *MigrateSqlServerSqlDbTaskInputResponse) Defaults() *MigrateSqlServerSqlDbTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Options for enabling various post migration validations. Available options,
//
//	1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//	2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) MigrateSqlServerSqlDbTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlDbTaskInputResponse
		return ret
	}).(MigrateSqlServerSqlDbTaskInputResponseOutput)
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Options for enabling various post migration validations. Available options,
//
//	1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//	2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse struct {
	// Name of the item
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount float64 `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects float64 `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted float64 `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary map[string]DataItemMigrationSummaryResultResponse `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of database/object errors.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) float64 { return v.ErrorCount }).(pulumi.Float64Output)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Number of objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjects() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) float64 { return v.NumberOfObjects }).(pulumi.Float64Output)
}

// Number of successfully completed objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjectsCompleted() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) float64 {
		return v.NumberOfObjectsCompleted
	}).(pulumi.Float64Output)
}

// Summary of object results in the migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ObjectSummary() DataItemMigrationSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) map[string]DataItemMigrationSummaryResultResponse {
		return v.ObjectSummary
	}).(DataItemMigrationSummaryResultResponseMapOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration stage that this database is in
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse struct {
	// Provides data integrity validation result between the source and target tables that are migrated.
	DataIntegrityValidationResult DataIntegrityValidationResultResponse `pulumi:"dataIntegrityValidationResult"`
	// Validation end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Results of some of the query execution result between source and target database
	QueryAnalysisValidationResult QueryAnalysisValidationResultResponse `pulumi:"queryAnalysisValidationResult"`
	// Result type
	// Expected value is 'MigrationDatabaseLevelValidationOutput'.
	ResultType string `pulumi:"resultType"`
	// Provides schema comparison result between source and target database
	SchemaValidationResult SchemaComparisonValidationResultResponse `pulumi:"schemaValidationResult"`
	// Name of the source database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Validation start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of validation at the database level
	Status string `pulumi:"status"`
	// Name of the target database
	TargetDatabaseName string `pulumi:"targetDatabaseName"`
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

// Provides data integrity validation result between the source and target tables that are migrated.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) DataIntegrityValidationResult() DataIntegrityValidationResultResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) DataIntegrityValidationResultResponse {
		return v.DataIntegrityValidationResult
	}).(DataIntegrityValidationResultResponseOutput)
}

// Validation end time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.MigrationId
	}).(pulumi.StringOutput)
}

// Results of some of the query execution result between source and target database
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) QueryAnalysisValidationResult() QueryAnalysisValidationResultResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) QueryAnalysisValidationResultResponse {
		return v.QueryAnalysisValidationResult
	}).(QueryAnalysisValidationResultResponseOutput)
}

// Result type
// Expected value is 'MigrationDatabaseLevelValidationOutput'.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Provides schema comparison result between source and target database
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) SchemaValidationResult() SchemaComparisonValidationResultResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) SchemaComparisonValidationResultResponse {
		return v.SchemaValidationResult
	}).(SchemaComparisonValidationResultResponseOutput)
}

// Name of the source database
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.SourceDatabaseName
	}).(pulumi.StringOutput)
}

// Validation start time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

// Current status of validation at the database level
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Name of the target database
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) TargetDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.TargetDatabaseName
	}).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary map[string]DatabaseSummaryResultResponse `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds float64 `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Migration Validation Results
	MigrationValidationResult *MigrationValidationResultResponse `pulumi:"migrationValidationResult"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

// Summary of database results in the migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DatabaseSummary() DatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) map[string]DatabaseSummaryResultResponse {
		return v.DatabaseSummary
	}).(DatabaseSummaryResultResponseMapOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Duration of task execution in seconds.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DurationInSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) float64 { return v.DurationInSeconds }).(pulumi.Float64Output)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Migration Report Result, provides unique url for downloading your migration report.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationReportResult() MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationReportResultResponse {
		return v.MigrationReportResult
	}).(MigrationReportResultResponsePtrOutput)
}

// Migration Validation Results
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationValidationResult() MigrationValidationResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationValidationResultResponse {
		return v.MigrationValidationResult
	}).(MigrationValidationResultResponsePtrOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Migration status message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount float64 `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount float64 `pulumi:"itemsCount"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	// Expected value is 'TableLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCompletedCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) float64 { return v.ItemsCompletedCount }).(pulumi.Float64Output)
}

// Number of items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCount() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) float64 { return v.ItemsCount }).(pulumi.Float64Output)
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ObjectName }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'TableLevelOutput'.
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponse struct {
	// Migration validation result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Result type
	// Expected value is 'MigrationValidationOutput'.
	ResultType string `pulumi:"resultType"`
	// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
	Status string `pulumi:"status"`
	// Validation summary results for each database
	SummaryResults map[string]MigrationValidationDatabaseSummaryResultResponse `pulumi:"summaryResults"`
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

// Migration validation result identifier
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.MigrationId }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationValidationOutput'.
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Validation summary results for each database
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) SummaryResults() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) map[string]MigrationValidationDatabaseSummaryResultResponse {
		return v.SummaryResults
	}).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskProperties
func (val *MigrateSqlServerSqlDbTaskProperties) Defaults() *MigrateSqlServerSqlDbTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateSqlServerSqlDbTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesArgs and MigrateSqlServerSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesInput` via:
//
//	MigrateSqlServerSqlDbTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput
	ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn pulumi.StringPtrInput `pulumi:"createdOn"`
	// Task input
	Input MigrateSqlServerSqlDbTaskInputPtrInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable pulumi.BoolPtrInput `pulumi:"isCloneable"`
	// task id
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskPropertiesArgs
func (val *MigrateSqlServerSqlDbTaskPropertiesArgs) Defaults() *MigrateSqlServerSqlDbTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesOutput)
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutput() MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesOutput).ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskPropertiesPtrInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesArgs, MigrateSqlServerSqlDbTaskPropertiesPtr and MigrateSqlServerSqlDbTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesPtrInput` via:
//
//	        MigrateSqlServerSqlDbTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlDbTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesPtrOutput() MigrateSqlServerSqlDbTaskPropertiesPtrOutput
	ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesPtrOutput
}

type migrateSqlServerSqlDbTaskPropertiesPtrType MigrateSqlServerSqlDbTaskPropertiesArgs

func MigrateSqlServerSqlDbTaskPropertiesPtr(v *MigrateSqlServerSqlDbTaskPropertiesArgs) MigrateSqlServerSqlDbTaskPropertiesPtrInput {
	return (*migrateSqlServerSqlDbTaskPropertiesPtrType)(v)
}

func (*migrateSqlServerSqlDbTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskPropertiesPtrType) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutput() MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskPropertiesPtrType) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesPtrOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutput() MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlDbTaskProperties) *MigrateSqlServerSqlDbTaskProperties {
		return &v
	}).(MigrateSqlServerSqlDbTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) Input() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) *MigrateSqlServerSqlDbTaskInput { return v.Input }).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// task id
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.SqlDb'.
func (o MigrateSqlServerSqlDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutput() MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) ToMigrateSqlServerSqlDbTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) Elem() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskProperties) MigrateSqlServerSqlDbTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlDbTaskProperties
		return ret
	}).(MigrateSqlServerSqlDbTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.CreatedOn
	}).(pulumi.StringPtrOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) Input() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskProperties) *MigrateSqlServerSqlDbTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsCloneable
	}).(pulumi.BoolPtrOutput)
}

// task id
func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.TaskId
	}).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.SqlDb'.
func (o MigrateSqlServerSqlDbTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInputResponse `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.SqlDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlDbTaskPropertiesResponse
func (val *MigrateSqlServerSqlDbTaskPropertiesResponse) Defaults() *MigrateSqlServerSqlDbTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// whether the task can be cloned or not
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// task id
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.SqlDb'.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInput struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// id of the database
	Id *string `pulumi:"id"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArgs and MigrateSqlServerSqlMIDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputInput` via:
//
//	MigrateSqlServerSqlMIDatabaseInputArgs{...}
type MigrateSqlServerSqlMIDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput
	ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputArgs struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths pulumi.StringArrayInput `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// id of the database
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// MigrateSqlServerSqlMIDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArray and MigrateSqlServerSqlMIDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputArrayInput` via:
//
//	MigrateSqlServerSqlMIDatabaseInputArray{ MigrateSqlServerSqlMIDatabaseInputArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputArray []MigrateSqlServerSqlMIDatabaseInputInput

func (MigrateSqlServerSqlMIDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputOutput) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputOutput) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return o
}

// The list of backup files to be used in case of existing backups.
func (o MigrateSqlServerSqlMIDatabaseInputOutput) BackupFilePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) []string { return v.BackupFilePaths }).(pulumi.StringArrayOutput)
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// id of the database
func (o MigrateSqlServerSqlMIDatabaseInputOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInput) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInput {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInput)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponse struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// id of the database
	Id *string `pulumi:"id"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

// The list of backup files to be used in case of existing backups.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFilePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) []string { return v.BackupFilePaths }).(pulumi.StringArrayOutput)
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// id of the database
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputResponseOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Number of database migrations to start in parallel
	NumberOfParallelDatabaseMigrations *float64 `pulumi:"numberOfParallelDatabaseMigrations"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskInput
func (val *MigrateSqlServerSqlMISyncTaskInput) Defaults() *MigrateSqlServerSqlMISyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// MigrateSqlServerSqlMISyncTaskInputInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputArgs and MigrateSqlServerSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputInput` via:
//
//	MigrateSqlServerSqlMISyncTaskInputArgs{...}
type MigrateSqlServerSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput
	ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Number of database migrations to start in parallel
	NumberOfParallelDatabaseMigrations pulumi.Float64PtrInput `pulumi:"numberOfParallelDatabaseMigrations"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskInputArgs
func (val *MigrateSqlServerSqlMISyncTaskInputArgs) Defaults() *MigrateSqlServerSqlMISyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputOutput)
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputOutput).ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMISyncTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputArgs, MigrateSqlServerSqlMISyncTaskInputPtr and MigrateSqlServerSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputPtrInput` via:
//
//	        MigrateSqlServerSqlMISyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput
	ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput
}

type migrateSqlServerSqlMISyncTaskInputPtrType MigrateSqlServerSqlMISyncTaskInputArgs

func MigrateSqlServerSqlMISyncTaskInputPtr(v *MigrateSqlServerSqlMISyncTaskInputArgs) MigrateSqlServerSqlMISyncTaskInputPtrInput {
	return (*migrateSqlServerSqlMISyncTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMISyncTaskInputPtrType) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMISyncTaskInputPtrType) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMISyncTaskInputOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlMISyncTaskInput) *MigrateSqlServerSqlMISyncTaskInput {
		return &v
	}).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputOutput) AzureApp() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) AzureActiveDirectoryApp { return v.AzureApp }).(AzureActiveDirectoryAppOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Number of database migrations to start in parallel
func (o MigrateSqlServerSqlMISyncTaskInputOutput) NumberOfParallelDatabaseMigrations() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) *float64 { return v.NumberOfParallelDatabaseMigrations }).(pulumi.Float64PtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputOutput) TargetConnectionInfo() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInput) MiSqlConnectionInfo { return v.TargetConnectionInfo }).(MiSqlConnectionInfoOutput)
}

type MigrateSqlServerSqlMISyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) Elem() MigrateSqlServerSqlMISyncTaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) MigrateSqlServerSqlMISyncTaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlMISyncTaskInput
		return ret
	}).(MigrateSqlServerSqlMISyncTaskInputOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) AzureApp() AzureActiveDirectoryAppPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *AzureActiveDirectoryApp {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Number of database migrations to start in parallel
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) NumberOfParallelDatabaseMigrations() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfParallelDatabaseMigrations
	}).(pulumi.Float64PtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputPtrOutput) TargetConnectionInfo() MiSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInput) *MiSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Number of database migrations to start in parallel
	NumberOfParallelDatabaseMigrations *float64 `pulumi:"numberOfParallelDatabaseMigrations"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskInputResponse
func (val *MigrateSqlServerSqlMISyncTaskInputResponse) Defaults() *MigrateSqlServerSqlMISyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponseOutput() MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse { return v.AzureApp }).(AzureActiveDirectoryAppResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Number of database migrations to start in parallel
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) NumberOfParallelDatabaseMigrations() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) *float64 {
		return v.NumberOfParallelDatabaseMigrations
	}).(pulumi.Float64PtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) MigrateSqlServerSqlMISyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlMISyncTaskInputResponse
		return ret
	}).(MigrateSqlServerSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Number of database migrations to start in parallel
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) NumberOfParallelDatabaseMigrations() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfParallelDatabaseMigrations
	}).(pulumi.Float64PtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse struct {
	// Backup sets that are currently active (Either being uploaded or getting restored)
	ActiveBackupSets []BackupSetInfoResponse `pulumi:"activeBackupSets"`
	// Name of container created in the Azure Storage account where backups are copied to
	ContainerName string `pulumi:"containerName"`
	// Database migration end time
	EndedOn string `pulumi:"endedOn"`
	// prefix string to use for querying errors for this database
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Details of full backup set
	FullBackupSetInfo BackupSetInfoResponse `pulumi:"fullBackupSetInfo"`
	// Result identifier
	Id string `pulumi:"id"`
	// Whether full backup has been applied to the target database or not
	IsFullBackupRestored bool `pulumi:"isFullBackupRestored"`
	// Last applied backup set information
	LastRestoredBackupSetInfo BackupSetInfoResponse `pulumi:"lastRestoredBackupSetInfo"`
	// Current state of database
	MigrationState string `pulumi:"migrationState"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Database migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Backup sets that are currently active (Either being uploaded or getting restored)
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ActiveBackupSets() BackupSetInfoResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) []BackupSetInfoResponse {
		return v.ActiveBackupSets
	}).(BackupSetInfoResponseArrayOutput)
}

// Name of container created in the Azure Storage account where backups are copied to
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Database migration end time
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// prefix string to use for querying errors for this database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Details of full backup set
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) FullBackupSetInfo() BackupSetInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) BackupSetInfoResponse {
		return v.FullBackupSetInfo
	}).(BackupSetInfoResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Whether full backup has been applied to the target database or not
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) IsFullBackupRestored() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) bool { return v.IsFullBackupRestored }).(pulumi.BoolOutput)
}

// Last applied backup set information
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) LastRestoredBackupSetInfo() BackupSetInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) BackupSetInfoResponse {
		return v.LastRestoredBackupSetInfo
	}).(BackupSetInfoResponseOutput)
}

// Current state of database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

// Database migration start time
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Number of database level errors
	DatabaseErrorCount int `pulumi:"databaseErrorCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server name
	SourceServerName string `pulumi:"sourceServerName"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server name
	TargetServerName string `pulumi:"targetServerName"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Count of databases
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) DatabaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) int { return v.DatabaseCount }).(pulumi.IntOutput)
}

// Number of database level errors
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) DatabaseErrorCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) int { return v.DatabaseErrorCount }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server name
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.SourceServerName }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server name
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.TargetServerName }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskProperties
func (val *MigrateSqlServerSqlMISyncTaskProperties) Defaults() *MigrateSqlServerSqlMISyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateSqlServerSqlMISyncTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMISyncTaskPropertiesArgs and MigrateSqlServerSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskPropertiesInput` via:
//
//	MigrateSqlServerSqlMISyncTaskPropertiesArgs{...}
type MigrateSqlServerSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput
	ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn pulumi.StringPtrInput `pulumi:"createdOn"`
	// Task input
	Input MigrateSqlServerSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskPropertiesArgs
func (val *MigrateSqlServerSqlMISyncTaskPropertiesArgs) Defaults() *MigrateSqlServerSqlMISyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskPropertiesOutput)
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutput() MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskPropertiesOutput).ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMISyncTaskPropertiesPtrInput is an input type that accepts MigrateSqlServerSqlMISyncTaskPropertiesArgs, MigrateSqlServerSqlMISyncTaskPropertiesPtr and MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskPropertiesPtrInput` via:
//
//	        MigrateSqlServerSqlMISyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlMISyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutput() MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput
	ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput
}

type migrateSqlServerSqlMISyncTaskPropertiesPtrType MigrateSqlServerSqlMISyncTaskPropertiesArgs

func MigrateSqlServerSqlMISyncTaskPropertiesPtr(v *MigrateSqlServerSqlMISyncTaskPropertiesArgs) MigrateSqlServerSqlMISyncTaskPropertiesPtrInput {
	return (*migrateSqlServerSqlMISyncTaskPropertiesPtrType)(v)
}

func (*migrateSqlServerSqlMISyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i *migrateSqlServerSqlMISyncTaskPropertiesPtrType) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutput() MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMISyncTaskPropertiesPtrType) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutput() MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o.ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlMISyncTaskProperties) *MigrateSqlServerSqlMISyncTaskProperties {
		return &v
	}).(MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskProperties) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Task input
func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) Input() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskProperties) *MigrateSqlServerSqlMISyncTaskInput { return v.Input }).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
func (o MigrateSqlServerSqlMISyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutput() MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) Elem() MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskProperties) MigrateSqlServerSqlMISyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlMISyncTaskProperties
		return ret
	}).(MigrateSqlServerSqlMISyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.CreatedOn
	}).(pulumi.StringPtrOutput)
}

// Task input
func (o MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) Input() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskProperties) *MigrateSqlServerSqlMISyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
func (o MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMISyncTaskPropertiesResponse
func (val *MigrateSqlServerSqlMISyncTaskPropertiesResponse) Defaults() *MigrateSqlServerSqlMISyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutput() MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) *MigrateSqlServerSqlMISyncTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI.Sync.LRS'.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInput struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Date and time relative to UTC when the migration was started on
	StartedOn *string `pulumi:"startedOn"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskInput
func (val *MigrateSqlServerSqlMITaskInput) Defaults() *MigrateSqlServerSqlMITaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigrateSqlServerSqlMITaskInputInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs and MigrateSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputInput` via:
//
//	MigrateSqlServerSqlMITaskInputArgs{...}
type MigrateSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput
	ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputArgs struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName pulumi.StringPtrInput `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields pulumi.StringPtrInput `pulumi:"encryptedKeyForSecureFields"`
	// Agent Jobs to migrate.
	SelectedAgentJobs pulumi.StringArrayInput `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Date and time relative to UTC when the migration was started on
	StartedOn pulumi.StringPtrInput `pulumi:"startedOn"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskInputArgs
func (val *MigrateSqlServerSqlMITaskInputArgs) Defaults() *MigrateSqlServerSqlMITaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return i.ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput)
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput).ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs, MigrateSqlServerSqlMITaskInputPtr and MigrateSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputPtrInput` via:
//
//	        MigrateSqlServerSqlMITaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput
	ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputPtrOutput
}

type migrateSqlServerSqlMITaskInputPtrType MigrateSqlServerSqlMITaskInputArgs

func MigrateSqlServerSqlMITaskInputPtr(v *MigrateSqlServerSqlMITaskInputArgs) MigrateSqlServerSqlMITaskInputPtrInput {
	return (*migrateSqlServerSqlMITaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputOutput) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlMITaskInput) *MigrateSqlServerSqlMITaskInput {
		return &v
	}).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *string { return v.AadDomainName }).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupBlobShare() BlobShareOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) BlobShare { return v.BackupBlobShare }).(BlobShareOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlMITaskInputOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) []string { return v.SelectedAgentJobs }).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlMITaskInputOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type MigrateSqlServerSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputPtrOutput) Elem() MigrateSqlServerSqlMITaskInputOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) MigrateSqlServerSqlMITaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlMITaskInput
		return ret
	}).(MigrateSqlServerSqlMITaskInputOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputPtrOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.AadDomainName
	}).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupBlobShare() BlobSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *BlobShare {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobSharePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlMITaskInputPtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedAgentJobs
	}).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlMITaskInputPtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponse struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// encrypted key for secure fields
	EncryptedKeyForSecureFields *string `pulumi:"encryptedKeyForSecureFields"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Date and time relative to UTC when the migration was started on
	StartedOn *string `pulumi:"startedOn"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskInputResponse
func (val *MigrateSqlServerSqlMITaskInputResponse) Defaults() *MigrateSqlServerSqlMITaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputResponseOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.AadDomainName }).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) BlobShareResponse { return v.BackupBlobShare }).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlMITaskInputResponseOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.EncryptedKeyForSecureFields }).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedAgentJobs }).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlMITaskInputResponseOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) MigrateSqlServerSqlMITaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlMITaskInputResponse
		return ret
	}).(MigrateSqlServerSqlMITaskInputResponseOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.AadDomainName
	}).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// encrypted key for secure fields
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) EncryptedKeyForSecureFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptedKeyForSecureFields
	}).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedAgentJobs
	}).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Date and time relative to UTC when the migration was started on
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartedOn
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration errors and warnings per job
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Agent Job name.
	Name string `pulumi:"name"`
	// Result type
	// Expected value is 'AgentJobLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput() MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration errors and warnings per job
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original Agent Job.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Agent Job name.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'AgentJobLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'DatabaseLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Current stage of migration
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the database
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'DatabaseLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Current stage of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	// Expected value is 'ErrorOutput'.
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlMITaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'ErrorOutput'.
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponse struct {
	// Login migration end time
	EndedOn string `pulumi:"endedOn"`
	// Login migration errors and warnings per login
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Login name.
	LoginName string `pulumi:"loginName"`
	// Login migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'LoginLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Current stage of login
	Stage string `pulumi:"stage"`
	// Login migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of login
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput() MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

// Login migration end time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Login migration errors and warnings per login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Login name.
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.LoginName }).(pulumi.StringOutput)
}

// Login migration progress message
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'LoginLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current stage of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Login migration start time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponse struct {
	// Selected agent jobs as a map from name to id
	AgentJobs map[string]string `pulumi:"agentJobs"`
	// Selected databases as a map from database name to database id
	Databases map[string]string `pulumi:"databases"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Selected logins as a map from name to id
	Logins map[string]string `pulumi:"logins"`
	// Migration progress message
	Message string `pulumi:"message"`
	// List of orphaned users.
	OrphanedUsersInfo []OrphanedUserInfoResponse `pulumi:"orphanedUsersInfo"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Map of server role migration results.
	ServerRoleResults map[string]StartMigrationScenarioServerRoleResultResponse `pulumi:"serverRoleResults"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

// Selected agent jobs as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) AgentJobs() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]string { return v.AgentJobs }).(pulumi.StringMapOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]string { return v.Databases }).(pulumi.StringMapOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Selected logins as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Logins() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]string { return v.Logins }).(pulumi.StringMapOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// List of orphaned users.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) OrphanedUsersInfo() OrphanedUserInfoResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []OrphanedUserInfoResponse {
		return v.OrphanedUsersInfo
	}).(OrphanedUserInfoResponseArrayOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Map of server role migration results.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ServerRoleResults() StartMigrationScenarioServerRoleResultResponseMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) map[string]StartMigrationScenarioServerRoleResultResponse {
		return v.ServerRoleResults
	}).(StartMigrationScenarioServerRoleResultResponseMapOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// parent task id
	ParentTaskId *string `pulumi:"parentTaskId"`
	// task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskProperties
func (val *MigrateSqlServerSqlMITaskProperties) Defaults() *MigrateSqlServerSqlMITaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateSqlServerSqlMITaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesArgs and MigrateSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesInput` via:
//
//	MigrateSqlServerSqlMITaskPropertiesArgs{...}
type MigrateSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput
	ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// DateTime in UTC when the task was created
	CreatedOn pulumi.StringPtrInput `pulumi:"createdOn"`
	// Task input
	Input MigrateSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable pulumi.BoolPtrInput `pulumi:"isCloneable"`
	// parent task id
	ParentTaskId pulumi.StringPtrInput `pulumi:"parentTaskId"`
	// task id
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskPropertiesArgs
func (val *MigrateSqlServerSqlMITaskPropertiesArgs) Defaults() *MigrateSqlServerSqlMITaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesOutput)
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesPtrOutput() MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesOutput).ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskPropertiesPtrInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesArgs, MigrateSqlServerSqlMITaskPropertiesPtr and MigrateSqlServerSqlMITaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesPtrInput` via:
//
//	        MigrateSqlServerSqlMITaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateSqlServerSqlMITaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesPtrOutput() MigrateSqlServerSqlMITaskPropertiesPtrOutput
	ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesPtrOutput
}

type migrateSqlServerSqlMITaskPropertiesPtrType MigrateSqlServerSqlMITaskPropertiesArgs

func MigrateSqlServerSqlMITaskPropertiesPtr(v *MigrateSqlServerSqlMITaskPropertiesArgs) MigrateSqlServerSqlMITaskPropertiesPtrInput {
	return (*migrateSqlServerSqlMITaskPropertiesPtrType)(v)
}

func (*migrateSqlServerSqlMITaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskPropertiesPtrType) ToMigrateSqlServerSqlMITaskPropertiesPtrOutput() MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskPropertiesPtrType) ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesPtrOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesPtrOutput() MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return o.ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskPropertiesOutput) ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSqlServerSqlMITaskProperties) *MigrateSqlServerSqlMITaskProperties {
		return &v
	}).(MigrateSqlServerSqlMITaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMITaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlMITaskPropertiesOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesOutput) Input() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) *MigrateSqlServerSqlMITaskInput { return v.Input }).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigrateSqlServerSqlMITaskPropertiesOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// parent task id
func (o MigrateSqlServerSqlMITaskPropertiesOutput) ParentTaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) *string { return v.ParentTaskId }).(pulumi.StringPtrOutput)
}

// task id
func (o MigrateSqlServerSqlMITaskPropertiesOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
func (o MigrateSqlServerSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) ToMigrateSqlServerSqlMITaskPropertiesPtrOutput() MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) ToMigrateSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesPtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) Elem() MigrateSqlServerSqlMITaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) MigrateSqlServerSqlMITaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateSqlServerSqlMITaskProperties
		return ret
	}).(MigrateSqlServerSqlMITaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.CreatedOn
	}).(pulumi.StringPtrOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) Input() MigrateSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) *MigrateSqlServerSqlMITaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// whether the task can be cloned or not
func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsCloneable
	}).(pulumi.BoolPtrOutput)
}

// parent task id
func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) ParentTaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.ParentTaskId
	}).(pulumi.StringPtrOutput)
}

// task id
func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) *string {
		if v == nil {
			return nil
		}
		return v.TaskId
	}).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
func (o MigrateSqlServerSqlMITaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// DateTime in UTC when the task was created
	CreatedOn *string `pulumi:"createdOn"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// whether the task can be cloned or not
	IsCloneable *bool `pulumi:"isCloneable"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// parent task id
	ParentTaskId *string `pulumi:"parentTaskId"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// task id
	TaskId *string `pulumi:"taskId"`
	// Task type.
	// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSqlServerSqlMITaskPropertiesResponse
func (val *MigrateSqlServerSqlMITaskPropertiesResponse) Defaults() *MigrateSqlServerSqlMITaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// DateTime in UTC when the task was created
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) CreatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *string { return v.CreatedOn }).(pulumi.StringPtrOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// whether the task can be cloned or not
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) IsCloneable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *bool { return v.IsCloneable }).(pulumi.BoolPtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// parent task id
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ParentTaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *string { return v.ParentTaskId }).(pulumi.StringPtrOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// task id
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Task type.
// Expected value is 'Migrate.SqlServer.AzureSqlDbMI'.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInput struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfo `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskInput
func (val *MigrateSsisTaskInput) Defaults() *MigrateSsisTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// MigrateSsisTaskInputInput is an input type that accepts MigrateSsisTaskInputArgs and MigrateSsisTaskInputOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputInput` via:
//
//	MigrateSsisTaskInputArgs{...}
type MigrateSsisTaskInputInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput
	ToMigrateSsisTaskInputOutputWithContext(context.Context) MigrateSsisTaskInputOutput
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputArgs struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoInput `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskInputArgs
func (val *MigrateSsisTaskInputArgs) Defaults() *MigrateSsisTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSsisTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInput)(nil)).Elem()
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput {
	return i.ToMigrateSsisTaskInputOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputOutputWithContext(ctx context.Context) MigrateSsisTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputOutput)
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return i.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputOutput).ToMigrateSsisTaskInputPtrOutputWithContext(ctx)
}

// MigrateSsisTaskInputPtrInput is an input type that accepts MigrateSsisTaskInputArgs, MigrateSsisTaskInputPtr and MigrateSsisTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputPtrInput` via:
//
//	        MigrateSsisTaskInputArgs{...}
//
//	or:
//
//	        nil
type MigrateSsisTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput
	ToMigrateSsisTaskInputPtrOutputWithContext(context.Context) MigrateSsisTaskInputPtrOutput
}

type migrateSsisTaskInputPtrType MigrateSsisTaskInputArgs

func MigrateSsisTaskInputPtr(v *MigrateSsisTaskInputArgs) MigrateSsisTaskInputPtrInput {
	return (*migrateSsisTaskInputPtrType)(v)
}

func (*migrateSsisTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInput)(nil)).Elem()
}

func (i *migrateSsisTaskInputPtrType) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return i.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSsisTaskInputPtrType) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputPtrOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInput)(nil)).Elem()
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput {
	return o
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputOutputWithContext(ctx context.Context) MigrateSsisTaskInputOutput {
	return o
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return o.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (o MigrateSsisTaskInputOutput) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSsisTaskInput) *MigrateSsisTaskInput {
		return &v
	}).(MigrateSsisTaskInputPtrOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSsisTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputOutput) SsisMigrationInfo() SsisMigrationInfoOutput {
	return o.ApplyT(func(v MigrateSsisTaskInput) SsisMigrationInfo { return v.SsisMigrationInfo }).(SsisMigrationInfoOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v MigrateSsisTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type MigrateSsisTaskInputPtrOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInput)(nil)).Elem()
}

func (o MigrateSsisTaskInputPtrOutput) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return o
}

func (o MigrateSsisTaskInputPtrOutput) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return o
}

func (o MigrateSsisTaskInputPtrOutput) Elem() MigrateSsisTaskInputOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) MigrateSsisTaskInput {
		if v != nil {
			return *v
		}
		var ret MigrateSsisTaskInput
		return ret
	}).(MigrateSsisTaskInputOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputPtrOutput) SsisMigrationInfo() SsisMigrationInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) *SsisMigrationInfo {
		if v == nil {
			return nil
		}
		return &v.SsisMigrationInfo
	}).(SsisMigrationInfoPtrOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponse struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoResponse `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskInputResponse
func (val *MigrateSsisTaskInputResponse) Defaults() *MigrateSsisTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponseOutput() MigrateSsisTaskInputResponseOutput {
	return o
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponseOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponseOutput {
	return o
}

// Information for connecting to source
func (o MigrateSsisTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SqlConnectionInfoResponse { return v.SourceConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputResponseOutput) SsisMigrationInfo() SsisMigrationInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SsisMigrationInfoResponse { return v.SsisMigrationInfo }).(SsisMigrationInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type MigrateSsisTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (o MigrateSsisTaskInputResponsePtrOutput) ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSsisTaskInputResponsePtrOutput) ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSsisTaskInputResponsePtrOutput) Elem() MigrateSsisTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) MigrateSsisTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateSsisTaskInputResponse
		return ret
	}).(MigrateSsisTaskInputResponseOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputResponsePtrOutput) SsisMigrationInfo() SsisMigrationInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SsisMigrationInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SsisMigrationInfo
	}).(SsisMigrationInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

type MigrateSsisTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	// Expected value is 'MigrationLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSsisTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ToMigrateSsisTaskOutputMigrationLevelResponseOutput() MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ToMigrateSsisTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'MigrationLevelOutput'.
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Stage of SSIS migration.
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSsisTaskOutputProjectLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Name of the folder
	FolderName string `pulumi:"folderName"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Name of the project
	ProjectName string `pulumi:"projectName"`
	// Result type
	// Expected value is 'SsisProjectLevelOutput'.
	ResultType string `pulumi:"resultType"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSsisTaskOutputProjectLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskOutputProjectLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputProjectLevelResponse)(nil)).Elem()
}

func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ToMigrateSsisTaskOutputProjectLevelResponseOutput() MigrateSsisTaskOutputProjectLevelResponseOutput {
	return o
}

func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ToMigrateSsisTaskOutputProjectLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputProjectLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Name of the folder
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) FolderName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.FolderName }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Name of the project
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Result type
// Expected value is 'SsisProjectLevelOutput'.
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Stage of SSIS migration.
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSsisTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.Ssis'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskProperties
func (val *MigrateSsisTaskProperties) Defaults() *MigrateSsisTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// MigrateSsisTaskPropertiesInput is an input type that accepts MigrateSsisTaskPropertiesArgs and MigrateSsisTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSsisTaskPropertiesInput` via:
//
//	MigrateSsisTaskPropertiesArgs{...}
type MigrateSsisTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput
	ToMigrateSsisTaskPropertiesOutputWithContext(context.Context) MigrateSsisTaskPropertiesOutput
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSsisTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Migrate.Ssis'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskPropertiesArgs
func (val *MigrateSsisTaskPropertiesArgs) Defaults() *MigrateSsisTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MigrateSsisTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskProperties)(nil)).Elem()
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput {
	return i.ToMigrateSsisTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskPropertiesOutput)
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesPtrOutput() MigrateSsisTaskPropertiesPtrOutput {
	return i.ToMigrateSsisTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskPropertiesOutput).ToMigrateSsisTaskPropertiesPtrOutputWithContext(ctx)
}

// MigrateSsisTaskPropertiesPtrInput is an input type that accepts MigrateSsisTaskPropertiesArgs, MigrateSsisTaskPropertiesPtr and MigrateSsisTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrateSsisTaskPropertiesPtrInput` via:
//
//	        MigrateSsisTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type MigrateSsisTaskPropertiesPtrInput interface {
	pulumi.Input

	ToMigrateSsisTaskPropertiesPtrOutput() MigrateSsisTaskPropertiesPtrOutput
	ToMigrateSsisTaskPropertiesPtrOutputWithContext(context.Context) MigrateSsisTaskPropertiesPtrOutput
}

type migrateSsisTaskPropertiesPtrType MigrateSsisTaskPropertiesArgs

func MigrateSsisTaskPropertiesPtr(v *MigrateSsisTaskPropertiesArgs) MigrateSsisTaskPropertiesPtrInput {
	return (*migrateSsisTaskPropertiesPtrType)(v)
}

func (*migrateSsisTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskProperties)(nil)).Elem()
}

func (i *migrateSsisTaskPropertiesPtrType) ToMigrateSsisTaskPropertiesPtrOutput() MigrateSsisTaskPropertiesPtrOutput {
	return i.ToMigrateSsisTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrateSsisTaskPropertiesPtrType) ToMigrateSsisTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskPropertiesPtrOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskProperties)(nil)).Elem()
}

func (o MigrateSsisTaskPropertiesOutput) ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput {
	return o
}

func (o MigrateSsisTaskPropertiesOutput) ToMigrateSsisTaskPropertiesOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesOutput {
	return o
}

func (o MigrateSsisTaskPropertiesOutput) ToMigrateSsisTaskPropertiesPtrOutput() MigrateSsisTaskPropertiesPtrOutput {
	return o.ToMigrateSsisTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrateSsisTaskPropertiesOutput) ToMigrateSsisTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrateSsisTaskProperties) *MigrateSsisTaskProperties {
		return &v
	}).(MigrateSsisTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSsisTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSsisTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSsisTaskPropertiesOutput) Input() MigrateSsisTaskInputPtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskProperties) *MigrateSsisTaskInput { return v.Input }).(MigrateSsisTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.Ssis'.
func (o MigrateSsisTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type MigrateSsisTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskProperties)(nil)).Elem()
}

func (o MigrateSsisTaskPropertiesPtrOutput) ToMigrateSsisTaskPropertiesPtrOutput() MigrateSsisTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSsisTaskPropertiesPtrOutput) ToMigrateSsisTaskPropertiesPtrOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesPtrOutput {
	return o
}

func (o MigrateSsisTaskPropertiesPtrOutput) Elem() MigrateSsisTaskPropertiesOutput {
	return o.ApplyT(func(v *MigrateSsisTaskProperties) MigrateSsisTaskProperties {
		if v != nil {
			return *v
		}
		var ret MigrateSsisTaskProperties
		return ret
	}).(MigrateSsisTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSsisTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MigrateSsisTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o MigrateSsisTaskPropertiesPtrOutput) Input() MigrateSsisTaskInputPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskProperties) *MigrateSsisTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateSsisTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Migrate.Ssis'.
func (o MigrateSsisTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSsisTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Migrate.Ssis'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for MigrateSsisTaskPropertiesResponse
func (val *MigrateSsisTaskPropertiesResponse) Defaults() *MigrateSsisTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSsisTaskPropertiesResponseOutput) ToMigrateSsisTaskPropertiesResponseOutput() MigrateSsisTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSsisTaskPropertiesResponseOutput) ToMigrateSsisTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSsisTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSsisTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSsisTaskPropertiesResponseOutput) Input() MigrateSsisTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) *MigrateSsisTaskInputResponse { return v.Input }).(MigrateSsisTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Migrate.Ssis'.
func (o MigrateSsisTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponse struct {
	// Time stamp to complete
	CommitTimeStamp *string `pulumi:"commitTimeStamp"`
	// Name of database
	DatabaseName string `pulumi:"databaseName"`
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponseOutput() MigrateSyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponseOutput {
	return o
}

// Time stamp to complete
func (o MigrateSyncCompleteCommandInputResponseOutput) CommitTimeStamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) *string { return v.CommitTimeStamp }).(pulumi.StringPtrOutput)
}

// Name of database
func (o MigrateSyncCompleteCommandInputResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

type MigrateSyncCompleteCommandInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) Elem() MigrateSyncCompleteCommandInputResponseOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) MigrateSyncCompleteCommandInputResponse {
		if v != nil {
			return *v
		}
		var ret MigrateSyncCompleteCommandInputResponse
		return ret
	}).(MigrateSyncCompleteCommandInputResponseOutput)
}

// Time stamp to complete
func (o MigrateSyncCompleteCommandInputResponsePtrOutput) CommitTimeStamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommitTimeStamp
	}).(pulumi.StringPtrOutput)
}

// Name of database
func (o MigrateSyncCompleteCommandInputResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
	// Result identifier
	Id string `pulumi:"id"`
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandOutputResponseOutput) ToMigrateSyncCompleteCommandOutputResponseOutput() MigrateSyncCompleteCommandOutputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandOutputResponseOutput) ToMigrateSyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandOutputResponseOutput {
	return o
}

// List of errors that happened during the command execution
func (o MigrateSyncCompleteCommandOutputResponseOutput) Errors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandOutputResponse) []ReportableExceptionResponse { return v.Errors }).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSyncCompleteCommandOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponse struct {
	// Command id
	CommandId *string `pulumi:"commandId"`
	// Command type.
	// Expected value is 'Migrate.Sync.Complete.Database'.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateSyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateSyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandPropertiesResponseOutput) ToMigrateSyncCompleteCommandPropertiesResponseOutput() MigrateSyncCompleteCommandPropertiesResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandPropertiesResponseOutput) ToMigrateSyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandPropertiesResponseOutput {
	return o
}

// Command id
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// Command type.
// Expected value is 'Migrate.Sync.Complete.Database'.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) string { return v.CommandType }).(pulumi.StringOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Command input
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Input() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) *MigrateSyncCompleteCommandInputResponse {
		return v.Input
	}).(MigrateSyncCompleteCommandInputResponsePtrOutput)
}

// Command output. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Output() MigrateSyncCompleteCommandOutputResponseOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) MigrateSyncCompleteCommandOutputResponse {
		return v.Output
	}).(MigrateSyncCompleteCommandOutputResponseOutput)
}

// The state of the command. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponse struct {
	// Whether object is eligible for migration or not.
	IsEligibleForMigration bool `pulumi:"isEligibleForMigration"`
	// Information about eligibility failure for the server object.
	ValidationMessages []string `pulumi:"validationMessages"`
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponseOutput struct{ *pulumi.OutputState }

func (MigrationEligibilityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationEligibilityInfoResponse)(nil)).Elem()
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutput() MigrationEligibilityInfoResponseOutput {
	return o
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutputWithContext(ctx context.Context) MigrationEligibilityInfoResponseOutput {
	return o
}

// Whether object is eligible for migration or not.
func (o MigrationEligibilityInfoResponseOutput) IsEligibleForMigration() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) bool { return v.IsEligibleForMigration }).(pulumi.BoolOutput)
}

// Information about eligibility failure for the server object.
func (o MigrationEligibilityInfoResponseOutput) ValidationMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) []string { return v.ValidationMessages }).(pulumi.StringArrayOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponse struct {
	// Migration validation result identifier
	Id *string `pulumi:"id"`
	// The url of the report.
	ReportUrl *string `pulumi:"reportUrl"`
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutputWithContext(ctx context.Context) MigrationReportResultResponseOutput {
	return o
}

// Migration validation result identifier
func (o MigrationReportResultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponseOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.ReportUrl }).(pulumi.StringPtrOutput)
}

type MigrationReportResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) Elem() MigrationReportResultResponseOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) MigrationReportResultResponse {
		if v != nil {
			return *v
		}
		var ret MigrationReportResultResponse
		return ret
	}).(MigrationReportResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponsePtrOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReportUrl
	}).(pulumi.StringPtrOutput)
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponse struct {
	// Validation end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Name of the source database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Validation start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of validation at the database level
	Status string `pulumi:"status"`
	// Name of the target database
	TargetDatabaseName string `pulumi:"targetDatabaseName"`
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationDatabaseSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (o MigrationValidationDatabaseSummaryResultResponseOutput) ToMigrationValidationDatabaseSummaryResultResponseOutput() MigrationValidationDatabaseSummaryResultResponseOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseOutput) ToMigrationValidationDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseOutput {
	return o
}

// Validation end time
func (o MigrationValidationDatabaseSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrationValidationDatabaseSummaryResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrationValidationDatabaseSummaryResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.MigrationId }).(pulumi.StringOutput)
}

// Name of the source database
func (o MigrationValidationDatabaseSummaryResultResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

// Validation start time
func (o MigrationValidationDatabaseSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of validation at the database level
func (o MigrationValidationDatabaseSummaryResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Name of the target database
func (o MigrationValidationDatabaseSummaryResultResponseOutput) TargetDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.TargetDatabaseName }).(pulumi.StringOutput)
}

type MigrationValidationDatabaseSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (MigrationValidationDatabaseSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) ToMigrationValidationDatabaseSummaryResultResponseMapOutput() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) ToMigrationValidationDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) MigrationValidationDatabaseSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MigrationValidationDatabaseSummaryResultResponse {
		return vs[0].(map[string]MigrationValidationDatabaseSummaryResultResponse)[vs[1].(string)]
	}).(MigrationValidationDatabaseSummaryResultResponseOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptions struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsInput is an input type that accepts MigrationValidationOptionsArgs and MigrationValidationOptionsOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsInput` via:
//
//	MigrationValidationOptionsArgs{...}
type MigrationValidationOptionsInput interface {
	pulumi.Input

	ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput
	ToMigrationValidationOptionsOutputWithContext(context.Context) MigrationValidationOptionsOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return i.ToMigrationValidationOptionsOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput)
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput).ToMigrationValidationOptionsPtrOutputWithContext(ctx)
}

// MigrationValidationOptionsPtrInput is an input type that accepts MigrationValidationOptionsArgs, MigrationValidationOptionsPtr and MigrationValidationOptionsPtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsPtrInput` via:
//
//	        MigrationValidationOptionsArgs{...}
//
//	or:
//
//	        nil
type MigrationValidationOptionsPtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput
	ToMigrationValidationOptionsPtrOutputWithContext(context.Context) MigrationValidationOptionsPtrOutput
}

type migrationValidationOptionsPtrType MigrationValidationOptionsArgs

func MigrationValidationOptionsPtr(v *MigrationValidationOptionsArgs) MigrationValidationOptionsPtrInput {
	return (*migrationValidationOptionsPtrType)(v)
}

func (*migrationValidationOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return o
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return o
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return o.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsOutput) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrationValidationOptions) *MigrationValidationOptions {
		return &v
	}).(MigrationValidationOptionsPtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptions) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsPtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (o MigrationValidationOptionsPtrOutput) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return o
}

func (o MigrationValidationOptionsPtrOutput) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return o
}

func (o MigrationValidationOptionsPtrOutput) Elem() MigrationValidationOptionsOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) MigrationValidationOptions {
		if v != nil {
			return *v
		}
		var ret MigrationValidationOptions
		return ret
	}).(MigrationValidationOptionsOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsPtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsPtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsPtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponse struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsResponseOutput {
	return o
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponseOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponseOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponseOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) Elem() MigrationValidationOptionsResponseOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) MigrationValidationOptionsResponse {
		if v != nil {
			return *v
		}
		var ret MigrationValidationOptionsResponse
		return ret
	}).(MigrationValidationOptionsResponseOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponsePtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponsePtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponsePtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Migration Validation Result
type MigrationValidationResultResponse struct {
	// Migration validation result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
	Status string `pulumi:"status"`
	// Validation summary results for each database
	SummaryResults map[string]MigrationValidationDatabaseSummaryResultResponse `pulumi:"summaryResults"`
}

// Migration Validation Result
type MigrationValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationResultResponse)(nil)).Elem()
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponseOutput() MigrationValidationResultResponseOutput {
	return o
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponseOutputWithContext(ctx context.Context) MigrationValidationResultResponseOutput {
	return o
}

// Migration validation result identifier
func (o MigrationValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrationValidationResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.MigrationId }).(pulumi.StringOutput)
}

// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
func (o MigrationValidationResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Validation summary results for each database
func (o MigrationValidationResultResponseOutput) SummaryResults() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) map[string]MigrationValidationDatabaseSummaryResultResponse {
		return v.SummaryResults
	}).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

type MigrationValidationResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationResultResponse)(nil)).Elem()
}

func (o MigrationValidationResultResponsePtrOutput) ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput {
	return o
}

func (o MigrationValidationResultResponsePtrOutput) ToMigrationValidationResultResponsePtrOutputWithContext(ctx context.Context) MigrationValidationResultResponsePtrOutput {
	return o
}

func (o MigrationValidationResultResponsePtrOutput) Elem() MigrationValidationResultResponseOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) MigrationValidationResultResponse {
		if v != nil {
			return *v
		}
		var ret MigrationValidationResultResponse
		return ret
	}).(MigrationValidationResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationValidationResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Migration Identifier
func (o MigrationValidationResultResponsePtrOutput) MigrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MigrationId
	}).(pulumi.StringPtrOutput)
}

// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
func (o MigrationValidationResultResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Validation summary results for each database
func (o MigrationValidationResultResponsePtrOutput) SummaryResults() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) map[string]MigrationValidationDatabaseSummaryResultResponse {
		if v == nil {
			return nil
		}
		return v.SummaryResults
	}).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponse struct {
	// A list of non-system databases in the cluster
	Databases []MongoDbDatabaseInfoResponse `pulumi:"databases"`
	// Whether the cluster supports sharded collections
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The type of data source
	Type string `pulumi:"type"`
	// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
	Version string `pulumi:"version"`
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbClusterInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbClusterInfoResponse)(nil)).Elem()
}

func (o MongoDbClusterInfoResponseOutput) ToMongoDbClusterInfoResponseOutput() MongoDbClusterInfoResponseOutput {
	return o
}

func (o MongoDbClusterInfoResponseOutput) ToMongoDbClusterInfoResponseOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseOutput {
	return o
}

// A list of non-system databases in the cluster
func (o MongoDbClusterInfoResponseOutput) Databases() MongoDbDatabaseInfoResponseArrayOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) []MongoDbDatabaseInfoResponse { return v.Databases }).(MongoDbDatabaseInfoResponseArrayOutput)
}

// Whether the cluster supports sharded collections
func (o MongoDbClusterInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

// The type of data source
func (o MongoDbClusterInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
func (o MongoDbClusterInfoResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) string { return v.Version }).(pulumi.StringOutput)
}

type MongoDbClusterInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbClusterInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbClusterInfoResponse)(nil)).Elem()
}

func (o MongoDbClusterInfoResponseArrayOutput) ToMongoDbClusterInfoResponseArrayOutput() MongoDbClusterInfoResponseArrayOutput {
	return o
}

func (o MongoDbClusterInfoResponseArrayOutput) ToMongoDbClusterInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseArrayOutput {
	return o
}

func (o MongoDbClusterInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbClusterInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbClusterInfoResponse {
		return vs[0].([]MongoDbClusterInfoResponse)[vs[1].(int)]
	}).(MongoDbClusterInfoResponseOutput)
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize float64 `pulumi:"averageDocumentSize"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize float64 `pulumi:"dataSize"`
	// The name of the database containing the collection
	DatabaseName string `pulumi:"databaseName"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount float64 `pulumi:"documentCount"`
	// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
	IsCapped bool `pulumi:"isCapped"`
	// Whether the collection is system collection
	IsSystemCollection bool `pulumi:"isSystemCollection"`
	// Whether the collection is a view of another collection
	IsView bool `pulumi:"isView"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// The shard key on the collection, or null if the collection is not sharded
	ShardKey *MongoDbShardKeyInfoResponse `pulumi:"shardKey"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The name of the collection that this is a view of, if IsView is true
	ViewOf *string `pulumi:"viewOf"`
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (o MongoDbCollectionInfoResponseOutput) ToMongoDbCollectionInfoResponseOutput() MongoDbCollectionInfoResponseOutput {
	return o
}

func (o MongoDbCollectionInfoResponseOutput) ToMongoDbCollectionInfoResponseOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseOutput {
	return o
}

// The average document size, or -1 if the average size is unknown
func (o MongoDbCollectionInfoResponseOutput) AverageDocumentSize() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) float64 { return v.AverageDocumentSize }).(pulumi.Float64Output)
}

// The estimated total data size, in bytes, or -1 if the size is unknown.
func (o MongoDbCollectionInfoResponseOutput) DataSize() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) float64 { return v.DataSize }).(pulumi.Float64Output)
}

// The name of the database containing the collection
func (o MongoDbCollectionInfoResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The estimated total number of documents, or -1 if the document count is unknown
func (o MongoDbCollectionInfoResponseOutput) DocumentCount() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) float64 { return v.DocumentCount }).(pulumi.Float64Output)
}

// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
func (o MongoDbCollectionInfoResponseOutput) IsCapped() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsCapped }).(pulumi.BoolOutput)
}

// Whether the collection is system collection
func (o MongoDbCollectionInfoResponseOutput) IsSystemCollection() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsSystemCollection }).(pulumi.BoolOutput)
}

// Whether the collection is a view of another collection
func (o MongoDbCollectionInfoResponseOutput) IsView() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsView }).(pulumi.BoolOutput)
}

// The unqualified name of the database or collection
func (o MongoDbCollectionInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qualified name of the database or collection. For a collection, this is the database-qualified name.
func (o MongoDbCollectionInfoResponseOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.QualifiedName }).(pulumi.StringOutput)
}

// The shard key on the collection, or null if the collection is not sharded
func (o MongoDbCollectionInfoResponseOutput) ShardKey() MongoDbShardKeyInfoResponsePtrOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) *MongoDbShardKeyInfoResponse { return v.ShardKey }).(MongoDbShardKeyInfoResponsePtrOutput)
}

// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
func (o MongoDbCollectionInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

// The name of the collection that this is a view of, if IsView is true
func (o MongoDbCollectionInfoResponseOutput) ViewOf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) *string { return v.ViewOf }).(pulumi.StringPtrOutput)
}

type MongoDbCollectionInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (o MongoDbCollectionInfoResponseArrayOutput) ToMongoDbCollectionInfoResponseArrayOutput() MongoDbCollectionInfoResponseArrayOutput {
	return o
}

func (o MongoDbCollectionInfoResponseArrayOutput) ToMongoDbCollectionInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseArrayOutput {
	return o
}

func (o MongoDbCollectionInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbCollectionInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbCollectionInfoResponse {
		return vs[0].([]MongoDbCollectionInfoResponse)[vs[1].(int)]
	}).(MongoDbCollectionInfoResponseOutput)
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied float64 `pulumi:"bytesCopied"`
	// The number of documents copied during the Copying stage
	DocumentsCopied float64 `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending float64 `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed float64 `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	// Expected value is 'Collection'.
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes float64 `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments float64 `pulumi:"totalDocuments"`
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (o MongoDbCollectionProgressResponseOutput) ToMongoDbCollectionProgressResponseOutput() MongoDbCollectionProgressResponseOutput {
	return o
}

func (o MongoDbCollectionProgressResponseOutput) ToMongoDbCollectionProgressResponseOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbCollectionProgressResponseOutput) BytesCopied() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) float64 { return v.BytesCopied }).(pulumi.Float64Output)
}

// The number of documents copied during the Copying stage
func (o MongoDbCollectionProgressResponseOutput) DocumentsCopied() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) float64 { return v.DocumentsCopied }).(pulumi.Float64Output)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbCollectionProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbCollectionProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbCollectionProgressResponseOutput) EventsPending() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) float64 { return v.EventsPending }).(pulumi.Float64Output)
}

// The number of oplog events replayed so far
func (o MongoDbCollectionProgressResponseOutput) EventsReplayed() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) float64 { return v.EventsReplayed }).(pulumi.Float64Output)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbCollectionProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbCollectionProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbCollectionProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbCollectionProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
// Expected value is 'Collection'.
func (o MongoDbCollectionProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbCollectionProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbCollectionProgressResponseOutput) TotalBytes() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) float64 { return v.TotalBytes }).(pulumi.Float64Output)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbCollectionProgressResponseOutput) TotalDocuments() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) float64 { return v.TotalDocuments }).(pulumi.Float64Output)
}

type MongoDbCollectionProgressResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionProgressResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (o MongoDbCollectionProgressResponseMapOutput) ToMongoDbCollectionProgressResponseMapOutput() MongoDbCollectionProgressResponseMapOutput {
	return o
}

func (o MongoDbCollectionProgressResponseMapOutput) ToMongoDbCollectionProgressResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseMapOutput {
	return o
}

func (o MongoDbCollectionProgressResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionProgressResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionProgressResponse {
		return vs[0].(map[string]MongoDbCollectionProgressResponse)[vs[1].(string)]
	}).(MongoDbCollectionProgressResponseOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettings struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySetting `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbCollectionSettingsInput is an input type that accepts MongoDbCollectionSettingsArgs and MongoDbCollectionSettingsOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsInput` via:
//
//	MongoDbCollectionSettingsArgs{...}
type MongoDbCollectionSettingsInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput
	ToMongoDbCollectionSettingsOutputWithContext(context.Context) MongoDbCollectionSettingsOutput
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsArgs struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete pulumi.BoolPtrInput `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey MongoDbShardKeySettingPtrInput `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbCollectionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettings)(nil)).Elem()
}

func (i MongoDbCollectionSettingsArgs) ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput {
	return i.ToMongoDbCollectionSettingsOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsArgs) ToMongoDbCollectionSettingsOutputWithContext(ctx context.Context) MongoDbCollectionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsOutput)
}

// MongoDbCollectionSettingsMapInput is an input type that accepts MongoDbCollectionSettingsMap and MongoDbCollectionSettingsMapOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsMapInput` via:
//
//	MongoDbCollectionSettingsMap{ "key": MongoDbCollectionSettingsArgs{...} }
type MongoDbCollectionSettingsMapInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput
	ToMongoDbCollectionSettingsMapOutputWithContext(context.Context) MongoDbCollectionSettingsMapOutput
}

type MongoDbCollectionSettingsMap map[string]MongoDbCollectionSettingsInput

func (MongoDbCollectionSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettings)(nil)).Elem()
}

func (i MongoDbCollectionSettingsMap) ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput {
	return i.ToMongoDbCollectionSettingsMapOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsMap) ToMongoDbCollectionSettingsMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsMapOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettings)(nil)).Elem()
}

func (o MongoDbCollectionSettingsOutput) ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput {
	return o
}

func (o MongoDbCollectionSettingsOutput) ToMongoDbCollectionSettingsOutputWithContext(ctx context.Context) MongoDbCollectionSettingsOutput {
	return o
}

// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
func (o MongoDbCollectionSettingsOutput) CanDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettings) *bool { return v.CanDelete }).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
func (o MongoDbCollectionSettingsOutput) ShardKey() MongoDbShardKeySettingPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettings) *MongoDbShardKeySetting { return v.ShardKey }).(MongoDbShardKeySettingPtrOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
func (o MongoDbCollectionSettingsOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettings) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbCollectionSettingsMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettings)(nil)).Elem()
}

func (o MongoDbCollectionSettingsMapOutput) ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput {
	return o
}

func (o MongoDbCollectionSettingsMapOutput) ToMongoDbCollectionSettingsMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsMapOutput {
	return o
}

func (o MongoDbCollectionSettingsMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionSettings {
		return vs[0].(map[string]MongoDbCollectionSettings)[vs[1].(string)]
	}).(MongoDbCollectionSettingsOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponse struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySettingResponse `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (o MongoDbCollectionSettingsResponseOutput) ToMongoDbCollectionSettingsResponseOutput() MongoDbCollectionSettingsResponseOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseOutput) ToMongoDbCollectionSettingsResponseOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseOutput {
	return o
}

// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
func (o MongoDbCollectionSettingsResponseOutput) CanDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *bool { return v.CanDelete }).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
func (o MongoDbCollectionSettingsResponseOutput) ShardKey() MongoDbShardKeySettingResponsePtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *MongoDbShardKeySettingResponse { return v.ShardKey }).(MongoDbShardKeySettingResponsePtrOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
func (o MongoDbCollectionSettingsResponseOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbCollectionSettingsResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (o MongoDbCollectionSettingsResponseMapOutput) ToMongoDbCollectionSettingsResponseMapOutput() MongoDbCollectionSettingsResponseMapOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseMapOutput) ToMongoDbCollectionSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseMapOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionSettingsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionSettingsResponse {
		return vs[0].(map[string]MongoDbCollectionSettingsResponse)[vs[1].(string)]
	}).(MongoDbCollectionSettingsResponseOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Data source
	DataSource *string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	EnforceSSL        *bool `pulumi:"enforceSSL"`
	// Password credential.
	Password *string `pulumi:"password"`
	// port for server
	Port *int `pulumi:"port"`
	// server brand version
	ServerBrandVersion *string `pulumi:"serverBrandVersion"`
	// name of the server
	ServerName *string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'MongoDbConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MongoDbConnectionInfo
func (val *MongoDbConnectionInfo) Defaults() *MongoDbConnectionInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TrustServerCertificate == nil {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// MongoDbConnectionInfoInput is an input type that accepts MongoDbConnectionInfoArgs and MongoDbConnectionInfoOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoInput` via:
//
//	MongoDbConnectionInfoArgs{...}
type MongoDbConnectionInfoInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput
	ToMongoDbConnectionInfoOutputWithContext(context.Context) MongoDbConnectionInfoOutput
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	// Data source
	DataSource pulumi.StringPtrInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	EnforceSSL        pulumi.BoolPtrInput `pulumi:"enforceSSL"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// port for server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// server brand version
	ServerBrandVersion pulumi.StringPtrInput `pulumi:"serverBrandVersion"`
	// name of the server
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// server version
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'MongoDbConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MongoDbConnectionInfoArgs
func (val *MongoDbConnectionInfoArgs) Defaults() *MongoDbConnectionInfoArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TrustServerCertificate == nil {
		tmp.TrustServerCertificate = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (MongoDbConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfo)(nil)).Elem()
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput {
	return i.ToMongoDbConnectionInfoOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoOutputWithContext(ctx context.Context) MongoDbConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoOutput)
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return i.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoOutput).ToMongoDbConnectionInfoPtrOutputWithContext(ctx)
}

// MongoDbConnectionInfoPtrInput is an input type that accepts MongoDbConnectionInfoArgs, MongoDbConnectionInfoPtr and MongoDbConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoPtrInput` via:
//
//	        MongoDbConnectionInfoArgs{...}
//
//	or:
//
//	        nil
type MongoDbConnectionInfoPtrInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput
	ToMongoDbConnectionInfoPtrOutputWithContext(context.Context) MongoDbConnectionInfoPtrOutput
}

type mongoDbConnectionInfoPtrType MongoDbConnectionInfoArgs

func MongoDbConnectionInfoPtr(v *MongoDbConnectionInfoArgs) MongoDbConnectionInfoPtrInput {
	return (*mongoDbConnectionInfoPtrType)(v)
}

func (*mongoDbConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfo)(nil)).Elem()
}

func (i *mongoDbConnectionInfoPtrType) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return i.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *mongoDbConnectionInfoPtrType) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoPtrOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfo)(nil)).Elem()
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput {
	return o
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoOutputWithContext(ctx context.Context) MongoDbConnectionInfoOutput {
	return o
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return o.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (o MongoDbConnectionInfoOutput) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongoDbConnectionInfo) *MongoDbConnectionInfo {
		return &v
	}).(MongoDbConnectionInfoPtrOutput)
}

// Additional connection settings
func (o MongoDbConnectionInfoOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MongoDbConnectionInfoOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Data source
func (o MongoDbConnectionInfoOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MongoDbConnectionInfoOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

func (o MongoDbConnectionInfoOutput) EnforceSSL() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *bool { return v.EnforceSSL }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MongoDbConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// port for server
func (o MongoDbConnectionInfoOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// server brand version
func (o MongoDbConnectionInfoOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.ServerBrandVersion }).(pulumi.StringPtrOutput)
}

// name of the server
func (o MongoDbConnectionInfoOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// server version
func (o MongoDbConnectionInfoOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o MongoDbConnectionInfoOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'MongoDbConnectionInfo'.
func (o MongoDbConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MongoDbConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MongoDbConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfo)(nil)).Elem()
}

func (o MongoDbConnectionInfoPtrOutput) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return o
}

func (o MongoDbConnectionInfoPtrOutput) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return o
}

func (o MongoDbConnectionInfoPtrOutput) Elem() MongoDbConnectionInfoOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) MongoDbConnectionInfo {
		if v != nil {
			return *v
		}
		var ret MongoDbConnectionInfo
		return ret
	}).(MongoDbConnectionInfoOutput)
}

// Additional connection settings
func (o MongoDbConnectionInfoPtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MongoDbConnectionInfoPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoPtrOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionString
	}).(pulumi.StringPtrOutput)
}

// Data source
func (o MongoDbConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MongoDbConnectionInfoPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

func (o MongoDbConnectionInfoPtrOutput) EnforceSSL() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EnforceSSL
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MongoDbConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// port for server
func (o MongoDbConnectionInfoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// server brand version
func (o MongoDbConnectionInfoPtrOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerBrandVersion
	}).(pulumi.StringPtrOutput)
}

// name of the server
func (o MongoDbConnectionInfoPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o MongoDbConnectionInfoPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o MongoDbConnectionInfoPtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'MongoDbConnectionInfo'.
func (o MongoDbConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MongoDbConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Data source
	DataSource *string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	EnforceSSL        *bool `pulumi:"enforceSSL"`
	// Password credential.
	Password *string `pulumi:"password"`
	// port for server
	Port *int `pulumi:"port"`
	// server brand version
	ServerBrandVersion *string `pulumi:"serverBrandVersion"`
	// name of the server
	ServerName *string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'MongoDbConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MongoDbConnectionInfoResponse
func (val *MongoDbConnectionInfoResponse) Defaults() *MongoDbConnectionInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TrustServerCertificate == nil {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponseOutput() MongoDbConnectionInfoResponseOutput {
	return o
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponseOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponseOutput {
	return o
}

// Additional connection settings
func (o MongoDbConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MongoDbConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoResponseOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Data source
func (o MongoDbConnectionInfoResponseOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MongoDbConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

func (o MongoDbConnectionInfoResponseOutput) EnforceSSL() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *bool { return v.EnforceSSL }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MongoDbConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// port for server
func (o MongoDbConnectionInfoResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// server brand version
func (o MongoDbConnectionInfoResponseOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.ServerBrandVersion }).(pulumi.StringPtrOutput)
}

// name of the server
func (o MongoDbConnectionInfoResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// server version
func (o MongoDbConnectionInfoResponseOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o MongoDbConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'MongoDbConnectionInfo'.
func (o MongoDbConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MongoDbConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MongoDbConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (o MongoDbConnectionInfoResponsePtrOutput) ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput {
	return o
}

func (o MongoDbConnectionInfoResponsePtrOutput) ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponsePtrOutput {
	return o
}

func (o MongoDbConnectionInfoResponsePtrOutput) Elem() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) MongoDbConnectionInfoResponse {
		if v != nil {
			return *v
		}
		var ret MongoDbConnectionInfoResponse
		return ret
	}).(MongoDbConnectionInfoResponseOutput)
}

// Additional connection settings
func (o MongoDbConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MongoDbConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoResponsePtrOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionString
	}).(pulumi.StringPtrOutput)
}

// Data source
func (o MongoDbConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MongoDbConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

func (o MongoDbConnectionInfoResponsePtrOutput) EnforceSSL() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnforceSSL
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MongoDbConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// port for server
func (o MongoDbConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// server brand version
func (o MongoDbConnectionInfoResponsePtrOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerBrandVersion
	}).(pulumi.StringPtrOutput)
}

// name of the server
func (o MongoDbConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o MongoDbConnectionInfoResponsePtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o MongoDbConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'MongoDbConnectionInfo'.
func (o MongoDbConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MongoDbConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize float64 `pulumi:"averageDocumentSize"`
	// A list of supported collections in a MongoDB database
	Collections []MongoDbCollectionInfoResponse `pulumi:"collections"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize float64 `pulumi:"dataSize"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount float64 `pulumi:"documentCount"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (o MongoDbDatabaseInfoResponseOutput) ToMongoDbDatabaseInfoResponseOutput() MongoDbDatabaseInfoResponseOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseOutput) ToMongoDbDatabaseInfoResponseOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseOutput {
	return o
}

// The average document size, or -1 if the average size is unknown
func (o MongoDbDatabaseInfoResponseOutput) AverageDocumentSize() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) float64 { return v.AverageDocumentSize }).(pulumi.Float64Output)
}

// A list of supported collections in a MongoDB database
func (o MongoDbDatabaseInfoResponseOutput) Collections() MongoDbCollectionInfoResponseArrayOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) []MongoDbCollectionInfoResponse { return v.Collections }).(MongoDbCollectionInfoResponseArrayOutput)
}

// The estimated total data size, in bytes, or -1 if the size is unknown.
func (o MongoDbDatabaseInfoResponseOutput) DataSize() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) float64 { return v.DataSize }).(pulumi.Float64Output)
}

// The estimated total number of documents, or -1 if the document count is unknown
func (o MongoDbDatabaseInfoResponseOutput) DocumentCount() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) float64 { return v.DocumentCount }).(pulumi.Float64Output)
}

// The unqualified name of the database or collection
func (o MongoDbDatabaseInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qualified name of the database or collection. For a collection, this is the database-qualified name.
func (o MongoDbDatabaseInfoResponseOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) string { return v.QualifiedName }).(pulumi.StringOutput)
}

// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
func (o MongoDbDatabaseInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

type MongoDbDatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (o MongoDbDatabaseInfoResponseArrayOutput) ToMongoDbDatabaseInfoResponseArrayOutput() MongoDbDatabaseInfoResponseArrayOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseArrayOutput) ToMongoDbDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseArrayOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbDatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbDatabaseInfoResponse {
		return vs[0].([]MongoDbDatabaseInfoResponse)[vs[1].(int)]
	}).(MongoDbDatabaseInfoResponseOutput)
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied float64 `pulumi:"bytesCopied"`
	// The progress of the collections in the database. The keys are the unqualified names of the collections
	Collections map[string]MongoDbCollectionProgressResponse `pulumi:"collections"`
	// The number of documents copied during the Copying stage
	DocumentsCopied float64 `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending float64 `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed float64 `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	// Expected value is 'Database'.
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes float64 `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments float64 `pulumi:"totalDocuments"`
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (o MongoDbDatabaseProgressResponseOutput) ToMongoDbDatabaseProgressResponseOutput() MongoDbDatabaseProgressResponseOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseOutput) ToMongoDbDatabaseProgressResponseOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbDatabaseProgressResponseOutput) BytesCopied() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) float64 { return v.BytesCopied }).(pulumi.Float64Output)
}

// The progress of the collections in the database. The keys are the unqualified names of the collections
func (o MongoDbDatabaseProgressResponseOutput) Collections() MongoDbCollectionProgressResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) map[string]MongoDbCollectionProgressResponse {
		return v.Collections
	}).(MongoDbCollectionProgressResponseMapOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbDatabaseProgressResponseOutput) DocumentsCopied() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) float64 { return v.DocumentsCopied }).(pulumi.Float64Output)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbDatabaseProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbDatabaseProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbDatabaseProgressResponseOutput) EventsPending() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) float64 { return v.EventsPending }).(pulumi.Float64Output)
}

// The number of oplog events replayed so far
func (o MongoDbDatabaseProgressResponseOutput) EventsReplayed() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) float64 { return v.EventsReplayed }).(pulumi.Float64Output)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbDatabaseProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbDatabaseProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbDatabaseProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbDatabaseProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
// Expected value is 'Database'.
func (o MongoDbDatabaseProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbDatabaseProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbDatabaseProgressResponseOutput) TotalBytes() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) float64 { return v.TotalBytes }).(pulumi.Float64Output)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbDatabaseProgressResponseOutput) TotalDocuments() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) float64 { return v.TotalDocuments }).(pulumi.Float64Output)
}

type MongoDbDatabaseProgressResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseProgressResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (o MongoDbDatabaseProgressResponseMapOutput) ToMongoDbDatabaseProgressResponseMapOutput() MongoDbDatabaseProgressResponseMapOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseMapOutput) ToMongoDbDatabaseProgressResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseMapOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseProgressResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseProgressResponse {
		return vs[0].(map[string]MongoDbDatabaseProgressResponse)[vs[1].(string)]
	}).(MongoDbDatabaseProgressResponseOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettings struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettings `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbDatabaseSettingsInput is an input type that accepts MongoDbDatabaseSettingsArgs and MongoDbDatabaseSettingsOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsInput` via:
//
//	MongoDbDatabaseSettingsArgs{...}
type MongoDbDatabaseSettingsInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput
	ToMongoDbDatabaseSettingsOutputWithContext(context.Context) MongoDbDatabaseSettingsOutput
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsArgs struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections MongoDbCollectionSettingsMapInput `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbDatabaseSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettings)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsArgs) ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput {
	return i.ToMongoDbDatabaseSettingsOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsArgs) ToMongoDbDatabaseSettingsOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsOutput)
}

// MongoDbDatabaseSettingsMapInput is an input type that accepts MongoDbDatabaseSettingsMap and MongoDbDatabaseSettingsMapOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsMapInput` via:
//
//	MongoDbDatabaseSettingsMap{ "key": MongoDbDatabaseSettingsArgs{...} }
type MongoDbDatabaseSettingsMapInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput
	ToMongoDbDatabaseSettingsMapOutputWithContext(context.Context) MongoDbDatabaseSettingsMapOutput
}

type MongoDbDatabaseSettingsMap map[string]MongoDbDatabaseSettingsInput

func (MongoDbDatabaseSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettings)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsMap) ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput {
	return i.ToMongoDbDatabaseSettingsMapOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsMap) ToMongoDbDatabaseSettingsMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsMapOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettings)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsOutput) ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput {
	return o
}

func (o MongoDbDatabaseSettingsOutput) ToMongoDbDatabaseSettingsOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsOutput {
	return o
}

// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
func (o MongoDbDatabaseSettingsOutput) Collections() MongoDbCollectionSettingsMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettings) map[string]MongoDbCollectionSettings { return v.Collections }).(MongoDbCollectionSettingsMapOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
func (o MongoDbDatabaseSettingsOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettings) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbDatabaseSettingsMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettings)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsMapOutput) ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsMapOutput) ToMongoDbDatabaseSettingsMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseSettings {
		return vs[0].(map[string]MongoDbDatabaseSettings)[vs[1].(string)]
	}).(MongoDbDatabaseSettingsOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponse struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettingsResponse `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsResponseOutput) ToMongoDbDatabaseSettingsResponseOutput() MongoDbDatabaseSettingsResponseOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseOutput) ToMongoDbDatabaseSettingsResponseOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseOutput {
	return o
}

// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
func (o MongoDbDatabaseSettingsResponseOutput) Collections() MongoDbCollectionSettingsResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettingsResponse) map[string]MongoDbCollectionSettingsResponse {
		return v.Collections
	}).(MongoDbCollectionSettingsResponseMapOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
func (o MongoDbDatabaseSettingsResponseOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettingsResponse) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbDatabaseSettingsResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsResponseMapOutput) ToMongoDbDatabaseSettingsResponseMapOutput() MongoDbDatabaseSettingsResponseMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseMapOutput) ToMongoDbDatabaseSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseSettingsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseSettingsResponse {
		return vs[0].(map[string]MongoDbDatabaseSettingsResponse)[vs[1].(string)]
	}).(MongoDbDatabaseSettingsResponseOutput)
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponse struct {
	// The non-localized, machine-readable code that describes the error or warning
	Code *string `pulumi:"code"`
	// The number of times the error or warning has occurred
	Count *int `pulumi:"count"`
	// The localized, human-readable message that describes the error or warning
	Message *string `pulumi:"message"`
	// The type of error or warning
	Type *string `pulumi:"type"`
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponseOutput struct{ *pulumi.OutputState }

func (MongoDbErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbErrorResponse)(nil)).Elem()
}

func (o MongoDbErrorResponseOutput) ToMongoDbErrorResponseOutput() MongoDbErrorResponseOutput {
	return o
}

func (o MongoDbErrorResponseOutput) ToMongoDbErrorResponseOutputWithContext(ctx context.Context) MongoDbErrorResponseOutput {
	return o
}

// The non-localized, machine-readable code that describes the error or warning
func (o MongoDbErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The number of times the error or warning has occurred
func (o MongoDbErrorResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The localized, human-readable message that describes the error or warning
func (o MongoDbErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of error or warning
func (o MongoDbErrorResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MongoDbErrorResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbErrorResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbErrorResponse)(nil)).Elem()
}

func (o MongoDbErrorResponseMapOutput) ToMongoDbErrorResponseMapOutput() MongoDbErrorResponseMapOutput {
	return o
}

func (o MongoDbErrorResponseMapOutput) ToMongoDbErrorResponseMapOutputWithContext(ctx context.Context) MongoDbErrorResponseMapOutput {
	return o
}

func (o MongoDbErrorResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbErrorResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbErrorResponse {
		return vs[0].(map[string]MongoDbErrorResponse)[vs[1].(string)]
	}).(MongoDbErrorResponseOutput)
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied float64 `pulumi:"bytesCopied"`
	// The progress of the databases in the migration. The keys are the names of the databases
	Databases map[string]MongoDbDatabaseProgressResponse `pulumi:"databases"`
	// The number of documents copied during the Copying stage
	DocumentsCopied float64 `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending float64 `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed float64 `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	// Expected value is 'Migration'.
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes float64 `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments float64 `pulumi:"totalDocuments"`
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (o MongoDbMigrationProgressResponseOutput) ToMongoDbMigrationProgressResponseOutput() MongoDbMigrationProgressResponseOutput {
	return o
}

func (o MongoDbMigrationProgressResponseOutput) ToMongoDbMigrationProgressResponseOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbMigrationProgressResponseOutput) BytesCopied() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) float64 { return v.BytesCopied }).(pulumi.Float64Output)
}

// The progress of the databases in the migration. The keys are the names of the databases
func (o MongoDbMigrationProgressResponseOutput) Databases() MongoDbDatabaseProgressResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) map[string]MongoDbDatabaseProgressResponse {
		return v.Databases
	}).(MongoDbDatabaseProgressResponseMapOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbMigrationProgressResponseOutput) DocumentsCopied() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) float64 { return v.DocumentsCopied }).(pulumi.Float64Output)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbMigrationProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbMigrationProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbMigrationProgressResponseOutput) EventsPending() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) float64 { return v.EventsPending }).(pulumi.Float64Output)
}

// The number of oplog events replayed so far
func (o MongoDbMigrationProgressResponseOutput) EventsReplayed() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) float64 { return v.EventsReplayed }).(pulumi.Float64Output)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbMigrationProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbMigrationProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbMigrationProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbMigrationProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
// Expected value is 'Migration'.
func (o MongoDbMigrationProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbMigrationProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbMigrationProgressResponseOutput) TotalBytes() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) float64 { return v.TotalBytes }).(pulumi.Float64Output)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbMigrationProgressResponseOutput) TotalDocuments() pulumi.Float64Output {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) float64 { return v.TotalDocuments }).(pulumi.Float64Output)
}

type MongoDbMigrationProgressResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationProgressResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (o MongoDbMigrationProgressResponseArrayOutput) ToMongoDbMigrationProgressResponseArrayOutput() MongoDbMigrationProgressResponseArrayOutput {
	return o
}

func (o MongoDbMigrationProgressResponseArrayOutput) ToMongoDbMigrationProgressResponseArrayOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseArrayOutput {
	return o
}

func (o MongoDbMigrationProgressResponseArrayOutput) Index(i pulumi.IntInput) MongoDbMigrationProgressResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbMigrationProgressResponse {
		return vs[0].([]MongoDbMigrationProgressResponse)[vs[1].(int)]
	}).(MongoDbMigrationProgressResponseOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettings struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettings `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfo `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfo `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettings `pulumi:"throttling"`
}

// Defaults sets the appropriate defaults for MongoDbMigrationSettings
func (val *MongoDbMigrationSettings) Defaults() *MongoDbMigrationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Source = *tmp.Source.Defaults()

	tmp.Target = *tmp.Target.Defaults()

	return &tmp
}

// MongoDbMigrationSettingsInput is an input type that accepts MongoDbMigrationSettingsArgs and MongoDbMigrationSettingsOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsInput` via:
//
//	MongoDbMigrationSettingsArgs{...}
type MongoDbMigrationSettingsInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput
	ToMongoDbMigrationSettingsOutputWithContext(context.Context) MongoDbMigrationSettingsOutput
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsArgs struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs pulumi.IntPtrInput `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases MongoDbDatabaseSettingsMapInput `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication pulumi.StringPtrInput `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoInput `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoInput `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling MongoDbThrottlingSettingsPtrInput `pulumi:"throttling"`
}

// Defaults sets the appropriate defaults for MongoDbMigrationSettingsArgs
func (val *MongoDbMigrationSettingsArgs) Defaults() *MongoDbMigrationSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MongoDbMigrationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettings)(nil)).Elem()
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput {
	return i.ToMongoDbMigrationSettingsOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsOutputWithContext(ctx context.Context) MongoDbMigrationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsOutput)
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return i.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsOutput).ToMongoDbMigrationSettingsPtrOutputWithContext(ctx)
}

// MongoDbMigrationSettingsPtrInput is an input type that accepts MongoDbMigrationSettingsArgs, MongoDbMigrationSettingsPtr and MongoDbMigrationSettingsPtrOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsPtrInput` via:
//
//	        MongoDbMigrationSettingsArgs{...}
//
//	or:
//
//	        nil
type MongoDbMigrationSettingsPtrInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput
	ToMongoDbMigrationSettingsPtrOutputWithContext(context.Context) MongoDbMigrationSettingsPtrOutput
}

type mongoDbMigrationSettingsPtrType MongoDbMigrationSettingsArgs

func MongoDbMigrationSettingsPtr(v *MongoDbMigrationSettingsArgs) MongoDbMigrationSettingsPtrInput {
	return (*mongoDbMigrationSettingsPtrType)(v)
}

func (*mongoDbMigrationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettings)(nil)).Elem()
}

func (i *mongoDbMigrationSettingsPtrType) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return i.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (i *mongoDbMigrationSettingsPtrType) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsPtrOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettings)(nil)).Elem()
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput {
	return o
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsOutputWithContext(ctx context.Context) MongoDbMigrationSettingsOutput {
	return o
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return o.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (o MongoDbMigrationSettingsOutput) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongoDbMigrationSettings) *MongoDbMigrationSettings {
		return &v
	}).(MongoDbMigrationSettingsPtrOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) *int { return v.BoostRUs }).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsOutput) Databases() MongoDbDatabaseSettingsMapOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) map[string]MongoDbDatabaseSettings { return v.Databases }).(MongoDbDatabaseSettingsMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) *string { return v.Replication }).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsOutput) Source() MongoDbConnectionInfoOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) MongoDbConnectionInfo { return v.Source }).(MongoDbConnectionInfoOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsOutput) Target() MongoDbConnectionInfoOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) MongoDbConnectionInfo { return v.Target }).(MongoDbConnectionInfoOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsOutput) Throttling() MongoDbThrottlingSettingsPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettings) *MongoDbThrottlingSettings { return v.Throttling }).(MongoDbThrottlingSettingsPtrOutput)
}

type MongoDbMigrationSettingsPtrOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettings)(nil)).Elem()
}

func (o MongoDbMigrationSettingsPtrOutput) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return o
}

func (o MongoDbMigrationSettingsPtrOutput) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return o
}

func (o MongoDbMigrationSettingsPtrOutput) Elem() MongoDbMigrationSettingsOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) MongoDbMigrationSettings {
		if v != nil {
			return *v
		}
		var ret MongoDbMigrationSettings
		return ret
	}).(MongoDbMigrationSettingsOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsPtrOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *int {
		if v == nil {
			return nil
		}
		return v.BoostRUs
	}).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsPtrOutput) Databases() MongoDbDatabaseSettingsMapOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) map[string]MongoDbDatabaseSettings {
		if v == nil {
			return nil
		}
		return v.Databases
	}).(MongoDbDatabaseSettingsMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsPtrOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *string {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsPtrOutput) Source() MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *MongoDbConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(MongoDbConnectionInfoPtrOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsPtrOutput) Target() MongoDbConnectionInfoPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *MongoDbConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(MongoDbConnectionInfoPtrOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsPtrOutput) Throttling() MongoDbThrottlingSettingsPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettings) *MongoDbThrottlingSettings {
		if v == nil {
			return nil
		}
		return v.Throttling
	}).(MongoDbThrottlingSettingsPtrOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponse struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettingsResponse `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoResponse `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoResponse `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettingsResponse `pulumi:"throttling"`
}

// Defaults sets the appropriate defaults for MongoDbMigrationSettingsResponse
func (val *MongoDbMigrationSettingsResponse) Defaults() *MongoDbMigrationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Source = *tmp.Source.Defaults()

	tmp.Target = *tmp.Target.Defaults()

	return &tmp
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponseOutput() MongoDbMigrationSettingsResponseOutput {
	return o
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponseOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponseOutput {
	return o
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsResponseOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *int { return v.BoostRUs }).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsResponseOutput) Databases() MongoDbDatabaseSettingsResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) map[string]MongoDbDatabaseSettingsResponse {
		return v.Databases
	}).(MongoDbDatabaseSettingsResponseMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsResponseOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *string { return v.Replication }).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsResponseOutput) Source() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) MongoDbConnectionInfoResponse { return v.Source }).(MongoDbConnectionInfoResponseOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsResponseOutput) Target() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) MongoDbConnectionInfoResponse { return v.Target }).(MongoDbConnectionInfoResponseOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsResponseOutput) Throttling() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *MongoDbThrottlingSettingsResponse { return v.Throttling }).(MongoDbThrottlingSettingsResponsePtrOutput)
}

type MongoDbMigrationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (o MongoDbMigrationSettingsResponsePtrOutput) ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput {
	return o
}

func (o MongoDbMigrationSettingsResponsePtrOutput) ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponsePtrOutput {
	return o
}

func (o MongoDbMigrationSettingsResponsePtrOutput) Elem() MongoDbMigrationSettingsResponseOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) MongoDbMigrationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret MongoDbMigrationSettingsResponse
		return ret
	}).(MongoDbMigrationSettingsResponseOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsResponsePtrOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.BoostRUs
	}).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsResponsePtrOutput) Databases() MongoDbDatabaseSettingsResponseMapOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) map[string]MongoDbDatabaseSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Databases
	}).(MongoDbDatabaseSettingsResponseMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsResponsePtrOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsResponsePtrOutput) Source() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsResponsePtrOutput) Target() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsResponsePtrOutput) Throttling() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbThrottlingSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Throttling
	}).(MongoDbThrottlingSettingsResponsePtrOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyField struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// MongoDbShardKeyFieldInput is an input type that accepts MongoDbShardKeyFieldArgs and MongoDbShardKeyFieldOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldInput` via:
//
//	MongoDbShardKeyFieldArgs{...}
type MongoDbShardKeyFieldInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput
	ToMongoDbShardKeyFieldOutputWithContext(context.Context) MongoDbShardKeyFieldOutput
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldArgs struct {
	// The name of the field
	Name pulumi.StringInput `pulumi:"name"`
	// The field ordering
	Order pulumi.StringInput `pulumi:"order"`
}

func (MongoDbShardKeyFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyField)(nil)).Elem()
}

func (i MongoDbShardKeyFieldArgs) ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput {
	return i.ToMongoDbShardKeyFieldOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldArgs) ToMongoDbShardKeyFieldOutputWithContext(ctx context.Context) MongoDbShardKeyFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldOutput)
}

// MongoDbShardKeyFieldArrayInput is an input type that accepts MongoDbShardKeyFieldArray and MongoDbShardKeyFieldArrayOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldArrayInput` via:
//
//	MongoDbShardKeyFieldArray{ MongoDbShardKeyFieldArgs{...} }
type MongoDbShardKeyFieldArrayInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput
	ToMongoDbShardKeyFieldArrayOutputWithContext(context.Context) MongoDbShardKeyFieldArrayOutput
}

type MongoDbShardKeyFieldArray []MongoDbShardKeyFieldInput

func (MongoDbShardKeyFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyField)(nil)).Elem()
}

func (i MongoDbShardKeyFieldArray) ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput {
	return i.ToMongoDbShardKeyFieldArrayOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldArray) ToMongoDbShardKeyFieldArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldArrayOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyField)(nil)).Elem()
}

func (o MongoDbShardKeyFieldOutput) ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput {
	return o
}

func (o MongoDbShardKeyFieldOutput) ToMongoDbShardKeyFieldOutputWithContext(ctx context.Context) MongoDbShardKeyFieldOutput {
	return o
}

// The name of the field
func (o MongoDbShardKeyFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyField) string { return v.Name }).(pulumi.StringOutput)
}

// The field ordering
func (o MongoDbShardKeyFieldOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyField) string { return v.Order }).(pulumi.StringOutput)
}

type MongoDbShardKeyFieldArrayOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyField)(nil)).Elem()
}

func (o MongoDbShardKeyFieldArrayOutput) ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldArrayOutput) ToMongoDbShardKeyFieldArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldArrayOutput) Index(i pulumi.IntInput) MongoDbShardKeyFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbShardKeyField {
		return vs[0].([]MongoDbShardKeyField)[vs[1].(int)]
	}).(MongoDbShardKeyFieldOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponse struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (o MongoDbShardKeyFieldResponseOutput) ToMongoDbShardKeyFieldResponseOutput() MongoDbShardKeyFieldResponseOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseOutput) ToMongoDbShardKeyFieldResponseOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseOutput {
	return o
}

// The name of the field
func (o MongoDbShardKeyFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The field ordering
func (o MongoDbShardKeyFieldResponseOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyFieldResponse) string { return v.Order }).(pulumi.StringOutput)
}

type MongoDbShardKeyFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (o MongoDbShardKeyFieldResponseArrayOutput) ToMongoDbShardKeyFieldResponseArrayOutput() MongoDbShardKeyFieldResponseArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseArrayOutput) ToMongoDbShardKeyFieldResponseArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseArrayOutput) Index(i pulumi.IntInput) MongoDbShardKeyFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbShardKeyFieldResponse {
		return vs[0].([]MongoDbShardKeyFieldResponse)[vs[1].(int)]
	}).(MongoDbShardKeyFieldResponseOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponseOutput() MongoDbShardKeyInfoResponseOutput {
	return o
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponseOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponseOutput {
	return o
}

// The fields within the shard key
func (o MongoDbShardKeyInfoResponseOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) []MongoDbShardKeyFieldResponse { return v.Fields }).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeyInfoResponseOutput) IsUnique() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) bool { return v.IsUnique }).(pulumi.BoolOutput)
}

type MongoDbShardKeyInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (o MongoDbShardKeyInfoResponsePtrOutput) ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput {
	return o
}

func (o MongoDbShardKeyInfoResponsePtrOutput) ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponsePtrOutput {
	return o
}

func (o MongoDbShardKeyInfoResponsePtrOutput) Elem() MongoDbShardKeyInfoResponseOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) MongoDbShardKeyInfoResponse {
		if v != nil {
			return *v
		}
		var ret MongoDbShardKeyInfoResponse
		return ret
	}).(MongoDbShardKeyInfoResponseOutput)
}

// The fields within the shard key
func (o MongoDbShardKeyInfoResponsePtrOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) []MongoDbShardKeyFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeyInfoResponsePtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySetting struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyField `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique *bool `pulumi:"isUnique"`
}

// MongoDbShardKeySettingInput is an input type that accepts MongoDbShardKeySettingArgs and MongoDbShardKeySettingOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingInput` via:
//
//	MongoDbShardKeySettingArgs{...}
type MongoDbShardKeySettingInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput
	ToMongoDbShardKeySettingOutputWithContext(context.Context) MongoDbShardKeySettingOutput
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingArgs struct {
	// The fields within the shard key
	Fields MongoDbShardKeyFieldArrayInput `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique pulumi.BoolPtrInput `pulumi:"isUnique"`
}

func (MongoDbShardKeySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySetting)(nil)).Elem()
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput {
	return i.ToMongoDbShardKeySettingOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingOutputWithContext(ctx context.Context) MongoDbShardKeySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingOutput)
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return i.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingOutput).ToMongoDbShardKeySettingPtrOutputWithContext(ctx)
}

// MongoDbShardKeySettingPtrInput is an input type that accepts MongoDbShardKeySettingArgs, MongoDbShardKeySettingPtr and MongoDbShardKeySettingPtrOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingPtrInput` via:
//
//	        MongoDbShardKeySettingArgs{...}
//
//	or:
//
//	        nil
type MongoDbShardKeySettingPtrInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput
	ToMongoDbShardKeySettingPtrOutputWithContext(context.Context) MongoDbShardKeySettingPtrOutput
}

type mongoDbShardKeySettingPtrType MongoDbShardKeySettingArgs

func MongoDbShardKeySettingPtr(v *MongoDbShardKeySettingArgs) MongoDbShardKeySettingPtrInput {
	return (*mongoDbShardKeySettingPtrType)(v)
}

func (*mongoDbShardKeySettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySetting)(nil)).Elem()
}

func (i *mongoDbShardKeySettingPtrType) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return i.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (i *mongoDbShardKeySettingPtrType) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySetting)(nil)).Elem()
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput {
	return o
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingOutputWithContext(ctx context.Context) MongoDbShardKeySettingOutput {
	return o
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return o.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (o MongoDbShardKeySettingOutput) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongoDbShardKeySetting) *MongoDbShardKeySetting {
		return &v
	}).(MongoDbShardKeySettingPtrOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingOutput) Fields() MongoDbShardKeyFieldArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeySetting) []MongoDbShardKeyField { return v.Fields }).(MongoDbShardKeyFieldArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbShardKeySetting) *bool { return v.IsUnique }).(pulumi.BoolPtrOutput)
}

type MongoDbShardKeySettingPtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySetting)(nil)).Elem()
}

func (o MongoDbShardKeySettingPtrOutput) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return o
}

func (o MongoDbShardKeySettingPtrOutput) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return o
}

func (o MongoDbShardKeySettingPtrOutput) Elem() MongoDbShardKeySettingOutput {
	return o.ApplyT(func(v *MongoDbShardKeySetting) MongoDbShardKeySetting {
		if v != nil {
			return *v
		}
		var ret MongoDbShardKeySetting
		return ret
	}).(MongoDbShardKeySettingOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingPtrOutput) Fields() MongoDbShardKeyFieldArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeySetting) []MongoDbShardKeyField {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingPtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeySetting) *bool {
		if v == nil {
			return nil
		}
		return v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique *bool `pulumi:"isUnique"`
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponseOutput() MongoDbShardKeySettingResponseOutput {
	return o
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponseOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponseOutput {
	return o
}

// The fields within the shard key
func (o MongoDbShardKeySettingResponseOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) []MongoDbShardKeyFieldResponse { return v.Fields }).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingResponseOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) *bool { return v.IsUnique }).(pulumi.BoolPtrOutput)
}

type MongoDbShardKeySettingResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (o MongoDbShardKeySettingResponsePtrOutput) ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput {
	return o
}

func (o MongoDbShardKeySettingResponsePtrOutput) ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponsePtrOutput {
	return o
}

func (o MongoDbShardKeySettingResponsePtrOutput) Elem() MongoDbShardKeySettingResponseOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) MongoDbShardKeySettingResponse {
		if v != nil {
			return *v
		}
		var ret MongoDbShardKeySettingResponse
		return ret
	}).(MongoDbShardKeySettingResponseOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingResponsePtrOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) []MongoDbShardKeyFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingResponsePtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettings struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// MongoDbThrottlingSettingsInput is an input type that accepts MongoDbThrottlingSettingsArgs and MongoDbThrottlingSettingsOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsInput` via:
//
//	MongoDbThrottlingSettingsArgs{...}
type MongoDbThrottlingSettingsInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput
	ToMongoDbThrottlingSettingsOutputWithContext(context.Context) MongoDbThrottlingSettingsOutput
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsArgs struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism pulumi.IntPtrInput `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu pulumi.IntPtrInput `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb pulumi.IntPtrInput `pulumi:"minFreeMemoryMb"`
}

func (MongoDbThrottlingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettings)(nil)).Elem()
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput {
	return i.ToMongoDbThrottlingSettingsOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsOutput)
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return i.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsOutput).ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx)
}

// MongoDbThrottlingSettingsPtrInput is an input type that accepts MongoDbThrottlingSettingsArgs, MongoDbThrottlingSettingsPtr and MongoDbThrottlingSettingsPtrOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsPtrInput` via:
//
//	        MongoDbThrottlingSettingsArgs{...}
//
//	or:
//
//	        nil
type MongoDbThrottlingSettingsPtrInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput
	ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Context) MongoDbThrottlingSettingsPtrOutput
}

type mongoDbThrottlingSettingsPtrType MongoDbThrottlingSettingsArgs

func MongoDbThrottlingSettingsPtr(v *MongoDbThrottlingSettingsArgs) MongoDbThrottlingSettingsPtrInput {
	return (*mongoDbThrottlingSettingsPtrType)(v)
}

func (*mongoDbThrottlingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettings)(nil)).Elem()
}

func (i *mongoDbThrottlingSettingsPtrType) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return i.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (i *mongoDbThrottlingSettingsPtrType) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettings)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput {
	return o
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsOutput {
	return o
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return o.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (o MongoDbThrottlingSettingsOutput) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongoDbThrottlingSettings) *MongoDbThrottlingSettings {
		return &v
	}).(MongoDbThrottlingSettingsPtrOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettings) *int { return v.MaxParallelism }).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettings) *int { return v.MinFreeCpu }).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettings) *int { return v.MinFreeMemoryMb }).(pulumi.IntPtrOutput)
}

type MongoDbThrottlingSettingsPtrOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettings)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsPtrOutput) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsPtrOutput) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsPtrOutput) Elem() MongoDbThrottlingSettingsOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) MongoDbThrottlingSettings {
		if v != nil {
			return *v
		}
		var ret MongoDbThrottlingSettings
		return ret
	}).(MongoDbThrottlingSettingsOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsPtrOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelism
	}).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsPtrOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeCpu
	}).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsPtrOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeMemoryMb
	}).(pulumi.IntPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponse struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponseOutput() MongoDbThrottlingSettingsResponseOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponseOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponseOutput {
	return o
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsResponseOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MaxParallelism }).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsResponseOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MinFreeCpu }).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsResponseOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MinFreeMemoryMb }).(pulumi.IntPtrOutput)
}

type MongoDbThrottlingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponsePtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) Elem() MongoDbThrottlingSettingsResponseOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) MongoDbThrottlingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret MongoDbThrottlingSettingsResponse
		return ret
	}).(MongoDbThrottlingSettingsResponseOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsResponsePtrOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelism
	}).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsResponsePtrOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeCpu
	}).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsResponsePtrOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeMemoryMb
	}).(pulumi.IntPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source
	DataSource *string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	// Expected value is 'MySqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MySqlConnectionInfo
func (val *MySqlConnectionInfo) Defaults() *MySqlConnectionInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	return &tmp
}

// MySqlConnectionInfoInput is an input type that accepts MySqlConnectionInfoArgs and MySqlConnectionInfoOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoInput` via:
//
//	MySqlConnectionInfoArgs{...}
type MySqlConnectionInfoInput interface {
	pulumi.Input

	ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput
	ToMySqlConnectionInfoOutputWithContext(context.Context) MySqlConnectionInfoOutput
}

// Information for connecting to MySQL server
type MySqlConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source
	DataSource pulumi.StringPtrInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// Type of connection info
	// Expected value is 'MySqlConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MySqlConnectionInfoArgs
func (val *MySqlConnectionInfoArgs) Defaults() *MySqlConnectionInfoArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		tmp.EncryptConnection = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (MySqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfo)(nil)).Elem()
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput {
	return i.ToMySqlConnectionInfoOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoOutputWithContext(ctx context.Context) MySqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoOutput)
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return i.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoOutput).ToMySqlConnectionInfoPtrOutputWithContext(ctx)
}

// MySqlConnectionInfoPtrInput is an input type that accepts MySqlConnectionInfoArgs, MySqlConnectionInfoPtr and MySqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoPtrInput` via:
//
//	        MySqlConnectionInfoArgs{...}
//
//	or:
//
//	        nil
type MySqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput
	ToMySqlConnectionInfoPtrOutputWithContext(context.Context) MySqlConnectionInfoPtrOutput
}

type mySqlConnectionInfoPtrType MySqlConnectionInfoArgs

func MySqlConnectionInfoPtr(v *MySqlConnectionInfoArgs) MySqlConnectionInfoPtrInput {
	return (*mySqlConnectionInfoPtrType)(v)
}

func (*mySqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfo)(nil)).Elem()
}

func (i *mySqlConnectionInfoPtrType) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return i.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *mySqlConnectionInfoPtrType) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfo)(nil)).Elem()
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput {
	return o
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoOutputWithContext(ctx context.Context) MySqlConnectionInfoOutput {
	return o
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return o.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o MySqlConnectionInfoOutput) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MySqlConnectionInfo) *MySqlConnectionInfo {
		return &v
	}).(MySqlConnectionInfoPtrOutput)
}

// Additional connection settings
func (o MySqlConnectionInfoOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MySqlConnectionInfoOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source
func (o MySqlConnectionInfoOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MySqlConnectionInfoOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MySqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o MySqlConnectionInfoOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) string { return v.ServerName }).(pulumi.StringOutput)
}

// Type of connection info
// Expected value is 'MySqlConnectionInfo'.
func (o MySqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MySqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MySqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfo)(nil)).Elem()
}

func (o MySqlConnectionInfoPtrOutput) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return o
}

func (o MySqlConnectionInfoPtrOutput) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return o
}

func (o MySqlConnectionInfoPtrOutput) Elem() MySqlConnectionInfoOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) MySqlConnectionInfo {
		if v != nil {
			return *v
		}
		var ret MySqlConnectionInfo
		return ret
	}).(MySqlConnectionInfoOutput)
}

// Additional connection settings
func (o MySqlConnectionInfoPtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MySqlConnectionInfoPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source
func (o MySqlConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MySqlConnectionInfoPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MySqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o MySqlConnectionInfoPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'MySqlConnectionInfo'.
func (o MySqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MySqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source
	DataSource *string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	// Expected value is 'MySqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for MySqlConnectionInfoResponse
func (val *MySqlConnectionInfoResponse) Defaults() *MySqlConnectionInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	return &tmp
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfoResponse)(nil)).Elem()
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponseOutput() MySqlConnectionInfoResponseOutput {
	return o
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponseOutputWithContext(ctx context.Context) MySqlConnectionInfoResponseOutput {
	return o
}

// Additional connection settings
func (o MySqlConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MySqlConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source
func (o MySqlConnectionInfoResponseOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MySqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MySqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o MySqlConnectionInfoResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// Type of connection info
// Expected value is 'MySqlConnectionInfo'.
func (o MySqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MySqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MySqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfoResponse)(nil)).Elem()
}

func (o MySqlConnectionInfoResponsePtrOutput) ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MySqlConnectionInfoResponsePtrOutput) ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MySqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MySqlConnectionInfoResponsePtrOutput) Elem() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) MySqlConnectionInfoResponse {
		if v != nil {
			return *v
		}
		var ret MySqlConnectionInfoResponse
		return ret
	}).(MySqlConnectionInfoResponseOutput)
}

// Additional connection settings
func (o MySqlConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o MySqlConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source
func (o MySqlConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o MySqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o MySqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o MySqlConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'MySqlConnectionInfo'.
func (o MySqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MySqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

type NodeMonitoringDataResponse struct {
	//  Unmatched properties from the message are deserialized in this collection.
	AdditionalProperties map[string]interface{} `pulumi:"additionalProperties"`
	// Available memory (MB) on the integration runtime node.
	AvailableMemoryInMB int `pulumi:"availableMemoryInMB"`
	// Maximum concurrent jobs on the integration runtime node.
	ConcurrentJobsLimit int `pulumi:"concurrentJobsLimit"`
	// The number of jobs currently running on the integration runtime node.
	ConcurrentJobsRunning int `pulumi:"concurrentJobsRunning"`
	// CPU percentage on the integration runtime node.
	CpuUtilization int `pulumi:"cpuUtilization"`
	// The maximum concurrent jobs in this integration runtime.
	MaxConcurrentJobs int `pulumi:"maxConcurrentJobs"`
	// Name of the integration runtime node.
	NodeName string `pulumi:"nodeName"`
	// Received bytes on the integration runtime node.
	ReceivedBytes float64 `pulumi:"receivedBytes"`
	// Sent bytes on the integration runtime node.
	SentBytes float64 `pulumi:"sentBytes"`
}

type NodeMonitoringDataResponseOutput struct{ *pulumi.OutputState }

func (NodeMonitoringDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeMonitoringDataResponse)(nil)).Elem()
}

func (o NodeMonitoringDataResponseOutput) ToNodeMonitoringDataResponseOutput() NodeMonitoringDataResponseOutput {
	return o
}

func (o NodeMonitoringDataResponseOutput) ToNodeMonitoringDataResponseOutputWithContext(ctx context.Context) NodeMonitoringDataResponseOutput {
	return o
}

// Unmatched properties from the message are deserialized in this collection.
func (o NodeMonitoringDataResponseOutput) AdditionalProperties() pulumi.MapOutput {
	return o.ApplyT(func(v NodeMonitoringDataResponse) map[string]interface{} { return v.AdditionalProperties }).(pulumi.MapOutput)
}

// Available memory (MB) on the integration runtime node.
func (o NodeMonitoringDataResponseOutput) AvailableMemoryInMB() pulumi.IntOutput {
	return o.ApplyT(func(v NodeMonitoringDataResponse) int { return v.AvailableMemoryInMB }).(pulumi.IntOutput)
}

// Maximum concurrent jobs on the integration runtime node.
func (o NodeMonitoringDataResponseOutput) ConcurrentJobsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v NodeMonitoringDataResponse) int { return v.ConcurrentJobsLimit }).(pulumi.IntOutput)
}

// The number of jobs currently running on the integration runtime node.
func (o NodeMonitoringDataResponseOutput) ConcurrentJobsRunning() pulumi.IntOutput {
	return o.ApplyT(func(v NodeMonitoringDataResponse) int { return v.ConcurrentJobsRunning }).(pulumi.IntOutput)
}

// CPU percentage on the integration runtime node.
func (o NodeMonitoringDataResponseOutput) CpuUtilization() pulumi.IntOutput {
	return o.ApplyT(func(v NodeMonitoringDataResponse) int { return v.CpuUtilization }).(pulumi.IntOutput)
}

// The maximum concurrent jobs in this integration runtime.
func (o NodeMonitoringDataResponseOutput) MaxConcurrentJobs() pulumi.IntOutput {
	return o.ApplyT(func(v NodeMonitoringDataResponse) int { return v.MaxConcurrentJobs }).(pulumi.IntOutput)
}

// Name of the integration runtime node.
func (o NodeMonitoringDataResponseOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v NodeMonitoringDataResponse) string { return v.NodeName }).(pulumi.StringOutput)
}

// Received bytes on the integration runtime node.
func (o NodeMonitoringDataResponseOutput) ReceivedBytes() pulumi.Float64Output {
	return o.ApplyT(func(v NodeMonitoringDataResponse) float64 { return v.ReceivedBytes }).(pulumi.Float64Output)
}

// Sent bytes on the integration runtime node.
func (o NodeMonitoringDataResponseOutput) SentBytes() pulumi.Float64Output {
	return o.ApplyT(func(v NodeMonitoringDataResponse) float64 { return v.SentBytes }).(pulumi.Float64Output)
}

type NodeMonitoringDataResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeMonitoringDataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeMonitoringDataResponse)(nil)).Elem()
}

func (o NodeMonitoringDataResponseArrayOutput) ToNodeMonitoringDataResponseArrayOutput() NodeMonitoringDataResponseArrayOutput {
	return o
}

func (o NodeMonitoringDataResponseArrayOutput) ToNodeMonitoringDataResponseArrayOutputWithContext(ctx context.Context) NodeMonitoringDataResponseArrayOutput {
	return o
}

func (o NodeMonitoringDataResponseArrayOutput) Index(i pulumi.IntInput) NodeMonitoringDataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeMonitoringDataResponse {
		return vs[0].([]NodeMonitoringDataResponse)[vs[1].(int)]
	}).(NodeMonitoringDataResponseOutput)
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// Error information in OData format.
type ODataErrorResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return o
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Inner errors that caused this error
func (o ODataErrorResponseOutput) Details() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorResponse) []ODataErrorResponse { return v.Details }).(ODataErrorResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ODataErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorResponse {
		return vs[0].([]ODataErrorResponse)[vs[1].(int)]
	}).(ODataErrorResponseOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfo struct {
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// port for server
	Port *int `pulumi:"port"`
	// name of the server
	ServerName *string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Type of connection info
	// Expected value is 'OracleConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// OracleConnectionInfoInput is an input type that accepts OracleConnectionInfoArgs and OracleConnectionInfoOutput values.
// You can construct a concrete instance of `OracleConnectionInfoInput` via:
//
//	OracleConnectionInfoArgs{...}
type OracleConnectionInfoInput interface {
	pulumi.Input

	ToOracleConnectionInfoOutput() OracleConnectionInfoOutput
	ToOracleConnectionInfoOutputWithContext(context.Context) OracleConnectionInfoOutput
}

// Information for connecting to Oracle server
type OracleConnectionInfoArgs struct {
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// EZConnect or TNSName connection string.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// port for server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// name of the server
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// server version
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// Type of connection info
	// Expected value is 'OracleConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (OracleConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfo)(nil)).Elem()
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoOutput() OracleConnectionInfoOutput {
	return i.ToOracleConnectionInfoOutputWithContext(context.Background())
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoOutputWithContext(ctx context.Context) OracleConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoOutput)
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return i.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoOutput).ToOracleConnectionInfoPtrOutputWithContext(ctx)
}

// OracleConnectionInfoPtrInput is an input type that accepts OracleConnectionInfoArgs, OracleConnectionInfoPtr and OracleConnectionInfoPtrOutput values.
// You can construct a concrete instance of `OracleConnectionInfoPtrInput` via:
//
//	        OracleConnectionInfoArgs{...}
//
//	or:
//
//	        nil
type OracleConnectionInfoPtrInput interface {
	pulumi.Input

	ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput
	ToOracleConnectionInfoPtrOutputWithContext(context.Context) OracleConnectionInfoPtrOutput
}

type oracleConnectionInfoPtrType OracleConnectionInfoArgs

func OracleConnectionInfoPtr(v *OracleConnectionInfoArgs) OracleConnectionInfoPtrInput {
	return (*oracleConnectionInfoPtrType)(v)
}

func (*oracleConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfo)(nil)).Elem()
}

func (i *oracleConnectionInfoPtrType) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return i.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *oracleConnectionInfoPtrType) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoPtrOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfoOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfo)(nil)).Elem()
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoOutput() OracleConnectionInfoOutput {
	return o
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoOutputWithContext(ctx context.Context) OracleConnectionInfoOutput {
	return o
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return o.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (o OracleConnectionInfoOutput) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleConnectionInfo) *OracleConnectionInfo {
		return &v
	}).(OracleConnectionInfoPtrOutput)
}

// Authentication type to use for connection
func (o OracleConnectionInfoOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfo) string { return v.DataSource }).(pulumi.StringOutput)
}

// Password credential.
func (o OracleConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// port for server
func (o OracleConnectionInfoOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// name of the server
func (o OracleConnectionInfoOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// server version
func (o OracleConnectionInfoOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'OracleConnectionInfo'.
func (o OracleConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o OracleConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type OracleConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfo)(nil)).Elem()
}

func (o OracleConnectionInfoPtrOutput) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return o
}

func (o OracleConnectionInfoPtrOutput) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return o
}

func (o OracleConnectionInfoPtrOutput) Elem() OracleConnectionInfoOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) OracleConnectionInfo {
		if v != nil {
			return *v
		}
		var ret OracleConnectionInfo
		return ret
	}).(OracleConnectionInfoOutput)
}

// Authentication type to use for connection
func (o OracleConnectionInfoPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o OracleConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// port for server
func (o OracleConnectionInfoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// name of the server
func (o OracleConnectionInfoPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o OracleConnectionInfoPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'OracleConnectionInfo'.
func (o OracleConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o OracleConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponse struct {
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// port for server
	Port *int `pulumi:"port"`
	// name of the server
	ServerName *string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Type of connection info
	// Expected value is 'OracleConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfoResponse)(nil)).Elem()
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponseOutput() OracleConnectionInfoResponseOutput {
	return o
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponseOutputWithContext(ctx context.Context) OracleConnectionInfoResponseOutput {
	return o
}

// Authentication type to use for connection
func (o OracleConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Password credential.
func (o OracleConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// port for server
func (o OracleConnectionInfoResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// name of the server
func (o OracleConnectionInfoResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// server version
func (o OracleConnectionInfoResponseOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'OracleConnectionInfo'.
func (o OracleConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o OracleConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type OracleConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfoResponse)(nil)).Elem()
}

func (o OracleConnectionInfoResponsePtrOutput) ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput {
	return o
}

func (o OracleConnectionInfoResponsePtrOutput) ToOracleConnectionInfoResponsePtrOutputWithContext(ctx context.Context) OracleConnectionInfoResponsePtrOutput {
	return o
}

func (o OracleConnectionInfoResponsePtrOutput) Elem() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) OracleConnectionInfoResponse {
		if v != nil {
			return *v
		}
		var ret OracleConnectionInfoResponse
		return ret
	}).(OracleConnectionInfoResponseOutput)
}

// Authentication type to use for connection
func (o OracleConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o OracleConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// port for server
func (o OracleConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// name of the server
func (o OracleConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o OracleConnectionInfoResponsePtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
// Expected value is 'OracleConnectionInfo'.
func (o OracleConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o OracleConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponse struct {
	// Parent database of the user
	DatabaseName *string `pulumi:"databaseName"`
	// Name of the orphaned user
	Name *string `pulumi:"name"`
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponseOutput struct{ *pulumi.OutputState }

func (OrphanedUserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrphanedUserInfoResponse)(nil)).Elem()
}

func (o OrphanedUserInfoResponseOutput) ToOrphanedUserInfoResponseOutput() OrphanedUserInfoResponseOutput {
	return o
}

func (o OrphanedUserInfoResponseOutput) ToOrphanedUserInfoResponseOutputWithContext(ctx context.Context) OrphanedUserInfoResponseOutput {
	return o
}

// Parent database of the user
func (o OrphanedUserInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrphanedUserInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Name of the orphaned user
func (o OrphanedUserInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrphanedUserInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OrphanedUserInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (OrphanedUserInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrphanedUserInfoResponse)(nil)).Elem()
}

func (o OrphanedUserInfoResponseArrayOutput) ToOrphanedUserInfoResponseArrayOutput() OrphanedUserInfoResponseArrayOutput {
	return o
}

func (o OrphanedUserInfoResponseArrayOutput) ToOrphanedUserInfoResponseArrayOutputWithContext(ctx context.Context) OrphanedUserInfoResponseArrayOutput {
	return o
}

func (o OrphanedUserInfoResponseArrayOutput) Index(i pulumi.IntInput) OrphanedUserInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrphanedUserInfoResponse {
		return vs[0].([]OrphanedUserInfoResponse)[vs[1].(int)]
	}).(OrphanedUserInfoResponseOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source
	DataSource *string `pulumi:"dataSource"`
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// server brand version
	ServerBrandVersion *string `pulumi:"serverBrandVersion"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'PostgreSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for PostgreSqlConnectionInfo
func (val *PostgreSqlConnectionInfo) Defaults() *PostgreSqlConnectionInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if tmp.TrustServerCertificate == nil {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// PostgreSqlConnectionInfoInput is an input type that accepts PostgreSqlConnectionInfoArgs and PostgreSqlConnectionInfoOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoInput` via:
//
//	PostgreSqlConnectionInfoArgs{...}
type PostgreSqlConnectionInfoInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput
	ToPostgreSqlConnectionInfoOutputWithContext(context.Context) PostgreSqlConnectionInfoOutput
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source
	DataSource pulumi.StringPtrInput `pulumi:"dataSource"`
	// Name of the database
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// server brand version
	ServerBrandVersion pulumi.StringPtrInput `pulumi:"serverBrandVersion"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// server version
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'PostgreSqlConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for PostgreSqlConnectionInfoArgs
func (val *PostgreSqlConnectionInfoArgs) Defaults() *PostgreSqlConnectionInfoArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		tmp.EncryptConnection = pulumi.BoolPtr(true)
	}
	if tmp.TrustServerCertificate == nil {
		tmp.TrustServerCertificate = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (PostgreSqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfo)(nil)).Elem()
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput {
	return i.ToPostgreSqlConnectionInfoOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoOutput)
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return i.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoOutput).ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx)
}

// PostgreSqlConnectionInfoPtrInput is an input type that accepts PostgreSqlConnectionInfoArgs, PostgreSqlConnectionInfoPtr and PostgreSqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoPtrInput` via:
//
//	        PostgreSqlConnectionInfoArgs{...}
//
//	or:
//
//	        nil
type PostgreSqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput
	ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Context) PostgreSqlConnectionInfoPtrOutput
}

type postgreSqlConnectionInfoPtrType PostgreSqlConnectionInfoArgs

func PostgreSqlConnectionInfoPtr(v *PostgreSqlConnectionInfoArgs) PostgreSqlConnectionInfoPtrInput {
	return (*postgreSqlConnectionInfoPtrType)(v)
}

func (*postgreSqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfo)(nil)).Elem()
}

func (i *postgreSqlConnectionInfoPtrType) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return i.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *postgreSqlConnectionInfoPtrType) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoPtrOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfo)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput {
	return o
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoOutput {
	return o
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return o.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o PostgreSqlConnectionInfoOutput) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgreSqlConnectionInfo) *PostgreSqlConnectionInfo {
		return &v
	}).(PostgreSqlConnectionInfoPtrOutput)
}

// Additional connection settings
func (o PostgreSqlConnectionInfoOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o PostgreSqlConnectionInfoOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source
func (o PostgreSqlConnectionInfoOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) int { return v.Port }).(pulumi.IntOutput)
}

// server brand version
func (o PostgreSqlConnectionInfoOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.ServerBrandVersion }).(pulumi.StringPtrOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) string { return v.ServerName }).(pulumi.StringOutput)
}

// server version
func (o PostgreSqlConnectionInfoOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'PostgreSqlConnectionInfo'.
func (o PostgreSqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o PostgreSqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type PostgreSqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfo)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoPtrOutput) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoPtrOutput) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoPtrOutput) Elem() PostgreSqlConnectionInfoOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) PostgreSqlConnectionInfo {
		if v != nil {
			return *v
		}
		var ret PostgreSqlConnectionInfo
		return ret
	}).(PostgreSqlConnectionInfoOutput)
}

// Additional connection settings
func (o PostgreSqlConnectionInfoPtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o PostgreSqlConnectionInfoPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source
func (o PostgreSqlConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// server brand version
func (o PostgreSqlConnectionInfoPtrOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerBrandVersion
	}).(pulumi.StringPtrOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o PostgreSqlConnectionInfoPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoPtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'PostgreSqlConnectionInfo'.
func (o PostgreSqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o PostgreSqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source
	DataSource *string `pulumi:"dataSource"`
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// server brand version
	ServerBrandVersion *string `pulumi:"serverBrandVersion"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'PostgreSqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for PostgreSqlConnectionInfoResponse
func (val *PostgreSqlConnectionInfoResponse) Defaults() *PostgreSqlConnectionInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if tmp.TrustServerCertificate == nil {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponseOutput() PostgreSqlConnectionInfoResponseOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponseOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponseOutput {
	return o
}

// Additional connection settings
func (o PostgreSqlConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o PostgreSqlConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source
func (o PostgreSqlConnectionInfoResponseOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) int { return v.Port }).(pulumi.IntOutput)
}

// server brand version
func (o PostgreSqlConnectionInfoResponseOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.ServerBrandVersion }).(pulumi.StringPtrOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// server version
func (o PostgreSqlConnectionInfoResponseOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'PostgreSqlConnectionInfo'.
func (o PostgreSqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o PostgreSqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type PostgreSqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) Elem() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) PostgreSqlConnectionInfoResponse {
		if v != nil {
			return *v
		}
		var ret PostgreSqlConnectionInfoResponse
		return ret
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// Additional connection settings
func (o PostgreSqlConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o PostgreSqlConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source
func (o PostgreSqlConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// server brand version
func (o PostgreSqlConnectionInfoResponsePtrOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerBrandVersion
	}).(pulumi.StringPtrOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o PostgreSqlConnectionInfoResponsePtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'PostgreSqlConnectionInfo'.
func (o PostgreSqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o PostgreSqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Base class for file properties.
type ProjectFileProperties struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
}

// ProjectFilePropertiesInput is an input type that accepts ProjectFilePropertiesArgs and ProjectFilePropertiesOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesInput` via:
//
//	ProjectFilePropertiesArgs{...}
type ProjectFilePropertiesInput interface {
	pulumi.Input

	ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput
	ToProjectFilePropertiesOutputWithContext(context.Context) ProjectFilePropertiesOutput
}

// Base class for file properties.
type ProjectFilePropertiesArgs struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension pulumi.StringPtrInput `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
}

func (ProjectFilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileProperties)(nil)).Elem()
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput {
	return i.ToProjectFilePropertiesOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutputWithContext(ctx context.Context) ProjectFilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput)
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput).ToProjectFilePropertiesPtrOutputWithContext(ctx)
}

// ProjectFilePropertiesPtrInput is an input type that accepts ProjectFilePropertiesArgs, ProjectFilePropertiesPtr and ProjectFilePropertiesPtrOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesPtrInput` via:
//
//	        ProjectFilePropertiesArgs{...}
//
//	or:
//
//	        nil
type ProjectFilePropertiesPtrInput interface {
	pulumi.Input

	ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput
	ToProjectFilePropertiesPtrOutputWithContext(context.Context) ProjectFilePropertiesPtrOutput
}

type projectFilePropertiesPtrType ProjectFilePropertiesArgs

func ProjectFilePropertiesPtr(v *ProjectFilePropertiesArgs) ProjectFilePropertiesPtrInput {
	return (*projectFilePropertiesPtrType)(v)
}

func (*projectFilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFileProperties)(nil)).Elem()
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesPtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileProperties)(nil)).Elem()
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput {
	return o
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesOutputWithContext(ctx context.Context) ProjectFilePropertiesOutput {
	return o
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return o.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (o ProjectFilePropertiesOutput) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectFileProperties) *ProjectFileProperties {
		return &v
	}).(ProjectFilePropertiesPtrOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFileProperties) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

type ProjectFilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFileProperties)(nil)).Elem()
}

func (o ProjectFilePropertiesPtrOutput) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return o
}

func (o ProjectFilePropertiesPtrOutput) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return o
}

func (o ProjectFilePropertiesPtrOutput) Elem() ProjectFilePropertiesOutput {
	return o.ApplyT(func(v *ProjectFileProperties) ProjectFileProperties {
		if v != nil {
			return *v
		}
		var ret ProjectFileProperties
		return ret
	}).(ProjectFilePropertiesOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesPtrOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.Extension
	}).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesPtrOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.FilePath
	}).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesResponse struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// Modification DateTime.
	LastModified string `pulumi:"lastModified"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
	// File size.
	Size float64 `pulumi:"size"`
}

// Base class for file properties.
type ProjectFilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFilePropertiesResponse)(nil)).Elem()
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutput() ProjectFilePropertiesResponseOutput {
	return o
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutputWithContext(ctx context.Context) ProjectFilePropertiesResponseOutput {
	return o
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesResponseOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Modification DateTime.
func (o ProjectFilePropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesResponseOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// File size.
func (o ProjectFilePropertiesResponseOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) float64 { return v.Size }).(pulumi.Float64Output)
}

// Results for query analysis comparison between the source and target
type QueryAnalysisValidationResultResponse struct {
	// List of queries executed and it's execution results in source and target
	QueryResults *QueryExecutionResultResponse `pulumi:"queryResults"`
	// Errors that are part of the execution
	ValidationErrors *ValidationErrorResponse `pulumi:"validationErrors"`
}

// Results for query analysis comparison between the source and target
type QueryAnalysisValidationResultResponseOutput struct{ *pulumi.OutputState }

func (QueryAnalysisValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAnalysisValidationResultResponse)(nil)).Elem()
}

func (o QueryAnalysisValidationResultResponseOutput) ToQueryAnalysisValidationResultResponseOutput() QueryAnalysisValidationResultResponseOutput {
	return o
}

func (o QueryAnalysisValidationResultResponseOutput) ToQueryAnalysisValidationResultResponseOutputWithContext(ctx context.Context) QueryAnalysisValidationResultResponseOutput {
	return o
}

// List of queries executed and it's execution results in source and target
func (o QueryAnalysisValidationResultResponseOutput) QueryResults() QueryExecutionResultResponsePtrOutput {
	return o.ApplyT(func(v QueryAnalysisValidationResultResponse) *QueryExecutionResultResponse { return v.QueryResults }).(QueryExecutionResultResponsePtrOutput)
}

// Errors that are part of the execution
func (o QueryAnalysisValidationResultResponseOutput) ValidationErrors() ValidationErrorResponsePtrOutput {
	return o.ApplyT(func(v QueryAnalysisValidationResultResponse) *ValidationErrorResponse { return v.ValidationErrors }).(ValidationErrorResponsePtrOutput)
}

// Describes query analysis results for execution in source and target
type QueryExecutionResultResponse struct {
	// Query text retrieved from the source server
	QueryText *string `pulumi:"queryText"`
	// Query analysis result from the source
	SourceResult *ExecutionStatisticsResponse `pulumi:"sourceResult"`
	// Total no. of statements in the batch
	StatementsInBatch *float64 `pulumi:"statementsInBatch"`
	// Query analysis result from the target
	TargetResult *ExecutionStatisticsResponse `pulumi:"targetResult"`
}

// Describes query analysis results for execution in source and target
type QueryExecutionResultResponseOutput struct{ *pulumi.OutputState }

func (QueryExecutionResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryExecutionResultResponse)(nil)).Elem()
}

func (o QueryExecutionResultResponseOutput) ToQueryExecutionResultResponseOutput() QueryExecutionResultResponseOutput {
	return o
}

func (o QueryExecutionResultResponseOutput) ToQueryExecutionResultResponseOutputWithContext(ctx context.Context) QueryExecutionResultResponseOutput {
	return o
}

// Query text retrieved from the source server
func (o QueryExecutionResultResponseOutput) QueryText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryExecutionResultResponse) *string { return v.QueryText }).(pulumi.StringPtrOutput)
}

// Query analysis result from the source
func (o QueryExecutionResultResponseOutput) SourceResult() ExecutionStatisticsResponsePtrOutput {
	return o.ApplyT(func(v QueryExecutionResultResponse) *ExecutionStatisticsResponse { return v.SourceResult }).(ExecutionStatisticsResponsePtrOutput)
}

// Total no. of statements in the batch
func (o QueryExecutionResultResponseOutput) StatementsInBatch() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v QueryExecutionResultResponse) *float64 { return v.StatementsInBatch }).(pulumi.Float64PtrOutput)
}

// Query analysis result from the target
func (o QueryExecutionResultResponseOutput) TargetResult() ExecutionStatisticsResponsePtrOutput {
	return o.ApplyT(func(v QueryExecutionResultResponse) *ExecutionStatisticsResponse { return v.TargetResult }).(ExecutionStatisticsResponsePtrOutput)
}

type QueryExecutionResultResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryExecutionResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryExecutionResultResponse)(nil)).Elem()
}

func (o QueryExecutionResultResponsePtrOutput) ToQueryExecutionResultResponsePtrOutput() QueryExecutionResultResponsePtrOutput {
	return o
}

func (o QueryExecutionResultResponsePtrOutput) ToQueryExecutionResultResponsePtrOutputWithContext(ctx context.Context) QueryExecutionResultResponsePtrOutput {
	return o
}

func (o QueryExecutionResultResponsePtrOutput) Elem() QueryExecutionResultResponseOutput {
	return o.ApplyT(func(v *QueryExecutionResultResponse) QueryExecutionResultResponse {
		if v != nil {
			return *v
		}
		var ret QueryExecutionResultResponse
		return ret
	}).(QueryExecutionResultResponseOutput)
}

// Query text retrieved from the source server
func (o QueryExecutionResultResponsePtrOutput) QueryText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryExecutionResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueryText
	}).(pulumi.StringPtrOutput)
}

// Query analysis result from the source
func (o QueryExecutionResultResponsePtrOutput) SourceResult() ExecutionStatisticsResponsePtrOutput {
	return o.ApplyT(func(v *QueryExecutionResultResponse) *ExecutionStatisticsResponse {
		if v == nil {
			return nil
		}
		return v.SourceResult
	}).(ExecutionStatisticsResponsePtrOutput)
}

// Total no. of statements in the batch
func (o QueryExecutionResultResponsePtrOutput) StatementsInBatch() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *QueryExecutionResultResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StatementsInBatch
	}).(pulumi.Float64PtrOutput)
}

// Query analysis result from the target
func (o QueryExecutionResultResponsePtrOutput) TargetResult() ExecutionStatisticsResponsePtrOutput {
	return o.ApplyT(func(v *QueryExecutionResultResponse) *ExecutionStatisticsResponse {
		if v == nil {
			return nil
		}
		return v.TargetResult
	}).(ExecutionStatisticsResponsePtrOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionResponse struct {
	// Actionable steps for this exception
	ActionableMessage *string `pulumi:"actionableMessage"`
	// The path to the file where exception occurred
	FilePath *string `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult *int `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber *string `pulumi:"lineNumber"`
	// Error message
	Message *string `pulumi:"message"`
	// Stack trace
	StackTrace *string `pulumi:"stackTrace"`
}

// Exception object for all custom exceptions
type ReportableExceptionResponseOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput {
	return o
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutputWithContext(ctx context.Context) ReportableExceptionResponseOutput {
	return o
}

// Actionable steps for this exception
func (o ReportableExceptionResponseOutput) ActionableMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.ActionableMessage }).(pulumi.StringPtrOutput)
}

// The path to the file where exception occurred
func (o ReportableExceptionResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Coded numerical value that is assigned to a specific exception
func (o ReportableExceptionResponseOutput) HResult() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *int { return v.HResult }).(pulumi.IntPtrOutput)
}

// The line number where exception occurred
func (o ReportableExceptionResponseOutput) LineNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.LineNumber }).(pulumi.StringPtrOutput)
}

// Error message
func (o ReportableExceptionResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Stack trace
func (o ReportableExceptionResponseOutput) StackTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.StackTrace }).(pulumi.StringPtrOutput)
}

type ReportableExceptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) Index(i pulumi.IntInput) ReportableExceptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportableExceptionResponse {
		return vs[0].([]ReportableExceptionResponse)[vs[1].(int)]
	}).(ReportableExceptionResponseOutput)
}

// Results for schema comparison between the source and target
type SchemaComparisonValidationResultResponse struct {
	// List of schema differences between the source and target databases
	SchemaDifferences *SchemaComparisonValidationResultTypeResponse `pulumi:"schemaDifferences"`
	// Count of source database objects
	SourceDatabaseObjectCount map[string]float64 `pulumi:"sourceDatabaseObjectCount"`
	// Count of target database objects
	TargetDatabaseObjectCount map[string]float64 `pulumi:"targetDatabaseObjectCount"`
	// List of errors that happened while performing schema compare validation
	ValidationErrors *ValidationErrorResponse `pulumi:"validationErrors"`
}

// Results for schema comparison between the source and target
type SchemaComparisonValidationResultResponseOutput struct{ *pulumi.OutputState }

func (SchemaComparisonValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaComparisonValidationResultResponse)(nil)).Elem()
}

func (o SchemaComparisonValidationResultResponseOutput) ToSchemaComparisonValidationResultResponseOutput() SchemaComparisonValidationResultResponseOutput {
	return o
}

func (o SchemaComparisonValidationResultResponseOutput) ToSchemaComparisonValidationResultResponseOutputWithContext(ctx context.Context) SchemaComparisonValidationResultResponseOutput {
	return o
}

// List of schema differences between the source and target databases
func (o SchemaComparisonValidationResultResponseOutput) SchemaDifferences() SchemaComparisonValidationResultTypeResponsePtrOutput {
	return o.ApplyT(func(v SchemaComparisonValidationResultResponse) *SchemaComparisonValidationResultTypeResponse {
		return v.SchemaDifferences
	}).(SchemaComparisonValidationResultTypeResponsePtrOutput)
}

// Count of source database objects
func (o SchemaComparisonValidationResultResponseOutput) SourceDatabaseObjectCount() pulumi.Float64MapOutput {
	return o.ApplyT(func(v SchemaComparisonValidationResultResponse) map[string]float64 {
		return v.SourceDatabaseObjectCount
	}).(pulumi.Float64MapOutput)
}

// Count of target database objects
func (o SchemaComparisonValidationResultResponseOutput) TargetDatabaseObjectCount() pulumi.Float64MapOutput {
	return o.ApplyT(func(v SchemaComparisonValidationResultResponse) map[string]float64 {
		return v.TargetDatabaseObjectCount
	}).(pulumi.Float64MapOutput)
}

// List of errors that happened while performing schema compare validation
func (o SchemaComparisonValidationResultResponseOutput) ValidationErrors() ValidationErrorResponsePtrOutput {
	return o.ApplyT(func(v SchemaComparisonValidationResultResponse) *ValidationErrorResponse { return v.ValidationErrors }).(ValidationErrorResponsePtrOutput)
}

// Description about the errors happen while performing migration validation
type SchemaComparisonValidationResultTypeResponse struct {
	// Name of the object that has the difference
	ObjectName *string `pulumi:"objectName"`
	// Type of the object that has the difference. e.g (Table/View/StoredProcedure)
	ObjectType *string `pulumi:"objectType"`
	// Update action type with respect to target
	UpdateAction *string `pulumi:"updateAction"`
}

// Description about the errors happen while performing migration validation
type SchemaComparisonValidationResultTypeResponseOutput struct{ *pulumi.OutputState }

func (SchemaComparisonValidationResultTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaComparisonValidationResultTypeResponse)(nil)).Elem()
}

func (o SchemaComparisonValidationResultTypeResponseOutput) ToSchemaComparisonValidationResultTypeResponseOutput() SchemaComparisonValidationResultTypeResponseOutput {
	return o
}

func (o SchemaComparisonValidationResultTypeResponseOutput) ToSchemaComparisonValidationResultTypeResponseOutputWithContext(ctx context.Context) SchemaComparisonValidationResultTypeResponseOutput {
	return o
}

// Name of the object that has the difference
func (o SchemaComparisonValidationResultTypeResponseOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaComparisonValidationResultTypeResponse) *string { return v.ObjectName }).(pulumi.StringPtrOutput)
}

// Type of the object that has the difference. e.g (Table/View/StoredProcedure)
func (o SchemaComparisonValidationResultTypeResponseOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaComparisonValidationResultTypeResponse) *string { return v.ObjectType }).(pulumi.StringPtrOutput)
}

// Update action type with respect to target
func (o SchemaComparisonValidationResultTypeResponseOutput) UpdateAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaComparisonValidationResultTypeResponse) *string { return v.UpdateAction }).(pulumi.StringPtrOutput)
}

type SchemaComparisonValidationResultTypeResponsePtrOutput struct{ *pulumi.OutputState }

func (SchemaComparisonValidationResultTypeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaComparisonValidationResultTypeResponse)(nil)).Elem()
}

func (o SchemaComparisonValidationResultTypeResponsePtrOutput) ToSchemaComparisonValidationResultTypeResponsePtrOutput() SchemaComparisonValidationResultTypeResponsePtrOutput {
	return o
}

func (o SchemaComparisonValidationResultTypeResponsePtrOutput) ToSchemaComparisonValidationResultTypeResponsePtrOutputWithContext(ctx context.Context) SchemaComparisonValidationResultTypeResponsePtrOutput {
	return o
}

func (o SchemaComparisonValidationResultTypeResponsePtrOutput) Elem() SchemaComparisonValidationResultTypeResponseOutput {
	return o.ApplyT(func(v *SchemaComparisonValidationResultTypeResponse) SchemaComparisonValidationResultTypeResponse {
		if v != nil {
			return *v
		}
		var ret SchemaComparisonValidationResultTypeResponse
		return ret
	}).(SchemaComparisonValidationResultTypeResponseOutput)
}

// Name of the object that has the difference
func (o SchemaComparisonValidationResultTypeResponsePtrOutput) ObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaComparisonValidationResultTypeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectName
	}).(pulumi.StringPtrOutput)
}

// Type of the object that has the difference. e.g (Table/View/StoredProcedure)
func (o SchemaComparisonValidationResultTypeResponsePtrOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaComparisonValidationResultTypeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectType
	}).(pulumi.StringPtrOutput)
}

// Update action type with respect to target
func (o SchemaComparisonValidationResultTypeResponsePtrOutput) UpdateAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaComparisonValidationResultTypeResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpdateAction
	}).(pulumi.StringPtrOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInput struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// SelectedCertificateInputInput is an input type that accepts SelectedCertificateInputArgs and SelectedCertificateInputOutput values.
// You can construct a concrete instance of `SelectedCertificateInputInput` via:
//
//	SelectedCertificateInputArgs{...}
type SelectedCertificateInputInput interface {
	pulumi.Input

	ToSelectedCertificateInputOutput() SelectedCertificateInputOutput
	ToSelectedCertificateInputOutputWithContext(context.Context) SelectedCertificateInputOutput
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputArgs struct {
	// Name of certificate to be exported.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password pulumi.StringInput `pulumi:"password"`
}

func (SelectedCertificateInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInput)(nil)).Elem()
}

func (i SelectedCertificateInputArgs) ToSelectedCertificateInputOutput() SelectedCertificateInputOutput {
	return i.ToSelectedCertificateInputOutputWithContext(context.Background())
}

func (i SelectedCertificateInputArgs) ToSelectedCertificateInputOutputWithContext(ctx context.Context) SelectedCertificateInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputOutput)
}

// SelectedCertificateInputArrayInput is an input type that accepts SelectedCertificateInputArray and SelectedCertificateInputArrayOutput values.
// You can construct a concrete instance of `SelectedCertificateInputArrayInput` via:
//
//	SelectedCertificateInputArray{ SelectedCertificateInputArgs{...} }
type SelectedCertificateInputArrayInput interface {
	pulumi.Input

	ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput
	ToSelectedCertificateInputArrayOutputWithContext(context.Context) SelectedCertificateInputArrayOutput
}

type SelectedCertificateInputArray []SelectedCertificateInputInput

func (SelectedCertificateInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInput)(nil)).Elem()
}

func (i SelectedCertificateInputArray) ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput {
	return i.ToSelectedCertificateInputArrayOutputWithContext(context.Background())
}

func (i SelectedCertificateInputArray) ToSelectedCertificateInputArrayOutputWithContext(ctx context.Context) SelectedCertificateInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputArrayOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInput)(nil)).Elem()
}

func (o SelectedCertificateInputOutput) ToSelectedCertificateInputOutput() SelectedCertificateInputOutput {
	return o
}

func (o SelectedCertificateInputOutput) ToSelectedCertificateInputOutputWithContext(ctx context.Context) SelectedCertificateInputOutput {
	return o
}

// Name of certificate to be exported.
func (o SelectedCertificateInputOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInput) string { return v.CertificateName }).(pulumi.StringOutput)
}

// Password to use for encrypting the exported certificate.
func (o SelectedCertificateInputOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInput) string { return v.Password }).(pulumi.StringOutput)
}

type SelectedCertificateInputArrayOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInput)(nil)).Elem()
}

func (o SelectedCertificateInputArrayOutput) ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput {
	return o
}

func (o SelectedCertificateInputArrayOutput) ToSelectedCertificateInputArrayOutputWithContext(ctx context.Context) SelectedCertificateInputArrayOutput {
	return o
}

func (o SelectedCertificateInputArrayOutput) Index(i pulumi.IntInput) SelectedCertificateInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectedCertificateInput {
		return vs[0].([]SelectedCertificateInput)[vs[1].(int)]
	}).(SelectedCertificateInputOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponse struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponseOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInputResponse)(nil)).Elem()
}

func (o SelectedCertificateInputResponseOutput) ToSelectedCertificateInputResponseOutput() SelectedCertificateInputResponseOutput {
	return o
}

func (o SelectedCertificateInputResponseOutput) ToSelectedCertificateInputResponseOutputWithContext(ctx context.Context) SelectedCertificateInputResponseOutput {
	return o
}

// Name of certificate to be exported.
func (o SelectedCertificateInputResponseOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInputResponse) string { return v.CertificateName }).(pulumi.StringOutput)
}

// Password to use for encrypting the exported certificate.
func (o SelectedCertificateInputResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInputResponse) string { return v.Password }).(pulumi.StringOutput)
}

type SelectedCertificateInputResponseArrayOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInputResponse)(nil)).Elem()
}

func (o SelectedCertificateInputResponseArrayOutput) ToSelectedCertificateInputResponseArrayOutput() SelectedCertificateInputResponseArrayOutput {
	return o
}

func (o SelectedCertificateInputResponseArrayOutput) ToSelectedCertificateInputResponseArrayOutputWithContext(ctx context.Context) SelectedCertificateInputResponseArrayOutput {
	return o
}

func (o SelectedCertificateInputResponseArrayOutput) Index(i pulumi.IntInput) SelectedCertificateInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectedCertificateInputResponse {
		return vs[0].([]SelectedCertificateInputResponse)[vs[1].(int)]
	}).(SelectedCertificateInputResponseOutput)
}

// Server properties for MySQL type source
type ServerPropertiesResponse struct {
	// Number of databases in the server
	ServerDatabaseCount int `pulumi:"serverDatabaseCount"`
	// Edition of the database server
	ServerEdition string `pulumi:"serverEdition"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Version of the operating system
	ServerOperatingSystemVersion string `pulumi:"serverOperatingSystemVersion"`
	// Name of the server platform
	ServerPlatform string `pulumi:"serverPlatform"`
	// Version of the database server
	ServerVersion string `pulumi:"serverVersion"`
}

// Server properties for MySQL type source
type ServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerPropertiesResponse)(nil)).Elem()
}

func (o ServerPropertiesResponseOutput) ToServerPropertiesResponseOutput() ServerPropertiesResponseOutput {
	return o
}

func (o ServerPropertiesResponseOutput) ToServerPropertiesResponseOutputWithContext(ctx context.Context) ServerPropertiesResponseOutput {
	return o
}

// Number of databases in the server
func (o ServerPropertiesResponseOutput) ServerDatabaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v ServerPropertiesResponse) int { return v.ServerDatabaseCount }).(pulumi.IntOutput)
}

// Edition of the database server
func (o ServerPropertiesResponseOutput) ServerEdition() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPropertiesResponse) string { return v.ServerEdition }).(pulumi.StringOutput)
}

// Name of the server
func (o ServerPropertiesResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPropertiesResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// Version of the operating system
func (o ServerPropertiesResponseOutput) ServerOperatingSystemVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPropertiesResponse) string { return v.ServerOperatingSystemVersion }).(pulumi.StringOutput)
}

// Name of the server platform
func (o ServerPropertiesResponseOutput) ServerPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPropertiesResponse) string { return v.ServerPlatform }).(pulumi.StringOutput)
}

// Version of the database server
func (o ServerPropertiesResponseOutput) ServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ServerPropertiesResponse) string { return v.ServerVersion }).(pulumi.StringOutput)
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//	ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput).ToServiceSkuPtrOutputWithContext(ctx)
}

// ServiceSkuPtrInput is an input type that accepts ServiceSkuArgs, ServiceSkuPtr and ServiceSkuPtrOutput values.
// You can construct a concrete instance of `ServiceSkuPtrInput` via:
//
//	        ServiceSkuArgs{...}
//
//	or:
//
//	        nil
type ServiceSkuPtrInput interface {
	pulumi.Input

	ToServiceSkuPtrOutput() ServiceSkuPtrOutput
	ToServiceSkuPtrOutputWithContext(context.Context) ServiceSkuPtrOutput
}

type serviceSkuPtrType ServiceSkuArgs

func ServiceSkuPtr(v *ServiceSkuArgs) ServiceSkuPtrInput {
	return (*serviceSkuPtrType)(v)
}

func (*serviceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuPtrOutput)
}

// An Azure SKU instance
type ServiceSkuOutput struct{ *pulumi.OutputState }

func (ServiceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (o ServiceSkuOutput) ToServiceSkuOutput() ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceSku) *ServiceSku {
		return &v
	}).(ServiceSkuPtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuPtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) Elem() ServiceSkuOutput {
	return o.ApplyT(func(v *ServiceSku) ServiceSku {
		if v != nil {
			return *v
		}
		var ret ServiceSku
		return ret
	}).(ServiceSkuOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) Elem() ServiceSkuResponseOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) ServiceSkuResponse {
		if v != nil {
			return *v
		}
		var ret ServiceSkuResponse
		return ret
	}).(ServiceSkuResponseOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Port for Server
	Port *int `pulumi:"port"`
	// Represents the ID of an HTTP resource represented by an Azure resource provider.
	ResourceId *string `pulumi:"resourceId"`
	// server brand version
	ServerBrandVersion *string `pulumi:"serverBrandVersion"`
	// name of the server
	ServerName *string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for SqlConnectionInfo
func (val *SqlConnectionInfo) Defaults() *SqlConnectionInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if tmp.TrustServerCertificate == nil {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// SqlConnectionInfoInput is an input type that accepts SqlConnectionInfoArgs and SqlConnectionInfoOutput values.
// You can construct a concrete instance of `SqlConnectionInfoInput` via:
//
//	SqlConnectionInfoArgs{...}
type SqlConnectionInfoInput interface {
	pulumi.Input

	ToSqlConnectionInfoOutput() SqlConnectionInfoOutput
	ToSqlConnectionInfoOutputWithContext(context.Context) SqlConnectionInfoOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Server platform type for connection
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// Port for Server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Represents the ID of an HTTP resource represented by an Azure resource provider.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// server brand version
	ServerBrandVersion pulumi.StringPtrInput `pulumi:"serverBrandVersion"`
	// name of the server
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// server version
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for SqlConnectionInfoArgs
func (val *SqlConnectionInfoArgs) Defaults() *SqlConnectionInfoArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		tmp.EncryptConnection = pulumi.BoolPtr(true)
	}
	if tmp.TrustServerCertificate == nil {
		tmp.TrustServerCertificate = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (SqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return i.ToSqlConnectionInfoOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput)
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput).ToSqlConnectionInfoPtrOutputWithContext(ctx)
}

// SqlConnectionInfoPtrInput is an input type that accepts SqlConnectionInfoArgs, SqlConnectionInfoPtr and SqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoPtrInput` via:
//
//	        SqlConnectionInfoArgs{...}
//
//	or:
//
//	        nil
type SqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput
	ToSqlConnectionInfoPtrOutputWithContext(context.Context) SqlConnectionInfoPtrOutput
}

type sqlConnectionInfoPtrType SqlConnectionInfoArgs

func SqlConnectionInfoPtr(v *SqlConnectionInfoArgs) SqlConnectionInfoPtrInput {
	return (*sqlConnectionInfoPtrType)(v)
}

func (*sqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return o
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return o
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return o.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoOutput) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlConnectionInfo) *SqlConnectionInfo {
		return &v
	}).(SqlConnectionInfoPtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfo) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o SqlConnectionInfoOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Represents the ID of an HTTP resource represented by an Azure resource provider.
func (o SqlConnectionInfoOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// server brand version
func (o SqlConnectionInfoOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.ServerBrandVersion }).(pulumi.StringPtrOutput)
}

// name of the server
func (o SqlConnectionInfoOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// server version
func (o SqlConnectionInfoOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (o SqlConnectionInfoPtrOutput) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return o
}

func (o SqlConnectionInfoPtrOutput) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return o
}

func (o SqlConnectionInfoPtrOutput) Elem() SqlConnectionInfoOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) SqlConnectionInfo {
		if v != nil {
			return *v
		}
		var ret SqlConnectionInfo
		return ret
	}).(SqlConnectionInfoOutput)
}

// Additional connection settings
func (o SqlConnectionInfoPtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoPtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o SqlConnectionInfoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Represents the ID of an HTTP resource represented by an Azure resource provider.
func (o SqlConnectionInfoPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// server brand version
func (o SqlConnectionInfoPtrOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerBrandVersion
	}).(pulumi.StringPtrOutput)
}

// name of the server
func (o SqlConnectionInfoPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o SqlConnectionInfoPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoPtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Port for Server
	Port *int `pulumi:"port"`
	// Represents the ID of an HTTP resource represented by an Azure resource provider.
	ResourceId *string `pulumi:"resourceId"`
	// server brand version
	ServerBrandVersion *string `pulumi:"serverBrandVersion"`
	// name of the server
	ServerName *string `pulumi:"serverName"`
	// server version
	ServerVersion *string `pulumi:"serverVersion"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	// Expected value is 'SqlConnectionInfo'.
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Defaults sets the appropriate defaults for SqlConnectionInfoResponse
func (val *SqlConnectionInfoResponse) Defaults() *SqlConnectionInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptConnection == nil {
		encryptConnection_ := true
		tmp.EncryptConnection = &encryptConnection_
	}
	if tmp.TrustServerCertificate == nil {
		trustServerCertificate_ := false
		tmp.TrustServerCertificate = &trustServerCertificate_
	}
	return &tmp
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutputWithContext(ctx context.Context) SqlConnectionInfoResponseOutput {
	return o
}

// Additional connection settings
func (o SqlConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoResponseOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o SqlConnectionInfoResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Represents the ID of an HTTP resource represented by an Azure resource provider.
func (o SqlConnectionInfoResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// server brand version
func (o SqlConnectionInfoResponseOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.ServerBrandVersion }).(pulumi.StringPtrOutput)
}

// name of the server
func (o SqlConnectionInfoResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// server version
func (o SqlConnectionInfoResponseOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) Elem() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) SqlConnectionInfoResponse {
		if v != nil {
			return *v
		}
		var ret SqlConnectionInfoResponse
		return ret
	}).(SqlConnectionInfoResponseOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoResponsePtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o SqlConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Represents the ID of an HTTP resource represented by an Azure resource provider.
func (o SqlConnectionInfoResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// server brand version
func (o SqlConnectionInfoResponsePtrOutput) ServerBrandVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerBrandVersion
	}).(pulumi.StringPtrOutput)
}

// name of the server
func (o SqlConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// server version
func (o SqlConnectionInfoResponsePtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
// Expected value is 'SqlConnectionInfo'.
func (o SqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Source SQL Connection
type SqlConnectionInformation struct {
	// Authentication type.
	Authentication *string `pulumi:"authentication"`
	// Data source.
	DataSource *string `pulumi:"dataSource"`
	// Whether to encrypt connection or not.
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password to connect to source SQL.
	Password *string `pulumi:"password"`
	// Whether to trust server certificate or not.
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// User name to connect to source SQL.
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInformationInput is an input type that accepts SqlConnectionInformationArgs and SqlConnectionInformationOutput values.
// You can construct a concrete instance of `SqlConnectionInformationInput` via:
//
//	SqlConnectionInformationArgs{...}
type SqlConnectionInformationInput interface {
	pulumi.Input

	ToSqlConnectionInformationOutput() SqlConnectionInformationOutput
	ToSqlConnectionInformationOutputWithContext(context.Context) SqlConnectionInformationOutput
}

// Source SQL Connection
type SqlConnectionInformationArgs struct {
	// Authentication type.
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source.
	DataSource pulumi.StringPtrInput `pulumi:"dataSource"`
	// Whether to encrypt connection or not.
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password to connect to source SQL.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Whether to trust server certificate or not.
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// User name to connect to source SQL.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInformation)(nil)).Elem()
}

func (i SqlConnectionInformationArgs) ToSqlConnectionInformationOutput() SqlConnectionInformationOutput {
	return i.ToSqlConnectionInformationOutputWithContext(context.Background())
}

func (i SqlConnectionInformationArgs) ToSqlConnectionInformationOutputWithContext(ctx context.Context) SqlConnectionInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInformationOutput)
}

func (i SqlConnectionInformationArgs) ToSqlConnectionInformationPtrOutput() SqlConnectionInformationPtrOutput {
	return i.ToSqlConnectionInformationPtrOutputWithContext(context.Background())
}

func (i SqlConnectionInformationArgs) ToSqlConnectionInformationPtrOutputWithContext(ctx context.Context) SqlConnectionInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInformationOutput).ToSqlConnectionInformationPtrOutputWithContext(ctx)
}

// SqlConnectionInformationPtrInput is an input type that accepts SqlConnectionInformationArgs, SqlConnectionInformationPtr and SqlConnectionInformationPtrOutput values.
// You can construct a concrete instance of `SqlConnectionInformationPtrInput` via:
//
//	        SqlConnectionInformationArgs{...}
//
//	or:
//
//	        nil
type SqlConnectionInformationPtrInput interface {
	pulumi.Input

	ToSqlConnectionInformationPtrOutput() SqlConnectionInformationPtrOutput
	ToSqlConnectionInformationPtrOutputWithContext(context.Context) SqlConnectionInformationPtrOutput
}

type sqlConnectionInformationPtrType SqlConnectionInformationArgs

func SqlConnectionInformationPtr(v *SqlConnectionInformationArgs) SqlConnectionInformationPtrInput {
	return (*sqlConnectionInformationPtrType)(v)
}

func (*sqlConnectionInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInformation)(nil)).Elem()
}

func (i *sqlConnectionInformationPtrType) ToSqlConnectionInformationPtrOutput() SqlConnectionInformationPtrOutput {
	return i.ToSqlConnectionInformationPtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInformationPtrType) ToSqlConnectionInformationPtrOutputWithContext(ctx context.Context) SqlConnectionInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInformationPtrOutput)
}

// Source SQL Connection
type SqlConnectionInformationOutput struct{ *pulumi.OutputState }

func (SqlConnectionInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInformation)(nil)).Elem()
}

func (o SqlConnectionInformationOutput) ToSqlConnectionInformationOutput() SqlConnectionInformationOutput {
	return o
}

func (o SqlConnectionInformationOutput) ToSqlConnectionInformationOutputWithContext(ctx context.Context) SqlConnectionInformationOutput {
	return o
}

func (o SqlConnectionInformationOutput) ToSqlConnectionInformationPtrOutput() SqlConnectionInformationPtrOutput {
	return o.ToSqlConnectionInformationPtrOutputWithContext(context.Background())
}

func (o SqlConnectionInformationOutput) ToSqlConnectionInformationPtrOutputWithContext(ctx context.Context) SqlConnectionInformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlConnectionInformation) *SqlConnectionInformation {
		return &v
	}).(SqlConnectionInformationPtrOutput)
}

// Authentication type.
func (o SqlConnectionInformationOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformation) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source.
func (o SqlConnectionInformationOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformation) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Whether to encrypt connection or not.
func (o SqlConnectionInformationOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformation) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password to connect to source SQL.
func (o SqlConnectionInformationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformation) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether to trust server certificate or not.
func (o SqlConnectionInformationOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformation) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// User name to connect to source SQL.
func (o SqlConnectionInformationOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformation) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInformationPtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInformation)(nil)).Elem()
}

func (o SqlConnectionInformationPtrOutput) ToSqlConnectionInformationPtrOutput() SqlConnectionInformationPtrOutput {
	return o
}

func (o SqlConnectionInformationPtrOutput) ToSqlConnectionInformationPtrOutputWithContext(ctx context.Context) SqlConnectionInformationPtrOutput {
	return o
}

func (o SqlConnectionInformationPtrOutput) Elem() SqlConnectionInformationOutput {
	return o.ApplyT(func(v *SqlConnectionInformation) SqlConnectionInformation {
		if v != nil {
			return *v
		}
		var ret SqlConnectionInformation
		return ret
	}).(SqlConnectionInformationOutput)
}

// Authentication type.
func (o SqlConnectionInformationPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformation) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source.
func (o SqlConnectionInformationPtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformation) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt connection or not.
func (o SqlConnectionInformationPtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformation) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password to connect to source SQL.
func (o SqlConnectionInformationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformation) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Whether to trust server certificate or not.
func (o SqlConnectionInformationPtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformation) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// User name to connect to source SQL.
func (o SqlConnectionInformationPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformation) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Source SQL Connection
type SqlConnectionInformationResponse struct {
	// Authentication type.
	Authentication *string `pulumi:"authentication"`
	// Data source.
	DataSource *string `pulumi:"dataSource"`
	// Whether to encrypt connection or not.
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password to connect to source SQL.
	Password *string `pulumi:"password"`
	// Whether to trust server certificate or not.
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// User name to connect to source SQL.
	UserName *string `pulumi:"userName"`
}

// Source SQL Connection
type SqlConnectionInformationResponseOutput struct{ *pulumi.OutputState }

func (SqlConnectionInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInformationResponse)(nil)).Elem()
}

func (o SqlConnectionInformationResponseOutput) ToSqlConnectionInformationResponseOutput() SqlConnectionInformationResponseOutput {
	return o
}

func (o SqlConnectionInformationResponseOutput) ToSqlConnectionInformationResponseOutputWithContext(ctx context.Context) SqlConnectionInformationResponseOutput {
	return o
}

// Authentication type.
func (o SqlConnectionInformationResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformationResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source.
func (o SqlConnectionInformationResponseOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformationResponse) *string { return v.DataSource }).(pulumi.StringPtrOutput)
}

// Whether to encrypt connection or not.
func (o SqlConnectionInformationResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformationResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password to connect to source SQL.
func (o SqlConnectionInformationResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformationResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether to trust server certificate or not.
func (o SqlConnectionInformationResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformationResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// User name to connect to source SQL.
func (o SqlConnectionInformationResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInformationResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInformationResponse)(nil)).Elem()
}

func (o SqlConnectionInformationResponsePtrOutput) ToSqlConnectionInformationResponsePtrOutput() SqlConnectionInformationResponsePtrOutput {
	return o
}

func (o SqlConnectionInformationResponsePtrOutput) ToSqlConnectionInformationResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInformationResponsePtrOutput {
	return o
}

func (o SqlConnectionInformationResponsePtrOutput) Elem() SqlConnectionInformationResponseOutput {
	return o.ApplyT(func(v *SqlConnectionInformationResponse) SqlConnectionInformationResponse {
		if v != nil {
			return *v
		}
		var ret SqlConnectionInformationResponse
		return ret
	}).(SqlConnectionInformationResponseOutput)
}

// Authentication type.
func (o SqlConnectionInformationResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source.
func (o SqlConnectionInformationResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt connection or not.
func (o SqlConnectionInformationResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password to connect to source SQL.
func (o SqlConnectionInformationResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Whether to trust server certificate or not.
func (o SqlConnectionInformationResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// User name to connect to source SQL.
func (o SqlConnectionInformationResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Detailed status of current Sql Db migration.
type SqlDbMigrationStatusDetailsResponse struct {
	// Details on progress of ADF copy activities.
	ListOfCopyProgressDetails []CopyProgressDetailsResponse `pulumi:"listOfCopyProgressDetails"`
	// Current State of Migration.
	MigrationState string `pulumi:"migrationState"`
	// Sql Data Copy errors, if any.
	SqlDataCopyErrors []string `pulumi:"sqlDataCopyErrors"`
}

// Detailed status of current Sql Db migration.
type SqlDbMigrationStatusDetailsResponseOutput struct{ *pulumi.OutputState }

func (SqlDbMigrationStatusDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDbMigrationStatusDetailsResponse)(nil)).Elem()
}

func (o SqlDbMigrationStatusDetailsResponseOutput) ToSqlDbMigrationStatusDetailsResponseOutput() SqlDbMigrationStatusDetailsResponseOutput {
	return o
}

func (o SqlDbMigrationStatusDetailsResponseOutput) ToSqlDbMigrationStatusDetailsResponseOutputWithContext(ctx context.Context) SqlDbMigrationStatusDetailsResponseOutput {
	return o
}

// Details on progress of ADF copy activities.
func (o SqlDbMigrationStatusDetailsResponseOutput) ListOfCopyProgressDetails() CopyProgressDetailsResponseArrayOutput {
	return o.ApplyT(func(v SqlDbMigrationStatusDetailsResponse) []CopyProgressDetailsResponse {
		return v.ListOfCopyProgressDetails
	}).(CopyProgressDetailsResponseArrayOutput)
}

// Current State of Migration.
func (o SqlDbMigrationStatusDetailsResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDbMigrationStatusDetailsResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Sql Data Copy errors, if any.
func (o SqlDbMigrationStatusDetailsResponseOutput) SqlDataCopyErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SqlDbMigrationStatusDetailsResponse) []string { return v.SqlDataCopyErrors }).(pulumi.StringArrayOutput)
}

// Offline configuration
type SqlDbOfflineConfigurationResponse struct {
	// Offline migration
	Offline bool `pulumi:"offline"`
}

// Offline configuration
type SqlDbOfflineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SqlDbOfflineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDbOfflineConfigurationResponse)(nil)).Elem()
}

func (o SqlDbOfflineConfigurationResponseOutput) ToSqlDbOfflineConfigurationResponseOutput() SqlDbOfflineConfigurationResponseOutput {
	return o
}

func (o SqlDbOfflineConfigurationResponseOutput) ToSqlDbOfflineConfigurationResponseOutputWithContext(ctx context.Context) SqlDbOfflineConfigurationResponseOutput {
	return o
}

// Offline migration
func (o SqlDbOfflineConfigurationResponseOutput) Offline() pulumi.BoolOutput {
	return o.ApplyT(func(v SqlDbOfflineConfigurationResponse) bool { return v.Offline }).(pulumi.BoolOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfo struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// SsisMigrationInfoInput is an input type that accepts SsisMigrationInfoArgs and SsisMigrationInfoOutput values.
// You can construct a concrete instance of `SsisMigrationInfoInput` via:
//
//	SsisMigrationInfoArgs{...}
type SsisMigrationInfoInput interface {
	pulumi.Input

	ToSsisMigrationInfoOutput() SsisMigrationInfoOutput
	ToSsisMigrationInfoOutputWithContext(context.Context) SsisMigrationInfoOutput
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoArgs struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption pulumi.StringPtrInput `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption pulumi.StringPtrInput `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
	SsisStoreType pulumi.StringPtrInput `pulumi:"ssisStoreType"`
}

func (SsisMigrationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfo)(nil)).Elem()
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoOutput() SsisMigrationInfoOutput {
	return i.ToSsisMigrationInfoOutputWithContext(context.Background())
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoOutputWithContext(ctx context.Context) SsisMigrationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoOutput)
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return i.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoOutput).ToSsisMigrationInfoPtrOutputWithContext(ctx)
}

// SsisMigrationInfoPtrInput is an input type that accepts SsisMigrationInfoArgs, SsisMigrationInfoPtr and SsisMigrationInfoPtrOutput values.
// You can construct a concrete instance of `SsisMigrationInfoPtrInput` via:
//
//	        SsisMigrationInfoArgs{...}
//
//	or:
//
//	        nil
type SsisMigrationInfoPtrInput interface {
	pulumi.Input

	ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput
	ToSsisMigrationInfoPtrOutputWithContext(context.Context) SsisMigrationInfoPtrOutput
}

type ssisMigrationInfoPtrType SsisMigrationInfoArgs

func SsisMigrationInfoPtr(v *SsisMigrationInfoArgs) SsisMigrationInfoPtrInput {
	return (*ssisMigrationInfoPtrType)(v)
}

func (*ssisMigrationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfo)(nil)).Elem()
}

func (i *ssisMigrationInfoPtrType) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return i.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (i *ssisMigrationInfoPtrType) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoPtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfo)(nil)).Elem()
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoOutput() SsisMigrationInfoOutput {
	return o
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoOutputWithContext(ctx context.Context) SsisMigrationInfoOutput {
	return o
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return o.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (o SsisMigrationInfoOutput) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SsisMigrationInfo) *SsisMigrationInfo {
		return &v
	}).(SsisMigrationInfoPtrOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfo) *string { return v.EnvironmentOverwriteOption }).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfo) *string { return v.ProjectOverwriteOption }).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
func (o SsisMigrationInfoOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfo) *string { return v.SsisStoreType }).(pulumi.StringPtrOutput)
}

type SsisMigrationInfoPtrOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfo)(nil)).Elem()
}

func (o SsisMigrationInfoPtrOutput) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return o
}

func (o SsisMigrationInfoPtrOutput) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return o
}

func (o SsisMigrationInfoPtrOutput) Elem() SsisMigrationInfoOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) SsisMigrationInfo {
		if v != nil {
			return *v
		}
		var ret SsisMigrationInfo
		return ret
	}).(SsisMigrationInfoOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoPtrOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoPtrOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.ProjectOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
func (o SsisMigrationInfoPtrOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.SsisStoreType
	}).(pulumi.StringPtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponse struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponseOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfoResponse)(nil)).Elem()
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponseOutput() SsisMigrationInfoResponseOutput {
	return o
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponseOutputWithContext(ctx context.Context) SsisMigrationInfoResponseOutput {
	return o
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoResponseOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.EnvironmentOverwriteOption }).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoResponseOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.ProjectOverwriteOption }).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
func (o SsisMigrationInfoResponseOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.SsisStoreType }).(pulumi.StringPtrOutput)
}

type SsisMigrationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfoResponse)(nil)).Elem()
}

func (o SsisMigrationInfoResponsePtrOutput) ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput {
	return o
}

func (o SsisMigrationInfoResponsePtrOutput) ToSsisMigrationInfoResponsePtrOutputWithContext(ctx context.Context) SsisMigrationInfoResponsePtrOutput {
	return o
}

func (o SsisMigrationInfoResponsePtrOutput) Elem() SsisMigrationInfoResponseOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) SsisMigrationInfoResponse {
		if v != nil {
			return *v
		}
		var ret SsisMigrationInfoResponse
		return ret
	}).(SsisMigrationInfoResponseOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoResponsePtrOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoResponsePtrOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProjectOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
func (o SsisMigrationInfoResponsePtrOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.SsisStoreType
	}).(pulumi.StringPtrOutput)
}

// Server role migration result
type StartMigrationScenarioServerRoleResultResponse struct {
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Name of server role.
	Name string `pulumi:"name"`
	// Current state of migration
	State string `pulumi:"state"`
}

// Server role migration result
type StartMigrationScenarioServerRoleResultResponseOutput struct{ *pulumi.OutputState }

func (StartMigrationScenarioServerRoleResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StartMigrationScenarioServerRoleResultResponse)(nil)).Elem()
}

func (o StartMigrationScenarioServerRoleResultResponseOutput) ToStartMigrationScenarioServerRoleResultResponseOutput() StartMigrationScenarioServerRoleResultResponseOutput {
	return o
}

func (o StartMigrationScenarioServerRoleResultResponseOutput) ToStartMigrationScenarioServerRoleResultResponseOutputWithContext(ctx context.Context) StartMigrationScenarioServerRoleResultResponseOutput {
	return o
}

// Migration exceptions and warnings.
func (o StartMigrationScenarioServerRoleResultResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v StartMigrationScenarioServerRoleResultResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Name of server role.
func (o StartMigrationScenarioServerRoleResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StartMigrationScenarioServerRoleResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Current state of migration
func (o StartMigrationScenarioServerRoleResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v StartMigrationScenarioServerRoleResultResponse) string { return v.State }).(pulumi.StringOutput)
}

type StartMigrationScenarioServerRoleResultResponseMapOutput struct{ *pulumi.OutputState }

func (StartMigrationScenarioServerRoleResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StartMigrationScenarioServerRoleResultResponse)(nil)).Elem()
}

func (o StartMigrationScenarioServerRoleResultResponseMapOutput) ToStartMigrationScenarioServerRoleResultResponseMapOutput() StartMigrationScenarioServerRoleResultResponseMapOutput {
	return o
}

func (o StartMigrationScenarioServerRoleResultResponseMapOutput) ToStartMigrationScenarioServerRoleResultResponseMapOutputWithContext(ctx context.Context) StartMigrationScenarioServerRoleResultResponseMapOutput {
	return o
}

func (o StartMigrationScenarioServerRoleResultResponseMapOutput) MapIndex(k pulumi.StringInput) StartMigrationScenarioServerRoleResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StartMigrationScenarioServerRoleResultResponse {
		return vs[0].(map[string]StartMigrationScenarioServerRoleResultResponse)[vs[1].(string)]
	}).(StartMigrationScenarioServerRoleResultResponseOutput)
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponse struct {
	// Event text.
	EventText string `pulumi:"eventText"`
	// Event type.
	EventTypeString string `pulumi:"eventTypeString"`
	// String value of timestamp.
	TimestampString string `pulumi:"timestampString"`
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponseOutput struct{ *pulumi.OutputState }

func (SyncMigrationDatabaseErrorEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (o SyncMigrationDatabaseErrorEventResponseOutput) ToSyncMigrationDatabaseErrorEventResponseOutput() SyncMigrationDatabaseErrorEventResponseOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseOutput) ToSyncMigrationDatabaseErrorEventResponseOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseOutput {
	return o
}

// Event text.
func (o SyncMigrationDatabaseErrorEventResponseOutput) EventText() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.EventText }).(pulumi.StringOutput)
}

// Event type.
func (o SyncMigrationDatabaseErrorEventResponseOutput) EventTypeString() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.EventTypeString }).(pulumi.StringOutput)
}

// String value of timestamp.
func (o SyncMigrationDatabaseErrorEventResponseOutput) TimestampString() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.TimestampString }).(pulumi.StringOutput)
}

type SyncMigrationDatabaseErrorEventResponseArrayOutput struct{ *pulumi.OutputState }

func (SyncMigrationDatabaseErrorEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) ToSyncMigrationDatabaseErrorEventResponseArrayOutput() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) ToSyncMigrationDatabaseErrorEventResponseArrayOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) Index(i pulumi.IntInput) SyncMigrationDatabaseErrorEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyncMigrationDatabaseErrorEventResponse {
		return vs[0].([]SyncMigrationDatabaseErrorEventResponse)[vs[1].(int)]
	}).(SyncMigrationDatabaseErrorEventResponseOutput)
}

type SystemDataResponse struct {
	CreatedAt          *string `pulumi:"createdAt"`
	CreatedBy          *string `pulumi:"createdBy"`
	CreatedByType      *string `pulumi:"createdByType"`
	LastModifiedAt     *string `pulumi:"lastModifiedAt"`
	LastModifiedBy     *string `pulumi:"lastModifiedBy"`
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlDbSyncTaskProperties
func (val *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) Defaults() *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs and ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput` via:
//
//	ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateSyncMigrationInputSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs
func (val *ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) Defaults() *ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput)
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput).ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs, ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtr and ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrInput` via:
//
//	        ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput
	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput
}

type validateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrType ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs

func ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtr(v *ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrInput {
	return (*validateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrType) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrType) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties {
		return &v
	}).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) Input() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) *ValidateSyncMigrationInputSqlServerTaskInput {
		return v.Input
	}).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput) Elem() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) ValidateMigrationInputSqlServerSqlDbSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ValidateMigrationInputSqlServerSqlDbSyncTaskProperties
		return ret
	}).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput) Input() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) *ValidateSyncMigrationInputSqlServerTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlDbSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateSyncMigrationInputSqlServerTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse
func (val *ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) Defaults() *ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Input() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) *ValidateSyncMigrationInputSqlServerTaskInputResponse {
		return v.Input
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Output() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []ValidateSyncMigrationInputSqlServerTaskOutputResponse {
		return v.Output
	}).(ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.SqlDb.Sync'.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskInput
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskInput) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs and ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputInput` via:
//
//	ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput).ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs, ValidateMigrationInputSqlServerSqlMISyncTaskInputPtr and ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput` via:
//
//	        ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs{...}
//
//	or:
//
//	        nil
type ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMISyncTaskInputPtrType ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs

func ValidateMigrationInputSqlServerSqlMISyncTaskInputPtr(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMISyncTaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateMigrationInputSqlServerSqlMISyncTaskInput) *ValidateMigrationInputSqlServerSqlMISyncTaskInput {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) AzureApp() AzureActiveDirectoryAppOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) AzureActiveDirectoryApp { return v.AzureApp }).(AzureActiveDirectoryAppOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) SqlConnectionInfo {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput) TargetConnectionInfo() MiSqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInput) MiSqlConnectionInfo {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) Elem() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) ValidateMigrationInputSqlServerSqlMISyncTaskInput {
		if v != nil {
			return *v
		}
		var ret ValidateMigrationInputSqlServerSqlMISyncTaskInput
		return ret
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) AzureApp() AzureActiveDirectoryAppPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *AzureActiveDirectoryApp {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppPtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput) TargetConnectionInfo() MiSqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInput) *MiSqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	return &tmp
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse {
		return v.AzureApp
	}).(AzureActiveDirectoryAppResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse
		return ret
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS (classic) instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return o
}

// Database identifier
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with a selected database object
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskProperties
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskProperties) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput` via:
//
//	ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput)
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput).ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs, ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtr and ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrInput` via:
//
//	        ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput
}

type validateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrType ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs

func ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtr(v *ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrInput {
	return (*validateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateMigrationInputSqlServerSqlMISyncTaskProperties) *ValidateMigrationInputSqlServerSqlMISyncTaskProperties {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) Input() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskProperties) *ValidateMigrationInputSqlServerSqlMISyncTaskInput {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput) Elem() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskProperties) ValidateMigrationInputSqlServerSqlMISyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ValidateMigrationInputSqlServerSqlMISyncTaskProperties
		return ret
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput) Input() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskProperties) *ValidateMigrationInputSqlServerSqlMISyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse
func (val *ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) Defaults() *ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS'.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskInput
func (val *ValidateMigrationInputSqlServerSqlMITaskInput) Defaults() *ValidateMigrationInputSqlServerSqlMITaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// ValidateMigrationInputSqlServerSqlMITaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs and ValidateMigrationInputSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputInput` via:
//
//	ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskInputArgs
func (val *ValidateMigrationInputSqlServerSqlMITaskInputArgs) Defaults() *ValidateMigrationInputSqlServerSqlMITaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateMigrationInputSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput).ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs, ValidateMigrationInputSqlServerSqlMITaskInputPtr and ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputPtrInput` via:
//
//	        ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
//
//	or:
//
//	        nil
type ValidateMigrationInputSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputPtrType ValidateMigrationInputSqlServerSqlMITaskInputArgs

func ValidateMigrationInputSqlServerSqlMITaskInputPtr(v *ValidateMigrationInputSqlServerSqlMITaskInputArgs) ValidateMigrationInputSqlServerSqlMITaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateMigrationInputSqlServerSqlMITaskInput) *ValidateMigrationInputSqlServerSqlMITaskInput {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupBlobShare() BlobShareOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) BlobShare { return v.BackupBlobShare }).(BlobShareOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) *FileShare { return v.BackupFileShare }).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) ValidateMigrationInputSqlServerSqlMITaskInput {
		if v != nil {
			return *v
		}
		var ret ValidateMigrationInputSqlServerSqlMITaskInput
		return ret
	}).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupBlobShare() BlobSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *BlobShare {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobSharePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupFileShare() FileSharePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *FileShare {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileSharePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) []MigrateSqlServerSqlMIDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskInputResponse
func (val *ValidateMigrationInputSqlServerSqlMITaskInputResponse) Defaults() *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) BlobShareResponse {
		return v.BackupBlobShare
	}).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ValidateMigrationInputSqlServerSqlMITaskInputResponse
		return ret
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponse struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors []ReportableExceptionResponse `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors []ReportableExceptionResponse `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors []ReportableExceptionResponse `pulumi:"backupStorageAccountErrors"`
	// Information about backup files when existing backup mode is used.
	DatabaseBackupInfo *DatabaseBackupInfoResponse `pulumi:"databaseBackupInfo"`
	// Errors associated with existing backup files.
	ExistingBackupErrors []ReportableExceptionResponse `pulumi:"existingBackupErrors"`
	// Result identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors []ReportableExceptionResponse `pulumi:"restoreDatabaseNameErrors"`
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

// Errors associated with the BackupFolder path
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupFolderErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupFolderErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with backup share user name and password credentials
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupShareCredentialsErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupShareCredentialsErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with the storage account provided.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupStorageAccountErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupStorageAccountErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Information about backup files when existing backup mode is used.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) DatabaseBackupInfo() DatabaseBackupInfoResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) *DatabaseBackupInfoResponse {
		return v.DatabaseBackupInfo
	}).(DatabaseBackupInfoResponsePtrOutput)
}

// Errors associated with existing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ExistingBackupErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ExistingBackupErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with the RestoreDatabaseName
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) RestoreDatabaseNameErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.RestoreDatabaseNameErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskProperties
func (val *ValidateMigrationInputSqlServerSqlMITaskProperties) Defaults() *ValidateMigrationInputSqlServerSqlMITaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesInput` via:
//
//	ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs
func (val *ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) Defaults() *ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput).ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs, ValidateMigrationInputSqlServerSqlMITaskPropertiesPtr and ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrInput` via:
//
//	        ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput
}

type validateMigrationInputSqlServerSqlMITaskPropertiesPtrType ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs

func ValidateMigrationInputSqlServerSqlMITaskPropertiesPtr(v *ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskPropertiesPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskPropertiesPtrType) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskPropertiesPtrType) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateMigrationInputSqlServerSqlMITaskProperties) *ValidateMigrationInputSqlServerSqlMITaskProperties {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) *ValidateMigrationInputSqlServerSqlMITaskInput {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskProperties) ValidateMigrationInputSqlServerSqlMITaskProperties {
		if v != nil {
			return *v
		}
		var ret ValidateMigrationInputSqlServerSqlMITaskProperties
		return ret
	}).(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskProperties) *ValidateMigrationInputSqlServerSqlMITaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse
func (val *ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) Defaults() *ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'ValidateMigrationInput.SqlServer.AzureSqlDbMI'.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	// Expected value is 'Validate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMongoDbTaskProperties
func (val *ValidateMongoDbTaskProperties) Defaults() *ValidateMongoDbTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ValidateMongoDbTaskPropertiesInput is an input type that accepts ValidateMongoDbTaskPropertiesArgs and ValidateMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMongoDbTaskPropertiesInput` via:
//
//	ValidateMongoDbTaskPropertiesArgs{...}
type ValidateMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput
	ToValidateMongoDbTaskPropertiesOutputWithContext(context.Context) ValidateMongoDbTaskPropertiesOutput
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input MongoDbMigrationSettingsPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Validate.MongoDb'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMongoDbTaskPropertiesArgs
func (val *ValidateMongoDbTaskPropertiesArgs) Defaults() *ValidateMongoDbTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskProperties)(nil)).Elem()
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput {
	return i.ToValidateMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMongoDbTaskPropertiesOutput)
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesPtrOutput() ValidateMongoDbTaskPropertiesPtrOutput {
	return i.ToValidateMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMongoDbTaskPropertiesOutput).ToValidateMongoDbTaskPropertiesPtrOutputWithContext(ctx)
}

// ValidateMongoDbTaskPropertiesPtrInput is an input type that accepts ValidateMongoDbTaskPropertiesArgs, ValidateMongoDbTaskPropertiesPtr and ValidateMongoDbTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ValidateMongoDbTaskPropertiesPtrInput` via:
//
//	        ValidateMongoDbTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ValidateMongoDbTaskPropertiesPtrInput interface {
	pulumi.Input

	ToValidateMongoDbTaskPropertiesPtrOutput() ValidateMongoDbTaskPropertiesPtrOutput
	ToValidateMongoDbTaskPropertiesPtrOutputWithContext(context.Context) ValidateMongoDbTaskPropertiesPtrOutput
}

type validateMongoDbTaskPropertiesPtrType ValidateMongoDbTaskPropertiesArgs

func ValidateMongoDbTaskPropertiesPtr(v *ValidateMongoDbTaskPropertiesArgs) ValidateMongoDbTaskPropertiesPtrInput {
	return (*validateMongoDbTaskPropertiesPtrType)(v)
}

func (*validateMongoDbTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMongoDbTaskProperties)(nil)).Elem()
}

func (i *validateMongoDbTaskPropertiesPtrType) ToValidateMongoDbTaskPropertiesPtrOutput() ValidateMongoDbTaskPropertiesPtrOutput {
	return i.ToValidateMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *validateMongoDbTaskPropertiesPtrType) ToValidateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMongoDbTaskPropertiesPtrOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateMongoDbTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskProperties)(nil)).Elem()
}

func (o ValidateMongoDbTaskPropertiesOutput) ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesOutput) ToValidateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesOutput) ToValidateMongoDbTaskPropertiesPtrOutput() ValidateMongoDbTaskPropertiesPtrOutput {
	return o.ToValidateMongoDbTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ValidateMongoDbTaskPropertiesOutput) ToValidateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateMongoDbTaskProperties) *ValidateMongoDbTaskProperties {
		return &v
	}).(ValidateMongoDbTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMongoDbTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Describes how a MongoDB data migration should be performed
func (o ValidateMongoDbTaskPropertiesOutput) Input() MongoDbMigrationSettingsPtrOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskProperties) *MongoDbMigrationSettings { return v.Input }).(MongoDbMigrationSettingsPtrOutput)
}

// Task type.
// Expected value is 'Validate.MongoDb'.
func (o ValidateMongoDbTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ValidateMongoDbTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ValidateMongoDbTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMongoDbTaskProperties)(nil)).Elem()
}

func (o ValidateMongoDbTaskPropertiesPtrOutput) ToValidateMongoDbTaskPropertiesPtrOutput() ValidateMongoDbTaskPropertiesPtrOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesPtrOutput) ToValidateMongoDbTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesPtrOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesPtrOutput) Elem() ValidateMongoDbTaskPropertiesOutput {
	return o.ApplyT(func(v *ValidateMongoDbTaskProperties) ValidateMongoDbTaskProperties {
		if v != nil {
			return *v
		}
		var ret ValidateMongoDbTaskProperties
		return ret
	}).(ValidateMongoDbTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMongoDbTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ValidateMongoDbTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Describes how a MongoDB data migration should be performed
func (o ValidateMongoDbTaskPropertiesPtrOutput) Input() MongoDbMigrationSettingsPtrOutput {
	return o.ApplyT(func(v *ValidateMongoDbTaskProperties) *MongoDbMigrationSettings {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MongoDbMigrationSettingsPtrOutput)
}

// Task type.
// Expected value is 'Validate.MongoDb'.
func (o ValidateMongoDbTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMongoDbTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettingsResponse `pulumi:"input"`
	// An array containing a single MongoDbMigrationProgress object
	Output []MongoDbMigrationProgressResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Validate.MongoDb'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateMongoDbTaskPropertiesResponse
func (val *ValidateMongoDbTaskPropertiesResponse) Defaults() *ValidateMongoDbTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMongoDbTaskPropertiesResponseOutput) ToValidateMongoDbTaskPropertiesResponseOutput() ValidateMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesResponseOutput) ToValidateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes how a MongoDB data migration should be performed
func (o ValidateMongoDbTaskPropertiesResponseOutput) Input() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) *MongoDbMigrationSettingsResponse { return v.Input }).(MongoDbMigrationSettingsResponsePtrOutput)
}

// An array containing a single MongoDbMigrationProgress object
func (o ValidateMongoDbTaskPropertiesResponseOutput) Output() MongoDbMigrationProgressResponseArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []MongoDbMigrationProgressResponse { return v.Output }).(MongoDbMigrationProgressResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Validate.MongoDb'.
func (o ValidateMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateOracleAzureDbForPostgreSqlSyncTaskProperties
func (val *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) Defaults() *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//	ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs
func (val *ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) Defaults() *ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput).ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx)
}

// ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput is an input type that accepts ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs, ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtr and ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput` via:
//
//	        ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
//
//	or:
//
//	        nil
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput interface {
	pulumi.Input

	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput
}

type validateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs

func ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtr(v *ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrInput {
	return (*validateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType)(v)
}

func (*validateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i *validateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return i.ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *validateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrType) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties {
		return &v
	}).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Elem() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return o.ApplyT(func(v *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) ValidateOracleAzureDbForPostgreSqlSyncTaskProperties {
		if v != nil {
			return *v
		}
		var ret ValidateOracleAzureDbForPostgreSqlSyncTaskProperties
		return ret
	}).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return o.ApplyT(func(v *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) *MigrateOracleAzureDbPostgreSqlSyncTaskInput {
		if v == nil {
			return nil
		}
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Task type.
// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateOracleAzureDbForPostgreSqlSyncTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// An array containing a single validation error response object
	Output []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse
func (val *ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) Defaults() *ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Input = tmp.Input.Defaults()

	return &tmp
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// An array containing a single validation error response object
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
// Expected value is 'Validate.Oracle.AzureDbPostgreSql.Sync'.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse struct {
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// Errors associated with a selected database object
func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateSyncMigrationInputSqlServerTaskInput
func (val *ValidateSyncMigrationInputSqlServerTaskInput) Defaults() *ValidateSyncMigrationInputSqlServerTaskInput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// ValidateSyncMigrationInputSqlServerTaskInputInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputArgs and ValidateSyncMigrationInputSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputInput` via:
//
//	ValidateSyncMigrationInputSqlServerTaskInputArgs{...}
type ValidateSyncMigrationInputSqlServerTaskInputInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput
	ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateSyncMigrationInputSqlServerTaskInputArgs
func (val *ValidateSyncMigrationInputSqlServerTaskInputArgs) Defaults() *ValidateSyncMigrationInputSqlServerTaskInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ValidateSyncMigrationInputSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputOutput)
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputOutput).ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ValidateSyncMigrationInputSqlServerTaskInputPtrInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputArgs, ValidateSyncMigrationInputSqlServerTaskInputPtr and ValidateSyncMigrationInputSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputPtrInput` via:
//
//	        ValidateSyncMigrationInputSqlServerTaskInputArgs{...}
//
//	or:
//
//	        nil
type ValidateSyncMigrationInputSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput
	ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput
}

type validateSyncMigrationInputSqlServerTaskInputPtrType ValidateSyncMigrationInputSqlServerTaskInputArgs

func ValidateSyncMigrationInputSqlServerTaskInputPtr(v *ValidateSyncMigrationInputSqlServerTaskInputArgs) ValidateSyncMigrationInputSqlServerTaskInputPtrInput {
	return (*validateSyncMigrationInputSqlServerTaskInputPtrType)(v)
}

func (*validateSyncMigrationInputSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (i *validateSyncMigrationInputSqlServerTaskInputPtrType) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *validateSyncMigrationInputSqlServerTaskInputPtrType) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidateSyncMigrationInputSqlServerTaskInput) *ValidateSyncMigrationInputSqlServerTaskInput {
		return &v
	}).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) SourceConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInput) SqlConnectionInfo { return v.SourceConnectionInfo }).(SqlConnectionInfoOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputOutput) TargetConnectionInfo() SqlConnectionInfoOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInput) SqlConnectionInfo { return v.TargetConnectionInfo }).(SqlConnectionInfoOutput)
}

type ValidateSyncMigrationInputSqlServerTaskInputPtrOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) Elem() ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) ValidateSyncMigrationInputSqlServerTaskInput {
		if v != nil {
			return *v
		}
		var ret ValidateSyncMigrationInputSqlServerTaskInput
		return ret
	}).(ValidateSyncMigrationInputSqlServerTaskInputOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) []MigrateSqlServerSqlDbSyncDatabaseInput {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) SourceConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputPtrOutput) TargetConnectionInfo() SqlConnectionInfoPtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInput) *SqlConnectionInfo {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoPtrOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Defaults sets the appropriate defaults for ValidateSyncMigrationInputSqlServerTaskInputResponse
func (val *ValidateSyncMigrationInputSqlServerTaskInputResponse) Defaults() *ValidateSyncMigrationInputSqlServerTaskInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.SourceConnectionInfo = *tmp.SourceConnectionInfo.Defaults()

	tmp.TargetConnectionInfo = *tmp.TargetConnectionInfo.Defaults()

	return &tmp
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutput() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) Elem() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) ValidateSyncMigrationInputSqlServerTaskInputResponse {
		if v != nil {
			return *v
		}
		var ret ValidateSyncMigrationInputSqlServerTaskInputResponse
		return ret
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return o
}

// Database identifier
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with a selected database object
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateSyncMigrationInputSqlServerTaskOutputResponse {
		return vs[0].([]ValidateSyncMigrationInputSqlServerTaskOutputResponse)[vs[1].(int)]
	}).(ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput)
}

// Description about the errors happen while performing migration validation
type ValidationErrorResponse struct {
	// Severity of the error
	Severity *string `pulumi:"severity"`
	// Error Text
	Text *string `pulumi:"text"`
}

// Description about the errors happen while performing migration validation
type ValidationErrorResponseOutput struct{ *pulumi.OutputState }

func (ValidationErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationErrorResponse)(nil)).Elem()
}

func (o ValidationErrorResponseOutput) ToValidationErrorResponseOutput() ValidationErrorResponseOutput {
	return o
}

func (o ValidationErrorResponseOutput) ToValidationErrorResponseOutputWithContext(ctx context.Context) ValidationErrorResponseOutput {
	return o
}

// Severity of the error
func (o ValidationErrorResponseOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationErrorResponse) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Error Text
func (o ValidationErrorResponseOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationErrorResponse) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ValidationErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidationErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidationErrorResponse)(nil)).Elem()
}

func (o ValidationErrorResponsePtrOutput) ToValidationErrorResponsePtrOutput() ValidationErrorResponsePtrOutput {
	return o
}

func (o ValidationErrorResponsePtrOutput) ToValidationErrorResponsePtrOutputWithContext(ctx context.Context) ValidationErrorResponsePtrOutput {
	return o
}

func (o ValidationErrorResponsePtrOutput) Elem() ValidationErrorResponseOutput {
	return o.ApplyT(func(v *ValidationErrorResponse) ValidationErrorResponse {
		if v != nil {
			return *v
		}
		var ret ValidationErrorResponse
		return ret
	}).(ValidationErrorResponseOutput)
}

// Severity of the error
func (o ValidationErrorResponsePtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// Error Text
func (o ValidationErrorResponsePtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

// Wait statistics gathered during query batch execution
type WaitStatisticsResponse struct {
	// Total no. of waits
	WaitCount *float64 `pulumi:"waitCount"`
	// Total wait time in millisecond(s)
	WaitTimeMs *float64 `pulumi:"waitTimeMs"`
	// Type of the Wait
	WaitType *string `pulumi:"waitType"`
}

// Defaults sets the appropriate defaults for WaitStatisticsResponse
func (val *WaitStatisticsResponse) Defaults() *WaitStatisticsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.WaitTimeMs == nil {
		waitTimeMs_ := 0.0
		tmp.WaitTimeMs = &waitTimeMs_
	}
	return &tmp
}

// Wait statistics gathered during query batch execution
type WaitStatisticsResponseOutput struct{ *pulumi.OutputState }

func (WaitStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitStatisticsResponse)(nil)).Elem()
}

func (o WaitStatisticsResponseOutput) ToWaitStatisticsResponseOutput() WaitStatisticsResponseOutput {
	return o
}

func (o WaitStatisticsResponseOutput) ToWaitStatisticsResponseOutputWithContext(ctx context.Context) WaitStatisticsResponseOutput {
	return o
}

// Total no. of waits
func (o WaitStatisticsResponseOutput) WaitCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WaitStatisticsResponse) *float64 { return v.WaitCount }).(pulumi.Float64PtrOutput)
}

// Total wait time in millisecond(s)
func (o WaitStatisticsResponseOutput) WaitTimeMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WaitStatisticsResponse) *float64 { return v.WaitTimeMs }).(pulumi.Float64PtrOutput)
}

// Type of the Wait
func (o WaitStatisticsResponseOutput) WaitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WaitStatisticsResponse) *string { return v.WaitType }).(pulumi.StringPtrOutput)
}

type WaitStatisticsResponseMapOutput struct{ *pulumi.OutputState }

func (WaitStatisticsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WaitStatisticsResponse)(nil)).Elem()
}

func (o WaitStatisticsResponseMapOutput) ToWaitStatisticsResponseMapOutput() WaitStatisticsResponseMapOutput {
	return o
}

func (o WaitStatisticsResponseMapOutput) ToWaitStatisticsResponseMapOutputWithContext(ctx context.Context) WaitStatisticsResponseMapOutput {
	return o
}

func (o WaitStatisticsResponseMapOutput) MapIndex(k pulumi.StringInput) WaitStatisticsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WaitStatisticsResponse {
		return vs[0].(map[string]WaitStatisticsResponse)[vs[1].(string)]
	}).(WaitStatisticsResponseOutput)
}

type DatabaseTableResponseArrayMapOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseArrayMapOutput) ToDatabaseTableResponseArrayMapOutput() DatabaseTableResponseArrayMapOutput {
	return o
}

func (o DatabaseTableResponseArrayMapOutput) ToDatabaseTableResponseArrayMapOutputWithContext(ctx context.Context) DatabaseTableResponseArrayMapOutput {
	return o
}

func (o DatabaseTableResponseArrayMapOutput) MapIndex(k pulumi.StringInput) DatabaseTableResponseArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []DatabaseTableResponse {
		return vs[0].(map[string][]DatabaseTableResponse)[vs[1].(string)]
	}).(DatabaseTableResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureActiveDirectoryAppOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppResponsePtrOutput{})
	pulumi.RegisterOutputType(BackupFileInfoResponseOutput{})
	pulumi.RegisterOutputType(BackupFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(BackupSetInfoResponseOutput{})
	pulumi.RegisterOutputType(BackupSetInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(BlobShareOutput{})
	pulumi.RegisterOutputType(BlobSharePtrOutput{})
	pulumi.RegisterOutputType(BlobShareResponseOutput{})
	pulumi.RegisterOutputType(BlobShareResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToMongoDbTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceMySqlTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceMySqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceMySqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceMySqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceMySqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceMySqlTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceMySqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceNonSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceNonSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CopyProgressDetailsResponseOutput{})
	pulumi.RegisterOutputType(CopyProgressDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DataIntegrityValidationResultResponseOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(DataItemMigrationSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseBackupInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseBackupInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMigrationPropertiesSqlDbOutput{})
	pulumi.RegisterOutputType(DatabaseMigrationPropertiesSqlDbPtrOutput{})
	pulumi.RegisterOutputType(DatabaseMigrationPropertiesSqlDbResponseOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(DatabaseSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorInfoResponseOutput{})
	pulumi.RegisterOutputType(ExecutionStatisticsResponseOutput{})
	pulumi.RegisterOutputType(ExecutionStatisticsResponsePtrOutput{})
	pulumi.RegisterOutputType(FileShareOutput{})
	pulumi.RegisterOutputType(FileSharePtrOutput{})
	pulumi.RegisterOutputType(FileShareResponseOutput{})
	pulumi.RegisterOutputType(FileShareResponsePtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesMySqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandOutputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateMongoDbTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlOfflineTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskOutputProjectLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandOutputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrationEligibilityInfoResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationDatabaseSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationDatabaseSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsPtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbClusterInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbClusterInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionProgressResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsMapOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseProgressResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsMapOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbErrorResponseOutput{})
	pulumi.RegisterOutputType(MongoDbErrorResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationProgressResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldArrayOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingPtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsPtrOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeMonitoringDataResponseOutput{})
	pulumi.RegisterOutputType(NodeMonitoringDataResponseArrayOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(OrphanedUserInfoResponseOutput{})
	pulumi.RegisterOutputType(OrphanedUserInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(QueryAnalysisValidationResultResponseOutput{})
	pulumi.RegisterOutputType(QueryExecutionResultResponseOutput{})
	pulumi.RegisterOutputType(QueryExecutionResultResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseArrayOutput{})
	pulumi.RegisterOutputType(SchemaComparisonValidationResultResponseOutput{})
	pulumi.RegisterOutputType(SchemaComparisonValidationResultTypeResponseOutput{})
	pulumi.RegisterOutputType(SchemaComparisonValidationResultTypeResponsePtrOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputArrayOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputResponseOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputResponseArrayOutput{})
	pulumi.RegisterOutputType(ServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInformationOutput{})
	pulumi.RegisterOutputType(SqlConnectionInformationPtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInformationResponseOutput{})
	pulumi.RegisterOutputType(SqlConnectionInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlDbMigrationStatusDetailsResponseOutput{})
	pulumi.RegisterOutputType(SqlDbOfflineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoPtrOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoResponseOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(StartMigrationScenarioServerRoleResultResponseOutput{})
	pulumi.RegisterOutputType(StartMigrationScenarioServerRoleResultResponseMapOutput{})
	pulumi.RegisterOutputType(SyncMigrationDatabaseErrorEventResponseOutput{})
	pulumi.RegisterOutputType(SyncMigrationDatabaseErrorEventResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMongoDbTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ValidateMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidationErrorResponseOutput{})
	pulumi.RegisterOutputType(ValidationErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(WaitStatisticsResponseOutput{})
	pulumi.RegisterOutputType(WaitStatisticsResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseArrayMapOutput{})
}
