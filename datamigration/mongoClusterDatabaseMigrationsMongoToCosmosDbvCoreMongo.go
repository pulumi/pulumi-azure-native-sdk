// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datamigration

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Database Migration Resource for Mongo to CosmosDb.
// Azure REST API version: 2023-07-15-preview.
type MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// List of Mongo Collections to be migrated.
	CollectionList MongoMigrationCollectionResponseArrayOutput `pulumi:"collectionList"`
	// Database migration end time.
	EndedOn pulumi.StringOutput `pulumi:"endedOn"`
	// Expected value is 'MongoToCosmosDbMongo'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Error details in case of migration failure.
	MigrationFailureError ErrorInfoResponseOutput `pulumi:"migrationFailureError"`
	// ID for current migration operation.
	MigrationOperationId pulumi.StringPtrOutput `pulumi:"migrationOperationId"`
	// Resource Id of the Migration Service.
	MigrationService pulumi.StringPtrOutput `pulumi:"migrationService"`
	// Migration status.
	MigrationStatus pulumi.StringOutput `pulumi:"migrationStatus"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Error message for migration provisioning failure, if any.
	ProvisioningError pulumi.StringPtrOutput `pulumi:"provisioningError"`
	// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource Id of the target resource.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Source Mongo connection details.
	SourceMongoConnection MongoConnectionInformationResponsePtrOutput `pulumi:"sourceMongoConnection"`
	// Database migration start time.
	StartedOn pulumi.StringOutput `pulumi:"startedOn"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Target Cosmos DB Mongo connection details.
	TargetMongoConnection MongoConnectionInformationResponsePtrOutput `pulumi:"targetMongoConnection"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo registers a new resource with the given unique name, arguments, and options.
func NewMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo(ctx *pulumi.Context,
	name string, args *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoArgs, opts ...pulumi.ResourceOption) (*MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TargetResourceName == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceName'")
	}
	args.Kind = pulumi.String("MongoToCosmosDbMongo")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datamigration/v20230715preview:DatabaseMigrationsMongoToCosmosDbvCoreMongo"),
		},
		{
			Type: pulumi.String("azure-native:datamigration/v20230715preview:MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo"),
		},
		{
			Type: pulumi.String("azure-native:datamigration:DatabaseMigrationsMongoToCosmosDbvCoreMongo"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo
	err := ctx.RegisterResource("azure-native:datamigration:MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo gets an existing MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoState, opts ...pulumi.ResourceOption) (*MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo, error) {
	var resource MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo
	err := ctx.ReadResource("azure-native:datamigration:MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo resources.
type mongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoState struct {
}

type MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoState struct {
}

func (MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoState)(nil)).Elem()
}

type mongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoArgs struct {
	// List of Mongo Collections to be migrated.
	CollectionList []MongoMigrationCollection `pulumi:"collectionList"`
	// Expected value is 'MongoToCosmosDbMongo'.
	Kind string `pulumi:"kind"`
	// Name of the migration.
	MigrationName *string `pulumi:"migrationName"`
	// ID for current migration operation.
	MigrationOperationId *string `pulumi:"migrationOperationId"`
	// Resource Id of the Migration Service.
	MigrationService *string `pulumi:"migrationService"`
	// Error message for migration provisioning failure, if any.
	ProvisioningError *string `pulumi:"provisioningError"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource Id of the target resource.
	Scope *string `pulumi:"scope"`
	// Source Mongo connection details.
	SourceMongoConnection *MongoConnectionInformation `pulumi:"sourceMongoConnection"`
	// Target Cosmos DB Mongo connection details.
	TargetMongoConnection *MongoConnectionInformation `pulumi:"targetMongoConnection"`
	// The name of the target resource/account.
	TargetResourceName string `pulumi:"targetResourceName"`
}

// The set of arguments for constructing a MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo resource.
type MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoArgs struct {
	// List of Mongo Collections to be migrated.
	CollectionList MongoMigrationCollectionArrayInput
	// Expected value is 'MongoToCosmosDbMongo'.
	Kind pulumi.StringInput
	// Name of the migration.
	MigrationName pulumi.StringPtrInput
	// ID for current migration operation.
	MigrationOperationId pulumi.StringPtrInput
	// Resource Id of the Migration Service.
	MigrationService pulumi.StringPtrInput
	// Error message for migration provisioning failure, if any.
	ProvisioningError pulumi.StringPtrInput
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// Resource Id of the target resource.
	Scope pulumi.StringPtrInput
	// Source Mongo connection details.
	SourceMongoConnection MongoConnectionInformationPtrInput
	// Target Cosmos DB Mongo connection details.
	TargetMongoConnection MongoConnectionInformationPtrInput
	// The name of the target resource/account.
	TargetResourceName pulumi.StringInput
}

func (MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoArgs)(nil)).Elem()
}

type MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoInput interface {
	pulumi.Input

	ToMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput() MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput
	ToMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutputWithContext(ctx context.Context) MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput
}

func (*MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo)(nil)).Elem()
}

func (i *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) ToMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput() MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput {
	return i.ToMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutputWithContext(context.Background())
}

func (i *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) ToMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutputWithContext(ctx context.Context) MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput)
}

type MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput struct{ *pulumi.OutputState }

func (MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo)(nil)).Elem()
}

func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) ToMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput() MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput {
	return o
}

func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) ToMongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutputWithContext(ctx context.Context) MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput {
	return o
}

// The Azure API version of the resource.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput {
		return v.AzureApiVersion
	}).(pulumi.StringOutput)
}

// List of Mongo Collections to be migrated.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) CollectionList() MongoMigrationCollectionResponseArrayOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) MongoMigrationCollectionResponseArrayOutput {
		return v.CollectionList
	}).(MongoMigrationCollectionResponseArrayOutput)
}

// Database migration end time.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput { return v.EndedOn }).(pulumi.StringOutput)
}

// Expected value is 'MongoToCosmosDbMongo'.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Error details in case of migration failure.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) MigrationFailureError() ErrorInfoResponseOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) ErrorInfoResponseOutput {
		return v.MigrationFailureError
	}).(ErrorInfoResponseOutput)
}

// ID for current migration operation.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) MigrationOperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringPtrOutput {
		return v.MigrationOperationId
	}).(pulumi.StringPtrOutput)
}

// Resource Id of the Migration Service.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) MigrationService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringPtrOutput {
		return v.MigrationService
	}).(pulumi.StringPtrOutput)
}

// Migration status.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) MigrationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput {
		return v.MigrationStatus
	}).(pulumi.StringOutput)
}

// The name of the resource
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Error message for migration provisioning failure, if any.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) ProvisioningError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringPtrOutput {
		return v.ProvisioningError
	}).(pulumi.StringPtrOutput)
}

// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput {
		return v.ProvisioningState
	}).(pulumi.StringOutput)
}

// Resource Id of the target resource.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringPtrOutput {
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// Source Mongo connection details.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) SourceMongoConnection() MongoConnectionInformationResponsePtrOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) MongoConnectionInformationResponsePtrOutput {
		return v.SourceMongoConnection
	}).(MongoConnectionInformationResponsePtrOutput)
}

// Database migration start time.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) SystemDataResponseOutput {
		return v.SystemData
	}).(SystemDataResponseOutput)
}

// Target Cosmos DB Mongo connection details.
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) TargetMongoConnection() MongoConnectionInformationResponsePtrOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) MongoConnectionInformationResponsePtrOutput {
		return v.TargetMongoConnection
	}).(MongoConnectionInformationResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongo) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MongoClusterDatabaseMigrationsMongoToCosmosDbvCoreMongoOutput{})
}
