// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datamigration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve the Database Migration Service
// Azure REST API version: 2023-07-15-preview.
func LookupMigrationService(ctx *pulumi.Context, args *LookupMigrationServiceArgs, opts ...pulumi.InvokeOption) (*LookupMigrationServiceResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupMigrationServiceResult
	err := ctx.Invoke("azure-native:datamigration:getMigrationService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMigrationServiceArgs struct {
	// Name of the Migration Service.
	MigrationServiceName string `pulumi:"migrationServiceName"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A Migration Service.
type LookupMigrationServiceResult struct {
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Current state of the Integration runtime.
	IntegrationRuntimeState string `pulumi:"integrationRuntimeState"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Provisioning state to track the async operation status.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupMigrationServiceOutput(ctx *pulumi.Context, args LookupMigrationServiceOutputArgs, opts ...pulumi.InvokeOption) LookupMigrationServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMigrationServiceResult, error) {
			args := v.(LookupMigrationServiceArgs)
			r, err := LookupMigrationService(ctx, &args, opts...)
			var s LookupMigrationServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMigrationServiceResultOutput)
}

type LookupMigrationServiceOutputArgs struct {
	// Name of the Migration Service.
	MigrationServiceName pulumi.StringInput `pulumi:"migrationServiceName"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupMigrationServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMigrationServiceArgs)(nil)).Elem()
}

// A Migration Service.
type LookupMigrationServiceResultOutput struct{ *pulumi.OutputState }

func (LookupMigrationServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMigrationServiceResult)(nil)).Elem()
}

func (o LookupMigrationServiceResultOutput) ToLookupMigrationServiceResultOutput() LookupMigrationServiceResultOutput {
	return o
}

func (o LookupMigrationServiceResultOutput) ToLookupMigrationServiceResultOutputWithContext(ctx context.Context) LookupMigrationServiceResultOutput {
	return o
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupMigrationServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Current state of the Integration runtime.
func (o LookupMigrationServiceResultOutput) IntegrationRuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) string { return v.IntegrationRuntimeState }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupMigrationServiceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupMigrationServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state to track the async operation status.
func (o LookupMigrationServiceResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupMigrationServiceResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupMigrationServiceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupMigrationServiceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationServiceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMigrationServiceResultOutput{})
}
