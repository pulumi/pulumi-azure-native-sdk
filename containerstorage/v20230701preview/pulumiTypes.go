// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Assignment Properties
type Assignment struct {
	// Resource id for the assigned resource
	Id string `pulumi:"id"`
}

// AssignmentInput is an input type that accepts AssignmentArgs and AssignmentOutput values.
// You can construct a concrete instance of `AssignmentInput` via:
//
//	AssignmentArgs{...}
type AssignmentInput interface {
	pulumi.Input

	ToAssignmentOutput() AssignmentOutput
	ToAssignmentOutputWithContext(context.Context) AssignmentOutput
}

// Assignment Properties
type AssignmentArgs struct {
	// Resource id for the assigned resource
	Id pulumi.StringInput `pulumi:"id"`
}

func (AssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Assignment)(nil)).Elem()
}

func (i AssignmentArgs) ToAssignmentOutput() AssignmentOutput {
	return i.ToAssignmentOutputWithContext(context.Background())
}

func (i AssignmentArgs) ToAssignmentOutputWithContext(ctx context.Context) AssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentOutput)
}

// AssignmentArrayInput is an input type that accepts AssignmentArray and AssignmentArrayOutput values.
// You can construct a concrete instance of `AssignmentArrayInput` via:
//
//	AssignmentArray{ AssignmentArgs{...} }
type AssignmentArrayInput interface {
	pulumi.Input

	ToAssignmentArrayOutput() AssignmentArrayOutput
	ToAssignmentArrayOutputWithContext(context.Context) AssignmentArrayOutput
}

type AssignmentArray []AssignmentInput

func (AssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Assignment)(nil)).Elem()
}

func (i AssignmentArray) ToAssignmentArrayOutput() AssignmentArrayOutput {
	return i.ToAssignmentArrayOutputWithContext(context.Background())
}

func (i AssignmentArray) ToAssignmentArrayOutputWithContext(ctx context.Context) AssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentArrayOutput)
}

// Assignment Properties
type AssignmentOutput struct{ *pulumi.OutputState }

func (AssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assignment)(nil)).Elem()
}

func (o AssignmentOutput) ToAssignmentOutput() AssignmentOutput {
	return o
}

func (o AssignmentOutput) ToAssignmentOutputWithContext(ctx context.Context) AssignmentOutput {
	return o
}

// Resource id for the assigned resource
func (o AssignmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Assignment) string { return v.Id }).(pulumi.StringOutput)
}

type AssignmentArrayOutput struct{ *pulumi.OutputState }

func (AssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Assignment)(nil)).Elem()
}

func (o AssignmentArrayOutput) ToAssignmentArrayOutput() AssignmentArrayOutput {
	return o
}

func (o AssignmentArrayOutput) ToAssignmentArrayOutputWithContext(ctx context.Context) AssignmentArrayOutput {
	return o
}

func (o AssignmentArrayOutput) Index(i pulumi.IntInput) AssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Assignment {
		return vs[0].([]Assignment)[vs[1].(int)]
	}).(AssignmentOutput)
}

// Assignment Properties
type AssignmentResponse struct {
	// Resource id for the assigned resource
	Id string `pulumi:"id"`
	// Indicates if the assignment is in a usable state
	Status AssignmentStatusResponse `pulumi:"status"`
}

// Assignment Properties
type AssignmentResponseOutput struct{ *pulumi.OutputState }

func (AssignmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentResponse)(nil)).Elem()
}

func (o AssignmentResponseOutput) ToAssignmentResponseOutput() AssignmentResponseOutput {
	return o
}

func (o AssignmentResponseOutput) ToAssignmentResponseOutputWithContext(ctx context.Context) AssignmentResponseOutput {
	return o
}

// Resource id for the assigned resource
func (o AssignmentResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates if the assignment is in a usable state
func (o AssignmentResponseOutput) Status() AssignmentStatusResponseOutput {
	return o.ApplyT(func(v AssignmentResponse) AssignmentStatusResponse { return v.Status }).(AssignmentStatusResponseOutput)
}

type AssignmentResponseArrayOutput struct{ *pulumi.OutputState }

func (AssignmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentResponse)(nil)).Elem()
}

func (o AssignmentResponseArrayOutput) ToAssignmentResponseArrayOutput() AssignmentResponseArrayOutput {
	return o
}

func (o AssignmentResponseArrayOutput) ToAssignmentResponseArrayOutputWithContext(ctx context.Context) AssignmentResponseArrayOutput {
	return o
}

func (o AssignmentResponseArrayOutput) Index(i pulumi.IntInput) AssignmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentResponse {
		return vs[0].([]AssignmentResponse)[vs[1].(int)]
	}).(AssignmentResponseOutput)
}

// Status of the assignment resource
type AssignmentStatusResponse struct {
	// Reason for the status
	Message *string `pulumi:"message"`
	// State of the assignment resource
	State string `pulumi:"state"`
}

// Status of the assignment resource
type AssignmentStatusResponseOutput struct{ *pulumi.OutputState }

func (AssignmentStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentStatusResponse)(nil)).Elem()
}

func (o AssignmentStatusResponseOutput) ToAssignmentStatusResponseOutput() AssignmentStatusResponseOutput {
	return o
}

func (o AssignmentStatusResponseOutput) ToAssignmentStatusResponseOutputWithContext(ctx context.Context) AssignmentStatusResponseOutput {
	return o
}

// Reason for the status
func (o AssignmentStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// State of the assignment resource
func (o AssignmentStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Azure Disk Pool Properties
type AzureDisk struct {
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []Disk `pulumi:"disks"`
	// Encryption specifies the encryption configuration for the Azure Disk pool
	Encryption *Encryption `pulumi:"encryption"`
	// Sku name
	SkuName *string `pulumi:"skuName"`
}

// AzureDiskInput is an input type that accepts AzureDiskArgs and AzureDiskOutput values.
// You can construct a concrete instance of `AzureDiskInput` via:
//
//	AzureDiskArgs{...}
type AzureDiskInput interface {
	pulumi.Input

	ToAzureDiskOutput() AzureDiskOutput
	ToAzureDiskOutputWithContext(context.Context) AzureDiskOutput
}

// Azure Disk Pool Properties
type AzureDiskArgs struct {
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks DiskArrayInput `pulumi:"disks"`
	// Encryption specifies the encryption configuration for the Azure Disk pool
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// Sku name
	SkuName pulumi.StringPtrInput `pulumi:"skuName"`
}

func (AzureDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDisk)(nil)).Elem()
}

func (i AzureDiskArgs) ToAzureDiskOutput() AzureDiskOutput {
	return i.ToAzureDiskOutputWithContext(context.Background())
}

func (i AzureDiskArgs) ToAzureDiskOutputWithContext(ctx context.Context) AzureDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskOutput)
}

func (i AzureDiskArgs) ToAzureDiskPtrOutput() AzureDiskPtrOutput {
	return i.ToAzureDiskPtrOutputWithContext(context.Background())
}

func (i AzureDiskArgs) ToAzureDiskPtrOutputWithContext(ctx context.Context) AzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskOutput).ToAzureDiskPtrOutputWithContext(ctx)
}

// AzureDiskPtrInput is an input type that accepts AzureDiskArgs, AzureDiskPtr and AzureDiskPtrOutput values.
// You can construct a concrete instance of `AzureDiskPtrInput` via:
//
//	        AzureDiskArgs{...}
//
//	or:
//
//	        nil
type AzureDiskPtrInput interface {
	pulumi.Input

	ToAzureDiskPtrOutput() AzureDiskPtrOutput
	ToAzureDiskPtrOutputWithContext(context.Context) AzureDiskPtrOutput
}

type azureDiskPtrType AzureDiskArgs

func AzureDiskPtr(v *AzureDiskArgs) AzureDiskPtrInput {
	return (*azureDiskPtrType)(v)
}

func (*azureDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDisk)(nil)).Elem()
}

func (i *azureDiskPtrType) ToAzureDiskPtrOutput() AzureDiskPtrOutput {
	return i.ToAzureDiskPtrOutputWithContext(context.Background())
}

func (i *azureDiskPtrType) ToAzureDiskPtrOutputWithContext(ctx context.Context) AzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDiskPtrOutput)
}

// Azure Disk Pool Properties
type AzureDiskOutput struct{ *pulumi.OutputState }

func (AzureDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDisk)(nil)).Elem()
}

func (o AzureDiskOutput) ToAzureDiskOutput() AzureDiskOutput {
	return o
}

func (o AzureDiskOutput) ToAzureDiskOutputWithContext(ctx context.Context) AzureDiskOutput {
	return o
}

func (o AzureDiskOutput) ToAzureDiskPtrOutput() AzureDiskPtrOutput {
	return o.ToAzureDiskPtrOutputWithContext(context.Background())
}

func (o AzureDiskOutput) ToAzureDiskPtrOutputWithContext(ctx context.Context) AzureDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDisk) *AzureDisk {
		return &v
	}).(AzureDiskPtrOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o AzureDiskOutput) Disks() DiskArrayOutput {
	return o.ApplyT(func(v AzureDisk) []Disk { return v.Disks }).(DiskArrayOutput)
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o AzureDiskOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v AzureDisk) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// Sku name
func (o AzureDiskOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDisk) *string { return v.SkuName }).(pulumi.StringPtrOutput)
}

type AzureDiskPtrOutput struct{ *pulumi.OutputState }

func (AzureDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDisk)(nil)).Elem()
}

func (o AzureDiskPtrOutput) ToAzureDiskPtrOutput() AzureDiskPtrOutput {
	return o
}

func (o AzureDiskPtrOutput) ToAzureDiskPtrOutputWithContext(ctx context.Context) AzureDiskPtrOutput {
	return o
}

func (o AzureDiskPtrOutput) Elem() AzureDiskOutput {
	return o.ApplyT(func(v *AzureDisk) AzureDisk {
		if v != nil {
			return *v
		}
		var ret AzureDisk
		return ret
	}).(AzureDiskOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o AzureDiskPtrOutput) Disks() DiskArrayOutput {
	return o.ApplyT(func(v *AzureDisk) []Disk {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(DiskArrayOutput)
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o AzureDiskPtrOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v *AzureDisk) *Encryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionPtrOutput)
}

// Sku name
func (o AzureDiskPtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Azure Disk Pool Properties
type AzureDiskResponse struct {
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []DiskResponse `pulumi:"disks"`
	// Encryption specifies the encryption configuration for the Azure Disk pool
	Encryption *EncryptionResponse `pulumi:"encryption"`
	// Managed resource group for the pool.
	ResourceGroup string `pulumi:"resourceGroup"`
	// Sku name
	SkuName *string `pulumi:"skuName"`
}

// Azure Disk Pool Properties
type AzureDiskResponseOutput struct{ *pulumi.OutputState }

func (AzureDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDiskResponse)(nil)).Elem()
}

func (o AzureDiskResponseOutput) ToAzureDiskResponseOutput() AzureDiskResponseOutput {
	return o
}

func (o AzureDiskResponseOutput) ToAzureDiskResponseOutputWithContext(ctx context.Context) AzureDiskResponseOutput {
	return o
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o AzureDiskResponseOutput) Disks() DiskResponseArrayOutput {
	return o.ApplyT(func(v AzureDiskResponse) []DiskResponse { return v.Disks }).(DiskResponseArrayOutput)
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o AzureDiskResponseOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v AzureDiskResponse) *EncryptionResponse { return v.Encryption }).(EncryptionResponsePtrOutput)
}

// Managed resource group for the pool.
func (o AzureDiskResponseOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDiskResponse) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Sku name
func (o AzureDiskResponseOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDiskResponse) *string { return v.SkuName }).(pulumi.StringPtrOutput)
}

type AzureDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDiskResponse)(nil)).Elem()
}

func (o AzureDiskResponsePtrOutput) ToAzureDiskResponsePtrOutput() AzureDiskResponsePtrOutput {
	return o
}

func (o AzureDiskResponsePtrOutput) ToAzureDiskResponsePtrOutputWithContext(ctx context.Context) AzureDiskResponsePtrOutput {
	return o
}

func (o AzureDiskResponsePtrOutput) Elem() AzureDiskResponseOutput {
	return o.ApplyT(func(v *AzureDiskResponse) AzureDiskResponse {
		if v != nil {
			return *v
		}
		var ret AzureDiskResponse
		return ret
	}).(AzureDiskResponseOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o AzureDiskResponsePtrOutput) Disks() DiskResponseArrayOutput {
	return o.ApplyT(func(v *AzureDiskResponse) []DiskResponse {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(DiskResponseArrayOutput)
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o AzureDiskResponsePtrOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v *AzureDiskResponse) *EncryptionResponse {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionResponsePtrOutput)
}

// Managed resource group for the pool.
func (o AzureDiskResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Sku name
func (o AzureDiskResponsePtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Model for disk for that pool is using
type Disk struct {
	// ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460
	Id string `pulumi:"id"`
	// Reference is the location of the disk in an external system.
	Reference string `pulumi:"reference"`
}

// DiskInput is an input type that accepts DiskArgs and DiskOutput values.
// You can construct a concrete instance of `DiskInput` via:
//
//	DiskArgs{...}
type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(context.Context) DiskOutput
}

// Model for disk for that pool is using
type DiskArgs struct {
	// ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460
	Id pulumi.StringInput `pulumi:"id"`
	// Reference is the location of the disk in an external system.
	Reference pulumi.StringInput `pulumi:"reference"`
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//	DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// Model for disk for that pool is using
type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

// ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460
func (o DiskOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.Id }).(pulumi.StringOutput)
}

// Reference is the location of the disk in an external system.
func (o DiskOutput) Reference() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.Reference }).(pulumi.StringOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

// Model for disk for that pool is using
type DiskResponse struct {
	// ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460
	Id string `pulumi:"id"`
	// Reference is the location of the disk in an external system.
	Reference string `pulumi:"reference"`
}

// Model for disk for that pool is using
type DiskResponseOutput struct{ *pulumi.OutputState }

func (DiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (o DiskResponseOutput) ToDiskResponseOutput() DiskResponseOutput {
	return o
}

func (o DiskResponseOutput) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return o
}

// ID is the disk identifier visible to the OS. It is typically the WWN or disk ID in formats such as eui.e8238fa6bf530001001b448b45263379 or 0x5002cf6cbc5dd460
func (o DiskResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Reference is the location of the disk in an external system.
func (o DiskResponseOutput) Reference() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Reference }).(pulumi.StringOutput)
}

type DiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) Index(i pulumi.IntInput) DiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskResponse {
		return vs[0].([]DiskResponse)[vs[1].(int)]
	}).(DiskResponseOutput)
}

// Elastic San Pool Properties
type ElasticSan struct {
	// Encryption specifies the encryption configuration for the Azure Disk pool
	Encryption *Encryption `pulumi:"encryption"`
	// Sku name
	SkuName *string `pulumi:"skuName"`
}

// ElasticSanInput is an input type that accepts ElasticSanArgs and ElasticSanOutput values.
// You can construct a concrete instance of `ElasticSanInput` via:
//
//	ElasticSanArgs{...}
type ElasticSanInput interface {
	pulumi.Input

	ToElasticSanOutput() ElasticSanOutput
	ToElasticSanOutputWithContext(context.Context) ElasticSanOutput
}

// Elastic San Pool Properties
type ElasticSanArgs struct {
	// Encryption specifies the encryption configuration for the Azure Disk pool
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// Sku name
	SkuName pulumi.StringPtrInput `pulumi:"skuName"`
}

func (ElasticSanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSan)(nil)).Elem()
}

func (i ElasticSanArgs) ToElasticSanOutput() ElasticSanOutput {
	return i.ToElasticSanOutputWithContext(context.Background())
}

func (i ElasticSanArgs) ToElasticSanOutputWithContext(ctx context.Context) ElasticSanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanOutput)
}

func (i ElasticSanArgs) ToElasticSanPtrOutput() ElasticSanPtrOutput {
	return i.ToElasticSanPtrOutputWithContext(context.Background())
}

func (i ElasticSanArgs) ToElasticSanPtrOutputWithContext(ctx context.Context) ElasticSanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanOutput).ToElasticSanPtrOutputWithContext(ctx)
}

// ElasticSanPtrInput is an input type that accepts ElasticSanArgs, ElasticSanPtr and ElasticSanPtrOutput values.
// You can construct a concrete instance of `ElasticSanPtrInput` via:
//
//	        ElasticSanArgs{...}
//
//	or:
//
//	        nil
type ElasticSanPtrInput interface {
	pulumi.Input

	ToElasticSanPtrOutput() ElasticSanPtrOutput
	ToElasticSanPtrOutputWithContext(context.Context) ElasticSanPtrOutput
}

type elasticSanPtrType ElasticSanArgs

func ElasticSanPtr(v *ElasticSanArgs) ElasticSanPtrInput {
	return (*elasticSanPtrType)(v)
}

func (*elasticSanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSan)(nil)).Elem()
}

func (i *elasticSanPtrType) ToElasticSanPtrOutput() ElasticSanPtrOutput {
	return i.ToElasticSanPtrOutputWithContext(context.Background())
}

func (i *elasticSanPtrType) ToElasticSanPtrOutputWithContext(ctx context.Context) ElasticSanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanPtrOutput)
}

// Elastic San Pool Properties
type ElasticSanOutput struct{ *pulumi.OutputState }

func (ElasticSanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSan)(nil)).Elem()
}

func (o ElasticSanOutput) ToElasticSanOutput() ElasticSanOutput {
	return o
}

func (o ElasticSanOutput) ToElasticSanOutputWithContext(ctx context.Context) ElasticSanOutput {
	return o
}

func (o ElasticSanOutput) ToElasticSanPtrOutput() ElasticSanPtrOutput {
	return o.ToElasticSanPtrOutputWithContext(context.Background())
}

func (o ElasticSanOutput) ToElasticSanPtrOutputWithContext(ctx context.Context) ElasticSanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticSan) *ElasticSan {
		return &v
	}).(ElasticSanPtrOutput)
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o ElasticSanOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v ElasticSan) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// Sku name
func (o ElasticSanOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticSan) *string { return v.SkuName }).(pulumi.StringPtrOutput)
}

type ElasticSanPtrOutput struct{ *pulumi.OutputState }

func (ElasticSanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSan)(nil)).Elem()
}

func (o ElasticSanPtrOutput) ToElasticSanPtrOutput() ElasticSanPtrOutput {
	return o
}

func (o ElasticSanPtrOutput) ToElasticSanPtrOutputWithContext(ctx context.Context) ElasticSanPtrOutput {
	return o
}

func (o ElasticSanPtrOutput) Elem() ElasticSanOutput {
	return o.ApplyT(func(v *ElasticSan) ElasticSan {
		if v != nil {
			return *v
		}
		var ret ElasticSan
		return ret
	}).(ElasticSanOutput)
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o ElasticSanPtrOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v *ElasticSan) *Encryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionPtrOutput)
}

// Sku name
func (o ElasticSanPtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticSan) *string {
		if v == nil {
			return nil
		}
		return v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Elastic San Pool Properties
type ElasticSanResponse struct {
	// Encryption specifies the encryption configuration for the Azure Disk pool
	Encryption *EncryptionResponse `pulumi:"encryption"`
	// Managed resource group for the pool.
	ResourceGroup string `pulumi:"resourceGroup"`
	// Sku name
	SkuName *string `pulumi:"skuName"`
}

// Elastic San Pool Properties
type ElasticSanResponseOutput struct{ *pulumi.OutputState }

func (ElasticSanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSanResponse)(nil)).Elem()
}

func (o ElasticSanResponseOutput) ToElasticSanResponseOutput() ElasticSanResponseOutput {
	return o
}

func (o ElasticSanResponseOutput) ToElasticSanResponseOutputWithContext(ctx context.Context) ElasticSanResponseOutput {
	return o
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o ElasticSanResponseOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v ElasticSanResponse) *EncryptionResponse { return v.Encryption }).(EncryptionResponsePtrOutput)
}

// Managed resource group for the pool.
func (o ElasticSanResponseOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanResponse) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Sku name
func (o ElasticSanResponseOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticSanResponse) *string { return v.SkuName }).(pulumi.StringPtrOutput)
}

type ElasticSanResponsePtrOutput struct{ *pulumi.OutputState }

func (ElasticSanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSanResponse)(nil)).Elem()
}

func (o ElasticSanResponsePtrOutput) ToElasticSanResponsePtrOutput() ElasticSanResponsePtrOutput {
	return o
}

func (o ElasticSanResponsePtrOutput) ToElasticSanResponsePtrOutputWithContext(ctx context.Context) ElasticSanResponsePtrOutput {
	return o
}

func (o ElasticSanResponsePtrOutput) Elem() ElasticSanResponseOutput {
	return o.ApplyT(func(v *ElasticSanResponse) ElasticSanResponse {
		if v != nil {
			return *v
		}
		var ret ElasticSanResponse
		return ret
	}).(ElasticSanResponseOutput)
}

// Encryption specifies the encryption configuration for the Azure Disk pool
func (o ElasticSanResponsePtrOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v *ElasticSanResponse) *EncryptionResponse {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionResponsePtrOutput)
}

// Managed resource group for the pool.
func (o ElasticSanResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticSanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Sku name
func (o ElasticSanResponsePtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticSanResponse) *string {
		if v == nil {
			return nil
		}
		return v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Properties of the ElasticSAN iSCSI target
type ElasticSanVolumePropertiesResponse struct {
	// iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server"
	TargetIqn string `pulumi:"targetIqn"`
	// iSCSI Target Portal Host Name
	TargetPortalHostname string `pulumi:"targetPortalHostname"`
	// iSCSI Target Portal Port
	TargetPortalPort int `pulumi:"targetPortalPort"`
}

// Properties of the ElasticSAN iSCSI target
type ElasticSanVolumePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ElasticSanVolumePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSanVolumePropertiesResponse)(nil)).Elem()
}

func (o ElasticSanVolumePropertiesResponseOutput) ToElasticSanVolumePropertiesResponseOutput() ElasticSanVolumePropertiesResponseOutput {
	return o
}

func (o ElasticSanVolumePropertiesResponseOutput) ToElasticSanVolumePropertiesResponseOutputWithContext(ctx context.Context) ElasticSanVolumePropertiesResponseOutput {
	return o
}

// iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server"
func (o ElasticSanVolumePropertiesResponseOutput) TargetIqn() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanVolumePropertiesResponse) string { return v.TargetIqn }).(pulumi.StringOutput)
}

// iSCSI Target Portal Host Name
func (o ElasticSanVolumePropertiesResponseOutput) TargetPortalHostname() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanVolumePropertiesResponse) string { return v.TargetPortalHostname }).(pulumi.StringOutput)
}

// iSCSI Target Portal Port
func (o ElasticSanVolumePropertiesResponseOutput) TargetPortalPort() pulumi.IntOutput {
	return o.ApplyT(func(v ElasticSanVolumePropertiesResponse) int { return v.TargetPortalPort }).(pulumi.IntOutput)
}

// Encryption key properties for the pool.
type Encryption struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The name of the key vault key.
	KeyName string `pulumi:"keyName"`
	// The URI of the key vault.
	KeyVaultUri string `pulumi:"keyVaultUri"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//	EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// Encryption key properties for the pool.
type EncryptionArgs struct {
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityPtrInput `pulumi:"identity"`
	// The name of the key vault key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The URI of the key vault.
	KeyVaultUri pulumi.StringInput `pulumi:"keyVaultUri"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

func (i EncryptionArgs) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput).ToEncryptionPtrOutputWithContext(ctx)
}

// EncryptionPtrInput is an input type that accepts EncryptionArgs, EncryptionPtr and EncryptionPtrOutput values.
// You can construct a concrete instance of `EncryptionPtrInput` via:
//
//	        EncryptionArgs{...}
//
//	or:
//
//	        nil
type EncryptionPtrInput interface {
	pulumi.Input

	ToEncryptionPtrOutput() EncryptionPtrOutput
	ToEncryptionPtrOutputWithContext(context.Context) EncryptionPtrOutput
}

type encryptionPtrType EncryptionArgs

func EncryptionPtr(v *EncryptionArgs) EncryptionPtrInput {
	return (*encryptionPtrType)(v)
}

func (*encryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (i *encryptionPtrType) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i *encryptionPtrType) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPtrOutput)
}

// Encryption key properties for the pool.
type EncryptionOutput struct{ *pulumi.OutputState }

func (EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (o EncryptionOutput) ToEncryptionOutput() EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o.ToEncryptionPtrOutputWithContext(context.Background())
}

func (o EncryptionOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Encryption) *Encryption {
		return &v
	}).(EncryptionPtrOutput)
}

// The managed service identities assigned to this resource.
func (o EncryptionOutput) Identity() ManagedServiceIdentityPtrOutput {
	return o.ApplyT(func(v Encryption) *ManagedServiceIdentity { return v.Identity }).(ManagedServiceIdentityPtrOutput)
}

// The name of the key vault key.
func (o EncryptionOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v Encryption) string { return v.KeyName }).(pulumi.StringOutput)
}

// The URI of the key vault.
func (o EncryptionOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v Encryption) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

type EncryptionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) Elem() EncryptionOutput {
	return o.ApplyT(func(v *Encryption) Encryption {
		if v != nil {
			return *v
		}
		var ret Encryption
		return ret
	}).(EncryptionOutput)
}

// The managed service identities assigned to this resource.
func (o EncryptionPtrOutput) Identity() ManagedServiceIdentityPtrOutput {
	return o.ApplyT(func(v *Encryption) *ManagedServiceIdentity {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(ManagedServiceIdentityPtrOutput)
}

// The name of the key vault key.
func (o EncryptionPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The URI of the key vault.
func (o EncryptionPtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// Encryption key properties for the pool.
type EncryptionResponse struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// The name of the key vault key.
	KeyName string `pulumi:"keyName"`
	// The URI of the key vault.
	KeyVaultUri string `pulumi:"keyVaultUri"`
}

// Encryption key properties for the pool.
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

// The managed service identities assigned to this resource.
func (o EncryptionResponseOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The name of the key vault key.
func (o EncryptionResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The URI of the key vault.
func (o EncryptionResponseOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionResponse) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

type EncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) Elem() EncryptionResponseOutput {
	return o.ApplyT(func(v *EncryptionResponse) EncryptionResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionResponse
		return ret
	}).(EncryptionResponseOutput)
}

// The managed service identities assigned to this resource.
func (o EncryptionResponsePtrOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *ManagedServiceIdentityResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(ManagedServiceIdentityResponsePtrOutput)
}

// The name of the key vault key.
func (o EncryptionResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The URI of the key vault.
func (o EncryptionResponsePtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// Ephemeral Disk Pool Properties
type EphemeralDisk struct {
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []Disk `pulumi:"disks"`
	// The number of data copies. Default 3.
	Replicas *float64 `pulumi:"replicas"`
}

// Defaults sets the appropriate defaults for EphemeralDisk
func (val *EphemeralDisk) Defaults() *EphemeralDisk {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Replicas == nil {
		replicas_ := 3.0
		tmp.Replicas = &replicas_
	}
	return &tmp
}

// EphemeralDiskInput is an input type that accepts EphemeralDiskArgs and EphemeralDiskOutput values.
// You can construct a concrete instance of `EphemeralDiskInput` via:
//
//	EphemeralDiskArgs{...}
type EphemeralDiskInput interface {
	pulumi.Input

	ToEphemeralDiskOutput() EphemeralDiskOutput
	ToEphemeralDiskOutputWithContext(context.Context) EphemeralDiskOutput
}

// Ephemeral Disk Pool Properties
type EphemeralDiskArgs struct {
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks DiskArrayInput `pulumi:"disks"`
	// The number of data copies. Default 3.
	Replicas pulumi.Float64PtrInput `pulumi:"replicas"`
}

// Defaults sets the appropriate defaults for EphemeralDiskArgs
func (val *EphemeralDiskArgs) Defaults() *EphemeralDiskArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Replicas == nil {
		tmp.Replicas = pulumi.Float64Ptr(3.0)
	}
	return &tmp
}
func (EphemeralDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralDisk)(nil)).Elem()
}

func (i EphemeralDiskArgs) ToEphemeralDiskOutput() EphemeralDiskOutput {
	return i.ToEphemeralDiskOutputWithContext(context.Background())
}

func (i EphemeralDiskArgs) ToEphemeralDiskOutputWithContext(ctx context.Context) EphemeralDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralDiskOutput)
}

func (i EphemeralDiskArgs) ToEphemeralDiskPtrOutput() EphemeralDiskPtrOutput {
	return i.ToEphemeralDiskPtrOutputWithContext(context.Background())
}

func (i EphemeralDiskArgs) ToEphemeralDiskPtrOutputWithContext(ctx context.Context) EphemeralDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralDiskOutput).ToEphemeralDiskPtrOutputWithContext(ctx)
}

// EphemeralDiskPtrInput is an input type that accepts EphemeralDiskArgs, EphemeralDiskPtr and EphemeralDiskPtrOutput values.
// You can construct a concrete instance of `EphemeralDiskPtrInput` via:
//
//	        EphemeralDiskArgs{...}
//
//	or:
//
//	        nil
type EphemeralDiskPtrInput interface {
	pulumi.Input

	ToEphemeralDiskPtrOutput() EphemeralDiskPtrOutput
	ToEphemeralDiskPtrOutputWithContext(context.Context) EphemeralDiskPtrOutput
}

type ephemeralDiskPtrType EphemeralDiskArgs

func EphemeralDiskPtr(v *EphemeralDiskArgs) EphemeralDiskPtrInput {
	return (*ephemeralDiskPtrType)(v)
}

func (*ephemeralDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralDisk)(nil)).Elem()
}

func (i *ephemeralDiskPtrType) ToEphemeralDiskPtrOutput() EphemeralDiskPtrOutput {
	return i.ToEphemeralDiskPtrOutputWithContext(context.Background())
}

func (i *ephemeralDiskPtrType) ToEphemeralDiskPtrOutputWithContext(ctx context.Context) EphemeralDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralDiskPtrOutput)
}

// Ephemeral Disk Pool Properties
type EphemeralDiskOutput struct{ *pulumi.OutputState }

func (EphemeralDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralDisk)(nil)).Elem()
}

func (o EphemeralDiskOutput) ToEphemeralDiskOutput() EphemeralDiskOutput {
	return o
}

func (o EphemeralDiskOutput) ToEphemeralDiskOutputWithContext(ctx context.Context) EphemeralDiskOutput {
	return o
}

func (o EphemeralDiskOutput) ToEphemeralDiskPtrOutput() EphemeralDiskPtrOutput {
	return o.ToEphemeralDiskPtrOutputWithContext(context.Background())
}

func (o EphemeralDiskOutput) ToEphemeralDiskPtrOutputWithContext(ctx context.Context) EphemeralDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EphemeralDisk) *EphemeralDisk {
		return &v
	}).(EphemeralDiskPtrOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralDiskOutput) Disks() DiskArrayOutput {
	return o.ApplyT(func(v EphemeralDisk) []Disk { return v.Disks }).(DiskArrayOutput)
}

// The number of data copies. Default 3.
func (o EphemeralDiskOutput) Replicas() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EphemeralDisk) *float64 { return v.Replicas }).(pulumi.Float64PtrOutput)
}

type EphemeralDiskPtrOutput struct{ *pulumi.OutputState }

func (EphemeralDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralDisk)(nil)).Elem()
}

func (o EphemeralDiskPtrOutput) ToEphemeralDiskPtrOutput() EphemeralDiskPtrOutput {
	return o
}

func (o EphemeralDiskPtrOutput) ToEphemeralDiskPtrOutputWithContext(ctx context.Context) EphemeralDiskPtrOutput {
	return o
}

func (o EphemeralDiskPtrOutput) Elem() EphemeralDiskOutput {
	return o.ApplyT(func(v *EphemeralDisk) EphemeralDisk {
		if v != nil {
			return *v
		}
		var ret EphemeralDisk
		return ret
	}).(EphemeralDiskOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralDiskPtrOutput) Disks() DiskArrayOutput {
	return o.ApplyT(func(v *EphemeralDisk) []Disk {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(DiskArrayOutput)
}

// The number of data copies. Default 3.
func (o EphemeralDiskPtrOutput) Replicas() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EphemeralDisk) *float64 {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.Float64PtrOutput)
}

// Ephemeral Disk Pool Properties
type EphemeralDiskResponse struct {
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []DiskResponse `pulumi:"disks"`
	// The number of data copies. Default 3.
	Replicas *float64 `pulumi:"replicas"`
}

// Defaults sets the appropriate defaults for EphemeralDiskResponse
func (val *EphemeralDiskResponse) Defaults() *EphemeralDiskResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Replicas == nil {
		replicas_ := 3.0
		tmp.Replicas = &replicas_
	}
	return &tmp
}

// Ephemeral Disk Pool Properties
type EphemeralDiskResponseOutput struct{ *pulumi.OutputState }

func (EphemeralDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralDiskResponse)(nil)).Elem()
}

func (o EphemeralDiskResponseOutput) ToEphemeralDiskResponseOutput() EphemeralDiskResponseOutput {
	return o
}

func (o EphemeralDiskResponseOutput) ToEphemeralDiskResponseOutputWithContext(ctx context.Context) EphemeralDiskResponseOutput {
	return o
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralDiskResponseOutput) Disks() DiskResponseArrayOutput {
	return o.ApplyT(func(v EphemeralDiskResponse) []DiskResponse { return v.Disks }).(DiskResponseArrayOutput)
}

// The number of data copies. Default 3.
func (o EphemeralDiskResponseOutput) Replicas() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EphemeralDiskResponse) *float64 { return v.Replicas }).(pulumi.Float64PtrOutput)
}

type EphemeralDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (EphemeralDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralDiskResponse)(nil)).Elem()
}

func (o EphemeralDiskResponsePtrOutput) ToEphemeralDiskResponsePtrOutput() EphemeralDiskResponsePtrOutput {
	return o
}

func (o EphemeralDiskResponsePtrOutput) ToEphemeralDiskResponsePtrOutputWithContext(ctx context.Context) EphemeralDiskResponsePtrOutput {
	return o
}

func (o EphemeralDiskResponsePtrOutput) Elem() EphemeralDiskResponseOutput {
	return o.ApplyT(func(v *EphemeralDiskResponse) EphemeralDiskResponse {
		if v != nil {
			return *v
		}
		var ret EphemeralDiskResponse
		return ret
	}).(EphemeralDiskResponseOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralDiskResponsePtrOutput) Disks() DiskResponseArrayOutput {
	return o.ApplyT(func(v *EphemeralDiskResponse) []DiskResponse {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(DiskResponseArrayOutput)
}

// The number of data copies. Default 3.
func (o EphemeralDiskResponsePtrOutput) Replicas() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EphemeralDiskResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.Float64PtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Type of the Pool: ephemeralDisk, azureDisk, or elasticsan
type PoolType struct {
	// Disk Pool Properties
	AzureDisk *AzureDisk `pulumi:"azureDisk"`
	// Elastic San Pool Properties
	ElasticSan *ElasticSan `pulumi:"elasticSan"`
	// Ephemeral Pool Properties
	EphemeralDisk *EphemeralDisk `pulumi:"ephemeralDisk"`
}

// Defaults sets the appropriate defaults for PoolType
func (val *PoolType) Defaults() *PoolType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EphemeralDisk = tmp.EphemeralDisk.Defaults()

	return &tmp
}

// PoolTypeInput is an input type that accepts PoolTypeArgs and PoolTypeOutput values.
// You can construct a concrete instance of `PoolTypeInput` via:
//
//	PoolTypeArgs{...}
type PoolTypeInput interface {
	pulumi.Input

	ToPoolTypeOutput() PoolTypeOutput
	ToPoolTypeOutputWithContext(context.Context) PoolTypeOutput
}

// Type of the Pool: ephemeralDisk, azureDisk, or elasticsan
type PoolTypeArgs struct {
	// Disk Pool Properties
	AzureDisk AzureDiskPtrInput `pulumi:"azureDisk"`
	// Elastic San Pool Properties
	ElasticSan ElasticSanPtrInput `pulumi:"elasticSan"`
	// Ephemeral Pool Properties
	EphemeralDisk EphemeralDiskPtrInput `pulumi:"ephemeralDisk"`
}

// Defaults sets the appropriate defaults for PoolTypeArgs
func (val *PoolTypeArgs) Defaults() *PoolTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (PoolTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolType)(nil)).Elem()
}

func (i PoolTypeArgs) ToPoolTypeOutput() PoolTypeOutput {
	return i.ToPoolTypeOutputWithContext(context.Background())
}

func (i PoolTypeArgs) ToPoolTypeOutputWithContext(ctx context.Context) PoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolTypeOutput)
}

// Type of the Pool: ephemeralDisk, azureDisk, or elasticsan
type PoolTypeOutput struct{ *pulumi.OutputState }

func (PoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolType)(nil)).Elem()
}

func (o PoolTypeOutput) ToPoolTypeOutput() PoolTypeOutput {
	return o
}

func (o PoolTypeOutput) ToPoolTypeOutputWithContext(ctx context.Context) PoolTypeOutput {
	return o
}

// Disk Pool Properties
func (o PoolTypeOutput) AzureDisk() AzureDiskPtrOutput {
	return o.ApplyT(func(v PoolType) *AzureDisk { return v.AzureDisk }).(AzureDiskPtrOutput)
}

// Elastic San Pool Properties
func (o PoolTypeOutput) ElasticSan() ElasticSanPtrOutput {
	return o.ApplyT(func(v PoolType) *ElasticSan { return v.ElasticSan }).(ElasticSanPtrOutput)
}

// Ephemeral Pool Properties
func (o PoolTypeOutput) EphemeralDisk() EphemeralDiskPtrOutput {
	return o.ApplyT(func(v PoolType) *EphemeralDisk { return v.EphemeralDisk }).(EphemeralDiskPtrOutput)
}

// Type of the Pool: ephemeralDisk, azureDisk, or elasticsan
type PoolTypeResponse struct {
	// Disk Pool Properties
	AzureDisk *AzureDiskResponse `pulumi:"azureDisk"`
	// Elastic San Pool Properties
	ElasticSan *ElasticSanResponse `pulumi:"elasticSan"`
	// Ephemeral Pool Properties
	EphemeralDisk *EphemeralDiskResponse `pulumi:"ephemeralDisk"`
}

// Defaults sets the appropriate defaults for PoolTypeResponse
func (val *PoolTypeResponse) Defaults() *PoolTypeResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EphemeralDisk = tmp.EphemeralDisk.Defaults()

	return &tmp
}

// Type of the Pool: ephemeralDisk, azureDisk, or elasticsan
type PoolTypeResponseOutput struct{ *pulumi.OutputState }

func (PoolTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolTypeResponse)(nil)).Elem()
}

func (o PoolTypeResponseOutput) ToPoolTypeResponseOutput() PoolTypeResponseOutput {
	return o
}

func (o PoolTypeResponseOutput) ToPoolTypeResponseOutputWithContext(ctx context.Context) PoolTypeResponseOutput {
	return o
}

// Disk Pool Properties
func (o PoolTypeResponseOutput) AzureDisk() AzureDiskResponsePtrOutput {
	return o.ApplyT(func(v PoolTypeResponse) *AzureDiskResponse { return v.AzureDisk }).(AzureDiskResponsePtrOutput)
}

// Elastic San Pool Properties
func (o PoolTypeResponseOutput) ElasticSan() ElasticSanResponsePtrOutput {
	return o.ApplyT(func(v PoolTypeResponse) *ElasticSanResponse { return v.ElasticSan }).(ElasticSanResponsePtrOutput)
}

// Ephemeral Pool Properties
func (o PoolTypeResponseOutput) EphemeralDisk() EphemeralDiskResponsePtrOutput {
	return o.ApplyT(func(v PoolTypeResponse) *EphemeralDiskResponse { return v.EphemeralDisk }).(EphemeralDiskResponsePtrOutput)
}

// Requests for capacity for the pool.
type Requests struct {
	// Requested capacity of the pool in GiB.
	Storage *float64 `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for Requests
func (val *Requests) Defaults() *Requests {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Storage == nil {
		storage_ := 1024.0
		tmp.Storage = &storage_
	}
	return &tmp
}

// RequestsInput is an input type that accepts RequestsArgs and RequestsOutput values.
// You can construct a concrete instance of `RequestsInput` via:
//
//	RequestsArgs{...}
type RequestsInput interface {
	pulumi.Input

	ToRequestsOutput() RequestsOutput
	ToRequestsOutputWithContext(context.Context) RequestsOutput
}

// Requests for capacity for the pool.
type RequestsArgs struct {
	// Requested capacity of the pool in GiB.
	Storage pulumi.Float64PtrInput `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for RequestsArgs
func (val *RequestsArgs) Defaults() *RequestsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Storage == nil {
		tmp.Storage = pulumi.Float64Ptr(1024.0)
	}
	return &tmp
}
func (RequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Requests)(nil)).Elem()
}

func (i RequestsArgs) ToRequestsOutput() RequestsOutput {
	return i.ToRequestsOutputWithContext(context.Background())
}

func (i RequestsArgs) ToRequestsOutputWithContext(ctx context.Context) RequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestsOutput)
}

func (i RequestsArgs) ToRequestsPtrOutput() RequestsPtrOutput {
	return i.ToRequestsPtrOutputWithContext(context.Background())
}

func (i RequestsArgs) ToRequestsPtrOutputWithContext(ctx context.Context) RequestsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestsOutput).ToRequestsPtrOutputWithContext(ctx)
}

// RequestsPtrInput is an input type that accepts RequestsArgs, RequestsPtr and RequestsPtrOutput values.
// You can construct a concrete instance of `RequestsPtrInput` via:
//
//	        RequestsArgs{...}
//
//	or:
//
//	        nil
type RequestsPtrInput interface {
	pulumi.Input

	ToRequestsPtrOutput() RequestsPtrOutput
	ToRequestsPtrOutputWithContext(context.Context) RequestsPtrOutput
}

type requestsPtrType RequestsArgs

func RequestsPtr(v *RequestsArgs) RequestsPtrInput {
	return (*requestsPtrType)(v)
}

func (*requestsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Requests)(nil)).Elem()
}

func (i *requestsPtrType) ToRequestsPtrOutput() RequestsPtrOutput {
	return i.ToRequestsPtrOutputWithContext(context.Background())
}

func (i *requestsPtrType) ToRequestsPtrOutputWithContext(ctx context.Context) RequestsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestsPtrOutput)
}

// Requests for capacity for the pool.
type RequestsOutput struct{ *pulumi.OutputState }

func (RequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Requests)(nil)).Elem()
}

func (o RequestsOutput) ToRequestsOutput() RequestsOutput {
	return o
}

func (o RequestsOutput) ToRequestsOutputWithContext(ctx context.Context) RequestsOutput {
	return o
}

func (o RequestsOutput) ToRequestsPtrOutput() RequestsPtrOutput {
	return o.ToRequestsPtrOutputWithContext(context.Background())
}

func (o RequestsOutput) ToRequestsPtrOutputWithContext(ctx context.Context) RequestsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Requests) *Requests {
		return &v
	}).(RequestsPtrOutput)
}

// Requested capacity of the pool in GiB.
func (o RequestsOutput) Storage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Requests) *float64 { return v.Storage }).(pulumi.Float64PtrOutput)
}

type RequestsPtrOutput struct{ *pulumi.OutputState }

func (RequestsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Requests)(nil)).Elem()
}

func (o RequestsPtrOutput) ToRequestsPtrOutput() RequestsPtrOutput {
	return o
}

func (o RequestsPtrOutput) ToRequestsPtrOutputWithContext(ctx context.Context) RequestsPtrOutput {
	return o
}

func (o RequestsPtrOutput) Elem() RequestsOutput {
	return o.ApplyT(func(v *Requests) Requests {
		if v != nil {
			return *v
		}
		var ret Requests
		return ret
	}).(RequestsOutput)
}

// Requested capacity of the pool in GiB.
func (o RequestsPtrOutput) Storage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Requests) *float64 {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(pulumi.Float64PtrOutput)
}

// Requests for capacity for the pool.
type RequestsResponse struct {
	// Requested capacity of the pool in GiB.
	Storage *float64 `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for RequestsResponse
func (val *RequestsResponse) Defaults() *RequestsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Storage == nil {
		storage_ := 1024.0
		tmp.Storage = &storage_
	}
	return &tmp
}

// Requests for capacity for the pool.
type RequestsResponseOutput struct{ *pulumi.OutputState }

func (RequestsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestsResponse)(nil)).Elem()
}

func (o RequestsResponseOutput) ToRequestsResponseOutput() RequestsResponseOutput {
	return o
}

func (o RequestsResponseOutput) ToRequestsResponseOutputWithContext(ctx context.Context) RequestsResponseOutput {
	return o
}

// Requested capacity of the pool in GiB.
func (o RequestsResponseOutput) Storage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RequestsResponse) *float64 { return v.Storage }).(pulumi.Float64PtrOutput)
}

type RequestsResponsePtrOutput struct{ *pulumi.OutputState }

func (RequestsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestsResponse)(nil)).Elem()
}

func (o RequestsResponsePtrOutput) ToRequestsResponsePtrOutput() RequestsResponsePtrOutput {
	return o
}

func (o RequestsResponsePtrOutput) ToRequestsResponsePtrOutputWithContext(ctx context.Context) RequestsResponsePtrOutput {
	return o
}

func (o RequestsResponsePtrOutput) Elem() RequestsResponseOutput {
	return o.ApplyT(func(v *RequestsResponse) RequestsResponse {
		if v != nil {
			return *v
		}
		var ret RequestsResponse
		return ret
	}).(RequestsResponseOutput)
}

// Requested capacity of the pool in GiB.
func (o RequestsResponsePtrOutput) Storage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RequestsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(pulumi.Float64PtrOutput)
}

// Status of the resource
type ResourceOperationalStatusResponse struct {
	// Reason for state.
	Message *string `pulumi:"message"`
	// state of the resource
	State string `pulumi:"state"`
}

// Status of the resource
type ResourceOperationalStatusResponseOutput struct{ *pulumi.OutputState }

func (ResourceOperationalStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceOperationalStatusResponse)(nil)).Elem()
}

func (o ResourceOperationalStatusResponseOutput) ToResourceOperationalStatusResponseOutput() ResourceOperationalStatusResponseOutput {
	return o
}

func (o ResourceOperationalStatusResponseOutput) ToResourceOperationalStatusResponseOutputWithContext(ctx context.Context) ResourceOperationalStatusResponseOutput {
	return o
}

// Reason for state.
func (o ResourceOperationalStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOperationalStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// state of the resource
func (o ResourceOperationalStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceOperationalStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Resource Requests for the pool.
type Resources struct {
	// Requests for capacity for the pool.
	Requests *Requests `pulumi:"requests"`
}

// Defaults sets the appropriate defaults for Resources
func (val *Resources) Defaults() *Resources {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Requests = tmp.Requests.Defaults()

	return &tmp
}

// ResourcesInput is an input type that accepts ResourcesArgs and ResourcesOutput values.
// You can construct a concrete instance of `ResourcesInput` via:
//
//	ResourcesArgs{...}
type ResourcesInput interface {
	pulumi.Input

	ToResourcesOutput() ResourcesOutput
	ToResourcesOutputWithContext(context.Context) ResourcesOutput
}

// Resource Requests for the pool.
type ResourcesArgs struct {
	// Requests for capacity for the pool.
	Requests RequestsPtrInput `pulumi:"requests"`
}

// Defaults sets the appropriate defaults for ResourcesArgs
func (val *ResourcesArgs) Defaults() *ResourcesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Resources)(nil)).Elem()
}

func (i ResourcesArgs) ToResourcesOutput() ResourcesOutput {
	return i.ToResourcesOutputWithContext(context.Background())
}

func (i ResourcesArgs) ToResourcesOutputWithContext(ctx context.Context) ResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcesOutput)
}

func (i ResourcesArgs) ToResourcesPtrOutput() ResourcesPtrOutput {
	return i.ToResourcesPtrOutputWithContext(context.Background())
}

func (i ResourcesArgs) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcesOutput).ToResourcesPtrOutputWithContext(ctx)
}

// ResourcesPtrInput is an input type that accepts ResourcesArgs, ResourcesPtr and ResourcesPtrOutput values.
// You can construct a concrete instance of `ResourcesPtrInput` via:
//
//	        ResourcesArgs{...}
//
//	or:
//
//	        nil
type ResourcesPtrInput interface {
	pulumi.Input

	ToResourcesPtrOutput() ResourcesPtrOutput
	ToResourcesPtrOutputWithContext(context.Context) ResourcesPtrOutput
}

type resourcesPtrType ResourcesArgs

func ResourcesPtr(v *ResourcesArgs) ResourcesPtrInput {
	return (*resourcesPtrType)(v)
}

func (*resourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Resources)(nil)).Elem()
}

func (i *resourcesPtrType) ToResourcesPtrOutput() ResourcesPtrOutput {
	return i.ToResourcesPtrOutputWithContext(context.Background())
}

func (i *resourcesPtrType) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcesPtrOutput)
}

// Resource Requests for the pool.
type ResourcesOutput struct{ *pulumi.OutputState }

func (ResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resources)(nil)).Elem()
}

func (o ResourcesOutput) ToResourcesOutput() ResourcesOutput {
	return o
}

func (o ResourcesOutput) ToResourcesOutputWithContext(ctx context.Context) ResourcesOutput {
	return o
}

func (o ResourcesOutput) ToResourcesPtrOutput() ResourcesPtrOutput {
	return o.ToResourcesPtrOutputWithContext(context.Background())
}

func (o ResourcesOutput) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Resources) *Resources {
		return &v
	}).(ResourcesPtrOutput)
}

// Requests for capacity for the pool.
func (o ResourcesOutput) Requests() RequestsPtrOutput {
	return o.ApplyT(func(v Resources) *Requests { return v.Requests }).(RequestsPtrOutput)
}

type ResourcesPtrOutput struct{ *pulumi.OutputState }

func (ResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resources)(nil)).Elem()
}

func (o ResourcesPtrOutput) ToResourcesPtrOutput() ResourcesPtrOutput {
	return o
}

func (o ResourcesPtrOutput) ToResourcesPtrOutputWithContext(ctx context.Context) ResourcesPtrOutput {
	return o
}

func (o ResourcesPtrOutput) Elem() ResourcesOutput {
	return o.ApplyT(func(v *Resources) Resources {
		if v != nil {
			return *v
		}
		var ret Resources
		return ret
	}).(ResourcesOutput)
}

// Requests for capacity for the pool.
func (o ResourcesPtrOutput) Requests() RequestsPtrOutput {
	return o.ApplyT(func(v *Resources) *Requests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(RequestsPtrOutput)
}

// Resource Requests for the pool.
type ResourcesResponse struct {
	// Requests for capacity for the pool.
	Requests *RequestsResponse `pulumi:"requests"`
}

// Defaults sets the appropriate defaults for ResourcesResponse
func (val *ResourcesResponse) Defaults() *ResourcesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Requests = tmp.Requests.Defaults()

	return &tmp
}

// Resource Requests for the pool.
type ResourcesResponseOutput struct{ *pulumi.OutputState }

func (ResourcesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcesResponse)(nil)).Elem()
}

func (o ResourcesResponseOutput) ToResourcesResponseOutput() ResourcesResponseOutput {
	return o
}

func (o ResourcesResponseOutput) ToResourcesResponseOutputWithContext(ctx context.Context) ResourcesResponseOutput {
	return o
}

// Requests for capacity for the pool.
func (o ResourcesResponseOutput) Requests() RequestsResponsePtrOutput {
	return o.ApplyT(func(v ResourcesResponse) *RequestsResponse { return v.Requests }).(RequestsResponsePtrOutput)
}

type ResourcesResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcesResponse)(nil)).Elem()
}

func (o ResourcesResponsePtrOutput) ToResourcesResponsePtrOutput() ResourcesResponsePtrOutput {
	return o
}

func (o ResourcesResponsePtrOutput) ToResourcesResponsePtrOutputWithContext(ctx context.Context) ResourcesResponsePtrOutput {
	return o
}

func (o ResourcesResponsePtrOutput) Elem() ResourcesResponseOutput {
	return o.ApplyT(func(v *ResourcesResponse) ResourcesResponse {
		if v != nil {
			return *v
		}
		var ret ResourcesResponse
		return ret
	}).(ResourcesResponseOutput)
}

// Requests for capacity for the pool.
func (o ResourcesResponsePtrOutput) Requests() RequestsResponsePtrOutput {
	return o.ApplyT(func(v *ResourcesResponse) *RequestsResponse {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(RequestsResponsePtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// Properties of the volume
type VolumeTypeResponse struct {
	// Properties of the ElasticSAN iSCSI target
	ElasticSan ElasticSanVolumePropertiesResponse `pulumi:"elasticSan"`
}

// Properties of the volume
type VolumeTypeResponseOutput struct{ *pulumi.OutputState }

func (VolumeTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTypeResponse)(nil)).Elem()
}

func (o VolumeTypeResponseOutput) ToVolumeTypeResponseOutput() VolumeTypeResponseOutput {
	return o
}

func (o VolumeTypeResponseOutput) ToVolumeTypeResponseOutputWithContext(ctx context.Context) VolumeTypeResponseOutput {
	return o
}

// Properties of the ElasticSAN iSCSI target
func (o VolumeTypeResponseOutput) ElasticSan() ElasticSanVolumePropertiesResponseOutput {
	return o.ApplyT(func(v VolumeTypeResponse) ElasticSanVolumePropertiesResponse { return v.ElasticSan }).(ElasticSanVolumePropertiesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AssignmentOutput{})
	pulumi.RegisterOutputType(AssignmentArrayOutput{})
	pulumi.RegisterOutputType(AssignmentResponseOutput{})
	pulumi.RegisterOutputType(AssignmentResponseArrayOutput{})
	pulumi.RegisterOutputType(AssignmentStatusResponseOutput{})
	pulumi.RegisterOutputType(AzureDiskOutput{})
	pulumi.RegisterOutputType(AzureDiskPtrOutput{})
	pulumi.RegisterOutputType(AzureDiskResponseOutput{})
	pulumi.RegisterOutputType(AzureDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(DiskResponseOutput{})
	pulumi.RegisterOutputType(DiskResponseArrayOutput{})
	pulumi.RegisterOutputType(ElasticSanOutput{})
	pulumi.RegisterOutputType(ElasticSanPtrOutput{})
	pulumi.RegisterOutputType(ElasticSanResponseOutput{})
	pulumi.RegisterOutputType(ElasticSanResponsePtrOutput{})
	pulumi.RegisterOutputType(ElasticSanVolumePropertiesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(EphemeralDiskOutput{})
	pulumi.RegisterOutputType(EphemeralDiskPtrOutput{})
	pulumi.RegisterOutputType(EphemeralDiskResponseOutput{})
	pulumi.RegisterOutputType(EphemeralDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(PoolTypeOutput{})
	pulumi.RegisterOutputType(PoolTypeResponseOutput{})
	pulumi.RegisterOutputType(RequestsOutput{})
	pulumi.RegisterOutputType(RequestsPtrOutput{})
	pulumi.RegisterOutputType(RequestsResponseOutput{})
	pulumi.RegisterOutputType(RequestsResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceOperationalStatusResponseOutput{})
	pulumi.RegisterOutputType(ResourcesOutput{})
	pulumi.RegisterOutputType(ResourcesPtrOutput{})
	pulumi.RegisterOutputType(ResourcesResponseOutput{})
	pulumi.RegisterOutputType(ResourcesResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(VolumeTypeResponseOutput{})
}
