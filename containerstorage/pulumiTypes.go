// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerstorage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Disk Pool Properties
type DiskPoolProperties struct {
	// List of KV pairs to set in StorageClass to configure CSI driver.
	CsiParams map[string]string `pulumi:"csiParams"`
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []string `pulumi:"disks"`
	// Maximum capacity of the volumes in GiB the user intends to create. Default 512.
	MaxVolumeCapacityGiB *float64 `pulumi:"maxVolumeCapacityGiB"`
}

// Defaults sets the appropriate defaults for DiskPoolProperties
func (val *DiskPoolProperties) Defaults() *DiskPoolProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxVolumeCapacityGiB == nil {
		maxVolumeCapacityGiB_ := 512.0
		tmp.MaxVolumeCapacityGiB = &maxVolumeCapacityGiB_
	}
	return &tmp
}

// DiskPoolPropertiesInput is an input type that accepts DiskPoolPropertiesArgs and DiskPoolPropertiesOutput values.
// You can construct a concrete instance of `DiskPoolPropertiesInput` via:
//
//	DiskPoolPropertiesArgs{...}
type DiskPoolPropertiesInput interface {
	pulumi.Input

	ToDiskPoolPropertiesOutput() DiskPoolPropertiesOutput
	ToDiskPoolPropertiesOutputWithContext(context.Context) DiskPoolPropertiesOutput
}

// Disk Pool Properties
type DiskPoolPropertiesArgs struct {
	// List of KV pairs to set in StorageClass to configure CSI driver.
	CsiParams pulumi.StringMapInput `pulumi:"csiParams"`
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks pulumi.StringArrayInput `pulumi:"disks"`
	// Maximum capacity of the volumes in GiB the user intends to create. Default 512.
	MaxVolumeCapacityGiB pulumi.Float64PtrInput `pulumi:"maxVolumeCapacityGiB"`
}

// Defaults sets the appropriate defaults for DiskPoolPropertiesArgs
func (val *DiskPoolPropertiesArgs) Defaults() *DiskPoolPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxVolumeCapacityGiB == nil {
		tmp.MaxVolumeCapacityGiB = pulumi.Float64Ptr(512.0)
	}
	return &tmp
}
func (DiskPoolPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPoolProperties)(nil)).Elem()
}

func (i DiskPoolPropertiesArgs) ToDiskPoolPropertiesOutput() DiskPoolPropertiesOutput {
	return i.ToDiskPoolPropertiesOutputWithContext(context.Background())
}

func (i DiskPoolPropertiesArgs) ToDiskPoolPropertiesOutputWithContext(ctx context.Context) DiskPoolPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolPropertiesOutput)
}

func (i DiskPoolPropertiesArgs) ToDiskPoolPropertiesPtrOutput() DiskPoolPropertiesPtrOutput {
	return i.ToDiskPoolPropertiesPtrOutputWithContext(context.Background())
}

func (i DiskPoolPropertiesArgs) ToDiskPoolPropertiesPtrOutputWithContext(ctx context.Context) DiskPoolPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolPropertiesOutput).ToDiskPoolPropertiesPtrOutputWithContext(ctx)
}

// DiskPoolPropertiesPtrInput is an input type that accepts DiskPoolPropertiesArgs, DiskPoolPropertiesPtr and DiskPoolPropertiesPtrOutput values.
// You can construct a concrete instance of `DiskPoolPropertiesPtrInput` via:
//
//	        DiskPoolPropertiesArgs{...}
//
//	or:
//
//	        nil
type DiskPoolPropertiesPtrInput interface {
	pulumi.Input

	ToDiskPoolPropertiesPtrOutput() DiskPoolPropertiesPtrOutput
	ToDiskPoolPropertiesPtrOutputWithContext(context.Context) DiskPoolPropertiesPtrOutput
}

type diskPoolPropertiesPtrType DiskPoolPropertiesArgs

func DiskPoolPropertiesPtr(v *DiskPoolPropertiesArgs) DiskPoolPropertiesPtrInput {
	return (*diskPoolPropertiesPtrType)(v)
}

func (*diskPoolPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPoolProperties)(nil)).Elem()
}

func (i *diskPoolPropertiesPtrType) ToDiskPoolPropertiesPtrOutput() DiskPoolPropertiesPtrOutput {
	return i.ToDiskPoolPropertiesPtrOutputWithContext(context.Background())
}

func (i *diskPoolPropertiesPtrType) ToDiskPoolPropertiesPtrOutputWithContext(ctx context.Context) DiskPoolPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolPropertiesPtrOutput)
}

// Disk Pool Properties
type DiskPoolPropertiesOutput struct{ *pulumi.OutputState }

func (DiskPoolPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPoolProperties)(nil)).Elem()
}

func (o DiskPoolPropertiesOutput) ToDiskPoolPropertiesOutput() DiskPoolPropertiesOutput {
	return o
}

func (o DiskPoolPropertiesOutput) ToDiskPoolPropertiesOutputWithContext(ctx context.Context) DiskPoolPropertiesOutput {
	return o
}

func (o DiskPoolPropertiesOutput) ToDiskPoolPropertiesPtrOutput() DiskPoolPropertiesPtrOutput {
	return o.ToDiskPoolPropertiesPtrOutputWithContext(context.Background())
}

func (o DiskPoolPropertiesOutput) ToDiskPoolPropertiesPtrOutputWithContext(ctx context.Context) DiskPoolPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskPoolProperties) *DiskPoolProperties {
		return &v
	}).(DiskPoolPropertiesPtrOutput)
}

// List of KV pairs to set in StorageClass to configure CSI driver.
func (o DiskPoolPropertiesOutput) CsiParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v DiskPoolProperties) map[string]string { return v.CsiParams }).(pulumi.StringMapOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o DiskPoolPropertiesOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskPoolProperties) []string { return v.Disks }).(pulumi.StringArrayOutput)
}

// Maximum capacity of the volumes in GiB the user intends to create. Default 512.
func (o DiskPoolPropertiesOutput) MaxVolumeCapacityGiB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskPoolProperties) *float64 { return v.MaxVolumeCapacityGiB }).(pulumi.Float64PtrOutput)
}

type DiskPoolPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DiskPoolPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPoolProperties)(nil)).Elem()
}

func (o DiskPoolPropertiesPtrOutput) ToDiskPoolPropertiesPtrOutput() DiskPoolPropertiesPtrOutput {
	return o
}

func (o DiskPoolPropertiesPtrOutput) ToDiskPoolPropertiesPtrOutputWithContext(ctx context.Context) DiskPoolPropertiesPtrOutput {
	return o
}

func (o DiskPoolPropertiesPtrOutput) Elem() DiskPoolPropertiesOutput {
	return o.ApplyT(func(v *DiskPoolProperties) DiskPoolProperties {
		if v != nil {
			return *v
		}
		var ret DiskPoolProperties
		return ret
	}).(DiskPoolPropertiesOutput)
}

// List of KV pairs to set in StorageClass to configure CSI driver.
func (o DiskPoolPropertiesPtrOutput) CsiParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DiskPoolProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.CsiParams
	}).(pulumi.StringMapOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o DiskPoolPropertiesPtrOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiskPoolProperties) []string {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(pulumi.StringArrayOutput)
}

// Maximum capacity of the volumes in GiB the user intends to create. Default 512.
func (o DiskPoolPropertiesPtrOutput) MaxVolumeCapacityGiB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskPoolProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxVolumeCapacityGiB
	}).(pulumi.Float64PtrOutput)
}

// Disk Pool Properties
type DiskPoolPropertiesResponse struct {
	// List of KV pairs to set in StorageClass to configure CSI driver.
	CsiParams map[string]string `pulumi:"csiParams"`
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []string `pulumi:"disks"`
	// Maximum capacity of the volumes in GiB the user intends to create. Default 512.
	MaxVolumeCapacityGiB *float64 `pulumi:"maxVolumeCapacityGiB"`
}

// Defaults sets the appropriate defaults for DiskPoolPropertiesResponse
func (val *DiskPoolPropertiesResponse) Defaults() *DiskPoolPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxVolumeCapacityGiB == nil {
		maxVolumeCapacityGiB_ := 512.0
		tmp.MaxVolumeCapacityGiB = &maxVolumeCapacityGiB_
	}
	return &tmp
}

// Disk Pool Properties
type DiskPoolPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DiskPoolPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPoolPropertiesResponse)(nil)).Elem()
}

func (o DiskPoolPropertiesResponseOutput) ToDiskPoolPropertiesResponseOutput() DiskPoolPropertiesResponseOutput {
	return o
}

func (o DiskPoolPropertiesResponseOutput) ToDiskPoolPropertiesResponseOutputWithContext(ctx context.Context) DiskPoolPropertiesResponseOutput {
	return o
}

// List of KV pairs to set in StorageClass to configure CSI driver.
func (o DiskPoolPropertiesResponseOutput) CsiParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v DiskPoolPropertiesResponse) map[string]string { return v.CsiParams }).(pulumi.StringMapOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o DiskPoolPropertiesResponseOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskPoolPropertiesResponse) []string { return v.Disks }).(pulumi.StringArrayOutput)
}

// Maximum capacity of the volumes in GiB the user intends to create. Default 512.
func (o DiskPoolPropertiesResponseOutput) MaxVolumeCapacityGiB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskPoolPropertiesResponse) *float64 { return v.MaxVolumeCapacityGiB }).(pulumi.Float64PtrOutput)
}

type DiskPoolPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskPoolPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPoolPropertiesResponse)(nil)).Elem()
}

func (o DiskPoolPropertiesResponsePtrOutput) ToDiskPoolPropertiesResponsePtrOutput() DiskPoolPropertiesResponsePtrOutput {
	return o
}

func (o DiskPoolPropertiesResponsePtrOutput) ToDiskPoolPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskPoolPropertiesResponsePtrOutput {
	return o
}

func (o DiskPoolPropertiesResponsePtrOutput) Elem() DiskPoolPropertiesResponseOutput {
	return o.ApplyT(func(v *DiskPoolPropertiesResponse) DiskPoolPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DiskPoolPropertiesResponse
		return ret
	}).(DiskPoolPropertiesResponseOutput)
}

// List of KV pairs to set in StorageClass to configure CSI driver.
func (o DiskPoolPropertiesResponsePtrOutput) CsiParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DiskPoolPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.CsiParams
	}).(pulumi.StringMapOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o DiskPoolPropertiesResponsePtrOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiskPoolPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(pulumi.StringArrayOutput)
}

// Maximum capacity of the volumes in GiB the user intends to create. Default 512.
func (o DiskPoolPropertiesResponsePtrOutput) MaxVolumeCapacityGiB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskPoolPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxVolumeCapacityGiB
	}).(pulumi.Float64PtrOutput)
}

// Elastic San Pool Properties
type ElasticSanPoolProperties struct {
	// Resource group of an existing SAN.
	ResourceGroup string `pulumi:"resourceGroup"`
	// Name of an existing SAN.
	SanName string `pulumi:"sanName"`
	// Volume group of an existing SAN.
	VolumeGroup string `pulumi:"volumeGroup"`
}

// ElasticSanPoolPropertiesInput is an input type that accepts ElasticSanPoolPropertiesArgs and ElasticSanPoolPropertiesOutput values.
// You can construct a concrete instance of `ElasticSanPoolPropertiesInput` via:
//
//	ElasticSanPoolPropertiesArgs{...}
type ElasticSanPoolPropertiesInput interface {
	pulumi.Input

	ToElasticSanPoolPropertiesOutput() ElasticSanPoolPropertiesOutput
	ToElasticSanPoolPropertiesOutputWithContext(context.Context) ElasticSanPoolPropertiesOutput
}

// Elastic San Pool Properties
type ElasticSanPoolPropertiesArgs struct {
	// Resource group of an existing SAN.
	ResourceGroup pulumi.StringInput `pulumi:"resourceGroup"`
	// Name of an existing SAN.
	SanName pulumi.StringInput `pulumi:"sanName"`
	// Volume group of an existing SAN.
	VolumeGroup pulumi.StringInput `pulumi:"volumeGroup"`
}

func (ElasticSanPoolPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSanPoolProperties)(nil)).Elem()
}

func (i ElasticSanPoolPropertiesArgs) ToElasticSanPoolPropertiesOutput() ElasticSanPoolPropertiesOutput {
	return i.ToElasticSanPoolPropertiesOutputWithContext(context.Background())
}

func (i ElasticSanPoolPropertiesArgs) ToElasticSanPoolPropertiesOutputWithContext(ctx context.Context) ElasticSanPoolPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanPoolPropertiesOutput)
}

// Elastic San Pool Properties
type ElasticSanPoolPropertiesOutput struct{ *pulumi.OutputState }

func (ElasticSanPoolPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSanPoolProperties)(nil)).Elem()
}

func (o ElasticSanPoolPropertiesOutput) ToElasticSanPoolPropertiesOutput() ElasticSanPoolPropertiesOutput {
	return o
}

func (o ElasticSanPoolPropertiesOutput) ToElasticSanPoolPropertiesOutputWithContext(ctx context.Context) ElasticSanPoolPropertiesOutput {
	return o
}

// Resource group of an existing SAN.
func (o ElasticSanPoolPropertiesOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanPoolProperties) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Name of an existing SAN.
func (o ElasticSanPoolPropertiesOutput) SanName() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanPoolProperties) string { return v.SanName }).(pulumi.StringOutput)
}

// Volume group of an existing SAN.
func (o ElasticSanPoolPropertiesOutput) VolumeGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanPoolProperties) string { return v.VolumeGroup }).(pulumi.StringOutput)
}

// Elastic San Pool Properties
type ElasticSanPoolPropertiesResponse struct {
	// Resource group of an existing SAN.
	ResourceGroup string `pulumi:"resourceGroup"`
	// Name of an existing SAN.
	SanName string `pulumi:"sanName"`
	// Volume group of an existing SAN.
	VolumeGroup string `pulumi:"volumeGroup"`
}

// Elastic San Pool Properties
type ElasticSanPoolPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ElasticSanPoolPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSanPoolPropertiesResponse)(nil)).Elem()
}

func (o ElasticSanPoolPropertiesResponseOutput) ToElasticSanPoolPropertiesResponseOutput() ElasticSanPoolPropertiesResponseOutput {
	return o
}

func (o ElasticSanPoolPropertiesResponseOutput) ToElasticSanPoolPropertiesResponseOutputWithContext(ctx context.Context) ElasticSanPoolPropertiesResponseOutput {
	return o
}

// Resource group of an existing SAN.
func (o ElasticSanPoolPropertiesResponseOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanPoolPropertiesResponse) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Name of an existing SAN.
func (o ElasticSanPoolPropertiesResponseOutput) SanName() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanPoolPropertiesResponse) string { return v.SanName }).(pulumi.StringOutput)
}

// Volume group of an existing SAN.
func (o ElasticSanPoolPropertiesResponseOutput) VolumeGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanPoolPropertiesResponse) string { return v.VolumeGroup }).(pulumi.StringOutput)
}

// Ephemeral Pool Properties
type EphemeralPoolProperties struct {
	// Consent to format the local disks.
	DiskFormat *bool `pulumi:"diskFormat"`
	// Template name or KV pairs containing disk selection criteria, e.g. model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
	DiskSelector []string `pulumi:"diskSelector"`
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []string `pulumi:"disks"`
}

// Defaults sets the appropriate defaults for EphemeralPoolProperties
func (val *EphemeralPoolProperties) Defaults() *EphemeralPoolProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DiskFormat == nil {
		diskFormat_ := false
		tmp.DiskFormat = &diskFormat_
	}
	return &tmp
}

// EphemeralPoolPropertiesInput is an input type that accepts EphemeralPoolPropertiesArgs and EphemeralPoolPropertiesOutput values.
// You can construct a concrete instance of `EphemeralPoolPropertiesInput` via:
//
//	EphemeralPoolPropertiesArgs{...}
type EphemeralPoolPropertiesInput interface {
	pulumi.Input

	ToEphemeralPoolPropertiesOutput() EphemeralPoolPropertiesOutput
	ToEphemeralPoolPropertiesOutputWithContext(context.Context) EphemeralPoolPropertiesOutput
}

// Ephemeral Pool Properties
type EphemeralPoolPropertiesArgs struct {
	// Consent to format the local disks.
	DiskFormat pulumi.BoolPtrInput `pulumi:"diskFormat"`
	// Template name or KV pairs containing disk selection criteria, e.g. model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
	DiskSelector pulumi.StringArrayInput `pulumi:"diskSelector"`
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks pulumi.StringArrayInput `pulumi:"disks"`
}

// Defaults sets the appropriate defaults for EphemeralPoolPropertiesArgs
func (val *EphemeralPoolPropertiesArgs) Defaults() *EphemeralPoolPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DiskFormat == nil {
		tmp.DiskFormat = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EphemeralPoolPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralPoolProperties)(nil)).Elem()
}

func (i EphemeralPoolPropertiesArgs) ToEphemeralPoolPropertiesOutput() EphemeralPoolPropertiesOutput {
	return i.ToEphemeralPoolPropertiesOutputWithContext(context.Background())
}

func (i EphemeralPoolPropertiesArgs) ToEphemeralPoolPropertiesOutputWithContext(ctx context.Context) EphemeralPoolPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralPoolPropertiesOutput)
}

func (i EphemeralPoolPropertiesArgs) ToEphemeralPoolPropertiesPtrOutput() EphemeralPoolPropertiesPtrOutput {
	return i.ToEphemeralPoolPropertiesPtrOutputWithContext(context.Background())
}

func (i EphemeralPoolPropertiesArgs) ToEphemeralPoolPropertiesPtrOutputWithContext(ctx context.Context) EphemeralPoolPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralPoolPropertiesOutput).ToEphemeralPoolPropertiesPtrOutputWithContext(ctx)
}

// EphemeralPoolPropertiesPtrInput is an input type that accepts EphemeralPoolPropertiesArgs, EphemeralPoolPropertiesPtr and EphemeralPoolPropertiesPtrOutput values.
// You can construct a concrete instance of `EphemeralPoolPropertiesPtrInput` via:
//
//	        EphemeralPoolPropertiesArgs{...}
//
//	or:
//
//	        nil
type EphemeralPoolPropertiesPtrInput interface {
	pulumi.Input

	ToEphemeralPoolPropertiesPtrOutput() EphemeralPoolPropertiesPtrOutput
	ToEphemeralPoolPropertiesPtrOutputWithContext(context.Context) EphemeralPoolPropertiesPtrOutput
}

type ephemeralPoolPropertiesPtrType EphemeralPoolPropertiesArgs

func EphemeralPoolPropertiesPtr(v *EphemeralPoolPropertiesArgs) EphemeralPoolPropertiesPtrInput {
	return (*ephemeralPoolPropertiesPtrType)(v)
}

func (*ephemeralPoolPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralPoolProperties)(nil)).Elem()
}

func (i *ephemeralPoolPropertiesPtrType) ToEphemeralPoolPropertiesPtrOutput() EphemeralPoolPropertiesPtrOutput {
	return i.ToEphemeralPoolPropertiesPtrOutputWithContext(context.Background())
}

func (i *ephemeralPoolPropertiesPtrType) ToEphemeralPoolPropertiesPtrOutputWithContext(ctx context.Context) EphemeralPoolPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralPoolPropertiesPtrOutput)
}

// Ephemeral Pool Properties
type EphemeralPoolPropertiesOutput struct{ *pulumi.OutputState }

func (EphemeralPoolPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralPoolProperties)(nil)).Elem()
}

func (o EphemeralPoolPropertiesOutput) ToEphemeralPoolPropertiesOutput() EphemeralPoolPropertiesOutput {
	return o
}

func (o EphemeralPoolPropertiesOutput) ToEphemeralPoolPropertiesOutputWithContext(ctx context.Context) EphemeralPoolPropertiesOutput {
	return o
}

func (o EphemeralPoolPropertiesOutput) ToEphemeralPoolPropertiesPtrOutput() EphemeralPoolPropertiesPtrOutput {
	return o.ToEphemeralPoolPropertiesPtrOutputWithContext(context.Background())
}

func (o EphemeralPoolPropertiesOutput) ToEphemeralPoolPropertiesPtrOutputWithContext(ctx context.Context) EphemeralPoolPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EphemeralPoolProperties) *EphemeralPoolProperties {
		return &v
	}).(EphemeralPoolPropertiesPtrOutput)
}

// Consent to format the local disks.
func (o EphemeralPoolPropertiesOutput) DiskFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralPoolProperties) *bool { return v.DiskFormat }).(pulumi.BoolPtrOutput)
}

// Template name or KV pairs containing disk selection criteria, e.g. model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
func (o EphemeralPoolPropertiesOutput) DiskSelector() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralPoolProperties) []string { return v.DiskSelector }).(pulumi.StringArrayOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralPoolPropertiesOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralPoolProperties) []string { return v.Disks }).(pulumi.StringArrayOutput)
}

type EphemeralPoolPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EphemeralPoolPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralPoolProperties)(nil)).Elem()
}

func (o EphemeralPoolPropertiesPtrOutput) ToEphemeralPoolPropertiesPtrOutput() EphemeralPoolPropertiesPtrOutput {
	return o
}

func (o EphemeralPoolPropertiesPtrOutput) ToEphemeralPoolPropertiesPtrOutputWithContext(ctx context.Context) EphemeralPoolPropertiesPtrOutput {
	return o
}

func (o EphemeralPoolPropertiesPtrOutput) Elem() EphemeralPoolPropertiesOutput {
	return o.ApplyT(func(v *EphemeralPoolProperties) EphemeralPoolProperties {
		if v != nil {
			return *v
		}
		var ret EphemeralPoolProperties
		return ret
	}).(EphemeralPoolPropertiesOutput)
}

// Consent to format the local disks.
func (o EphemeralPoolPropertiesPtrOutput) DiskFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EphemeralPoolProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DiskFormat
	}).(pulumi.BoolPtrOutput)
}

// Template name or KV pairs containing disk selection criteria, e.g. model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
func (o EphemeralPoolPropertiesPtrOutput) DiskSelector() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EphemeralPoolProperties) []string {
		if v == nil {
			return nil
		}
		return v.DiskSelector
	}).(pulumi.StringArrayOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralPoolPropertiesPtrOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EphemeralPoolProperties) []string {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(pulumi.StringArrayOutput)
}

// Ephemeral Pool Properties
type EphemeralPoolPropertiesResponse struct {
	// Consent to format the local disks.
	DiskFormat *bool `pulumi:"diskFormat"`
	// Template name or KV pairs containing disk selection criteria, e.g. model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
	DiskSelector []string `pulumi:"diskSelector"`
	// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
	Disks []string `pulumi:"disks"`
}

// Defaults sets the appropriate defaults for EphemeralPoolPropertiesResponse
func (val *EphemeralPoolPropertiesResponse) Defaults() *EphemeralPoolPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DiskFormat == nil {
		diskFormat_ := false
		tmp.DiskFormat = &diskFormat_
	}
	return &tmp
}

// Ephemeral Pool Properties
type EphemeralPoolPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EphemeralPoolPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralPoolPropertiesResponse)(nil)).Elem()
}

func (o EphemeralPoolPropertiesResponseOutput) ToEphemeralPoolPropertiesResponseOutput() EphemeralPoolPropertiesResponseOutput {
	return o
}

func (o EphemeralPoolPropertiesResponseOutput) ToEphemeralPoolPropertiesResponseOutputWithContext(ctx context.Context) EphemeralPoolPropertiesResponseOutput {
	return o
}

// Consent to format the local disks.
func (o EphemeralPoolPropertiesResponseOutput) DiskFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EphemeralPoolPropertiesResponse) *bool { return v.DiskFormat }).(pulumi.BoolPtrOutput)
}

// Template name or KV pairs containing disk selection criteria, e.g. model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
func (o EphemeralPoolPropertiesResponseOutput) DiskSelector() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralPoolPropertiesResponse) []string { return v.DiskSelector }).(pulumi.StringArrayOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralPoolPropertiesResponseOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EphemeralPoolPropertiesResponse) []string { return v.Disks }).(pulumi.StringArrayOutput)
}

type EphemeralPoolPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EphemeralPoolPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralPoolPropertiesResponse)(nil)).Elem()
}

func (o EphemeralPoolPropertiesResponsePtrOutput) ToEphemeralPoolPropertiesResponsePtrOutput() EphemeralPoolPropertiesResponsePtrOutput {
	return o
}

func (o EphemeralPoolPropertiesResponsePtrOutput) ToEphemeralPoolPropertiesResponsePtrOutputWithContext(ctx context.Context) EphemeralPoolPropertiesResponsePtrOutput {
	return o
}

func (o EphemeralPoolPropertiesResponsePtrOutput) Elem() EphemeralPoolPropertiesResponseOutput {
	return o.ApplyT(func(v *EphemeralPoolPropertiesResponse) EphemeralPoolPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EphemeralPoolPropertiesResponse
		return ret
	}).(EphemeralPoolPropertiesResponseOutput)
}

// Consent to format the local disks.
func (o EphemeralPoolPropertiesResponsePtrOutput) DiskFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EphemeralPoolPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DiskFormat
	}).(pulumi.BoolPtrOutput)
}

// Template name or KV pairs containing disk selection criteria, e.g. model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
func (o EphemeralPoolPropertiesResponsePtrOutput) DiskSelector() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EphemeralPoolPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.DiskSelector
	}).(pulumi.StringArrayOutput)
}

// Only required if individual disk selection is desired. Path to disk, e.g. <nodename>:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
func (o EphemeralPoolPropertiesResponsePtrOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EphemeralPoolPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(pulumi.StringArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DiskPoolPropertiesOutput{})
	pulumi.RegisterOutputType(DiskPoolPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DiskPoolPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DiskPoolPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ElasticSanPoolPropertiesOutput{})
	pulumi.RegisterOutputType(ElasticSanPoolPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EphemeralPoolPropertiesOutput{})
	pulumi.RegisterOutputType(EphemeralPoolPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EphemeralPoolPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EphemeralPoolPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
