// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230301preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Concrete proxy resource types can be created by aliasing this type using a specific property type.
type VolumeSnapshot struct {
	pulumi.CustomResourceState

	// List of string mount options
	MountOptions pulumi.StringArrayOutput `pulumi:"mountOptions"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Reclaim Policy, Delete or Retain
	ReclaimPolicy pulumi.StringOutput `pulumi:"reclaimPolicy"`
	// Reference to the source volume
	Source pulumi.StringOutput `pulumi:"source"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Indicates how the volumes created from the snapshot should be attached
	VolumeMode pulumi.StringOutput `pulumi:"volumeMode"`
}

// NewVolumeSnapshot registers a new resource with the given unique name, arguments, and options.
func NewVolumeSnapshot(ctx *pulumi.Context,
	name string, args *VolumeSnapshotArgs, opts ...pulumi.ResourceOption) (*VolumeSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MountOptions == nil {
		return nil, errors.New("invalid value for required argument 'MountOptions'")
	}
	if args.PoolName == nil {
		return nil, errors.New("invalid value for required argument 'PoolName'")
	}
	if args.ReclaimPolicy == nil {
		return nil, errors.New("invalid value for required argument 'ReclaimPolicy'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.VolumeMode == nil {
		return nil, errors.New("invalid value for required argument 'VolumeMode'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerstorage:VolumeSnapshot"),
		},
	})
	opts = append(opts, aliases)
	var resource VolumeSnapshot
	err := ctx.RegisterResource("azure-native:containerstorage/v20230301preview:VolumeSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeSnapshot gets an existing VolumeSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeSnapshotState, opts ...pulumi.ResourceOption) (*VolumeSnapshot, error) {
	var resource VolumeSnapshot
	err := ctx.ReadResource("azure-native:containerstorage/v20230301preview:VolumeSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeSnapshot resources.
type volumeSnapshotState struct {
}

type VolumeSnapshotState struct {
}

func (VolumeSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeSnapshotState)(nil)).Elem()
}

type volumeSnapshotArgs struct {
	// List of string mount options
	MountOptions []string `pulumi:"mountOptions"`
	// Pool Object
	PoolName string `pulumi:"poolName"`
	// Reclaim Policy, Delete or Retain
	ReclaimPolicy string `pulumi:"reclaimPolicy"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Reference to the source volume
	Source string `pulumi:"source"`
	// Indicates how the volumes created from the snapshot should be attached
	VolumeMode string `pulumi:"volumeMode"`
	// Volume Snapshot Resource
	VolumeSnapshotName *string `pulumi:"volumeSnapshotName"`
}

// The set of arguments for constructing a VolumeSnapshot resource.
type VolumeSnapshotArgs struct {
	// List of string mount options
	MountOptions pulumi.StringArrayInput
	// Pool Object
	PoolName pulumi.StringInput
	// Reclaim Policy, Delete or Retain
	ReclaimPolicy pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Reference to the source volume
	Source pulumi.StringInput
	// Indicates how the volumes created from the snapshot should be attached
	VolumeMode pulumi.StringInput
	// Volume Snapshot Resource
	VolumeSnapshotName pulumi.StringPtrInput
}

func (VolumeSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeSnapshotArgs)(nil)).Elem()
}

type VolumeSnapshotInput interface {
	pulumi.Input

	ToVolumeSnapshotOutput() VolumeSnapshotOutput
	ToVolumeSnapshotOutputWithContext(ctx context.Context) VolumeSnapshotOutput
}

func (*VolumeSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshot)(nil)).Elem()
}

func (i *VolumeSnapshot) ToVolumeSnapshotOutput() VolumeSnapshotOutput {
	return i.ToVolumeSnapshotOutputWithContext(context.Background())
}

func (i *VolumeSnapshot) ToVolumeSnapshotOutputWithContext(ctx context.Context) VolumeSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotOutput)
}

type VolumeSnapshotOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshot)(nil)).Elem()
}

func (o VolumeSnapshotOutput) ToVolumeSnapshotOutput() VolumeSnapshotOutput {
	return o
}

func (o VolumeSnapshotOutput) ToVolumeSnapshotOutputWithContext(ctx context.Context) VolumeSnapshotOutput {
	return o
}

// List of string mount options
func (o VolumeSnapshotOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeSnapshot) pulumi.StringArrayOutput { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// The name of the resource
func (o VolumeSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o VolumeSnapshotOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSnapshot) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Reclaim Policy, Delete or Retain
func (o VolumeSnapshotOutput) ReclaimPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSnapshot) pulumi.StringOutput { return v.ReclaimPolicy }).(pulumi.StringOutput)
}

// Reference to the source volume
func (o VolumeSnapshotOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSnapshot) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o VolumeSnapshotOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *VolumeSnapshot) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VolumeSnapshotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSnapshot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Indicates how the volumes created from the snapshot should be attached
func (o VolumeSnapshotOutput) VolumeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSnapshot) pulumi.StringOutput { return v.VolumeMode }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(VolumeSnapshotOutput{})
}
