// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Certificate struct {
	// PEM formatted public key.
	Pem *string `pulumi:"pem"`
}

// CertificateInput is an input type that accepts CertificateArgs and CertificateOutput values.
// You can construct a concrete instance of `CertificateInput` via:
//
//	CertificateArgs{...}
type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(context.Context) CertificateOutput
}

type CertificateArgs struct {
	// PEM formatted public key.
	Pem pulumi.StringPtrInput `pulumi:"pem"`
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (i CertificateArgs) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i CertificateArgs) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// PEM formatted public key.
func (o CertificateOutput) Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Certificate) *string { return v.Pem }).(pulumi.StringPtrOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Certificate {
		return vs[0].([]Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateResponse struct {
	// PEM formatted public key.
	Pem *string `pulumi:"pem"`
}

type CertificateResponseOutput struct{ *pulumi.OutputState }

func (CertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateResponse)(nil)).Elem()
}

func (o CertificateResponseOutput) ToCertificateResponseOutput() CertificateResponseOutput {
	return o
}

func (o CertificateResponseOutput) ToCertificateResponseOutputWithContext(ctx context.Context) CertificateResponseOutput {
	return o
}

// PEM formatted public key.
func (o CertificateResponseOutput) Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateResponse) *string { return v.Pem }).(pulumi.StringPtrOutput)
}

type CertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (CertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateResponse)(nil)).Elem()
}

func (o CertificateResponseArrayOutput) ToCertificateResponseArrayOutput() CertificateResponseArrayOutput {
	return o
}

func (o CertificateResponseArrayOutput) ToCertificateResponseArrayOutputWithContext(ctx context.Context) CertificateResponseArrayOutput {
	return o
}

func (o CertificateResponseArrayOutput) Index(i pulumi.IntInput) CertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateResponse {
		return vs[0].([]CertificateResponse)[vs[1].(int)]
	}).(CertificateResponseOutput)
}

// Properties of a managed Cassandra cluster.
type ClusterResourceProperties struct {
	// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
	AuthenticationMethod *string `pulumi:"authenticationMethod"`
	// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
	CassandraVersion *string `pulumi:"cassandraVersion"`
	// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
	ClientCertificates []Certificate `pulumi:"clientCertificates"`
	// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
	ClusterNameOverride *string `pulumi:"clusterNameOverride"`
	// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
	DelegatedManagementSubnetId *string `pulumi:"delegatedManagementSubnetId"`
	// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
	ExternalGossipCertificates []Certificate `pulumi:"externalGossipCertificates"`
	// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
	ExternalSeedNodes []SeedNode `pulumi:"externalSeedNodes"`
	// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
	HoursBetweenBackups *int `pulumi:"hoursBetweenBackups"`
	// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
	InitialCassandraAdminPassword *string `pulumi:"initialCassandraAdminPassword"`
	// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
	PrometheusEndpoint *SeedNode `pulumi:"prometheusEndpoint"`
	// The status of the resource at the time the operation was called.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
	RepairEnabled *bool `pulumi:"repairEnabled"`
	// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.
	RestoreFromBackupId *string `pulumi:"restoreFromBackupId"`
}

// ClusterResourcePropertiesInput is an input type that accepts ClusterResourcePropertiesArgs and ClusterResourcePropertiesOutput values.
// You can construct a concrete instance of `ClusterResourcePropertiesInput` via:
//
//	ClusterResourcePropertiesArgs{...}
type ClusterResourcePropertiesInput interface {
	pulumi.Input

	ToClusterResourcePropertiesOutput() ClusterResourcePropertiesOutput
	ToClusterResourcePropertiesOutputWithContext(context.Context) ClusterResourcePropertiesOutput
}

// Properties of a managed Cassandra cluster.
type ClusterResourcePropertiesArgs struct {
	// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
	AuthenticationMethod pulumi.StringPtrInput `pulumi:"authenticationMethod"`
	// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
	CassandraVersion pulumi.StringPtrInput `pulumi:"cassandraVersion"`
	// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
	ClientCertificates CertificateArrayInput `pulumi:"clientCertificates"`
	// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
	ClusterNameOverride pulumi.StringPtrInput `pulumi:"clusterNameOverride"`
	// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
	DelegatedManagementSubnetId pulumi.StringPtrInput `pulumi:"delegatedManagementSubnetId"`
	// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
	ExternalGossipCertificates CertificateArrayInput `pulumi:"externalGossipCertificates"`
	// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
	ExternalSeedNodes SeedNodeArrayInput `pulumi:"externalSeedNodes"`
	// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
	HoursBetweenBackups pulumi.IntPtrInput `pulumi:"hoursBetweenBackups"`
	// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
	InitialCassandraAdminPassword pulumi.StringPtrInput `pulumi:"initialCassandraAdminPassword"`
	// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
	PrometheusEndpoint SeedNodePtrInput `pulumi:"prometheusEndpoint"`
	// The status of the resource at the time the operation was called.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
	// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
	RepairEnabled pulumi.BoolPtrInput `pulumi:"repairEnabled"`
	// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.
	RestoreFromBackupId pulumi.StringPtrInput `pulumi:"restoreFromBackupId"`
}

func (ClusterResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceProperties)(nil)).Elem()
}

func (i ClusterResourcePropertiesArgs) ToClusterResourcePropertiesOutput() ClusterResourcePropertiesOutput {
	return i.ToClusterResourcePropertiesOutputWithContext(context.Background())
}

func (i ClusterResourcePropertiesArgs) ToClusterResourcePropertiesOutputWithContext(ctx context.Context) ClusterResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourcePropertiesOutput)
}

func (i ClusterResourcePropertiesArgs) ToClusterResourcePropertiesPtrOutput() ClusterResourcePropertiesPtrOutput {
	return i.ToClusterResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i ClusterResourcePropertiesArgs) ToClusterResourcePropertiesPtrOutputWithContext(ctx context.Context) ClusterResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourcePropertiesOutput).ToClusterResourcePropertiesPtrOutputWithContext(ctx)
}

// ClusterResourcePropertiesPtrInput is an input type that accepts ClusterResourcePropertiesArgs, ClusterResourcePropertiesPtr and ClusterResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `ClusterResourcePropertiesPtrInput` via:
//
//	        ClusterResourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type ClusterResourcePropertiesPtrInput interface {
	pulumi.Input

	ToClusterResourcePropertiesPtrOutput() ClusterResourcePropertiesPtrOutput
	ToClusterResourcePropertiesPtrOutputWithContext(context.Context) ClusterResourcePropertiesPtrOutput
}

type clusterResourcePropertiesPtrType ClusterResourcePropertiesArgs

func ClusterResourcePropertiesPtr(v *ClusterResourcePropertiesArgs) ClusterResourcePropertiesPtrInput {
	return (*clusterResourcePropertiesPtrType)(v)
}

func (*clusterResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceProperties)(nil)).Elem()
}

func (i *clusterResourcePropertiesPtrType) ToClusterResourcePropertiesPtrOutput() ClusterResourcePropertiesPtrOutput {
	return i.ToClusterResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *clusterResourcePropertiesPtrType) ToClusterResourcePropertiesPtrOutputWithContext(ctx context.Context) ClusterResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourcePropertiesPtrOutput)
}

// Properties of a managed Cassandra cluster.
type ClusterResourcePropertiesOutput struct{ *pulumi.OutputState }

func (ClusterResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceProperties)(nil)).Elem()
}

func (o ClusterResourcePropertiesOutput) ToClusterResourcePropertiesOutput() ClusterResourcePropertiesOutput {
	return o
}

func (o ClusterResourcePropertiesOutput) ToClusterResourcePropertiesOutputWithContext(ctx context.Context) ClusterResourcePropertiesOutput {
	return o
}

func (o ClusterResourcePropertiesOutput) ToClusterResourcePropertiesPtrOutput() ClusterResourcePropertiesPtrOutput {
	return o.ToClusterResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o ClusterResourcePropertiesOutput) ToClusterResourcePropertiesPtrOutputWithContext(ctx context.Context) ClusterResourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterResourceProperties) *ClusterResourceProperties {
		return &v
	}).(ClusterResourcePropertiesPtrOutput)
}

// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
func (o ClusterResourcePropertiesOutput) AuthenticationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *string { return v.AuthenticationMethod }).(pulumi.StringPtrOutput)
}

// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
func (o ClusterResourcePropertiesOutput) CassandraVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *string { return v.CassandraVersion }).(pulumi.StringPtrOutput)
}

// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
func (o ClusterResourcePropertiesOutput) ClientCertificates() CertificateArrayOutput {
	return o.ApplyT(func(v ClusterResourceProperties) []Certificate { return v.ClientCertificates }).(CertificateArrayOutput)
}

// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
func (o ClusterResourcePropertiesOutput) ClusterNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *string { return v.ClusterNameOverride }).(pulumi.StringPtrOutput)
}

// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
func (o ClusterResourcePropertiesOutput) DelegatedManagementSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *string { return v.DelegatedManagementSubnetId }).(pulumi.StringPtrOutput)
}

// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
func (o ClusterResourcePropertiesOutput) ExternalGossipCertificates() CertificateArrayOutput {
	return o.ApplyT(func(v ClusterResourceProperties) []Certificate { return v.ExternalGossipCertificates }).(CertificateArrayOutput)
}

// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
func (o ClusterResourcePropertiesOutput) ExternalSeedNodes() SeedNodeArrayOutput {
	return o.ApplyT(func(v ClusterResourceProperties) []SeedNode { return v.ExternalSeedNodes }).(SeedNodeArrayOutput)
}

// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
func (o ClusterResourcePropertiesOutput) HoursBetweenBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *int { return v.HoursBetweenBackups }).(pulumi.IntPtrOutput)
}

// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
func (o ClusterResourcePropertiesOutput) InitialCassandraAdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *string { return v.InitialCassandraAdminPassword }).(pulumi.StringPtrOutput)
}

// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
func (o ClusterResourcePropertiesOutput) PrometheusEndpoint() SeedNodePtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *SeedNode { return v.PrometheusEndpoint }).(SeedNodePtrOutput)
}

// The status of the resource at the time the operation was called.
func (o ClusterResourcePropertiesOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
func (o ClusterResourcePropertiesOutput) RepairEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *bool { return v.RepairEnabled }).(pulumi.BoolPtrOutput)
}

// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.
func (o ClusterResourcePropertiesOutput) RestoreFromBackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceProperties) *string { return v.RestoreFromBackupId }).(pulumi.StringPtrOutput)
}

type ClusterResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ClusterResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourceProperties)(nil)).Elem()
}

func (o ClusterResourcePropertiesPtrOutput) ToClusterResourcePropertiesPtrOutput() ClusterResourcePropertiesPtrOutput {
	return o
}

func (o ClusterResourcePropertiesPtrOutput) ToClusterResourcePropertiesPtrOutputWithContext(ctx context.Context) ClusterResourcePropertiesPtrOutput {
	return o
}

func (o ClusterResourcePropertiesPtrOutput) Elem() ClusterResourcePropertiesOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) ClusterResourceProperties {
		if v != nil {
			return *v
		}
		var ret ClusterResourceProperties
		return ret
	}).(ClusterResourcePropertiesOutput)
}

// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
func (o ClusterResourcePropertiesPtrOutput) AuthenticationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMethod
	}).(pulumi.StringPtrOutput)
}

// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
func (o ClusterResourcePropertiesPtrOutput) CassandraVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.CassandraVersion
	}).(pulumi.StringPtrOutput)
}

// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
func (o ClusterResourcePropertiesPtrOutput) ClientCertificates() CertificateArrayOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) []Certificate {
		if v == nil {
			return nil
		}
		return v.ClientCertificates
	}).(CertificateArrayOutput)
}

// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
func (o ClusterResourcePropertiesPtrOutput) ClusterNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterNameOverride
	}).(pulumi.StringPtrOutput)
}

// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
func (o ClusterResourcePropertiesPtrOutput) DelegatedManagementSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DelegatedManagementSubnetId
	}).(pulumi.StringPtrOutput)
}

// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
func (o ClusterResourcePropertiesPtrOutput) ExternalGossipCertificates() CertificateArrayOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) []Certificate {
		if v == nil {
			return nil
		}
		return v.ExternalGossipCertificates
	}).(CertificateArrayOutput)
}

// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
func (o ClusterResourcePropertiesPtrOutput) ExternalSeedNodes() SeedNodeArrayOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) []SeedNode {
		if v == nil {
			return nil
		}
		return v.ExternalSeedNodes
	}).(SeedNodeArrayOutput)
}

// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
func (o ClusterResourcePropertiesPtrOutput) HoursBetweenBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *int {
		if v == nil {
			return nil
		}
		return v.HoursBetweenBackups
	}).(pulumi.IntPtrOutput)
}

// Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'.
func (o ClusterResourcePropertiesPtrOutput) InitialCassandraAdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.InitialCassandraAdminPassword
	}).(pulumi.StringPtrOutput)
}

// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
func (o ClusterResourcePropertiesPtrOutput) PrometheusEndpoint() SeedNodePtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *SeedNode {
		if v == nil {
			return nil
		}
		return v.PrometheusEndpoint
	}).(SeedNodePtrOutput)
}

// The status of the resource at the time the operation was called.
func (o ClusterResourcePropertiesPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
func (o ClusterResourcePropertiesPtrOutput) RepairEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RepairEnabled
	}).(pulumi.BoolPtrOutput)
}

// To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.
func (o ClusterResourcePropertiesPtrOutput) RestoreFromBackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.RestoreFromBackupId
	}).(pulumi.StringPtrOutput)
}

// Properties of a managed Cassandra cluster.
type ClusterResourceResponseProperties struct {
	// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
	AuthenticationMethod *string `pulumi:"authenticationMethod"`
	// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
	CassandraVersion *string `pulumi:"cassandraVersion"`
	// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
	ClientCertificates []CertificateResponse `pulumi:"clientCertificates"`
	// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
	ClusterNameOverride *string `pulumi:"clusterNameOverride"`
	// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
	DelegatedManagementSubnetId *string `pulumi:"delegatedManagementSubnetId"`
	// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
	ExternalGossipCertificates []CertificateResponse `pulumi:"externalGossipCertificates"`
	// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
	ExternalSeedNodes []SeedNodeResponse `pulumi:"externalSeedNodes"`
	// List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property.
	GossipCertificates []CertificateResponse `pulumi:"gossipCertificates"`
	// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
	HoursBetweenBackups *int `pulumi:"hoursBetweenBackups"`
	// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
	PrometheusEndpoint *SeedNodeResponse `pulumi:"prometheusEndpoint"`
	// The status of the resource at the time the operation was called.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
	RepairEnabled *bool `pulumi:"repairEnabled"`
	// List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes.
	SeedNodes []SeedNodeResponse `pulumi:"seedNodes"`
}

// Properties of a managed Cassandra cluster.
type ClusterResourceResponsePropertiesOutput struct{ *pulumi.OutputState }

func (ClusterResourceResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourceResponseProperties)(nil)).Elem()
}

func (o ClusterResourceResponsePropertiesOutput) ToClusterResourceResponsePropertiesOutput() ClusterResourceResponsePropertiesOutput {
	return o
}

func (o ClusterResourceResponsePropertiesOutput) ToClusterResourceResponsePropertiesOutputWithContext(ctx context.Context) ClusterResourceResponsePropertiesOutput {
	return o
}

// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
func (o ClusterResourceResponsePropertiesOutput) AuthenticationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *string { return v.AuthenticationMethod }).(pulumi.StringPtrOutput)
}

// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
func (o ClusterResourceResponsePropertiesOutput) CassandraVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *string { return v.CassandraVersion }).(pulumi.StringPtrOutput)
}

// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
func (o ClusterResourceResponsePropertiesOutput) ClientCertificates() CertificateResponseArrayOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) []CertificateResponse { return v.ClientCertificates }).(CertificateResponseArrayOutput)
}

// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
func (o ClusterResourceResponsePropertiesOutput) ClusterNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *string { return v.ClusterNameOverride }).(pulumi.StringPtrOutput)
}

// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'
func (o ClusterResourceResponsePropertiesOutput) DelegatedManagementSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *string { return v.DelegatedManagementSubnetId }).(pulumi.StringPtrOutput)
}

// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
func (o ClusterResourceResponsePropertiesOutput) ExternalGossipCertificates() CertificateResponseArrayOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) []CertificateResponse { return v.ExternalGossipCertificates }).(CertificateResponseArrayOutput)
}

// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
func (o ClusterResourceResponsePropertiesOutput) ExternalSeedNodes() SeedNodeResponseArrayOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) []SeedNodeResponse { return v.ExternalSeedNodes }).(SeedNodeResponseArrayOutput)
}

// List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property.
func (o ClusterResourceResponsePropertiesOutput) GossipCertificates() CertificateResponseArrayOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) []CertificateResponse { return v.GossipCertificates }).(CertificateResponseArrayOutput)
}

// Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
func (o ClusterResourceResponsePropertiesOutput) HoursBetweenBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *int { return v.HoursBetweenBackups }).(pulumi.IntPtrOutput)
}

// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
func (o ClusterResourceResponsePropertiesOutput) PrometheusEndpoint() SeedNodeResponsePtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *SeedNodeResponse { return v.PrometheusEndpoint }).(SeedNodeResponsePtrOutput)
}

// The status of the resource at the time the operation was called.
func (o ClusterResourceResponsePropertiesOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
func (o ClusterResourceResponsePropertiesOutput) RepairEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) *bool { return v.RepairEnabled }).(pulumi.BoolPtrOutput)
}

// List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes.
func (o ClusterResourceResponsePropertiesOutput) SeedNodes() SeedNodeResponseArrayOutput {
	return o.ApplyT(func(v ClusterResourceResponseProperties) []SeedNodeResponse { return v.SeedNodes }).(SeedNodeResponseArrayOutput)
}

// Identity for the resource.
type ManagedServiceIdentity struct {
	// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Identity for the resource.
type ManagedServiceIdentityArgs struct {
	// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Identity for the resource.
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
func (o ManagedServiceIdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
func (o ManagedServiceIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the resource.
type ManagedServiceIdentityResponse struct {
	// The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
	Type *string `pulumi:"type"`
	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ManagedServiceIdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]ManagedServiceIdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]ManagedServiceIdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ManagedServiceIdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type ManagedServiceIdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesOutput() ManagedServiceIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ManagedServiceIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput() ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) ManagedServiceIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ManagedServiceIdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]ManagedServiceIdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(ManagedServiceIdentityResponseUserAssignedIdentitiesOutput)
}

type SeedNode struct {
	// IP address of this seed node.
	IpAddress *string `pulumi:"ipAddress"`
}

// SeedNodeInput is an input type that accepts SeedNodeArgs and SeedNodeOutput values.
// You can construct a concrete instance of `SeedNodeInput` via:
//
//	SeedNodeArgs{...}
type SeedNodeInput interface {
	pulumi.Input

	ToSeedNodeOutput() SeedNodeOutput
	ToSeedNodeOutputWithContext(context.Context) SeedNodeOutput
}

type SeedNodeArgs struct {
	// IP address of this seed node.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
}

func (SeedNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SeedNode)(nil)).Elem()
}

func (i SeedNodeArgs) ToSeedNodeOutput() SeedNodeOutput {
	return i.ToSeedNodeOutputWithContext(context.Background())
}

func (i SeedNodeArgs) ToSeedNodeOutputWithContext(ctx context.Context) SeedNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeedNodeOutput)
}

func (i SeedNodeArgs) ToSeedNodePtrOutput() SeedNodePtrOutput {
	return i.ToSeedNodePtrOutputWithContext(context.Background())
}

func (i SeedNodeArgs) ToSeedNodePtrOutputWithContext(ctx context.Context) SeedNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeedNodeOutput).ToSeedNodePtrOutputWithContext(ctx)
}

// SeedNodePtrInput is an input type that accepts SeedNodeArgs, SeedNodePtr and SeedNodePtrOutput values.
// You can construct a concrete instance of `SeedNodePtrInput` via:
//
//	        SeedNodeArgs{...}
//
//	or:
//
//	        nil
type SeedNodePtrInput interface {
	pulumi.Input

	ToSeedNodePtrOutput() SeedNodePtrOutput
	ToSeedNodePtrOutputWithContext(context.Context) SeedNodePtrOutput
}

type seedNodePtrType SeedNodeArgs

func SeedNodePtr(v *SeedNodeArgs) SeedNodePtrInput {
	return (*seedNodePtrType)(v)
}

func (*seedNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SeedNode)(nil)).Elem()
}

func (i *seedNodePtrType) ToSeedNodePtrOutput() SeedNodePtrOutput {
	return i.ToSeedNodePtrOutputWithContext(context.Background())
}

func (i *seedNodePtrType) ToSeedNodePtrOutputWithContext(ctx context.Context) SeedNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeedNodePtrOutput)
}

// SeedNodeArrayInput is an input type that accepts SeedNodeArray and SeedNodeArrayOutput values.
// You can construct a concrete instance of `SeedNodeArrayInput` via:
//
//	SeedNodeArray{ SeedNodeArgs{...} }
type SeedNodeArrayInput interface {
	pulumi.Input

	ToSeedNodeArrayOutput() SeedNodeArrayOutput
	ToSeedNodeArrayOutputWithContext(context.Context) SeedNodeArrayOutput
}

type SeedNodeArray []SeedNodeInput

func (SeedNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SeedNode)(nil)).Elem()
}

func (i SeedNodeArray) ToSeedNodeArrayOutput() SeedNodeArrayOutput {
	return i.ToSeedNodeArrayOutputWithContext(context.Background())
}

func (i SeedNodeArray) ToSeedNodeArrayOutputWithContext(ctx context.Context) SeedNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeedNodeArrayOutput)
}

type SeedNodeOutput struct{ *pulumi.OutputState }

func (SeedNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SeedNode)(nil)).Elem()
}

func (o SeedNodeOutput) ToSeedNodeOutput() SeedNodeOutput {
	return o
}

func (o SeedNodeOutput) ToSeedNodeOutputWithContext(ctx context.Context) SeedNodeOutput {
	return o
}

func (o SeedNodeOutput) ToSeedNodePtrOutput() SeedNodePtrOutput {
	return o.ToSeedNodePtrOutputWithContext(context.Background())
}

func (o SeedNodeOutput) ToSeedNodePtrOutputWithContext(ctx context.Context) SeedNodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SeedNode) *SeedNode {
		return &v
	}).(SeedNodePtrOutput)
}

// IP address of this seed node.
func (o SeedNodeOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SeedNode) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type SeedNodePtrOutput struct{ *pulumi.OutputState }

func (SeedNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SeedNode)(nil)).Elem()
}

func (o SeedNodePtrOutput) ToSeedNodePtrOutput() SeedNodePtrOutput {
	return o
}

func (o SeedNodePtrOutput) ToSeedNodePtrOutputWithContext(ctx context.Context) SeedNodePtrOutput {
	return o
}

func (o SeedNodePtrOutput) Elem() SeedNodeOutput {
	return o.ApplyT(func(v *SeedNode) SeedNode {
		if v != nil {
			return *v
		}
		var ret SeedNode
		return ret
	}).(SeedNodeOutput)
}

// IP address of this seed node.
func (o SeedNodePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SeedNode) *string {
		if v == nil {
			return nil
		}
		return v.IpAddress
	}).(pulumi.StringPtrOutput)
}

type SeedNodeArrayOutput struct{ *pulumi.OutputState }

func (SeedNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SeedNode)(nil)).Elem()
}

func (o SeedNodeArrayOutput) ToSeedNodeArrayOutput() SeedNodeArrayOutput {
	return o
}

func (o SeedNodeArrayOutput) ToSeedNodeArrayOutputWithContext(ctx context.Context) SeedNodeArrayOutput {
	return o
}

func (o SeedNodeArrayOutput) Index(i pulumi.IntInput) SeedNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SeedNode {
		return vs[0].([]SeedNode)[vs[1].(int)]
	}).(SeedNodeOutput)
}

type SeedNodeResponse struct {
	// IP address of this seed node.
	IpAddress *string `pulumi:"ipAddress"`
}

type SeedNodeResponseOutput struct{ *pulumi.OutputState }

func (SeedNodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SeedNodeResponse)(nil)).Elem()
}

func (o SeedNodeResponseOutput) ToSeedNodeResponseOutput() SeedNodeResponseOutput {
	return o
}

func (o SeedNodeResponseOutput) ToSeedNodeResponseOutputWithContext(ctx context.Context) SeedNodeResponseOutput {
	return o
}

// IP address of this seed node.
func (o SeedNodeResponseOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SeedNodeResponse) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type SeedNodeResponsePtrOutput struct{ *pulumi.OutputState }

func (SeedNodeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SeedNodeResponse)(nil)).Elem()
}

func (o SeedNodeResponsePtrOutput) ToSeedNodeResponsePtrOutput() SeedNodeResponsePtrOutput {
	return o
}

func (o SeedNodeResponsePtrOutput) ToSeedNodeResponsePtrOutputWithContext(ctx context.Context) SeedNodeResponsePtrOutput {
	return o
}

func (o SeedNodeResponsePtrOutput) Elem() SeedNodeResponseOutput {
	return o.ApplyT(func(v *SeedNodeResponse) SeedNodeResponse {
		if v != nil {
			return *v
		}
		var ret SeedNodeResponse
		return ret
	}).(SeedNodeResponseOutput)
}

// IP address of this seed node.
func (o SeedNodeResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SeedNodeResponse) *string {
		if v == nil {
			return nil
		}
		return v.IpAddress
	}).(pulumi.StringPtrOutput)
}

type SeedNodeResponseArrayOutput struct{ *pulumi.OutputState }

func (SeedNodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SeedNodeResponse)(nil)).Elem()
}

func (o SeedNodeResponseArrayOutput) ToSeedNodeResponseArrayOutput() SeedNodeResponseArrayOutput {
	return o
}

func (o SeedNodeResponseArrayOutput) ToSeedNodeResponseArrayOutputWithContext(ctx context.Context) SeedNodeResponseArrayOutput {
	return o
}

func (o SeedNodeResponseArrayOutput) Index(i pulumi.IntInput) SeedNodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SeedNodeResponse {
		return vs[0].([]SeedNodeResponse)[vs[1].(int)]
	}).(SeedNodeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateResponseOutput{})
	pulumi.RegisterOutputType(CertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterResourcePropertiesOutput{})
	pulumi.RegisterOutputType(ClusterResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ClusterResourceResponsePropertiesOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(SeedNodeOutput{})
	pulumi.RegisterOutputType(SeedNodePtrOutput{})
	pulumi.RegisterOutputType(SeedNodeArrayOutput{})
	pulumi.RegisterOutputType(SeedNodeResponseOutput{})
	pulumi.RegisterOutputType(SeedNodeResponsePtrOutput{})
	pulumi.RegisterOutputType(SeedNodeResponseArrayOutput{})
}
