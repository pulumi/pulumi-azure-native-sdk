// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// The set of data plane operations permitted through this Role Definition.
type Privilege struct {
	// An array of actions that are allowed.
	Actions []string `pulumi:"actions"`
	// An Azure Cosmos DB Mongo DB Resource.
	Resource *PrivilegeResource `pulumi:"resource"`
}

// PrivilegeInput is an input type that accepts PrivilegeArgs and PrivilegeOutput values.
// You can construct a concrete instance of `PrivilegeInput` via:
//
//	PrivilegeArgs{...}
type PrivilegeInput interface {
	pulumi.Input

	ToPrivilegeOutput() PrivilegeOutput
	ToPrivilegeOutputWithContext(context.Context) PrivilegeOutput
}

// The set of data plane operations permitted through this Role Definition.
type PrivilegeArgs struct {
	// An array of actions that are allowed.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// An Azure Cosmos DB Mongo DB Resource.
	Resource PrivilegeResourcePtrInput `pulumi:"resource"`
}

func (PrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Privilege)(nil)).Elem()
}

func (i PrivilegeArgs) ToPrivilegeOutput() PrivilegeOutput {
	return i.ToPrivilegeOutputWithContext(context.Background())
}

func (i PrivilegeArgs) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeOutput)
}

func (i PrivilegeArgs) ToOutput(ctx context.Context) pulumix.Output[Privilege] {
	return pulumix.Output[Privilege]{
		OutputState: i.ToPrivilegeOutputWithContext(ctx).OutputState,
	}
}

// PrivilegeArrayInput is an input type that accepts PrivilegeArray and PrivilegeArrayOutput values.
// You can construct a concrete instance of `PrivilegeArrayInput` via:
//
//	PrivilegeArray{ PrivilegeArgs{...} }
type PrivilegeArrayInput interface {
	pulumi.Input

	ToPrivilegeArrayOutput() PrivilegeArrayOutput
	ToPrivilegeArrayOutputWithContext(context.Context) PrivilegeArrayOutput
}

type PrivilegeArray []PrivilegeInput

func (PrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Privilege)(nil)).Elem()
}

func (i PrivilegeArray) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return i.ToPrivilegeArrayOutputWithContext(context.Background())
}

func (i PrivilegeArray) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeArrayOutput)
}

func (i PrivilegeArray) ToOutput(ctx context.Context) pulumix.Output[[]Privilege] {
	return pulumix.Output[[]Privilege]{
		OutputState: i.ToPrivilegeArrayOutputWithContext(ctx).OutputState,
	}
}

// The set of data plane operations permitted through this Role Definition.
type PrivilegeOutput struct{ *pulumi.OutputState }

func (PrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Privilege)(nil)).Elem()
}

func (o PrivilegeOutput) ToPrivilegeOutput() PrivilegeOutput {
	return o
}

func (o PrivilegeOutput) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return o
}

func (o PrivilegeOutput) ToOutput(ctx context.Context) pulumix.Output[Privilege] {
	return pulumix.Output[Privilege]{
		OutputState: o.OutputState,
	}
}

// An array of actions that are allowed.
func (o PrivilegeOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Privilege) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// An Azure Cosmos DB Mongo DB Resource.
func (o PrivilegeOutput) Resource() PrivilegeResourcePtrOutput {
	return o.ApplyT(func(v Privilege) *PrivilegeResource { return v.Resource }).(PrivilegeResourcePtrOutput)
}

type PrivilegeArrayOutput struct{ *pulumi.OutputState }

func (PrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Privilege)(nil)).Elem()
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Privilege] {
	return pulumix.Output[[]Privilege]{
		OutputState: o.OutputState,
	}
}

func (o PrivilegeArrayOutput) Index(i pulumi.IntInput) PrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Privilege {
		return vs[0].([]Privilege)[vs[1].(int)]
	}).(PrivilegeOutput)
}

// An Azure Cosmos DB Mongo DB Resource.
type PrivilegeResource struct {
	// The collection name the role is applied.
	Collection *string `pulumi:"collection"`
	// The database name the role is applied.
	Db *string `pulumi:"db"`
}

// PrivilegeResourceInput is an input type that accepts PrivilegeResourceArgs and PrivilegeResourceOutput values.
// You can construct a concrete instance of `PrivilegeResourceInput` via:
//
//	PrivilegeResourceArgs{...}
type PrivilegeResourceInput interface {
	pulumi.Input

	ToPrivilegeResourceOutput() PrivilegeResourceOutput
	ToPrivilegeResourceOutputWithContext(context.Context) PrivilegeResourceOutput
}

// An Azure Cosmos DB Mongo DB Resource.
type PrivilegeResourceArgs struct {
	// The collection name the role is applied.
	Collection pulumi.StringPtrInput `pulumi:"collection"`
	// The database name the role is applied.
	Db pulumi.StringPtrInput `pulumi:"db"`
}

func (PrivilegeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivilegeResource)(nil)).Elem()
}

func (i PrivilegeResourceArgs) ToPrivilegeResourceOutput() PrivilegeResourceOutput {
	return i.ToPrivilegeResourceOutputWithContext(context.Background())
}

func (i PrivilegeResourceArgs) ToPrivilegeResourceOutputWithContext(ctx context.Context) PrivilegeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeResourceOutput)
}

func (i PrivilegeResourceArgs) ToOutput(ctx context.Context) pulumix.Output[PrivilegeResource] {
	return pulumix.Output[PrivilegeResource]{
		OutputState: i.ToPrivilegeResourceOutputWithContext(ctx).OutputState,
	}
}

func (i PrivilegeResourceArgs) ToPrivilegeResourcePtrOutput() PrivilegeResourcePtrOutput {
	return i.ToPrivilegeResourcePtrOutputWithContext(context.Background())
}

func (i PrivilegeResourceArgs) ToPrivilegeResourcePtrOutputWithContext(ctx context.Context) PrivilegeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeResourceOutput).ToPrivilegeResourcePtrOutputWithContext(ctx)
}

// PrivilegeResourcePtrInput is an input type that accepts PrivilegeResourceArgs, PrivilegeResourcePtr and PrivilegeResourcePtrOutput values.
// You can construct a concrete instance of `PrivilegeResourcePtrInput` via:
//
//	        PrivilegeResourceArgs{...}
//
//	or:
//
//	        nil
type PrivilegeResourcePtrInput interface {
	pulumi.Input

	ToPrivilegeResourcePtrOutput() PrivilegeResourcePtrOutput
	ToPrivilegeResourcePtrOutputWithContext(context.Context) PrivilegeResourcePtrOutput
}

type privilegeResourcePtrType PrivilegeResourceArgs

func PrivilegeResourcePtr(v *PrivilegeResourceArgs) PrivilegeResourcePtrInput {
	return (*privilegeResourcePtrType)(v)
}

func (*privilegeResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegeResource)(nil)).Elem()
}

func (i *privilegeResourcePtrType) ToPrivilegeResourcePtrOutput() PrivilegeResourcePtrOutput {
	return i.ToPrivilegeResourcePtrOutputWithContext(context.Background())
}

func (i *privilegeResourcePtrType) ToPrivilegeResourcePtrOutputWithContext(ctx context.Context) PrivilegeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeResourcePtrOutput)
}

func (i *privilegeResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*PrivilegeResource] {
	return pulumix.Output[*PrivilegeResource]{
		OutputState: i.ToPrivilegeResourcePtrOutputWithContext(ctx).OutputState,
	}
}

// An Azure Cosmos DB Mongo DB Resource.
type PrivilegeResourceOutput struct{ *pulumi.OutputState }

func (PrivilegeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivilegeResource)(nil)).Elem()
}

func (o PrivilegeResourceOutput) ToPrivilegeResourceOutput() PrivilegeResourceOutput {
	return o
}

func (o PrivilegeResourceOutput) ToPrivilegeResourceOutputWithContext(ctx context.Context) PrivilegeResourceOutput {
	return o
}

func (o PrivilegeResourceOutput) ToPrivilegeResourcePtrOutput() PrivilegeResourcePtrOutput {
	return o.ToPrivilegeResourcePtrOutputWithContext(context.Background())
}

func (o PrivilegeResourceOutput) ToPrivilegeResourcePtrOutputWithContext(ctx context.Context) PrivilegeResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivilegeResource) *PrivilegeResource {
		return &v
	}).(PrivilegeResourcePtrOutput)
}

func (o PrivilegeResourceOutput) ToOutput(ctx context.Context) pulumix.Output[PrivilegeResource] {
	return pulumix.Output[PrivilegeResource]{
		OutputState: o.OutputState,
	}
}

// The collection name the role is applied.
func (o PrivilegeResourceOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivilegeResource) *string { return v.Collection }).(pulumi.StringPtrOutput)
}

// The database name the role is applied.
func (o PrivilegeResourceOutput) Db() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivilegeResource) *string { return v.Db }).(pulumi.StringPtrOutput)
}

type PrivilegeResourcePtrOutput struct{ *pulumi.OutputState }

func (PrivilegeResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegeResource)(nil)).Elem()
}

func (o PrivilegeResourcePtrOutput) ToPrivilegeResourcePtrOutput() PrivilegeResourcePtrOutput {
	return o
}

func (o PrivilegeResourcePtrOutput) ToPrivilegeResourcePtrOutputWithContext(ctx context.Context) PrivilegeResourcePtrOutput {
	return o
}

func (o PrivilegeResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivilegeResource] {
	return pulumix.Output[*PrivilegeResource]{
		OutputState: o.OutputState,
	}
}

func (o PrivilegeResourcePtrOutput) Elem() PrivilegeResourceOutput {
	return o.ApplyT(func(v *PrivilegeResource) PrivilegeResource {
		if v != nil {
			return *v
		}
		var ret PrivilegeResource
		return ret
	}).(PrivilegeResourceOutput)
}

// The collection name the role is applied.
func (o PrivilegeResourcePtrOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegeResource) *string {
		if v == nil {
			return nil
		}
		return v.Collection
	}).(pulumi.StringPtrOutput)
}

// The database name the role is applied.
func (o PrivilegeResourcePtrOutput) Db() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegeResource) *string {
		if v == nil {
			return nil
		}
		return v.Db
	}).(pulumi.StringPtrOutput)
}

// The set of data plane operations permitted through this Role Definition.
type PrivilegeResponse struct {
	// An array of actions that are allowed.
	Actions []string `pulumi:"actions"`
	// An Azure Cosmos DB Mongo DB Resource.
	Resource *PrivilegeResponseResource `pulumi:"resource"`
}

// The set of data plane operations permitted through this Role Definition.
type PrivilegeResponseOutput struct{ *pulumi.OutputState }

func (PrivilegeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivilegeResponse)(nil)).Elem()
}

func (o PrivilegeResponseOutput) ToPrivilegeResponseOutput() PrivilegeResponseOutput {
	return o
}

func (o PrivilegeResponseOutput) ToPrivilegeResponseOutputWithContext(ctx context.Context) PrivilegeResponseOutput {
	return o
}

func (o PrivilegeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrivilegeResponse] {
	return pulumix.Output[PrivilegeResponse]{
		OutputState: o.OutputState,
	}
}

// An array of actions that are allowed.
func (o PrivilegeResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivilegeResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// An Azure Cosmos DB Mongo DB Resource.
func (o PrivilegeResponseOutput) Resource() PrivilegeResponseResourcePtrOutput {
	return o.ApplyT(func(v PrivilegeResponse) *PrivilegeResponseResource { return v.Resource }).(PrivilegeResponseResourcePtrOutput)
}

type PrivilegeResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivilegeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivilegeResponse)(nil)).Elem()
}

func (o PrivilegeResponseArrayOutput) ToPrivilegeResponseArrayOutput() PrivilegeResponseArrayOutput {
	return o
}

func (o PrivilegeResponseArrayOutput) ToPrivilegeResponseArrayOutputWithContext(ctx context.Context) PrivilegeResponseArrayOutput {
	return o
}

func (o PrivilegeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PrivilegeResponse] {
	return pulumix.Output[[]PrivilegeResponse]{
		OutputState: o.OutputState,
	}
}

func (o PrivilegeResponseArrayOutput) Index(i pulumi.IntInput) PrivilegeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivilegeResponse {
		return vs[0].([]PrivilegeResponse)[vs[1].(int)]
	}).(PrivilegeResponseOutput)
}

// An Azure Cosmos DB Mongo DB Resource.
type PrivilegeResponseResource struct {
	// The collection name the role is applied.
	Collection *string `pulumi:"collection"`
	// The database name the role is applied.
	Db *string `pulumi:"db"`
}

// An Azure Cosmos DB Mongo DB Resource.
type PrivilegeResponseResourceOutput struct{ *pulumi.OutputState }

func (PrivilegeResponseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivilegeResponseResource)(nil)).Elem()
}

func (o PrivilegeResponseResourceOutput) ToPrivilegeResponseResourceOutput() PrivilegeResponseResourceOutput {
	return o
}

func (o PrivilegeResponseResourceOutput) ToPrivilegeResponseResourceOutputWithContext(ctx context.Context) PrivilegeResponseResourceOutput {
	return o
}

func (o PrivilegeResponseResourceOutput) ToOutput(ctx context.Context) pulumix.Output[PrivilegeResponseResource] {
	return pulumix.Output[PrivilegeResponseResource]{
		OutputState: o.OutputState,
	}
}

// The collection name the role is applied.
func (o PrivilegeResponseResourceOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivilegeResponseResource) *string { return v.Collection }).(pulumi.StringPtrOutput)
}

// The database name the role is applied.
func (o PrivilegeResponseResourceOutput) Db() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivilegeResponseResource) *string { return v.Db }).(pulumi.StringPtrOutput)
}

type PrivilegeResponseResourcePtrOutput struct{ *pulumi.OutputState }

func (PrivilegeResponseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegeResponseResource)(nil)).Elem()
}

func (o PrivilegeResponseResourcePtrOutput) ToPrivilegeResponseResourcePtrOutput() PrivilegeResponseResourcePtrOutput {
	return o
}

func (o PrivilegeResponseResourcePtrOutput) ToPrivilegeResponseResourcePtrOutputWithContext(ctx context.Context) PrivilegeResponseResourcePtrOutput {
	return o
}

func (o PrivilegeResponseResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivilegeResponseResource] {
	return pulumix.Output[*PrivilegeResponseResource]{
		OutputState: o.OutputState,
	}
}

func (o PrivilegeResponseResourcePtrOutput) Elem() PrivilegeResponseResourceOutput {
	return o.ApplyT(func(v *PrivilegeResponseResource) PrivilegeResponseResource {
		if v != nil {
			return *v
		}
		var ret PrivilegeResponseResource
		return ret
	}).(PrivilegeResponseResourceOutput)
}

// The collection name the role is applied.
func (o PrivilegeResponseResourcePtrOutput) Collection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegeResponseResource) *string {
		if v == nil {
			return nil
		}
		return v.Collection
	}).(pulumi.StringPtrOutput)
}

// The database name the role is applied.
func (o PrivilegeResponseResourcePtrOutput) Db() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegeResponseResource) *string {
		if v == nil {
			return nil
		}
		return v.Db
	}).(pulumi.StringPtrOutput)
}

// The set of roles permitted through this Role Definition.
type Role struct {
	// The database name the role is applied.
	Db *string `pulumi:"db"`
	// The role name.
	Role *string `pulumi:"role"`
}

// RoleInput is an input type that accepts RoleArgs and RoleOutput values.
// You can construct a concrete instance of `RoleInput` via:
//
//	RoleArgs{...}
type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(context.Context) RoleOutput
}

// The set of roles permitted through this Role Definition.
type RoleArgs struct {
	// The database name the role is applied.
	Db pulumi.StringPtrInput `pulumi:"db"`
	// The role name.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (i RoleArgs) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i RoleArgs) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

func (i RoleArgs) ToOutput(ctx context.Context) pulumix.Output[Role] {
	return pulumix.Output[Role]{
		OutputState: i.ToRoleOutputWithContext(ctx).OutputState,
	}
}

// RoleArrayInput is an input type that accepts RoleArray and RoleArrayOutput values.
// You can construct a concrete instance of `RoleArrayInput` via:
//
//	RoleArray{ RoleArgs{...} }
type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

func (i RoleArray) ToOutput(ctx context.Context) pulumix.Output[[]Role] {
	return pulumix.Output[[]Role]{
		OutputState: i.ToRoleArrayOutputWithContext(ctx).OutputState,
	}
}

// The set of roles permitted through this Role Definition.
type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func (o RoleOutput) ToOutput(ctx context.Context) pulumix.Output[Role] {
	return pulumix.Output[Role]{
		OutputState: o.OutputState,
	}
}

// The database name the role is applied.
func (o RoleOutput) Db() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.Db }).(pulumi.StringPtrOutput)
}

// The role name.
func (o RoleOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type RoleArrayOutput struct{ *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Role] {
	return pulumix.Output[[]Role]{
		OutputState: o.OutputState,
	}
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Role {
		return vs[0].([]Role)[vs[1].(int)]
	}).(RoleOutput)
}

// The set of roles permitted through this Role Definition.
type RoleResponse struct {
	// The database name the role is applied.
	Db *string `pulumi:"db"`
	// The role name.
	Role *string `pulumi:"role"`
}

// The set of roles permitted through this Role Definition.
type RoleResponseOutput struct{ *pulumi.OutputState }

func (RoleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleResponse)(nil)).Elem()
}

func (o RoleResponseOutput) ToRoleResponseOutput() RoleResponseOutput {
	return o
}

func (o RoleResponseOutput) ToRoleResponseOutputWithContext(ctx context.Context) RoleResponseOutput {
	return o
}

func (o RoleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RoleResponse] {
	return pulumix.Output[RoleResponse]{
		OutputState: o.OutputState,
	}
}

// The database name the role is applied.
func (o RoleResponseOutput) Db() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleResponse) *string { return v.Db }).(pulumi.StringPtrOutput)
}

// The role name.
func (o RoleResponseOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleResponse) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type RoleResponseArrayOutput struct{ *pulumi.OutputState }

func (RoleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleResponse)(nil)).Elem()
}

func (o RoleResponseArrayOutput) ToRoleResponseArrayOutput() RoleResponseArrayOutput {
	return o
}

func (o RoleResponseArrayOutput) ToRoleResponseArrayOutputWithContext(ctx context.Context) RoleResponseArrayOutput {
	return o
}

func (o RoleResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RoleResponse] {
	return pulumix.Output[[]RoleResponse]{
		OutputState: o.OutputState,
	}
}

func (o RoleResponseArrayOutput) Index(i pulumi.IntInput) RoleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleResponse {
		return vs[0].([]RoleResponse)[vs[1].(int)]
	}).(RoleResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(PrivilegeOutput{})
	pulumi.RegisterOutputType(PrivilegeArrayOutput{})
	pulumi.RegisterOutputType(PrivilegeResourceOutput{})
	pulumi.RegisterOutputType(PrivilegeResourcePtrOutput{})
	pulumi.RegisterOutputType(PrivilegeResponseOutput{})
	pulumi.RegisterOutputType(PrivilegeResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivilegeResponseResourceOutput{})
	pulumi.RegisterOutputType(PrivilegeResponseResourcePtrOutput{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleResponseOutput{})
	pulumi.RegisterOutputType(RoleResponseArrayOutput{})
}
