// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package documentdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Parameters to create and update an Azure Cosmos DB Table Role Definition.
//
// Uses Azure REST API version 2024-12-01-preview.
type TableResourceTableRoleDefinition struct {
	pulumi.CustomResourceState

	// A set of fully qualified Scopes at or below which Table Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes pulumi.StringArrayOutput `pulumi:"assignableScopes"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The set of operations allowed through this Role Definition.
	Permissions PermissionResponseArrayOutput `pulumi:"permissions"`
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName pulumi.StringPtrOutput `pulumi:"roleName"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTableResourceTableRoleDefinition registers a new resource with the given unique name, arguments, and options.
func NewTableResourceTableRoleDefinition(ctx *pulumi.Context,
	name string, args *TableResourceTableRoleDefinitionArgs, opts ...pulumi.ResourceOption) (*TableResourceTableRoleDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:documentdb/v20241201preview:TableResourceTableRoleDefinition"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TableResourceTableRoleDefinition
	err := ctx.RegisterResource("azure-native:documentdb:TableResourceTableRoleDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableResourceTableRoleDefinition gets an existing TableResourceTableRoleDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableResourceTableRoleDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableResourceTableRoleDefinitionState, opts ...pulumi.ResourceOption) (*TableResourceTableRoleDefinition, error) {
	var resource TableResourceTableRoleDefinition
	err := ctx.ReadResource("azure-native:documentdb:TableResourceTableRoleDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableResourceTableRoleDefinition resources.
type tableResourceTableRoleDefinitionState struct {
}

type TableResourceTableRoleDefinitionState struct {
}

func (TableResourceTableRoleDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableResourceTableRoleDefinitionState)(nil)).Elem()
}

type tableResourceTableRoleDefinitionArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// A set of fully qualified Scopes at or below which Table Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes []string `pulumi:"assignableScopes"`
	// The path id for the Role Definition.
	Id *string `pulumi:"id"`
	// The set of operations allowed through this Role Definition.
	Permissions []Permission `pulumi:"permissions"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Definition.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName *string `pulumi:"roleName"`
	// Indicates whether the Role Definition was built-in or user created.
	Type *RoleDefinitionType `pulumi:"type"`
}

// The set of arguments for constructing a TableResourceTableRoleDefinition resource.
type TableResourceTableRoleDefinitionArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput
	// A set of fully qualified Scopes at or below which Table Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes pulumi.StringArrayInput
	// The path id for the Role Definition.
	Id pulumi.StringPtrInput
	// The set of operations allowed through this Role Definition.
	Permissions PermissionArrayInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The GUID for the Role Definition.
	RoleDefinitionId pulumi.StringPtrInput
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName pulumi.StringPtrInput
	// Indicates whether the Role Definition was built-in or user created.
	Type RoleDefinitionTypePtrInput
}

func (TableResourceTableRoleDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableResourceTableRoleDefinitionArgs)(nil)).Elem()
}

type TableResourceTableRoleDefinitionInput interface {
	pulumi.Input

	ToTableResourceTableRoleDefinitionOutput() TableResourceTableRoleDefinitionOutput
	ToTableResourceTableRoleDefinitionOutputWithContext(ctx context.Context) TableResourceTableRoleDefinitionOutput
}

func (*TableResourceTableRoleDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResourceTableRoleDefinition)(nil)).Elem()
}

func (i *TableResourceTableRoleDefinition) ToTableResourceTableRoleDefinitionOutput() TableResourceTableRoleDefinitionOutput {
	return i.ToTableResourceTableRoleDefinitionOutputWithContext(context.Background())
}

func (i *TableResourceTableRoleDefinition) ToTableResourceTableRoleDefinitionOutputWithContext(ctx context.Context) TableResourceTableRoleDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourceTableRoleDefinitionOutput)
}

type TableResourceTableRoleDefinitionOutput struct{ *pulumi.OutputState }

func (TableResourceTableRoleDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResourceTableRoleDefinition)(nil)).Elem()
}

func (o TableResourceTableRoleDefinitionOutput) ToTableResourceTableRoleDefinitionOutput() TableResourceTableRoleDefinitionOutput {
	return o
}

func (o TableResourceTableRoleDefinitionOutput) ToTableResourceTableRoleDefinitionOutputWithContext(ctx context.Context) TableResourceTableRoleDefinitionOutput {
	return o
}

// A set of fully qualified Scopes at or below which Table Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
func (o TableResourceTableRoleDefinitionOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableResourceTableRoleDefinition) pulumi.StringArrayOutput { return v.AssignableScopes }).(pulumi.StringArrayOutput)
}

// The name of the resource
func (o TableResourceTableRoleDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TableResourceTableRoleDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The set of operations allowed through this Role Definition.
func (o TableResourceTableRoleDefinitionOutput) Permissions() PermissionResponseArrayOutput {
	return o.ApplyT(func(v *TableResourceTableRoleDefinition) PermissionResponseArrayOutput { return v.Permissions }).(PermissionResponseArrayOutput)
}

// A user-friendly name for the Role Definition. Must be unique for the database account.
func (o TableResourceTableRoleDefinitionOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableResourceTableRoleDefinition) pulumi.StringPtrOutput { return v.RoleName }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o TableResourceTableRoleDefinitionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *TableResourceTableRoleDefinition) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o TableResourceTableRoleDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TableResourceTableRoleDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TableResourceTableRoleDefinitionOutput{})
}
