// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package documentdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the properties of an existing Azure Cosmos DB Table Role Definition with the given Id.
// Azure REST API version: 2024-12-01-preview.
func LookupTableResourceTableRoleDefinition(ctx *pulumi.Context, args *LookupTableResourceTableRoleDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupTableResourceTableRoleDefinitionResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupTableResourceTableRoleDefinitionResult
	err := ctx.Invoke("azure-native:documentdb:getTableResourceTableRoleDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTableResourceTableRoleDefinitionArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Definition.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// Parameters to create and update an Azure Cosmos DB Table Role Definition.
type LookupTableResourceTableRoleDefinitionResult struct {
	// A set of fully qualified Scopes at or below which Table Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
	AssignableScopes []string `pulumi:"assignableScopes"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The set of operations allowed through this Role Definition.
	Permissions []PermissionResponse `pulumi:"permissions"`
	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName *string `pulumi:"roleName"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupTableResourceTableRoleDefinitionOutput(ctx *pulumi.Context, args LookupTableResourceTableRoleDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupTableResourceTableRoleDefinitionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTableResourceTableRoleDefinitionResultOutput, error) {
			args := v.(LookupTableResourceTableRoleDefinitionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:documentdb:getTableResourceTableRoleDefinition", args, LookupTableResourceTableRoleDefinitionResultOutput{}, options).(LookupTableResourceTableRoleDefinitionResultOutput), nil
		}).(LookupTableResourceTableRoleDefinitionResultOutput)
}

type LookupTableResourceTableRoleDefinitionOutputArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The GUID for the Role Definition.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
}

func (LookupTableResourceTableRoleDefinitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableResourceTableRoleDefinitionArgs)(nil)).Elem()
}

// Parameters to create and update an Azure Cosmos DB Table Role Definition.
type LookupTableResourceTableRoleDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupTableResourceTableRoleDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableResourceTableRoleDefinitionResult)(nil)).Elem()
}

func (o LookupTableResourceTableRoleDefinitionResultOutput) ToLookupTableResourceTableRoleDefinitionResultOutput() LookupTableResourceTableRoleDefinitionResultOutput {
	return o
}

func (o LookupTableResourceTableRoleDefinitionResultOutput) ToLookupTableResourceTableRoleDefinitionResultOutputWithContext(ctx context.Context) LookupTableResourceTableRoleDefinitionResultOutput {
	return o
}

// A set of fully qualified Scopes at or below which Table Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
func (o LookupTableResourceTableRoleDefinitionResultOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTableResourceTableRoleDefinitionResult) []string { return v.AssignableScopes }).(pulumi.StringArrayOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupTableResourceTableRoleDefinitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResourceTableRoleDefinitionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupTableResourceTableRoleDefinitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResourceTableRoleDefinitionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The set of operations allowed through this Role Definition.
func (o LookupTableResourceTableRoleDefinitionResultOutput) Permissions() PermissionResponseArrayOutput {
	return o.ApplyT(func(v LookupTableResourceTableRoleDefinitionResult) []PermissionResponse { return v.Permissions }).(PermissionResponseArrayOutput)
}

// A user-friendly name for the Role Definition. Must be unique for the database account.
func (o LookupTableResourceTableRoleDefinitionResultOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTableResourceTableRoleDefinitionResult) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupTableResourceTableRoleDefinitionResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupTableResourceTableRoleDefinitionResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupTableResourceTableRoleDefinitionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResourceTableRoleDefinitionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTableResourceTableRoleDefinitionResultOutput{})
}
