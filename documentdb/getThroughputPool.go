// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package documentdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the properties of an existing Azure Cosmos DB Throughput Pool
// Azure REST API version: 2023-11-15-preview.
func LookupThroughputPool(ctx *pulumi.Context, args *LookupThroughputPoolArgs, opts ...pulumi.InvokeOption) (*LookupThroughputPoolResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupThroughputPoolResult
	err := ctx.Invoke("azure-native:documentdb:getThroughputPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupThroughputPoolArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Cosmos DB Throughput Pool name.
	ThroughputPoolName string `pulumi:"throughputPoolName"`
}

// An Azure Cosmos DB Throughputpool.
type LookupThroughputPoolResult struct {
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Value for throughput to be shared among CosmosDB resources in the pool.
	MaxThroughput *int `pulumi:"maxThroughput"`
	// The name of the resource
	Name string `pulumi:"name"`
	// A provisioning state of the ThroughputPool.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupThroughputPoolOutput(ctx *pulumi.Context, args LookupThroughputPoolOutputArgs, opts ...pulumi.InvokeOption) LookupThroughputPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupThroughputPoolResult, error) {
			args := v.(LookupThroughputPoolArgs)
			r, err := LookupThroughputPool(ctx, &args, opts...)
			var s LookupThroughputPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupThroughputPoolResultOutput)
}

type LookupThroughputPoolOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Cosmos DB Throughput Pool name.
	ThroughputPoolName pulumi.StringInput `pulumi:"throughputPoolName"`
}

func (LookupThroughputPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThroughputPoolArgs)(nil)).Elem()
}

// An Azure Cosmos DB Throughputpool.
type LookupThroughputPoolResultOutput struct{ *pulumi.OutputState }

func (LookupThroughputPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThroughputPoolResult)(nil)).Elem()
}

func (o LookupThroughputPoolResultOutput) ToLookupThroughputPoolResultOutput() LookupThroughputPoolResultOutput {
	return o
}

func (o LookupThroughputPoolResultOutput) ToLookupThroughputPoolResultOutputWithContext(ctx context.Context) LookupThroughputPoolResultOutput {
	return o
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupThroughputPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupThroughputPoolResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) string { return v.Location }).(pulumi.StringOutput)
}

// Value for throughput to be shared among CosmosDB resources in the pool.
func (o LookupThroughputPoolResultOutput) MaxThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) *int { return v.MaxThroughput }).(pulumi.IntPtrOutput)
}

// The name of the resource
func (o LookupThroughputPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// A provisioning state of the ThroughputPool.
func (o LookupThroughputPoolResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupThroughputPoolResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupThroughputPoolResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupThroughputPoolResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupThroughputPoolResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupThroughputPoolResultOutput{})
}
