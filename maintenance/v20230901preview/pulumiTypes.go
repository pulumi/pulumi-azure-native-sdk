// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Azure query for the update configuration.
type ConfigurationAssignmentFilterProperties struct {
	// List of locations to scope the query to.
	Locations []string `pulumi:"locations"`
	// List of allowed operating systems.
	OsTypes []string `pulumi:"osTypes"`
	// List of allowed resource groups.
	ResourceGroups []string `pulumi:"resourceGroups"`
	// List of allowed resources.
	ResourceTypes []string `pulumi:"resourceTypes"`
	// Tag settings for the VM.
	TagSettings *TagSettingsProperties `pulumi:"tagSettings"`
}

// ConfigurationAssignmentFilterPropertiesInput is an input type that accepts ConfigurationAssignmentFilterPropertiesArgs and ConfigurationAssignmentFilterPropertiesOutput values.
// You can construct a concrete instance of `ConfigurationAssignmentFilterPropertiesInput` via:
//
//	ConfigurationAssignmentFilterPropertiesArgs{...}
type ConfigurationAssignmentFilterPropertiesInput interface {
	pulumi.Input

	ToConfigurationAssignmentFilterPropertiesOutput() ConfigurationAssignmentFilterPropertiesOutput
	ToConfigurationAssignmentFilterPropertiesOutputWithContext(context.Context) ConfigurationAssignmentFilterPropertiesOutput
}

// Azure query for the update configuration.
type ConfigurationAssignmentFilterPropertiesArgs struct {
	// List of locations to scope the query to.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// List of allowed operating systems.
	OsTypes pulumi.StringArrayInput `pulumi:"osTypes"`
	// List of allowed resource groups.
	ResourceGroups pulumi.StringArrayInput `pulumi:"resourceGroups"`
	// List of allowed resources.
	ResourceTypes pulumi.StringArrayInput `pulumi:"resourceTypes"`
	// Tag settings for the VM.
	TagSettings TagSettingsPropertiesPtrInput `pulumi:"tagSettings"`
}

func (ConfigurationAssignmentFilterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAssignmentFilterProperties)(nil)).Elem()
}

func (i ConfigurationAssignmentFilterPropertiesArgs) ToConfigurationAssignmentFilterPropertiesOutput() ConfigurationAssignmentFilterPropertiesOutput {
	return i.ToConfigurationAssignmentFilterPropertiesOutputWithContext(context.Background())
}

func (i ConfigurationAssignmentFilterPropertiesArgs) ToConfigurationAssignmentFilterPropertiesOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAssignmentFilterPropertiesOutput)
}

func (i ConfigurationAssignmentFilterPropertiesArgs) ToConfigurationAssignmentFilterPropertiesPtrOutput() ConfigurationAssignmentFilterPropertiesPtrOutput {
	return i.ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i ConfigurationAssignmentFilterPropertiesArgs) ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAssignmentFilterPropertiesOutput).ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(ctx)
}

// ConfigurationAssignmentFilterPropertiesPtrInput is an input type that accepts ConfigurationAssignmentFilterPropertiesArgs, ConfigurationAssignmentFilterPropertiesPtr and ConfigurationAssignmentFilterPropertiesPtrOutput values.
// You can construct a concrete instance of `ConfigurationAssignmentFilterPropertiesPtrInput` via:
//
//	        ConfigurationAssignmentFilterPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConfigurationAssignmentFilterPropertiesPtrInput interface {
	pulumi.Input

	ToConfigurationAssignmentFilterPropertiesPtrOutput() ConfigurationAssignmentFilterPropertiesPtrOutput
	ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(context.Context) ConfigurationAssignmentFilterPropertiesPtrOutput
}

type configurationAssignmentFilterPropertiesPtrType ConfigurationAssignmentFilterPropertiesArgs

func ConfigurationAssignmentFilterPropertiesPtr(v *ConfigurationAssignmentFilterPropertiesArgs) ConfigurationAssignmentFilterPropertiesPtrInput {
	return (*configurationAssignmentFilterPropertiesPtrType)(v)
}

func (*configurationAssignmentFilterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationAssignmentFilterProperties)(nil)).Elem()
}

func (i *configurationAssignmentFilterPropertiesPtrType) ToConfigurationAssignmentFilterPropertiesPtrOutput() ConfigurationAssignmentFilterPropertiesPtrOutput {
	return i.ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i *configurationAssignmentFilterPropertiesPtrType) ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAssignmentFilterPropertiesPtrOutput)
}

// Azure query for the update configuration.
type ConfigurationAssignmentFilterPropertiesOutput struct{ *pulumi.OutputState }

func (ConfigurationAssignmentFilterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAssignmentFilterProperties)(nil)).Elem()
}

func (o ConfigurationAssignmentFilterPropertiesOutput) ToConfigurationAssignmentFilterPropertiesOutput() ConfigurationAssignmentFilterPropertiesOutput {
	return o
}

func (o ConfigurationAssignmentFilterPropertiesOutput) ToConfigurationAssignmentFilterPropertiesOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesOutput {
	return o
}

func (o ConfigurationAssignmentFilterPropertiesOutput) ToConfigurationAssignmentFilterPropertiesPtrOutput() ConfigurationAssignmentFilterPropertiesPtrOutput {
	return o.ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(context.Background())
}

func (o ConfigurationAssignmentFilterPropertiesOutput) ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationAssignmentFilterProperties) *ConfigurationAssignmentFilterProperties {
		return &v
	}).(ConfigurationAssignmentFilterPropertiesPtrOutput)
}

// List of locations to scope the query to.
func (o ConfigurationAssignmentFilterPropertiesOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterProperties) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// List of allowed operating systems.
func (o ConfigurationAssignmentFilterPropertiesOutput) OsTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterProperties) []string { return v.OsTypes }).(pulumi.StringArrayOutput)
}

// List of allowed resource groups.
func (o ConfigurationAssignmentFilterPropertiesOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterProperties) []string { return v.ResourceGroups }).(pulumi.StringArrayOutput)
}

// List of allowed resources.
func (o ConfigurationAssignmentFilterPropertiesOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterProperties) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

// Tag settings for the VM.
func (o ConfigurationAssignmentFilterPropertiesOutput) TagSettings() TagSettingsPropertiesPtrOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterProperties) *TagSettingsProperties { return v.TagSettings }).(TagSettingsPropertiesPtrOutput)
}

type ConfigurationAssignmentFilterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConfigurationAssignmentFilterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationAssignmentFilterProperties)(nil)).Elem()
}

func (o ConfigurationAssignmentFilterPropertiesPtrOutput) ToConfigurationAssignmentFilterPropertiesPtrOutput() ConfigurationAssignmentFilterPropertiesPtrOutput {
	return o
}

func (o ConfigurationAssignmentFilterPropertiesPtrOutput) ToConfigurationAssignmentFilterPropertiesPtrOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesPtrOutput {
	return o
}

func (o ConfigurationAssignmentFilterPropertiesPtrOutput) Elem() ConfigurationAssignmentFilterPropertiesOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterProperties) ConfigurationAssignmentFilterProperties {
		if v != nil {
			return *v
		}
		var ret ConfigurationAssignmentFilterProperties
		return ret
	}).(ConfigurationAssignmentFilterPropertiesOutput)
}

// List of locations to scope the query to.
func (o ConfigurationAssignmentFilterPropertiesPtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterProperties) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// List of allowed operating systems.
func (o ConfigurationAssignmentFilterPropertiesPtrOutput) OsTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterProperties) []string {
		if v == nil {
			return nil
		}
		return v.OsTypes
	}).(pulumi.StringArrayOutput)
}

// List of allowed resource groups.
func (o ConfigurationAssignmentFilterPropertiesPtrOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterProperties) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGroups
	}).(pulumi.StringArrayOutput)
}

// List of allowed resources.
func (o ConfigurationAssignmentFilterPropertiesPtrOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterProperties) []string {
		if v == nil {
			return nil
		}
		return v.ResourceTypes
	}).(pulumi.StringArrayOutput)
}

// Tag settings for the VM.
func (o ConfigurationAssignmentFilterPropertiesPtrOutput) TagSettings() TagSettingsPropertiesPtrOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterProperties) *TagSettingsProperties {
		if v == nil {
			return nil
		}
		return v.TagSettings
	}).(TagSettingsPropertiesPtrOutput)
}

// Azure query for the update configuration.
type ConfigurationAssignmentFilterPropertiesResponse struct {
	// List of locations to scope the query to.
	Locations []string `pulumi:"locations"`
	// List of allowed operating systems.
	OsTypes []string `pulumi:"osTypes"`
	// List of allowed resource groups.
	ResourceGroups []string `pulumi:"resourceGroups"`
	// List of allowed resources.
	ResourceTypes []string `pulumi:"resourceTypes"`
	// Tag settings for the VM.
	TagSettings *TagSettingsPropertiesResponse `pulumi:"tagSettings"`
}

// Azure query for the update configuration.
type ConfigurationAssignmentFilterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationAssignmentFilterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAssignmentFilterPropertiesResponse)(nil)).Elem()
}

func (o ConfigurationAssignmentFilterPropertiesResponseOutput) ToConfigurationAssignmentFilterPropertiesResponseOutput() ConfigurationAssignmentFilterPropertiesResponseOutput {
	return o
}

func (o ConfigurationAssignmentFilterPropertiesResponseOutput) ToConfigurationAssignmentFilterPropertiesResponseOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesResponseOutput {
	return o
}

// List of locations to scope the query to.
func (o ConfigurationAssignmentFilterPropertiesResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterPropertiesResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// List of allowed operating systems.
func (o ConfigurationAssignmentFilterPropertiesResponseOutput) OsTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterPropertiesResponse) []string { return v.OsTypes }).(pulumi.StringArrayOutput)
}

// List of allowed resource groups.
func (o ConfigurationAssignmentFilterPropertiesResponseOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterPropertiesResponse) []string { return v.ResourceGroups }).(pulumi.StringArrayOutput)
}

// List of allowed resources.
func (o ConfigurationAssignmentFilterPropertiesResponseOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterPropertiesResponse) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

// Tag settings for the VM.
func (o ConfigurationAssignmentFilterPropertiesResponseOutput) TagSettings() TagSettingsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationAssignmentFilterPropertiesResponse) *TagSettingsPropertiesResponse {
		return v.TagSettings
	}).(TagSettingsPropertiesResponsePtrOutput)
}

type ConfigurationAssignmentFilterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationAssignmentFilterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationAssignmentFilterPropertiesResponse)(nil)).Elem()
}

func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) ToConfigurationAssignmentFilterPropertiesResponsePtrOutput() ConfigurationAssignmentFilterPropertiesResponsePtrOutput {
	return o
}

func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) ToConfigurationAssignmentFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) ConfigurationAssignmentFilterPropertiesResponsePtrOutput {
	return o
}

func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) Elem() ConfigurationAssignmentFilterPropertiesResponseOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterPropertiesResponse) ConfigurationAssignmentFilterPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ConfigurationAssignmentFilterPropertiesResponse
		return ret
	}).(ConfigurationAssignmentFilterPropertiesResponseOutput)
}

// List of locations to scope the query to.
func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// List of allowed operating systems.
func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) OsTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.OsTypes
	}).(pulumi.StringArrayOutput)
}

// List of allowed resource groups.
func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGroups
	}).(pulumi.StringArrayOutput)
}

// List of allowed resources.
func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResourceTypes
	}).(pulumi.StringArrayOutput)
}

// Tag settings for the VM.
func (o ConfigurationAssignmentFilterPropertiesResponsePtrOutput) TagSettings() TagSettingsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ConfigurationAssignmentFilterPropertiesResponse) *TagSettingsPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.TagSettings
	}).(TagSettingsPropertiesResponsePtrOutput)
}

// Input properties for patching a Linux machine.
type InputLinuxParameters struct {
	// Classification category of patches to be patched
	ClassificationsToInclude []string `pulumi:"classificationsToInclude"`
	// Package names to be excluded for patching.
	PackageNameMasksToExclude []string `pulumi:"packageNameMasksToExclude"`
	// Package names to be included for patching.
	PackageNameMasksToInclude []string `pulumi:"packageNameMasksToInclude"`
}

// InputLinuxParametersInput is an input type that accepts InputLinuxParametersArgs and InputLinuxParametersOutput values.
// You can construct a concrete instance of `InputLinuxParametersInput` via:
//
//	InputLinuxParametersArgs{...}
type InputLinuxParametersInput interface {
	pulumi.Input

	ToInputLinuxParametersOutput() InputLinuxParametersOutput
	ToInputLinuxParametersOutputWithContext(context.Context) InputLinuxParametersOutput
}

// Input properties for patching a Linux machine.
type InputLinuxParametersArgs struct {
	// Classification category of patches to be patched
	ClassificationsToInclude pulumi.StringArrayInput `pulumi:"classificationsToInclude"`
	// Package names to be excluded for patching.
	PackageNameMasksToExclude pulumi.StringArrayInput `pulumi:"packageNameMasksToExclude"`
	// Package names to be included for patching.
	PackageNameMasksToInclude pulumi.StringArrayInput `pulumi:"packageNameMasksToInclude"`
}

func (InputLinuxParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputLinuxParameters)(nil)).Elem()
}

func (i InputLinuxParametersArgs) ToInputLinuxParametersOutput() InputLinuxParametersOutput {
	return i.ToInputLinuxParametersOutputWithContext(context.Background())
}

func (i InputLinuxParametersArgs) ToInputLinuxParametersOutputWithContext(ctx context.Context) InputLinuxParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputLinuxParametersOutput)
}

func (i InputLinuxParametersArgs) ToInputLinuxParametersPtrOutput() InputLinuxParametersPtrOutput {
	return i.ToInputLinuxParametersPtrOutputWithContext(context.Background())
}

func (i InputLinuxParametersArgs) ToInputLinuxParametersPtrOutputWithContext(ctx context.Context) InputLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputLinuxParametersOutput).ToInputLinuxParametersPtrOutputWithContext(ctx)
}

// InputLinuxParametersPtrInput is an input type that accepts InputLinuxParametersArgs, InputLinuxParametersPtr and InputLinuxParametersPtrOutput values.
// You can construct a concrete instance of `InputLinuxParametersPtrInput` via:
//
//	        InputLinuxParametersArgs{...}
//
//	or:
//
//	        nil
type InputLinuxParametersPtrInput interface {
	pulumi.Input

	ToInputLinuxParametersPtrOutput() InputLinuxParametersPtrOutput
	ToInputLinuxParametersPtrOutputWithContext(context.Context) InputLinuxParametersPtrOutput
}

type inputLinuxParametersPtrType InputLinuxParametersArgs

func InputLinuxParametersPtr(v *InputLinuxParametersArgs) InputLinuxParametersPtrInput {
	return (*inputLinuxParametersPtrType)(v)
}

func (*inputLinuxParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InputLinuxParameters)(nil)).Elem()
}

func (i *inputLinuxParametersPtrType) ToInputLinuxParametersPtrOutput() InputLinuxParametersPtrOutput {
	return i.ToInputLinuxParametersPtrOutputWithContext(context.Background())
}

func (i *inputLinuxParametersPtrType) ToInputLinuxParametersPtrOutputWithContext(ctx context.Context) InputLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputLinuxParametersPtrOutput)
}

// Input properties for patching a Linux machine.
type InputLinuxParametersOutput struct{ *pulumi.OutputState }

func (InputLinuxParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputLinuxParameters)(nil)).Elem()
}

func (o InputLinuxParametersOutput) ToInputLinuxParametersOutput() InputLinuxParametersOutput {
	return o
}

func (o InputLinuxParametersOutput) ToInputLinuxParametersOutputWithContext(ctx context.Context) InputLinuxParametersOutput {
	return o
}

func (o InputLinuxParametersOutput) ToInputLinuxParametersPtrOutput() InputLinuxParametersPtrOutput {
	return o.ToInputLinuxParametersPtrOutputWithContext(context.Background())
}

func (o InputLinuxParametersOutput) ToInputLinuxParametersPtrOutputWithContext(ctx context.Context) InputLinuxParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InputLinuxParameters) *InputLinuxParameters {
		return &v
	}).(InputLinuxParametersPtrOutput)
}

// Classification category of patches to be patched
func (o InputLinuxParametersOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputLinuxParameters) []string { return v.ClassificationsToInclude }).(pulumi.StringArrayOutput)
}

// Package names to be excluded for patching.
func (o InputLinuxParametersOutput) PackageNameMasksToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputLinuxParameters) []string { return v.PackageNameMasksToExclude }).(pulumi.StringArrayOutput)
}

// Package names to be included for patching.
func (o InputLinuxParametersOutput) PackageNameMasksToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputLinuxParameters) []string { return v.PackageNameMasksToInclude }).(pulumi.StringArrayOutput)
}

type InputLinuxParametersPtrOutput struct{ *pulumi.OutputState }

func (InputLinuxParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputLinuxParameters)(nil)).Elem()
}

func (o InputLinuxParametersPtrOutput) ToInputLinuxParametersPtrOutput() InputLinuxParametersPtrOutput {
	return o
}

func (o InputLinuxParametersPtrOutput) ToInputLinuxParametersPtrOutputWithContext(ctx context.Context) InputLinuxParametersPtrOutput {
	return o
}

func (o InputLinuxParametersPtrOutput) Elem() InputLinuxParametersOutput {
	return o.ApplyT(func(v *InputLinuxParameters) InputLinuxParameters {
		if v != nil {
			return *v
		}
		var ret InputLinuxParameters
		return ret
	}).(InputLinuxParametersOutput)
}

// Classification category of patches to be patched
func (o InputLinuxParametersPtrOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputLinuxParameters) []string {
		if v == nil {
			return nil
		}
		return v.ClassificationsToInclude
	}).(pulumi.StringArrayOutput)
}

// Package names to be excluded for patching.
func (o InputLinuxParametersPtrOutput) PackageNameMasksToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputLinuxParameters) []string {
		if v == nil {
			return nil
		}
		return v.PackageNameMasksToExclude
	}).(pulumi.StringArrayOutput)
}

// Package names to be included for patching.
func (o InputLinuxParametersPtrOutput) PackageNameMasksToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputLinuxParameters) []string {
		if v == nil {
			return nil
		}
		return v.PackageNameMasksToInclude
	}).(pulumi.StringArrayOutput)
}

// Input properties for patching a Linux machine.
type InputLinuxParametersResponse struct {
	// Classification category of patches to be patched
	ClassificationsToInclude []string `pulumi:"classificationsToInclude"`
	// Package names to be excluded for patching.
	PackageNameMasksToExclude []string `pulumi:"packageNameMasksToExclude"`
	// Package names to be included for patching.
	PackageNameMasksToInclude []string `pulumi:"packageNameMasksToInclude"`
}

// Input properties for patching a Linux machine.
type InputLinuxParametersResponseOutput struct{ *pulumi.OutputState }

func (InputLinuxParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputLinuxParametersResponse)(nil)).Elem()
}

func (o InputLinuxParametersResponseOutput) ToInputLinuxParametersResponseOutput() InputLinuxParametersResponseOutput {
	return o
}

func (o InputLinuxParametersResponseOutput) ToInputLinuxParametersResponseOutputWithContext(ctx context.Context) InputLinuxParametersResponseOutput {
	return o
}

// Classification category of patches to be patched
func (o InputLinuxParametersResponseOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputLinuxParametersResponse) []string { return v.ClassificationsToInclude }).(pulumi.StringArrayOutput)
}

// Package names to be excluded for patching.
func (o InputLinuxParametersResponseOutput) PackageNameMasksToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputLinuxParametersResponse) []string { return v.PackageNameMasksToExclude }).(pulumi.StringArrayOutput)
}

// Package names to be included for patching.
func (o InputLinuxParametersResponseOutput) PackageNameMasksToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputLinuxParametersResponse) []string { return v.PackageNameMasksToInclude }).(pulumi.StringArrayOutput)
}

type InputLinuxParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (InputLinuxParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputLinuxParametersResponse)(nil)).Elem()
}

func (o InputLinuxParametersResponsePtrOutput) ToInputLinuxParametersResponsePtrOutput() InputLinuxParametersResponsePtrOutput {
	return o
}

func (o InputLinuxParametersResponsePtrOutput) ToInputLinuxParametersResponsePtrOutputWithContext(ctx context.Context) InputLinuxParametersResponsePtrOutput {
	return o
}

func (o InputLinuxParametersResponsePtrOutput) Elem() InputLinuxParametersResponseOutput {
	return o.ApplyT(func(v *InputLinuxParametersResponse) InputLinuxParametersResponse {
		if v != nil {
			return *v
		}
		var ret InputLinuxParametersResponse
		return ret
	}).(InputLinuxParametersResponseOutput)
}

// Classification category of patches to be patched
func (o InputLinuxParametersResponsePtrOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputLinuxParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.ClassificationsToInclude
	}).(pulumi.StringArrayOutput)
}

// Package names to be excluded for patching.
func (o InputLinuxParametersResponsePtrOutput) PackageNameMasksToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputLinuxParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.PackageNameMasksToExclude
	}).(pulumi.StringArrayOutput)
}

// Package names to be included for patching.
func (o InputLinuxParametersResponsePtrOutput) PackageNameMasksToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputLinuxParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.PackageNameMasksToInclude
	}).(pulumi.StringArrayOutput)
}

// Input configuration for a patch run
type InputPatchConfiguration struct {
	// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
	LinuxParameters *InputLinuxParameters `pulumi:"linuxParameters"`
	// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
	RebootSetting *string `pulumi:"rebootSetting"`
	// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
	WindowsParameters *InputWindowsParameters `pulumi:"windowsParameters"`
}

// Defaults sets the appropriate defaults for InputPatchConfiguration
func (val *InputPatchConfiguration) Defaults() *InputPatchConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RebootSetting == nil {
		rebootSetting_ := "IfRequired"
		tmp.RebootSetting = &rebootSetting_
	}
	return &tmp
}

// InputPatchConfigurationInput is an input type that accepts InputPatchConfigurationArgs and InputPatchConfigurationOutput values.
// You can construct a concrete instance of `InputPatchConfigurationInput` via:
//
//	InputPatchConfigurationArgs{...}
type InputPatchConfigurationInput interface {
	pulumi.Input

	ToInputPatchConfigurationOutput() InputPatchConfigurationOutput
	ToInputPatchConfigurationOutputWithContext(context.Context) InputPatchConfigurationOutput
}

// Input configuration for a patch run
type InputPatchConfigurationArgs struct {
	// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
	LinuxParameters InputLinuxParametersPtrInput `pulumi:"linuxParameters"`
	// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
	RebootSetting pulumi.StringPtrInput `pulumi:"rebootSetting"`
	// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
	WindowsParameters InputWindowsParametersPtrInput `pulumi:"windowsParameters"`
}

// Defaults sets the appropriate defaults for InputPatchConfigurationArgs
func (val *InputPatchConfigurationArgs) Defaults() *InputPatchConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RebootSetting == nil {
		tmp.RebootSetting = pulumi.StringPtr("IfRequired")
	}
	return &tmp
}
func (InputPatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputPatchConfiguration)(nil)).Elem()
}

func (i InputPatchConfigurationArgs) ToInputPatchConfigurationOutput() InputPatchConfigurationOutput {
	return i.ToInputPatchConfigurationOutputWithContext(context.Background())
}

func (i InputPatchConfigurationArgs) ToInputPatchConfigurationOutputWithContext(ctx context.Context) InputPatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPatchConfigurationOutput)
}

func (i InputPatchConfigurationArgs) ToInputPatchConfigurationPtrOutput() InputPatchConfigurationPtrOutput {
	return i.ToInputPatchConfigurationPtrOutputWithContext(context.Background())
}

func (i InputPatchConfigurationArgs) ToInputPatchConfigurationPtrOutputWithContext(ctx context.Context) InputPatchConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPatchConfigurationOutput).ToInputPatchConfigurationPtrOutputWithContext(ctx)
}

// InputPatchConfigurationPtrInput is an input type that accepts InputPatchConfigurationArgs, InputPatchConfigurationPtr and InputPatchConfigurationPtrOutput values.
// You can construct a concrete instance of `InputPatchConfigurationPtrInput` via:
//
//	        InputPatchConfigurationArgs{...}
//
//	or:
//
//	        nil
type InputPatchConfigurationPtrInput interface {
	pulumi.Input

	ToInputPatchConfigurationPtrOutput() InputPatchConfigurationPtrOutput
	ToInputPatchConfigurationPtrOutputWithContext(context.Context) InputPatchConfigurationPtrOutput
}

type inputPatchConfigurationPtrType InputPatchConfigurationArgs

func InputPatchConfigurationPtr(v *InputPatchConfigurationArgs) InputPatchConfigurationPtrInput {
	return (*inputPatchConfigurationPtrType)(v)
}

func (*inputPatchConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InputPatchConfiguration)(nil)).Elem()
}

func (i *inputPatchConfigurationPtrType) ToInputPatchConfigurationPtrOutput() InputPatchConfigurationPtrOutput {
	return i.ToInputPatchConfigurationPtrOutputWithContext(context.Background())
}

func (i *inputPatchConfigurationPtrType) ToInputPatchConfigurationPtrOutputWithContext(ctx context.Context) InputPatchConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPatchConfigurationPtrOutput)
}

// Input configuration for a patch run
type InputPatchConfigurationOutput struct{ *pulumi.OutputState }

func (InputPatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputPatchConfiguration)(nil)).Elem()
}

func (o InputPatchConfigurationOutput) ToInputPatchConfigurationOutput() InputPatchConfigurationOutput {
	return o
}

func (o InputPatchConfigurationOutput) ToInputPatchConfigurationOutputWithContext(ctx context.Context) InputPatchConfigurationOutput {
	return o
}

func (o InputPatchConfigurationOutput) ToInputPatchConfigurationPtrOutput() InputPatchConfigurationPtrOutput {
	return o.ToInputPatchConfigurationPtrOutputWithContext(context.Background())
}

func (o InputPatchConfigurationOutput) ToInputPatchConfigurationPtrOutputWithContext(ctx context.Context) InputPatchConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InputPatchConfiguration) *InputPatchConfiguration {
		return &v
	}).(InputPatchConfigurationPtrOutput)
}

// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
func (o InputPatchConfigurationOutput) LinuxParameters() InputLinuxParametersPtrOutput {
	return o.ApplyT(func(v InputPatchConfiguration) *InputLinuxParameters { return v.LinuxParameters }).(InputLinuxParametersPtrOutput)
}

// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
func (o InputPatchConfigurationOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputPatchConfiguration) *string { return v.RebootSetting }).(pulumi.StringPtrOutput)
}

// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
func (o InputPatchConfigurationOutput) WindowsParameters() InputWindowsParametersPtrOutput {
	return o.ApplyT(func(v InputPatchConfiguration) *InputWindowsParameters { return v.WindowsParameters }).(InputWindowsParametersPtrOutput)
}

type InputPatchConfigurationPtrOutput struct{ *pulumi.OutputState }

func (InputPatchConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputPatchConfiguration)(nil)).Elem()
}

func (o InputPatchConfigurationPtrOutput) ToInputPatchConfigurationPtrOutput() InputPatchConfigurationPtrOutput {
	return o
}

func (o InputPatchConfigurationPtrOutput) ToInputPatchConfigurationPtrOutputWithContext(ctx context.Context) InputPatchConfigurationPtrOutput {
	return o
}

func (o InputPatchConfigurationPtrOutput) Elem() InputPatchConfigurationOutput {
	return o.ApplyT(func(v *InputPatchConfiguration) InputPatchConfiguration {
		if v != nil {
			return *v
		}
		var ret InputPatchConfiguration
		return ret
	}).(InputPatchConfigurationOutput)
}

// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
func (o InputPatchConfigurationPtrOutput) LinuxParameters() InputLinuxParametersPtrOutput {
	return o.ApplyT(func(v *InputPatchConfiguration) *InputLinuxParameters {
		if v == nil {
			return nil
		}
		return v.LinuxParameters
	}).(InputLinuxParametersPtrOutput)
}

// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
func (o InputPatchConfigurationPtrOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InputPatchConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RebootSetting
	}).(pulumi.StringPtrOutput)
}

// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
func (o InputPatchConfigurationPtrOutput) WindowsParameters() InputWindowsParametersPtrOutput {
	return o.ApplyT(func(v *InputPatchConfiguration) *InputWindowsParameters {
		if v == nil {
			return nil
		}
		return v.WindowsParameters
	}).(InputWindowsParametersPtrOutput)
}

// Input configuration for a patch run
type InputPatchConfigurationResponse struct {
	// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
	LinuxParameters *InputLinuxParametersResponse `pulumi:"linuxParameters"`
	// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
	RebootSetting *string `pulumi:"rebootSetting"`
	// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
	WindowsParameters *InputWindowsParametersResponse `pulumi:"windowsParameters"`
}

// Defaults sets the appropriate defaults for InputPatchConfigurationResponse
func (val *InputPatchConfigurationResponse) Defaults() *InputPatchConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RebootSetting == nil {
		rebootSetting_ := "IfRequired"
		tmp.RebootSetting = &rebootSetting_
	}
	return &tmp
}

// Input configuration for a patch run
type InputPatchConfigurationResponseOutput struct{ *pulumi.OutputState }

func (InputPatchConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputPatchConfigurationResponse)(nil)).Elem()
}

func (o InputPatchConfigurationResponseOutput) ToInputPatchConfigurationResponseOutput() InputPatchConfigurationResponseOutput {
	return o
}

func (o InputPatchConfigurationResponseOutput) ToInputPatchConfigurationResponseOutputWithContext(ctx context.Context) InputPatchConfigurationResponseOutput {
	return o
}

// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
func (o InputPatchConfigurationResponseOutput) LinuxParameters() InputLinuxParametersResponsePtrOutput {
	return o.ApplyT(func(v InputPatchConfigurationResponse) *InputLinuxParametersResponse { return v.LinuxParameters }).(InputLinuxParametersResponsePtrOutput)
}

// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
func (o InputPatchConfigurationResponseOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputPatchConfigurationResponse) *string { return v.RebootSetting }).(pulumi.StringPtrOutput)
}

// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
func (o InputPatchConfigurationResponseOutput) WindowsParameters() InputWindowsParametersResponsePtrOutput {
	return o.ApplyT(func(v InputPatchConfigurationResponse) *InputWindowsParametersResponse { return v.WindowsParameters }).(InputWindowsParametersResponsePtrOutput)
}

type InputPatchConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (InputPatchConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputPatchConfigurationResponse)(nil)).Elem()
}

func (o InputPatchConfigurationResponsePtrOutput) ToInputPatchConfigurationResponsePtrOutput() InputPatchConfigurationResponsePtrOutput {
	return o
}

func (o InputPatchConfigurationResponsePtrOutput) ToInputPatchConfigurationResponsePtrOutputWithContext(ctx context.Context) InputPatchConfigurationResponsePtrOutput {
	return o
}

func (o InputPatchConfigurationResponsePtrOutput) Elem() InputPatchConfigurationResponseOutput {
	return o.ApplyT(func(v *InputPatchConfigurationResponse) InputPatchConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret InputPatchConfigurationResponse
		return ret
	}).(InputPatchConfigurationResponseOutput)
}

// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.
func (o InputPatchConfigurationResponsePtrOutput) LinuxParameters() InputLinuxParametersResponsePtrOutput {
	return o.ApplyT(func(v *InputPatchConfigurationResponse) *InputLinuxParametersResponse {
		if v == nil {
			return nil
		}
		return v.LinuxParameters
	}).(InputLinuxParametersResponsePtrOutput)
}

// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.
func (o InputPatchConfigurationResponsePtrOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InputPatchConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RebootSetting
	}).(pulumi.StringPtrOutput)
}

// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.
func (o InputPatchConfigurationResponsePtrOutput) WindowsParameters() InputWindowsParametersResponsePtrOutput {
	return o.ApplyT(func(v *InputPatchConfigurationResponse) *InputWindowsParametersResponse {
		if v == nil {
			return nil
		}
		return v.WindowsParameters
	}).(InputWindowsParametersResponsePtrOutput)
}

// Input properties for patching a Windows machine.
type InputWindowsParameters struct {
	// Classification category of patches to be patched
	ClassificationsToInclude []string `pulumi:"classificationsToInclude"`
	// Exclude patches which need reboot
	ExcludeKbsRequiringReboot *bool `pulumi:"excludeKbsRequiringReboot"`
	// Windows KBID to be excluded for patching.
	KbNumbersToExclude []string `pulumi:"kbNumbersToExclude"`
	// Windows KBID to be included for patching.
	KbNumbersToInclude []string `pulumi:"kbNumbersToInclude"`
}

// InputWindowsParametersInput is an input type that accepts InputWindowsParametersArgs and InputWindowsParametersOutput values.
// You can construct a concrete instance of `InputWindowsParametersInput` via:
//
//	InputWindowsParametersArgs{...}
type InputWindowsParametersInput interface {
	pulumi.Input

	ToInputWindowsParametersOutput() InputWindowsParametersOutput
	ToInputWindowsParametersOutputWithContext(context.Context) InputWindowsParametersOutput
}

// Input properties for patching a Windows machine.
type InputWindowsParametersArgs struct {
	// Classification category of patches to be patched
	ClassificationsToInclude pulumi.StringArrayInput `pulumi:"classificationsToInclude"`
	// Exclude patches which need reboot
	ExcludeKbsRequiringReboot pulumi.BoolPtrInput `pulumi:"excludeKbsRequiringReboot"`
	// Windows KBID to be excluded for patching.
	KbNumbersToExclude pulumi.StringArrayInput `pulumi:"kbNumbersToExclude"`
	// Windows KBID to be included for patching.
	KbNumbersToInclude pulumi.StringArrayInput `pulumi:"kbNumbersToInclude"`
}

func (InputWindowsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputWindowsParameters)(nil)).Elem()
}

func (i InputWindowsParametersArgs) ToInputWindowsParametersOutput() InputWindowsParametersOutput {
	return i.ToInputWindowsParametersOutputWithContext(context.Background())
}

func (i InputWindowsParametersArgs) ToInputWindowsParametersOutputWithContext(ctx context.Context) InputWindowsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputWindowsParametersOutput)
}

func (i InputWindowsParametersArgs) ToInputWindowsParametersPtrOutput() InputWindowsParametersPtrOutput {
	return i.ToInputWindowsParametersPtrOutputWithContext(context.Background())
}

func (i InputWindowsParametersArgs) ToInputWindowsParametersPtrOutputWithContext(ctx context.Context) InputWindowsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputWindowsParametersOutput).ToInputWindowsParametersPtrOutputWithContext(ctx)
}

// InputWindowsParametersPtrInput is an input type that accepts InputWindowsParametersArgs, InputWindowsParametersPtr and InputWindowsParametersPtrOutput values.
// You can construct a concrete instance of `InputWindowsParametersPtrInput` via:
//
//	        InputWindowsParametersArgs{...}
//
//	or:
//
//	        nil
type InputWindowsParametersPtrInput interface {
	pulumi.Input

	ToInputWindowsParametersPtrOutput() InputWindowsParametersPtrOutput
	ToInputWindowsParametersPtrOutputWithContext(context.Context) InputWindowsParametersPtrOutput
}

type inputWindowsParametersPtrType InputWindowsParametersArgs

func InputWindowsParametersPtr(v *InputWindowsParametersArgs) InputWindowsParametersPtrInput {
	return (*inputWindowsParametersPtrType)(v)
}

func (*inputWindowsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InputWindowsParameters)(nil)).Elem()
}

func (i *inputWindowsParametersPtrType) ToInputWindowsParametersPtrOutput() InputWindowsParametersPtrOutput {
	return i.ToInputWindowsParametersPtrOutputWithContext(context.Background())
}

func (i *inputWindowsParametersPtrType) ToInputWindowsParametersPtrOutputWithContext(ctx context.Context) InputWindowsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputWindowsParametersPtrOutput)
}

// Input properties for patching a Windows machine.
type InputWindowsParametersOutput struct{ *pulumi.OutputState }

func (InputWindowsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputWindowsParameters)(nil)).Elem()
}

func (o InputWindowsParametersOutput) ToInputWindowsParametersOutput() InputWindowsParametersOutput {
	return o
}

func (o InputWindowsParametersOutput) ToInputWindowsParametersOutputWithContext(ctx context.Context) InputWindowsParametersOutput {
	return o
}

func (o InputWindowsParametersOutput) ToInputWindowsParametersPtrOutput() InputWindowsParametersPtrOutput {
	return o.ToInputWindowsParametersPtrOutputWithContext(context.Background())
}

func (o InputWindowsParametersOutput) ToInputWindowsParametersPtrOutputWithContext(ctx context.Context) InputWindowsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InputWindowsParameters) *InputWindowsParameters {
		return &v
	}).(InputWindowsParametersPtrOutput)
}

// Classification category of patches to be patched
func (o InputWindowsParametersOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputWindowsParameters) []string { return v.ClassificationsToInclude }).(pulumi.StringArrayOutput)
}

// Exclude patches which need reboot
func (o InputWindowsParametersOutput) ExcludeKbsRequiringReboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InputWindowsParameters) *bool { return v.ExcludeKbsRequiringReboot }).(pulumi.BoolPtrOutput)
}

// Windows KBID to be excluded for patching.
func (o InputWindowsParametersOutput) KbNumbersToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputWindowsParameters) []string { return v.KbNumbersToExclude }).(pulumi.StringArrayOutput)
}

// Windows KBID to be included for patching.
func (o InputWindowsParametersOutput) KbNumbersToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputWindowsParameters) []string { return v.KbNumbersToInclude }).(pulumi.StringArrayOutput)
}

type InputWindowsParametersPtrOutput struct{ *pulumi.OutputState }

func (InputWindowsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputWindowsParameters)(nil)).Elem()
}

func (o InputWindowsParametersPtrOutput) ToInputWindowsParametersPtrOutput() InputWindowsParametersPtrOutput {
	return o
}

func (o InputWindowsParametersPtrOutput) ToInputWindowsParametersPtrOutputWithContext(ctx context.Context) InputWindowsParametersPtrOutput {
	return o
}

func (o InputWindowsParametersPtrOutput) Elem() InputWindowsParametersOutput {
	return o.ApplyT(func(v *InputWindowsParameters) InputWindowsParameters {
		if v != nil {
			return *v
		}
		var ret InputWindowsParameters
		return ret
	}).(InputWindowsParametersOutput)
}

// Classification category of patches to be patched
func (o InputWindowsParametersPtrOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputWindowsParameters) []string {
		if v == nil {
			return nil
		}
		return v.ClassificationsToInclude
	}).(pulumi.StringArrayOutput)
}

// Exclude patches which need reboot
func (o InputWindowsParametersPtrOutput) ExcludeKbsRequiringReboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InputWindowsParameters) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeKbsRequiringReboot
	}).(pulumi.BoolPtrOutput)
}

// Windows KBID to be excluded for patching.
func (o InputWindowsParametersPtrOutput) KbNumbersToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputWindowsParameters) []string {
		if v == nil {
			return nil
		}
		return v.KbNumbersToExclude
	}).(pulumi.StringArrayOutput)
}

// Windows KBID to be included for patching.
func (o InputWindowsParametersPtrOutput) KbNumbersToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputWindowsParameters) []string {
		if v == nil {
			return nil
		}
		return v.KbNumbersToInclude
	}).(pulumi.StringArrayOutput)
}

// Input properties for patching a Windows machine.
type InputWindowsParametersResponse struct {
	// Classification category of patches to be patched
	ClassificationsToInclude []string `pulumi:"classificationsToInclude"`
	// Exclude patches which need reboot
	ExcludeKbsRequiringReboot *bool `pulumi:"excludeKbsRequiringReboot"`
	// Windows KBID to be excluded for patching.
	KbNumbersToExclude []string `pulumi:"kbNumbersToExclude"`
	// Windows KBID to be included for patching.
	KbNumbersToInclude []string `pulumi:"kbNumbersToInclude"`
}

// Input properties for patching a Windows machine.
type InputWindowsParametersResponseOutput struct{ *pulumi.OutputState }

func (InputWindowsParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputWindowsParametersResponse)(nil)).Elem()
}

func (o InputWindowsParametersResponseOutput) ToInputWindowsParametersResponseOutput() InputWindowsParametersResponseOutput {
	return o
}

func (o InputWindowsParametersResponseOutput) ToInputWindowsParametersResponseOutputWithContext(ctx context.Context) InputWindowsParametersResponseOutput {
	return o
}

// Classification category of patches to be patched
func (o InputWindowsParametersResponseOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputWindowsParametersResponse) []string { return v.ClassificationsToInclude }).(pulumi.StringArrayOutput)
}

// Exclude patches which need reboot
func (o InputWindowsParametersResponseOutput) ExcludeKbsRequiringReboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InputWindowsParametersResponse) *bool { return v.ExcludeKbsRequiringReboot }).(pulumi.BoolPtrOutput)
}

// Windows KBID to be excluded for patching.
func (o InputWindowsParametersResponseOutput) KbNumbersToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputWindowsParametersResponse) []string { return v.KbNumbersToExclude }).(pulumi.StringArrayOutput)
}

// Windows KBID to be included for patching.
func (o InputWindowsParametersResponseOutput) KbNumbersToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InputWindowsParametersResponse) []string { return v.KbNumbersToInclude }).(pulumi.StringArrayOutput)
}

type InputWindowsParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (InputWindowsParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputWindowsParametersResponse)(nil)).Elem()
}

func (o InputWindowsParametersResponsePtrOutput) ToInputWindowsParametersResponsePtrOutput() InputWindowsParametersResponsePtrOutput {
	return o
}

func (o InputWindowsParametersResponsePtrOutput) ToInputWindowsParametersResponsePtrOutputWithContext(ctx context.Context) InputWindowsParametersResponsePtrOutput {
	return o
}

func (o InputWindowsParametersResponsePtrOutput) Elem() InputWindowsParametersResponseOutput {
	return o.ApplyT(func(v *InputWindowsParametersResponse) InputWindowsParametersResponse {
		if v != nil {
			return *v
		}
		var ret InputWindowsParametersResponse
		return ret
	}).(InputWindowsParametersResponseOutput)
}

// Classification category of patches to be patched
func (o InputWindowsParametersResponsePtrOutput) ClassificationsToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputWindowsParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.ClassificationsToInclude
	}).(pulumi.StringArrayOutput)
}

// Exclude patches which need reboot
func (o InputWindowsParametersResponsePtrOutput) ExcludeKbsRequiringReboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InputWindowsParametersResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeKbsRequiringReboot
	}).(pulumi.BoolPtrOutput)
}

// Windows KBID to be excluded for patching.
func (o InputWindowsParametersResponsePtrOutput) KbNumbersToExclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputWindowsParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.KbNumbersToExclude
	}).(pulumi.StringArrayOutput)
}

// Windows KBID to be included for patching.
func (o InputWindowsParametersResponsePtrOutput) KbNumbersToInclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InputWindowsParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.KbNumbersToInclude
	}).(pulumi.StringArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Tag filter information for the VM.
type TagSettingsProperties struct {
	// Filter VMs by Any or All specified tags.
	FilterOperator *TagOperators `pulumi:"filterOperator"`
	// Dictionary of tags with its list of values.
	Tags map[string][]string `pulumi:"tags"`
}

// TagSettingsPropertiesInput is an input type that accepts TagSettingsPropertiesArgs and TagSettingsPropertiesOutput values.
// You can construct a concrete instance of `TagSettingsPropertiesInput` via:
//
//	TagSettingsPropertiesArgs{...}
type TagSettingsPropertiesInput interface {
	pulumi.Input

	ToTagSettingsPropertiesOutput() TagSettingsPropertiesOutput
	ToTagSettingsPropertiesOutputWithContext(context.Context) TagSettingsPropertiesOutput
}

// Tag filter information for the VM.
type TagSettingsPropertiesArgs struct {
	// Filter VMs by Any or All specified tags.
	FilterOperator TagOperatorsPtrInput `pulumi:"filterOperator"`
	// Dictionary of tags with its list of values.
	Tags pulumi.StringArrayMapInput `pulumi:"tags"`
}

func (TagSettingsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagSettingsProperties)(nil)).Elem()
}

func (i TagSettingsPropertiesArgs) ToTagSettingsPropertiesOutput() TagSettingsPropertiesOutput {
	return i.ToTagSettingsPropertiesOutputWithContext(context.Background())
}

func (i TagSettingsPropertiesArgs) ToTagSettingsPropertiesOutputWithContext(ctx context.Context) TagSettingsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagSettingsPropertiesOutput)
}

func (i TagSettingsPropertiesArgs) ToTagSettingsPropertiesPtrOutput() TagSettingsPropertiesPtrOutput {
	return i.ToTagSettingsPropertiesPtrOutputWithContext(context.Background())
}

func (i TagSettingsPropertiesArgs) ToTagSettingsPropertiesPtrOutputWithContext(ctx context.Context) TagSettingsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagSettingsPropertiesOutput).ToTagSettingsPropertiesPtrOutputWithContext(ctx)
}

// TagSettingsPropertiesPtrInput is an input type that accepts TagSettingsPropertiesArgs, TagSettingsPropertiesPtr and TagSettingsPropertiesPtrOutput values.
// You can construct a concrete instance of `TagSettingsPropertiesPtrInput` via:
//
//	        TagSettingsPropertiesArgs{...}
//
//	or:
//
//	        nil
type TagSettingsPropertiesPtrInput interface {
	pulumi.Input

	ToTagSettingsPropertiesPtrOutput() TagSettingsPropertiesPtrOutput
	ToTagSettingsPropertiesPtrOutputWithContext(context.Context) TagSettingsPropertiesPtrOutput
}

type tagSettingsPropertiesPtrType TagSettingsPropertiesArgs

func TagSettingsPropertiesPtr(v *TagSettingsPropertiesArgs) TagSettingsPropertiesPtrInput {
	return (*tagSettingsPropertiesPtrType)(v)
}

func (*tagSettingsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagSettingsProperties)(nil)).Elem()
}

func (i *tagSettingsPropertiesPtrType) ToTagSettingsPropertiesPtrOutput() TagSettingsPropertiesPtrOutput {
	return i.ToTagSettingsPropertiesPtrOutputWithContext(context.Background())
}

func (i *tagSettingsPropertiesPtrType) ToTagSettingsPropertiesPtrOutputWithContext(ctx context.Context) TagSettingsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagSettingsPropertiesPtrOutput)
}

// Tag filter information for the VM.
type TagSettingsPropertiesOutput struct{ *pulumi.OutputState }

func (TagSettingsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagSettingsProperties)(nil)).Elem()
}

func (o TagSettingsPropertiesOutput) ToTagSettingsPropertiesOutput() TagSettingsPropertiesOutput {
	return o
}

func (o TagSettingsPropertiesOutput) ToTagSettingsPropertiesOutputWithContext(ctx context.Context) TagSettingsPropertiesOutput {
	return o
}

func (o TagSettingsPropertiesOutput) ToTagSettingsPropertiesPtrOutput() TagSettingsPropertiesPtrOutput {
	return o.ToTagSettingsPropertiesPtrOutputWithContext(context.Background())
}

func (o TagSettingsPropertiesOutput) ToTagSettingsPropertiesPtrOutputWithContext(ctx context.Context) TagSettingsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagSettingsProperties) *TagSettingsProperties {
		return &v
	}).(TagSettingsPropertiesPtrOutput)
}

// Filter VMs by Any or All specified tags.
func (o TagSettingsPropertiesOutput) FilterOperator() TagOperatorsPtrOutput {
	return o.ApplyT(func(v TagSettingsProperties) *TagOperators { return v.FilterOperator }).(TagOperatorsPtrOutput)
}

// Dictionary of tags with its list of values.
func (o TagSettingsPropertiesOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v TagSettingsProperties) map[string][]string { return v.Tags }).(pulumi.StringArrayMapOutput)
}

type TagSettingsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TagSettingsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagSettingsProperties)(nil)).Elem()
}

func (o TagSettingsPropertiesPtrOutput) ToTagSettingsPropertiesPtrOutput() TagSettingsPropertiesPtrOutput {
	return o
}

func (o TagSettingsPropertiesPtrOutput) ToTagSettingsPropertiesPtrOutputWithContext(ctx context.Context) TagSettingsPropertiesPtrOutput {
	return o
}

func (o TagSettingsPropertiesPtrOutput) Elem() TagSettingsPropertiesOutput {
	return o.ApplyT(func(v *TagSettingsProperties) TagSettingsProperties {
		if v != nil {
			return *v
		}
		var ret TagSettingsProperties
		return ret
	}).(TagSettingsPropertiesOutput)
}

// Filter VMs by Any or All specified tags.
func (o TagSettingsPropertiesPtrOutput) FilterOperator() TagOperatorsPtrOutput {
	return o.ApplyT(func(v *TagSettingsProperties) *TagOperators {
		if v == nil {
			return nil
		}
		return v.FilterOperator
	}).(TagOperatorsPtrOutput)
}

// Dictionary of tags with its list of values.
func (o TagSettingsPropertiesPtrOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *TagSettingsProperties) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayMapOutput)
}

// Tag filter information for the VM.
type TagSettingsPropertiesResponse struct {
	// Filter VMs by Any or All specified tags.
	FilterOperator *string `pulumi:"filterOperator"`
	// Dictionary of tags with its list of values.
	Tags map[string][]string `pulumi:"tags"`
}

// Tag filter information for the VM.
type TagSettingsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TagSettingsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagSettingsPropertiesResponse)(nil)).Elem()
}

func (o TagSettingsPropertiesResponseOutput) ToTagSettingsPropertiesResponseOutput() TagSettingsPropertiesResponseOutput {
	return o
}

func (o TagSettingsPropertiesResponseOutput) ToTagSettingsPropertiesResponseOutputWithContext(ctx context.Context) TagSettingsPropertiesResponseOutput {
	return o
}

// Filter VMs by Any or All specified tags.
func (o TagSettingsPropertiesResponseOutput) FilterOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagSettingsPropertiesResponse) *string { return v.FilterOperator }).(pulumi.StringPtrOutput)
}

// Dictionary of tags with its list of values.
func (o TagSettingsPropertiesResponseOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v TagSettingsPropertiesResponse) map[string][]string { return v.Tags }).(pulumi.StringArrayMapOutput)
}

type TagSettingsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TagSettingsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagSettingsPropertiesResponse)(nil)).Elem()
}

func (o TagSettingsPropertiesResponsePtrOutput) ToTagSettingsPropertiesResponsePtrOutput() TagSettingsPropertiesResponsePtrOutput {
	return o
}

func (o TagSettingsPropertiesResponsePtrOutput) ToTagSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) TagSettingsPropertiesResponsePtrOutput {
	return o
}

func (o TagSettingsPropertiesResponsePtrOutput) Elem() TagSettingsPropertiesResponseOutput {
	return o.ApplyT(func(v *TagSettingsPropertiesResponse) TagSettingsPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret TagSettingsPropertiesResponse
		return ret
	}).(TagSettingsPropertiesResponseOutput)
}

// Filter VMs by Any or All specified tags.
func (o TagSettingsPropertiesResponsePtrOutput) FilterOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FilterOperator
	}).(pulumi.StringPtrOutput)
}

// Dictionary of tags with its list of values.
func (o TagSettingsPropertiesResponsePtrOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *TagSettingsPropertiesResponse) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayMapOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfigurationAssignmentFilterPropertiesOutput{})
	pulumi.RegisterOutputType(ConfigurationAssignmentFilterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConfigurationAssignmentFilterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationAssignmentFilterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(InputLinuxParametersOutput{})
	pulumi.RegisterOutputType(InputLinuxParametersPtrOutput{})
	pulumi.RegisterOutputType(InputLinuxParametersResponseOutput{})
	pulumi.RegisterOutputType(InputLinuxParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(InputPatchConfigurationOutput{})
	pulumi.RegisterOutputType(InputPatchConfigurationPtrOutput{})
	pulumi.RegisterOutputType(InputPatchConfigurationResponseOutput{})
	pulumi.RegisterOutputType(InputPatchConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(InputWindowsParametersOutput{})
	pulumi.RegisterOutputType(InputWindowsParametersPtrOutput{})
	pulumi.RegisterOutputType(InputWindowsParametersResponseOutput{})
	pulumi.RegisterOutputType(InputWindowsParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TagSettingsPropertiesOutput{})
	pulumi.RegisterOutputType(TagSettingsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TagSettingsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TagSettingsPropertiesResponsePtrOutput{})
}
