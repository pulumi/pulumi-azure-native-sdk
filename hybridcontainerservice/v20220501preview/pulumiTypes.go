// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AAD Profile specifies attributes for Azure Active Directory integration.
type AADProfile struct {
	// The list of AAD group object IDs that will have admin role of the cluster.
	AdminGroupObjectIDs []string `pulumi:"adminGroupObjectIDs"`
	// The client AAD application ID.
	ClientAppID *string `pulumi:"clientAppID"`
	// Whether to enable Azure RBAC for Kubernetes authorization.
	EnableAzureRbac *bool `pulumi:"enableAzureRbac"`
	// Whether to enable managed AAD.
	Managed *bool `pulumi:"managed"`
	// The server AAD application ID.
	ServerAppID *string `pulumi:"serverAppID"`
	// The server AAD application secret.
	ServerAppSecret *string `pulumi:"serverAppSecret"`
	// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
	TenantID *string `pulumi:"tenantID"`
}

// AADProfileInput is an input type that accepts AADProfileArgs and AADProfileOutput values.
// You can construct a concrete instance of `AADProfileInput` via:
//
//	AADProfileArgs{...}
type AADProfileInput interface {
	pulumi.Input

	ToAADProfileOutput() AADProfileOutput
	ToAADProfileOutputWithContext(context.Context) AADProfileOutput
}

// AAD Profile specifies attributes for Azure Active Directory integration.
type AADProfileArgs struct {
	// The list of AAD group object IDs that will have admin role of the cluster.
	AdminGroupObjectIDs pulumi.StringArrayInput `pulumi:"adminGroupObjectIDs"`
	// The client AAD application ID.
	ClientAppID pulumi.StringPtrInput `pulumi:"clientAppID"`
	// Whether to enable Azure RBAC for Kubernetes authorization.
	EnableAzureRbac pulumi.BoolPtrInput `pulumi:"enableAzureRbac"`
	// Whether to enable managed AAD.
	Managed pulumi.BoolPtrInput `pulumi:"managed"`
	// The server AAD application ID.
	ServerAppID pulumi.StringPtrInput `pulumi:"serverAppID"`
	// The server AAD application secret.
	ServerAppSecret pulumi.StringPtrInput `pulumi:"serverAppSecret"`
	// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
	TenantID pulumi.StringPtrInput `pulumi:"tenantID"`
}

func (AADProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AADProfile)(nil)).Elem()
}

func (i AADProfileArgs) ToAADProfileOutput() AADProfileOutput {
	return i.ToAADProfileOutputWithContext(context.Background())
}

func (i AADProfileArgs) ToAADProfileOutputWithContext(ctx context.Context) AADProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AADProfileOutput)
}

func (i AADProfileArgs) ToAADProfilePtrOutput() AADProfilePtrOutput {
	return i.ToAADProfilePtrOutputWithContext(context.Background())
}

func (i AADProfileArgs) ToAADProfilePtrOutputWithContext(ctx context.Context) AADProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AADProfileOutput).ToAADProfilePtrOutputWithContext(ctx)
}

// AADProfilePtrInput is an input type that accepts AADProfileArgs, AADProfilePtr and AADProfilePtrOutput values.
// You can construct a concrete instance of `AADProfilePtrInput` via:
//
//	        AADProfileArgs{...}
//
//	or:
//
//	        nil
type AADProfilePtrInput interface {
	pulumi.Input

	ToAADProfilePtrOutput() AADProfilePtrOutput
	ToAADProfilePtrOutputWithContext(context.Context) AADProfilePtrOutput
}

type aadprofilePtrType AADProfileArgs

func AADProfilePtr(v *AADProfileArgs) AADProfilePtrInput {
	return (*aadprofilePtrType)(v)
}

func (*aadprofilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AADProfile)(nil)).Elem()
}

func (i *aadprofilePtrType) ToAADProfilePtrOutput() AADProfilePtrOutput {
	return i.ToAADProfilePtrOutputWithContext(context.Background())
}

func (i *aadprofilePtrType) ToAADProfilePtrOutputWithContext(ctx context.Context) AADProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AADProfilePtrOutput)
}

// AAD Profile specifies attributes for Azure Active Directory integration.
type AADProfileOutput struct{ *pulumi.OutputState }

func (AADProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AADProfile)(nil)).Elem()
}

func (o AADProfileOutput) ToAADProfileOutput() AADProfileOutput {
	return o
}

func (o AADProfileOutput) ToAADProfileOutputWithContext(ctx context.Context) AADProfileOutput {
	return o
}

func (o AADProfileOutput) ToAADProfilePtrOutput() AADProfilePtrOutput {
	return o.ToAADProfilePtrOutputWithContext(context.Background())
}

func (o AADProfileOutput) ToAADProfilePtrOutputWithContext(ctx context.Context) AADProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AADProfile) *AADProfile {
		return &v
	}).(AADProfilePtrOutput)
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o AADProfileOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AADProfile) []string { return v.AdminGroupObjectIDs }).(pulumi.StringArrayOutput)
}

// The client AAD application ID.
func (o AADProfileOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADProfile) *string { return v.ClientAppID }).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o AADProfileOutput) EnableAzureRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AADProfile) *bool { return v.EnableAzureRbac }).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o AADProfileOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AADProfile) *bool { return v.Managed }).(pulumi.BoolPtrOutput)
}

// The server AAD application ID.
func (o AADProfileOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADProfile) *string { return v.ServerAppID }).(pulumi.StringPtrOutput)
}

// The server AAD application secret.
func (o AADProfileOutput) ServerAppSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADProfile) *string { return v.ServerAppSecret }).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o AADProfileOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADProfile) *string { return v.TenantID }).(pulumi.StringPtrOutput)
}

type AADProfilePtrOutput struct{ *pulumi.OutputState }

func (AADProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AADProfile)(nil)).Elem()
}

func (o AADProfilePtrOutput) ToAADProfilePtrOutput() AADProfilePtrOutput {
	return o
}

func (o AADProfilePtrOutput) ToAADProfilePtrOutputWithContext(ctx context.Context) AADProfilePtrOutput {
	return o
}

func (o AADProfilePtrOutput) Elem() AADProfileOutput {
	return o.ApplyT(func(v *AADProfile) AADProfile {
		if v != nil {
			return *v
		}
		var ret AADProfile
		return ret
	}).(AADProfileOutput)
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o AADProfilePtrOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AADProfile) []string {
		if v == nil {
			return nil
		}
		return v.AdminGroupObjectIDs
	}).(pulumi.StringArrayOutput)
}

// The client AAD application ID.
func (o AADProfilePtrOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AADProfile) *string {
		if v == nil {
			return nil
		}
		return v.ClientAppID
	}).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o AADProfilePtrOutput) EnableAzureRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AADProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAzureRbac
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o AADProfilePtrOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AADProfile) *bool {
		if v == nil {
			return nil
		}
		return v.Managed
	}).(pulumi.BoolPtrOutput)
}

// The server AAD application ID.
func (o AADProfilePtrOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AADProfile) *string {
		if v == nil {
			return nil
		}
		return v.ServerAppID
	}).(pulumi.StringPtrOutput)
}

// The server AAD application secret.
func (o AADProfilePtrOutput) ServerAppSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AADProfile) *string {
		if v == nil {
			return nil
		}
		return v.ServerAppSecret
	}).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o AADProfilePtrOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AADProfile) *string {
		if v == nil {
			return nil
		}
		return v.TenantID
	}).(pulumi.StringPtrOutput)
}

// AAD Profile specifies attributes for Azure Active Directory integration.
type AADProfileResponseResponse struct {
	// The list of AAD group object IDs that will have admin role of the cluster.
	AdminGroupObjectIDs []string `pulumi:"adminGroupObjectIDs"`
	// The client AAD application ID.
	ClientAppID *string `pulumi:"clientAppID"`
	// Whether to enable Azure RBAC for Kubernetes authorization.
	EnableAzureRbac *bool `pulumi:"enableAzureRbac"`
	// Whether to enable managed AAD.
	Managed *bool `pulumi:"managed"`
	// The server AAD application ID.
	ServerAppID *string `pulumi:"serverAppID"`
	// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
	TenantID *string `pulumi:"tenantID"`
}

// AAD Profile specifies attributes for Azure Active Directory integration.
type AADProfileResponseResponseOutput struct{ *pulumi.OutputState }

func (AADProfileResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AADProfileResponseResponse)(nil)).Elem()
}

func (o AADProfileResponseResponseOutput) ToAADProfileResponseResponseOutput() AADProfileResponseResponseOutput {
	return o
}

func (o AADProfileResponseResponseOutput) ToAADProfileResponseResponseOutputWithContext(ctx context.Context) AADProfileResponseResponseOutput {
	return o
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o AADProfileResponseResponseOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AADProfileResponseResponse) []string { return v.AdminGroupObjectIDs }).(pulumi.StringArrayOutput)
}

// The client AAD application ID.
func (o AADProfileResponseResponseOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADProfileResponseResponse) *string { return v.ClientAppID }).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o AADProfileResponseResponseOutput) EnableAzureRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AADProfileResponseResponse) *bool { return v.EnableAzureRbac }).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o AADProfileResponseResponseOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AADProfileResponseResponse) *bool { return v.Managed }).(pulumi.BoolPtrOutput)
}

// The server AAD application ID.
func (o AADProfileResponseResponseOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADProfileResponseResponse) *string { return v.ServerAppID }).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o AADProfileResponseResponseOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADProfileResponseResponse) *string { return v.TenantID }).(pulumi.StringPtrOutput)
}

type AADProfileResponseResponsePtrOutput struct{ *pulumi.OutputState }

func (AADProfileResponseResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AADProfileResponseResponse)(nil)).Elem()
}

func (o AADProfileResponseResponsePtrOutput) ToAADProfileResponseResponsePtrOutput() AADProfileResponseResponsePtrOutput {
	return o
}

func (o AADProfileResponseResponsePtrOutput) ToAADProfileResponseResponsePtrOutputWithContext(ctx context.Context) AADProfileResponseResponsePtrOutput {
	return o
}

func (o AADProfileResponseResponsePtrOutput) Elem() AADProfileResponseResponseOutput {
	return o.ApplyT(func(v *AADProfileResponseResponse) AADProfileResponseResponse {
		if v != nil {
			return *v
		}
		var ret AADProfileResponseResponse
		return ret
	}).(AADProfileResponseResponseOutput)
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o AADProfileResponseResponsePtrOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AADProfileResponseResponse) []string {
		if v == nil {
			return nil
		}
		return v.AdminGroupObjectIDs
	}).(pulumi.StringArrayOutput)
}

// The client AAD application ID.
func (o AADProfileResponseResponsePtrOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AADProfileResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientAppID
	}).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o AADProfileResponseResponsePtrOutput) EnableAzureRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AADProfileResponseResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAzureRbac
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o AADProfileResponseResponsePtrOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AADProfileResponseResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Managed
	}).(pulumi.BoolPtrOutput)
}

// The server AAD application ID.
func (o AADProfileResponseResponsePtrOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AADProfileResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerAppID
	}).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o AADProfileResponseResponsePtrOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AADProfileResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantID
	}).(pulumi.StringPtrOutput)
}

// Addon configurations
type AddonProfiles struct {
	// Config - Key-value pairs for configuring an add-on.
	Config map[string]string `pulumi:"config"`
	// Enabled - Whether the add-on is enabled or not.
	Enabled *bool `pulumi:"enabled"`
}

// AddonProfilesInput is an input type that accepts AddonProfilesArgs and AddonProfilesOutput values.
// You can construct a concrete instance of `AddonProfilesInput` via:
//
//	AddonProfilesArgs{...}
type AddonProfilesInput interface {
	pulumi.Input

	ToAddonProfilesOutput() AddonProfilesOutput
	ToAddonProfilesOutputWithContext(context.Context) AddonProfilesOutput
}

// Addon configurations
type AddonProfilesArgs struct {
	// Config - Key-value pairs for configuring an add-on.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Enabled - Whether the add-on is enabled or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AddonProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonProfiles)(nil)).Elem()
}

func (i AddonProfilesArgs) ToAddonProfilesOutput() AddonProfilesOutput {
	return i.ToAddonProfilesOutputWithContext(context.Background())
}

func (i AddonProfilesArgs) ToAddonProfilesOutputWithContext(ctx context.Context) AddonProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonProfilesOutput)
}

// AddonProfilesMapInput is an input type that accepts AddonProfilesMap and AddonProfilesMapOutput values.
// You can construct a concrete instance of `AddonProfilesMapInput` via:
//
//	AddonProfilesMap{ "key": AddonProfilesArgs{...} }
type AddonProfilesMapInput interface {
	pulumi.Input

	ToAddonProfilesMapOutput() AddonProfilesMapOutput
	ToAddonProfilesMapOutputWithContext(context.Context) AddonProfilesMapOutput
}

type AddonProfilesMap map[string]AddonProfilesInput

func (AddonProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AddonProfiles)(nil)).Elem()
}

func (i AddonProfilesMap) ToAddonProfilesMapOutput() AddonProfilesMapOutput {
	return i.ToAddonProfilesMapOutputWithContext(context.Background())
}

func (i AddonProfilesMap) ToAddonProfilesMapOutputWithContext(ctx context.Context) AddonProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonProfilesMapOutput)
}

// Addon configurations
type AddonProfilesOutput struct{ *pulumi.OutputState }

func (AddonProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonProfiles)(nil)).Elem()
}

func (o AddonProfilesOutput) ToAddonProfilesOutput() AddonProfilesOutput {
	return o
}

func (o AddonProfilesOutput) ToAddonProfilesOutputWithContext(ctx context.Context) AddonProfilesOutput {
	return o
}

// Config - Key-value pairs for configuring an add-on.
func (o AddonProfilesOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonProfiles) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Enabled - Whether the add-on is enabled or not.
func (o AddonProfilesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AddonProfiles) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AddonProfilesMapOutput struct{ *pulumi.OutputState }

func (AddonProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AddonProfiles)(nil)).Elem()
}

func (o AddonProfilesMapOutput) ToAddonProfilesMapOutput() AddonProfilesMapOutput {
	return o
}

func (o AddonProfilesMapOutput) ToAddonProfilesMapOutputWithContext(ctx context.Context) AddonProfilesMapOutput {
	return o
}

func (o AddonProfilesMapOutput) MapIndex(k pulumi.StringInput) AddonProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AddonProfiles {
		return vs[0].(map[string]AddonProfiles)[vs[1].(string)]
	}).(AddonProfilesOutput)
}

// Addon configurations
type AddonProfilesResponse struct {
	// Config - Key-value pairs for configuring an add-on.
	Config map[string]string `pulumi:"config"`
	// Enabled - Whether the add-on is enabled or not.
	Enabled *bool `pulumi:"enabled"`
}

// Addon configurations
type AddonProfilesResponseOutput struct{ *pulumi.OutputState }

func (AddonProfilesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonProfilesResponse)(nil)).Elem()
}

func (o AddonProfilesResponseOutput) ToAddonProfilesResponseOutput() AddonProfilesResponseOutput {
	return o
}

func (o AddonProfilesResponseOutput) ToAddonProfilesResponseOutputWithContext(ctx context.Context) AddonProfilesResponseOutput {
	return o
}

// Config - Key-value pairs for configuring an add-on.
func (o AddonProfilesResponseOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonProfilesResponse) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Enabled - Whether the add-on is enabled or not.
func (o AddonProfilesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AddonProfilesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AddonProfilesResponseMapOutput struct{ *pulumi.OutputState }

func (AddonProfilesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AddonProfilesResponse)(nil)).Elem()
}

func (o AddonProfilesResponseMapOutput) ToAddonProfilesResponseMapOutput() AddonProfilesResponseMapOutput {
	return o
}

func (o AddonProfilesResponseMapOutput) ToAddonProfilesResponseMapOutputWithContext(ctx context.Context) AddonProfilesResponseMapOutput {
	return o
}

func (o AddonProfilesResponseMapOutput) MapIndex(k pulumi.StringInput) AddonProfilesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AddonProfilesResponse {
		return vs[0].(map[string]AddonProfilesResponse)[vs[1].(string)]
	}).(AddonProfilesResponseOutput)
}

// Status of the addon
type AddonStatusResponse struct {
	// ErrorMessage will be set in the event that there is a terminal problem reconciling the AddOn and will contain a more verbose string suitable for logging and human consumption.
	ErrorMessage *string `pulumi:"errorMessage"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase *string `pulumi:"phase"`
	Ready *bool   `pulumi:"ready"`
}

// Status of the addon
type AddonStatusResponseOutput struct{ *pulumi.OutputState }

func (AddonStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonStatusResponse)(nil)).Elem()
}

func (o AddonStatusResponseOutput) ToAddonStatusResponseOutput() AddonStatusResponseOutput {
	return o
}

func (o AddonStatusResponseOutput) ToAddonStatusResponseOutputWithContext(ctx context.Context) AddonStatusResponseOutput {
	return o
}

// ErrorMessage will be set in the event that there is a terminal problem reconciling the AddOn and will contain a more verbose string suitable for logging and human consumption.
func (o AddonStatusResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonStatusResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o AddonStatusResponseOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonStatusResponse) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

func (o AddonStatusResponseOutput) Ready() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AddonStatusResponse) *bool { return v.Ready }).(pulumi.BoolPtrOutput)
}

type AddonStatusResponseMapOutput struct{ *pulumi.OutputState }

func (AddonStatusResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AddonStatusResponse)(nil)).Elem()
}

func (o AddonStatusResponseMapOutput) ToAddonStatusResponseMapOutput() AddonStatusResponseMapOutput {
	return o
}

func (o AddonStatusResponseMapOutput) ToAddonStatusResponseMapOutputWithContext(ctx context.Context) AddonStatusResponseMapOutput {
	return o
}

func (o AddonStatusResponseMapOutput) MapIndex(k pulumi.StringInput) AddonStatusResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AddonStatusResponse {
		return vs[0].(map[string]AddonStatusResponse)[vs[1].(string)]
	}).(AddonStatusResponseOutput)
}

type AgentPoolExtendedLocation struct {
	// The extended location name.
	Name *string `pulumi:"name"`
	// The extended location type.
	Type *string `pulumi:"type"`
}

// AgentPoolExtendedLocationInput is an input type that accepts AgentPoolExtendedLocationArgs and AgentPoolExtendedLocationOutput values.
// You can construct a concrete instance of `AgentPoolExtendedLocationInput` via:
//
//	AgentPoolExtendedLocationArgs{...}
type AgentPoolExtendedLocationInput interface {
	pulumi.Input

	ToAgentPoolExtendedLocationOutput() AgentPoolExtendedLocationOutput
	ToAgentPoolExtendedLocationOutputWithContext(context.Context) AgentPoolExtendedLocationOutput
}

type AgentPoolExtendedLocationArgs struct {
	// The extended location name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The extended location type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AgentPoolExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolExtendedLocation)(nil)).Elem()
}

func (i AgentPoolExtendedLocationArgs) ToAgentPoolExtendedLocationOutput() AgentPoolExtendedLocationOutput {
	return i.ToAgentPoolExtendedLocationOutputWithContext(context.Background())
}

func (i AgentPoolExtendedLocationArgs) ToAgentPoolExtendedLocationOutputWithContext(ctx context.Context) AgentPoolExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolExtendedLocationOutput)
}

func (i AgentPoolExtendedLocationArgs) ToAgentPoolExtendedLocationPtrOutput() AgentPoolExtendedLocationPtrOutput {
	return i.ToAgentPoolExtendedLocationPtrOutputWithContext(context.Background())
}

func (i AgentPoolExtendedLocationArgs) ToAgentPoolExtendedLocationPtrOutputWithContext(ctx context.Context) AgentPoolExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolExtendedLocationOutput).ToAgentPoolExtendedLocationPtrOutputWithContext(ctx)
}

// AgentPoolExtendedLocationPtrInput is an input type that accepts AgentPoolExtendedLocationArgs, AgentPoolExtendedLocationPtr and AgentPoolExtendedLocationPtrOutput values.
// You can construct a concrete instance of `AgentPoolExtendedLocationPtrInput` via:
//
//	        AgentPoolExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type AgentPoolExtendedLocationPtrInput interface {
	pulumi.Input

	ToAgentPoolExtendedLocationPtrOutput() AgentPoolExtendedLocationPtrOutput
	ToAgentPoolExtendedLocationPtrOutputWithContext(context.Context) AgentPoolExtendedLocationPtrOutput
}

type agentPoolExtendedLocationPtrType AgentPoolExtendedLocationArgs

func AgentPoolExtendedLocationPtr(v *AgentPoolExtendedLocationArgs) AgentPoolExtendedLocationPtrInput {
	return (*agentPoolExtendedLocationPtrType)(v)
}

func (*agentPoolExtendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolExtendedLocation)(nil)).Elem()
}

func (i *agentPoolExtendedLocationPtrType) ToAgentPoolExtendedLocationPtrOutput() AgentPoolExtendedLocationPtrOutput {
	return i.ToAgentPoolExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *agentPoolExtendedLocationPtrType) ToAgentPoolExtendedLocationPtrOutputWithContext(ctx context.Context) AgentPoolExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolExtendedLocationPtrOutput)
}

type AgentPoolExtendedLocationOutput struct{ *pulumi.OutputState }

func (AgentPoolExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolExtendedLocation)(nil)).Elem()
}

func (o AgentPoolExtendedLocationOutput) ToAgentPoolExtendedLocationOutput() AgentPoolExtendedLocationOutput {
	return o
}

func (o AgentPoolExtendedLocationOutput) ToAgentPoolExtendedLocationOutputWithContext(ctx context.Context) AgentPoolExtendedLocationOutput {
	return o
}

func (o AgentPoolExtendedLocationOutput) ToAgentPoolExtendedLocationPtrOutput() AgentPoolExtendedLocationPtrOutput {
	return o.ToAgentPoolExtendedLocationPtrOutputWithContext(context.Background())
}

func (o AgentPoolExtendedLocationOutput) ToAgentPoolExtendedLocationPtrOutputWithContext(ctx context.Context) AgentPoolExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolExtendedLocation) *AgentPoolExtendedLocation {
		return &v
	}).(AgentPoolExtendedLocationPtrOutput)
}

// The extended location name.
func (o AgentPoolExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o AgentPoolExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AgentPoolExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolExtendedLocation)(nil)).Elem()
}

func (o AgentPoolExtendedLocationPtrOutput) ToAgentPoolExtendedLocationPtrOutput() AgentPoolExtendedLocationPtrOutput {
	return o
}

func (o AgentPoolExtendedLocationPtrOutput) ToAgentPoolExtendedLocationPtrOutputWithContext(ctx context.Context) AgentPoolExtendedLocationPtrOutput {
	return o
}

func (o AgentPoolExtendedLocationPtrOutput) Elem() AgentPoolExtendedLocationOutput {
	return o.ApplyT(func(v *AgentPoolExtendedLocation) AgentPoolExtendedLocation {
		if v != nil {
			return *v
		}
		var ret AgentPoolExtendedLocation
		return ret
	}).(AgentPoolExtendedLocationOutput)
}

// The extended location name.
func (o AgentPoolExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o AgentPoolExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type AgentPoolProvisioningStatusError struct {
	Code    *string `pulumi:"code"`
	Message *string `pulumi:"message"`
}

// AgentPoolProvisioningStatusErrorInput is an input type that accepts AgentPoolProvisioningStatusErrorArgs and AgentPoolProvisioningStatusErrorOutput values.
// You can construct a concrete instance of `AgentPoolProvisioningStatusErrorInput` via:
//
//	AgentPoolProvisioningStatusErrorArgs{...}
type AgentPoolProvisioningStatusErrorInput interface {
	pulumi.Input

	ToAgentPoolProvisioningStatusErrorOutput() AgentPoolProvisioningStatusErrorOutput
	ToAgentPoolProvisioningStatusErrorOutputWithContext(context.Context) AgentPoolProvisioningStatusErrorOutput
}

type AgentPoolProvisioningStatusErrorArgs struct {
	Code    pulumi.StringPtrInput `pulumi:"code"`
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (AgentPoolProvisioningStatusErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusError)(nil)).Elem()
}

func (i AgentPoolProvisioningStatusErrorArgs) ToAgentPoolProvisioningStatusErrorOutput() AgentPoolProvisioningStatusErrorOutput {
	return i.ToAgentPoolProvisioningStatusErrorOutputWithContext(context.Background())
}

func (i AgentPoolProvisioningStatusErrorArgs) ToAgentPoolProvisioningStatusErrorOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusErrorOutput)
}

func (i AgentPoolProvisioningStatusErrorArgs) ToAgentPoolProvisioningStatusErrorPtrOutput() AgentPoolProvisioningStatusErrorPtrOutput {
	return i.ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(context.Background())
}

func (i AgentPoolProvisioningStatusErrorArgs) ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusErrorOutput).ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(ctx)
}

// AgentPoolProvisioningStatusErrorPtrInput is an input type that accepts AgentPoolProvisioningStatusErrorArgs, AgentPoolProvisioningStatusErrorPtr and AgentPoolProvisioningStatusErrorPtrOutput values.
// You can construct a concrete instance of `AgentPoolProvisioningStatusErrorPtrInput` via:
//
//	        AgentPoolProvisioningStatusErrorArgs{...}
//
//	or:
//
//	        nil
type AgentPoolProvisioningStatusErrorPtrInput interface {
	pulumi.Input

	ToAgentPoolProvisioningStatusErrorPtrOutput() AgentPoolProvisioningStatusErrorPtrOutput
	ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(context.Context) AgentPoolProvisioningStatusErrorPtrOutput
}

type agentPoolProvisioningStatusErrorPtrType AgentPoolProvisioningStatusErrorArgs

func AgentPoolProvisioningStatusErrorPtr(v *AgentPoolProvisioningStatusErrorArgs) AgentPoolProvisioningStatusErrorPtrInput {
	return (*agentPoolProvisioningStatusErrorPtrType)(v)
}

func (*agentPoolProvisioningStatusErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusError)(nil)).Elem()
}

func (i *agentPoolProvisioningStatusErrorPtrType) ToAgentPoolProvisioningStatusErrorPtrOutput() AgentPoolProvisioningStatusErrorPtrOutput {
	return i.ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(context.Background())
}

func (i *agentPoolProvisioningStatusErrorPtrType) ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusErrorPtrOutput)
}

type AgentPoolProvisioningStatusErrorOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusError)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusErrorOutput) ToAgentPoolProvisioningStatusErrorOutput() AgentPoolProvisioningStatusErrorOutput {
	return o
}

func (o AgentPoolProvisioningStatusErrorOutput) ToAgentPoolProvisioningStatusErrorOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusErrorOutput {
	return o
}

func (o AgentPoolProvisioningStatusErrorOutput) ToAgentPoolProvisioningStatusErrorPtrOutput() AgentPoolProvisioningStatusErrorPtrOutput {
	return o.ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(context.Background())
}

func (o AgentPoolProvisioningStatusErrorOutput) ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolProvisioningStatusError) *AgentPoolProvisioningStatusError {
		return &v
	}).(AgentPoolProvisioningStatusErrorPtrOutput)
}

func (o AgentPoolProvisioningStatusErrorOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusError) *string { return v.Code }).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type AgentPoolProvisioningStatusErrorPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusError)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusErrorPtrOutput) ToAgentPoolProvisioningStatusErrorPtrOutput() AgentPoolProvisioningStatusErrorPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusErrorPtrOutput) ToAgentPoolProvisioningStatusErrorPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusErrorPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusErrorPtrOutput) Elem() AgentPoolProvisioningStatusErrorOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusError) AgentPoolProvisioningStatusError {
		if v != nil {
			return *v
		}
		var ret AgentPoolProvisioningStatusError
		return ret
	}).(AgentPoolProvisioningStatusErrorOutput)
}

func (o AgentPoolProvisioningStatusErrorPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusError) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Contains Provisioning errors
type AgentPoolProvisioningStatusProvisioningStatus struct {
	Error       *AgentPoolProvisioningStatusError `pulumi:"error"`
	OperationId *string                           `pulumi:"operationId"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase  *string `pulumi:"phase"`
	Status *string `pulumi:"status"`
}

// AgentPoolProvisioningStatusProvisioningStatusInput is an input type that accepts AgentPoolProvisioningStatusProvisioningStatusArgs and AgentPoolProvisioningStatusProvisioningStatusOutput values.
// You can construct a concrete instance of `AgentPoolProvisioningStatusProvisioningStatusInput` via:
//
//	AgentPoolProvisioningStatusProvisioningStatusArgs{...}
type AgentPoolProvisioningStatusProvisioningStatusInput interface {
	pulumi.Input

	ToAgentPoolProvisioningStatusProvisioningStatusOutput() AgentPoolProvisioningStatusProvisioningStatusOutput
	ToAgentPoolProvisioningStatusProvisioningStatusOutputWithContext(context.Context) AgentPoolProvisioningStatusProvisioningStatusOutput
}

// Contains Provisioning errors
type AgentPoolProvisioningStatusProvisioningStatusArgs struct {
	Error       AgentPoolProvisioningStatusErrorPtrInput `pulumi:"error"`
	OperationId pulumi.StringPtrInput                    `pulumi:"operationId"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase  pulumi.StringPtrInput `pulumi:"phase"`
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (AgentPoolProvisioningStatusProvisioningStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusProvisioningStatus)(nil)).Elem()
}

func (i AgentPoolProvisioningStatusProvisioningStatusArgs) ToAgentPoolProvisioningStatusProvisioningStatusOutput() AgentPoolProvisioningStatusProvisioningStatusOutput {
	return i.ToAgentPoolProvisioningStatusProvisioningStatusOutputWithContext(context.Background())
}

func (i AgentPoolProvisioningStatusProvisioningStatusArgs) ToAgentPoolProvisioningStatusProvisioningStatusOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusProvisioningStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusProvisioningStatusOutput)
}

func (i AgentPoolProvisioningStatusProvisioningStatusArgs) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutput() AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return i.ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(context.Background())
}

func (i AgentPoolProvisioningStatusProvisioningStatusArgs) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusProvisioningStatusOutput).ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(ctx)
}

// AgentPoolProvisioningStatusProvisioningStatusPtrInput is an input type that accepts AgentPoolProvisioningStatusProvisioningStatusArgs, AgentPoolProvisioningStatusProvisioningStatusPtr and AgentPoolProvisioningStatusProvisioningStatusPtrOutput values.
// You can construct a concrete instance of `AgentPoolProvisioningStatusProvisioningStatusPtrInput` via:
//
//	        AgentPoolProvisioningStatusProvisioningStatusArgs{...}
//
//	or:
//
//	        nil
type AgentPoolProvisioningStatusProvisioningStatusPtrInput interface {
	pulumi.Input

	ToAgentPoolProvisioningStatusProvisioningStatusPtrOutput() AgentPoolProvisioningStatusProvisioningStatusPtrOutput
	ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(context.Context) AgentPoolProvisioningStatusProvisioningStatusPtrOutput
}

type agentPoolProvisioningStatusProvisioningStatusPtrType AgentPoolProvisioningStatusProvisioningStatusArgs

func AgentPoolProvisioningStatusProvisioningStatusPtr(v *AgentPoolProvisioningStatusProvisioningStatusArgs) AgentPoolProvisioningStatusProvisioningStatusPtrInput {
	return (*agentPoolProvisioningStatusProvisioningStatusPtrType)(v)
}

func (*agentPoolProvisioningStatusProvisioningStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusProvisioningStatus)(nil)).Elem()
}

func (i *agentPoolProvisioningStatusProvisioningStatusPtrType) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutput() AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return i.ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(context.Background())
}

func (i *agentPoolProvisioningStatusProvisioningStatusPtrType) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusProvisioningStatusPtrOutput)
}

// Contains Provisioning errors
type AgentPoolProvisioningStatusProvisioningStatusOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusProvisioningStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusProvisioningStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusProvisioningStatusOutput) ToAgentPoolProvisioningStatusProvisioningStatusOutput() AgentPoolProvisioningStatusProvisioningStatusOutput {
	return o
}

func (o AgentPoolProvisioningStatusProvisioningStatusOutput) ToAgentPoolProvisioningStatusProvisioningStatusOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusProvisioningStatusOutput {
	return o
}

func (o AgentPoolProvisioningStatusProvisioningStatusOutput) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutput() AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return o.ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(context.Background())
}

func (o AgentPoolProvisioningStatusProvisioningStatusOutput) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolProvisioningStatusProvisioningStatus) *AgentPoolProvisioningStatusProvisioningStatus {
		return &v
	}).(AgentPoolProvisioningStatusProvisioningStatusPtrOutput)
}

func (o AgentPoolProvisioningStatusProvisioningStatusOutput) Error() AgentPoolProvisioningStatusErrorPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusProvisioningStatus) *AgentPoolProvisioningStatusError {
		return v.Error
	}).(AgentPoolProvisioningStatusErrorPtrOutput)
}

func (o AgentPoolProvisioningStatusProvisioningStatusOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusProvisioningStatus) *string { return v.OperationId }).(pulumi.StringPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o AgentPoolProvisioningStatusProvisioningStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusProvisioningStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusProvisioningStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusProvisioningStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type AgentPoolProvisioningStatusProvisioningStatusPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusProvisioningStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusProvisioningStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusProvisioningStatusPtrOutput) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutput() AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusProvisioningStatusPtrOutput) ToAgentPoolProvisioningStatusProvisioningStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusProvisioningStatusPtrOutput) Elem() AgentPoolProvisioningStatusProvisioningStatusOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusProvisioningStatus) AgentPoolProvisioningStatusProvisioningStatus {
		if v != nil {
			return *v
		}
		var ret AgentPoolProvisioningStatusProvisioningStatus
		return ret
	}).(AgentPoolProvisioningStatusProvisioningStatusOutput)
}

func (o AgentPoolProvisioningStatusProvisioningStatusPtrOutput) Error() AgentPoolProvisioningStatusErrorPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusProvisioningStatus) *AgentPoolProvisioningStatusError {
		if v == nil {
			return nil
		}
		return v.Error
	}).(AgentPoolProvisioningStatusErrorPtrOutput)
}

func (o AgentPoolProvisioningStatusProvisioningStatusPtrOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.OperationId
	}).(pulumi.StringPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o AgentPoolProvisioningStatusProvisioningStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusProvisioningStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type AgentPoolProvisioningStatusResponseError struct {
	Code    *string `pulumi:"code"`
	Message *string `pulumi:"message"`
}

type AgentPoolProvisioningStatusResponseErrorOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusResponseErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusResponseError)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusResponseErrorOutput) ToAgentPoolProvisioningStatusResponseErrorOutput() AgentPoolProvisioningStatusResponseErrorOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseErrorOutput) ToAgentPoolProvisioningStatusResponseErrorOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusResponseErrorOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseErrorOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseError) *string { return v.Code }).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusResponseErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type AgentPoolProvisioningStatusResponseErrorPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusResponseErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusResponseError)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusResponseErrorPtrOutput) ToAgentPoolProvisioningStatusResponseErrorPtrOutput() AgentPoolProvisioningStatusResponseErrorPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseErrorPtrOutput) ToAgentPoolProvisioningStatusResponseErrorPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusResponseErrorPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseErrorPtrOutput) Elem() AgentPoolProvisioningStatusResponseErrorOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseError) AgentPoolProvisioningStatusResponseError {
		if v != nil {
			return *v
		}
		var ret AgentPoolProvisioningStatusResponseError
		return ret
	}).(AgentPoolProvisioningStatusResponseErrorOutput)
}

func (o AgentPoolProvisioningStatusResponseErrorPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseError) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusResponseErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Contains Provisioning errors
type AgentPoolProvisioningStatusResponseProvisioningStatus struct {
	Error       *AgentPoolProvisioningStatusResponseError `pulumi:"error"`
	OperationId *string                                   `pulumi:"operationId"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase  *string `pulumi:"phase"`
	Status *string `pulumi:"status"`
}

// Contains Provisioning errors
type AgentPoolProvisioningStatusResponseProvisioningStatusOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusResponseProvisioningStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusResponseProvisioningStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusOutput) ToAgentPoolProvisioningStatusResponseProvisioningStatusOutput() AgentPoolProvisioningStatusResponseProvisioningStatusOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusOutput) ToAgentPoolProvisioningStatusResponseProvisioningStatusOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusResponseProvisioningStatusOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusOutput) Error() AgentPoolProvisioningStatusResponseErrorPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseProvisioningStatus) *AgentPoolProvisioningStatusResponseError {
		return v.Error
	}).(AgentPoolProvisioningStatusResponseErrorPtrOutput)
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseProvisioningStatus) *string { return v.OperationId }).(pulumi.StringPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o AgentPoolProvisioningStatusResponseProvisioningStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseProvisioningStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseProvisioningStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusResponseProvisioningStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) ToAgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput() AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) ToAgentPoolProvisioningStatusResponseProvisioningStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) Elem() AgentPoolProvisioningStatusResponseProvisioningStatusOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseProvisioningStatus) AgentPoolProvisioningStatusResponseProvisioningStatus {
		if v != nil {
			return *v
		}
		var ret AgentPoolProvisioningStatusResponseProvisioningStatus
		return ret
	}).(AgentPoolProvisioningStatusResponseProvisioningStatusOutput)
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) Error() AgentPoolProvisioningStatusResponseErrorPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseProvisioningStatus) *AgentPoolProvisioningStatusResponseError {
		if v == nil {
			return nil
		}
		return v.Error
	}).(AgentPoolProvisioningStatusResponseErrorPtrOutput)
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.OperationId
	}).(pulumi.StringPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func (o AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool
type AgentPoolProvisioningStatusResponseStatus struct {
	// ErrorMessage - Error messages during creation of cluster
	ErrorMessage *string `pulumi:"errorMessage"`
	// Contains Provisioning errors
	ProvisioningStatus *AgentPoolProvisioningStatusResponseProvisioningStatus `pulumi:"provisioningStatus"`
	// Total number of ready machines targeted by this deployment.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated machines targeted by this deployment
	Replicas *int `pulumi:"replicas"`
}

// HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool
type AgentPoolProvisioningStatusResponseStatusOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusResponseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusResponseStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusResponseStatusOutput) ToAgentPoolProvisioningStatusResponseStatusOutput() AgentPoolProvisioningStatusResponseStatusOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseStatusOutput) ToAgentPoolProvisioningStatusResponseStatusOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusResponseStatusOutput {
	return o
}

// ErrorMessage - Error messages during creation of cluster
func (o AgentPoolProvisioningStatusResponseStatusOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseStatus) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Contains Provisioning errors
func (o AgentPoolProvisioningStatusResponseStatusOutput) ProvisioningStatus() AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseStatus) *AgentPoolProvisioningStatusResponseProvisioningStatus {
		return v.ProvisioningStatus
	}).(AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput)
}

// Total number of ready machines targeted by this deployment.
func (o AgentPoolProvisioningStatusResponseStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment
func (o AgentPoolProvisioningStatusResponseStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusResponseStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type AgentPoolProvisioningStatusResponseStatusPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusResponseStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusResponseStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusResponseStatusPtrOutput) ToAgentPoolProvisioningStatusResponseStatusPtrOutput() AgentPoolProvisioningStatusResponseStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseStatusPtrOutput) ToAgentPoolProvisioningStatusResponseStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusResponseStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusResponseStatusPtrOutput) Elem() AgentPoolProvisioningStatusResponseStatusOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseStatus) AgentPoolProvisioningStatusResponseStatus {
		if v != nil {
			return *v
		}
		var ret AgentPoolProvisioningStatusResponseStatus
		return ret
	}).(AgentPoolProvisioningStatusResponseStatusOutput)
}

// ErrorMessage - Error messages during creation of cluster
func (o AgentPoolProvisioningStatusResponseStatusPtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseStatus) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Contains Provisioning errors
func (o AgentPoolProvisioningStatusResponseStatusPtrOutput) ProvisioningStatus() AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseStatus) *AgentPoolProvisioningStatusResponseProvisioningStatus {
		if v == nil {
			return nil
		}
		return v.ProvisioningStatus
	}).(AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput)
}

// Total number of ready machines targeted by this deployment.
func (o AgentPoolProvisioningStatusResponseStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment
func (o AgentPoolProvisioningStatusResponseStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusResponseStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool
type AgentPoolProvisioningStatusStatus struct {
	// ErrorMessage - Error messages during creation of cluster
	ErrorMessage *string `pulumi:"errorMessage"`
	// Contains Provisioning errors
	ProvisioningStatus *AgentPoolProvisioningStatusProvisioningStatus `pulumi:"provisioningStatus"`
	// Total number of ready machines targeted by this deployment.
	ReadyReplicas *int `pulumi:"readyReplicas"`
	// Total number of non-terminated machines targeted by this deployment
	Replicas *int `pulumi:"replicas"`
}

// AgentPoolProvisioningStatusStatusInput is an input type that accepts AgentPoolProvisioningStatusStatusArgs and AgentPoolProvisioningStatusStatusOutput values.
// You can construct a concrete instance of `AgentPoolProvisioningStatusStatusInput` via:
//
//	AgentPoolProvisioningStatusStatusArgs{...}
type AgentPoolProvisioningStatusStatusInput interface {
	pulumi.Input

	ToAgentPoolProvisioningStatusStatusOutput() AgentPoolProvisioningStatusStatusOutput
	ToAgentPoolProvisioningStatusStatusOutputWithContext(context.Context) AgentPoolProvisioningStatusStatusOutput
}

// HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool
type AgentPoolProvisioningStatusStatusArgs struct {
	// ErrorMessage - Error messages during creation of cluster
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Contains Provisioning errors
	ProvisioningStatus AgentPoolProvisioningStatusProvisioningStatusPtrInput `pulumi:"provisioningStatus"`
	// Total number of ready machines targeted by this deployment.
	ReadyReplicas pulumi.IntPtrInput `pulumi:"readyReplicas"`
	// Total number of non-terminated machines targeted by this deployment
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (AgentPoolProvisioningStatusStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusStatus)(nil)).Elem()
}

func (i AgentPoolProvisioningStatusStatusArgs) ToAgentPoolProvisioningStatusStatusOutput() AgentPoolProvisioningStatusStatusOutput {
	return i.ToAgentPoolProvisioningStatusStatusOutputWithContext(context.Background())
}

func (i AgentPoolProvisioningStatusStatusArgs) ToAgentPoolProvisioningStatusStatusOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusStatusOutput)
}

func (i AgentPoolProvisioningStatusStatusArgs) ToAgentPoolProvisioningStatusStatusPtrOutput() AgentPoolProvisioningStatusStatusPtrOutput {
	return i.ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(context.Background())
}

func (i AgentPoolProvisioningStatusStatusArgs) ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusStatusOutput).ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(ctx)
}

// AgentPoolProvisioningStatusStatusPtrInput is an input type that accepts AgentPoolProvisioningStatusStatusArgs, AgentPoolProvisioningStatusStatusPtr and AgentPoolProvisioningStatusStatusPtrOutput values.
// You can construct a concrete instance of `AgentPoolProvisioningStatusStatusPtrInput` via:
//
//	        AgentPoolProvisioningStatusStatusArgs{...}
//
//	or:
//
//	        nil
type AgentPoolProvisioningStatusStatusPtrInput interface {
	pulumi.Input

	ToAgentPoolProvisioningStatusStatusPtrOutput() AgentPoolProvisioningStatusStatusPtrOutput
	ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(context.Context) AgentPoolProvisioningStatusStatusPtrOutput
}

type agentPoolProvisioningStatusStatusPtrType AgentPoolProvisioningStatusStatusArgs

func AgentPoolProvisioningStatusStatusPtr(v *AgentPoolProvisioningStatusStatusArgs) AgentPoolProvisioningStatusStatusPtrInput {
	return (*agentPoolProvisioningStatusStatusPtrType)(v)
}

func (*agentPoolProvisioningStatusStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusStatus)(nil)).Elem()
}

func (i *agentPoolProvisioningStatusStatusPtrType) ToAgentPoolProvisioningStatusStatusPtrOutput() AgentPoolProvisioningStatusStatusPtrOutput {
	return i.ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(context.Background())
}

func (i *agentPoolProvisioningStatusStatusPtrType) ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolProvisioningStatusStatusPtrOutput)
}

// HybridAKSNodePoolStatus defines the observed state of HybridAKSNodePool
type AgentPoolProvisioningStatusStatusOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolProvisioningStatusStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusStatusOutput) ToAgentPoolProvisioningStatusStatusOutput() AgentPoolProvisioningStatusStatusOutput {
	return o
}

func (o AgentPoolProvisioningStatusStatusOutput) ToAgentPoolProvisioningStatusStatusOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusStatusOutput {
	return o
}

func (o AgentPoolProvisioningStatusStatusOutput) ToAgentPoolProvisioningStatusStatusPtrOutput() AgentPoolProvisioningStatusStatusPtrOutput {
	return o.ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(context.Background())
}

func (o AgentPoolProvisioningStatusStatusOutput) ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolProvisioningStatusStatus) *AgentPoolProvisioningStatusStatus {
		return &v
	}).(AgentPoolProvisioningStatusStatusPtrOutput)
}

// ErrorMessage - Error messages during creation of cluster
func (o AgentPoolProvisioningStatusStatusOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusStatus) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Contains Provisioning errors
func (o AgentPoolProvisioningStatusStatusOutput) ProvisioningStatus() AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusStatus) *AgentPoolProvisioningStatusProvisioningStatus {
		return v.ProvisioningStatus
	}).(AgentPoolProvisioningStatusProvisioningStatusPtrOutput)
}

// Total number of ready machines targeted by this deployment.
func (o AgentPoolProvisioningStatusStatusOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusStatus) *int { return v.ReadyReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment
func (o AgentPoolProvisioningStatusStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolProvisioningStatusStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type AgentPoolProvisioningStatusStatusPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolProvisioningStatusStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolProvisioningStatusStatus)(nil)).Elem()
}

func (o AgentPoolProvisioningStatusStatusPtrOutput) ToAgentPoolProvisioningStatusStatusPtrOutput() AgentPoolProvisioningStatusStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusStatusPtrOutput) ToAgentPoolProvisioningStatusStatusPtrOutputWithContext(ctx context.Context) AgentPoolProvisioningStatusStatusPtrOutput {
	return o
}

func (o AgentPoolProvisioningStatusStatusPtrOutput) Elem() AgentPoolProvisioningStatusStatusOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusStatus) AgentPoolProvisioningStatusStatus {
		if v != nil {
			return *v
		}
		var ret AgentPoolProvisioningStatusStatus
		return ret
	}).(AgentPoolProvisioningStatusStatusOutput)
}

// ErrorMessage - Error messages during creation of cluster
func (o AgentPoolProvisioningStatusStatusPtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusStatus) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Contains Provisioning errors
func (o AgentPoolProvisioningStatusStatusPtrOutput) ProvisioningStatus() AgentPoolProvisioningStatusProvisioningStatusPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusStatus) *AgentPoolProvisioningStatusProvisioningStatus {
		if v == nil {
			return nil
		}
		return v.ProvisioningStatus
	}).(AgentPoolProvisioningStatusProvisioningStatusPtrOutput)
}

// Total number of ready machines targeted by this deployment.
func (o AgentPoolProvisioningStatusStatusPtrOutput) ReadyReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusStatus) *int {
		if v == nil {
			return nil
		}
		return v.ReadyReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated machines targeted by this deployment
func (o AgentPoolProvisioningStatusStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolProvisioningStatusStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

type AgentPoolResponseExtendedLocation struct {
	// The extended location name.
	Name *string `pulumi:"name"`
	// The extended location type.
	Type *string `pulumi:"type"`
}

type AgentPoolResponseExtendedLocationOutput struct{ *pulumi.OutputState }

func (AgentPoolResponseExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolResponseExtendedLocation)(nil)).Elem()
}

func (o AgentPoolResponseExtendedLocationOutput) ToAgentPoolResponseExtendedLocationOutput() AgentPoolResponseExtendedLocationOutput {
	return o
}

func (o AgentPoolResponseExtendedLocationOutput) ToAgentPoolResponseExtendedLocationOutputWithContext(ctx context.Context) AgentPoolResponseExtendedLocationOutput {
	return o
}

// The extended location name.
func (o AgentPoolResponseExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolResponseExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o AgentPoolResponseExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolResponseExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AgentPoolResponseExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolResponseExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolResponseExtendedLocation)(nil)).Elem()
}

func (o AgentPoolResponseExtendedLocationPtrOutput) ToAgentPoolResponseExtendedLocationPtrOutput() AgentPoolResponseExtendedLocationPtrOutput {
	return o
}

func (o AgentPoolResponseExtendedLocationPtrOutput) ToAgentPoolResponseExtendedLocationPtrOutputWithContext(ctx context.Context) AgentPoolResponseExtendedLocationPtrOutput {
	return o
}

func (o AgentPoolResponseExtendedLocationPtrOutput) Elem() AgentPoolResponseExtendedLocationOutput {
	return o.ApplyT(func(v *AgentPoolResponseExtendedLocation) AgentPoolResponseExtendedLocation {
		if v != nil {
			return *v
		}
		var ret AgentPoolResponseExtendedLocation
		return ret
	}).(AgentPoolResponseExtendedLocationOutput)
}

// The extended location name.
func (o AgentPoolResponseExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolResponseExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o AgentPoolResponseExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolResponseExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Defines the Arc Agent properties for the Provisioned clusters.
type ArcAgentProfile struct {
	// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
	AgentAutoUpgrade *string `pulumi:"agentAutoUpgrade"`
	// Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
	AgentVersion *string `pulumi:"agentVersion"`
}

// Defaults sets the appropriate defaults for ArcAgentProfile
func (val *ArcAgentProfile) Defaults() *ArcAgentProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AgentAutoUpgrade == nil {
		agentAutoUpgrade_ := "Enabled"
		tmp.AgentAutoUpgrade = &agentAutoUpgrade_
	}
	return &tmp
}

// ArcAgentProfileInput is an input type that accepts ArcAgentProfileArgs and ArcAgentProfileOutput values.
// You can construct a concrete instance of `ArcAgentProfileInput` via:
//
//	ArcAgentProfileArgs{...}
type ArcAgentProfileInput interface {
	pulumi.Input

	ToArcAgentProfileOutput() ArcAgentProfileOutput
	ToArcAgentProfileOutputWithContext(context.Context) ArcAgentProfileOutput
}

// Defines the Arc Agent properties for the Provisioned clusters.
type ArcAgentProfileArgs struct {
	// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
	AgentAutoUpgrade pulumi.StringPtrInput `pulumi:"agentAutoUpgrade"`
	// Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
	AgentVersion pulumi.StringPtrInput `pulumi:"agentVersion"`
}

// Defaults sets the appropriate defaults for ArcAgentProfileArgs
func (val *ArcAgentProfileArgs) Defaults() *ArcAgentProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AgentAutoUpgrade == nil {
		tmp.AgentAutoUpgrade = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (ArcAgentProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcAgentProfile)(nil)).Elem()
}

func (i ArcAgentProfileArgs) ToArcAgentProfileOutput() ArcAgentProfileOutput {
	return i.ToArcAgentProfileOutputWithContext(context.Background())
}

func (i ArcAgentProfileArgs) ToArcAgentProfileOutputWithContext(ctx context.Context) ArcAgentProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArcAgentProfileOutput)
}

func (i ArcAgentProfileArgs) ToArcAgentProfilePtrOutput() ArcAgentProfilePtrOutput {
	return i.ToArcAgentProfilePtrOutputWithContext(context.Background())
}

func (i ArcAgentProfileArgs) ToArcAgentProfilePtrOutputWithContext(ctx context.Context) ArcAgentProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArcAgentProfileOutput).ToArcAgentProfilePtrOutputWithContext(ctx)
}

// ArcAgentProfilePtrInput is an input type that accepts ArcAgentProfileArgs, ArcAgentProfilePtr and ArcAgentProfilePtrOutput values.
// You can construct a concrete instance of `ArcAgentProfilePtrInput` via:
//
//	        ArcAgentProfileArgs{...}
//
//	or:
//
//	        nil
type ArcAgentProfilePtrInput interface {
	pulumi.Input

	ToArcAgentProfilePtrOutput() ArcAgentProfilePtrOutput
	ToArcAgentProfilePtrOutputWithContext(context.Context) ArcAgentProfilePtrOutput
}

type arcAgentProfilePtrType ArcAgentProfileArgs

func ArcAgentProfilePtr(v *ArcAgentProfileArgs) ArcAgentProfilePtrInput {
	return (*arcAgentProfilePtrType)(v)
}

func (*arcAgentProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcAgentProfile)(nil)).Elem()
}

func (i *arcAgentProfilePtrType) ToArcAgentProfilePtrOutput() ArcAgentProfilePtrOutput {
	return i.ToArcAgentProfilePtrOutputWithContext(context.Background())
}

func (i *arcAgentProfilePtrType) ToArcAgentProfilePtrOutputWithContext(ctx context.Context) ArcAgentProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArcAgentProfilePtrOutput)
}

// Defines the Arc Agent properties for the Provisioned clusters.
type ArcAgentProfileOutput struct{ *pulumi.OutputState }

func (ArcAgentProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcAgentProfile)(nil)).Elem()
}

func (o ArcAgentProfileOutput) ToArcAgentProfileOutput() ArcAgentProfileOutput {
	return o
}

func (o ArcAgentProfileOutput) ToArcAgentProfileOutputWithContext(ctx context.Context) ArcAgentProfileOutput {
	return o
}

func (o ArcAgentProfileOutput) ToArcAgentProfilePtrOutput() ArcAgentProfilePtrOutput {
	return o.ToArcAgentProfilePtrOutputWithContext(context.Background())
}

func (o ArcAgentProfileOutput) ToArcAgentProfilePtrOutputWithContext(ctx context.Context) ArcAgentProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArcAgentProfile) *ArcAgentProfile {
		return &v
	}).(ArcAgentProfilePtrOutput)
}

// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
func (o ArcAgentProfileOutput) AgentAutoUpgrade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentProfile) *string { return v.AgentAutoUpgrade }).(pulumi.StringPtrOutput)
}

// Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
func (o ArcAgentProfileOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentProfile) *string { return v.AgentVersion }).(pulumi.StringPtrOutput)
}

type ArcAgentProfilePtrOutput struct{ *pulumi.OutputState }

func (ArcAgentProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcAgentProfile)(nil)).Elem()
}

func (o ArcAgentProfilePtrOutput) ToArcAgentProfilePtrOutput() ArcAgentProfilePtrOutput {
	return o
}

func (o ArcAgentProfilePtrOutput) ToArcAgentProfilePtrOutputWithContext(ctx context.Context) ArcAgentProfilePtrOutput {
	return o
}

func (o ArcAgentProfilePtrOutput) Elem() ArcAgentProfileOutput {
	return o.ApplyT(func(v *ArcAgentProfile) ArcAgentProfile {
		if v != nil {
			return *v
		}
		var ret ArcAgentProfile
		return ret
	}).(ArcAgentProfileOutput)
}

// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
func (o ArcAgentProfilePtrOutput) AgentAutoUpgrade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentProfile) *string {
		if v == nil {
			return nil
		}
		return v.AgentAutoUpgrade
	}).(pulumi.StringPtrOutput)
}

// Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
func (o ArcAgentProfilePtrOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentProfile) *string {
		if v == nil {
			return nil
		}
		return v.AgentVersion
	}).(pulumi.StringPtrOutput)
}

// Defines the Arc Agent properties for the Provisioned clusters.
type ArcAgentProfileResponse struct {
	// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
	AgentAutoUpgrade *string `pulumi:"agentAutoUpgrade"`
	// Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
	AgentVersion *string `pulumi:"agentVersion"`
}

// Defaults sets the appropriate defaults for ArcAgentProfileResponse
func (val *ArcAgentProfileResponse) Defaults() *ArcAgentProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AgentAutoUpgrade == nil {
		agentAutoUpgrade_ := "Enabled"
		tmp.AgentAutoUpgrade = &agentAutoUpgrade_
	}
	return &tmp
}

// Defines the Arc Agent properties for the Provisioned clusters.
type ArcAgentProfileResponseOutput struct{ *pulumi.OutputState }

func (ArcAgentProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcAgentProfileResponse)(nil)).Elem()
}

func (o ArcAgentProfileResponseOutput) ToArcAgentProfileResponseOutput() ArcAgentProfileResponseOutput {
	return o
}

func (o ArcAgentProfileResponseOutput) ToArcAgentProfileResponseOutputWithContext(ctx context.Context) ArcAgentProfileResponseOutput {
	return o
}

// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
func (o ArcAgentProfileResponseOutput) AgentAutoUpgrade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentProfileResponse) *string { return v.AgentAutoUpgrade }).(pulumi.StringPtrOutput)
}

// Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
func (o ArcAgentProfileResponseOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentProfileResponse) *string { return v.AgentVersion }).(pulumi.StringPtrOutput)
}

type ArcAgentProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ArcAgentProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcAgentProfileResponse)(nil)).Elem()
}

func (o ArcAgentProfileResponsePtrOutput) ToArcAgentProfileResponsePtrOutput() ArcAgentProfileResponsePtrOutput {
	return o
}

func (o ArcAgentProfileResponsePtrOutput) ToArcAgentProfileResponsePtrOutputWithContext(ctx context.Context) ArcAgentProfileResponsePtrOutput {
	return o
}

func (o ArcAgentProfileResponsePtrOutput) Elem() ArcAgentProfileResponseOutput {
	return o.ApplyT(func(v *ArcAgentProfileResponse) ArcAgentProfileResponse {
		if v != nil {
			return *v
		}
		var ret ArcAgentProfileResponse
		return ret
	}).(ArcAgentProfileResponseOutput)
}

// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
func (o ArcAgentProfileResponsePtrOutput) AgentAutoUpgrade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentAutoUpgrade
	}).(pulumi.StringPtrOutput)
}

// Version of the Arc agents to be installed on the provisioned Provisioned cluster resource
func (o ArcAgentProfileResponsePtrOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentVersion
	}).(pulumi.StringPtrOutput)
}

// Defines the observed Arc Agent status that is resourceSynced back to the ARM resource.
type ArcAgentStatusResponse struct {
	// Version of the Arc agents currently running on the Provisioned cluster resource.
	AgentVersion *string `pulumi:"agentVersion"`
	// Number of CPU cores present in the Provisioned cluster resource
	CoreCount *float64 `pulumi:"coreCount"`
	// Observed deployment state of the Arc Agents on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioned', 'deleting', 'failed', 'upgrading'
	DeploymentState *string `pulumi:"deploymentState"`
	// Error messages while onboarding/upgrading/uninstalling the Arc agents
	ErrorMessage *string `pulumi:"errorMessage"`
	// Last connected timestamp of the Provisioned cluster resource.
	LastConnectivityTime *string `pulumi:"lastConnectivityTime"`
	// ManagedIdentity certificate expiration time (ValidUntil).
	ManagedIdentityCertificateExpirationTime *string `pulumi:"managedIdentityCertificateExpirationTime"`
	// Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. Will be used to create the hybridIdentityMetadata proxy resource and will not be persisted.
	OnboardingPublicKey *string `pulumi:"onboardingPublicKey"`
}

// Defines the observed Arc Agent status that is resourceSynced back to the ARM resource.
type ArcAgentStatusResponseOutput struct{ *pulumi.OutputState }

func (ArcAgentStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcAgentStatusResponse)(nil)).Elem()
}

func (o ArcAgentStatusResponseOutput) ToArcAgentStatusResponseOutput() ArcAgentStatusResponseOutput {
	return o
}

func (o ArcAgentStatusResponseOutput) ToArcAgentStatusResponseOutputWithContext(ctx context.Context) ArcAgentStatusResponseOutput {
	return o
}

// Version of the Arc agents currently running on the Provisioned cluster resource.
func (o ArcAgentStatusResponseOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentStatusResponse) *string { return v.AgentVersion }).(pulumi.StringPtrOutput)
}

// Number of CPU cores present in the Provisioned cluster resource
func (o ArcAgentStatusResponseOutput) CoreCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ArcAgentStatusResponse) *float64 { return v.CoreCount }).(pulumi.Float64PtrOutput)
}

// Observed deployment state of the Arc Agents on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioned', 'deleting', 'failed', 'upgrading'
func (o ArcAgentStatusResponseOutput) DeploymentState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentStatusResponse) *string { return v.DeploymentState }).(pulumi.StringPtrOutput)
}

// Error messages while onboarding/upgrading/uninstalling the Arc agents
func (o ArcAgentStatusResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentStatusResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Last connected timestamp of the Provisioned cluster resource.
func (o ArcAgentStatusResponseOutput) LastConnectivityTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentStatusResponse) *string { return v.LastConnectivityTime }).(pulumi.StringPtrOutput)
}

// ManagedIdentity certificate expiration time (ValidUntil).
func (o ArcAgentStatusResponseOutput) ManagedIdentityCertificateExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentStatusResponse) *string { return v.ManagedIdentityCertificateExpirationTime }).(pulumi.StringPtrOutput)
}

// Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. Will be used to create the hybridIdentityMetadata proxy resource and will not be persisted.
func (o ArcAgentStatusResponseOutput) OnboardingPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcAgentStatusResponse) *string { return v.OnboardingPublicKey }).(pulumi.StringPtrOutput)
}

type ArcAgentStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ArcAgentStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcAgentStatusResponse)(nil)).Elem()
}

func (o ArcAgentStatusResponsePtrOutput) ToArcAgentStatusResponsePtrOutput() ArcAgentStatusResponsePtrOutput {
	return o
}

func (o ArcAgentStatusResponsePtrOutput) ToArcAgentStatusResponsePtrOutputWithContext(ctx context.Context) ArcAgentStatusResponsePtrOutput {
	return o
}

func (o ArcAgentStatusResponsePtrOutput) Elem() ArcAgentStatusResponseOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) ArcAgentStatusResponse {
		if v != nil {
			return *v
		}
		var ret ArcAgentStatusResponse
		return ret
	}).(ArcAgentStatusResponseOutput)
}

// Version of the Arc agents currently running on the Provisioned cluster resource.
func (o ArcAgentStatusResponsePtrOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentVersion
	}).(pulumi.StringPtrOutput)
}

// Number of CPU cores present in the Provisioned cluster resource
func (o ArcAgentStatusResponsePtrOutput) CoreCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.Float64PtrOutput)
}

// Observed deployment state of the Arc Agents on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioned', 'deleting', 'failed', 'upgrading'
func (o ArcAgentStatusResponsePtrOutput) DeploymentState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentState
	}).(pulumi.StringPtrOutput)
}

// Error messages while onboarding/upgrading/uninstalling the Arc agents
func (o ArcAgentStatusResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Last connected timestamp of the Provisioned cluster resource.
func (o ArcAgentStatusResponsePtrOutput) LastConnectivityTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastConnectivityTime
	}).(pulumi.StringPtrOutput)
}

// ManagedIdentity certificate expiration time (ValidUntil).
func (o ArcAgentStatusResponsePtrOutput) ManagedIdentityCertificateExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.ManagedIdentityCertificateExpirationTime
	}).(pulumi.StringPtrOutput)
}

// Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. Will be used to create the hybridIdentityMetadata proxy resource and will not be persisted.
func (o ArcAgentStatusResponsePtrOutput) OnboardingPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcAgentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.OnboardingPublicKey
	}).(pulumi.StringPtrOutput)
}

// CloudProviderProfile - The underlying cloud infra provider properties.
type CloudProviderProfile struct {
	// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
	InfraNetworkProfile *CloudProviderProfileInfraNetworkProfile `pulumi:"infraNetworkProfile"`
	// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
	InfraStorageProfile *CloudProviderProfileInfraStorageProfile `pulumi:"infraStorageProfile"`
}

// CloudProviderProfileInput is an input type that accepts CloudProviderProfileArgs and CloudProviderProfileOutput values.
// You can construct a concrete instance of `CloudProviderProfileInput` via:
//
//	CloudProviderProfileArgs{...}
type CloudProviderProfileInput interface {
	pulumi.Input

	ToCloudProviderProfileOutput() CloudProviderProfileOutput
	ToCloudProviderProfileOutputWithContext(context.Context) CloudProviderProfileOutput
}

// CloudProviderProfile - The underlying cloud infra provider properties.
type CloudProviderProfileArgs struct {
	// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
	InfraNetworkProfile CloudProviderProfileInfraNetworkProfilePtrInput `pulumi:"infraNetworkProfile"`
	// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
	InfraStorageProfile CloudProviderProfileInfraStorageProfilePtrInput `pulumi:"infraStorageProfile"`
}

func (CloudProviderProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfile)(nil)).Elem()
}

func (i CloudProviderProfileArgs) ToCloudProviderProfileOutput() CloudProviderProfileOutput {
	return i.ToCloudProviderProfileOutputWithContext(context.Background())
}

func (i CloudProviderProfileArgs) ToCloudProviderProfileOutputWithContext(ctx context.Context) CloudProviderProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileOutput)
}

func (i CloudProviderProfileArgs) ToCloudProviderProfilePtrOutput() CloudProviderProfilePtrOutput {
	return i.ToCloudProviderProfilePtrOutputWithContext(context.Background())
}

func (i CloudProviderProfileArgs) ToCloudProviderProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileOutput).ToCloudProviderProfilePtrOutputWithContext(ctx)
}

// CloudProviderProfilePtrInput is an input type that accepts CloudProviderProfileArgs, CloudProviderProfilePtr and CloudProviderProfilePtrOutput values.
// You can construct a concrete instance of `CloudProviderProfilePtrInput` via:
//
//	        CloudProviderProfileArgs{...}
//
//	or:
//
//	        nil
type CloudProviderProfilePtrInput interface {
	pulumi.Input

	ToCloudProviderProfilePtrOutput() CloudProviderProfilePtrOutput
	ToCloudProviderProfilePtrOutputWithContext(context.Context) CloudProviderProfilePtrOutput
}

type cloudProviderProfilePtrType CloudProviderProfileArgs

func CloudProviderProfilePtr(v *CloudProviderProfileArgs) CloudProviderProfilePtrInput {
	return (*cloudProviderProfilePtrType)(v)
}

func (*cloudProviderProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfile)(nil)).Elem()
}

func (i *cloudProviderProfilePtrType) ToCloudProviderProfilePtrOutput() CloudProviderProfilePtrOutput {
	return i.ToCloudProviderProfilePtrOutputWithContext(context.Background())
}

func (i *cloudProviderProfilePtrType) ToCloudProviderProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfilePtrOutput)
}

// CloudProviderProfile - The underlying cloud infra provider properties.
type CloudProviderProfileOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfile)(nil)).Elem()
}

func (o CloudProviderProfileOutput) ToCloudProviderProfileOutput() CloudProviderProfileOutput {
	return o
}

func (o CloudProviderProfileOutput) ToCloudProviderProfileOutputWithContext(ctx context.Context) CloudProviderProfileOutput {
	return o
}

func (o CloudProviderProfileOutput) ToCloudProviderProfilePtrOutput() CloudProviderProfilePtrOutput {
	return o.ToCloudProviderProfilePtrOutputWithContext(context.Background())
}

func (o CloudProviderProfileOutput) ToCloudProviderProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudProviderProfile) *CloudProviderProfile {
		return &v
	}).(CloudProviderProfilePtrOutput)
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
func (o CloudProviderProfileOutput) InfraNetworkProfile() CloudProviderProfileInfraNetworkProfilePtrOutput {
	return o.ApplyT(func(v CloudProviderProfile) *CloudProviderProfileInfraNetworkProfile { return v.InfraNetworkProfile }).(CloudProviderProfileInfraNetworkProfilePtrOutput)
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
func (o CloudProviderProfileOutput) InfraStorageProfile() CloudProviderProfileInfraStorageProfilePtrOutput {
	return o.ApplyT(func(v CloudProviderProfile) *CloudProviderProfileInfraStorageProfile { return v.InfraStorageProfile }).(CloudProviderProfileInfraStorageProfilePtrOutput)
}

type CloudProviderProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudProviderProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfile)(nil)).Elem()
}

func (o CloudProviderProfilePtrOutput) ToCloudProviderProfilePtrOutput() CloudProviderProfilePtrOutput {
	return o
}

func (o CloudProviderProfilePtrOutput) ToCloudProviderProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfilePtrOutput {
	return o
}

func (o CloudProviderProfilePtrOutput) Elem() CloudProviderProfileOutput {
	return o.ApplyT(func(v *CloudProviderProfile) CloudProviderProfile {
		if v != nil {
			return *v
		}
		var ret CloudProviderProfile
		return ret
	}).(CloudProviderProfileOutput)
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
func (o CloudProviderProfilePtrOutput) InfraNetworkProfile() CloudProviderProfileInfraNetworkProfilePtrOutput {
	return o.ApplyT(func(v *CloudProviderProfile) *CloudProviderProfileInfraNetworkProfile {
		if v == nil {
			return nil
		}
		return v.InfraNetworkProfile
	}).(CloudProviderProfileInfraNetworkProfilePtrOutput)
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
func (o CloudProviderProfilePtrOutput) InfraStorageProfile() CloudProviderProfileInfraStorageProfilePtrOutput {
	return o.ApplyT(func(v *CloudProviderProfile) *CloudProviderProfileInfraStorageProfile {
		if v == nil {
			return nil
		}
		return v.InfraStorageProfile
	}).(CloudProviderProfileInfraStorageProfilePtrOutput)
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
type CloudProviderProfileInfraNetworkProfile struct {
	// Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
	VnetSubnetIds []string `pulumi:"vnetSubnetIds"`
}

// CloudProviderProfileInfraNetworkProfileInput is an input type that accepts CloudProviderProfileInfraNetworkProfileArgs and CloudProviderProfileInfraNetworkProfileOutput values.
// You can construct a concrete instance of `CloudProviderProfileInfraNetworkProfileInput` via:
//
//	CloudProviderProfileInfraNetworkProfileArgs{...}
type CloudProviderProfileInfraNetworkProfileInput interface {
	pulumi.Input

	ToCloudProviderProfileInfraNetworkProfileOutput() CloudProviderProfileInfraNetworkProfileOutput
	ToCloudProviderProfileInfraNetworkProfileOutputWithContext(context.Context) CloudProviderProfileInfraNetworkProfileOutput
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
type CloudProviderProfileInfraNetworkProfileArgs struct {
	// Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
	VnetSubnetIds pulumi.StringArrayInput `pulumi:"vnetSubnetIds"`
}

func (CloudProviderProfileInfraNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfileInfraNetworkProfile)(nil)).Elem()
}

func (i CloudProviderProfileInfraNetworkProfileArgs) ToCloudProviderProfileInfraNetworkProfileOutput() CloudProviderProfileInfraNetworkProfileOutput {
	return i.ToCloudProviderProfileInfraNetworkProfileOutputWithContext(context.Background())
}

func (i CloudProviderProfileInfraNetworkProfileArgs) ToCloudProviderProfileInfraNetworkProfileOutputWithContext(ctx context.Context) CloudProviderProfileInfraNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileInfraNetworkProfileOutput)
}

func (i CloudProviderProfileInfraNetworkProfileArgs) ToCloudProviderProfileInfraNetworkProfilePtrOutput() CloudProviderProfileInfraNetworkProfilePtrOutput {
	return i.ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(context.Background())
}

func (i CloudProviderProfileInfraNetworkProfileArgs) ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileInfraNetworkProfileOutput).ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(ctx)
}

// CloudProviderProfileInfraNetworkProfilePtrInput is an input type that accepts CloudProviderProfileInfraNetworkProfileArgs, CloudProviderProfileInfraNetworkProfilePtr and CloudProviderProfileInfraNetworkProfilePtrOutput values.
// You can construct a concrete instance of `CloudProviderProfileInfraNetworkProfilePtrInput` via:
//
//	        CloudProviderProfileInfraNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type CloudProviderProfileInfraNetworkProfilePtrInput interface {
	pulumi.Input

	ToCloudProviderProfileInfraNetworkProfilePtrOutput() CloudProviderProfileInfraNetworkProfilePtrOutput
	ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(context.Context) CloudProviderProfileInfraNetworkProfilePtrOutput
}

type cloudProviderProfileInfraNetworkProfilePtrType CloudProviderProfileInfraNetworkProfileArgs

func CloudProviderProfileInfraNetworkProfilePtr(v *CloudProviderProfileInfraNetworkProfileArgs) CloudProviderProfileInfraNetworkProfilePtrInput {
	return (*cloudProviderProfileInfraNetworkProfilePtrType)(v)
}

func (*cloudProviderProfileInfraNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfileInfraNetworkProfile)(nil)).Elem()
}

func (i *cloudProviderProfileInfraNetworkProfilePtrType) ToCloudProviderProfileInfraNetworkProfilePtrOutput() CloudProviderProfileInfraNetworkProfilePtrOutput {
	return i.ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *cloudProviderProfileInfraNetworkProfilePtrType) ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileInfraNetworkProfilePtrOutput)
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
type CloudProviderProfileInfraNetworkProfileOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileInfraNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfileInfraNetworkProfile)(nil)).Elem()
}

func (o CloudProviderProfileInfraNetworkProfileOutput) ToCloudProviderProfileInfraNetworkProfileOutput() CloudProviderProfileInfraNetworkProfileOutput {
	return o
}

func (o CloudProviderProfileInfraNetworkProfileOutput) ToCloudProviderProfileInfraNetworkProfileOutputWithContext(ctx context.Context) CloudProviderProfileInfraNetworkProfileOutput {
	return o
}

func (o CloudProviderProfileInfraNetworkProfileOutput) ToCloudProviderProfileInfraNetworkProfilePtrOutput() CloudProviderProfileInfraNetworkProfilePtrOutput {
	return o.ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(context.Background())
}

func (o CloudProviderProfileInfraNetworkProfileOutput) ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudProviderProfileInfraNetworkProfile) *CloudProviderProfileInfraNetworkProfile {
		return &v
	}).(CloudProviderProfileInfraNetworkProfilePtrOutput)
}

// Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
func (o CloudProviderProfileInfraNetworkProfileOutput) VnetSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudProviderProfileInfraNetworkProfile) []string { return v.VnetSubnetIds }).(pulumi.StringArrayOutput)
}

type CloudProviderProfileInfraNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileInfraNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfileInfraNetworkProfile)(nil)).Elem()
}

func (o CloudProviderProfileInfraNetworkProfilePtrOutput) ToCloudProviderProfileInfraNetworkProfilePtrOutput() CloudProviderProfileInfraNetworkProfilePtrOutput {
	return o
}

func (o CloudProviderProfileInfraNetworkProfilePtrOutput) ToCloudProviderProfileInfraNetworkProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraNetworkProfilePtrOutput {
	return o
}

func (o CloudProviderProfileInfraNetworkProfilePtrOutput) Elem() CloudProviderProfileInfraNetworkProfileOutput {
	return o.ApplyT(func(v *CloudProviderProfileInfraNetworkProfile) CloudProviderProfileInfraNetworkProfile {
		if v != nil {
			return *v
		}
		var ret CloudProviderProfileInfraNetworkProfile
		return ret
	}).(CloudProviderProfileInfraNetworkProfileOutput)
}

// Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
func (o CloudProviderProfileInfraNetworkProfilePtrOutput) VnetSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProviderProfileInfraNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.VnetSubnetIds
	}).(pulumi.StringArrayOutput)
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
type CloudProviderProfileInfraStorageProfile struct {
	// Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
	StorageSpaceIds []string `pulumi:"storageSpaceIds"`
}

// CloudProviderProfileInfraStorageProfileInput is an input type that accepts CloudProviderProfileInfraStorageProfileArgs and CloudProviderProfileInfraStorageProfileOutput values.
// You can construct a concrete instance of `CloudProviderProfileInfraStorageProfileInput` via:
//
//	CloudProviderProfileInfraStorageProfileArgs{...}
type CloudProviderProfileInfraStorageProfileInput interface {
	pulumi.Input

	ToCloudProviderProfileInfraStorageProfileOutput() CloudProviderProfileInfraStorageProfileOutput
	ToCloudProviderProfileInfraStorageProfileOutputWithContext(context.Context) CloudProviderProfileInfraStorageProfileOutput
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
type CloudProviderProfileInfraStorageProfileArgs struct {
	// Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
	StorageSpaceIds pulumi.StringArrayInput `pulumi:"storageSpaceIds"`
}

func (CloudProviderProfileInfraStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfileInfraStorageProfile)(nil)).Elem()
}

func (i CloudProviderProfileInfraStorageProfileArgs) ToCloudProviderProfileInfraStorageProfileOutput() CloudProviderProfileInfraStorageProfileOutput {
	return i.ToCloudProviderProfileInfraStorageProfileOutputWithContext(context.Background())
}

func (i CloudProviderProfileInfraStorageProfileArgs) ToCloudProviderProfileInfraStorageProfileOutputWithContext(ctx context.Context) CloudProviderProfileInfraStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileInfraStorageProfileOutput)
}

func (i CloudProviderProfileInfraStorageProfileArgs) ToCloudProviderProfileInfraStorageProfilePtrOutput() CloudProviderProfileInfraStorageProfilePtrOutput {
	return i.ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(context.Background())
}

func (i CloudProviderProfileInfraStorageProfileArgs) ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileInfraStorageProfileOutput).ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(ctx)
}

// CloudProviderProfileInfraStorageProfilePtrInput is an input type that accepts CloudProviderProfileInfraStorageProfileArgs, CloudProviderProfileInfraStorageProfilePtr and CloudProviderProfileInfraStorageProfilePtrOutput values.
// You can construct a concrete instance of `CloudProviderProfileInfraStorageProfilePtrInput` via:
//
//	        CloudProviderProfileInfraStorageProfileArgs{...}
//
//	or:
//
//	        nil
type CloudProviderProfileInfraStorageProfilePtrInput interface {
	pulumi.Input

	ToCloudProviderProfileInfraStorageProfilePtrOutput() CloudProviderProfileInfraStorageProfilePtrOutput
	ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(context.Context) CloudProviderProfileInfraStorageProfilePtrOutput
}

type cloudProviderProfileInfraStorageProfilePtrType CloudProviderProfileInfraStorageProfileArgs

func CloudProviderProfileInfraStorageProfilePtr(v *CloudProviderProfileInfraStorageProfileArgs) CloudProviderProfileInfraStorageProfilePtrInput {
	return (*cloudProviderProfileInfraStorageProfilePtrType)(v)
}

func (*cloudProviderProfileInfraStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfileInfraStorageProfile)(nil)).Elem()
}

func (i *cloudProviderProfileInfraStorageProfilePtrType) ToCloudProviderProfileInfraStorageProfilePtrOutput() CloudProviderProfileInfraStorageProfilePtrOutput {
	return i.ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(context.Background())
}

func (i *cloudProviderProfileInfraStorageProfilePtrType) ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderProfileInfraStorageProfilePtrOutput)
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
type CloudProviderProfileInfraStorageProfileOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileInfraStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfileInfraStorageProfile)(nil)).Elem()
}

func (o CloudProviderProfileInfraStorageProfileOutput) ToCloudProviderProfileInfraStorageProfileOutput() CloudProviderProfileInfraStorageProfileOutput {
	return o
}

func (o CloudProviderProfileInfraStorageProfileOutput) ToCloudProviderProfileInfraStorageProfileOutputWithContext(ctx context.Context) CloudProviderProfileInfraStorageProfileOutput {
	return o
}

func (o CloudProviderProfileInfraStorageProfileOutput) ToCloudProviderProfileInfraStorageProfilePtrOutput() CloudProviderProfileInfraStorageProfilePtrOutput {
	return o.ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(context.Background())
}

func (o CloudProviderProfileInfraStorageProfileOutput) ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudProviderProfileInfraStorageProfile) *CloudProviderProfileInfraStorageProfile {
		return &v
	}).(CloudProviderProfileInfraStorageProfilePtrOutput)
}

// Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
func (o CloudProviderProfileInfraStorageProfileOutput) StorageSpaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudProviderProfileInfraStorageProfile) []string { return v.StorageSpaceIds }).(pulumi.StringArrayOutput)
}

type CloudProviderProfileInfraStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileInfraStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfileInfraStorageProfile)(nil)).Elem()
}

func (o CloudProviderProfileInfraStorageProfilePtrOutput) ToCloudProviderProfileInfraStorageProfilePtrOutput() CloudProviderProfileInfraStorageProfilePtrOutput {
	return o
}

func (o CloudProviderProfileInfraStorageProfilePtrOutput) ToCloudProviderProfileInfraStorageProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileInfraStorageProfilePtrOutput {
	return o
}

func (o CloudProviderProfileInfraStorageProfilePtrOutput) Elem() CloudProviderProfileInfraStorageProfileOutput {
	return o.ApplyT(func(v *CloudProviderProfileInfraStorageProfile) CloudProviderProfileInfraStorageProfile {
		if v != nil {
			return *v
		}
		var ret CloudProviderProfileInfraStorageProfile
		return ret
	}).(CloudProviderProfileInfraStorageProfileOutput)
}

// Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
func (o CloudProviderProfileInfraStorageProfilePtrOutput) StorageSpaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProviderProfileInfraStorageProfile) []string {
		if v == nil {
			return nil
		}
		return v.StorageSpaceIds
	}).(pulumi.StringArrayOutput)
}

// CloudProviderProfile - The underlying cloud infra provider properties.
type CloudProviderProfileResponse struct {
	// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
	InfraNetworkProfile *CloudProviderProfileResponseInfraNetworkProfile `pulumi:"infraNetworkProfile"`
	// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
	InfraStorageProfile *CloudProviderProfileResponseInfraStorageProfile `pulumi:"infraStorageProfile"`
}

// CloudProviderProfile - The underlying cloud infra provider properties.
type CloudProviderProfileResponseOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfileResponse)(nil)).Elem()
}

func (o CloudProviderProfileResponseOutput) ToCloudProviderProfileResponseOutput() CloudProviderProfileResponseOutput {
	return o
}

func (o CloudProviderProfileResponseOutput) ToCloudProviderProfileResponseOutputWithContext(ctx context.Context) CloudProviderProfileResponseOutput {
	return o
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
func (o CloudProviderProfileResponseOutput) InfraNetworkProfile() CloudProviderProfileResponseInfraNetworkProfilePtrOutput {
	return o.ApplyT(func(v CloudProviderProfileResponse) *CloudProviderProfileResponseInfraNetworkProfile {
		return v.InfraNetworkProfile
	}).(CloudProviderProfileResponseInfraNetworkProfilePtrOutput)
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
func (o CloudProviderProfileResponseOutput) InfraStorageProfile() CloudProviderProfileResponseInfraStorageProfilePtrOutput {
	return o.ApplyT(func(v CloudProviderProfileResponse) *CloudProviderProfileResponseInfraStorageProfile {
		return v.InfraStorageProfile
	}).(CloudProviderProfileResponseInfraStorageProfilePtrOutput)
}

type CloudProviderProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfileResponse)(nil)).Elem()
}

func (o CloudProviderProfileResponsePtrOutput) ToCloudProviderProfileResponsePtrOutput() CloudProviderProfileResponsePtrOutput {
	return o
}

func (o CloudProviderProfileResponsePtrOutput) ToCloudProviderProfileResponsePtrOutputWithContext(ctx context.Context) CloudProviderProfileResponsePtrOutput {
	return o
}

func (o CloudProviderProfileResponsePtrOutput) Elem() CloudProviderProfileResponseOutput {
	return o.ApplyT(func(v *CloudProviderProfileResponse) CloudProviderProfileResponse {
		if v != nil {
			return *v
		}
		var ret CloudProviderProfileResponse
		return ret
	}).(CloudProviderProfileResponseOutput)
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
func (o CloudProviderProfileResponsePtrOutput) InfraNetworkProfile() CloudProviderProfileResponseInfraNetworkProfilePtrOutput {
	return o.ApplyT(func(v *CloudProviderProfileResponse) *CloudProviderProfileResponseInfraNetworkProfile {
		if v == nil {
			return nil
		}
		return v.InfraNetworkProfile
	}).(CloudProviderProfileResponseInfraNetworkProfilePtrOutput)
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
func (o CloudProviderProfileResponsePtrOutput) InfraStorageProfile() CloudProviderProfileResponseInfraStorageProfilePtrOutput {
	return o.ApplyT(func(v *CloudProviderProfileResponse) *CloudProviderProfileResponseInfraStorageProfile {
		if v == nil {
			return nil
		}
		return v.InfraStorageProfile
	}).(CloudProviderProfileResponseInfraStorageProfilePtrOutput)
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
type CloudProviderProfileResponseInfraNetworkProfile struct {
	// Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
	VnetSubnetIds []string `pulumi:"vnetSubnetIds"`
}

// InfraNetworkProfile - List of infra network profiles for the provisioned cluster
type CloudProviderProfileResponseInfraNetworkProfileOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileResponseInfraNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfileResponseInfraNetworkProfile)(nil)).Elem()
}

func (o CloudProviderProfileResponseInfraNetworkProfileOutput) ToCloudProviderProfileResponseInfraNetworkProfileOutput() CloudProviderProfileResponseInfraNetworkProfileOutput {
	return o
}

func (o CloudProviderProfileResponseInfraNetworkProfileOutput) ToCloudProviderProfileResponseInfraNetworkProfileOutputWithContext(ctx context.Context) CloudProviderProfileResponseInfraNetworkProfileOutput {
	return o
}

// Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
func (o CloudProviderProfileResponseInfraNetworkProfileOutput) VnetSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudProviderProfileResponseInfraNetworkProfile) []string { return v.VnetSubnetIds }).(pulumi.StringArrayOutput)
}

type CloudProviderProfileResponseInfraNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileResponseInfraNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfileResponseInfraNetworkProfile)(nil)).Elem()
}

func (o CloudProviderProfileResponseInfraNetworkProfilePtrOutput) ToCloudProviderProfileResponseInfraNetworkProfilePtrOutput() CloudProviderProfileResponseInfraNetworkProfilePtrOutput {
	return o
}

func (o CloudProviderProfileResponseInfraNetworkProfilePtrOutput) ToCloudProviderProfileResponseInfraNetworkProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileResponseInfraNetworkProfilePtrOutput {
	return o
}

func (o CloudProviderProfileResponseInfraNetworkProfilePtrOutput) Elem() CloudProviderProfileResponseInfraNetworkProfileOutput {
	return o.ApplyT(func(v *CloudProviderProfileResponseInfraNetworkProfile) CloudProviderProfileResponseInfraNetworkProfile {
		if v != nil {
			return *v
		}
		var ret CloudProviderProfileResponseInfraNetworkProfile
		return ret
	}).(CloudProviderProfileResponseInfraNetworkProfileOutput)
}

// Array of references to azure resource corresponding to the new HybridAKSNetwork object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/virtualNetworks/{virtualNetworkName}
func (o CloudProviderProfileResponseInfraNetworkProfilePtrOutput) VnetSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProviderProfileResponseInfraNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.VnetSubnetIds
	}).(pulumi.StringArrayOutput)
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
type CloudProviderProfileResponseInfraStorageProfile struct {
	// Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
	StorageSpaceIds []string `pulumi:"storageSpaceIds"`
}

// InfraStorageProfile - List of infra storage profiles for the provisioned cluster
type CloudProviderProfileResponseInfraStorageProfileOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileResponseInfraStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudProviderProfileResponseInfraStorageProfile)(nil)).Elem()
}

func (o CloudProviderProfileResponseInfraStorageProfileOutput) ToCloudProviderProfileResponseInfraStorageProfileOutput() CloudProviderProfileResponseInfraStorageProfileOutput {
	return o
}

func (o CloudProviderProfileResponseInfraStorageProfileOutput) ToCloudProviderProfileResponseInfraStorageProfileOutputWithContext(ctx context.Context) CloudProviderProfileResponseInfraStorageProfileOutput {
	return o
}

// Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
func (o CloudProviderProfileResponseInfraStorageProfileOutput) StorageSpaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudProviderProfileResponseInfraStorageProfile) []string { return v.StorageSpaceIds }).(pulumi.StringArrayOutput)
}

type CloudProviderProfileResponseInfraStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudProviderProfileResponseInfraStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderProfileResponseInfraStorageProfile)(nil)).Elem()
}

func (o CloudProviderProfileResponseInfraStorageProfilePtrOutput) ToCloudProviderProfileResponseInfraStorageProfilePtrOutput() CloudProviderProfileResponseInfraStorageProfilePtrOutput {
	return o
}

func (o CloudProviderProfileResponseInfraStorageProfilePtrOutput) ToCloudProviderProfileResponseInfraStorageProfilePtrOutputWithContext(ctx context.Context) CloudProviderProfileResponseInfraStorageProfilePtrOutput {
	return o
}

func (o CloudProviderProfileResponseInfraStorageProfilePtrOutput) Elem() CloudProviderProfileResponseInfraStorageProfileOutput {
	return o.ApplyT(func(v *CloudProviderProfileResponseInfraStorageProfile) CloudProviderProfileResponseInfraStorageProfile {
		if v != nil {
			return *v
		}
		var ret CloudProviderProfileResponseInfraStorageProfile
		return ret
	}).(CloudProviderProfileResponseInfraStorageProfileOutput)
}

// Reference to azure resource corresponding to the new HybridAKSStorage object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridContainerService/storageSpaces/{storageSpaceName}
func (o CloudProviderProfileResponseInfraStorageProfilePtrOutput) StorageSpaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProviderProfileResponseInfraStorageProfile) []string {
		if v == nil {
			return nil
		}
		return v.StorageSpaceIds
	}).(pulumi.StringArrayOutput)
}

// API server endpoint for the control plane
type ControlPlaneEndpointProfileControlPlaneEndpoint struct {
	// Host IP address for API server
	HostIP *string `pulumi:"hostIP"`
	// Port for the API server
	Port *string `pulumi:"port"`
}

// ControlPlaneEndpointProfileControlPlaneEndpointInput is an input type that accepts ControlPlaneEndpointProfileControlPlaneEndpointArgs and ControlPlaneEndpointProfileControlPlaneEndpointOutput values.
// You can construct a concrete instance of `ControlPlaneEndpointProfileControlPlaneEndpointInput` via:
//
//	ControlPlaneEndpointProfileControlPlaneEndpointArgs{...}
type ControlPlaneEndpointProfileControlPlaneEndpointInput interface {
	pulumi.Input

	ToControlPlaneEndpointProfileControlPlaneEndpointOutput() ControlPlaneEndpointProfileControlPlaneEndpointOutput
	ToControlPlaneEndpointProfileControlPlaneEndpointOutputWithContext(context.Context) ControlPlaneEndpointProfileControlPlaneEndpointOutput
}

// API server endpoint for the control plane
type ControlPlaneEndpointProfileControlPlaneEndpointArgs struct {
	// Host IP address for API server
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// Port for the API server
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (ControlPlaneEndpointProfileControlPlaneEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneEndpointProfileControlPlaneEndpoint)(nil)).Elem()
}

func (i ControlPlaneEndpointProfileControlPlaneEndpointArgs) ToControlPlaneEndpointProfileControlPlaneEndpointOutput() ControlPlaneEndpointProfileControlPlaneEndpointOutput {
	return i.ToControlPlaneEndpointProfileControlPlaneEndpointOutputWithContext(context.Background())
}

func (i ControlPlaneEndpointProfileControlPlaneEndpointArgs) ToControlPlaneEndpointProfileControlPlaneEndpointOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileControlPlaneEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneEndpointProfileControlPlaneEndpointOutput)
}

func (i ControlPlaneEndpointProfileControlPlaneEndpointArgs) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutput() ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return i.ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(context.Background())
}

func (i ControlPlaneEndpointProfileControlPlaneEndpointArgs) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneEndpointProfileControlPlaneEndpointOutput).ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(ctx)
}

// ControlPlaneEndpointProfileControlPlaneEndpointPtrInput is an input type that accepts ControlPlaneEndpointProfileControlPlaneEndpointArgs, ControlPlaneEndpointProfileControlPlaneEndpointPtr and ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput values.
// You can construct a concrete instance of `ControlPlaneEndpointProfileControlPlaneEndpointPtrInput` via:
//
//	        ControlPlaneEndpointProfileControlPlaneEndpointArgs{...}
//
//	or:
//
//	        nil
type ControlPlaneEndpointProfileControlPlaneEndpointPtrInput interface {
	pulumi.Input

	ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutput() ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput
	ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(context.Context) ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput
}

type controlPlaneEndpointProfileControlPlaneEndpointPtrType ControlPlaneEndpointProfileControlPlaneEndpointArgs

func ControlPlaneEndpointProfileControlPlaneEndpointPtr(v *ControlPlaneEndpointProfileControlPlaneEndpointArgs) ControlPlaneEndpointProfileControlPlaneEndpointPtrInput {
	return (*controlPlaneEndpointProfileControlPlaneEndpointPtrType)(v)
}

func (*controlPlaneEndpointProfileControlPlaneEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneEndpointProfileControlPlaneEndpoint)(nil)).Elem()
}

func (i *controlPlaneEndpointProfileControlPlaneEndpointPtrType) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutput() ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return i.ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(context.Background())
}

func (i *controlPlaneEndpointProfileControlPlaneEndpointPtrType) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput)
}

// API server endpoint for the control plane
type ControlPlaneEndpointProfileControlPlaneEndpointOutput struct{ *pulumi.OutputState }

func (ControlPlaneEndpointProfileControlPlaneEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneEndpointProfileControlPlaneEndpoint)(nil)).Elem()
}

func (o ControlPlaneEndpointProfileControlPlaneEndpointOutput) ToControlPlaneEndpointProfileControlPlaneEndpointOutput() ControlPlaneEndpointProfileControlPlaneEndpointOutput {
	return o
}

func (o ControlPlaneEndpointProfileControlPlaneEndpointOutput) ToControlPlaneEndpointProfileControlPlaneEndpointOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileControlPlaneEndpointOutput {
	return o
}

func (o ControlPlaneEndpointProfileControlPlaneEndpointOutput) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutput() ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return o.ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(context.Background())
}

func (o ControlPlaneEndpointProfileControlPlaneEndpointOutput) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControlPlaneEndpointProfileControlPlaneEndpoint) *ControlPlaneEndpointProfileControlPlaneEndpoint {
		return &v
	}).(ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput)
}

// Host IP address for API server
func (o ControlPlaneEndpointProfileControlPlaneEndpointOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneEndpointProfileControlPlaneEndpoint) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// Port for the API server
func (o ControlPlaneEndpointProfileControlPlaneEndpointOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneEndpointProfileControlPlaneEndpoint) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput struct{ *pulumi.OutputState }

func (ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneEndpointProfileControlPlaneEndpoint)(nil)).Elem()
}

func (o ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutput() ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return o
}

func (o ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput) ToControlPlaneEndpointProfileControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return o
}

func (o ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput) Elem() ControlPlaneEndpointProfileControlPlaneEndpointOutput {
	return o.ApplyT(func(v *ControlPlaneEndpointProfileControlPlaneEndpoint) ControlPlaneEndpointProfileControlPlaneEndpoint {
		if v != nil {
			return *v
		}
		var ret ControlPlaneEndpointProfileControlPlaneEndpoint
		return ret
	}).(ControlPlaneEndpointProfileControlPlaneEndpointOutput)
}

// Host IP address for API server
func (o ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneEndpointProfileControlPlaneEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.HostIP
	}).(pulumi.StringPtrOutput)
}

// Port for the API server
func (o ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneEndpointProfileControlPlaneEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// API server endpoint for the control plane
type ControlPlaneEndpointProfileResponseControlPlaneEndpoint struct {
	// Host IP address for API server
	HostIP *string `pulumi:"hostIP"`
	// Port for the API server
	Port *string `pulumi:"port"`
}

// API server endpoint for the control plane
type ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput struct{ *pulumi.OutputState }

func (ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneEndpointProfileResponseControlPlaneEndpoint)(nil)).Elem()
}

func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput) ToControlPlaneEndpointProfileResponseControlPlaneEndpointOutput() ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput {
	return o
}

func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput) ToControlPlaneEndpointProfileResponseControlPlaneEndpointOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput {
	return o
}

// Host IP address for API server
func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneEndpointProfileResponseControlPlaneEndpoint) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// Port for the API server
func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneEndpointProfileResponseControlPlaneEndpoint) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput struct{ *pulumi.OutputState }

func (ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneEndpointProfileResponseControlPlaneEndpoint)(nil)).Elem()
}

func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput) ToControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput() ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput {
	return o
}

func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput) ToControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutputWithContext(ctx context.Context) ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput {
	return o
}

func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput) Elem() ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput {
	return o.ApplyT(func(v *ControlPlaneEndpointProfileResponseControlPlaneEndpoint) ControlPlaneEndpointProfileResponseControlPlaneEndpoint {
		if v != nil {
			return *v
		}
		var ret ControlPlaneEndpointProfileResponseControlPlaneEndpoint
		return ret
	}).(ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput)
}

// Host IP address for API server
func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneEndpointProfileResponseControlPlaneEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.HostIP
	}).(pulumi.StringPtrOutput)
}

// Port for the API server
func (o ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneEndpointProfileResponseControlPlaneEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// ControlPlaneProfile - The control plane properties for the provisioned cluster.
type ControlPlaneProfile struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfile `pulumi:"cloudProviderProfile"`
	// API server endpoint for the control plane
	ControlPlaneEndpoint *ControlPlaneEndpointProfileControlPlaneEndpoint `pulumi:"controlPlaneEndpoint"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile *LinuxProfileProperties `pulumi:"linuxProfile"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode *string `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// The version of node image
	NodeImageVersion *string `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType *string `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ControlPlaneProfile
func (val *ControlPlaneProfile) Defaults() *ControlPlaneProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.Mode == nil {
		mode_ := "User"
		tmp.Mode = &mode_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// ControlPlaneProfileInput is an input type that accepts ControlPlaneProfileArgs and ControlPlaneProfileOutput values.
// You can construct a concrete instance of `ControlPlaneProfileInput` via:
//
//	ControlPlaneProfileArgs{...}
type ControlPlaneProfileInput interface {
	pulumi.Input

	ToControlPlaneProfileOutput() ControlPlaneProfileOutput
	ToControlPlaneProfileOutputWithContext(context.Context) ControlPlaneProfileOutput
}

// ControlPlaneProfile - The control plane properties for the provisioned cluster.
type ControlPlaneProfileArgs struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile CloudProviderProfilePtrInput `pulumi:"cloudProviderProfile"`
	// API server endpoint for the control plane
	ControlPlaneEndpoint ControlPlaneEndpointProfileControlPlaneEndpointPtrInput `pulumi:"controlPlaneEndpoint"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile LinuxProfilePropertiesPtrInput `pulumi:"linuxProfile"`
	// The maximum number of nodes for auto-scaling
	MaxCount pulumi.IntPtrInput `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods pulumi.IntPtrInput `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount pulumi.IntPtrInput `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The version of node image
	NodeImageVersion pulumi.StringPtrInput `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels pulumi.StringMapInput `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints pulumi.StringArrayInput `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ControlPlaneProfileArgs
func (val *ControlPlaneProfileArgs) Defaults() *ControlPlaneProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		tmp.Count = pulumi.IntPtr(1)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("User")
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	return &tmp
}
func (ControlPlaneProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneProfile)(nil)).Elem()
}

func (i ControlPlaneProfileArgs) ToControlPlaneProfileOutput() ControlPlaneProfileOutput {
	return i.ToControlPlaneProfileOutputWithContext(context.Background())
}

func (i ControlPlaneProfileArgs) ToControlPlaneProfileOutputWithContext(ctx context.Context) ControlPlaneProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneProfileOutput)
}

func (i ControlPlaneProfileArgs) ToControlPlaneProfilePtrOutput() ControlPlaneProfilePtrOutput {
	return i.ToControlPlaneProfilePtrOutputWithContext(context.Background())
}

func (i ControlPlaneProfileArgs) ToControlPlaneProfilePtrOutputWithContext(ctx context.Context) ControlPlaneProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneProfileOutput).ToControlPlaneProfilePtrOutputWithContext(ctx)
}

// ControlPlaneProfilePtrInput is an input type that accepts ControlPlaneProfileArgs, ControlPlaneProfilePtr and ControlPlaneProfilePtrOutput values.
// You can construct a concrete instance of `ControlPlaneProfilePtrInput` via:
//
//	        ControlPlaneProfileArgs{...}
//
//	or:
//
//	        nil
type ControlPlaneProfilePtrInput interface {
	pulumi.Input

	ToControlPlaneProfilePtrOutput() ControlPlaneProfilePtrOutput
	ToControlPlaneProfilePtrOutputWithContext(context.Context) ControlPlaneProfilePtrOutput
}

type controlPlaneProfilePtrType ControlPlaneProfileArgs

func ControlPlaneProfilePtr(v *ControlPlaneProfileArgs) ControlPlaneProfilePtrInput {
	return (*controlPlaneProfilePtrType)(v)
}

func (*controlPlaneProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneProfile)(nil)).Elem()
}

func (i *controlPlaneProfilePtrType) ToControlPlaneProfilePtrOutput() ControlPlaneProfilePtrOutput {
	return i.ToControlPlaneProfilePtrOutputWithContext(context.Background())
}

func (i *controlPlaneProfilePtrType) ToControlPlaneProfilePtrOutputWithContext(ctx context.Context) ControlPlaneProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneProfilePtrOutput)
}

// ControlPlaneProfile - The control plane properties for the provisioned cluster.
type ControlPlaneProfileOutput struct{ *pulumi.OutputState }

func (ControlPlaneProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneProfile)(nil)).Elem()
}

func (o ControlPlaneProfileOutput) ToControlPlaneProfileOutput() ControlPlaneProfileOutput {
	return o
}

func (o ControlPlaneProfileOutput) ToControlPlaneProfileOutputWithContext(ctx context.Context) ControlPlaneProfileOutput {
	return o
}

func (o ControlPlaneProfileOutput) ToControlPlaneProfilePtrOutput() ControlPlaneProfilePtrOutput {
	return o.ToControlPlaneProfilePtrOutputWithContext(context.Background())
}

func (o ControlPlaneProfileOutput) ToControlPlaneProfilePtrOutputWithContext(ctx context.Context) ControlPlaneProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControlPlaneProfile) *ControlPlaneProfile {
		return &v
	}).(ControlPlaneProfilePtrOutput)
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o ControlPlaneProfileOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControlPlaneProfile) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o ControlPlaneProfileOutput) CloudProviderProfile() CloudProviderProfilePtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *CloudProviderProfile { return v.CloudProviderProfile }).(CloudProviderProfilePtrOutput)
}

// API server endpoint for the control plane
func (o ControlPlaneProfileOutput) ControlPlaneEndpoint() ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *ControlPlaneEndpointProfileControlPlaneEndpoint {
		return v.ControlPlaneEndpoint
	}).(ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ControlPlaneProfileOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o ControlPlaneProfileOutput) LinuxProfile() LinuxProfilePropertiesPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *LinuxProfileProperties { return v.LinuxProfile }).(LinuxProfilePropertiesPtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o ControlPlaneProfileOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o ControlPlaneProfileOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o ControlPlaneProfileOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o ControlPlaneProfileOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o ControlPlaneProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The version of node image
func (o ControlPlaneProfileOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *string { return v.NodeImageVersion }).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o ControlPlaneProfileOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControlPlaneProfile) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o ControlPlaneProfileOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControlPlaneProfile) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o ControlPlaneProfileOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o ControlPlaneProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ControlPlaneProfilePtrOutput struct{ *pulumi.OutputState }

func (ControlPlaneProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneProfile)(nil)).Elem()
}

func (o ControlPlaneProfilePtrOutput) ToControlPlaneProfilePtrOutput() ControlPlaneProfilePtrOutput {
	return o
}

func (o ControlPlaneProfilePtrOutput) ToControlPlaneProfilePtrOutputWithContext(ctx context.Context) ControlPlaneProfilePtrOutput {
	return o
}

func (o ControlPlaneProfilePtrOutput) Elem() ControlPlaneProfileOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) ControlPlaneProfile {
		if v != nil {
			return *v
		}
		var ret ControlPlaneProfile
		return ret
	}).(ControlPlaneProfileOutput)
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o ControlPlaneProfilePtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZones
	}).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o ControlPlaneProfilePtrOutput) CloudProviderProfile() CloudProviderProfilePtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *CloudProviderProfile {
		if v == nil {
			return nil
		}
		return v.CloudProviderProfile
	}).(CloudProviderProfilePtrOutput)
}

// API server endpoint for the control plane
func (o ControlPlaneProfilePtrOutput) ControlPlaneEndpoint() ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *ControlPlaneEndpointProfileControlPlaneEndpoint {
		if v == nil {
			return nil
		}
		return v.ControlPlaneEndpoint
	}).(ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ControlPlaneProfilePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o ControlPlaneProfilePtrOutput) LinuxProfile() LinuxProfilePropertiesPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *LinuxProfileProperties {
		if v == nil {
			return nil
		}
		return v.LinuxProfile
	}).(LinuxProfilePropertiesPtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o ControlPlaneProfilePtrOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *int {
		if v == nil {
			return nil
		}
		return v.MaxCount
	}).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o ControlPlaneProfilePtrOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *int {
		if v == nil {
			return nil
		}
		return v.MaxPods
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o ControlPlaneProfilePtrOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *int {
		if v == nil {
			return nil
		}
		return v.MinCount
	}).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o ControlPlaneProfilePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o ControlPlaneProfilePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The version of node image
func (o ControlPlaneProfilePtrOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *string {
		if v == nil {
			return nil
		}
		return v.NodeImageVersion
	}).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o ControlPlaneProfilePtrOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeLabels
	}).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o ControlPlaneProfilePtrOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) []string {
		if v == nil {
			return nil
		}
		return v.NodeTaints
	}).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o ControlPlaneProfilePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o ControlPlaneProfilePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfile) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// ControlPlaneProfile - The control plane properties for the provisioned cluster.
type ControlPlaneProfileResponse struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfileResponse `pulumi:"cloudProviderProfile"`
	// API server endpoint for the control plane
	ControlPlaneEndpoint *ControlPlaneEndpointProfileResponseControlPlaneEndpoint `pulumi:"controlPlaneEndpoint"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile *LinuxProfilePropertiesResponse `pulumi:"linuxProfile"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode *string `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// The version of node image
	NodeImageVersion *string `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType *string `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ControlPlaneProfileResponse
func (val *ControlPlaneProfileResponse) Defaults() *ControlPlaneProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.Mode == nil {
		mode_ := "User"
		tmp.Mode = &mode_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// ControlPlaneProfile - The control plane properties for the provisioned cluster.
type ControlPlaneProfileResponseOutput struct{ *pulumi.OutputState }

func (ControlPlaneProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneProfileResponse)(nil)).Elem()
}

func (o ControlPlaneProfileResponseOutput) ToControlPlaneProfileResponseOutput() ControlPlaneProfileResponseOutput {
	return o
}

func (o ControlPlaneProfileResponseOutput) ToControlPlaneProfileResponseOutputWithContext(ctx context.Context) ControlPlaneProfileResponseOutput {
	return o
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o ControlPlaneProfileResponseOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o ControlPlaneProfileResponseOutput) CloudProviderProfile() CloudProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *CloudProviderProfileResponse { return v.CloudProviderProfile }).(CloudProviderProfileResponsePtrOutput)
}

// API server endpoint for the control plane
func (o ControlPlaneProfileResponseOutput) ControlPlaneEndpoint() ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *ControlPlaneEndpointProfileResponseControlPlaneEndpoint {
		return v.ControlPlaneEndpoint
	}).(ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ControlPlaneProfileResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o ControlPlaneProfileResponseOutput) LinuxProfile() LinuxProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *LinuxProfilePropertiesResponse { return v.LinuxProfile }).(LinuxProfilePropertiesResponsePtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o ControlPlaneProfileResponseOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o ControlPlaneProfileResponseOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o ControlPlaneProfileResponseOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o ControlPlaneProfileResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o ControlPlaneProfileResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The version of node image
func (o ControlPlaneProfileResponseOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *string { return v.NodeImageVersion }).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o ControlPlaneProfileResponseOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o ControlPlaneProfileResponseOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o ControlPlaneProfileResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o ControlPlaneProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlPlaneProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ControlPlaneProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ControlPlaneProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPlaneProfileResponse)(nil)).Elem()
}

func (o ControlPlaneProfileResponsePtrOutput) ToControlPlaneProfileResponsePtrOutput() ControlPlaneProfileResponsePtrOutput {
	return o
}

func (o ControlPlaneProfileResponsePtrOutput) ToControlPlaneProfileResponsePtrOutputWithContext(ctx context.Context) ControlPlaneProfileResponsePtrOutput {
	return o
}

func (o ControlPlaneProfileResponsePtrOutput) Elem() ControlPlaneProfileResponseOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) ControlPlaneProfileResponse {
		if v != nil {
			return *v
		}
		var ret ControlPlaneProfileResponse
		return ret
	}).(ControlPlaneProfileResponseOutput)
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o ControlPlaneProfileResponsePtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZones
	}).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o ControlPlaneProfileResponsePtrOutput) CloudProviderProfile() CloudProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *CloudProviderProfileResponse {
		if v == nil {
			return nil
		}
		return v.CloudProviderProfile
	}).(CloudProviderProfileResponsePtrOutput)
}

// API server endpoint for the control plane
func (o ControlPlaneProfileResponsePtrOutput) ControlPlaneEndpoint() ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *ControlPlaneEndpointProfileResponseControlPlaneEndpoint {
		if v == nil {
			return nil
		}
		return v.ControlPlaneEndpoint
	}).(ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ControlPlaneProfileResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o ControlPlaneProfileResponsePtrOutput) LinuxProfile() LinuxProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *LinuxProfilePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.LinuxProfile
	}).(LinuxProfilePropertiesResponsePtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o ControlPlaneProfileResponsePtrOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxCount
	}).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o ControlPlaneProfileResponsePtrOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPods
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o ControlPlaneProfileResponsePtrOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinCount
	}).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o ControlPlaneProfileResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o ControlPlaneProfileResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The version of node image
func (o ControlPlaneProfileResponsePtrOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeImageVersion
	}).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o ControlPlaneProfileResponsePtrOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeLabels
	}).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o ControlPlaneProfileResponsePtrOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.NodeTaints
	}).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o ControlPlaneProfileResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o ControlPlaneProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControlPlaneProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Configurations for provisioning the cluster with HTTP proxy servers.
type HttpProxyConfig struct {
	// The HTTP proxy server endpoint to use.
	HttpProxy *string `pulumi:"httpProxy"`
	// The HTTPS proxy server endpoint to use.
	HttpsProxy *string `pulumi:"httpsProxy"`
	// The endpoints that should not go through proxy.
	NoProxy []string `pulumi:"noProxy"`
	// Password to use for connecting to proxy server
	Password *string `pulumi:"password"`
	// Alternative CA cert to use for connecting to proxy servers.
	TrustedCa *string `pulumi:"trustedCa"`
	// Username to use for connecting to proxy server
	Username *string `pulumi:"username"`
}

// HttpProxyConfigInput is an input type that accepts HttpProxyConfigArgs and HttpProxyConfigOutput values.
// You can construct a concrete instance of `HttpProxyConfigInput` via:
//
//	HttpProxyConfigArgs{...}
type HttpProxyConfigInput interface {
	pulumi.Input

	ToHttpProxyConfigOutput() HttpProxyConfigOutput
	ToHttpProxyConfigOutputWithContext(context.Context) HttpProxyConfigOutput
}

// Configurations for provisioning the cluster with HTTP proxy servers.
type HttpProxyConfigArgs struct {
	// The HTTP proxy server endpoint to use.
	HttpProxy pulumi.StringPtrInput `pulumi:"httpProxy"`
	// The HTTPS proxy server endpoint to use.
	HttpsProxy pulumi.StringPtrInput `pulumi:"httpsProxy"`
	// The endpoints that should not go through proxy.
	NoProxy pulumi.StringArrayInput `pulumi:"noProxy"`
	// Password to use for connecting to proxy server
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Alternative CA cert to use for connecting to proxy servers.
	TrustedCa pulumi.StringPtrInput `pulumi:"trustedCa"`
	// Username to use for connecting to proxy server
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (HttpProxyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpProxyConfig)(nil)).Elem()
}

func (i HttpProxyConfigArgs) ToHttpProxyConfigOutput() HttpProxyConfigOutput {
	return i.ToHttpProxyConfigOutputWithContext(context.Background())
}

func (i HttpProxyConfigArgs) ToHttpProxyConfigOutputWithContext(ctx context.Context) HttpProxyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpProxyConfigOutput)
}

func (i HttpProxyConfigArgs) ToHttpProxyConfigPtrOutput() HttpProxyConfigPtrOutput {
	return i.ToHttpProxyConfigPtrOutputWithContext(context.Background())
}

func (i HttpProxyConfigArgs) ToHttpProxyConfigPtrOutputWithContext(ctx context.Context) HttpProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpProxyConfigOutput).ToHttpProxyConfigPtrOutputWithContext(ctx)
}

// HttpProxyConfigPtrInput is an input type that accepts HttpProxyConfigArgs, HttpProxyConfigPtr and HttpProxyConfigPtrOutput values.
// You can construct a concrete instance of `HttpProxyConfigPtrInput` via:
//
//	        HttpProxyConfigArgs{...}
//
//	or:
//
//	        nil
type HttpProxyConfigPtrInput interface {
	pulumi.Input

	ToHttpProxyConfigPtrOutput() HttpProxyConfigPtrOutput
	ToHttpProxyConfigPtrOutputWithContext(context.Context) HttpProxyConfigPtrOutput
}

type httpProxyConfigPtrType HttpProxyConfigArgs

func HttpProxyConfigPtr(v *HttpProxyConfigArgs) HttpProxyConfigPtrInput {
	return (*httpProxyConfigPtrType)(v)
}

func (*httpProxyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpProxyConfig)(nil)).Elem()
}

func (i *httpProxyConfigPtrType) ToHttpProxyConfigPtrOutput() HttpProxyConfigPtrOutput {
	return i.ToHttpProxyConfigPtrOutputWithContext(context.Background())
}

func (i *httpProxyConfigPtrType) ToHttpProxyConfigPtrOutputWithContext(ctx context.Context) HttpProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpProxyConfigPtrOutput)
}

// Configurations for provisioning the cluster with HTTP proxy servers.
type HttpProxyConfigOutput struct{ *pulumi.OutputState }

func (HttpProxyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpProxyConfig)(nil)).Elem()
}

func (o HttpProxyConfigOutput) ToHttpProxyConfigOutput() HttpProxyConfigOutput {
	return o
}

func (o HttpProxyConfigOutput) ToHttpProxyConfigOutputWithContext(ctx context.Context) HttpProxyConfigOutput {
	return o
}

func (o HttpProxyConfigOutput) ToHttpProxyConfigPtrOutput() HttpProxyConfigPtrOutput {
	return o.ToHttpProxyConfigPtrOutputWithContext(context.Background())
}

func (o HttpProxyConfigOutput) ToHttpProxyConfigPtrOutputWithContext(ctx context.Context) HttpProxyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpProxyConfig) *HttpProxyConfig {
		return &v
	}).(HttpProxyConfigPtrOutput)
}

// The HTTP proxy server endpoint to use.
func (o HttpProxyConfigOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfig) *string { return v.HttpProxy }).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o HttpProxyConfigOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfig) *string { return v.HttpsProxy }).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o HttpProxyConfigOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpProxyConfig) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Password to use for connecting to proxy server
func (o HttpProxyConfigOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfig) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o HttpProxyConfigOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfig) *string { return v.TrustedCa }).(pulumi.StringPtrOutput)
}

// Username to use for connecting to proxy server
func (o HttpProxyConfigOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfig) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type HttpProxyConfigPtrOutput struct{ *pulumi.OutputState }

func (HttpProxyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpProxyConfig)(nil)).Elem()
}

func (o HttpProxyConfigPtrOutput) ToHttpProxyConfigPtrOutput() HttpProxyConfigPtrOutput {
	return o
}

func (o HttpProxyConfigPtrOutput) ToHttpProxyConfigPtrOutputWithContext(ctx context.Context) HttpProxyConfigPtrOutput {
	return o
}

func (o HttpProxyConfigPtrOutput) Elem() HttpProxyConfigOutput {
	return o.ApplyT(func(v *HttpProxyConfig) HttpProxyConfig {
		if v != nil {
			return *v
		}
		var ret HttpProxyConfig
		return ret
	}).(HttpProxyConfigOutput)
}

// The HTTP proxy server endpoint to use.
func (o HttpProxyConfigPtrOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.HttpProxy
	}).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o HttpProxyConfigPtrOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.HttpsProxy
	}).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o HttpProxyConfigPtrOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpProxyConfig) []string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringArrayOutput)
}

// Password to use for connecting to proxy server
func (o HttpProxyConfigPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o HttpProxyConfigPtrOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.TrustedCa
	}).(pulumi.StringPtrOutput)
}

// Username to use for connecting to proxy server
func (o HttpProxyConfigPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Configurations for provisioning the cluster with HTTP proxy servers.
type HttpProxyConfigResponseResponse struct {
	// The HTTP proxy server endpoint to use.
	HttpProxy *string `pulumi:"httpProxy"`
	// The HTTPS proxy server endpoint to use.
	HttpsProxy *string `pulumi:"httpsProxy"`
	// The endpoints that should not go through proxy.
	NoProxy []string `pulumi:"noProxy"`
	// Alternative CA cert to use for connecting to proxy servers.
	TrustedCa *string `pulumi:"trustedCa"`
	// Username to use for connecting to proxy server
	Username *string `pulumi:"username"`
}

// Configurations for provisioning the cluster with HTTP proxy servers.
type HttpProxyConfigResponseResponseOutput struct{ *pulumi.OutputState }

func (HttpProxyConfigResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpProxyConfigResponseResponse)(nil)).Elem()
}

func (o HttpProxyConfigResponseResponseOutput) ToHttpProxyConfigResponseResponseOutput() HttpProxyConfigResponseResponseOutput {
	return o
}

func (o HttpProxyConfigResponseResponseOutput) ToHttpProxyConfigResponseResponseOutputWithContext(ctx context.Context) HttpProxyConfigResponseResponseOutput {
	return o
}

// The HTTP proxy server endpoint to use.
func (o HttpProxyConfigResponseResponseOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfigResponseResponse) *string { return v.HttpProxy }).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o HttpProxyConfigResponseResponseOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfigResponseResponse) *string { return v.HttpsProxy }).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o HttpProxyConfigResponseResponseOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpProxyConfigResponseResponse) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o HttpProxyConfigResponseResponseOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfigResponseResponse) *string { return v.TrustedCa }).(pulumi.StringPtrOutput)
}

// Username to use for connecting to proxy server
func (o HttpProxyConfigResponseResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpProxyConfigResponseResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type HttpProxyConfigResponseResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpProxyConfigResponseResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpProxyConfigResponseResponse)(nil)).Elem()
}

func (o HttpProxyConfigResponseResponsePtrOutput) ToHttpProxyConfigResponseResponsePtrOutput() HttpProxyConfigResponseResponsePtrOutput {
	return o
}

func (o HttpProxyConfigResponseResponsePtrOutput) ToHttpProxyConfigResponseResponsePtrOutputWithContext(ctx context.Context) HttpProxyConfigResponseResponsePtrOutput {
	return o
}

func (o HttpProxyConfigResponseResponsePtrOutput) Elem() HttpProxyConfigResponseResponseOutput {
	return o.ApplyT(func(v *HttpProxyConfigResponseResponse) HttpProxyConfigResponseResponse {
		if v != nil {
			return *v
		}
		var ret HttpProxyConfigResponseResponse
		return ret
	}).(HttpProxyConfigResponseResponseOutput)
}

// The HTTP proxy server endpoint to use.
func (o HttpProxyConfigResponseResponsePtrOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfigResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpProxy
	}).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o HttpProxyConfigResponseResponsePtrOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfigResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpsProxy
	}).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o HttpProxyConfigResponseResponsePtrOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpProxyConfigResponseResponse) []string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringArrayOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o HttpProxyConfigResponseResponsePtrOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfigResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrustedCa
	}).(pulumi.StringPtrOutput)
}

// Username to use for connecting to proxy server
func (o HttpProxyConfigResponseResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpProxyConfigResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// LinuxProfile - Profile for Linux VMs in the container service cluster.
type LinuxProfileProperties struct {
	// AdminUsername - The administrator username to use for Linux VMs.
	AdminUsername *string `pulumi:"adminUsername"`
	// SSH - SSH configuration for Linux-based VMs running on Azure.
	Ssh *LinuxProfilePropertiesSsh `pulumi:"ssh"`
}

// LinuxProfilePropertiesInput is an input type that accepts LinuxProfilePropertiesArgs and LinuxProfilePropertiesOutput values.
// You can construct a concrete instance of `LinuxProfilePropertiesInput` via:
//
//	LinuxProfilePropertiesArgs{...}
type LinuxProfilePropertiesInput interface {
	pulumi.Input

	ToLinuxProfilePropertiesOutput() LinuxProfilePropertiesOutput
	ToLinuxProfilePropertiesOutputWithContext(context.Context) LinuxProfilePropertiesOutput
}

// LinuxProfile - Profile for Linux VMs in the container service cluster.
type LinuxProfilePropertiesArgs struct {
	// AdminUsername - The administrator username to use for Linux VMs.
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// SSH - SSH configuration for Linux-based VMs running on Azure.
	Ssh LinuxProfilePropertiesSshPtrInput `pulumi:"ssh"`
}

func (LinuxProfilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfileProperties)(nil)).Elem()
}

func (i LinuxProfilePropertiesArgs) ToLinuxProfilePropertiesOutput() LinuxProfilePropertiesOutput {
	return i.ToLinuxProfilePropertiesOutputWithContext(context.Background())
}

func (i LinuxProfilePropertiesArgs) ToLinuxProfilePropertiesOutputWithContext(ctx context.Context) LinuxProfilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesOutput)
}

func (i LinuxProfilePropertiesArgs) ToLinuxProfilePropertiesPtrOutput() LinuxProfilePropertiesPtrOutput {
	return i.ToLinuxProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i LinuxProfilePropertiesArgs) ToLinuxProfilePropertiesPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesOutput).ToLinuxProfilePropertiesPtrOutputWithContext(ctx)
}

// LinuxProfilePropertiesPtrInput is an input type that accepts LinuxProfilePropertiesArgs, LinuxProfilePropertiesPtr and LinuxProfilePropertiesPtrOutput values.
// You can construct a concrete instance of `LinuxProfilePropertiesPtrInput` via:
//
//	        LinuxProfilePropertiesArgs{...}
//
//	or:
//
//	        nil
type LinuxProfilePropertiesPtrInput interface {
	pulumi.Input

	ToLinuxProfilePropertiesPtrOutput() LinuxProfilePropertiesPtrOutput
	ToLinuxProfilePropertiesPtrOutputWithContext(context.Context) LinuxProfilePropertiesPtrOutput
}

type linuxProfilePropertiesPtrType LinuxProfilePropertiesArgs

func LinuxProfilePropertiesPtr(v *LinuxProfilePropertiesArgs) LinuxProfilePropertiesPtrInput {
	return (*linuxProfilePropertiesPtrType)(v)
}

func (*linuxProfilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxProfileProperties)(nil)).Elem()
}

func (i *linuxProfilePropertiesPtrType) ToLinuxProfilePropertiesPtrOutput() LinuxProfilePropertiesPtrOutput {
	return i.ToLinuxProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i *linuxProfilePropertiesPtrType) ToLinuxProfilePropertiesPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesPtrOutput)
}

// LinuxProfile - Profile for Linux VMs in the container service cluster.
type LinuxProfilePropertiesOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfileProperties)(nil)).Elem()
}

func (o LinuxProfilePropertiesOutput) ToLinuxProfilePropertiesOutput() LinuxProfilePropertiesOutput {
	return o
}

func (o LinuxProfilePropertiesOutput) ToLinuxProfilePropertiesOutputWithContext(ctx context.Context) LinuxProfilePropertiesOutput {
	return o
}

func (o LinuxProfilePropertiesOutput) ToLinuxProfilePropertiesPtrOutput() LinuxProfilePropertiesPtrOutput {
	return o.ToLinuxProfilePropertiesPtrOutputWithContext(context.Background())
}

func (o LinuxProfilePropertiesOutput) ToLinuxProfilePropertiesPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxProfileProperties) *LinuxProfileProperties {
		return &v
	}).(LinuxProfilePropertiesPtrOutput)
}

// AdminUsername - The administrator username to use for Linux VMs.
func (o LinuxProfilePropertiesOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxProfileProperties) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
func (o LinuxProfilePropertiesOutput) Ssh() LinuxProfilePropertiesSshPtrOutput {
	return o.ApplyT(func(v LinuxProfileProperties) *LinuxProfilePropertiesSsh { return v.Ssh }).(LinuxProfilePropertiesSshPtrOutput)
}

type LinuxProfilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxProfileProperties)(nil)).Elem()
}

func (o LinuxProfilePropertiesPtrOutput) ToLinuxProfilePropertiesPtrOutput() LinuxProfilePropertiesPtrOutput {
	return o
}

func (o LinuxProfilePropertiesPtrOutput) ToLinuxProfilePropertiesPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesPtrOutput {
	return o
}

func (o LinuxProfilePropertiesPtrOutput) Elem() LinuxProfilePropertiesOutput {
	return o.ApplyT(func(v *LinuxProfileProperties) LinuxProfileProperties {
		if v != nil {
			return *v
		}
		var ret LinuxProfileProperties
		return ret
	}).(LinuxProfilePropertiesOutput)
}

// AdminUsername - The administrator username to use for Linux VMs.
func (o LinuxProfilePropertiesPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxProfileProperties) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
func (o LinuxProfilePropertiesPtrOutput) Ssh() LinuxProfilePropertiesSshPtrOutput {
	return o.ApplyT(func(v *LinuxProfileProperties) *LinuxProfilePropertiesSsh {
		if v == nil {
			return nil
		}
		return v.Ssh
	}).(LinuxProfilePropertiesSshPtrOutput)
}

type LinuxProfilePropertiesPublicKeys struct {
	// KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
	KeyData *string `pulumi:"keyData"`
}

// LinuxProfilePropertiesPublicKeysInput is an input type that accepts LinuxProfilePropertiesPublicKeysArgs and LinuxProfilePropertiesPublicKeysOutput values.
// You can construct a concrete instance of `LinuxProfilePropertiesPublicKeysInput` via:
//
//	LinuxProfilePropertiesPublicKeysArgs{...}
type LinuxProfilePropertiesPublicKeysInput interface {
	pulumi.Input

	ToLinuxProfilePropertiesPublicKeysOutput() LinuxProfilePropertiesPublicKeysOutput
	ToLinuxProfilePropertiesPublicKeysOutputWithContext(context.Context) LinuxProfilePropertiesPublicKeysOutput
}

type LinuxProfilePropertiesPublicKeysArgs struct {
	// KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
	KeyData pulumi.StringPtrInput `pulumi:"keyData"`
}

func (LinuxProfilePropertiesPublicKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfilePropertiesPublicKeys)(nil)).Elem()
}

func (i LinuxProfilePropertiesPublicKeysArgs) ToLinuxProfilePropertiesPublicKeysOutput() LinuxProfilePropertiesPublicKeysOutput {
	return i.ToLinuxProfilePropertiesPublicKeysOutputWithContext(context.Background())
}

func (i LinuxProfilePropertiesPublicKeysArgs) ToLinuxProfilePropertiesPublicKeysOutputWithContext(ctx context.Context) LinuxProfilePropertiesPublicKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesPublicKeysOutput)
}

// LinuxProfilePropertiesPublicKeysArrayInput is an input type that accepts LinuxProfilePropertiesPublicKeysArray and LinuxProfilePropertiesPublicKeysArrayOutput values.
// You can construct a concrete instance of `LinuxProfilePropertiesPublicKeysArrayInput` via:
//
//	LinuxProfilePropertiesPublicKeysArray{ LinuxProfilePropertiesPublicKeysArgs{...} }
type LinuxProfilePropertiesPublicKeysArrayInput interface {
	pulumi.Input

	ToLinuxProfilePropertiesPublicKeysArrayOutput() LinuxProfilePropertiesPublicKeysArrayOutput
	ToLinuxProfilePropertiesPublicKeysArrayOutputWithContext(context.Context) LinuxProfilePropertiesPublicKeysArrayOutput
}

type LinuxProfilePropertiesPublicKeysArray []LinuxProfilePropertiesPublicKeysInput

func (LinuxProfilePropertiesPublicKeysArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinuxProfilePropertiesPublicKeys)(nil)).Elem()
}

func (i LinuxProfilePropertiesPublicKeysArray) ToLinuxProfilePropertiesPublicKeysArrayOutput() LinuxProfilePropertiesPublicKeysArrayOutput {
	return i.ToLinuxProfilePropertiesPublicKeysArrayOutputWithContext(context.Background())
}

func (i LinuxProfilePropertiesPublicKeysArray) ToLinuxProfilePropertiesPublicKeysArrayOutputWithContext(ctx context.Context) LinuxProfilePropertiesPublicKeysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesPublicKeysArrayOutput)
}

type LinuxProfilePropertiesPublicKeysOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesPublicKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfilePropertiesPublicKeys)(nil)).Elem()
}

func (o LinuxProfilePropertiesPublicKeysOutput) ToLinuxProfilePropertiesPublicKeysOutput() LinuxProfilePropertiesPublicKeysOutput {
	return o
}

func (o LinuxProfilePropertiesPublicKeysOutput) ToLinuxProfilePropertiesPublicKeysOutputWithContext(ctx context.Context) LinuxProfilePropertiesPublicKeysOutput {
	return o
}

// KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
func (o LinuxProfilePropertiesPublicKeysOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxProfilePropertiesPublicKeys) *string { return v.KeyData }).(pulumi.StringPtrOutput)
}

type LinuxProfilePropertiesPublicKeysArrayOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesPublicKeysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinuxProfilePropertiesPublicKeys)(nil)).Elem()
}

func (o LinuxProfilePropertiesPublicKeysArrayOutput) ToLinuxProfilePropertiesPublicKeysArrayOutput() LinuxProfilePropertiesPublicKeysArrayOutput {
	return o
}

func (o LinuxProfilePropertiesPublicKeysArrayOutput) ToLinuxProfilePropertiesPublicKeysArrayOutputWithContext(ctx context.Context) LinuxProfilePropertiesPublicKeysArrayOutput {
	return o
}

func (o LinuxProfilePropertiesPublicKeysArrayOutput) Index(i pulumi.IntInput) LinuxProfilePropertiesPublicKeysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinuxProfilePropertiesPublicKeys {
		return vs[0].([]LinuxProfilePropertiesPublicKeys)[vs[1].(int)]
	}).(LinuxProfilePropertiesPublicKeysOutput)
}

// LinuxProfile - Profile for Linux VMs in the container service cluster.
type LinuxProfilePropertiesResponse struct {
	// AdminUsername - The administrator username to use for Linux VMs.
	AdminUsername *string `pulumi:"adminUsername"`
	// SSH - SSH configuration for Linux-based VMs running on Azure.
	Ssh *LinuxProfilePropertiesResponseSsh `pulumi:"ssh"`
}

// LinuxProfile - Profile for Linux VMs in the container service cluster.
type LinuxProfilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfilePropertiesResponse)(nil)).Elem()
}

func (o LinuxProfilePropertiesResponseOutput) ToLinuxProfilePropertiesResponseOutput() LinuxProfilePropertiesResponseOutput {
	return o
}

func (o LinuxProfilePropertiesResponseOutput) ToLinuxProfilePropertiesResponseOutputWithContext(ctx context.Context) LinuxProfilePropertiesResponseOutput {
	return o
}

// AdminUsername - The administrator username to use for Linux VMs.
func (o LinuxProfilePropertiesResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxProfilePropertiesResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
func (o LinuxProfilePropertiesResponseOutput) Ssh() LinuxProfilePropertiesResponseSshPtrOutput {
	return o.ApplyT(func(v LinuxProfilePropertiesResponse) *LinuxProfilePropertiesResponseSsh { return v.Ssh }).(LinuxProfilePropertiesResponseSshPtrOutput)
}

type LinuxProfilePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxProfilePropertiesResponse)(nil)).Elem()
}

func (o LinuxProfilePropertiesResponsePtrOutput) ToLinuxProfilePropertiesResponsePtrOutput() LinuxProfilePropertiesResponsePtrOutput {
	return o
}

func (o LinuxProfilePropertiesResponsePtrOutput) ToLinuxProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesResponsePtrOutput {
	return o
}

func (o LinuxProfilePropertiesResponsePtrOutput) Elem() LinuxProfilePropertiesResponseOutput {
	return o.ApplyT(func(v *LinuxProfilePropertiesResponse) LinuxProfilePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LinuxProfilePropertiesResponse
		return ret
	}).(LinuxProfilePropertiesResponseOutput)
}

// AdminUsername - The administrator username to use for Linux VMs.
func (o LinuxProfilePropertiesResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
func (o LinuxProfilePropertiesResponsePtrOutput) Ssh() LinuxProfilePropertiesResponseSshPtrOutput {
	return o.ApplyT(func(v *LinuxProfilePropertiesResponse) *LinuxProfilePropertiesResponseSsh {
		if v == nil {
			return nil
		}
		return v.Ssh
	}).(LinuxProfilePropertiesResponseSshPtrOutput)
}

type LinuxProfilePropertiesResponsePublicKeys struct {
	// KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
	KeyData *string `pulumi:"keyData"`
}

type LinuxProfilePropertiesResponsePublicKeysOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesResponsePublicKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfilePropertiesResponsePublicKeys)(nil)).Elem()
}

func (o LinuxProfilePropertiesResponsePublicKeysOutput) ToLinuxProfilePropertiesResponsePublicKeysOutput() LinuxProfilePropertiesResponsePublicKeysOutput {
	return o
}

func (o LinuxProfilePropertiesResponsePublicKeysOutput) ToLinuxProfilePropertiesResponsePublicKeysOutputWithContext(ctx context.Context) LinuxProfilePropertiesResponsePublicKeysOutput {
	return o
}

// KeyData - Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
func (o LinuxProfilePropertiesResponsePublicKeysOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxProfilePropertiesResponsePublicKeys) *string { return v.KeyData }).(pulumi.StringPtrOutput)
}

type LinuxProfilePropertiesResponsePublicKeysArrayOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesResponsePublicKeysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinuxProfilePropertiesResponsePublicKeys)(nil)).Elem()
}

func (o LinuxProfilePropertiesResponsePublicKeysArrayOutput) ToLinuxProfilePropertiesResponsePublicKeysArrayOutput() LinuxProfilePropertiesResponsePublicKeysArrayOutput {
	return o
}

func (o LinuxProfilePropertiesResponsePublicKeysArrayOutput) ToLinuxProfilePropertiesResponsePublicKeysArrayOutputWithContext(ctx context.Context) LinuxProfilePropertiesResponsePublicKeysArrayOutput {
	return o
}

func (o LinuxProfilePropertiesResponsePublicKeysArrayOutput) Index(i pulumi.IntInput) LinuxProfilePropertiesResponsePublicKeysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinuxProfilePropertiesResponsePublicKeys {
		return vs[0].([]LinuxProfilePropertiesResponsePublicKeys)[vs[1].(int)]
	}).(LinuxProfilePropertiesResponsePublicKeysOutput)
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
type LinuxProfilePropertiesResponseSsh struct {
	// PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
	PublicKeys []LinuxProfilePropertiesResponsePublicKeys `pulumi:"publicKeys"`
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
type LinuxProfilePropertiesResponseSshOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesResponseSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfilePropertiesResponseSsh)(nil)).Elem()
}

func (o LinuxProfilePropertiesResponseSshOutput) ToLinuxProfilePropertiesResponseSshOutput() LinuxProfilePropertiesResponseSshOutput {
	return o
}

func (o LinuxProfilePropertiesResponseSshOutput) ToLinuxProfilePropertiesResponseSshOutputWithContext(ctx context.Context) LinuxProfilePropertiesResponseSshOutput {
	return o
}

// PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
func (o LinuxProfilePropertiesResponseSshOutput) PublicKeys() LinuxProfilePropertiesResponsePublicKeysArrayOutput {
	return o.ApplyT(func(v LinuxProfilePropertiesResponseSsh) []LinuxProfilePropertiesResponsePublicKeys {
		return v.PublicKeys
	}).(LinuxProfilePropertiesResponsePublicKeysArrayOutput)
}

type LinuxProfilePropertiesResponseSshPtrOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesResponseSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxProfilePropertiesResponseSsh)(nil)).Elem()
}

func (o LinuxProfilePropertiesResponseSshPtrOutput) ToLinuxProfilePropertiesResponseSshPtrOutput() LinuxProfilePropertiesResponseSshPtrOutput {
	return o
}

func (o LinuxProfilePropertiesResponseSshPtrOutput) ToLinuxProfilePropertiesResponseSshPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesResponseSshPtrOutput {
	return o
}

func (o LinuxProfilePropertiesResponseSshPtrOutput) Elem() LinuxProfilePropertiesResponseSshOutput {
	return o.ApplyT(func(v *LinuxProfilePropertiesResponseSsh) LinuxProfilePropertiesResponseSsh {
		if v != nil {
			return *v
		}
		var ret LinuxProfilePropertiesResponseSsh
		return ret
	}).(LinuxProfilePropertiesResponseSshOutput)
}

// PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
func (o LinuxProfilePropertiesResponseSshPtrOutput) PublicKeys() LinuxProfilePropertiesResponsePublicKeysArrayOutput {
	return o.ApplyT(func(v *LinuxProfilePropertiesResponseSsh) []LinuxProfilePropertiesResponsePublicKeys {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(LinuxProfilePropertiesResponsePublicKeysArrayOutput)
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
type LinuxProfilePropertiesSsh struct {
	// PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
	PublicKeys []LinuxProfilePropertiesPublicKeys `pulumi:"publicKeys"`
}

// LinuxProfilePropertiesSshInput is an input type that accepts LinuxProfilePropertiesSshArgs and LinuxProfilePropertiesSshOutput values.
// You can construct a concrete instance of `LinuxProfilePropertiesSshInput` via:
//
//	LinuxProfilePropertiesSshArgs{...}
type LinuxProfilePropertiesSshInput interface {
	pulumi.Input

	ToLinuxProfilePropertiesSshOutput() LinuxProfilePropertiesSshOutput
	ToLinuxProfilePropertiesSshOutputWithContext(context.Context) LinuxProfilePropertiesSshOutput
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
type LinuxProfilePropertiesSshArgs struct {
	// PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
	PublicKeys LinuxProfilePropertiesPublicKeysArrayInput `pulumi:"publicKeys"`
}

func (LinuxProfilePropertiesSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfilePropertiesSsh)(nil)).Elem()
}

func (i LinuxProfilePropertiesSshArgs) ToLinuxProfilePropertiesSshOutput() LinuxProfilePropertiesSshOutput {
	return i.ToLinuxProfilePropertiesSshOutputWithContext(context.Background())
}

func (i LinuxProfilePropertiesSshArgs) ToLinuxProfilePropertiesSshOutputWithContext(ctx context.Context) LinuxProfilePropertiesSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesSshOutput)
}

func (i LinuxProfilePropertiesSshArgs) ToLinuxProfilePropertiesSshPtrOutput() LinuxProfilePropertiesSshPtrOutput {
	return i.ToLinuxProfilePropertiesSshPtrOutputWithContext(context.Background())
}

func (i LinuxProfilePropertiesSshArgs) ToLinuxProfilePropertiesSshPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesSshOutput).ToLinuxProfilePropertiesSshPtrOutputWithContext(ctx)
}

// LinuxProfilePropertiesSshPtrInput is an input type that accepts LinuxProfilePropertiesSshArgs, LinuxProfilePropertiesSshPtr and LinuxProfilePropertiesSshPtrOutput values.
// You can construct a concrete instance of `LinuxProfilePropertiesSshPtrInput` via:
//
//	        LinuxProfilePropertiesSshArgs{...}
//
//	or:
//
//	        nil
type LinuxProfilePropertiesSshPtrInput interface {
	pulumi.Input

	ToLinuxProfilePropertiesSshPtrOutput() LinuxProfilePropertiesSshPtrOutput
	ToLinuxProfilePropertiesSshPtrOutputWithContext(context.Context) LinuxProfilePropertiesSshPtrOutput
}

type linuxProfilePropertiesSshPtrType LinuxProfilePropertiesSshArgs

func LinuxProfilePropertiesSshPtr(v *LinuxProfilePropertiesSshArgs) LinuxProfilePropertiesSshPtrInput {
	return (*linuxProfilePropertiesSshPtrType)(v)
}

func (*linuxProfilePropertiesSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxProfilePropertiesSsh)(nil)).Elem()
}

func (i *linuxProfilePropertiesSshPtrType) ToLinuxProfilePropertiesSshPtrOutput() LinuxProfilePropertiesSshPtrOutput {
	return i.ToLinuxProfilePropertiesSshPtrOutputWithContext(context.Background())
}

func (i *linuxProfilePropertiesSshPtrType) ToLinuxProfilePropertiesSshPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxProfilePropertiesSshPtrOutput)
}

// SSH - SSH configuration for Linux-based VMs running on Azure.
type LinuxProfilePropertiesSshOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxProfilePropertiesSsh)(nil)).Elem()
}

func (o LinuxProfilePropertiesSshOutput) ToLinuxProfilePropertiesSshOutput() LinuxProfilePropertiesSshOutput {
	return o
}

func (o LinuxProfilePropertiesSshOutput) ToLinuxProfilePropertiesSshOutputWithContext(ctx context.Context) LinuxProfilePropertiesSshOutput {
	return o
}

func (o LinuxProfilePropertiesSshOutput) ToLinuxProfilePropertiesSshPtrOutput() LinuxProfilePropertiesSshPtrOutput {
	return o.ToLinuxProfilePropertiesSshPtrOutputWithContext(context.Background())
}

func (o LinuxProfilePropertiesSshOutput) ToLinuxProfilePropertiesSshPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxProfilePropertiesSsh) *LinuxProfilePropertiesSsh {
		return &v
	}).(LinuxProfilePropertiesSshPtrOutput)
}

// PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
func (o LinuxProfilePropertiesSshOutput) PublicKeys() LinuxProfilePropertiesPublicKeysArrayOutput {
	return o.ApplyT(func(v LinuxProfilePropertiesSsh) []LinuxProfilePropertiesPublicKeys { return v.PublicKeys }).(LinuxProfilePropertiesPublicKeysArrayOutput)
}

type LinuxProfilePropertiesSshPtrOutput struct{ *pulumi.OutputState }

func (LinuxProfilePropertiesSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxProfilePropertiesSsh)(nil)).Elem()
}

func (o LinuxProfilePropertiesSshPtrOutput) ToLinuxProfilePropertiesSshPtrOutput() LinuxProfilePropertiesSshPtrOutput {
	return o
}

func (o LinuxProfilePropertiesSshPtrOutput) ToLinuxProfilePropertiesSshPtrOutputWithContext(ctx context.Context) LinuxProfilePropertiesSshPtrOutput {
	return o
}

func (o LinuxProfilePropertiesSshPtrOutput) Elem() LinuxProfilePropertiesSshOutput {
	return o.ApplyT(func(v *LinuxProfilePropertiesSsh) LinuxProfilePropertiesSsh {
		if v != nil {
			return *v
		}
		var ret LinuxProfilePropertiesSsh
		return ret
	}).(LinuxProfilePropertiesSshOutput)
}

// PublicKeys - The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.
func (o LinuxProfilePropertiesSshPtrOutput) PublicKeys() LinuxProfilePropertiesPublicKeysArrayOutput {
	return o.ApplyT(func(v *LinuxProfilePropertiesSsh) []LinuxProfilePropertiesPublicKeys {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(LinuxProfilePropertiesPublicKeysArrayOutput)
}

// LoadBalancerProfile - Profile of the cluster load balancer.
type LoadBalancerProfile struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfile `pulumi:"cloudProviderProfile"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile *LinuxProfileProperties `pulumi:"linuxProfile"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode *string `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// The version of node image
	NodeImageVersion *string `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType *string `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for LoadBalancerProfile
func (val *LoadBalancerProfile) Defaults() *LoadBalancerProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.Mode == nil {
		mode_ := "User"
		tmp.Mode = &mode_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// LoadBalancerProfileInput is an input type that accepts LoadBalancerProfileArgs and LoadBalancerProfileOutput values.
// You can construct a concrete instance of `LoadBalancerProfileInput` via:
//
//	LoadBalancerProfileArgs{...}
type LoadBalancerProfileInput interface {
	pulumi.Input

	ToLoadBalancerProfileOutput() LoadBalancerProfileOutput
	ToLoadBalancerProfileOutputWithContext(context.Context) LoadBalancerProfileOutput
}

// LoadBalancerProfile - Profile of the cluster load balancer.
type LoadBalancerProfileArgs struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile CloudProviderProfilePtrInput `pulumi:"cloudProviderProfile"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile LinuxProfilePropertiesPtrInput `pulumi:"linuxProfile"`
	// The maximum number of nodes for auto-scaling
	MaxCount pulumi.IntPtrInput `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods pulumi.IntPtrInput `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount pulumi.IntPtrInput `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The version of node image
	NodeImageVersion pulumi.StringPtrInput `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels pulumi.StringMapInput `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints pulumi.StringArrayInput `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for LoadBalancerProfileArgs
func (val *LoadBalancerProfileArgs) Defaults() *LoadBalancerProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		tmp.Count = pulumi.IntPtr(1)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("User")
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	return &tmp
}
func (LoadBalancerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerProfile)(nil)).Elem()
}

func (i LoadBalancerProfileArgs) ToLoadBalancerProfileOutput() LoadBalancerProfileOutput {
	return i.ToLoadBalancerProfileOutputWithContext(context.Background())
}

func (i LoadBalancerProfileArgs) ToLoadBalancerProfileOutputWithContext(ctx context.Context) LoadBalancerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerProfileOutput)
}

func (i LoadBalancerProfileArgs) ToLoadBalancerProfilePtrOutput() LoadBalancerProfilePtrOutput {
	return i.ToLoadBalancerProfilePtrOutputWithContext(context.Background())
}

func (i LoadBalancerProfileArgs) ToLoadBalancerProfilePtrOutputWithContext(ctx context.Context) LoadBalancerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerProfileOutput).ToLoadBalancerProfilePtrOutputWithContext(ctx)
}

// LoadBalancerProfilePtrInput is an input type that accepts LoadBalancerProfileArgs, LoadBalancerProfilePtr and LoadBalancerProfilePtrOutput values.
// You can construct a concrete instance of `LoadBalancerProfilePtrInput` via:
//
//	        LoadBalancerProfileArgs{...}
//
//	or:
//
//	        nil
type LoadBalancerProfilePtrInput interface {
	pulumi.Input

	ToLoadBalancerProfilePtrOutput() LoadBalancerProfilePtrOutput
	ToLoadBalancerProfilePtrOutputWithContext(context.Context) LoadBalancerProfilePtrOutput
}

type loadBalancerProfilePtrType LoadBalancerProfileArgs

func LoadBalancerProfilePtr(v *LoadBalancerProfileArgs) LoadBalancerProfilePtrInput {
	return (*loadBalancerProfilePtrType)(v)
}

func (*loadBalancerProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerProfile)(nil)).Elem()
}

func (i *loadBalancerProfilePtrType) ToLoadBalancerProfilePtrOutput() LoadBalancerProfilePtrOutput {
	return i.ToLoadBalancerProfilePtrOutputWithContext(context.Background())
}

func (i *loadBalancerProfilePtrType) ToLoadBalancerProfilePtrOutputWithContext(ctx context.Context) LoadBalancerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerProfilePtrOutput)
}

// LoadBalancerProfile - Profile of the cluster load balancer.
type LoadBalancerProfileOutput struct{ *pulumi.OutputState }

func (LoadBalancerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerProfile)(nil)).Elem()
}

func (o LoadBalancerProfileOutput) ToLoadBalancerProfileOutput() LoadBalancerProfileOutput {
	return o
}

func (o LoadBalancerProfileOutput) ToLoadBalancerProfileOutputWithContext(ctx context.Context) LoadBalancerProfileOutput {
	return o
}

func (o LoadBalancerProfileOutput) ToLoadBalancerProfilePtrOutput() LoadBalancerProfilePtrOutput {
	return o.ToLoadBalancerProfilePtrOutputWithContext(context.Background())
}

func (o LoadBalancerProfileOutput) ToLoadBalancerProfilePtrOutputWithContext(ctx context.Context) LoadBalancerProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerProfile) *LoadBalancerProfile {
		return &v
	}).(LoadBalancerProfilePtrOutput)
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o LoadBalancerProfileOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerProfile) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o LoadBalancerProfileOutput) CloudProviderProfile() CloudProviderProfilePtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *CloudProviderProfile { return v.CloudProviderProfile }).(CloudProviderProfilePtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o LoadBalancerProfileOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o LoadBalancerProfileOutput) LinuxProfile() LinuxProfilePropertiesPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *LinuxProfileProperties { return v.LinuxProfile }).(LinuxProfilePropertiesPtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o LoadBalancerProfileOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o LoadBalancerProfileOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o LoadBalancerProfileOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o LoadBalancerProfileOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o LoadBalancerProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The version of node image
func (o LoadBalancerProfileOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *string { return v.NodeImageVersion }).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o LoadBalancerProfileOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LoadBalancerProfile) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o LoadBalancerProfileOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerProfile) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o LoadBalancerProfileOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o LoadBalancerProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type LoadBalancerProfilePtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerProfile)(nil)).Elem()
}

func (o LoadBalancerProfilePtrOutput) ToLoadBalancerProfilePtrOutput() LoadBalancerProfilePtrOutput {
	return o
}

func (o LoadBalancerProfilePtrOutput) ToLoadBalancerProfilePtrOutputWithContext(ctx context.Context) LoadBalancerProfilePtrOutput {
	return o
}

func (o LoadBalancerProfilePtrOutput) Elem() LoadBalancerProfileOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) LoadBalancerProfile {
		if v != nil {
			return *v
		}
		var ret LoadBalancerProfile
		return ret
	}).(LoadBalancerProfileOutput)
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o LoadBalancerProfilePtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZones
	}).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o LoadBalancerProfilePtrOutput) CloudProviderProfile() CloudProviderProfilePtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *CloudProviderProfile {
		if v == nil {
			return nil
		}
		return v.CloudProviderProfile
	}).(CloudProviderProfilePtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o LoadBalancerProfilePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o LoadBalancerProfilePtrOutput) LinuxProfile() LinuxProfilePropertiesPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *LinuxProfileProperties {
		if v == nil {
			return nil
		}
		return v.LinuxProfile
	}).(LinuxProfilePropertiesPtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o LoadBalancerProfilePtrOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *int {
		if v == nil {
			return nil
		}
		return v.MaxCount
	}).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o LoadBalancerProfilePtrOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *int {
		if v == nil {
			return nil
		}
		return v.MaxPods
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o LoadBalancerProfilePtrOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *int {
		if v == nil {
			return nil
		}
		return v.MinCount
	}).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o LoadBalancerProfilePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o LoadBalancerProfilePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The version of node image
func (o LoadBalancerProfilePtrOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *string {
		if v == nil {
			return nil
		}
		return v.NodeImageVersion
	}).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o LoadBalancerProfilePtrOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeLabels
	}).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o LoadBalancerProfilePtrOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) []string {
		if v == nil {
			return nil
		}
		return v.NodeTaints
	}).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o LoadBalancerProfilePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o LoadBalancerProfilePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfile) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// LoadBalancerProfile - Profile of the cluster load balancer.
type LoadBalancerProfileResponse struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfileResponse `pulumi:"cloudProviderProfile"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile *LinuxProfilePropertiesResponse `pulumi:"linuxProfile"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode *string `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// The version of node image
	NodeImageVersion *string `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType *string `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for LoadBalancerProfileResponse
func (val *LoadBalancerProfileResponse) Defaults() *LoadBalancerProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.Mode == nil {
		mode_ := "User"
		tmp.Mode = &mode_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// LoadBalancerProfile - Profile of the cluster load balancer.
type LoadBalancerProfileResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerProfileResponse)(nil)).Elem()
}

func (o LoadBalancerProfileResponseOutput) ToLoadBalancerProfileResponseOutput() LoadBalancerProfileResponseOutput {
	return o
}

func (o LoadBalancerProfileResponseOutput) ToLoadBalancerProfileResponseOutputWithContext(ctx context.Context) LoadBalancerProfileResponseOutput {
	return o
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o LoadBalancerProfileResponseOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o LoadBalancerProfileResponseOutput) CloudProviderProfile() CloudProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *CloudProviderProfileResponse { return v.CloudProviderProfile }).(CloudProviderProfileResponsePtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o LoadBalancerProfileResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o LoadBalancerProfileResponseOutput) LinuxProfile() LinuxProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *LinuxProfilePropertiesResponse { return v.LinuxProfile }).(LinuxProfilePropertiesResponsePtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o LoadBalancerProfileResponseOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o LoadBalancerProfileResponseOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o LoadBalancerProfileResponseOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o LoadBalancerProfileResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o LoadBalancerProfileResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The version of node image
func (o LoadBalancerProfileResponseOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *string { return v.NodeImageVersion }).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o LoadBalancerProfileResponseOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o LoadBalancerProfileResponseOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o LoadBalancerProfileResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o LoadBalancerProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type LoadBalancerProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerProfileResponse)(nil)).Elem()
}

func (o LoadBalancerProfileResponsePtrOutput) ToLoadBalancerProfileResponsePtrOutput() LoadBalancerProfileResponsePtrOutput {
	return o
}

func (o LoadBalancerProfileResponsePtrOutput) ToLoadBalancerProfileResponsePtrOutputWithContext(ctx context.Context) LoadBalancerProfileResponsePtrOutput {
	return o
}

func (o LoadBalancerProfileResponsePtrOutput) Elem() LoadBalancerProfileResponseOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) LoadBalancerProfileResponse {
		if v != nil {
			return *v
		}
		var ret LoadBalancerProfileResponse
		return ret
	}).(LoadBalancerProfileResponseOutput)
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o LoadBalancerProfileResponsePtrOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZones
	}).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o LoadBalancerProfileResponsePtrOutput) CloudProviderProfile() CloudProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *CloudProviderProfileResponse {
		if v == nil {
			return nil
		}
		return v.CloudProviderProfile
	}).(CloudProviderProfileResponsePtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o LoadBalancerProfileResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
func (o LoadBalancerProfileResponsePtrOutput) LinuxProfile() LinuxProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *LinuxProfilePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.LinuxProfile
	}).(LinuxProfilePropertiesResponsePtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o LoadBalancerProfileResponsePtrOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxCount
	}).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o LoadBalancerProfileResponsePtrOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPods
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o LoadBalancerProfileResponsePtrOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinCount
	}).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o LoadBalancerProfileResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o LoadBalancerProfileResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The version of node image
func (o LoadBalancerProfileResponsePtrOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeImageVersion
	}).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o LoadBalancerProfileResponsePtrOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeLabels
	}).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o LoadBalancerProfileResponsePtrOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.NodeTaints
	}).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o LoadBalancerProfileResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o LoadBalancerProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Agent pool profile along with a name parameter
type NamedAgentPoolProfile struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfile `pulumi:"cloudProviderProfile"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode *string `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// The version of node image
	NodeImageVersion *string `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType *string `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for NamedAgentPoolProfile
func (val *NamedAgentPoolProfile) Defaults() *NamedAgentPoolProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.Mode == nil {
		mode_ := "User"
		tmp.Mode = &mode_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// NamedAgentPoolProfileInput is an input type that accepts NamedAgentPoolProfileArgs and NamedAgentPoolProfileOutput values.
// You can construct a concrete instance of `NamedAgentPoolProfileInput` via:
//
//	NamedAgentPoolProfileArgs{...}
type NamedAgentPoolProfileInput interface {
	pulumi.Input

	ToNamedAgentPoolProfileOutput() NamedAgentPoolProfileOutput
	ToNamedAgentPoolProfileOutputWithContext(context.Context) NamedAgentPoolProfileOutput
}

// Agent pool profile along with a name parameter
type NamedAgentPoolProfileArgs struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile CloudProviderProfilePtrInput `pulumi:"cloudProviderProfile"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The maximum number of nodes for auto-scaling
	MaxCount pulumi.IntPtrInput `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods pulumi.IntPtrInput `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount pulumi.IntPtrInput `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The version of node image
	NodeImageVersion pulumi.StringPtrInput `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels pulumi.StringMapInput `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints pulumi.StringArrayInput `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for NamedAgentPoolProfileArgs
func (val *NamedAgentPoolProfileArgs) Defaults() *NamedAgentPoolProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		tmp.Count = pulumi.IntPtr(1)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("User")
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	return &tmp
}
func (NamedAgentPoolProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedAgentPoolProfile)(nil)).Elem()
}

func (i NamedAgentPoolProfileArgs) ToNamedAgentPoolProfileOutput() NamedAgentPoolProfileOutput {
	return i.ToNamedAgentPoolProfileOutputWithContext(context.Background())
}

func (i NamedAgentPoolProfileArgs) ToNamedAgentPoolProfileOutputWithContext(ctx context.Context) NamedAgentPoolProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedAgentPoolProfileOutput)
}

// NamedAgentPoolProfileArrayInput is an input type that accepts NamedAgentPoolProfileArray and NamedAgentPoolProfileArrayOutput values.
// You can construct a concrete instance of `NamedAgentPoolProfileArrayInput` via:
//
//	NamedAgentPoolProfileArray{ NamedAgentPoolProfileArgs{...} }
type NamedAgentPoolProfileArrayInput interface {
	pulumi.Input

	ToNamedAgentPoolProfileArrayOutput() NamedAgentPoolProfileArrayOutput
	ToNamedAgentPoolProfileArrayOutputWithContext(context.Context) NamedAgentPoolProfileArrayOutput
}

type NamedAgentPoolProfileArray []NamedAgentPoolProfileInput

func (NamedAgentPoolProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedAgentPoolProfile)(nil)).Elem()
}

func (i NamedAgentPoolProfileArray) ToNamedAgentPoolProfileArrayOutput() NamedAgentPoolProfileArrayOutput {
	return i.ToNamedAgentPoolProfileArrayOutputWithContext(context.Background())
}

func (i NamedAgentPoolProfileArray) ToNamedAgentPoolProfileArrayOutputWithContext(ctx context.Context) NamedAgentPoolProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedAgentPoolProfileArrayOutput)
}

// Agent pool profile along with a name parameter
type NamedAgentPoolProfileOutput struct{ *pulumi.OutputState }

func (NamedAgentPoolProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedAgentPoolProfile)(nil)).Elem()
}

func (o NamedAgentPoolProfileOutput) ToNamedAgentPoolProfileOutput() NamedAgentPoolProfileOutput {
	return o
}

func (o NamedAgentPoolProfileOutput) ToNamedAgentPoolProfileOutputWithContext(ctx context.Context) NamedAgentPoolProfileOutput {
	return o
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o NamedAgentPoolProfileOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o NamedAgentPoolProfileOutput) CloudProviderProfile() CloudProviderProfilePtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *CloudProviderProfile { return v.CloudProviderProfile }).(CloudProviderProfilePtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o NamedAgentPoolProfileOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o NamedAgentPoolProfileOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o NamedAgentPoolProfileOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o NamedAgentPoolProfileOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o NamedAgentPoolProfileOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o NamedAgentPoolProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The version of node image
func (o NamedAgentPoolProfileOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *string { return v.NodeImageVersion }).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o NamedAgentPoolProfileOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o NamedAgentPoolProfileOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o NamedAgentPoolProfileOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o NamedAgentPoolProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type NamedAgentPoolProfileArrayOutput struct{ *pulumi.OutputState }

func (NamedAgentPoolProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedAgentPoolProfile)(nil)).Elem()
}

func (o NamedAgentPoolProfileArrayOutput) ToNamedAgentPoolProfileArrayOutput() NamedAgentPoolProfileArrayOutput {
	return o
}

func (o NamedAgentPoolProfileArrayOutput) ToNamedAgentPoolProfileArrayOutputWithContext(ctx context.Context) NamedAgentPoolProfileArrayOutput {
	return o
}

func (o NamedAgentPoolProfileArrayOutput) Index(i pulumi.IntInput) NamedAgentPoolProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedAgentPoolProfile {
		return vs[0].([]NamedAgentPoolProfile)[vs[1].(int)]
	}).(NamedAgentPoolProfileOutput)
}

// Agent pool profile along with a name parameter
type NamedAgentPoolProfileResponse struct {
	// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfileResponse `pulumi:"cloudProviderProfile"`
	// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
	Mode *string `pulumi:"mode"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// The version of node image
	NodeImageVersion *string `pulumi:"nodeImageVersion"`
	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
	OsType *string `pulumi:"osType"`
	// VmSize - The size of the agent pool VMs.
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for NamedAgentPoolProfileResponse
func (val *NamedAgentPoolProfileResponse) Defaults() *NamedAgentPoolProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.Mode == nil {
		mode_ := "User"
		tmp.Mode = &mode_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// Agent pool profile along with a name parameter
type NamedAgentPoolProfileResponseOutput struct{ *pulumi.OutputState }

func (NamedAgentPoolProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedAgentPoolProfileResponse)(nil)).Elem()
}

func (o NamedAgentPoolProfileResponseOutput) ToNamedAgentPoolProfileResponseOutput() NamedAgentPoolProfileResponseOutput {
	return o
}

func (o NamedAgentPoolProfileResponseOutput) ToNamedAgentPoolProfileResponseOutputWithContext(ctx context.Context) NamedAgentPoolProfileResponseOutput {
	return o
}

// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
func (o NamedAgentPoolProfileResponseOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The underlying cloud infra provider properties.
func (o NamedAgentPoolProfileResponseOutput) CloudProviderProfile() CloudProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *CloudProviderProfileResponse { return v.CloudProviderProfile }).(CloudProviderProfileResponsePtrOutput)
}

// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o NamedAgentPoolProfileResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o NamedAgentPoolProfileResponseOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o NamedAgentPoolProfileResponseOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o NamedAgentPoolProfileResponseOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
func (o NamedAgentPoolProfileResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (o NamedAgentPoolProfileResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The version of node image
func (o NamedAgentPoolProfileResponseOutput) NodeImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *string { return v.NodeImageVersion }).(pulumi.StringPtrOutput)
}

// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
func (o NamedAgentPoolProfileResponseOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o NamedAgentPoolProfileResponseOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
func (o NamedAgentPoolProfileResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// VmSize - The size of the agent pool VMs.
func (o NamedAgentPoolProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedAgentPoolProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type NamedAgentPoolProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (NamedAgentPoolProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedAgentPoolProfileResponse)(nil)).Elem()
}

func (o NamedAgentPoolProfileResponseArrayOutput) ToNamedAgentPoolProfileResponseArrayOutput() NamedAgentPoolProfileResponseArrayOutput {
	return o
}

func (o NamedAgentPoolProfileResponseArrayOutput) ToNamedAgentPoolProfileResponseArrayOutputWithContext(ctx context.Context) NamedAgentPoolProfileResponseArrayOutput {
	return o
}

func (o NamedAgentPoolProfileResponseArrayOutput) Index(i pulumi.IntInput) NamedAgentPoolProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedAgentPoolProfileResponse {
		return vs[0].([]NamedAgentPoolProfileResponse)[vs[1].(int)]
	}).(NamedAgentPoolProfileResponseOutput)
}

// NetworkProfile - Profile of network configuration.
type NetworkProfile struct {
	// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// LoadBalancerProfile - Profile of the cluster load balancer.
	LoadBalancerProfile *LoadBalancerProfile `pulumi:"loadBalancerProfile"`
	// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
	LoadBalancerSku *string `pulumi:"loadBalancerSku"`
	// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
	PodCidr *string `pulumi:"podCidr"`
	// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs []string `pulumi:"podCidrs"`
	// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
	ServiceCidrs []string `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for NetworkProfile
func (val *NetworkProfile) Defaults() *NetworkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LoadBalancerProfile = tmp.LoadBalancerProfile.Defaults()

	if tmp.LoadBalancerSku == nil {
		loadBalancerSku_ := "unmanaged"
		tmp.LoadBalancerSku = &loadBalancerSku_
	}
	if tmp.NetworkPolicy == nil {
		networkPolicy_ := "calico"
		tmp.NetworkPolicy = &networkPolicy_
	}
	return &tmp
}

// NetworkProfileInput is an input type that accepts NetworkProfileArgs and NetworkProfileOutput values.
// You can construct a concrete instance of `NetworkProfileInput` via:
//
//	NetworkProfileArgs{...}
type NetworkProfileInput interface {
	pulumi.Input

	ToNetworkProfileOutput() NetworkProfileOutput
	ToNetworkProfileOutputWithContext(context.Context) NetworkProfileOutput
}

// NetworkProfile - Profile of network configuration.
type NetworkProfileArgs struct {
	// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP pulumi.StringPtrInput `pulumi:"dnsServiceIP"`
	// LoadBalancerProfile - Profile of the cluster load balancer.
	LoadBalancerProfile LoadBalancerProfilePtrInput `pulumi:"loadBalancerProfile"`
	// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
	LoadBalancerSku pulumi.StringPtrInput `pulumi:"loadBalancerSku"`
	// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
	NetworkPolicy pulumi.StringPtrInput `pulumi:"networkPolicy"`
	// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
	PodCidr pulumi.StringPtrInput `pulumi:"podCidr"`
	// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs pulumi.StringArrayInput `pulumi:"podCidrs"`
	// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr pulumi.StringPtrInput `pulumi:"serviceCidr"`
	// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
	ServiceCidrs pulumi.StringArrayInput `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for NetworkProfileArgs
func (val *NetworkProfileArgs) Defaults() *NetworkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LoadBalancerSku == nil {
		tmp.LoadBalancerSku = pulumi.StringPtr("unmanaged")
	}
	if tmp.NetworkPolicy == nil {
		tmp.NetworkPolicy = pulumi.StringPtr("calico")
	}
	return &tmp
}
func (NetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (i NetworkProfileArgs) ToNetworkProfileOutput() NetworkProfileOutput {
	return i.ToNetworkProfileOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput)
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput).ToNetworkProfilePtrOutputWithContext(ctx)
}

// NetworkProfilePtrInput is an input type that accepts NetworkProfileArgs, NetworkProfilePtr and NetworkProfilePtrOutput values.
// You can construct a concrete instance of `NetworkProfilePtrInput` via:
//
//	        NetworkProfileArgs{...}
//
//	or:
//
//	        nil
type NetworkProfilePtrInput interface {
	pulumi.Input

	ToNetworkProfilePtrOutput() NetworkProfilePtrOutput
	ToNetworkProfilePtrOutputWithContext(context.Context) NetworkProfilePtrOutput
}

type networkProfilePtrType NetworkProfileArgs

func NetworkProfilePtr(v *NetworkProfileArgs) NetworkProfilePtrInput {
	return (*networkProfilePtrType)(v)
}

func (*networkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfilePtrOutput)
}

// NetworkProfile - Profile of network configuration.
type NetworkProfileOutput struct{ *pulumi.OutputState }

func (NetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (o NetworkProfileOutput) ToNetworkProfileOutput() NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkProfile) *NetworkProfile {
		return &v
	}).(NetworkProfilePtrOutput)
}

// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o NetworkProfileOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// LoadBalancerProfile - Profile of the cluster load balancer.
func (o NetworkProfileOutput) LoadBalancerProfile() LoadBalancerProfilePtrOutput {
	return o.ApplyT(func(v NetworkProfile) *LoadBalancerProfile { return v.LoadBalancerProfile }).(LoadBalancerProfilePtrOutput)
}

// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
func (o NetworkProfileOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.LoadBalancerSku }).(pulumi.StringPtrOutput)
}

// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
func (o NetworkProfileOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.NetworkPolicy }).(pulumi.StringPtrOutput)
}

// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o NetworkProfileOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.PodCidr }).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkProfileOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkProfile) []string { return v.PodCidrs }).(pulumi.StringArrayOutput)
}

// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o NetworkProfileOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o NetworkProfileOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkProfile) []string { return v.ServiceCidrs }).(pulumi.StringArrayOutput)
}

type NetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) Elem() NetworkProfileOutput {
	return o.ApplyT(func(v *NetworkProfile) NetworkProfile {
		if v != nil {
			return *v
		}
		var ret NetworkProfile
		return ret
	}).(NetworkProfileOutput)
}

// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o NetworkProfilePtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// LoadBalancerProfile - Profile of the cluster load balancer.
func (o NetworkProfilePtrOutput) LoadBalancerProfile() LoadBalancerProfilePtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *LoadBalancerProfile {
		if v == nil {
			return nil
		}
		return v.LoadBalancerProfile
	}).(LoadBalancerProfilePtrOutput)
}

// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
func (o NetworkProfilePtrOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSku
	}).(pulumi.StringPtrOutput)
}

// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
func (o NetworkProfilePtrOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPolicy
	}).(pulumi.StringPtrOutput)
}

// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o NetworkProfilePtrOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.PodCidr
	}).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkProfilePtrOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.PodCidrs
	}).(pulumi.StringArrayOutput)
}

// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o NetworkProfilePtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o NetworkProfilePtrOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.ServiceCidrs
	}).(pulumi.StringArrayOutput)
}

// NetworkProfile - Profile of network configuration.
type NetworkProfileResponse struct {
	// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// LoadBalancerProfile - Profile of the cluster load balancer.
	LoadBalancerProfile *LoadBalancerProfileResponse `pulumi:"loadBalancerProfile"`
	// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
	LoadBalancerSku *string `pulumi:"loadBalancerSku"`
	// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
	PodCidr *string `pulumi:"podCidr"`
	// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs []string `pulumi:"podCidrs"`
	// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
	ServiceCidrs []string `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for NetworkProfileResponse
func (val *NetworkProfileResponse) Defaults() *NetworkProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LoadBalancerProfile = tmp.LoadBalancerProfile.Defaults()

	if tmp.LoadBalancerSku == nil {
		loadBalancerSku_ := "unmanaged"
		tmp.LoadBalancerSku = &loadBalancerSku_
	}
	if tmp.NetworkPolicy == nil {
		networkPolicy_ := "calico"
		tmp.NetworkPolicy = &networkPolicy_
	}
	return &tmp
}

// NetworkProfile - Profile of network configuration.
type NetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutput() NetworkProfileResponseOutput {
	return o
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutputWithContext(ctx context.Context) NetworkProfileResponseOutput {
	return o
}

// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o NetworkProfileResponseOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// LoadBalancerProfile - Profile of the cluster load balancer.
func (o NetworkProfileResponseOutput) LoadBalancerProfile() LoadBalancerProfileResponsePtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *LoadBalancerProfileResponse { return v.LoadBalancerProfile }).(LoadBalancerProfileResponsePtrOutput)
}

// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
func (o NetworkProfileResponseOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.LoadBalancerSku }).(pulumi.StringPtrOutput)
}

// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
func (o NetworkProfileResponseOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.NetworkPolicy }).(pulumi.StringPtrOutput)
}

// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o NetworkProfileResponseOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.PodCidr }).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkProfileResponseOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkProfileResponse) []string { return v.PodCidrs }).(pulumi.StringArrayOutput)
}

// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o NetworkProfileResponseOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o NetworkProfileResponseOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkProfileResponse) []string { return v.ServiceCidrs }).(pulumi.StringArrayOutput)
}

type NetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutput() NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutputWithContext(ctx context.Context) NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) Elem() NetworkProfileResponseOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) NetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret NetworkProfileResponse
		return ret
	}).(NetworkProfileResponseOutput)
}

// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o NetworkProfileResponsePtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// LoadBalancerProfile - Profile of the cluster load balancer.
func (o NetworkProfileResponsePtrOutput) LoadBalancerProfile() LoadBalancerProfileResponsePtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *LoadBalancerProfileResponse {
		if v == nil {
			return nil
		}
		return v.LoadBalancerProfile
	}).(LoadBalancerProfileResponsePtrOutput)
}

// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
func (o NetworkProfileResponsePtrOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSku
	}).(pulumi.StringPtrOutput)
}

// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
func (o NetworkProfileResponsePtrOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPolicy
	}).(pulumi.StringPtrOutput)
}

// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o NetworkProfileResponsePtrOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.PodCidr
	}).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkProfileResponsePtrOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.PodCidrs
	}).(pulumi.StringArrayOutput)
}

// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o NetworkProfileResponsePtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o NetworkProfileResponsePtrOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.ServiceCidrs
	}).(pulumi.StringArrayOutput)
}

// Identity for the Provisioned cluster.
type ProvisionedClusterIdentity struct {
	// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
	Type ResourceIdentityType `pulumi:"type"`
}

// ProvisionedClusterIdentityInput is an input type that accepts ProvisionedClusterIdentityArgs and ProvisionedClusterIdentityOutput values.
// You can construct a concrete instance of `ProvisionedClusterIdentityInput` via:
//
//	ProvisionedClusterIdentityArgs{...}
type ProvisionedClusterIdentityInput interface {
	pulumi.Input

	ToProvisionedClusterIdentityOutput() ProvisionedClusterIdentityOutput
	ToProvisionedClusterIdentityOutputWithContext(context.Context) ProvisionedClusterIdentityOutput
}

// Identity for the Provisioned cluster.
type ProvisionedClusterIdentityArgs struct {
	// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
	Type ResourceIdentityTypeInput `pulumi:"type"`
}

func (ProvisionedClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClusterIdentity)(nil)).Elem()
}

func (i ProvisionedClusterIdentityArgs) ToProvisionedClusterIdentityOutput() ProvisionedClusterIdentityOutput {
	return i.ToProvisionedClusterIdentityOutputWithContext(context.Background())
}

func (i ProvisionedClusterIdentityArgs) ToProvisionedClusterIdentityOutputWithContext(ctx context.Context) ProvisionedClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClusterIdentityOutput)
}

func (i ProvisionedClusterIdentityArgs) ToProvisionedClusterIdentityPtrOutput() ProvisionedClusterIdentityPtrOutput {
	return i.ToProvisionedClusterIdentityPtrOutputWithContext(context.Background())
}

func (i ProvisionedClusterIdentityArgs) ToProvisionedClusterIdentityPtrOutputWithContext(ctx context.Context) ProvisionedClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClusterIdentityOutput).ToProvisionedClusterIdentityPtrOutputWithContext(ctx)
}

// ProvisionedClusterIdentityPtrInput is an input type that accepts ProvisionedClusterIdentityArgs, ProvisionedClusterIdentityPtr and ProvisionedClusterIdentityPtrOutput values.
// You can construct a concrete instance of `ProvisionedClusterIdentityPtrInput` via:
//
//	        ProvisionedClusterIdentityArgs{...}
//
//	or:
//
//	        nil
type ProvisionedClusterIdentityPtrInput interface {
	pulumi.Input

	ToProvisionedClusterIdentityPtrOutput() ProvisionedClusterIdentityPtrOutput
	ToProvisionedClusterIdentityPtrOutputWithContext(context.Context) ProvisionedClusterIdentityPtrOutput
}

type provisionedClusterIdentityPtrType ProvisionedClusterIdentityArgs

func ProvisionedClusterIdentityPtr(v *ProvisionedClusterIdentityArgs) ProvisionedClusterIdentityPtrInput {
	return (*provisionedClusterIdentityPtrType)(v)
}

func (*provisionedClusterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClusterIdentity)(nil)).Elem()
}

func (i *provisionedClusterIdentityPtrType) ToProvisionedClusterIdentityPtrOutput() ProvisionedClusterIdentityPtrOutput {
	return i.ToProvisionedClusterIdentityPtrOutputWithContext(context.Background())
}

func (i *provisionedClusterIdentityPtrType) ToProvisionedClusterIdentityPtrOutputWithContext(ctx context.Context) ProvisionedClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClusterIdentityPtrOutput)
}

// Identity for the Provisioned cluster.
type ProvisionedClusterIdentityOutput struct{ *pulumi.OutputState }

func (ProvisionedClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClusterIdentity)(nil)).Elem()
}

func (o ProvisionedClusterIdentityOutput) ToProvisionedClusterIdentityOutput() ProvisionedClusterIdentityOutput {
	return o
}

func (o ProvisionedClusterIdentityOutput) ToProvisionedClusterIdentityOutputWithContext(ctx context.Context) ProvisionedClusterIdentityOutput {
	return o
}

func (o ProvisionedClusterIdentityOutput) ToProvisionedClusterIdentityPtrOutput() ProvisionedClusterIdentityPtrOutput {
	return o.ToProvisionedClusterIdentityPtrOutputWithContext(context.Background())
}

func (o ProvisionedClusterIdentityOutput) ToProvisionedClusterIdentityPtrOutputWithContext(ctx context.Context) ProvisionedClusterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisionedClusterIdentity) *ProvisionedClusterIdentity {
		return &v
	}).(ProvisionedClusterIdentityPtrOutput)
}

// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
func (o ProvisionedClusterIdentityOutput) Type() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v ProvisionedClusterIdentity) ResourceIdentityType { return v.Type }).(ResourceIdentityTypeOutput)
}

type ProvisionedClusterIdentityPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClusterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClusterIdentity)(nil)).Elem()
}

func (o ProvisionedClusterIdentityPtrOutput) ToProvisionedClusterIdentityPtrOutput() ProvisionedClusterIdentityPtrOutput {
	return o
}

func (o ProvisionedClusterIdentityPtrOutput) ToProvisionedClusterIdentityPtrOutputWithContext(ctx context.Context) ProvisionedClusterIdentityPtrOutput {
	return o
}

func (o ProvisionedClusterIdentityPtrOutput) Elem() ProvisionedClusterIdentityOutput {
	return o.ApplyT(func(v *ProvisionedClusterIdentity) ProvisionedClusterIdentity {
		if v != nil {
			return *v
		}
		var ret ProvisionedClusterIdentity
		return ret
	}).(ProvisionedClusterIdentityOutput)
}

// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
func (o ProvisionedClusterIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *ProvisionedClusterIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// Identity for the Provisioned cluster.
type ProvisionedClusterIdentityResponse struct {
	// The principal id of provisioned cluster identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the provisioned cluster. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
	Type string `pulumi:"type"`
}

// Identity for the Provisioned cluster.
type ProvisionedClusterIdentityResponseOutput struct{ *pulumi.OutputState }

func (ProvisionedClusterIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClusterIdentityResponse)(nil)).Elem()
}

func (o ProvisionedClusterIdentityResponseOutput) ToProvisionedClusterIdentityResponseOutput() ProvisionedClusterIdentityResponseOutput {
	return o
}

func (o ProvisionedClusterIdentityResponseOutput) ToProvisionedClusterIdentityResponseOutputWithContext(ctx context.Context) ProvisionedClusterIdentityResponseOutput {
	return o
}

// The principal id of provisioned cluster identity. This property will only be provided for a system assigned identity.
func (o ProvisionedClusterIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisionedClusterIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the provisioned cluster. This property will only be provided for a system assigned identity.
func (o ProvisionedClusterIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisionedClusterIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
func (o ProvisionedClusterIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisionedClusterIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ProvisionedClusterIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClusterIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClusterIdentityResponse)(nil)).Elem()
}

func (o ProvisionedClusterIdentityResponsePtrOutput) ToProvisionedClusterIdentityResponsePtrOutput() ProvisionedClusterIdentityResponsePtrOutput {
	return o
}

func (o ProvisionedClusterIdentityResponsePtrOutput) ToProvisionedClusterIdentityResponsePtrOutputWithContext(ctx context.Context) ProvisionedClusterIdentityResponsePtrOutput {
	return o
}

func (o ProvisionedClusterIdentityResponsePtrOutput) Elem() ProvisionedClusterIdentityResponseOutput {
	return o.ApplyT(func(v *ProvisionedClusterIdentityResponse) ProvisionedClusterIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ProvisionedClusterIdentityResponse
		return ret
	}).(ProvisionedClusterIdentityResponseOutput)
}

// The principal id of provisioned cluster identity. This property will only be provided for a system assigned identity.
func (o ProvisionedClusterIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the provisioned cluster. This property will only be provided for a system assigned identity.
func (o ProvisionedClusterIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
func (o ProvisionedClusterIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// All properties of the provisioned cluster
type ProvisionedClustersAllProperties struct {
	// AAD profile for the provisioned cluster.
	AadProfile *AADProfile `pulumi:"aadProfile"`
	// AddonProfiles - Profile of managed cluster add-on.
	AddonProfiles map[string]AddonProfiles `pulumi:"addonProfiles"`
	// The agent pools of the cluster.
	AgentPoolProfiles []NamedAgentPoolProfile `pulumi:"agentPoolProfiles"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfile `pulumi:"cloudProviderProfile"`
	// ControlPlane - ControlPlane Configuration
	ControlPlane *ControlPlaneProfile `pulumi:"controlPlane"`
	// EnableRBAC - Whether to enable Kubernetes Role-Based Access Control.
	EnableRbac *bool `pulumi:"enableRbac"`
	// Additional features specs like Arc Agent Onboarding.
	Features *ProvisionedClustersCommonPropertiesFeatures `pulumi:"features"`
	// HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers.
	HttpProxyConfig *HttpProxyConfig `pulumi:"httpProxyConfig"`
	// KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
	LinuxProfile *LinuxProfileProperties `pulumi:"linuxProfile"`
	// NetworkProfile - Profile of network configuration.
	NetworkProfile *NetworkProfile `pulumi:"networkProfile"`
	// NodeResourceGroup - Name of the resource group containing agent pool nodes.
	NodeResourceGroup *string `pulumi:"nodeResourceGroup"`
	// WindowsProfile - Profile for Windows VMs in the Provisioned Cluster.
	WindowsProfile *WindowsProfile `pulumi:"windowsProfile"`
}

// Defaults sets the appropriate defaults for ProvisionedClustersAllProperties
func (val *ProvisionedClustersAllProperties) Defaults() *ProvisionedClustersAllProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ControlPlane = tmp.ControlPlane.Defaults()

	tmp.Features = tmp.Features.Defaults()

	tmp.NetworkProfile = tmp.NetworkProfile.Defaults()

	return &tmp
}

// ProvisionedClustersAllPropertiesInput is an input type that accepts ProvisionedClustersAllPropertiesArgs and ProvisionedClustersAllPropertiesOutput values.
// You can construct a concrete instance of `ProvisionedClustersAllPropertiesInput` via:
//
//	ProvisionedClustersAllPropertiesArgs{...}
type ProvisionedClustersAllPropertiesInput interface {
	pulumi.Input

	ToProvisionedClustersAllPropertiesOutput() ProvisionedClustersAllPropertiesOutput
	ToProvisionedClustersAllPropertiesOutputWithContext(context.Context) ProvisionedClustersAllPropertiesOutput
}

// All properties of the provisioned cluster
type ProvisionedClustersAllPropertiesArgs struct {
	// AAD profile for the provisioned cluster.
	AadProfile AADProfilePtrInput `pulumi:"aadProfile"`
	// AddonProfiles - Profile of managed cluster add-on.
	AddonProfiles AddonProfilesMapInput `pulumi:"addonProfiles"`
	// The agent pools of the cluster.
	AgentPoolProfiles NamedAgentPoolProfileArrayInput `pulumi:"agentPoolProfiles"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile CloudProviderProfilePtrInput `pulumi:"cloudProviderProfile"`
	// ControlPlane - ControlPlane Configuration
	ControlPlane ControlPlaneProfilePtrInput `pulumi:"controlPlane"`
	// EnableRBAC - Whether to enable Kubernetes Role-Based Access Control.
	EnableRbac pulumi.BoolPtrInput `pulumi:"enableRbac"`
	// Additional features specs like Arc Agent Onboarding.
	Features ProvisionedClustersCommonPropertiesFeaturesPtrInput `pulumi:"features"`
	// HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers.
	HttpProxyConfig HttpProxyConfigPtrInput `pulumi:"httpProxyConfig"`
	// KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
	KubernetesVersion pulumi.StringPtrInput `pulumi:"kubernetesVersion"`
	// LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
	LinuxProfile LinuxProfilePropertiesPtrInput `pulumi:"linuxProfile"`
	// NetworkProfile - Profile of network configuration.
	NetworkProfile NetworkProfilePtrInput `pulumi:"networkProfile"`
	// NodeResourceGroup - Name of the resource group containing agent pool nodes.
	NodeResourceGroup pulumi.StringPtrInput `pulumi:"nodeResourceGroup"`
	// WindowsProfile - Profile for Windows VMs in the Provisioned Cluster.
	WindowsProfile WindowsProfilePtrInput `pulumi:"windowsProfile"`
}

// Defaults sets the appropriate defaults for ProvisionedClustersAllPropertiesArgs
func (val *ProvisionedClustersAllPropertiesArgs) Defaults() *ProvisionedClustersAllPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ProvisionedClustersAllPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersAllProperties)(nil)).Elem()
}

func (i ProvisionedClustersAllPropertiesArgs) ToProvisionedClustersAllPropertiesOutput() ProvisionedClustersAllPropertiesOutput {
	return i.ToProvisionedClustersAllPropertiesOutputWithContext(context.Background())
}

func (i ProvisionedClustersAllPropertiesArgs) ToProvisionedClustersAllPropertiesOutputWithContext(ctx context.Context) ProvisionedClustersAllPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersAllPropertiesOutput)
}

func (i ProvisionedClustersAllPropertiesArgs) ToProvisionedClustersAllPropertiesPtrOutput() ProvisionedClustersAllPropertiesPtrOutput {
	return i.ToProvisionedClustersAllPropertiesPtrOutputWithContext(context.Background())
}

func (i ProvisionedClustersAllPropertiesArgs) ToProvisionedClustersAllPropertiesPtrOutputWithContext(ctx context.Context) ProvisionedClustersAllPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersAllPropertiesOutput).ToProvisionedClustersAllPropertiesPtrOutputWithContext(ctx)
}

// ProvisionedClustersAllPropertiesPtrInput is an input type that accepts ProvisionedClustersAllPropertiesArgs, ProvisionedClustersAllPropertiesPtr and ProvisionedClustersAllPropertiesPtrOutput values.
// You can construct a concrete instance of `ProvisionedClustersAllPropertiesPtrInput` via:
//
//	        ProvisionedClustersAllPropertiesArgs{...}
//
//	or:
//
//	        nil
type ProvisionedClustersAllPropertiesPtrInput interface {
	pulumi.Input

	ToProvisionedClustersAllPropertiesPtrOutput() ProvisionedClustersAllPropertiesPtrOutput
	ToProvisionedClustersAllPropertiesPtrOutputWithContext(context.Context) ProvisionedClustersAllPropertiesPtrOutput
}

type provisionedClustersAllPropertiesPtrType ProvisionedClustersAllPropertiesArgs

func ProvisionedClustersAllPropertiesPtr(v *ProvisionedClustersAllPropertiesArgs) ProvisionedClustersAllPropertiesPtrInput {
	return (*provisionedClustersAllPropertiesPtrType)(v)
}

func (*provisionedClustersAllPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersAllProperties)(nil)).Elem()
}

func (i *provisionedClustersAllPropertiesPtrType) ToProvisionedClustersAllPropertiesPtrOutput() ProvisionedClustersAllPropertiesPtrOutput {
	return i.ToProvisionedClustersAllPropertiesPtrOutputWithContext(context.Background())
}

func (i *provisionedClustersAllPropertiesPtrType) ToProvisionedClustersAllPropertiesPtrOutputWithContext(ctx context.Context) ProvisionedClustersAllPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersAllPropertiesPtrOutput)
}

// All properties of the provisioned cluster
type ProvisionedClustersAllPropertiesOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersAllPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersAllProperties)(nil)).Elem()
}

func (o ProvisionedClustersAllPropertiesOutput) ToProvisionedClustersAllPropertiesOutput() ProvisionedClustersAllPropertiesOutput {
	return o
}

func (o ProvisionedClustersAllPropertiesOutput) ToProvisionedClustersAllPropertiesOutputWithContext(ctx context.Context) ProvisionedClustersAllPropertiesOutput {
	return o
}

func (o ProvisionedClustersAllPropertiesOutput) ToProvisionedClustersAllPropertiesPtrOutput() ProvisionedClustersAllPropertiesPtrOutput {
	return o.ToProvisionedClustersAllPropertiesPtrOutputWithContext(context.Background())
}

func (o ProvisionedClustersAllPropertiesOutput) ToProvisionedClustersAllPropertiesPtrOutputWithContext(ctx context.Context) ProvisionedClustersAllPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisionedClustersAllProperties) *ProvisionedClustersAllProperties {
		return &v
	}).(ProvisionedClustersAllPropertiesPtrOutput)
}

// AAD profile for the provisioned cluster.
func (o ProvisionedClustersAllPropertiesOutput) AadProfile() AADProfilePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *AADProfile { return v.AadProfile }).(AADProfilePtrOutput)
}

// AddonProfiles - Profile of managed cluster add-on.
func (o ProvisionedClustersAllPropertiesOutput) AddonProfiles() AddonProfilesMapOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) map[string]AddonProfiles { return v.AddonProfiles }).(AddonProfilesMapOutput)
}

// The agent pools of the cluster.
func (o ProvisionedClustersAllPropertiesOutput) AgentPoolProfiles() NamedAgentPoolProfileArrayOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) []NamedAgentPoolProfile { return v.AgentPoolProfiles }).(NamedAgentPoolProfileArrayOutput)
}

// The underlying cloud infra provider properties.
func (o ProvisionedClustersAllPropertiesOutput) CloudProviderProfile() CloudProviderProfilePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *CloudProviderProfile { return v.CloudProviderProfile }).(CloudProviderProfilePtrOutput)
}

// ControlPlane - ControlPlane Configuration
func (o ProvisionedClustersAllPropertiesOutput) ControlPlane() ControlPlaneProfilePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *ControlPlaneProfile { return v.ControlPlane }).(ControlPlaneProfilePtrOutput)
}

// EnableRBAC - Whether to enable Kubernetes Role-Based Access Control.
func (o ProvisionedClustersAllPropertiesOutput) EnableRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *bool { return v.EnableRbac }).(pulumi.BoolPtrOutput)
}

// Additional features specs like Arc Agent Onboarding.
func (o ProvisionedClustersAllPropertiesOutput) Features() ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *ProvisionedClustersCommonPropertiesFeatures {
		return v.Features
	}).(ProvisionedClustersCommonPropertiesFeaturesPtrOutput)
}

// HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers.
func (o ProvisionedClustersAllPropertiesOutput) HttpProxyConfig() HttpProxyConfigPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *HttpProxyConfig { return v.HttpProxyConfig }).(HttpProxyConfigPtrOutput)
}

// KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
func (o ProvisionedClustersAllPropertiesOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *string { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
func (o ProvisionedClustersAllPropertiesOutput) LinuxProfile() LinuxProfilePropertiesPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *LinuxProfileProperties { return v.LinuxProfile }).(LinuxProfilePropertiesPtrOutput)
}

// NetworkProfile - Profile of network configuration.
func (o ProvisionedClustersAllPropertiesOutput) NetworkProfile() NetworkProfilePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *NetworkProfile { return v.NetworkProfile }).(NetworkProfilePtrOutput)
}

// NodeResourceGroup - Name of the resource group containing agent pool nodes.
func (o ProvisionedClustersAllPropertiesOutput) NodeResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *string { return v.NodeResourceGroup }).(pulumi.StringPtrOutput)
}

// WindowsProfile - Profile for Windows VMs in the Provisioned Cluster.
func (o ProvisionedClustersAllPropertiesOutput) WindowsProfile() WindowsProfilePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersAllProperties) *WindowsProfile { return v.WindowsProfile }).(WindowsProfilePtrOutput)
}

type ProvisionedClustersAllPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersAllPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersAllProperties)(nil)).Elem()
}

func (o ProvisionedClustersAllPropertiesPtrOutput) ToProvisionedClustersAllPropertiesPtrOutput() ProvisionedClustersAllPropertiesPtrOutput {
	return o
}

func (o ProvisionedClustersAllPropertiesPtrOutput) ToProvisionedClustersAllPropertiesPtrOutputWithContext(ctx context.Context) ProvisionedClustersAllPropertiesPtrOutput {
	return o
}

func (o ProvisionedClustersAllPropertiesPtrOutput) Elem() ProvisionedClustersAllPropertiesOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) ProvisionedClustersAllProperties {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersAllProperties
		return ret
	}).(ProvisionedClustersAllPropertiesOutput)
}

// AAD profile for the provisioned cluster.
func (o ProvisionedClustersAllPropertiesPtrOutput) AadProfile() AADProfilePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *AADProfile {
		if v == nil {
			return nil
		}
		return v.AadProfile
	}).(AADProfilePtrOutput)
}

// AddonProfiles - Profile of managed cluster add-on.
func (o ProvisionedClustersAllPropertiesPtrOutput) AddonProfiles() AddonProfilesMapOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) map[string]AddonProfiles {
		if v == nil {
			return nil
		}
		return v.AddonProfiles
	}).(AddonProfilesMapOutput)
}

// The agent pools of the cluster.
func (o ProvisionedClustersAllPropertiesPtrOutput) AgentPoolProfiles() NamedAgentPoolProfileArrayOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) []NamedAgentPoolProfile {
		if v == nil {
			return nil
		}
		return v.AgentPoolProfiles
	}).(NamedAgentPoolProfileArrayOutput)
}

// The underlying cloud infra provider properties.
func (o ProvisionedClustersAllPropertiesPtrOutput) CloudProviderProfile() CloudProviderProfilePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *CloudProviderProfile {
		if v == nil {
			return nil
		}
		return v.CloudProviderProfile
	}).(CloudProviderProfilePtrOutput)
}

// ControlPlane - ControlPlane Configuration
func (o ProvisionedClustersAllPropertiesPtrOutput) ControlPlane() ControlPlaneProfilePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *ControlPlaneProfile {
		if v == nil {
			return nil
		}
		return v.ControlPlane
	}).(ControlPlaneProfilePtrOutput)
}

// EnableRBAC - Whether to enable Kubernetes Role-Based Access Control.
func (o ProvisionedClustersAllPropertiesPtrOutput) EnableRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableRbac
	}).(pulumi.BoolPtrOutput)
}

// Additional features specs like Arc Agent Onboarding.
func (o ProvisionedClustersAllPropertiesPtrOutput) Features() ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *ProvisionedClustersCommonPropertiesFeatures {
		if v == nil {
			return nil
		}
		return v.Features
	}).(ProvisionedClustersCommonPropertiesFeaturesPtrOutput)
}

// HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers.
func (o ProvisionedClustersAllPropertiesPtrOutput) HttpProxyConfig() HttpProxyConfigPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *HttpProxyConfig {
		if v == nil {
			return nil
		}
		return v.HttpProxyConfig
	}).(HttpProxyConfigPtrOutput)
}

// KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
func (o ProvisionedClustersAllPropertiesPtrOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *string {
		if v == nil {
			return nil
		}
		return v.KubernetesVersion
	}).(pulumi.StringPtrOutput)
}

// LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
func (o ProvisionedClustersAllPropertiesPtrOutput) LinuxProfile() LinuxProfilePropertiesPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *LinuxProfileProperties {
		if v == nil {
			return nil
		}
		return v.LinuxProfile
	}).(LinuxProfilePropertiesPtrOutput)
}

// NetworkProfile - Profile of network configuration.
func (o ProvisionedClustersAllPropertiesPtrOutput) NetworkProfile() NetworkProfilePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *NetworkProfile {
		if v == nil {
			return nil
		}
		return v.NetworkProfile
	}).(NetworkProfilePtrOutput)
}

// NodeResourceGroup - Name of the resource group containing agent pool nodes.
func (o ProvisionedClustersAllPropertiesPtrOutput) NodeResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeResourceGroup
	}).(pulumi.StringPtrOutput)
}

// WindowsProfile - Profile for Windows VMs in the Provisioned Cluster.
func (o ProvisionedClustersAllPropertiesPtrOutput) WindowsProfile() WindowsProfilePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersAllProperties) *WindowsProfile {
		if v == nil {
			return nil
		}
		return v.WindowsProfile
	}).(WindowsProfilePtrOutput)
}

// Additional features specs like Arc Agent Onboarding.
type ProvisionedClustersCommonPropertiesFeatures struct {
	// Arc agentry configuration for the provisioned cluster.
	ArcAgentProfile *ArcAgentProfile `pulumi:"arcAgentProfile"`
}

// Defaults sets the appropriate defaults for ProvisionedClustersCommonPropertiesFeatures
func (val *ProvisionedClustersCommonPropertiesFeatures) Defaults() *ProvisionedClustersCommonPropertiesFeatures {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ArcAgentProfile = tmp.ArcAgentProfile.Defaults()

	return &tmp
}

// ProvisionedClustersCommonPropertiesFeaturesInput is an input type that accepts ProvisionedClustersCommonPropertiesFeaturesArgs and ProvisionedClustersCommonPropertiesFeaturesOutput values.
// You can construct a concrete instance of `ProvisionedClustersCommonPropertiesFeaturesInput` via:
//
//	ProvisionedClustersCommonPropertiesFeaturesArgs{...}
type ProvisionedClustersCommonPropertiesFeaturesInput interface {
	pulumi.Input

	ToProvisionedClustersCommonPropertiesFeaturesOutput() ProvisionedClustersCommonPropertiesFeaturesOutput
	ToProvisionedClustersCommonPropertiesFeaturesOutputWithContext(context.Context) ProvisionedClustersCommonPropertiesFeaturesOutput
}

// Additional features specs like Arc Agent Onboarding.
type ProvisionedClustersCommonPropertiesFeaturesArgs struct {
	// Arc agentry configuration for the provisioned cluster.
	ArcAgentProfile ArcAgentProfilePtrInput `pulumi:"arcAgentProfile"`
}

// Defaults sets the appropriate defaults for ProvisionedClustersCommonPropertiesFeaturesArgs
func (val *ProvisionedClustersCommonPropertiesFeaturesArgs) Defaults() *ProvisionedClustersCommonPropertiesFeaturesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ProvisionedClustersCommonPropertiesFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersCommonPropertiesFeatures)(nil)).Elem()
}

func (i ProvisionedClustersCommonPropertiesFeaturesArgs) ToProvisionedClustersCommonPropertiesFeaturesOutput() ProvisionedClustersCommonPropertiesFeaturesOutput {
	return i.ToProvisionedClustersCommonPropertiesFeaturesOutputWithContext(context.Background())
}

func (i ProvisionedClustersCommonPropertiesFeaturesArgs) ToProvisionedClustersCommonPropertiesFeaturesOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersCommonPropertiesFeaturesOutput)
}

func (i ProvisionedClustersCommonPropertiesFeaturesArgs) ToProvisionedClustersCommonPropertiesFeaturesPtrOutput() ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return i.ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(context.Background())
}

func (i ProvisionedClustersCommonPropertiesFeaturesArgs) ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersCommonPropertiesFeaturesOutput).ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(ctx)
}

// ProvisionedClustersCommonPropertiesFeaturesPtrInput is an input type that accepts ProvisionedClustersCommonPropertiesFeaturesArgs, ProvisionedClustersCommonPropertiesFeaturesPtr and ProvisionedClustersCommonPropertiesFeaturesPtrOutput values.
// You can construct a concrete instance of `ProvisionedClustersCommonPropertiesFeaturesPtrInput` via:
//
//	        ProvisionedClustersCommonPropertiesFeaturesArgs{...}
//
//	or:
//
//	        nil
type ProvisionedClustersCommonPropertiesFeaturesPtrInput interface {
	pulumi.Input

	ToProvisionedClustersCommonPropertiesFeaturesPtrOutput() ProvisionedClustersCommonPropertiesFeaturesPtrOutput
	ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(context.Context) ProvisionedClustersCommonPropertiesFeaturesPtrOutput
}

type provisionedClustersCommonPropertiesFeaturesPtrType ProvisionedClustersCommonPropertiesFeaturesArgs

func ProvisionedClustersCommonPropertiesFeaturesPtr(v *ProvisionedClustersCommonPropertiesFeaturesArgs) ProvisionedClustersCommonPropertiesFeaturesPtrInput {
	return (*provisionedClustersCommonPropertiesFeaturesPtrType)(v)
}

func (*provisionedClustersCommonPropertiesFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersCommonPropertiesFeatures)(nil)).Elem()
}

func (i *provisionedClustersCommonPropertiesFeaturesPtrType) ToProvisionedClustersCommonPropertiesFeaturesPtrOutput() ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return i.ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(context.Background())
}

func (i *provisionedClustersCommonPropertiesFeaturesPtrType) ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersCommonPropertiesFeaturesPtrOutput)
}

// Additional features specs like Arc Agent Onboarding.
type ProvisionedClustersCommonPropertiesFeaturesOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersCommonPropertiesFeatures)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesFeaturesOutput) ToProvisionedClustersCommonPropertiesFeaturesOutput() ProvisionedClustersCommonPropertiesFeaturesOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesFeaturesOutput) ToProvisionedClustersCommonPropertiesFeaturesOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesFeaturesOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesFeaturesOutput) ToProvisionedClustersCommonPropertiesFeaturesPtrOutput() ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return o.ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(context.Background())
}

func (o ProvisionedClustersCommonPropertiesFeaturesOutput) ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisionedClustersCommonPropertiesFeatures) *ProvisionedClustersCommonPropertiesFeatures {
		return &v
	}).(ProvisionedClustersCommonPropertiesFeaturesPtrOutput)
}

// Arc agentry configuration for the provisioned cluster.
func (o ProvisionedClustersCommonPropertiesFeaturesOutput) ArcAgentProfile() ArcAgentProfilePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesFeatures) *ArcAgentProfile { return v.ArcAgentProfile }).(ArcAgentProfilePtrOutput)
}

type ProvisionedClustersCommonPropertiesFeaturesPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersCommonPropertiesFeatures)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesFeaturesPtrOutput) ToProvisionedClustersCommonPropertiesFeaturesPtrOutput() ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesFeaturesPtrOutput) ToProvisionedClustersCommonPropertiesFeaturesPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesFeaturesPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesFeaturesPtrOutput) Elem() ProvisionedClustersCommonPropertiesFeaturesOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesFeatures) ProvisionedClustersCommonPropertiesFeatures {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersCommonPropertiesFeatures
		return ret
	}).(ProvisionedClustersCommonPropertiesFeaturesOutput)
}

// Arc agentry configuration for the provisioned cluster.
func (o ProvisionedClustersCommonPropertiesFeaturesPtrOutput) ArcAgentProfile() ArcAgentProfilePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesFeatures) *ArcAgentProfile {
		if v == nil {
			return nil
		}
		return v.ArcAgentProfile
	}).(ArcAgentProfilePtrOutput)
}

type ProvisionedClustersCommonPropertiesResponseError struct {
	Code    *string `pulumi:"code"`
	Message *string `pulumi:"message"`
}

type ProvisionedClustersCommonPropertiesResponseErrorOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersCommonPropertiesResponseError)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseErrorOutput) ToProvisionedClustersCommonPropertiesResponseErrorOutput() ProvisionedClustersCommonPropertiesResponseErrorOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseErrorOutput) ToProvisionedClustersCommonPropertiesResponseErrorOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseErrorOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseErrorOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseError) *string { return v.Code }).(pulumi.StringPtrOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ProvisionedClustersCommonPropertiesResponseErrorPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersCommonPropertiesResponseError)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseErrorPtrOutput) ToProvisionedClustersCommonPropertiesResponseErrorPtrOutput() ProvisionedClustersCommonPropertiesResponseErrorPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseErrorPtrOutput) ToProvisionedClustersCommonPropertiesResponseErrorPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseErrorPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseErrorPtrOutput) Elem() ProvisionedClustersCommonPropertiesResponseErrorOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseError) ProvisionedClustersCommonPropertiesResponseError {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersCommonPropertiesResponseError
		return ret
	}).(ProvisionedClustersCommonPropertiesResponseErrorOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseErrorPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseError) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Additional features specs like Arc Agent Onboarding.
type ProvisionedClustersCommonPropertiesResponseFeatures struct {
	// Arc agentry configuration for the provisioned cluster.
	ArcAgentProfile *ArcAgentProfileResponse `pulumi:"arcAgentProfile"`
}

// Defaults sets the appropriate defaults for ProvisionedClustersCommonPropertiesResponseFeatures
func (val *ProvisionedClustersCommonPropertiesResponseFeatures) Defaults() *ProvisionedClustersCommonPropertiesResponseFeatures {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ArcAgentProfile = tmp.ArcAgentProfile.Defaults()

	return &tmp
}

// Additional features specs like Arc Agent Onboarding.
type ProvisionedClustersCommonPropertiesResponseFeaturesOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersCommonPropertiesResponseFeatures)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesOutput() ProvisionedClustersCommonPropertiesResponseFeaturesOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseFeaturesOutput {
	return o
}

// Arc agentry configuration for the provisioned cluster.
func (o ProvisionedClustersCommonPropertiesResponseFeaturesOutput) ArcAgentProfile() ArcAgentProfileResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseFeatures) *ArcAgentProfileResponse {
		return v.ArcAgentProfile
	}).(ArcAgentProfileResponsePtrOutput)
}

type ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersCommonPropertiesResponseFeatures)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput() ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput) Elem() ProvisionedClustersCommonPropertiesResponseFeaturesOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseFeatures) ProvisionedClustersCommonPropertiesResponseFeatures {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersCommonPropertiesResponseFeatures
		return ret
	}).(ProvisionedClustersCommonPropertiesResponseFeaturesOutput)
}

// Arc agentry configuration for the provisioned cluster.
func (o ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput) ArcAgentProfile() ArcAgentProfileResponsePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseFeatures) *ArcAgentProfileResponse {
		if v == nil {
			return nil
		}
		return v.ArcAgentProfile
	}).(ArcAgentProfileResponsePtrOutput)
}

// Additional features status like Arc Agent Onboarding.
type ProvisionedClustersCommonPropertiesResponseFeaturesStatus struct {
	// Defines the observed Arc Agent status that is resourceSynced back to the ARM resource.
	ArcAgentStatus *ArcAgentStatusResponse `pulumi:"arcAgentStatus"`
}

// Additional features status like Arc Agent Onboarding.
type ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersCommonPropertiesResponseFeaturesStatus)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput() ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesStatusOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput {
	return o
}

// Defines the observed Arc Agent status that is resourceSynced back to the ARM resource.
func (o ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput) ArcAgentStatus() ArcAgentStatusResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseFeaturesStatus) *ArcAgentStatusResponse {
		return v.ArcAgentStatus
	}).(ArcAgentStatusResponsePtrOutput)
}

type ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersCommonPropertiesResponseFeaturesStatus)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput() ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput) ToProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput) Elem() ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseFeaturesStatus) ProvisionedClustersCommonPropertiesResponseFeaturesStatus {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersCommonPropertiesResponseFeaturesStatus
		return ret
	}).(ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput)
}

// Defines the observed Arc Agent status that is resourceSynced back to the ARM resource.
func (o ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput) ArcAgentStatus() ArcAgentStatusResponsePtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseFeaturesStatus) *ArcAgentStatusResponse {
		if v == nil {
			return nil
		}
		return v.ArcAgentStatus
	}).(ArcAgentStatusResponsePtrOutput)
}

// Contains Provisioning errors
type ProvisionedClustersCommonPropertiesResponseProvisioningStatus struct {
	Error       *ProvisionedClustersCommonPropertiesResponseError `pulumi:"error"`
	OperationId *string                                           `pulumi:"operationId"`
	// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
	Phase  *string `pulumi:"phase"`
	Status *string `pulumi:"status"`
}

// Contains Provisioning errors
type ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersCommonPropertiesResponseProvisioningStatus)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput) ToProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput() ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput) ToProvisionedClustersCommonPropertiesResponseProvisioningStatusOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput) Error() ProvisionedClustersCommonPropertiesResponseErrorPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *ProvisionedClustersCommonPropertiesResponseError {
		return v.Error
	}).(ProvisionedClustersCommonPropertiesResponseErrorPtrOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *string { return v.OperationId }).(pulumi.StringPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersCommonPropertiesResponseProvisioningStatus)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) ToProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput() ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) ToProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) Elem() ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseProvisioningStatus) ProvisionedClustersCommonPropertiesResponseProvisioningStatus {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersCommonPropertiesResponseProvisioningStatus
		return ret
	}).(ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) Error() ProvisionedClustersCommonPropertiesResponseErrorPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *ProvisionedClustersCommonPropertiesResponseError {
		if v == nil {
			return nil
		}
		return v.Error
	}).(ProvisionedClustersCommonPropertiesResponseErrorPtrOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) OperationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.OperationId
	}).(pulumi.StringPtrOutput)
}

// Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func (o ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersCommonPropertiesResponseProvisioningStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// HybridAKSClusterStatus defines the observed state of HybridAKSCluster
type ProvisionedClustersCommonPropertiesResponseStatus struct {
	// AddonStatus - Status of Addons
	AddonStatus map[string]AddonStatusResponse `pulumi:"addonStatus"`
	// ErrorMessage - Error messages during creation of cluster
	ErrorMessage *string `pulumi:"errorMessage"`
	// Additional features status like Arc Agent Onboarding.
	FeaturesStatus *ProvisionedClustersCommonPropertiesResponseFeaturesStatus `pulumi:"featuresStatus"`
	// Contains Provisioning errors
	ProvisioningStatus *ProvisionedClustersCommonPropertiesResponseProvisioningStatus `pulumi:"provisioningStatus"`
}

// HybridAKSClusterStatus defines the observed state of HybridAKSCluster
type ProvisionedClustersCommonPropertiesResponseStatusOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersCommonPropertiesResponseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersCommonPropertiesResponseStatus)(nil)).Elem()
}

func (o ProvisionedClustersCommonPropertiesResponseStatusOutput) ToProvisionedClustersCommonPropertiesResponseStatusOutput() ProvisionedClustersCommonPropertiesResponseStatusOutput {
	return o
}

func (o ProvisionedClustersCommonPropertiesResponseStatusOutput) ToProvisionedClustersCommonPropertiesResponseStatusOutputWithContext(ctx context.Context) ProvisionedClustersCommonPropertiesResponseStatusOutput {
	return o
}

// AddonStatus - Status of Addons
func (o ProvisionedClustersCommonPropertiesResponseStatusOutput) AddonStatus() AddonStatusResponseMapOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseStatus) map[string]AddonStatusResponse {
		return v.AddonStatus
	}).(AddonStatusResponseMapOutput)
}

// ErrorMessage - Error messages during creation of cluster
func (o ProvisionedClustersCommonPropertiesResponseStatusOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseStatus) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Additional features status like Arc Agent Onboarding.
func (o ProvisionedClustersCommonPropertiesResponseStatusOutput) FeaturesStatus() ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseStatus) *ProvisionedClustersCommonPropertiesResponseFeaturesStatus {
		return v.FeaturesStatus
	}).(ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput)
}

// Contains Provisioning errors
func (o ProvisionedClustersCommonPropertiesResponseStatusOutput) ProvisioningStatus() ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersCommonPropertiesResponseStatus) *ProvisionedClustersCommonPropertiesResponseProvisioningStatus {
		return v.ProvisioningStatus
	}).(ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput)
}

type ProvisionedClustersExtendedLocation struct {
	// The extended location name.
	Name *string `pulumi:"name"`
	// The extended location type.
	Type *string `pulumi:"type"`
}

// ProvisionedClustersExtendedLocationInput is an input type that accepts ProvisionedClustersExtendedLocationArgs and ProvisionedClustersExtendedLocationOutput values.
// You can construct a concrete instance of `ProvisionedClustersExtendedLocationInput` via:
//
//	ProvisionedClustersExtendedLocationArgs{...}
type ProvisionedClustersExtendedLocationInput interface {
	pulumi.Input

	ToProvisionedClustersExtendedLocationOutput() ProvisionedClustersExtendedLocationOutput
	ToProvisionedClustersExtendedLocationOutputWithContext(context.Context) ProvisionedClustersExtendedLocationOutput
}

type ProvisionedClustersExtendedLocationArgs struct {
	// The extended location name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The extended location type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ProvisionedClustersExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersExtendedLocation)(nil)).Elem()
}

func (i ProvisionedClustersExtendedLocationArgs) ToProvisionedClustersExtendedLocationOutput() ProvisionedClustersExtendedLocationOutput {
	return i.ToProvisionedClustersExtendedLocationOutputWithContext(context.Background())
}

func (i ProvisionedClustersExtendedLocationArgs) ToProvisionedClustersExtendedLocationOutputWithContext(ctx context.Context) ProvisionedClustersExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersExtendedLocationOutput)
}

func (i ProvisionedClustersExtendedLocationArgs) ToProvisionedClustersExtendedLocationPtrOutput() ProvisionedClustersExtendedLocationPtrOutput {
	return i.ToProvisionedClustersExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ProvisionedClustersExtendedLocationArgs) ToProvisionedClustersExtendedLocationPtrOutputWithContext(ctx context.Context) ProvisionedClustersExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersExtendedLocationOutput).ToProvisionedClustersExtendedLocationPtrOutputWithContext(ctx)
}

// ProvisionedClustersExtendedLocationPtrInput is an input type that accepts ProvisionedClustersExtendedLocationArgs, ProvisionedClustersExtendedLocationPtr and ProvisionedClustersExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ProvisionedClustersExtendedLocationPtrInput` via:
//
//	        ProvisionedClustersExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ProvisionedClustersExtendedLocationPtrInput interface {
	pulumi.Input

	ToProvisionedClustersExtendedLocationPtrOutput() ProvisionedClustersExtendedLocationPtrOutput
	ToProvisionedClustersExtendedLocationPtrOutputWithContext(context.Context) ProvisionedClustersExtendedLocationPtrOutput
}

type provisionedClustersExtendedLocationPtrType ProvisionedClustersExtendedLocationArgs

func ProvisionedClustersExtendedLocationPtr(v *ProvisionedClustersExtendedLocationArgs) ProvisionedClustersExtendedLocationPtrInput {
	return (*provisionedClustersExtendedLocationPtrType)(v)
}

func (*provisionedClustersExtendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersExtendedLocation)(nil)).Elem()
}

func (i *provisionedClustersExtendedLocationPtrType) ToProvisionedClustersExtendedLocationPtrOutput() ProvisionedClustersExtendedLocationPtrOutput {
	return i.ToProvisionedClustersExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *provisionedClustersExtendedLocationPtrType) ToProvisionedClustersExtendedLocationPtrOutputWithContext(ctx context.Context) ProvisionedClustersExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedClustersExtendedLocationPtrOutput)
}

type ProvisionedClustersExtendedLocationOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersExtendedLocation)(nil)).Elem()
}

func (o ProvisionedClustersExtendedLocationOutput) ToProvisionedClustersExtendedLocationOutput() ProvisionedClustersExtendedLocationOutput {
	return o
}

func (o ProvisionedClustersExtendedLocationOutput) ToProvisionedClustersExtendedLocationOutputWithContext(ctx context.Context) ProvisionedClustersExtendedLocationOutput {
	return o
}

func (o ProvisionedClustersExtendedLocationOutput) ToProvisionedClustersExtendedLocationPtrOutput() ProvisionedClustersExtendedLocationPtrOutput {
	return o.ToProvisionedClustersExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ProvisionedClustersExtendedLocationOutput) ToProvisionedClustersExtendedLocationPtrOutputWithContext(ctx context.Context) ProvisionedClustersExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisionedClustersExtendedLocation) *ProvisionedClustersExtendedLocation {
		return &v
	}).(ProvisionedClustersExtendedLocationPtrOutput)
}

// The extended location name.
func (o ProvisionedClustersExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ProvisionedClustersExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProvisionedClustersExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersExtendedLocation)(nil)).Elem()
}

func (o ProvisionedClustersExtendedLocationPtrOutput) ToProvisionedClustersExtendedLocationPtrOutput() ProvisionedClustersExtendedLocationPtrOutput {
	return o
}

func (o ProvisionedClustersExtendedLocationPtrOutput) ToProvisionedClustersExtendedLocationPtrOutputWithContext(ctx context.Context) ProvisionedClustersExtendedLocationPtrOutput {
	return o
}

func (o ProvisionedClustersExtendedLocationPtrOutput) Elem() ProvisionedClustersExtendedLocationOutput {
	return o.ApplyT(func(v *ProvisionedClustersExtendedLocation) ProvisionedClustersExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersExtendedLocation
		return ret
	}).(ProvisionedClustersExtendedLocationOutput)
}

// The extended location name.
func (o ProvisionedClustersExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ProvisionedClustersExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ProvisionedClustersResponsePropertiesResponse struct {
	// AAD profile for the provisioned cluster.
	AadProfile *AADProfileResponseResponse `pulumi:"aadProfile"`
	// AddonProfiles - Profile of managed cluster add-on.
	AddonProfiles map[string]AddonProfilesResponse `pulumi:"addonProfiles"`
	// The agent pools of the cluster.
	AgentPoolProfiles []NamedAgentPoolProfileResponse `pulumi:"agentPoolProfiles"`
	// The underlying cloud infra provider properties.
	CloudProviderProfile *CloudProviderProfileResponse `pulumi:"cloudProviderProfile"`
	// ControlPlane - ControlPlane Configuration
	ControlPlane *ControlPlaneProfileResponse `pulumi:"controlPlane"`
	// EnableRBAC - Whether to enable Kubernetes Role-Based Access Control.
	EnableRbac *bool `pulumi:"enableRbac"`
	// Additional features specs like Arc Agent Onboarding.
	Features *ProvisionedClustersCommonPropertiesResponseFeatures `pulumi:"features"`
	// HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers.
	HttpProxyConfig *HttpProxyConfigResponseResponse `pulumi:"httpProxyConfig"`
	// KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
	LinuxProfile *LinuxProfilePropertiesResponse `pulumi:"linuxProfile"`
	// NetworkProfile - Profile of network configuration.
	NetworkProfile *NetworkProfileResponse `pulumi:"networkProfile"`
	// NodeResourceGroup - Name of the resource group containing agent pool nodes.
	NodeResourceGroup *string `pulumi:"nodeResourceGroup"`
	ProvisioningState string  `pulumi:"provisioningState"`
	// HybridAKSClusterStatus defines the observed state of HybridAKSCluster
	Status ProvisionedClustersCommonPropertiesResponseStatus `pulumi:"status"`
	// WindowsProfile - Profile for Windows VMs in the Provisioned Cluster.
	WindowsProfile *WindowsProfileResponseResponse `pulumi:"windowsProfile"`
}

// Defaults sets the appropriate defaults for ProvisionedClustersResponsePropertiesResponse
func (val *ProvisionedClustersResponsePropertiesResponse) Defaults() *ProvisionedClustersResponsePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ControlPlane = tmp.ControlPlane.Defaults()

	tmp.Features = tmp.Features.Defaults()

	tmp.NetworkProfile = tmp.NetworkProfile.Defaults()

	return &tmp
}

type ProvisionedClustersResponsePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersResponsePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersResponsePropertiesResponse)(nil)).Elem()
}

func (o ProvisionedClustersResponsePropertiesResponseOutput) ToProvisionedClustersResponsePropertiesResponseOutput() ProvisionedClustersResponsePropertiesResponseOutput {
	return o
}

func (o ProvisionedClustersResponsePropertiesResponseOutput) ToProvisionedClustersResponsePropertiesResponseOutputWithContext(ctx context.Context) ProvisionedClustersResponsePropertiesResponseOutput {
	return o
}

// AAD profile for the provisioned cluster.
func (o ProvisionedClustersResponsePropertiesResponseOutput) AadProfile() AADProfileResponseResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *AADProfileResponseResponse { return v.AadProfile }).(AADProfileResponseResponsePtrOutput)
}

// AddonProfiles - Profile of managed cluster add-on.
func (o ProvisionedClustersResponsePropertiesResponseOutput) AddonProfiles() AddonProfilesResponseMapOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) map[string]AddonProfilesResponse {
		return v.AddonProfiles
	}).(AddonProfilesResponseMapOutput)
}

// The agent pools of the cluster.
func (o ProvisionedClustersResponsePropertiesResponseOutput) AgentPoolProfiles() NamedAgentPoolProfileResponseArrayOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) []NamedAgentPoolProfileResponse {
		return v.AgentPoolProfiles
	}).(NamedAgentPoolProfileResponseArrayOutput)
}

// The underlying cloud infra provider properties.
func (o ProvisionedClustersResponsePropertiesResponseOutput) CloudProviderProfile() CloudProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *CloudProviderProfileResponse {
		return v.CloudProviderProfile
	}).(CloudProviderProfileResponsePtrOutput)
}

// ControlPlane - ControlPlane Configuration
func (o ProvisionedClustersResponsePropertiesResponseOutput) ControlPlane() ControlPlaneProfileResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *ControlPlaneProfileResponse {
		return v.ControlPlane
	}).(ControlPlaneProfileResponsePtrOutput)
}

// EnableRBAC - Whether to enable Kubernetes Role-Based Access Control.
func (o ProvisionedClustersResponsePropertiesResponseOutput) EnableRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *bool { return v.EnableRbac }).(pulumi.BoolPtrOutput)
}

// Additional features specs like Arc Agent Onboarding.
func (o ProvisionedClustersResponsePropertiesResponseOutput) Features() ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *ProvisionedClustersCommonPropertiesResponseFeatures {
		return v.Features
	}).(ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput)
}

// HttpProxyConfig - Configurations for provisioning the cluster with HTTP proxy servers.
func (o ProvisionedClustersResponsePropertiesResponseOutput) HttpProxyConfig() HttpProxyConfigResponseResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *HttpProxyConfigResponseResponse {
		return v.HttpProxyConfig
	}).(HttpProxyConfigResponseResponsePtrOutput)
}

// KubernetesVersion - Version of Kubernetes specified when creating the managed cluster.
func (o ProvisionedClustersResponsePropertiesResponseOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *string { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
func (o ProvisionedClustersResponsePropertiesResponseOutput) LinuxProfile() LinuxProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *LinuxProfilePropertiesResponse {
		return v.LinuxProfile
	}).(LinuxProfilePropertiesResponsePtrOutput)
}

// NetworkProfile - Profile of network configuration.
func (o ProvisionedClustersResponsePropertiesResponseOutput) NetworkProfile() NetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *NetworkProfileResponse { return v.NetworkProfile }).(NetworkProfileResponsePtrOutput)
}

// NodeResourceGroup - Name of the resource group containing agent pool nodes.
func (o ProvisionedClustersResponsePropertiesResponseOutput) NodeResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *string { return v.NodeResourceGroup }).(pulumi.StringPtrOutput)
}

func (o ProvisionedClustersResponsePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// HybridAKSClusterStatus defines the observed state of HybridAKSCluster
func (o ProvisionedClustersResponsePropertiesResponseOutput) Status() ProvisionedClustersCommonPropertiesResponseStatusOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) ProvisionedClustersCommonPropertiesResponseStatus {
		return v.Status
	}).(ProvisionedClustersCommonPropertiesResponseStatusOutput)
}

// WindowsProfile - Profile for Windows VMs in the Provisioned Cluster.
func (o ProvisionedClustersResponsePropertiesResponseOutput) WindowsProfile() WindowsProfileResponseResponsePtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponsePropertiesResponse) *WindowsProfileResponseResponse {
		return v.WindowsProfile
	}).(WindowsProfileResponseResponsePtrOutput)
}

type ProvisionedClustersResponseResponseExtendedLocation struct {
	// The extended location name.
	Name *string `pulumi:"name"`
	// The extended location type.
	Type *string `pulumi:"type"`
}

type ProvisionedClustersResponseResponseExtendedLocationOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersResponseResponseExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisionedClustersResponseResponseExtendedLocation)(nil)).Elem()
}

func (o ProvisionedClustersResponseResponseExtendedLocationOutput) ToProvisionedClustersResponseResponseExtendedLocationOutput() ProvisionedClustersResponseResponseExtendedLocationOutput {
	return o
}

func (o ProvisionedClustersResponseResponseExtendedLocationOutput) ToProvisionedClustersResponseResponseExtendedLocationOutputWithContext(ctx context.Context) ProvisionedClustersResponseResponseExtendedLocationOutput {
	return o
}

// The extended location name.
func (o ProvisionedClustersResponseResponseExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponseResponseExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ProvisionedClustersResponseResponseExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisionedClustersResponseResponseExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProvisionedClustersResponseResponseExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ProvisionedClustersResponseResponseExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedClustersResponseResponseExtendedLocation)(nil)).Elem()
}

func (o ProvisionedClustersResponseResponseExtendedLocationPtrOutput) ToProvisionedClustersResponseResponseExtendedLocationPtrOutput() ProvisionedClustersResponseResponseExtendedLocationPtrOutput {
	return o
}

func (o ProvisionedClustersResponseResponseExtendedLocationPtrOutput) ToProvisionedClustersResponseResponseExtendedLocationPtrOutputWithContext(ctx context.Context) ProvisionedClustersResponseResponseExtendedLocationPtrOutput {
	return o
}

func (o ProvisionedClustersResponseResponseExtendedLocationPtrOutput) Elem() ProvisionedClustersResponseResponseExtendedLocationOutput {
	return o.ApplyT(func(v *ProvisionedClustersResponseResponseExtendedLocation) ProvisionedClustersResponseResponseExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ProvisionedClustersResponseResponseExtendedLocation
		return ret
	}).(ProvisionedClustersResponseResponseExtendedLocationOutput)
}

// The extended location name.
func (o ProvisionedClustersResponseResponseExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersResponseResponseExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ProvisionedClustersResponseResponseExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedClustersResponseResponseExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// WindowsProfile - Profile for Windows VMs in the container service cluster.
type WindowsProfile struct {
	// AdminPassword - Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	AdminPassword *string `pulumi:"adminPassword"`
	// AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
	AdminUsername *string `pulumi:"adminUsername"`
	// EnableCSIProxy - Whether to enable CSI proxy.
	EnableCsiProxy *bool `pulumi:"enableCsiProxy"`
	// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
	LicenseType *string `pulumi:"licenseType"`
}

// WindowsProfileInput is an input type that accepts WindowsProfileArgs and WindowsProfileOutput values.
// You can construct a concrete instance of `WindowsProfileInput` via:
//
//	WindowsProfileArgs{...}
type WindowsProfileInput interface {
	pulumi.Input

	ToWindowsProfileOutput() WindowsProfileOutput
	ToWindowsProfileOutputWithContext(context.Context) WindowsProfileOutput
}

// WindowsProfile - Profile for Windows VMs in the container service cluster.
type WindowsProfileArgs struct {
	// AdminPassword - Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// EnableCSIProxy - Whether to enable CSI proxy.
	EnableCsiProxy pulumi.BoolPtrInput `pulumi:"enableCsiProxy"`
	// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
}

func (WindowsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsProfile)(nil)).Elem()
}

func (i WindowsProfileArgs) ToWindowsProfileOutput() WindowsProfileOutput {
	return i.ToWindowsProfileOutputWithContext(context.Background())
}

func (i WindowsProfileArgs) ToWindowsProfileOutputWithContext(ctx context.Context) WindowsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsProfileOutput)
}

func (i WindowsProfileArgs) ToWindowsProfilePtrOutput() WindowsProfilePtrOutput {
	return i.ToWindowsProfilePtrOutputWithContext(context.Background())
}

func (i WindowsProfileArgs) ToWindowsProfilePtrOutputWithContext(ctx context.Context) WindowsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsProfileOutput).ToWindowsProfilePtrOutputWithContext(ctx)
}

// WindowsProfilePtrInput is an input type that accepts WindowsProfileArgs, WindowsProfilePtr and WindowsProfilePtrOutput values.
// You can construct a concrete instance of `WindowsProfilePtrInput` via:
//
//	        WindowsProfileArgs{...}
//
//	or:
//
//	        nil
type WindowsProfilePtrInput interface {
	pulumi.Input

	ToWindowsProfilePtrOutput() WindowsProfilePtrOutput
	ToWindowsProfilePtrOutputWithContext(context.Context) WindowsProfilePtrOutput
}

type windowsProfilePtrType WindowsProfileArgs

func WindowsProfilePtr(v *WindowsProfileArgs) WindowsProfilePtrInput {
	return (*windowsProfilePtrType)(v)
}

func (*windowsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsProfile)(nil)).Elem()
}

func (i *windowsProfilePtrType) ToWindowsProfilePtrOutput() WindowsProfilePtrOutput {
	return i.ToWindowsProfilePtrOutputWithContext(context.Background())
}

func (i *windowsProfilePtrType) ToWindowsProfilePtrOutputWithContext(ctx context.Context) WindowsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsProfilePtrOutput)
}

// WindowsProfile - Profile for Windows VMs in the container service cluster.
type WindowsProfileOutput struct{ *pulumi.OutputState }

func (WindowsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsProfile)(nil)).Elem()
}

func (o WindowsProfileOutput) ToWindowsProfileOutput() WindowsProfileOutput {
	return o
}

func (o WindowsProfileOutput) ToWindowsProfileOutputWithContext(ctx context.Context) WindowsProfileOutput {
	return o
}

func (o WindowsProfileOutput) ToWindowsProfilePtrOutput() WindowsProfilePtrOutput {
	return o.ToWindowsProfilePtrOutputWithContext(context.Background())
}

func (o WindowsProfileOutput) ToWindowsProfilePtrOutputWithContext(ctx context.Context) WindowsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsProfile) *WindowsProfile {
		return &v
	}).(WindowsProfilePtrOutput)
}

// AdminPassword - Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
func (o WindowsProfileOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsProfile) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o WindowsProfileOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsProfile) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// EnableCSIProxy - Whether to enable CSI proxy.
func (o WindowsProfileOutput) EnableCsiProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsProfile) *bool { return v.EnableCsiProxy }).(pulumi.BoolPtrOutput)
}

// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
func (o WindowsProfileOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsProfile) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

type WindowsProfilePtrOutput struct{ *pulumi.OutputState }

func (WindowsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsProfile)(nil)).Elem()
}

func (o WindowsProfilePtrOutput) ToWindowsProfilePtrOutput() WindowsProfilePtrOutput {
	return o
}

func (o WindowsProfilePtrOutput) ToWindowsProfilePtrOutputWithContext(ctx context.Context) WindowsProfilePtrOutput {
	return o
}

func (o WindowsProfilePtrOutput) Elem() WindowsProfileOutput {
	return o.ApplyT(func(v *WindowsProfile) WindowsProfile {
		if v != nil {
			return *v
		}
		var ret WindowsProfile
		return ret
	}).(WindowsProfileOutput)
}

// AdminPassword - Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
func (o WindowsProfilePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o WindowsProfilePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// EnableCSIProxy - Whether to enable CSI proxy.
func (o WindowsProfilePtrOutput) EnableCsiProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCsiProxy
	}).(pulumi.BoolPtrOutput)
}

// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
func (o WindowsProfilePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsProfile) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Profile for Windows VMs in the container service cluster.
type WindowsProfileResponseResponse struct {
	// AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
	AdminUsername *string `pulumi:"adminUsername"`
	// EnableCSIProxy - Whether to enable CSI proxy.
	EnableCsiProxy *bool `pulumi:"enableCsiProxy"`
	// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
	LicenseType *string `pulumi:"licenseType"`
}

// Profile for Windows VMs in the container service cluster.
type WindowsProfileResponseResponseOutput struct{ *pulumi.OutputState }

func (WindowsProfileResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsProfileResponseResponse)(nil)).Elem()
}

func (o WindowsProfileResponseResponseOutput) ToWindowsProfileResponseResponseOutput() WindowsProfileResponseResponseOutput {
	return o
}

func (o WindowsProfileResponseResponseOutput) ToWindowsProfileResponseResponseOutputWithContext(ctx context.Context) WindowsProfileResponseResponseOutput {
	return o
}

// AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o WindowsProfileResponseResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsProfileResponseResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// EnableCSIProxy - Whether to enable CSI proxy.
func (o WindowsProfileResponseResponseOutput) EnableCsiProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsProfileResponseResponse) *bool { return v.EnableCsiProxy }).(pulumi.BoolPtrOutput)
}

// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
func (o WindowsProfileResponseResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsProfileResponseResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

type WindowsProfileResponseResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsProfileResponseResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsProfileResponseResponse)(nil)).Elem()
}

func (o WindowsProfileResponseResponsePtrOutput) ToWindowsProfileResponseResponsePtrOutput() WindowsProfileResponseResponsePtrOutput {
	return o
}

func (o WindowsProfileResponseResponsePtrOutput) ToWindowsProfileResponseResponsePtrOutputWithContext(ctx context.Context) WindowsProfileResponseResponsePtrOutput {
	return o
}

func (o WindowsProfileResponseResponsePtrOutput) Elem() WindowsProfileResponseResponseOutput {
	return o.ApplyT(func(v *WindowsProfileResponseResponse) WindowsProfileResponseResponse {
		if v != nil {
			return *v
		}
		var ret WindowsProfileResponseResponse
		return ret
	}).(WindowsProfileResponseResponseOutput)
}

// AdminUsername - Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o WindowsProfileResponseResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsProfileResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// EnableCSIProxy - Whether to enable CSI proxy.
func (o WindowsProfileResponseResponsePtrOutput) EnableCsiProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsProfileResponseResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCsiProxy
	}).(pulumi.BoolPtrOutput)
}

// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
func (o WindowsProfileResponseResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsProfileResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AADProfileOutput{})
	pulumi.RegisterOutputType(AADProfilePtrOutput{})
	pulumi.RegisterOutputType(AADProfileResponseResponseOutput{})
	pulumi.RegisterOutputType(AADProfileResponseResponsePtrOutput{})
	pulumi.RegisterOutputType(AddonProfilesOutput{})
	pulumi.RegisterOutputType(AddonProfilesMapOutput{})
	pulumi.RegisterOutputType(AddonProfilesResponseOutput{})
	pulumi.RegisterOutputType(AddonProfilesResponseMapOutput{})
	pulumi.RegisterOutputType(AddonStatusResponseOutput{})
	pulumi.RegisterOutputType(AddonStatusResponseMapOutput{})
	pulumi.RegisterOutputType(AgentPoolExtendedLocationOutput{})
	pulumi.RegisterOutputType(AgentPoolExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusErrorOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusErrorPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusProvisioningStatusOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusProvisioningStatusPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusResponseErrorOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusResponseErrorPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusResponseProvisioningStatusOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusResponseProvisioningStatusPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusResponseStatusOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusResponseStatusPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusStatusOutput{})
	pulumi.RegisterOutputType(AgentPoolProvisioningStatusStatusPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolResponseExtendedLocationOutput{})
	pulumi.RegisterOutputType(AgentPoolResponseExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ArcAgentProfileOutput{})
	pulumi.RegisterOutputType(ArcAgentProfilePtrOutput{})
	pulumi.RegisterOutputType(ArcAgentProfileResponseOutput{})
	pulumi.RegisterOutputType(ArcAgentProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ArcAgentStatusResponseOutput{})
	pulumi.RegisterOutputType(ArcAgentStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileOutput{})
	pulumi.RegisterOutputType(CloudProviderProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileInfraNetworkProfileOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileInfraNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileInfraStorageProfileOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileInfraStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileResponseOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileResponseInfraNetworkProfileOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileResponseInfraNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileResponseInfraStorageProfileOutput{})
	pulumi.RegisterOutputType(CloudProviderProfileResponseInfraStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(ControlPlaneEndpointProfileControlPlaneEndpointOutput{})
	pulumi.RegisterOutputType(ControlPlaneEndpointProfileControlPlaneEndpointPtrOutput{})
	pulumi.RegisterOutputType(ControlPlaneEndpointProfileResponseControlPlaneEndpointOutput{})
	pulumi.RegisterOutputType(ControlPlaneEndpointProfileResponseControlPlaneEndpointPtrOutput{})
	pulumi.RegisterOutputType(ControlPlaneProfileOutput{})
	pulumi.RegisterOutputType(ControlPlaneProfilePtrOutput{})
	pulumi.RegisterOutputType(ControlPlaneProfileResponseOutput{})
	pulumi.RegisterOutputType(ControlPlaneProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpProxyConfigOutput{})
	pulumi.RegisterOutputType(HttpProxyConfigPtrOutput{})
	pulumi.RegisterOutputType(HttpProxyConfigResponseResponseOutput{})
	pulumi.RegisterOutputType(HttpProxyConfigResponseResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesPublicKeysOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesPublicKeysArrayOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesResponsePublicKeysOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesResponsePublicKeysArrayOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesResponseSshOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesResponseSshPtrOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesSshOutput{})
	pulumi.RegisterOutputType(LinuxProfilePropertiesSshPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerProfileOutput{})
	pulumi.RegisterOutputType(LoadBalancerProfilePtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerProfileResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(NamedAgentPoolProfileOutput{})
	pulumi.RegisterOutputType(NamedAgentPoolProfileArrayOutput{})
	pulumi.RegisterOutputType(NamedAgentPoolProfileResponseOutput{})
	pulumi.RegisterOutputType(NamedAgentPoolProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkProfileOutput{})
	pulumi.RegisterOutputType(NetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClusterIdentityOutput{})
	pulumi.RegisterOutputType(ProvisionedClusterIdentityPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClusterIdentityResponseOutput{})
	pulumi.RegisterOutputType(ProvisionedClusterIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersAllPropertiesOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersAllPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesFeaturesOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesFeaturesPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseErrorOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseErrorPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseFeaturesOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseFeaturesPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseFeaturesStatusOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseFeaturesStatusPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseProvisioningStatusOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseProvisioningStatusPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersCommonPropertiesResponseStatusOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersExtendedLocationOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersResponsePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersResponseResponseExtendedLocationOutput{})
	pulumi.RegisterOutputType(ProvisionedClustersResponseResponseExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(WindowsProfileOutput{})
	pulumi.RegisterOutputType(WindowsProfilePtrOutput{})
	pulumi.RegisterOutputType(WindowsProfileResponseResponseOutput{})
	pulumi.RegisterOutputType(WindowsProfileResponseResponsePtrOutput{})
}
