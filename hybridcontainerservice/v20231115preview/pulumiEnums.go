// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231115preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Indicates whether Azure Hybrid Benefit is opted in
type AzureHybridBenefit string

const (
	AzureHybridBenefitTrue          = AzureHybridBenefit("True")
	AzureHybridBenefitFalse         = AzureHybridBenefit("False")
	AzureHybridBenefitNotApplicable = AzureHybridBenefit("NotApplicable")
)

func (AzureHybridBenefit) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureHybridBenefit)(nil)).Elem()
}

func (e AzureHybridBenefit) ToAzureHybridBenefitOutput() AzureHybridBenefitOutput {
	return pulumi.ToOutput(e).(AzureHybridBenefitOutput)
}

func (e AzureHybridBenefit) ToAzureHybridBenefitOutputWithContext(ctx context.Context) AzureHybridBenefitOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AzureHybridBenefitOutput)
}

func (e AzureHybridBenefit) ToAzureHybridBenefitPtrOutput() AzureHybridBenefitPtrOutput {
	return e.ToAzureHybridBenefitPtrOutputWithContext(context.Background())
}

func (e AzureHybridBenefit) ToAzureHybridBenefitPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPtrOutput {
	return AzureHybridBenefit(e).ToAzureHybridBenefitOutputWithContext(ctx).ToAzureHybridBenefitPtrOutputWithContext(ctx)
}

func (e AzureHybridBenefit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AzureHybridBenefit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AzureHybridBenefit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AzureHybridBenefit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AzureHybridBenefitOutput struct{ *pulumi.OutputState }

func (AzureHybridBenefitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureHybridBenefit)(nil)).Elem()
}

func (o AzureHybridBenefitOutput) ToAzureHybridBenefitOutput() AzureHybridBenefitOutput {
	return o
}

func (o AzureHybridBenefitOutput) ToAzureHybridBenefitOutputWithContext(ctx context.Context) AzureHybridBenefitOutput {
	return o
}

func (o AzureHybridBenefitOutput) ToAzureHybridBenefitPtrOutput() AzureHybridBenefitPtrOutput {
	return o.ToAzureHybridBenefitPtrOutputWithContext(context.Background())
}

func (o AzureHybridBenefitOutput) ToAzureHybridBenefitPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureHybridBenefit) *AzureHybridBenefit {
		return &v
	}).(AzureHybridBenefitPtrOutput)
}

func (o AzureHybridBenefitOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AzureHybridBenefitOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AzureHybridBenefit) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AzureHybridBenefitOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AzureHybridBenefitOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AzureHybridBenefit) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AzureHybridBenefitPtrOutput struct{ *pulumi.OutputState }

func (AzureHybridBenefitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureHybridBenefit)(nil)).Elem()
}

func (o AzureHybridBenefitPtrOutput) ToAzureHybridBenefitPtrOutput() AzureHybridBenefitPtrOutput {
	return o
}

func (o AzureHybridBenefitPtrOutput) ToAzureHybridBenefitPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPtrOutput {
	return o
}

func (o AzureHybridBenefitPtrOutput) Elem() AzureHybridBenefitOutput {
	return o.ApplyT(func(v *AzureHybridBenefit) AzureHybridBenefit {
		if v != nil {
			return *v
		}
		var ret AzureHybridBenefit
		return ret
	}).(AzureHybridBenefitOutput)
}

func (o AzureHybridBenefitPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AzureHybridBenefitPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AzureHybridBenefit) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AzureHybridBenefitInput is an input type that accepts values of the AzureHybridBenefit enum
// A concrete instance of `AzureHybridBenefitInput` can be one of the following:
//
//	AzureHybridBenefitTrue
//	AzureHybridBenefitFalse
//	AzureHybridBenefitNotApplicable
type AzureHybridBenefitInput interface {
	pulumi.Input

	ToAzureHybridBenefitOutput() AzureHybridBenefitOutput
	ToAzureHybridBenefitOutputWithContext(context.Context) AzureHybridBenefitOutput
}

var azureHybridBenefitPtrType = reflect.TypeOf((**AzureHybridBenefit)(nil)).Elem()

type AzureHybridBenefitPtrInput interface {
	pulumi.Input

	ToAzureHybridBenefitPtrOutput() AzureHybridBenefitPtrOutput
	ToAzureHybridBenefitPtrOutputWithContext(context.Context) AzureHybridBenefitPtrOutput
}

type azureHybridBenefitPtr string

func AzureHybridBenefitPtr(v string) AzureHybridBenefitPtrInput {
	return (*azureHybridBenefitPtr)(&v)
}

func (*azureHybridBenefitPtr) ElementType() reflect.Type {
	return azureHybridBenefitPtrType
}

func (in *azureHybridBenefitPtr) ToAzureHybridBenefitPtrOutput() AzureHybridBenefitPtrOutput {
	return pulumi.ToOutput(in).(AzureHybridBenefitPtrOutput)
}

func (in *azureHybridBenefitPtr) ToAzureHybridBenefitPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AzureHybridBenefitPtrOutput)
}

func (in *azureHybridBenefitPtr) ToOutput(ctx context.Context) pulumix.Output[*AzureHybridBenefit] {
	return pulumix.Output[*AzureHybridBenefit]{
		OutputState: in.ToAzureHybridBenefitPtrOutputWithContext(ctx).OutputState,
	}
}

// The extended location type.
type ExtendedLocationTypes string

const (
	ExtendedLocationTypesCustomLocation = ExtendedLocationTypes("CustomLocation")
)

func (ExtendedLocationTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationTypes)(nil)).Elem()
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput {
	return pulumi.ToOutput(e).(ExtendedLocationTypesOutput)
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesOutputWithContext(ctx context.Context) ExtendedLocationTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExtendedLocationTypesOutput)
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return e.ToExtendedLocationTypesPtrOutputWithContext(context.Background())
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return ExtendedLocationTypes(e).ToExtendedLocationTypesOutputWithContext(ctx).ToExtendedLocationTypesPtrOutputWithContext(ctx)
}

func (e ExtendedLocationTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExtendedLocationTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExtendedLocationTypesOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationTypes)(nil)).Elem()
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput {
	return o
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesOutputWithContext(ctx context.Context) ExtendedLocationTypesOutput {
	return o
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return o.ToExtendedLocationTypesPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocationTypes) *ExtendedLocationTypes {
		return &v
	}).(ExtendedLocationTypesPtrOutput)
}

func (o ExtendedLocationTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExtendedLocationTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExtendedLocationTypesPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationTypes)(nil)).Elem()
}

func (o ExtendedLocationTypesPtrOutput) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return o
}

func (o ExtendedLocationTypesPtrOutput) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return o
}

func (o ExtendedLocationTypesPtrOutput) Elem() ExtendedLocationTypesOutput {
	return o.ApplyT(func(v *ExtendedLocationTypes) ExtendedLocationTypes {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationTypes
		return ret
	}).(ExtendedLocationTypesOutput)
}

func (o ExtendedLocationTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExtendedLocationTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExtendedLocationTypesInput is an input type that accepts values of the ExtendedLocationTypes enum
// A concrete instance of `ExtendedLocationTypesInput` can be one of the following:
//
//	ExtendedLocationTypesCustomLocation
type ExtendedLocationTypesInput interface {
	pulumi.Input

	ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput
	ToExtendedLocationTypesOutputWithContext(context.Context) ExtendedLocationTypesOutput
}

var extendedLocationTypesPtrType = reflect.TypeOf((**ExtendedLocationTypes)(nil)).Elem()

type ExtendedLocationTypesPtrInput interface {
	pulumi.Input

	ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput
	ToExtendedLocationTypesPtrOutputWithContext(context.Context) ExtendedLocationTypesPtrOutput
}

type extendedLocationTypesPtr string

func ExtendedLocationTypesPtr(v string) ExtendedLocationTypesPtrInput {
	return (*extendedLocationTypesPtr)(&v)
}

func (*extendedLocationTypesPtr) ElementType() reflect.Type {
	return extendedLocationTypesPtrType
}

func (in *extendedLocationTypesPtr) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return pulumi.ToOutput(in).(ExtendedLocationTypesPtrOutput)
}

func (in *extendedLocationTypesPtr) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExtendedLocationTypesPtrOutput)
}

func (in *extendedLocationTypesPtr) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocationTypes] {
	return pulumix.Output[*ExtendedLocationTypes]{
		OutputState: in.ToExtendedLocationTypesPtrOutputWithContext(ctx).OutputState,
	}
}

// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
type NetworkPolicy string

const (
	NetworkPolicyCalico  = NetworkPolicy("calico")
	NetworkPolicyFlannel = NetworkPolicy("flannel")
)

func (NetworkPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (e NetworkPolicy) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return pulumi.ToOutput(e).(NetworkPolicyOutput)
}

func (e NetworkPolicy) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkPolicyOutput)
}

func (e NetworkPolicy) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return e.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (e NetworkPolicy) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return NetworkPolicy(e).ToNetworkPolicyOutputWithContext(ctx).ToNetworkPolicyPtrOutputWithContext(ctx)
}

func (e NetworkPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkPolicyOutput struct{ *pulumi.OutputState }

func (NetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPolicy) *NetworkPolicy {
		return &v
	}).(NetworkPolicyPtrOutput)
}

func (o NetworkPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkPolicyPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) Elem() NetworkPolicyOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicy {
		if v != nil {
			return *v
		}
		var ret NetworkPolicy
		return ret
	}).(NetworkPolicyOutput)
}

func (o NetworkPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkPolicyInput is an input type that accepts values of the NetworkPolicy enum
// A concrete instance of `NetworkPolicyInput` can be one of the following:
//
//	NetworkPolicyCalico
//	NetworkPolicyFlannel
type NetworkPolicyInput interface {
	pulumi.Input

	ToNetworkPolicyOutput() NetworkPolicyOutput
	ToNetworkPolicyOutputWithContext(context.Context) NetworkPolicyOutput
}

var networkPolicyPtrType = reflect.TypeOf((**NetworkPolicy)(nil)).Elem()

type NetworkPolicyPtrInput interface {
	pulumi.Input

	ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput
	ToNetworkPolicyPtrOutputWithContext(context.Context) NetworkPolicyPtrOutput
}

type networkPolicyPtr string

func NetworkPolicyPtr(v string) NetworkPolicyPtrInput {
	return (*networkPolicyPtr)(&v)
}

func (*networkPolicyPtr) ElementType() reflect.Type {
	return networkPolicyPtrType
}

func (in *networkPolicyPtr) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return pulumi.ToOutput(in).(NetworkPolicyPtrOutput)
}

func (in *networkPolicyPtr) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkPolicyPtrOutput)
}

func (in *networkPolicyPtr) ToOutput(ctx context.Context) pulumix.Output[*NetworkPolicy] {
	return pulumix.Output[*NetworkPolicy]{
		OutputState: in.ToNetworkPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
type OSSKU string

const (
	// Use Mariner as the OS for node images.
	OSSKUCBLMariner = OSSKU("CBLMariner")
	// Use Windows2019 as the OS for node images.
	OSSKUWindows2019 = OSSKU("Windows2019")
	// Use Windows2022 as the OS for node images.
	OSSKUWindows2022 = OSSKU("Windows2022")
)

func (OSSKU) ElementType() reflect.Type {
	return reflect.TypeOf((*OSSKU)(nil)).Elem()
}

func (e OSSKU) ToOSSKUOutput() OSSKUOutput {
	return pulumi.ToOutput(e).(OSSKUOutput)
}

func (e OSSKU) ToOSSKUOutputWithContext(ctx context.Context) OSSKUOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSSKUOutput)
}

func (e OSSKU) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return e.ToOSSKUPtrOutputWithContext(context.Background())
}

func (e OSSKU) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return OSSKU(e).ToOSSKUOutputWithContext(ctx).ToOSSKUPtrOutputWithContext(ctx)
}

func (e OSSKU) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSSKU) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSSKU) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSSKU) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSSKUOutput struct{ *pulumi.OutputState }

func (OSSKUOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSSKU)(nil)).Elem()
}

func (o OSSKUOutput) ToOSSKUOutput() OSSKUOutput {
	return o
}

func (o OSSKUOutput) ToOSSKUOutputWithContext(ctx context.Context) OSSKUOutput {
	return o
}

func (o OSSKUOutput) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return o.ToOSSKUPtrOutputWithContext(context.Background())
}

func (o OSSKUOutput) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSSKU) *OSSKU {
		return &v
	}).(OSSKUPtrOutput)
}

func (o OSSKUOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSSKUOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSSKU) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSSKUOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSSKUOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSSKU) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSSKUPtrOutput struct{ *pulumi.OutputState }

func (OSSKUPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSSKU)(nil)).Elem()
}

func (o OSSKUPtrOutput) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return o
}

func (o OSSKUPtrOutput) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return o
}

func (o OSSKUPtrOutput) Elem() OSSKUOutput {
	return o.ApplyT(func(v *OSSKU) OSSKU {
		if v != nil {
			return *v
		}
		var ret OSSKU
		return ret
	}).(OSSKUOutput)
}

func (o OSSKUPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSSKUPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSSKU) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSSKUInput is an input type that accepts values of the OSSKU enum
// A concrete instance of `OSSKUInput` can be one of the following:
//
//	OSSKUCBLMariner
//	OSSKUWindows2019
//	OSSKUWindows2022
type OSSKUInput interface {
	pulumi.Input

	ToOSSKUOutput() OSSKUOutput
	ToOSSKUOutputWithContext(context.Context) OSSKUOutput
}

var osskuPtrType = reflect.TypeOf((**OSSKU)(nil)).Elem()

type OSSKUPtrInput interface {
	pulumi.Input

	ToOSSKUPtrOutput() OSSKUPtrOutput
	ToOSSKUPtrOutputWithContext(context.Context) OSSKUPtrOutput
}

type osskuPtr string

func OSSKUPtr(v string) OSSKUPtrInput {
	return (*osskuPtr)(&v)
}

func (*osskuPtr) ElementType() reflect.Type {
	return osskuPtrType
}

func (in *osskuPtr) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return pulumi.ToOutput(in).(OSSKUPtrOutput)
}

func (in *osskuPtr) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSSKUPtrOutput)
}

func (in *osskuPtr) ToOutput(ctx context.Context) pulumix.Output[*OSSKU] {
	return pulumix.Output[*OSSKU]{
		OutputState: in.ToOSSKUPtrOutputWithContext(ctx).OutputState,
	}
}

// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
type OsType string

const (
	OsTypeLinux   = OsType("Linux")
	OsTypeWindows = OsType("Windows")
)

func (OsType) ElementType() reflect.Type {
	return reflect.TypeOf((*OsType)(nil)).Elem()
}

func (e OsType) ToOsTypeOutput() OsTypeOutput {
	return pulumi.ToOutput(e).(OsTypeOutput)
}

func (e OsType) ToOsTypeOutputWithContext(ctx context.Context) OsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OsTypeOutput)
}

func (e OsType) ToOsTypePtrOutput() OsTypePtrOutput {
	return e.ToOsTypePtrOutputWithContext(context.Background())
}

func (e OsType) ToOsTypePtrOutputWithContext(ctx context.Context) OsTypePtrOutput {
	return OsType(e).ToOsTypeOutputWithContext(ctx).ToOsTypePtrOutputWithContext(ctx)
}

func (e OsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OsTypeOutput struct{ *pulumi.OutputState }

func (OsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsType)(nil)).Elem()
}

func (o OsTypeOutput) ToOsTypeOutput() OsTypeOutput {
	return o
}

func (o OsTypeOutput) ToOsTypeOutputWithContext(ctx context.Context) OsTypeOutput {
	return o
}

func (o OsTypeOutput) ToOsTypePtrOutput() OsTypePtrOutput {
	return o.ToOsTypePtrOutputWithContext(context.Background())
}

func (o OsTypeOutput) ToOsTypePtrOutputWithContext(ctx context.Context) OsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OsType) *OsType {
		return &v
	}).(OsTypePtrOutput)
}

func (o OsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OsTypePtrOutput struct{ *pulumi.OutputState }

func (OsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsType)(nil)).Elem()
}

func (o OsTypePtrOutput) ToOsTypePtrOutput() OsTypePtrOutput {
	return o
}

func (o OsTypePtrOutput) ToOsTypePtrOutputWithContext(ctx context.Context) OsTypePtrOutput {
	return o
}

func (o OsTypePtrOutput) Elem() OsTypeOutput {
	return o.ApplyT(func(v *OsType) OsType {
		if v != nil {
			return *v
		}
		var ret OsType
		return ret
	}).(OsTypeOutput)
}

func (o OsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OsTypeInput is an input type that accepts values of the OsType enum
// A concrete instance of `OsTypeInput` can be one of the following:
//
//	OsTypeLinux
//	OsTypeWindows
type OsTypeInput interface {
	pulumi.Input

	ToOsTypeOutput() OsTypeOutput
	ToOsTypeOutputWithContext(context.Context) OsTypeOutput
}

var osTypePtrType = reflect.TypeOf((**OsType)(nil)).Elem()

type OsTypePtrInput interface {
	pulumi.Input

	ToOsTypePtrOutput() OsTypePtrOutput
	ToOsTypePtrOutputWithContext(context.Context) OsTypePtrOutput
}

type osTypePtr string

func OsTypePtr(v string) OsTypePtrInput {
	return (*osTypePtr)(&v)
}

func (*osTypePtr) ElementType() reflect.Type {
	return osTypePtrType
}

func (in *osTypePtr) ToOsTypePtrOutput() OsTypePtrOutput {
	return pulumi.ToOutput(in).(OsTypePtrOutput)
}

func (in *osTypePtr) ToOsTypePtrOutputWithContext(ctx context.Context) OsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OsTypePtrOutput)
}

func (in *osTypePtr) ToOutput(ctx context.Context) pulumix.Output[*OsType] {
	return pulumix.Output[*OsType]{
		OutputState: in.ToOsTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AzureHybridBenefitOutput{})
	pulumi.RegisterOutputType(AzureHybridBenefitPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypesOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypesPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPtrOutput{})
	pulumi.RegisterOutputType(OSSKUOutput{})
	pulumi.RegisterOutputType(OSSKUPtrOutput{})
	pulumi.RegisterOutputType(OsTypeOutput{})
	pulumi.RegisterOutputType(OsTypePtrOutput{})
}
