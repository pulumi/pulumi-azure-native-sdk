// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240101

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The supported kubernetes versions.
type KubernetesVersions struct {
	pulumi.CustomResourceState

	// Extended location pointing to the underlying infrastructure
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// The name of the resource
	Name       pulumi.StringOutput                              `pulumi:"name"`
	Properties KubernetesVersionProfileResponsePropertiesOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKubernetesVersions registers a new resource with the given unique name, arguments, and options.
func NewKubernetesVersions(ctx *pulumi.Context,
	name string, args *KubernetesVersionsArgs, opts ...pulumi.ResourceOption) (*KubernetesVersions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomLocationResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'CustomLocationResourceUri'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridcontainerservice/v20231115preview:KubernetesVersions"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KubernetesVersions
	err := ctx.RegisterResource("azure-native:hybridcontainerservice/v20240101:KubernetesVersions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesVersions gets an existing KubernetesVersions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesVersions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesVersionsState, opts ...pulumi.ResourceOption) (*KubernetesVersions, error) {
	var resource KubernetesVersions
	err := ctx.ReadResource("azure-native:hybridcontainerservice/v20240101:KubernetesVersions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesVersions resources.
type kubernetesVersionsState struct {
}

type KubernetesVersionsState struct {
}

func (KubernetesVersionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesVersionsState)(nil)).Elem()
}

type kubernetesVersionsArgs struct {
	// The fully qualified Azure Resource Manager identifier of the custom location resource.
	CustomLocationResourceUri string `pulumi:"customLocationResourceUri"`
	// Extended location pointing to the underlying infrastructure
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
}

// The set of arguments for constructing a KubernetesVersions resource.
type KubernetesVersionsArgs struct {
	// The fully qualified Azure Resource Manager identifier of the custom location resource.
	CustomLocationResourceUri pulumi.StringInput
	// Extended location pointing to the underlying infrastructure
	ExtendedLocation ExtendedLocationPtrInput
}

func (KubernetesVersionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesVersionsArgs)(nil)).Elem()
}

type KubernetesVersionsInput interface {
	pulumi.Input

	ToKubernetesVersionsOutput() KubernetesVersionsOutput
	ToKubernetesVersionsOutputWithContext(ctx context.Context) KubernetesVersionsOutput
}

func (*KubernetesVersions) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesVersions)(nil)).Elem()
}

func (i *KubernetesVersions) ToKubernetesVersionsOutput() KubernetesVersionsOutput {
	return i.ToKubernetesVersionsOutputWithContext(context.Background())
}

func (i *KubernetesVersions) ToKubernetesVersionsOutputWithContext(ctx context.Context) KubernetesVersionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesVersionsOutput)
}

type KubernetesVersionsOutput struct{ *pulumi.OutputState }

func (KubernetesVersionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesVersions)(nil)).Elem()
}

func (o KubernetesVersionsOutput) ToKubernetesVersionsOutput() KubernetesVersionsOutput {
	return o
}

func (o KubernetesVersionsOutput) ToKubernetesVersionsOutputWithContext(ctx context.Context) KubernetesVersionsOutput {
	return o
}

// Extended location pointing to the underlying infrastructure
func (o KubernetesVersionsOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v *KubernetesVersions) ExtendedLocationResponsePtrOutput { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// The name of the resource
func (o KubernetesVersionsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesVersions) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KubernetesVersionsOutput) Properties() KubernetesVersionProfileResponsePropertiesOutput {
	return o.ApplyT(func(v *KubernetesVersions) KubernetesVersionProfileResponsePropertiesOutput { return v.Properties }).(KubernetesVersionProfileResponsePropertiesOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o KubernetesVersionsOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *KubernetesVersions) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o KubernetesVersionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesVersions) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(KubernetesVersionsOutput{})
}
