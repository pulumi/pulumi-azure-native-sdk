// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package relationships

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines a dependencyOf relationship resource.
//
// Uses Azure REST API version 2023-09-01-preview.
type DependencyOfRelationship struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties DependencyOfRelationshipPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDependencyOfRelationship registers a new resource with the given unique name, arguments, and options.
func NewDependencyOfRelationship(ctx *pulumi.Context,
	name string, args *DependencyOfRelationshipArgs, opts ...pulumi.ResourceOption) (*DependencyOfRelationship, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:relationships/v20230901preview:DependencyOfRelationship"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DependencyOfRelationship
	err := ctx.RegisterResource("azure-native:relationships:DependencyOfRelationship", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDependencyOfRelationship gets an existing DependencyOfRelationship resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDependencyOfRelationship(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DependencyOfRelationshipState, opts ...pulumi.ResourceOption) (*DependencyOfRelationship, error) {
	var resource DependencyOfRelationship
	err := ctx.ReadResource("azure-native:relationships:DependencyOfRelationship", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DependencyOfRelationship resources.
type dependencyOfRelationshipState struct {
}

type DependencyOfRelationshipState struct {
}

func (DependencyOfRelationshipState) ElementType() reflect.Type {
	return reflect.TypeOf((*dependencyOfRelationshipState)(nil)).Elem()
}

type dependencyOfRelationshipArgs struct {
	// Name of dependencyOf relationship.
	Name *string `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties *DependencyOfRelationshipProperties `pulumi:"properties"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
}

// The set of arguments for constructing a DependencyOfRelationship resource.
type DependencyOfRelationshipArgs struct {
	// Name of dependencyOf relationship.
	Name pulumi.StringPtrInput
	// The resource-specific properties for this resource.
	Properties DependencyOfRelationshipPropertiesPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
}

func (DependencyOfRelationshipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dependencyOfRelationshipArgs)(nil)).Elem()
}

type DependencyOfRelationshipInput interface {
	pulumi.Input

	ToDependencyOfRelationshipOutput() DependencyOfRelationshipOutput
	ToDependencyOfRelationshipOutputWithContext(ctx context.Context) DependencyOfRelationshipOutput
}

func (*DependencyOfRelationship) ElementType() reflect.Type {
	return reflect.TypeOf((**DependencyOfRelationship)(nil)).Elem()
}

func (i *DependencyOfRelationship) ToDependencyOfRelationshipOutput() DependencyOfRelationshipOutput {
	return i.ToDependencyOfRelationshipOutputWithContext(context.Background())
}

func (i *DependencyOfRelationship) ToDependencyOfRelationshipOutputWithContext(ctx context.Context) DependencyOfRelationshipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DependencyOfRelationshipOutput)
}

type DependencyOfRelationshipOutput struct{ *pulumi.OutputState }

func (DependencyOfRelationshipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DependencyOfRelationship)(nil)).Elem()
}

func (o DependencyOfRelationshipOutput) ToDependencyOfRelationshipOutput() DependencyOfRelationshipOutput {
	return o
}

func (o DependencyOfRelationshipOutput) ToDependencyOfRelationshipOutputWithContext(ctx context.Context) DependencyOfRelationshipOutput {
	return o
}

// The Azure API version of the resource.
func (o DependencyOfRelationshipOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DependencyOfRelationship) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o DependencyOfRelationshipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DependencyOfRelationship) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o DependencyOfRelationshipOutput) Properties() DependencyOfRelationshipPropertiesResponseOutput {
	return o.ApplyT(func(v *DependencyOfRelationship) DependencyOfRelationshipPropertiesResponseOutput {
		return v.Properties
	}).(DependencyOfRelationshipPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DependencyOfRelationshipOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DependencyOfRelationship) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DependencyOfRelationshipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DependencyOfRelationship) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DependencyOfRelationshipOutput{})
}
