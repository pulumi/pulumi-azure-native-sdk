// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The approval settings.
type ApprovalSettings struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStage `pulumi:"approvalStages"`
	// Determines whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determines whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification is required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// ApprovalSettingsInput is an input type that accepts ApprovalSettingsArgs and ApprovalSettingsOutput values.
// You can construct a concrete instance of `ApprovalSettingsInput` via:
//
//	ApprovalSettingsArgs{...}
type ApprovalSettingsInput interface {
	pulumi.Input

	ToApprovalSettingsOutput() ApprovalSettingsOutput
	ToApprovalSettingsOutputWithContext(context.Context) ApprovalSettingsOutput
}

// The approval settings.
type ApprovalSettingsArgs struct {
	// The type of rule
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages ApprovalStageArrayInput `pulumi:"approvalStages"`
	// Determines whether approval is required or not.
	IsApprovalRequired pulumi.BoolPtrInput `pulumi:"isApprovalRequired"`
	// Determines whether approval is required for assignment extension.
	IsApprovalRequiredForExtension pulumi.BoolPtrInput `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification is required.
	IsRequestorJustificationRequired pulumi.BoolPtrInput `pulumi:"isRequestorJustificationRequired"`
}

func (ApprovalSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return i.ToApprovalSettingsOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput)
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput).ToApprovalSettingsPtrOutputWithContext(ctx)
}

// ApprovalSettingsPtrInput is an input type that accepts ApprovalSettingsArgs, ApprovalSettingsPtr and ApprovalSettingsPtrOutput values.
// You can construct a concrete instance of `ApprovalSettingsPtrInput` via:
//
//	        ApprovalSettingsArgs{...}
//
//	or:
//
//	        nil
type ApprovalSettingsPtrInput interface {
	pulumi.Input

	ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput
	ToApprovalSettingsPtrOutputWithContext(context.Context) ApprovalSettingsPtrOutput
}

type approvalSettingsPtrType ApprovalSettingsArgs

func ApprovalSettingsPtr(v *ApprovalSettingsArgs) ApprovalSettingsPtrInput {
	return (*approvalSettingsPtrType)(v)
}

func (*approvalSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsPtrOutput)
}

// The approval settings.
type ApprovalSettingsOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApprovalSettings) *ApprovalSettings {
		return &v
	}).(ApprovalSettingsPtrOutput)
}

// The type of rule
func (o ApprovalSettingsOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v ApprovalSettings) []ApprovalStage { return v.ApprovalStages }).(ApprovalStageArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsPtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) Elem() ApprovalSettingsOutput {
	return o.ApplyT(func(v *ApprovalSettings) ApprovalSettings {
		if v != nil {
			return *v
		}
		var ret ApprovalSettings
		return ret
	}).(ApprovalSettingsOutput)
}

// The type of rule
func (o ApprovalSettingsPtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsPtrOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v *ApprovalSettings) []ApprovalStage {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsPtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsPtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsPtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval settings.
type ApprovalSettingsResponse struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStageResponse `pulumi:"approvalStages"`
	// Determines whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determines whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification is required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// The approval settings.
type ApprovalSettingsResponseOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput {
	return o
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutputWithContext(ctx context.Context) ApprovalSettingsResponseOutput {
	return o
}

// The type of rule
func (o ApprovalSettingsResponseOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponseOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) []ApprovalStageResponse { return v.ApprovalStages }).(ApprovalStageResponseArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsResponseOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsResponseOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsResponseOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) Elem() ApprovalSettingsResponseOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) ApprovalSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ApprovalSettingsResponse
		return ret
	}).(ApprovalSettingsResponseOutput)
}

// The type of rule
func (o ApprovalSettingsResponsePtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponsePtrOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) []ApprovalStageResponse {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageResponseArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsResponsePtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval stage.
type ApprovalStage struct {
	// The time in days when approval request would be timed out
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []UserSet `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approve
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determines whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []UserSet `pulumi:"primaryApprovers"`
}

// ApprovalStageInput is an input type that accepts ApprovalStageArgs and ApprovalStageOutput values.
// You can construct a concrete instance of `ApprovalStageInput` via:
//
//	ApprovalStageArgs{...}
type ApprovalStageInput interface {
	pulumi.Input

	ToApprovalStageOutput() ApprovalStageOutput
	ToApprovalStageOutputWithContext(context.Context) ApprovalStageOutput
}

// The approval stage.
type ApprovalStageArgs struct {
	// The time in days when approval request would be timed out
	ApprovalStageTimeOutInDays pulumi.IntPtrInput `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers UserSetArrayInput `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approve
	EscalationTimeInMinutes pulumi.IntPtrInput `pulumi:"escalationTimeInMinutes"`
	// Determines whether approver need to provide justification for his decision.
	IsApproverJustificationRequired pulumi.BoolPtrInput `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled pulumi.BoolPtrInput `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers UserSetArrayInput `pulumi:"primaryApprovers"`
}

func (ApprovalStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArgs) ToApprovalStageOutput() ApprovalStageOutput {
	return i.ToApprovalStageOutputWithContext(context.Background())
}

func (i ApprovalStageArgs) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageOutput)
}

// ApprovalStageArrayInput is an input type that accepts ApprovalStageArray and ApprovalStageArrayOutput values.
// You can construct a concrete instance of `ApprovalStageArrayInput` via:
//
//	ApprovalStageArray{ ApprovalStageArgs{...} }
type ApprovalStageArrayInput interface {
	pulumi.Input

	ToApprovalStageArrayOutput() ApprovalStageArrayOutput
	ToApprovalStageArrayOutputWithContext(context.Context) ApprovalStageArrayOutput
}

type ApprovalStageArray []ApprovalStageInput

func (ApprovalStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArray) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return i.ToApprovalStageArrayOutputWithContext(context.Background())
}

func (i ApprovalStageArray) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageArrayOutput)
}

// The approval stage.
type ApprovalStageOutput struct{ *pulumi.OutputState }

func (ApprovalStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageOutput) ToApprovalStageOutput() ApprovalStageOutput {
	return o
}

func (o ApprovalStageOutput) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return o
}

// The time in days when approval request would be timed out
func (o ApprovalStageOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageOutput) EscalationApprovers() UserSetArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []UserSet { return v.EscalationApprovers }).(UserSetArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approve
func (o ApprovalStageOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determines whether approver need to provide justification for his decision.
func (o ApprovalStageOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageOutput) PrimaryApprovers() UserSetArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []UserSet { return v.PrimaryApprovers }).(UserSetArrayOutput)
}

type ApprovalStageArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) Index(i pulumi.IntInput) ApprovalStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStage {
		return vs[0].([]ApprovalStage)[vs[1].(int)]
	}).(ApprovalStageOutput)
}

// The approval stage.
type ApprovalStageResponse struct {
	// The time in days when approval request would be timed out
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []UserSetResponse `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approve
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determines whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []UserSetResponse `pulumi:"primaryApprovers"`
}

// The approval stage.
type ApprovalStageResponseOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutput() ApprovalStageResponseOutput {
	return o
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutputWithContext(ctx context.Context) ApprovalStageResponseOutput {
	return o
}

// The time in days when approval request would be timed out
func (o ApprovalStageResponseOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageResponseOutput) EscalationApprovers() UserSetResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []UserSetResponse { return v.EscalationApprovers }).(UserSetResponseArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approve
func (o ApprovalStageResponseOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determines whether approver need to provide justification for his decision.
func (o ApprovalStageResponseOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageResponseOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageResponseOutput) PrimaryApprovers() UserSetResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []UserSetResponse { return v.PrimaryApprovers }).(UserSetResponseArrayOutput)
}

type ApprovalStageResponseArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutputWithContext(ctx context.Context) ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) Index(i pulumi.IntInput) ApprovalStageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStageResponse {
		return vs[0].([]ApprovalStageResponse)[vs[1].(int)]
	}).(ApprovalStageResponseOutput)
}

// Expanded info of resource, role and principal
type ExpandedPropertiesResponse struct {
	// Details of the principal
	Principal *ExpandedPropertiesResponsePrincipal `pulumi:"principal"`
	// Details of role definition
	RoleDefinition *ExpandedPropertiesResponseRoleDefinition `pulumi:"roleDefinition"`
	// Details of the resource scope
	Scope *ExpandedPropertiesResponseScope `pulumi:"scope"`
}

// Expanded info of resource, role and principal
type ExpandedPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponse)(nil)).Elem()
}

func (o ExpandedPropertiesResponseOutput) ToExpandedPropertiesResponseOutput() ExpandedPropertiesResponseOutput {
	return o
}

func (o ExpandedPropertiesResponseOutput) ToExpandedPropertiesResponseOutputWithContext(ctx context.Context) ExpandedPropertiesResponseOutput {
	return o
}

// Details of the principal
func (o ExpandedPropertiesResponseOutput) Principal() ExpandedPropertiesResponsePrincipalPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponse) *ExpandedPropertiesResponsePrincipal { return v.Principal }).(ExpandedPropertiesResponsePrincipalPtrOutput)
}

// Details of role definition
func (o ExpandedPropertiesResponseOutput) RoleDefinition() ExpandedPropertiesResponseRoleDefinitionPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponse) *ExpandedPropertiesResponseRoleDefinition { return v.RoleDefinition }).(ExpandedPropertiesResponseRoleDefinitionPtrOutput)
}

// Details of the resource scope
func (o ExpandedPropertiesResponseOutput) Scope() ExpandedPropertiesResponseScopePtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponse) *ExpandedPropertiesResponseScope { return v.Scope }).(ExpandedPropertiesResponseScopePtrOutput)
}

// Details of the principal
type ExpandedPropertiesResponsePrincipal struct {
	// Display name of the principal
	DisplayName *string `pulumi:"displayName"`
	// Email id of the principal
	Email *string `pulumi:"email"`
	// Id of the principal
	Id *string `pulumi:"id"`
	// Type of the principal
	Type *string `pulumi:"type"`
}

// Details of the principal
type ExpandedPropertiesResponsePrincipalOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponsePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponsePrincipal)(nil)).Elem()
}

func (o ExpandedPropertiesResponsePrincipalOutput) ToExpandedPropertiesResponsePrincipalOutput() ExpandedPropertiesResponsePrincipalOutput {
	return o
}

func (o ExpandedPropertiesResponsePrincipalOutput) ToExpandedPropertiesResponsePrincipalOutputWithContext(ctx context.Context) ExpandedPropertiesResponsePrincipalOutput {
	return o
}

// Display name of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Email id of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Id of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExpandedPropertiesResponsePrincipalPtrOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponsePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpandedPropertiesResponsePrincipal)(nil)).Elem()
}

func (o ExpandedPropertiesResponsePrincipalPtrOutput) ToExpandedPropertiesResponsePrincipalPtrOutput() ExpandedPropertiesResponsePrincipalPtrOutput {
	return o
}

func (o ExpandedPropertiesResponsePrincipalPtrOutput) ToExpandedPropertiesResponsePrincipalPtrOutputWithContext(ctx context.Context) ExpandedPropertiesResponsePrincipalPtrOutput {
	return o
}

func (o ExpandedPropertiesResponsePrincipalPtrOutput) Elem() ExpandedPropertiesResponsePrincipalOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) ExpandedPropertiesResponsePrincipal {
		if v != nil {
			return *v
		}
		var ret ExpandedPropertiesResponsePrincipal
		return ret
	}).(ExpandedPropertiesResponsePrincipalOutput)
}

// Display name of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Email id of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Id of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Details of role definition
type ExpandedPropertiesResponseRoleDefinition struct {
	// Display name of the role definition
	DisplayName *string `pulumi:"displayName"`
	// Id of the role definition
	Id *string `pulumi:"id"`
	// Type of the role definition
	Type *string `pulumi:"type"`
}

// Details of role definition
type ExpandedPropertiesResponseRoleDefinitionOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseRoleDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o ExpandedPropertiesResponseRoleDefinitionOutput) ToExpandedPropertiesResponseRoleDefinitionOutput() ExpandedPropertiesResponseRoleDefinitionOutput {
	return o
}

func (o ExpandedPropertiesResponseRoleDefinitionOutput) ToExpandedPropertiesResponseRoleDefinitionOutputWithContext(ctx context.Context) ExpandedPropertiesResponseRoleDefinitionOutput {
	return o
}

// Display name of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseRoleDefinition) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseRoleDefinition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseRoleDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExpandedPropertiesResponseRoleDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseRoleDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpandedPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) ToExpandedPropertiesResponseRoleDefinitionPtrOutput() ExpandedPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) ToExpandedPropertiesResponseRoleDefinitionPtrOutputWithContext(ctx context.Context) ExpandedPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) Elem() ExpandedPropertiesResponseRoleDefinitionOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) ExpandedPropertiesResponseRoleDefinition {
		if v != nil {
			return *v
		}
		var ret ExpandedPropertiesResponseRoleDefinition
		return ret
	}).(ExpandedPropertiesResponseRoleDefinitionOutput)
}

// Display name of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Details of the resource scope
type ExpandedPropertiesResponseScope struct {
	// Display name of the resource
	DisplayName *string `pulumi:"displayName"`
	// Scope id of the resource
	Id *string `pulumi:"id"`
	// Type of the resource
	Type *string `pulumi:"type"`
}

// Details of the resource scope
type ExpandedPropertiesResponseScopeOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponseScope)(nil)).Elem()
}

func (o ExpandedPropertiesResponseScopeOutput) ToExpandedPropertiesResponseScopeOutput() ExpandedPropertiesResponseScopeOutput {
	return o
}

func (o ExpandedPropertiesResponseScopeOutput) ToExpandedPropertiesResponseScopeOutputWithContext(ctx context.Context) ExpandedPropertiesResponseScopeOutput {
	return o
}

// Display name of the resource
func (o ExpandedPropertiesResponseScopeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseScope) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o ExpandedPropertiesResponseScopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseScope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o ExpandedPropertiesResponseScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExpandedPropertiesResponseScopePtrOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpandedPropertiesResponseScope)(nil)).Elem()
}

func (o ExpandedPropertiesResponseScopePtrOutput) ToExpandedPropertiesResponseScopePtrOutput() ExpandedPropertiesResponseScopePtrOutput {
	return o
}

func (o ExpandedPropertiesResponseScopePtrOutput) ToExpandedPropertiesResponseScopePtrOutputWithContext(ctx context.Context) ExpandedPropertiesResponseScopePtrOutput {
	return o
}

func (o ExpandedPropertiesResponseScopePtrOutput) Elem() ExpandedPropertiesResponseScopeOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) ExpandedPropertiesResponseScope {
		if v != nil {
			return *v
		}
		var ret ExpandedPropertiesResponseScope
		return ret
	}).(ExpandedPropertiesResponseScopeOutput)
}

// Display name of the resource
func (o ExpandedPropertiesResponseScopePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o ExpandedPropertiesResponseScopePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o ExpandedPropertiesResponseScopePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Expanded info of resource scope, role definition and policy
type PolicyAssignmentPropertiesResponse struct {
	// Details of the policy
	Policy *PolicyAssignmentPropertiesResponsePolicy `pulumi:"policy"`
	// Details of role definition
	RoleDefinition *PolicyAssignmentPropertiesResponseRoleDefinition `pulumi:"roleDefinition"`
	// Details of the resource scope
	Scope *PolicyAssignmentPropertiesResponseScope `pulumi:"scope"`
}

// Expanded info of resource scope, role definition and policy
type PolicyAssignmentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return o
}

// Details of the policy
func (o PolicyAssignmentPropertiesResponseOutput) Policy() PolicyAssignmentPropertiesResponsePolicyPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponsePolicy { return v.Policy }).(PolicyAssignmentPropertiesResponsePolicyPtrOutput)
}

// Details of role definition
func (o PolicyAssignmentPropertiesResponseOutput) RoleDefinition() PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponseRoleDefinition {
		return v.RoleDefinition
	}).(PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput)
}

// Details of the resource scope
func (o PolicyAssignmentPropertiesResponseOutput) Scope() PolicyAssignmentPropertiesResponseScopePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponseScope { return v.Scope }).(PolicyAssignmentPropertiesResponseScopePtrOutput)
}

// Details of the policy
type PolicyAssignmentPropertiesResponsePolicy struct {
	// Id of the policy
	Id *string `pulumi:"id"`
	// The name of the entity last modified it
	LastModifiedBy PrincipalResponse `pulumi:"lastModifiedBy"`
	// The last modified date time.
	LastModifiedDateTime *string `pulumi:"lastModifiedDateTime"`
}

// Details of the policy
type PolicyAssignmentPropertiesResponsePolicyOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponsePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponsePolicy)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponsePolicyOutput) ToPolicyAssignmentPropertiesResponsePolicyOutput() PolicyAssignmentPropertiesResponsePolicyOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePolicyOutput) ToPolicyAssignmentPropertiesResponsePolicyOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePolicyOutput {
	return o
}

// Id of the policy
func (o PolicyAssignmentPropertiesResponsePolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponsePolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the entity last modified it
func (o PolicyAssignmentPropertiesResponsePolicyOutput) LastModifiedBy() PrincipalResponseOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponsePolicy) PrincipalResponse { return v.LastModifiedBy }).(PrincipalResponseOutput)
}

// The last modified date time.
func (o PolicyAssignmentPropertiesResponsePolicyOutput) LastModifiedDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponsePolicy) *string { return v.LastModifiedDateTime }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponsePolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponsePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponsePolicy)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) ToPolicyAssignmentPropertiesResponsePolicyPtrOutput() PolicyAssignmentPropertiesResponsePolicyPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) ToPolicyAssignmentPropertiesResponsePolicyPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePolicyPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) Elem() PolicyAssignmentPropertiesResponsePolicyOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) PolicyAssignmentPropertiesResponsePolicy {
		if v != nil {
			return *v
		}
		var ret PolicyAssignmentPropertiesResponsePolicy
		return ret
	}).(PolicyAssignmentPropertiesResponsePolicyOutput)
}

// Id of the policy
func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name of the entity last modified it
func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) LastModifiedBy() PrincipalResponsePtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) *PrincipalResponse {
		if v == nil {
			return nil
		}
		return &v.LastModifiedBy
	}).(PrincipalResponsePtrOutput)
}

// The last modified date time.
func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) LastModifiedDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedDateTime
	}).(pulumi.StringPtrOutput)
}

// Details of role definition
type PolicyAssignmentPropertiesResponseRoleDefinition struct {
	// Display name of the role definition
	DisplayName *string `pulumi:"displayName"`
	// Id of the role definition
	Id *string `pulumi:"id"`
	// Type of the role definition
	Type *string `pulumi:"type"`
}

// Details of role definition
type PolicyAssignmentPropertiesResponseRoleDefinitionOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseRoleDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionOutput() PolicyAssignmentPropertiesResponseRoleDefinitionOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseRoleDefinitionOutput {
	return o
}

// Display name of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseRoleDefinition) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseRoleDefinition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseRoleDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput() PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) Elem() PolicyAssignmentPropertiesResponseRoleDefinitionOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) PolicyAssignmentPropertiesResponseRoleDefinition {
		if v != nil {
			return *v
		}
		var ret PolicyAssignmentPropertiesResponseRoleDefinition
		return ret
	}).(PolicyAssignmentPropertiesResponseRoleDefinitionOutput)
}

// Display name of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Details of the resource scope
type PolicyAssignmentPropertiesResponseScope struct {
	// Display name of the resource
	DisplayName *string `pulumi:"displayName"`
	// Scope id of the resource
	Id *string `pulumi:"id"`
	// Type of the resource
	Type *string `pulumi:"type"`
}

// Details of the resource scope
type PolicyAssignmentPropertiesResponseScopeOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponseScope)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseScopeOutput) ToPolicyAssignmentPropertiesResponseScopeOutput() PolicyAssignmentPropertiesResponseScopeOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseScopeOutput) ToPolicyAssignmentPropertiesResponseScopeOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseScopeOutput {
	return o
}

// Display name of the resource
func (o PolicyAssignmentPropertiesResponseScopeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseScope) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o PolicyAssignmentPropertiesResponseScopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseScope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o PolicyAssignmentPropertiesResponseScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponseScopePtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponseScope)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseScopePtrOutput) ToPolicyAssignmentPropertiesResponseScopePtrOutput() PolicyAssignmentPropertiesResponseScopePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseScopePtrOutput) ToPolicyAssignmentPropertiesResponseScopePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseScopePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseScopePtrOutput) Elem() PolicyAssignmentPropertiesResponseScopeOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) PolicyAssignmentPropertiesResponseScope {
		if v != nil {
			return *v
		}
		var ret PolicyAssignmentPropertiesResponseScope
		return ret
	}).(PolicyAssignmentPropertiesResponseScopeOutput)
}

// Display name of the resource
func (o PolicyAssignmentPropertiesResponseScopePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o PolicyAssignmentPropertiesResponseScopePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o PolicyAssignmentPropertiesResponseScopePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Expanded info of resource scope
type PolicyPropertiesResponse struct {
	// Details of the resource scope
	Scope PolicyPropertiesResponseScope `pulumi:"scope"`
}

// Expanded info of resource scope
type PolicyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPropertiesResponse)(nil)).Elem()
}

func (o PolicyPropertiesResponseOutput) ToPolicyPropertiesResponseOutput() PolicyPropertiesResponseOutput {
	return o
}

func (o PolicyPropertiesResponseOutput) ToPolicyPropertiesResponseOutputWithContext(ctx context.Context) PolicyPropertiesResponseOutput {
	return o
}

// Details of the resource scope
func (o PolicyPropertiesResponseOutput) Scope() PolicyPropertiesResponseScopeOutput {
	return o.ApplyT(func(v PolicyPropertiesResponse) PolicyPropertiesResponseScope { return v.Scope }).(PolicyPropertiesResponseScopeOutput)
}

// Details of the resource scope
type PolicyPropertiesResponseScope struct {
	// Display name of the resource
	DisplayName *string `pulumi:"displayName"`
	// Scope id of the resource
	Id *string `pulumi:"id"`
	// Type of the resource
	Type *string `pulumi:"type"`
}

// Details of the resource scope
type PolicyPropertiesResponseScopeOutput struct{ *pulumi.OutputState }

func (PolicyPropertiesResponseScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPropertiesResponseScope)(nil)).Elem()
}

func (o PolicyPropertiesResponseScopeOutput) ToPolicyPropertiesResponseScopeOutput() PolicyPropertiesResponseScopeOutput {
	return o
}

func (o PolicyPropertiesResponseScopeOutput) ToPolicyPropertiesResponseScopeOutputWithContext(ctx context.Context) PolicyPropertiesResponseScopeOutput {
	return o
}

// Display name of the resource
func (o PolicyPropertiesResponseScopeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyPropertiesResponseScope) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o PolicyPropertiesResponseScopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyPropertiesResponseScope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o PolicyPropertiesResponseScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyPropertiesResponseScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The name of the entity last modified it
type PrincipalResponse struct {
	// The name of the principal made changes
	DisplayName *string `pulumi:"displayName"`
	// Email of principal
	Email *string `pulumi:"email"`
	// The id of the principal made changes
	Id *string `pulumi:"id"`
	// Type of principal such as user , group etc
	Type *string `pulumi:"type"`
}

// The name of the entity last modified it
type PrincipalResponseOutput struct{ *pulumi.OutputState }

func (PrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutput() PrincipalResponseOutput {
	return o
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutputWithContext(ctx context.Context) PrincipalResponseOutput {
	return o
}

// The name of the principal made changes
func (o PrincipalResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Email of principal
func (o PrincipalResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The id of the principal made changes
func (o PrincipalResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of principal such as user , group etc
func (o PrincipalResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrincipalResponsePtrOutput struct{ *pulumi.OutputState }

func (PrincipalResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponsePtrOutput) ToPrincipalResponsePtrOutput() PrincipalResponsePtrOutput {
	return o
}

func (o PrincipalResponsePtrOutput) ToPrincipalResponsePtrOutputWithContext(ctx context.Context) PrincipalResponsePtrOutput {
	return o
}

func (o PrincipalResponsePtrOutput) Elem() PrincipalResponseOutput {
	return o.ApplyT(func(v *PrincipalResponse) PrincipalResponse {
		if v != nil {
			return *v
		}
		var ret PrincipalResponse
		return ret
	}).(PrincipalResponseOutput)
}

// The name of the principal made changes
func (o PrincipalResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Email of principal
func (o PrincipalResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The id of the principal made changes
func (o PrincipalResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of principal such as user , group etc
func (o PrincipalResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesExpiration struct {
	// Duration of the role eligibility schedule in TimeSpan.
	Duration *string `pulumi:"duration"`
	// End DateTime of the role eligibility schedule.
	EndDateTime *string `pulumi:"endDateTime"`
	// Type of the role eligibility schedule expiration
	Type *string `pulumi:"type"`
}

// RoleEligibilityScheduleRequestPropertiesExpirationInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesExpirationArgs and RoleEligibilityScheduleRequestPropertiesExpirationOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesExpirationInput` via:
//
//	RoleEligibilityScheduleRequestPropertiesExpirationArgs{...}
type RoleEligibilityScheduleRequestPropertiesExpirationInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesExpirationOutput() RoleEligibilityScheduleRequestPropertiesExpirationOutput
	ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesExpirationOutput
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesExpirationArgs struct {
	// Duration of the role eligibility schedule in TimeSpan.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// End DateTime of the role eligibility schedule.
	EndDateTime pulumi.StringPtrInput `pulumi:"endDateTime"`
	// Type of the role eligibility schedule expiration
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RoleEligibilityScheduleRequestPropertiesExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationOutput() RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesExpirationOutput)
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesExpirationOutput).ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx)
}

// RoleEligibilityScheduleRequestPropertiesExpirationPtrInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesExpirationArgs, RoleEligibilityScheduleRequestPropertiesExpirationPtr and RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesExpirationPtrInput` via:
//
//	        RoleEligibilityScheduleRequestPropertiesExpirationArgs{...}
//
//	or:
//
//	        nil
type RoleEligibilityScheduleRequestPropertiesExpirationPtrInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput
	ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput
}

type roleEligibilityScheduleRequestPropertiesExpirationPtrType RoleEligibilityScheduleRequestPropertiesExpirationArgs

func RoleEligibilityScheduleRequestPropertiesExpirationPtr(v *RoleEligibilityScheduleRequestPropertiesExpirationArgs) RoleEligibilityScheduleRequestPropertiesExpirationPtrInput {
	return (*roleEligibilityScheduleRequestPropertiesExpirationPtrType)(v)
}

func (*roleEligibilityScheduleRequestPropertiesExpirationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (i *roleEligibilityScheduleRequestPropertiesExpirationPtrType) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Background())
}

func (i *roleEligibilityScheduleRequestPropertiesExpirationPtrType) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesExpirationOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationOutput() RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Background())
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleEligibilityScheduleRequestPropertiesExpiration) *RoleEligibilityScheduleRequestPropertiesExpiration {
		return &v
	}).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesExpiration) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesExpiration) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesExpiration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) RoleEligibilityScheduleRequestPropertiesExpiration {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesExpiration
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesExpirationOutput)
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) *string {
		if v == nil {
			return nil
		}
		return v.EndDateTime
	}).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseExpiration struct {
	// Duration of the role eligibility schedule in TimeSpan.
	Duration *string `pulumi:"duration"`
	// End DateTime of the role eligibility schedule.
	EndDateTime *string `pulumi:"endDateTime"`
	// Type of the role eligibility schedule expiration
	Type *string `pulumi:"type"`
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesResponseExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationOutput() RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput {
	return o
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesResponseExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) RoleEligibilityScheduleRequestPropertiesResponseExpiration {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesResponseExpiration
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput)
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string {
		if v == nil {
			return nil
		}
		return v.EndDateTime
	}).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo struct {
	// Expiration of the role eligibility schedule
	Expiration *RoleEligibilityScheduleRequestPropertiesResponseExpiration `pulumi:"expiration"`
	// Start DateTime of the role eligibility schedule.
	StartDateTime *string `pulumi:"startDateTime"`
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput {
	return o
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) Expiration() RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *RoleEligibilityScheduleRequestPropertiesResponseExpiration {
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput)
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) Expiration() RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *RoleEligibilityScheduleRequestPropertiesResponseExpiration {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *string {
		if v == nil {
			return nil
		}
		return v.StartDateTime
	}).(pulumi.StringPtrOutput)
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesResponseTicketInfo struct {
	// Ticket number for the role eligibility
	TicketNumber *string `pulumi:"ticketNumber"`
	// Ticket system name for the role eligibility
	TicketSystem *string `pulumi:"ticketSystem"`
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesResponseTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput {
	return o
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string { return v.TicketNumber }).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string { return v.TicketSystem }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesResponseTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) RoleEligibilityScheduleRequestPropertiesResponseTicketInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesResponseTicketInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput)
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketNumber
	}).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketSystem
	}).(pulumi.StringPtrOutput)
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesScheduleInfo struct {
	// Expiration of the role eligibility schedule
	Expiration *RoleEligibilityScheduleRequestPropertiesExpiration `pulumi:"expiration"`
	// Start DateTime of the role eligibility schedule.
	StartDateTime *string `pulumi:"startDateTime"`
}

// RoleEligibilityScheduleRequestPropertiesScheduleInfoInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs and RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesScheduleInfoInput` via:
//
//	RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs{...}
type RoleEligibilityScheduleRequestPropertiesScheduleInfoInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput
	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs struct {
	// Expiration of the role eligibility schedule
	Expiration RoleEligibilityScheduleRequestPropertiesExpirationPtrInput `pulumi:"expiration"`
	// Start DateTime of the role eligibility schedule.
	StartDateTime pulumi.StringPtrInput `pulumi:"startDateTime"`
}

func (RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput)
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput).ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx)
}

// RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs, RoleEligibilityScheduleRequestPropertiesScheduleInfoPtr and RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput` via:
//
//	        RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs{...}
//
//	or:
//
//	        nil
type RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput
	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput
}

type roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs

func RoleEligibilityScheduleRequestPropertiesScheduleInfoPtr(v *RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput {
	return (*roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType)(v)
}

func (*roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (i *roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Background())
}

func (i *roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput)
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Background())
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleEligibilityScheduleRequestPropertiesScheduleInfo) *RoleEligibilityScheduleRequestPropertiesScheduleInfo {
		return &v
	}).(RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput)
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) Expiration() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesScheduleInfo) *RoleEligibilityScheduleRequestPropertiesExpiration {
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesScheduleInfo) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesScheduleInfo) RoleEligibilityScheduleRequestPropertiesScheduleInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesScheduleInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput)
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) Expiration() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesScheduleInfo) *RoleEligibilityScheduleRequestPropertiesExpiration {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesScheduleInfo) *string {
		if v == nil {
			return nil
		}
		return v.StartDateTime
	}).(pulumi.StringPtrOutput)
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesTicketInfo struct {
	// Ticket number for the role eligibility
	TicketNumber *string `pulumi:"ticketNumber"`
	// Ticket system name for the role eligibility
	TicketSystem *string `pulumi:"ticketSystem"`
}

// RoleEligibilityScheduleRequestPropertiesTicketInfoInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesTicketInfoArgs and RoleEligibilityScheduleRequestPropertiesTicketInfoOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesTicketInfoInput` via:
//
//	RoleEligibilityScheduleRequestPropertiesTicketInfoArgs{...}
type RoleEligibilityScheduleRequestPropertiesTicketInfoInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput
	ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoOutput
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesTicketInfoArgs struct {
	// Ticket number for the role eligibility
	TicketNumber pulumi.StringPtrInput `pulumi:"ticketNumber"`
	// Ticket system name for the role eligibility
	TicketSystem pulumi.StringPtrInput `pulumi:"ticketSystem"`
}

func (RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput)
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput).ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx)
}

// RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesTicketInfoArgs, RoleEligibilityScheduleRequestPropertiesTicketInfoPtr and RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput` via:
//
//	        RoleEligibilityScheduleRequestPropertiesTicketInfoArgs{...}
//
//	or:
//
//	        nil
type RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput
	ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput
}

type roleEligibilityScheduleRequestPropertiesTicketInfoPtrType RoleEligibilityScheduleRequestPropertiesTicketInfoArgs

func RoleEligibilityScheduleRequestPropertiesTicketInfoPtr(v *RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput {
	return (*roleEligibilityScheduleRequestPropertiesTicketInfoPtrType)(v)
}

func (*roleEligibilityScheduleRequestPropertiesTicketInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (i *roleEligibilityScheduleRequestPropertiesTicketInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Background())
}

func (i *roleEligibilityScheduleRequestPropertiesTicketInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput)
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesTicketInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o.ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Background())
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleEligibilityScheduleRequestPropertiesTicketInfo) *RoleEligibilityScheduleRequestPropertiesTicketInfo {
		return &v
	}).(RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput)
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesTicketInfo) *string { return v.TicketNumber }).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesTicketInfo) *string { return v.TicketSystem }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesTicketInfo) RoleEligibilityScheduleRequestPropertiesTicketInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesTicketInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput)
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketNumber
	}).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketSystem
	}).(pulumi.StringPtrOutput)
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettings `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyApprovalRuleInput is an input type that accepts RoleManagementPolicyApprovalRuleArgs and RoleManagementPolicyApprovalRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyApprovalRuleInput` via:
//
//	RoleManagementPolicyApprovalRuleArgs{...}
type RoleManagementPolicyApprovalRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput
	ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Context) RoleManagementPolicyApprovalRuleOutput
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The approval setting
	Setting ApprovalSettingsPtrInput `pulumi:"setting"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return i.ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyApprovalRuleOutput)
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleOutput) Setting() ApprovalSettingsPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *ApprovalSettings { return v.Setting }).(ApprovalSettingsPtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettingsResponse `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleResponseOutput) Setting() ApprovalSettingsResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *ApprovalSettingsResponse { return v.Setting }).(ApprovalSettingsResponsePtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRule struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyAuthenticationContextRuleInput is an input type that accepts RoleManagementPolicyAuthenticationContextRuleArgs and RoleManagementPolicyAuthenticationContextRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyAuthenticationContextRuleInput` via:
//
//	RoleManagementPolicyAuthenticationContextRuleArgs{...}
type RoleManagementPolicyAuthenticationContextRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput
	ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Context) RoleManagementPolicyAuthenticationContextRuleOutput
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleArgs struct {
	// The claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyAuthenticationContextRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return i.ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAuthenticationContextRuleOutput)
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleResponse struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRule struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyEnablementRuleInput is an input type that accepts RoleManagementPolicyEnablementRuleArgs and RoleManagementPolicyEnablementRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyEnablementRuleInput` via:
//
//	RoleManagementPolicyEnablementRuleArgs{...}
type RoleManagementPolicyEnablementRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput
	ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Context) RoleManagementPolicyEnablementRuleOutput
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleArgs struct {
	// The list of enabled rules.
	EnabledRules pulumi.StringArrayInput `pulumi:"enabledRules"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyEnablementRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return i.ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyEnablementRuleOutput)
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleResponse struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleResponseOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyExpirationRuleInput is an input type that accepts RoleManagementPolicyExpirationRuleArgs and RoleManagementPolicyExpirationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyExpirationRuleInput` via:
//
//	RoleManagementPolicyExpirationRuleArgs{...}
type RoleManagementPolicyExpirationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput
	ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Context) RoleManagementPolicyExpirationRuleOutput
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired pulumi.BoolPtrInput `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration pulumi.StringPtrInput `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyExpirationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return i.ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyExpirationRuleOutput)
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleResponseOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleResponseOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// Determines if the notification will be sent to the recipient type specified in the policy rule.
	IsDefaultRecipientsEnabled *bool `pulumi:"isDefaultRecipientsEnabled"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list of notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyNotificationRuleInput is an input type that accepts RoleManagementPolicyNotificationRuleArgs and RoleManagementPolicyNotificationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyNotificationRuleInput` via:
//
//	RoleManagementPolicyNotificationRuleArgs{...}
type RoleManagementPolicyNotificationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput
	ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Context) RoleManagementPolicyNotificationRuleOutput
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the notification will be sent to the recipient type specified in the policy rule.
	IsDefaultRecipientsEnabled pulumi.BoolPtrInput `pulumi:"isDefaultRecipientsEnabled"`
	// The notification level.
	NotificationLevel pulumi.StringPtrInput `pulumi:"notificationLevel"`
	// The list of notification recipients.
	NotificationRecipients pulumi.StringArrayInput `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
	// The recipient type.
	RecipientType pulumi.StringPtrInput `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return i.ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyNotificationRuleOutput)
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the notification will be sent to the recipient type specified in the policy rule.
func (o RoleManagementPolicyNotificationRuleOutput) IsDefaultRecipientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *bool { return v.IsDefaultRecipientsEnabled }).(pulumi.BoolPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list of notification recipients.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// Determines if the notification will be sent to the recipient type specified in the policy rule.
	IsDefaultRecipientsEnabled *bool `pulumi:"isDefaultRecipientsEnabled"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list of notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the notification will be sent to the recipient type specified in the policy rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) IsDefaultRecipientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *bool { return v.IsDefaultRecipientsEnabled }).(pulumi.BoolPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list of notification recipients.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTarget struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which rule is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// RoleManagementPolicyRuleTargetInput is an input type that accepts RoleManagementPolicyRuleTargetArgs and RoleManagementPolicyRuleTargetOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetInput` via:
//
//	RoleManagementPolicyRuleTargetArgs{...}
type RoleManagementPolicyRuleTargetInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput
	ToRoleManagementPolicyRuleTargetOutputWithContext(context.Context) RoleManagementPolicyRuleTargetOutput
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetArgs struct {
	// The caller of the setting.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings pulumi.StringArrayInput `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings pulumi.StringArrayInput `pulumi:"inheritableSettings"`
	// The assignment level to which rule is applied.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The type of operation.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// The list of target objects.
	TargetObjects pulumi.StringArrayInput `pulumi:"targetObjects"`
}

func (RoleManagementPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return i.ToRoleManagementPolicyRuleTargetOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput)
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput).ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx)
}

// RoleManagementPolicyRuleTargetPtrInput is an input type that accepts RoleManagementPolicyRuleTargetArgs, RoleManagementPolicyRuleTargetPtr and RoleManagementPolicyRuleTargetPtrOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetPtrInput` via:
//
//	        RoleManagementPolicyRuleTargetArgs{...}
//
//	or:
//
//	        nil
type RoleManagementPolicyRuleTargetPtrInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput
	ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Context) RoleManagementPolicyRuleTargetPtrOutput
}

type roleManagementPolicyRuleTargetPtrType RoleManagementPolicyRuleTargetArgs

func RoleManagementPolicyRuleTargetPtr(v *RoleManagementPolicyRuleTargetArgs) RoleManagementPolicyRuleTargetPtrInput {
	return (*roleManagementPolicyRuleTargetPtrType)(v)
}

func (*roleManagementPolicyRuleTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleManagementPolicyRuleTarget) *RoleManagementPolicyRuleTarget {
		return &v
	}).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetPtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) Elem() RoleManagementPolicyRuleTargetOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) RoleManagementPolicyRuleTarget {
		if v != nil {
			return *v
		}
		var ret RoleManagementPolicyRuleTarget
		return ret
	}).(RoleManagementPolicyRuleTargetOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetPtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetPtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetPtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponse struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which rule is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponseOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponseOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponseOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Elem() RoleManagementPolicyRuleTargetResponseOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) RoleManagementPolicyRuleTargetResponse {
		if v != nil {
			return *v
		}
		var ret RoleManagementPolicyRuleTargetResponse
		return ret
	}).(RoleManagementPolicyRuleTargetResponseOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The detail of a user.
type UserSet struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The type of user.
	UserType *string `pulumi:"userType"`
}

// UserSetInput is an input type that accepts UserSetArgs and UserSetOutput values.
// You can construct a concrete instance of `UserSetInput` via:
//
//	UserSetArgs{...}
type UserSetInput interface {
	pulumi.Input

	ToUserSetOutput() UserSetOutput
	ToUserSetOutputWithContext(context.Context) UserSetOutput
}

// The detail of a user.
type UserSetArgs struct {
	// The description of the user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The object id of the user.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup pulumi.BoolPtrInput `pulumi:"isBackup"`
	// The type of user.
	UserType pulumi.StringPtrInput `pulumi:"userType"`
}

func (UserSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSet)(nil)).Elem()
}

func (i UserSetArgs) ToUserSetOutput() UserSetOutput {
	return i.ToUserSetOutputWithContext(context.Background())
}

func (i UserSetArgs) ToUserSetOutputWithContext(ctx context.Context) UserSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSetOutput)
}

// UserSetArrayInput is an input type that accepts UserSetArray and UserSetArrayOutput values.
// You can construct a concrete instance of `UserSetArrayInput` via:
//
//	UserSetArray{ UserSetArgs{...} }
type UserSetArrayInput interface {
	pulumi.Input

	ToUserSetArrayOutput() UserSetArrayOutput
	ToUserSetArrayOutputWithContext(context.Context) UserSetArrayOutput
}

type UserSetArray []UserSetInput

func (UserSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSet)(nil)).Elem()
}

func (i UserSetArray) ToUserSetArrayOutput() UserSetArrayOutput {
	return i.ToUserSetArrayOutputWithContext(context.Background())
}

func (i UserSetArray) ToUserSetArrayOutputWithContext(ctx context.Context) UserSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSetArrayOutput)
}

// The detail of a user.
type UserSetOutput struct{ *pulumi.OutputState }

func (UserSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSet)(nil)).Elem()
}

func (o UserSetOutput) ToUserSetOutput() UserSetOutput {
	return o
}

func (o UserSetOutput) ToUserSetOutputWithContext(ctx context.Context) UserSetOutput {
	return o
}

// The description of the user.
func (o UserSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSet) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o UserSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o UserSetOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserSet) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The type of user.
func (o UserSetOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSet) *string { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserSetArrayOutput struct{ *pulumi.OutputState }

func (UserSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSet)(nil)).Elem()
}

func (o UserSetArrayOutput) ToUserSetArrayOutput() UserSetArrayOutput {
	return o
}

func (o UserSetArrayOutput) ToUserSetArrayOutputWithContext(ctx context.Context) UserSetArrayOutput {
	return o
}

func (o UserSetArrayOutput) Index(i pulumi.IntInput) UserSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserSet {
		return vs[0].([]UserSet)[vs[1].(int)]
	}).(UserSetOutput)
}

// The detail of a user.
type UserSetResponse struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The type of user.
	UserType *string `pulumi:"userType"`
}

// The detail of a user.
type UserSetResponseOutput struct{ *pulumi.OutputState }

func (UserSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSetResponse)(nil)).Elem()
}

func (o UserSetResponseOutput) ToUserSetResponseOutput() UserSetResponseOutput {
	return o
}

func (o UserSetResponseOutput) ToUserSetResponseOutputWithContext(ctx context.Context) UserSetResponseOutput {
	return o
}

// The description of the user.
func (o UserSetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o UserSetResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o UserSetResponseOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The type of user.
func (o UserSetResponseOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *string { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserSetResponseArrayOutput struct{ *pulumi.OutputState }

func (UserSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSetResponse)(nil)).Elem()
}

func (o UserSetResponseArrayOutput) ToUserSetResponseArrayOutput() UserSetResponseArrayOutput {
	return o
}

func (o UserSetResponseArrayOutput) ToUserSetResponseArrayOutputWithContext(ctx context.Context) UserSetResponseArrayOutput {
	return o
}

func (o UserSetResponseArrayOutput) Index(i pulumi.IntInput) UserSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserSetResponse {
		return vs[0].([]UserSetResponse)[vs[1].(int)]
	}).(UserSetResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ApprovalSettingsOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsPtrOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponseOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ApprovalStageOutput{})
	pulumi.RegisterOutputType(ApprovalStageArrayOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseArrayOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponsePrincipalOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponsePrincipalPtrOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseRoleDefinitionOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseRoleDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseScopeOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseScopePtrOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponsePolicyOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponsePolicyPtrOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseRoleDefinitionOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseScopeOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseScopePtrOutput{})
	pulumi.RegisterOutputType(PolicyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyPropertiesResponseScopeOutput{})
	pulumi.RegisterOutputType(PrincipalResponseOutput{})
	pulumi.RegisterOutputType(PrincipalResponsePtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesExpirationOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetPtrOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(UserSetOutput{})
	pulumi.RegisterOutputType(UserSetArrayOutput{})
	pulumi.RegisterOutputType(UserSetResponseOutput{})
	pulumi.RegisterOutputType(UserSetResponseArrayOutput{})
}
