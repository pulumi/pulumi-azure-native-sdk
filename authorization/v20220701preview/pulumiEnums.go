// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The option whether validate the exemption is at or under the assignment scope.
type AssignmentScopeValidation string

const (
	// This option will validate the exemption is at or under the assignment scope.
	AssignmentScopeValidationDefault = AssignmentScopeValidation("Default")
	// This option will bypass the validation the exemption scope is at or under the policy assignment scope.
	AssignmentScopeValidationDoNotValidate = AssignmentScopeValidation("DoNotValidate")
)

func (AssignmentScopeValidation) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentScopeValidation)(nil)).Elem()
}

func (e AssignmentScopeValidation) ToAssignmentScopeValidationOutput() AssignmentScopeValidationOutput {
	return pulumi.ToOutput(e).(AssignmentScopeValidationOutput)
}

func (e AssignmentScopeValidation) ToAssignmentScopeValidationOutputWithContext(ctx context.Context) AssignmentScopeValidationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AssignmentScopeValidationOutput)
}

func (e AssignmentScopeValidation) ToAssignmentScopeValidationPtrOutput() AssignmentScopeValidationPtrOutput {
	return e.ToAssignmentScopeValidationPtrOutputWithContext(context.Background())
}

func (e AssignmentScopeValidation) ToAssignmentScopeValidationPtrOutputWithContext(ctx context.Context) AssignmentScopeValidationPtrOutput {
	return AssignmentScopeValidation(e).ToAssignmentScopeValidationOutputWithContext(ctx).ToAssignmentScopeValidationPtrOutputWithContext(ctx)
}

func (e AssignmentScopeValidation) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssignmentScopeValidation) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssignmentScopeValidation) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AssignmentScopeValidation) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AssignmentScopeValidationOutput struct{ *pulumi.OutputState }

func (AssignmentScopeValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentScopeValidation)(nil)).Elem()
}

func (o AssignmentScopeValidationOutput) ToAssignmentScopeValidationOutput() AssignmentScopeValidationOutput {
	return o
}

func (o AssignmentScopeValidationOutput) ToAssignmentScopeValidationOutputWithContext(ctx context.Context) AssignmentScopeValidationOutput {
	return o
}

func (o AssignmentScopeValidationOutput) ToAssignmentScopeValidationPtrOutput() AssignmentScopeValidationPtrOutput {
	return o.ToAssignmentScopeValidationPtrOutputWithContext(context.Background())
}

func (o AssignmentScopeValidationOutput) ToAssignmentScopeValidationPtrOutputWithContext(ctx context.Context) AssignmentScopeValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssignmentScopeValidation) *AssignmentScopeValidation {
		return &v
	}).(AssignmentScopeValidationPtrOutput)
}

func (o AssignmentScopeValidationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AssignmentScopeValidationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssignmentScopeValidation) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AssignmentScopeValidationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssignmentScopeValidationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssignmentScopeValidation) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AssignmentScopeValidationPtrOutput struct{ *pulumi.OutputState }

func (AssignmentScopeValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentScopeValidation)(nil)).Elem()
}

func (o AssignmentScopeValidationPtrOutput) ToAssignmentScopeValidationPtrOutput() AssignmentScopeValidationPtrOutput {
	return o
}

func (o AssignmentScopeValidationPtrOutput) ToAssignmentScopeValidationPtrOutputWithContext(ctx context.Context) AssignmentScopeValidationPtrOutput {
	return o
}

func (o AssignmentScopeValidationPtrOutput) Elem() AssignmentScopeValidationOutput {
	return o.ApplyT(func(v *AssignmentScopeValidation) AssignmentScopeValidation {
		if v != nil {
			return *v
		}
		var ret AssignmentScopeValidation
		return ret
	}).(AssignmentScopeValidationOutput)
}

func (o AssignmentScopeValidationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssignmentScopeValidationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AssignmentScopeValidation) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AssignmentScopeValidationInput is an input type that accepts values of the AssignmentScopeValidation enum
// A concrete instance of `AssignmentScopeValidationInput` can be one of the following:
//
//	AssignmentScopeValidationDefault
//	AssignmentScopeValidationDoNotValidate
type AssignmentScopeValidationInput interface {
	pulumi.Input

	ToAssignmentScopeValidationOutput() AssignmentScopeValidationOutput
	ToAssignmentScopeValidationOutputWithContext(context.Context) AssignmentScopeValidationOutput
}

var assignmentScopeValidationPtrType = reflect.TypeOf((**AssignmentScopeValidation)(nil)).Elem()

type AssignmentScopeValidationPtrInput interface {
	pulumi.Input

	ToAssignmentScopeValidationPtrOutput() AssignmentScopeValidationPtrOutput
	ToAssignmentScopeValidationPtrOutputWithContext(context.Context) AssignmentScopeValidationPtrOutput
}

type assignmentScopeValidationPtr string

func AssignmentScopeValidationPtr(v string) AssignmentScopeValidationPtrInput {
	return (*assignmentScopeValidationPtr)(&v)
}

func (*assignmentScopeValidationPtr) ElementType() reflect.Type {
	return assignmentScopeValidationPtrType
}

func (in *assignmentScopeValidationPtr) ToAssignmentScopeValidationPtrOutput() AssignmentScopeValidationPtrOutput {
	return pulumi.ToOutput(in).(AssignmentScopeValidationPtrOutput)
}

func (in *assignmentScopeValidationPtr) ToAssignmentScopeValidationPtrOutputWithContext(ctx context.Context) AssignmentScopeValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AssignmentScopeValidationPtrOutput)
}

// The policy exemption category. Possible values are Waiver and Mitigated.
type ExemptionCategory string

const (
	// This category of exemptions usually means the scope is not applicable for the policy.
	ExemptionCategoryWaiver = ExemptionCategory("Waiver")
	// This category of exemptions usually means the mitigation actions have been applied to the scope.
	ExemptionCategoryMitigated = ExemptionCategory("Mitigated")
)

func (ExemptionCategory) ElementType() reflect.Type {
	return reflect.TypeOf((*ExemptionCategory)(nil)).Elem()
}

func (e ExemptionCategory) ToExemptionCategoryOutput() ExemptionCategoryOutput {
	return pulumi.ToOutput(e).(ExemptionCategoryOutput)
}

func (e ExemptionCategory) ToExemptionCategoryOutputWithContext(ctx context.Context) ExemptionCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExemptionCategoryOutput)
}

func (e ExemptionCategory) ToExemptionCategoryPtrOutput() ExemptionCategoryPtrOutput {
	return e.ToExemptionCategoryPtrOutputWithContext(context.Background())
}

func (e ExemptionCategory) ToExemptionCategoryPtrOutputWithContext(ctx context.Context) ExemptionCategoryPtrOutput {
	return ExemptionCategory(e).ToExemptionCategoryOutputWithContext(ctx).ToExemptionCategoryPtrOutputWithContext(ctx)
}

func (e ExemptionCategory) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExemptionCategory) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExemptionCategory) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExemptionCategory) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExemptionCategoryOutput struct{ *pulumi.OutputState }

func (ExemptionCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExemptionCategory)(nil)).Elem()
}

func (o ExemptionCategoryOutput) ToExemptionCategoryOutput() ExemptionCategoryOutput {
	return o
}

func (o ExemptionCategoryOutput) ToExemptionCategoryOutputWithContext(ctx context.Context) ExemptionCategoryOutput {
	return o
}

func (o ExemptionCategoryOutput) ToExemptionCategoryPtrOutput() ExemptionCategoryPtrOutput {
	return o.ToExemptionCategoryPtrOutputWithContext(context.Background())
}

func (o ExemptionCategoryOutput) ToExemptionCategoryPtrOutputWithContext(ctx context.Context) ExemptionCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExemptionCategory) *ExemptionCategory {
		return &v
	}).(ExemptionCategoryPtrOutput)
}

func (o ExemptionCategoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExemptionCategoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExemptionCategory) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExemptionCategoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExemptionCategoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExemptionCategory) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExemptionCategoryPtrOutput struct{ *pulumi.OutputState }

func (ExemptionCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExemptionCategory)(nil)).Elem()
}

func (o ExemptionCategoryPtrOutput) ToExemptionCategoryPtrOutput() ExemptionCategoryPtrOutput {
	return o
}

func (o ExemptionCategoryPtrOutput) ToExemptionCategoryPtrOutputWithContext(ctx context.Context) ExemptionCategoryPtrOutput {
	return o
}

func (o ExemptionCategoryPtrOutput) Elem() ExemptionCategoryOutput {
	return o.ApplyT(func(v *ExemptionCategory) ExemptionCategory {
		if v != nil {
			return *v
		}
		var ret ExemptionCategory
		return ret
	}).(ExemptionCategoryOutput)
}

func (o ExemptionCategoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExemptionCategoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExemptionCategory) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExemptionCategoryInput is an input type that accepts values of the ExemptionCategory enum
// A concrete instance of `ExemptionCategoryInput` can be one of the following:
//
//	ExemptionCategoryWaiver
//	ExemptionCategoryMitigated
type ExemptionCategoryInput interface {
	pulumi.Input

	ToExemptionCategoryOutput() ExemptionCategoryOutput
	ToExemptionCategoryOutputWithContext(context.Context) ExemptionCategoryOutput
}

var exemptionCategoryPtrType = reflect.TypeOf((**ExemptionCategory)(nil)).Elem()

type ExemptionCategoryPtrInput interface {
	pulumi.Input

	ToExemptionCategoryPtrOutput() ExemptionCategoryPtrOutput
	ToExemptionCategoryPtrOutputWithContext(context.Context) ExemptionCategoryPtrOutput
}

type exemptionCategoryPtr string

func ExemptionCategoryPtr(v string) ExemptionCategoryPtrInput {
	return (*exemptionCategoryPtr)(&v)
}

func (*exemptionCategoryPtr) ElementType() reflect.Type {
	return exemptionCategoryPtrType
}

func (in *exemptionCategoryPtr) ToExemptionCategoryPtrOutput() ExemptionCategoryPtrOutput {
	return pulumi.ToOutput(in).(ExemptionCategoryPtrOutput)
}

func (in *exemptionCategoryPtr) ToExemptionCategoryPtrOutputWithContext(ctx context.Context) ExemptionCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExemptionCategoryPtrOutput)
}

// The selector kind.
type SelectorKind string

const (
	// The selector kind to filter policies by the resource location.
	SelectorKindResourceLocation = SelectorKind("resourceLocation")
	// The selector kind to filter policies by the resource type.
	SelectorKindResourceType = SelectorKind("resourceType")
	// The selector kind to filter policies by the resource without location.
	SelectorKindResourceWithoutLocation = SelectorKind("resourceWithoutLocation")
	// The selector kind to filter policies by the policy definition reference ID.
	SelectorKindPolicyDefinitionReferenceId = SelectorKind("policyDefinitionReferenceId")
)

func (SelectorKind) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectorKind)(nil)).Elem()
}

func (e SelectorKind) ToSelectorKindOutput() SelectorKindOutput {
	return pulumi.ToOutput(e).(SelectorKindOutput)
}

func (e SelectorKind) ToSelectorKindOutputWithContext(ctx context.Context) SelectorKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SelectorKindOutput)
}

func (e SelectorKind) ToSelectorKindPtrOutput() SelectorKindPtrOutput {
	return e.ToSelectorKindPtrOutputWithContext(context.Background())
}

func (e SelectorKind) ToSelectorKindPtrOutputWithContext(ctx context.Context) SelectorKindPtrOutput {
	return SelectorKind(e).ToSelectorKindOutputWithContext(ctx).ToSelectorKindPtrOutputWithContext(ctx)
}

func (e SelectorKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SelectorKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SelectorKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SelectorKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SelectorKindOutput struct{ *pulumi.OutputState }

func (SelectorKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectorKind)(nil)).Elem()
}

func (o SelectorKindOutput) ToSelectorKindOutput() SelectorKindOutput {
	return o
}

func (o SelectorKindOutput) ToSelectorKindOutputWithContext(ctx context.Context) SelectorKindOutput {
	return o
}

func (o SelectorKindOutput) ToSelectorKindPtrOutput() SelectorKindPtrOutput {
	return o.ToSelectorKindPtrOutputWithContext(context.Background())
}

func (o SelectorKindOutput) ToSelectorKindPtrOutputWithContext(ctx context.Context) SelectorKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelectorKind) *SelectorKind {
		return &v
	}).(SelectorKindPtrOutput)
}

func (o SelectorKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SelectorKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SelectorKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SelectorKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SelectorKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SelectorKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SelectorKindPtrOutput struct{ *pulumi.OutputState }

func (SelectorKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelectorKind)(nil)).Elem()
}

func (o SelectorKindPtrOutput) ToSelectorKindPtrOutput() SelectorKindPtrOutput {
	return o
}

func (o SelectorKindPtrOutput) ToSelectorKindPtrOutputWithContext(ctx context.Context) SelectorKindPtrOutput {
	return o
}

func (o SelectorKindPtrOutput) Elem() SelectorKindOutput {
	return o.ApplyT(func(v *SelectorKind) SelectorKind {
		if v != nil {
			return *v
		}
		var ret SelectorKind
		return ret
	}).(SelectorKindOutput)
}

func (o SelectorKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SelectorKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SelectorKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SelectorKindInput is an input type that accepts values of the SelectorKind enum
// A concrete instance of `SelectorKindInput` can be one of the following:
//
//	SelectorKindResourceLocation
//	SelectorKindResourceType
//	SelectorKindResourceWithoutLocation
//	SelectorKindPolicyDefinitionReferenceId
type SelectorKindInput interface {
	pulumi.Input

	ToSelectorKindOutput() SelectorKindOutput
	ToSelectorKindOutputWithContext(context.Context) SelectorKindOutput
}

var selectorKindPtrType = reflect.TypeOf((**SelectorKind)(nil)).Elem()

type SelectorKindPtrInput interface {
	pulumi.Input

	ToSelectorKindPtrOutput() SelectorKindPtrOutput
	ToSelectorKindPtrOutputWithContext(context.Context) SelectorKindPtrOutput
}

type selectorKindPtr string

func SelectorKindPtr(v string) SelectorKindPtrInput {
	return (*selectorKindPtr)(&v)
}

func (*selectorKindPtr) ElementType() reflect.Type {
	return selectorKindPtrType
}

func (in *selectorKindPtr) ToSelectorKindPtrOutput() SelectorKindPtrOutput {
	return pulumi.ToOutput(in).(SelectorKindPtrOutput)
}

func (in *selectorKindPtr) ToSelectorKindPtrOutputWithContext(ctx context.Context) SelectorKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SelectorKindPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AssignmentScopeValidationOutput{})
	pulumi.RegisterOutputType(AssignmentScopeValidationPtrOutput{})
	pulumi.RegisterOutputType(ExemptionCategoryOutput{})
	pulumi.RegisterOutputType(ExemptionCategoryPtrOutput{})
	pulumi.RegisterOutputType(SelectorKindOutput{})
	pulumi.RegisterOutputType(SelectorKindPtrOutput{})
}
