// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkanalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Details of Consumption Properties
type ConsumptionEndpointsPropertiesResponse struct {
	// Resource Id of file access endpoint.
	FileAccessResourceId string `pulumi:"fileAccessResourceId"`
	// Url to consume file type.
	FileAccessUrl string `pulumi:"fileAccessUrl"`
	// Resource Id of ingestion endpoint.
	IngestionResourceId string `pulumi:"ingestionResourceId"`
	// Ingestion url to upload the data.
	IngestionUrl string `pulumi:"ingestionUrl"`
	// Resource Id of query endpoint.
	QueryResourceId string `pulumi:"queryResourceId"`
	// Url to consume the processed data.
	QueryUrl string `pulumi:"queryUrl"`
}

// Details of Consumption Properties
type ConsumptionEndpointsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConsumptionEndpointsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionEndpointsPropertiesResponse)(nil)).Elem()
}

func (o ConsumptionEndpointsPropertiesResponseOutput) ToConsumptionEndpointsPropertiesResponseOutput() ConsumptionEndpointsPropertiesResponseOutput {
	return o
}

func (o ConsumptionEndpointsPropertiesResponseOutput) ToConsumptionEndpointsPropertiesResponseOutputWithContext(ctx context.Context) ConsumptionEndpointsPropertiesResponseOutput {
	return o
}

func (o ConsumptionEndpointsPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConsumptionEndpointsPropertiesResponse] {
	return pulumix.Output[ConsumptionEndpointsPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Resource Id of file access endpoint.
func (o ConsumptionEndpointsPropertiesResponseOutput) FileAccessResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumptionEndpointsPropertiesResponse) string { return v.FileAccessResourceId }).(pulumi.StringOutput)
}

// Url to consume file type.
func (o ConsumptionEndpointsPropertiesResponseOutput) FileAccessUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumptionEndpointsPropertiesResponse) string { return v.FileAccessUrl }).(pulumi.StringOutput)
}

// Resource Id of ingestion endpoint.
func (o ConsumptionEndpointsPropertiesResponseOutput) IngestionResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumptionEndpointsPropertiesResponse) string { return v.IngestionResourceId }).(pulumi.StringOutput)
}

// Ingestion url to upload the data.
func (o ConsumptionEndpointsPropertiesResponseOutput) IngestionUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumptionEndpointsPropertiesResponse) string { return v.IngestionUrl }).(pulumi.StringOutput)
}

// Resource Id of query endpoint.
func (o ConsumptionEndpointsPropertiesResponseOutput) QueryResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumptionEndpointsPropertiesResponse) string { return v.QueryResourceId }).(pulumi.StringOutput)
}

// Url to consume the processed data.
func (o ConsumptionEndpointsPropertiesResponseOutput) QueryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumptionEndpointsPropertiesResponse) string { return v.QueryUrl }).(pulumi.StringOutput)
}

// Data Product Network rule set
type DataProductNetworkAcls struct {
	// The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
	AllowedQueryIpRangeList []string `pulumi:"allowedQueryIpRangeList"`
	// Default Action
	DefaultAction string `pulumi:"defaultAction"`
	// IP rule with specific IP or IP range in CIDR format.
	IpRules []IPRules `pulumi:"ipRules"`
	// Virtual Network Rule
	VirtualNetworkRule []VirtualNetworkRule `pulumi:"virtualNetworkRule"`
}

// DataProductNetworkAclsInput is an input type that accepts DataProductNetworkAclsArgs and DataProductNetworkAclsOutput values.
// You can construct a concrete instance of `DataProductNetworkAclsInput` via:
//
//	DataProductNetworkAclsArgs{...}
type DataProductNetworkAclsInput interface {
	pulumi.Input

	ToDataProductNetworkAclsOutput() DataProductNetworkAclsOutput
	ToDataProductNetworkAclsOutputWithContext(context.Context) DataProductNetworkAclsOutput
}

// Data Product Network rule set
type DataProductNetworkAclsArgs struct {
	// The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
	AllowedQueryIpRangeList pulumi.StringArrayInput `pulumi:"allowedQueryIpRangeList"`
	// Default Action
	DefaultAction pulumi.StringInput `pulumi:"defaultAction"`
	// IP rule with specific IP or IP range in CIDR format.
	IpRules IPRulesArrayInput `pulumi:"ipRules"`
	// Virtual Network Rule
	VirtualNetworkRule VirtualNetworkRuleArrayInput `pulumi:"virtualNetworkRule"`
}

func (DataProductNetworkAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataProductNetworkAcls)(nil)).Elem()
}

func (i DataProductNetworkAclsArgs) ToDataProductNetworkAclsOutput() DataProductNetworkAclsOutput {
	return i.ToDataProductNetworkAclsOutputWithContext(context.Background())
}

func (i DataProductNetworkAclsArgs) ToDataProductNetworkAclsOutputWithContext(ctx context.Context) DataProductNetworkAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataProductNetworkAclsOutput)
}

func (i DataProductNetworkAclsArgs) ToOutput(ctx context.Context) pulumix.Output[DataProductNetworkAcls] {
	return pulumix.Output[DataProductNetworkAcls]{
		OutputState: i.ToDataProductNetworkAclsOutputWithContext(ctx).OutputState,
	}
}

func (i DataProductNetworkAclsArgs) ToDataProductNetworkAclsPtrOutput() DataProductNetworkAclsPtrOutput {
	return i.ToDataProductNetworkAclsPtrOutputWithContext(context.Background())
}

func (i DataProductNetworkAclsArgs) ToDataProductNetworkAclsPtrOutputWithContext(ctx context.Context) DataProductNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataProductNetworkAclsOutput).ToDataProductNetworkAclsPtrOutputWithContext(ctx)
}

// DataProductNetworkAclsPtrInput is an input type that accepts DataProductNetworkAclsArgs, DataProductNetworkAclsPtr and DataProductNetworkAclsPtrOutput values.
// You can construct a concrete instance of `DataProductNetworkAclsPtrInput` via:
//
//	        DataProductNetworkAclsArgs{...}
//
//	or:
//
//	        nil
type DataProductNetworkAclsPtrInput interface {
	pulumi.Input

	ToDataProductNetworkAclsPtrOutput() DataProductNetworkAclsPtrOutput
	ToDataProductNetworkAclsPtrOutputWithContext(context.Context) DataProductNetworkAclsPtrOutput
}

type dataProductNetworkAclsPtrType DataProductNetworkAclsArgs

func DataProductNetworkAclsPtr(v *DataProductNetworkAclsArgs) DataProductNetworkAclsPtrInput {
	return (*dataProductNetworkAclsPtrType)(v)
}

func (*dataProductNetworkAclsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataProductNetworkAcls)(nil)).Elem()
}

func (i *dataProductNetworkAclsPtrType) ToDataProductNetworkAclsPtrOutput() DataProductNetworkAclsPtrOutput {
	return i.ToDataProductNetworkAclsPtrOutputWithContext(context.Background())
}

func (i *dataProductNetworkAclsPtrType) ToDataProductNetworkAclsPtrOutputWithContext(ctx context.Context) DataProductNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataProductNetworkAclsPtrOutput)
}

func (i *dataProductNetworkAclsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataProductNetworkAcls] {
	return pulumix.Output[*DataProductNetworkAcls]{
		OutputState: i.ToDataProductNetworkAclsPtrOutputWithContext(ctx).OutputState,
	}
}

// Data Product Network rule set
type DataProductNetworkAclsOutput struct{ *pulumi.OutputState }

func (DataProductNetworkAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataProductNetworkAcls)(nil)).Elem()
}

func (o DataProductNetworkAclsOutput) ToDataProductNetworkAclsOutput() DataProductNetworkAclsOutput {
	return o
}

func (o DataProductNetworkAclsOutput) ToDataProductNetworkAclsOutputWithContext(ctx context.Context) DataProductNetworkAclsOutput {
	return o
}

func (o DataProductNetworkAclsOutput) ToDataProductNetworkAclsPtrOutput() DataProductNetworkAclsPtrOutput {
	return o.ToDataProductNetworkAclsPtrOutputWithContext(context.Background())
}

func (o DataProductNetworkAclsOutput) ToDataProductNetworkAclsPtrOutputWithContext(ctx context.Context) DataProductNetworkAclsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataProductNetworkAcls) *DataProductNetworkAcls {
		return &v
	}).(DataProductNetworkAclsPtrOutput)
}

func (o DataProductNetworkAclsOutput) ToOutput(ctx context.Context) pulumix.Output[DataProductNetworkAcls] {
	return pulumix.Output[DataProductNetworkAcls]{
		OutputState: o.OutputState,
	}
}

// The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
func (o DataProductNetworkAclsOutput) AllowedQueryIpRangeList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataProductNetworkAcls) []string { return v.AllowedQueryIpRangeList }).(pulumi.StringArrayOutput)
}

// Default Action
func (o DataProductNetworkAclsOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v DataProductNetworkAcls) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// IP rule with specific IP or IP range in CIDR format.
func (o DataProductNetworkAclsOutput) IpRules() IPRulesArrayOutput {
	return o.ApplyT(func(v DataProductNetworkAcls) []IPRules { return v.IpRules }).(IPRulesArrayOutput)
}

// Virtual Network Rule
func (o DataProductNetworkAclsOutput) VirtualNetworkRule() VirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v DataProductNetworkAcls) []VirtualNetworkRule { return v.VirtualNetworkRule }).(VirtualNetworkRuleArrayOutput)
}

type DataProductNetworkAclsPtrOutput struct{ *pulumi.OutputState }

func (DataProductNetworkAclsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataProductNetworkAcls)(nil)).Elem()
}

func (o DataProductNetworkAclsPtrOutput) ToDataProductNetworkAclsPtrOutput() DataProductNetworkAclsPtrOutput {
	return o
}

func (o DataProductNetworkAclsPtrOutput) ToDataProductNetworkAclsPtrOutputWithContext(ctx context.Context) DataProductNetworkAclsPtrOutput {
	return o
}

func (o DataProductNetworkAclsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataProductNetworkAcls] {
	return pulumix.Output[*DataProductNetworkAcls]{
		OutputState: o.OutputState,
	}
}

func (o DataProductNetworkAclsPtrOutput) Elem() DataProductNetworkAclsOutput {
	return o.ApplyT(func(v *DataProductNetworkAcls) DataProductNetworkAcls {
		if v != nil {
			return *v
		}
		var ret DataProductNetworkAcls
		return ret
	}).(DataProductNetworkAclsOutput)
}

// The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
func (o DataProductNetworkAclsPtrOutput) AllowedQueryIpRangeList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataProductNetworkAcls) []string {
		if v == nil {
			return nil
		}
		return v.AllowedQueryIpRangeList
	}).(pulumi.StringArrayOutput)
}

// Default Action
func (o DataProductNetworkAclsPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataProductNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// IP rule with specific IP or IP range in CIDR format.
func (o DataProductNetworkAclsPtrOutput) IpRules() IPRulesArrayOutput {
	return o.ApplyT(func(v *DataProductNetworkAcls) []IPRules {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(IPRulesArrayOutput)
}

// Virtual Network Rule
func (o DataProductNetworkAclsPtrOutput) VirtualNetworkRule() VirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v *DataProductNetworkAcls) []VirtualNetworkRule {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkRule
	}).(VirtualNetworkRuleArrayOutput)
}

// Data Product Network rule set
type DataProductNetworkAclsResponse struct {
	// The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
	AllowedQueryIpRangeList []string `pulumi:"allowedQueryIpRangeList"`
	// Default Action
	DefaultAction string `pulumi:"defaultAction"`
	// IP rule with specific IP or IP range in CIDR format.
	IpRules []IPRulesResponse `pulumi:"ipRules"`
	// Virtual Network Rule
	VirtualNetworkRule []VirtualNetworkRuleResponse `pulumi:"virtualNetworkRule"`
}

// Data Product Network rule set
type DataProductNetworkAclsResponseOutput struct{ *pulumi.OutputState }

func (DataProductNetworkAclsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataProductNetworkAclsResponse)(nil)).Elem()
}

func (o DataProductNetworkAclsResponseOutput) ToDataProductNetworkAclsResponseOutput() DataProductNetworkAclsResponseOutput {
	return o
}

func (o DataProductNetworkAclsResponseOutput) ToDataProductNetworkAclsResponseOutputWithContext(ctx context.Context) DataProductNetworkAclsResponseOutput {
	return o
}

func (o DataProductNetworkAclsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DataProductNetworkAclsResponse] {
	return pulumix.Output[DataProductNetworkAclsResponse]{
		OutputState: o.OutputState,
	}
}

// The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
func (o DataProductNetworkAclsResponseOutput) AllowedQueryIpRangeList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataProductNetworkAclsResponse) []string { return v.AllowedQueryIpRangeList }).(pulumi.StringArrayOutput)
}

// Default Action
func (o DataProductNetworkAclsResponseOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v DataProductNetworkAclsResponse) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// IP rule with specific IP or IP range in CIDR format.
func (o DataProductNetworkAclsResponseOutput) IpRules() IPRulesResponseArrayOutput {
	return o.ApplyT(func(v DataProductNetworkAclsResponse) []IPRulesResponse { return v.IpRules }).(IPRulesResponseArrayOutput)
}

// Virtual Network Rule
func (o DataProductNetworkAclsResponseOutput) VirtualNetworkRule() VirtualNetworkRuleResponseArrayOutput {
	return o.ApplyT(func(v DataProductNetworkAclsResponse) []VirtualNetworkRuleResponse { return v.VirtualNetworkRule }).(VirtualNetworkRuleResponseArrayOutput)
}

type DataProductNetworkAclsResponsePtrOutput struct{ *pulumi.OutputState }

func (DataProductNetworkAclsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataProductNetworkAclsResponse)(nil)).Elem()
}

func (o DataProductNetworkAclsResponsePtrOutput) ToDataProductNetworkAclsResponsePtrOutput() DataProductNetworkAclsResponsePtrOutput {
	return o
}

func (o DataProductNetworkAclsResponsePtrOutput) ToDataProductNetworkAclsResponsePtrOutputWithContext(ctx context.Context) DataProductNetworkAclsResponsePtrOutput {
	return o
}

func (o DataProductNetworkAclsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataProductNetworkAclsResponse] {
	return pulumix.Output[*DataProductNetworkAclsResponse]{
		OutputState: o.OutputState,
	}
}

func (o DataProductNetworkAclsResponsePtrOutput) Elem() DataProductNetworkAclsResponseOutput {
	return o.ApplyT(func(v *DataProductNetworkAclsResponse) DataProductNetworkAclsResponse {
		if v != nil {
			return *v
		}
		var ret DataProductNetworkAclsResponse
		return ret
	}).(DataProductNetworkAclsResponseOutput)
}

// The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.
func (o DataProductNetworkAclsResponsePtrOutput) AllowedQueryIpRangeList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataProductNetworkAclsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedQueryIpRangeList
	}).(pulumi.StringArrayOutput)
}

// Default Action
func (o DataProductNetworkAclsResponsePtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataProductNetworkAclsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// IP rule with specific IP or IP range in CIDR format.
func (o DataProductNetworkAclsResponsePtrOutput) IpRules() IPRulesResponseArrayOutput {
	return o.ApplyT(func(v *DataProductNetworkAclsResponse) []IPRulesResponse {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(IPRulesResponseArrayOutput)
}

// Virtual Network Rule
func (o DataProductNetworkAclsResponsePtrOutput) VirtualNetworkRule() VirtualNetworkRuleResponseArrayOutput {
	return o.ApplyT(func(v *DataProductNetworkAclsResponse) []VirtualNetworkRuleResponse {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkRule
	}).(VirtualNetworkRuleResponseArrayOutput)
}

// Encryption key details.
type EncryptionKeyDetails struct {
	// The name of the key vault key.
	KeyName string `pulumi:"keyName"`
	// The Uri of the key vault.
	KeyVaultUri string `pulumi:"keyVaultUri"`
	// The version of the key vault key.
	KeyVersion string `pulumi:"keyVersion"`
}

// EncryptionKeyDetailsInput is an input type that accepts EncryptionKeyDetailsArgs and EncryptionKeyDetailsOutput values.
// You can construct a concrete instance of `EncryptionKeyDetailsInput` via:
//
//	EncryptionKeyDetailsArgs{...}
type EncryptionKeyDetailsInput interface {
	pulumi.Input

	ToEncryptionKeyDetailsOutput() EncryptionKeyDetailsOutput
	ToEncryptionKeyDetailsOutputWithContext(context.Context) EncryptionKeyDetailsOutput
}

// Encryption key details.
type EncryptionKeyDetailsArgs struct {
	// The name of the key vault key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The Uri of the key vault.
	KeyVaultUri pulumi.StringInput `pulumi:"keyVaultUri"`
	// The version of the key vault key.
	KeyVersion pulumi.StringInput `pulumi:"keyVersion"`
}

func (EncryptionKeyDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyDetails)(nil)).Elem()
}

func (i EncryptionKeyDetailsArgs) ToEncryptionKeyDetailsOutput() EncryptionKeyDetailsOutput {
	return i.ToEncryptionKeyDetailsOutputWithContext(context.Background())
}

func (i EncryptionKeyDetailsArgs) ToEncryptionKeyDetailsOutputWithContext(ctx context.Context) EncryptionKeyDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyDetailsOutput)
}

func (i EncryptionKeyDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionKeyDetails] {
	return pulumix.Output[EncryptionKeyDetails]{
		OutputState: i.ToEncryptionKeyDetailsOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionKeyDetailsArgs) ToEncryptionKeyDetailsPtrOutput() EncryptionKeyDetailsPtrOutput {
	return i.ToEncryptionKeyDetailsPtrOutputWithContext(context.Background())
}

func (i EncryptionKeyDetailsArgs) ToEncryptionKeyDetailsPtrOutputWithContext(ctx context.Context) EncryptionKeyDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyDetailsOutput).ToEncryptionKeyDetailsPtrOutputWithContext(ctx)
}

// EncryptionKeyDetailsPtrInput is an input type that accepts EncryptionKeyDetailsArgs, EncryptionKeyDetailsPtr and EncryptionKeyDetailsPtrOutput values.
// You can construct a concrete instance of `EncryptionKeyDetailsPtrInput` via:
//
//	        EncryptionKeyDetailsArgs{...}
//
//	or:
//
//	        nil
type EncryptionKeyDetailsPtrInput interface {
	pulumi.Input

	ToEncryptionKeyDetailsPtrOutput() EncryptionKeyDetailsPtrOutput
	ToEncryptionKeyDetailsPtrOutputWithContext(context.Context) EncryptionKeyDetailsPtrOutput
}

type encryptionKeyDetailsPtrType EncryptionKeyDetailsArgs

func EncryptionKeyDetailsPtr(v *EncryptionKeyDetailsArgs) EncryptionKeyDetailsPtrInput {
	return (*encryptionKeyDetailsPtrType)(v)
}

func (*encryptionKeyDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyDetails)(nil)).Elem()
}

func (i *encryptionKeyDetailsPtrType) ToEncryptionKeyDetailsPtrOutput() EncryptionKeyDetailsPtrOutput {
	return i.ToEncryptionKeyDetailsPtrOutputWithContext(context.Background())
}

func (i *encryptionKeyDetailsPtrType) ToEncryptionKeyDetailsPtrOutputWithContext(ctx context.Context) EncryptionKeyDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyDetailsPtrOutput)
}

func (i *encryptionKeyDetailsPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionKeyDetails] {
	return pulumix.Output[*EncryptionKeyDetails]{
		OutputState: i.ToEncryptionKeyDetailsPtrOutputWithContext(ctx).OutputState,
	}
}

// Encryption key details.
type EncryptionKeyDetailsOutput struct{ *pulumi.OutputState }

func (EncryptionKeyDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyDetails)(nil)).Elem()
}

func (o EncryptionKeyDetailsOutput) ToEncryptionKeyDetailsOutput() EncryptionKeyDetailsOutput {
	return o
}

func (o EncryptionKeyDetailsOutput) ToEncryptionKeyDetailsOutputWithContext(ctx context.Context) EncryptionKeyDetailsOutput {
	return o
}

func (o EncryptionKeyDetailsOutput) ToEncryptionKeyDetailsPtrOutput() EncryptionKeyDetailsPtrOutput {
	return o.ToEncryptionKeyDetailsPtrOutputWithContext(context.Background())
}

func (o EncryptionKeyDetailsOutput) ToEncryptionKeyDetailsPtrOutputWithContext(ctx context.Context) EncryptionKeyDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionKeyDetails) *EncryptionKeyDetails {
		return &v
	}).(EncryptionKeyDetailsPtrOutput)
}

func (o EncryptionKeyDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionKeyDetails] {
	return pulumix.Output[EncryptionKeyDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the key vault key.
func (o EncryptionKeyDetailsOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyDetails) string { return v.KeyName }).(pulumi.StringOutput)
}

// The Uri of the key vault.
func (o EncryptionKeyDetailsOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyDetails) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

// The version of the key vault key.
func (o EncryptionKeyDetailsOutput) KeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyDetails) string { return v.KeyVersion }).(pulumi.StringOutput)
}

type EncryptionKeyDetailsPtrOutput struct{ *pulumi.OutputState }

func (EncryptionKeyDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyDetails)(nil)).Elem()
}

func (o EncryptionKeyDetailsPtrOutput) ToEncryptionKeyDetailsPtrOutput() EncryptionKeyDetailsPtrOutput {
	return o
}

func (o EncryptionKeyDetailsPtrOutput) ToEncryptionKeyDetailsPtrOutputWithContext(ctx context.Context) EncryptionKeyDetailsPtrOutput {
	return o
}

func (o EncryptionKeyDetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionKeyDetails] {
	return pulumix.Output[*EncryptionKeyDetails]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionKeyDetailsPtrOutput) Elem() EncryptionKeyDetailsOutput {
	return o.ApplyT(func(v *EncryptionKeyDetails) EncryptionKeyDetails {
		if v != nil {
			return *v
		}
		var ret EncryptionKeyDetails
		return ret
	}).(EncryptionKeyDetailsOutput)
}

// The name of the key vault key.
func (o EncryptionKeyDetailsPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyDetails) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The Uri of the key vault.
func (o EncryptionKeyDetailsPtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyDetails) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// The version of the key vault key.
func (o EncryptionKeyDetailsPtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyDetails) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// Encryption key details.
type EncryptionKeyDetailsResponse struct {
	// The name of the key vault key.
	KeyName string `pulumi:"keyName"`
	// The Uri of the key vault.
	KeyVaultUri string `pulumi:"keyVaultUri"`
	// The version of the key vault key.
	KeyVersion string `pulumi:"keyVersion"`
}

// Encryption key details.
type EncryptionKeyDetailsResponseOutput struct{ *pulumi.OutputState }

func (EncryptionKeyDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyDetailsResponse)(nil)).Elem()
}

func (o EncryptionKeyDetailsResponseOutput) ToEncryptionKeyDetailsResponseOutput() EncryptionKeyDetailsResponseOutput {
	return o
}

func (o EncryptionKeyDetailsResponseOutput) ToEncryptionKeyDetailsResponseOutputWithContext(ctx context.Context) EncryptionKeyDetailsResponseOutput {
	return o
}

func (o EncryptionKeyDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionKeyDetailsResponse] {
	return pulumix.Output[EncryptionKeyDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the key vault key.
func (o EncryptionKeyDetailsResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyDetailsResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The Uri of the key vault.
func (o EncryptionKeyDetailsResponseOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyDetailsResponse) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

// The version of the key vault key.
func (o EncryptionKeyDetailsResponseOutput) KeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyDetailsResponse) string { return v.KeyVersion }).(pulumi.StringOutput)
}

type EncryptionKeyDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionKeyDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyDetailsResponse)(nil)).Elem()
}

func (o EncryptionKeyDetailsResponsePtrOutput) ToEncryptionKeyDetailsResponsePtrOutput() EncryptionKeyDetailsResponsePtrOutput {
	return o
}

func (o EncryptionKeyDetailsResponsePtrOutput) ToEncryptionKeyDetailsResponsePtrOutputWithContext(ctx context.Context) EncryptionKeyDetailsResponsePtrOutput {
	return o
}

func (o EncryptionKeyDetailsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionKeyDetailsResponse] {
	return pulumix.Output[*EncryptionKeyDetailsResponse]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionKeyDetailsResponsePtrOutput) Elem() EncryptionKeyDetailsResponseOutput {
	return o.ApplyT(func(v *EncryptionKeyDetailsResponse) EncryptionKeyDetailsResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionKeyDetailsResponse
		return ret
	}).(EncryptionKeyDetailsResponseOutput)
}

// The name of the key vault key.
func (o EncryptionKeyDetailsResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The Uri of the key vault.
func (o EncryptionKeyDetailsResponsePtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// The version of the key vault key.
func (o EncryptionKeyDetailsResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// IP rule with specific IP or IP range in CIDR format.
type IPRules struct {
	// The action of virtual network rule.
	Action string `pulumi:"action"`
	// IP Rules Value
	Value *string `pulumi:"value"`
}

// IPRulesInput is an input type that accepts IPRulesArgs and IPRulesOutput values.
// You can construct a concrete instance of `IPRulesInput` via:
//
//	IPRulesArgs{...}
type IPRulesInput interface {
	pulumi.Input

	ToIPRulesOutput() IPRulesOutput
	ToIPRulesOutputWithContext(context.Context) IPRulesOutput
}

// IP rule with specific IP or IP range in CIDR format.
type IPRulesArgs struct {
	// The action of virtual network rule.
	Action pulumi.StringInput `pulumi:"action"`
	// IP Rules Value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (IPRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRules)(nil)).Elem()
}

func (i IPRulesArgs) ToIPRulesOutput() IPRulesOutput {
	return i.ToIPRulesOutputWithContext(context.Background())
}

func (i IPRulesArgs) ToIPRulesOutputWithContext(ctx context.Context) IPRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRulesOutput)
}

func (i IPRulesArgs) ToOutput(ctx context.Context) pulumix.Output[IPRules] {
	return pulumix.Output[IPRules]{
		OutputState: i.ToIPRulesOutputWithContext(ctx).OutputState,
	}
}

// IPRulesArrayInput is an input type that accepts IPRulesArray and IPRulesArrayOutput values.
// You can construct a concrete instance of `IPRulesArrayInput` via:
//
//	IPRulesArray{ IPRulesArgs{...} }
type IPRulesArrayInput interface {
	pulumi.Input

	ToIPRulesArrayOutput() IPRulesArrayOutput
	ToIPRulesArrayOutputWithContext(context.Context) IPRulesArrayOutput
}

type IPRulesArray []IPRulesInput

func (IPRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRules)(nil)).Elem()
}

func (i IPRulesArray) ToIPRulesArrayOutput() IPRulesArrayOutput {
	return i.ToIPRulesArrayOutputWithContext(context.Background())
}

func (i IPRulesArray) ToIPRulesArrayOutputWithContext(ctx context.Context) IPRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRulesArrayOutput)
}

func (i IPRulesArray) ToOutput(ctx context.Context) pulumix.Output[[]IPRules] {
	return pulumix.Output[[]IPRules]{
		OutputState: i.ToIPRulesArrayOutputWithContext(ctx).OutputState,
	}
}

// IP rule with specific IP or IP range in CIDR format.
type IPRulesOutput struct{ *pulumi.OutputState }

func (IPRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRules)(nil)).Elem()
}

func (o IPRulesOutput) ToIPRulesOutput() IPRulesOutput {
	return o
}

func (o IPRulesOutput) ToIPRulesOutputWithContext(ctx context.Context) IPRulesOutput {
	return o
}

func (o IPRulesOutput) ToOutput(ctx context.Context) pulumix.Output[IPRules] {
	return pulumix.Output[IPRules]{
		OutputState: o.OutputState,
	}
}

// The action of virtual network rule.
func (o IPRulesOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IPRules) string { return v.Action }).(pulumi.StringOutput)
}

// IP Rules Value
func (o IPRulesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRules) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IPRulesArrayOutput struct{ *pulumi.OutputState }

func (IPRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRules)(nil)).Elem()
}

func (o IPRulesArrayOutput) ToIPRulesArrayOutput() IPRulesArrayOutput {
	return o
}

func (o IPRulesArrayOutput) ToIPRulesArrayOutputWithContext(ctx context.Context) IPRulesArrayOutput {
	return o
}

func (o IPRulesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IPRules] {
	return pulumix.Output[[]IPRules]{
		OutputState: o.OutputState,
	}
}

func (o IPRulesArrayOutput) Index(i pulumi.IntInput) IPRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRules {
		return vs[0].([]IPRules)[vs[1].(int)]
	}).(IPRulesOutput)
}

// IP rule with specific IP or IP range in CIDR format.
type IPRulesResponse struct {
	// The action of virtual network rule.
	Action string `pulumi:"action"`
	// IP Rules Value
	Value *string `pulumi:"value"`
}

// IP rule with specific IP or IP range in CIDR format.
type IPRulesResponseOutput struct{ *pulumi.OutputState }

func (IPRulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRulesResponse)(nil)).Elem()
}

func (o IPRulesResponseOutput) ToIPRulesResponseOutput() IPRulesResponseOutput {
	return o
}

func (o IPRulesResponseOutput) ToIPRulesResponseOutputWithContext(ctx context.Context) IPRulesResponseOutput {
	return o
}

func (o IPRulesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IPRulesResponse] {
	return pulumix.Output[IPRulesResponse]{
		OutputState: o.OutputState,
	}
}

// The action of virtual network rule.
func (o IPRulesResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IPRulesResponse) string { return v.Action }).(pulumi.StringOutput)
}

// IP Rules Value
func (o IPRulesResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRulesResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IPRulesResponseArrayOutput struct{ *pulumi.OutputState }

func (IPRulesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRulesResponse)(nil)).Elem()
}

func (o IPRulesResponseArrayOutput) ToIPRulesResponseArrayOutput() IPRulesResponseArrayOutput {
	return o
}

func (o IPRulesResponseArrayOutput) ToIPRulesResponseArrayOutputWithContext(ctx context.Context) IPRulesResponseArrayOutput {
	return o
}

func (o IPRulesResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IPRulesResponse] {
	return pulumix.Output[[]IPRulesResponse]{
		OutputState: o.OutputState,
	}
}

func (o IPRulesResponseArrayOutput) Index(i pulumi.IntInput) IPRulesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRulesResponse {
		return vs[0].([]IPRulesResponse)[vs[1].(int)]
	}).(IPRulesResponseOutput)
}

// ManagedResourceGroup related properties
type ManagedResourceGroupConfiguration struct {
	// Managed Resource Group location
	Location string `pulumi:"location"`
	// Name of managed resource group
	Name string `pulumi:"name"`
}

// ManagedResourceGroupConfigurationInput is an input type that accepts ManagedResourceGroupConfigurationArgs and ManagedResourceGroupConfigurationOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationInput` via:
//
//	ManagedResourceGroupConfigurationArgs{...}
type ManagedResourceGroupConfigurationInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput
	ToManagedResourceGroupConfigurationOutputWithContext(context.Context) ManagedResourceGroupConfigurationOutput
}

// ManagedResourceGroup related properties
type ManagedResourceGroupConfigurationArgs struct {
	// Managed Resource Group location
	Location pulumi.StringInput `pulumi:"location"`
	// Name of managed resource group
	Name pulumi.StringInput `pulumi:"name"`
}

func (ManagedResourceGroupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return i.ToManagedResourceGroupConfigurationOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput)
}

func (i ManagedResourceGroupConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedResourceGroupConfiguration] {
	return pulumix.Output[ManagedResourceGroupConfiguration]{
		OutputState: i.ToManagedResourceGroupConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput).ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx)
}

// ManagedResourceGroupConfigurationPtrInput is an input type that accepts ManagedResourceGroupConfigurationArgs, ManagedResourceGroupConfigurationPtr and ManagedResourceGroupConfigurationPtrOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationPtrInput` via:
//
//	        ManagedResourceGroupConfigurationArgs{...}
//
//	or:
//
//	        nil
type ManagedResourceGroupConfigurationPtrInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput
	ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Context) ManagedResourceGroupConfigurationPtrOutput
}

type managedResourceGroupConfigurationPtrType ManagedResourceGroupConfigurationArgs

func ManagedResourceGroupConfigurationPtr(v *ManagedResourceGroupConfigurationArgs) ManagedResourceGroupConfigurationPtrInput {
	return (*managedResourceGroupConfigurationPtrType)(v)
}

func (*managedResourceGroupConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationPtrOutput)
}

func (i *managedResourceGroupConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedResourceGroupConfiguration] {
	return pulumix.Output[*ManagedResourceGroupConfiguration]{
		OutputState: i.ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// ManagedResourceGroup related properties
type ManagedResourceGroupConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedResourceGroupConfiguration) *ManagedResourceGroupConfiguration {
		return &v
	}).(ManagedResourceGroupConfigurationPtrOutput)
}

func (o ManagedResourceGroupConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedResourceGroupConfiguration] {
	return pulumix.Output[ManagedResourceGroupConfiguration]{
		OutputState: o.OutputState,
	}
}

// Managed Resource Group location
func (o ManagedResourceGroupConfigurationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfiguration) string { return v.Location }).(pulumi.StringOutput)
}

// Name of managed resource group
func (o ManagedResourceGroupConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

type ManagedResourceGroupConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedResourceGroupConfiguration] {
	return pulumix.Output[*ManagedResourceGroupConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ManagedResourceGroupConfigurationPtrOutput) Elem() ManagedResourceGroupConfigurationOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) ManagedResourceGroupConfiguration {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupConfiguration
		return ret
	}).(ManagedResourceGroupConfigurationOutput)
}

// Managed Resource Group location
func (o ManagedResourceGroupConfigurationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Name of managed resource group
func (o ManagedResourceGroupConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

func (i *managedServiceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

func (o ManagedServiceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentityResponse] {
	return pulumix.Output[ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentityResponse] {
	return pulumix.Output[*ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// The details for role assignment response.
type RoleAssignmentDetailResponse struct {
	// Data Type Scope at which the role assignment is created.
	DataTypeScope []string `pulumi:"dataTypeScope"`
	// Object ID of the AAD principal or security-group.
	PrincipalId string `pulumi:"principalId"`
	// Type of the principal Id: User, Group or ServicePrincipal
	PrincipalType string `pulumi:"principalType"`
	// Data Product role to be assigned to a user.
	Role string `pulumi:"role"`
	// Id of role assignment request
	RoleAssignmentId string `pulumi:"roleAssignmentId"`
	// Role Id of the Built-In Role
	RoleId string `pulumi:"roleId"`
	// User name.
	UserName string `pulumi:"userName"`
}

// The details for role assignment response.
type RoleAssignmentDetailResponseOutput struct{ *pulumi.OutputState }

func (RoleAssignmentDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentDetailResponse)(nil)).Elem()
}

func (o RoleAssignmentDetailResponseOutput) ToRoleAssignmentDetailResponseOutput() RoleAssignmentDetailResponseOutput {
	return o
}

func (o RoleAssignmentDetailResponseOutput) ToRoleAssignmentDetailResponseOutputWithContext(ctx context.Context) RoleAssignmentDetailResponseOutput {
	return o
}

func (o RoleAssignmentDetailResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RoleAssignmentDetailResponse] {
	return pulumix.Output[RoleAssignmentDetailResponse]{
		OutputState: o.OutputState,
	}
}

// Data Type Scope at which the role assignment is created.
func (o RoleAssignmentDetailResponseOutput) DataTypeScope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleAssignmentDetailResponse) []string { return v.DataTypeScope }).(pulumi.StringArrayOutput)
}

// Object ID of the AAD principal or security-group.
func (o RoleAssignmentDetailResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentDetailResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Type of the principal Id: User, Group or ServicePrincipal
func (o RoleAssignmentDetailResponseOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentDetailResponse) string { return v.PrincipalType }).(pulumi.StringOutput)
}

// Data Product role to be assigned to a user.
func (o RoleAssignmentDetailResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentDetailResponse) string { return v.Role }).(pulumi.StringOutput)
}

// Id of role assignment request
func (o RoleAssignmentDetailResponseOutput) RoleAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentDetailResponse) string { return v.RoleAssignmentId }).(pulumi.StringOutput)
}

// Role Id of the Built-In Role
func (o RoleAssignmentDetailResponseOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentDetailResponse) string { return v.RoleId }).(pulumi.StringOutput)
}

// User name.
func (o RoleAssignmentDetailResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentDetailResponse) string { return v.UserName }).(pulumi.StringOutput)
}

type RoleAssignmentDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (RoleAssignmentDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleAssignmentDetailResponse)(nil)).Elem()
}

func (o RoleAssignmentDetailResponseArrayOutput) ToRoleAssignmentDetailResponseArrayOutput() RoleAssignmentDetailResponseArrayOutput {
	return o
}

func (o RoleAssignmentDetailResponseArrayOutput) ToRoleAssignmentDetailResponseArrayOutputWithContext(ctx context.Context) RoleAssignmentDetailResponseArrayOutput {
	return o
}

func (o RoleAssignmentDetailResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RoleAssignmentDetailResponse] {
	return pulumix.Output[[]RoleAssignmentDetailResponse]{
		OutputState: o.OutputState,
	}
}

func (o RoleAssignmentDetailResponseArrayOutput) Index(i pulumi.IntInput) RoleAssignmentDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleAssignmentDetailResponse {
		return vs[0].([]RoleAssignmentDetailResponse)[vs[1].(int)]
	}).(RoleAssignmentDetailResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentityResponse] {
	return pulumix.Output[map[string]UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// Virtual Network Rule
type VirtualNetworkRule struct {
	// The action of virtual network rule.
	Action *string `pulumi:"action"`
	// Resource ID of a subnet
	Id string `pulumi:"id"`
	// Gets the state of virtual network rule.
	State *string `pulumi:"state"`
}

// VirtualNetworkRuleInput is an input type that accepts VirtualNetworkRuleArgs and VirtualNetworkRuleOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleInput` via:
//
//	VirtualNetworkRuleArgs{...}
type VirtualNetworkRuleInput interface {
	pulumi.Input

	ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput
	ToVirtualNetworkRuleOutputWithContext(context.Context) VirtualNetworkRuleOutput
}

// Virtual Network Rule
type VirtualNetworkRuleArgs struct {
	// The action of virtual network rule.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Resource ID of a subnet
	Id pulumi.StringInput `pulumi:"id"`
	// Gets the state of virtual network rule.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (VirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return i.ToVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleOutput)
}

func (i VirtualNetworkRuleArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualNetworkRule] {
	return pulumix.Output[VirtualNetworkRule]{
		OutputState: i.ToVirtualNetworkRuleOutputWithContext(ctx).OutputState,
	}
}

// VirtualNetworkRuleArrayInput is an input type that accepts VirtualNetworkRuleArray and VirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleArrayInput` via:
//
//	VirtualNetworkRuleArray{ VirtualNetworkRuleArgs{...} }
type VirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput
	ToVirtualNetworkRuleArrayOutputWithContext(context.Context) VirtualNetworkRuleArrayOutput
}

type VirtualNetworkRuleArray []VirtualNetworkRuleInput

func (VirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return i.ToVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleArrayOutput)
}

func (i VirtualNetworkRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]VirtualNetworkRule] {
	return pulumix.Output[[]VirtualNetworkRule]{
		OutputState: i.ToVirtualNetworkRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// Virtual Network Rule
type VirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return o
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return o
}

func (o VirtualNetworkRuleOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNetworkRule] {
	return pulumix.Output[VirtualNetworkRule]{
		OutputState: o.OutputState,
	}
}

// The action of virtual network rule.
func (o VirtualNetworkRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet
func (o VirtualNetworkRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNetworkRule) string { return v.Id }).(pulumi.StringOutput)
}

// Gets the state of virtual network rule.
func (o VirtualNetworkRuleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRule) *string { return v.State }).(pulumi.StringPtrOutput)
}

type VirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualNetworkRule] {
	return pulumix.Output[[]VirtualNetworkRule]{
		OutputState: o.OutputState,
	}
}

func (o VirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRule {
		return vs[0].([]VirtualNetworkRule)[vs[1].(int)]
	}).(VirtualNetworkRuleOutput)
}

// Virtual Network Rule
type VirtualNetworkRuleResponse struct {
	// The action of virtual network rule.
	Action *string `pulumi:"action"`
	// Resource ID of a subnet
	Id string `pulumi:"id"`
	// Gets the state of virtual network rule.
	State *string `pulumi:"state"`
}

// Virtual Network Rule
type VirtualNetworkRuleResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput {
	return o
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseOutput {
	return o
}

func (o VirtualNetworkRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualNetworkRuleResponse] {
	return pulumix.Output[VirtualNetworkRuleResponse]{
		OutputState: o.OutputState,
	}
}

// The action of virtual network rule.
func (o VirtualNetworkRuleResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet
func (o VirtualNetworkRuleResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Gets the state of virtual network rule.
func (o VirtualNetworkRuleResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type VirtualNetworkRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualNetworkRuleResponse] {
	return pulumix.Output[[]VirtualNetworkRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o VirtualNetworkRuleResponseArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRuleResponse {
		return vs[0].([]VirtualNetworkRuleResponse)[vs[1].(int)]
	}).(VirtualNetworkRuleResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ConsumptionEndpointsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DataProductNetworkAclsOutput{})
	pulumi.RegisterOutputType(DataProductNetworkAclsPtrOutput{})
	pulumi.RegisterOutputType(DataProductNetworkAclsResponseOutput{})
	pulumi.RegisterOutputType(DataProductNetworkAclsResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionKeyDetailsOutput{})
	pulumi.RegisterOutputType(EncryptionKeyDetailsPtrOutput{})
	pulumi.RegisterOutputType(EncryptionKeyDetailsResponseOutput{})
	pulumi.RegisterOutputType(EncryptionKeyDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(IPRulesOutput{})
	pulumi.RegisterOutputType(IPRulesArrayOutput{})
	pulumi.RegisterOutputType(IPRulesResponseOutput{})
	pulumi.RegisterOutputType(IPRulesResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(RoleAssignmentDetailResponseOutput{})
	pulumi.RegisterOutputType(RoleAssignmentDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseArrayOutput{})
}
