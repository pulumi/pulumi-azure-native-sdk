// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CapacityReservationGroupInstanceViewResponse struct {
	// List of instance view of the capacity reservations under the capacity reservation group.
	CapacityReservations []CapacityReservationInstanceViewWithNameResponse `pulumi:"capacityReservations"`
}

type CapacityReservationGroupInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationGroupInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupInstanceViewResponse)(nil)).Elem()
}

func (o CapacityReservationGroupInstanceViewResponseOutput) ToCapacityReservationGroupInstanceViewResponseOutput() CapacityReservationGroupInstanceViewResponseOutput {
	return o
}

func (o CapacityReservationGroupInstanceViewResponseOutput) ToCapacityReservationGroupInstanceViewResponseOutputWithContext(ctx context.Context) CapacityReservationGroupInstanceViewResponseOutput {
	return o
}

// List of instance view of the capacity reservations under the capacity reservation group.
func (o CapacityReservationGroupInstanceViewResponseOutput) CapacityReservations() CapacityReservationInstanceViewWithNameResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationGroupInstanceViewResponse) []CapacityReservationInstanceViewWithNameResponse {
		return v.CapacityReservations
	}).(CapacityReservationInstanceViewWithNameResponseArrayOutput)
}

// The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations.
type CapacityReservationInstanceViewResponse struct {
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilizationResponse `pulumi:"utilizationInfo"`
}

// The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations.
type CapacityReservationInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationInstanceViewResponse)(nil)).Elem()
}

func (o CapacityReservationInstanceViewResponseOutput) ToCapacityReservationInstanceViewResponseOutput() CapacityReservationInstanceViewResponseOutput {
	return o
}

func (o CapacityReservationInstanceViewResponseOutput) ToCapacityReservationInstanceViewResponseOutputWithContext(ctx context.Context) CapacityReservationInstanceViewResponseOutput {
	return o
}

// The resource status information.
func (o CapacityReservationInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// Unutilized capacity of the capacity reservation.
func (o CapacityReservationInstanceViewResponseOutput) UtilizationInfo() CapacityReservationUtilizationResponsePtrOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewResponse) *CapacityReservationUtilizationResponse {
		return v.UtilizationInfo
	}).(CapacityReservationUtilizationResponsePtrOutput)
}

// The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the response to the instance view of a capacity reservation group.
type CapacityReservationInstanceViewWithNameResponse struct {
	// The name of the capacity reservation.
	Name string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilizationResponse `pulumi:"utilizationInfo"`
}

// The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the response to the instance view of a capacity reservation group.
type CapacityReservationInstanceViewWithNameResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationInstanceViewWithNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationInstanceViewWithNameResponse)(nil)).Elem()
}

func (o CapacityReservationInstanceViewWithNameResponseOutput) ToCapacityReservationInstanceViewWithNameResponseOutput() CapacityReservationInstanceViewWithNameResponseOutput {
	return o
}

func (o CapacityReservationInstanceViewWithNameResponseOutput) ToCapacityReservationInstanceViewWithNameResponseOutputWithContext(ctx context.Context) CapacityReservationInstanceViewWithNameResponseOutput {
	return o
}

// The name of the capacity reservation.
func (o CapacityReservationInstanceViewWithNameResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewWithNameResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource status information.
func (o CapacityReservationInstanceViewWithNameResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewWithNameResponse) []InstanceViewStatusResponse {
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// Unutilized capacity of the capacity reservation.
func (o CapacityReservationInstanceViewWithNameResponseOutput) UtilizationInfo() CapacityReservationUtilizationResponsePtrOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewWithNameResponse) *CapacityReservationUtilizationResponse {
		return v.UtilizationInfo
	}).(CapacityReservationUtilizationResponsePtrOutput)
}

type CapacityReservationInstanceViewWithNameResponseArrayOutput struct{ *pulumi.OutputState }

func (CapacityReservationInstanceViewWithNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapacityReservationInstanceViewWithNameResponse)(nil)).Elem()
}

func (o CapacityReservationInstanceViewWithNameResponseArrayOutput) ToCapacityReservationInstanceViewWithNameResponseArrayOutput() CapacityReservationInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o CapacityReservationInstanceViewWithNameResponseArrayOutput) ToCapacityReservationInstanceViewWithNameResponseArrayOutputWithContext(ctx context.Context) CapacityReservationInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o CapacityReservationInstanceViewWithNameResponseArrayOutput) Index(i pulumi.IntInput) CapacityReservationInstanceViewWithNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapacityReservationInstanceViewWithNameResponse {
		return vs[0].([]CapacityReservationInstanceViewWithNameResponse)[vs[1].(int)]
	}).(CapacityReservationInstanceViewWithNameResponseOutput)
}

// Represents the capacity reservation utilization in terms of resources allocated.
type CapacityReservationUtilizationResponse struct {
	// A list of all virtual machines resource ids allocated against the capacity reservation.
	VirtualMachinesAllocated []SubResourceReadOnlyResponse `pulumi:"virtualMachinesAllocated"`
}

// Represents the capacity reservation utilization in terms of resources allocated.
type CapacityReservationUtilizationResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationUtilizationResponse)(nil)).Elem()
}

func (o CapacityReservationUtilizationResponseOutput) ToCapacityReservationUtilizationResponseOutput() CapacityReservationUtilizationResponseOutput {
	return o
}

func (o CapacityReservationUtilizationResponseOutput) ToCapacityReservationUtilizationResponseOutputWithContext(ctx context.Context) CapacityReservationUtilizationResponseOutput {
	return o
}

// A list of all virtual machines resource ids allocated against the capacity reservation.
func (o CapacityReservationUtilizationResponseOutput) VirtualMachinesAllocated() SubResourceReadOnlyResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationUtilizationResponse) []SubResourceReadOnlyResponse {
		return v.VirtualMachinesAllocated
	}).(SubResourceReadOnlyResponseArrayOutput)
}

type CapacityReservationUtilizationResponsePtrOutput struct{ *pulumi.OutputState }

func (CapacityReservationUtilizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservationUtilizationResponse)(nil)).Elem()
}

func (o CapacityReservationUtilizationResponsePtrOutput) ToCapacityReservationUtilizationResponsePtrOutput() CapacityReservationUtilizationResponsePtrOutput {
	return o
}

func (o CapacityReservationUtilizationResponsePtrOutput) ToCapacityReservationUtilizationResponsePtrOutputWithContext(ctx context.Context) CapacityReservationUtilizationResponsePtrOutput {
	return o
}

func (o CapacityReservationUtilizationResponsePtrOutput) Elem() CapacityReservationUtilizationResponseOutput {
	return o.ApplyT(func(v *CapacityReservationUtilizationResponse) CapacityReservationUtilizationResponse {
		if v != nil {
			return *v
		}
		var ret CapacityReservationUtilizationResponse
		return ret
	}).(CapacityReservationUtilizationResponseOutput)
}

// A list of all virtual machines resource ids allocated against the capacity reservation.
func (o CapacityReservationUtilizationResponsePtrOutput) VirtualMachinesAllocated() SubResourceReadOnlyResponseArrayOutput {
	return o.ApplyT(func(v *CapacityReservationUtilizationResponse) []SubResourceReadOnlyResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachinesAllocated
	}).(SubResourceReadOnlyResponseArrayOutput)
}

// Instance view status.
type InstanceViewStatusResponse struct {
	// The status code.
	Code *string `pulumi:"code"`
	// The short localizable label for the status.
	DisplayStatus *string `pulumi:"displayStatus"`
	// The level code.
	Level *string `pulumi:"level"`
	// The detailed status message, including for alerts and error messages.
	Message *string `pulumi:"message"`
	// The time of the status.
	Time *string `pulumi:"time"`
}

// Instance view status.
type InstanceViewStatusResponseOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponseOutput() InstanceViewStatusResponseOutput {
	return o
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponseOutputWithContext(ctx context.Context) InstanceViewStatusResponseOutput {
	return o
}

// The status code.
func (o InstanceViewStatusResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The short localizable label for the status.
func (o InstanceViewStatusResponseOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.DisplayStatus }).(pulumi.StringPtrOutput)
}

// The level code.
func (o InstanceViewStatusResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The detailed status message, including for alerts and error messages.
func (o InstanceViewStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The time of the status.
func (o InstanceViewStatusResponseOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type InstanceViewStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponseArrayOutput) ToInstanceViewStatusResponseArrayOutput() InstanceViewStatusResponseArrayOutput {
	return o
}

func (o InstanceViewStatusResponseArrayOutput) ToInstanceViewStatusResponseArrayOutputWithContext(ctx context.Context) InstanceViewStatusResponseArrayOutput {
	return o
}

func (o InstanceViewStatusResponseArrayOutput) Index(i pulumi.IntInput) InstanceViewStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceViewStatusResponse {
		return vs[0].([]InstanceViewStatusResponse)[vs[1].(int)]
	}).(InstanceViewStatusResponseOutput)
}

// LogAnalytics output properties
type LogAnalyticsOutputResponse struct {
	// Output file Uri path to blob container.
	Output string `pulumi:"output"`
}

// LogAnalytics output properties
type LogAnalyticsOutputResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsOutputResponse)(nil)).Elem()
}

func (o LogAnalyticsOutputResponseOutput) ToLogAnalyticsOutputResponseOutput() LogAnalyticsOutputResponseOutput {
	return o
}

func (o LogAnalyticsOutputResponseOutput) ToLogAnalyticsOutputResponseOutputWithContext(ctx context.Context) LogAnalyticsOutputResponseOutput {
	return o
}

// Output file Uri path to blob container.
func (o LogAnalyticsOutputResponseOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsOutputResponse) string { return v.Output }).(pulumi.StringOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type Sku struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *float64 `pulumi:"capacity"`
	// The sku name.
	Name *string `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuArgs struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity pulumi.Float64PtrInput `pulumi:"capacity"`
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

// Specifies the number of virtual machines in the scale set.
func (o SkuOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Sku) *float64 { return v.Capacity }).(pulumi.Float64PtrOutput)
}

// The sku name.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuResponse struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *float64 `pulumi:"capacity"`
	// The sku name.
	Name *string `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// Specifies the number of virtual machines in the scale set.
func (o SkuResponseOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SkuResponse) *float64 { return v.Capacity }).(pulumi.Float64PtrOutput)
}

// The sku name.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SubResourceReadOnlyResponse struct {
	// Resource Id
	Id string `pulumi:"id"`
}

type SubResourceReadOnlyResponseOutput struct{ *pulumi.OutputState }

func (SubResourceReadOnlyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceReadOnlyResponse)(nil)).Elem()
}

func (o SubResourceReadOnlyResponseOutput) ToSubResourceReadOnlyResponseOutput() SubResourceReadOnlyResponseOutput {
	return o
}

func (o SubResourceReadOnlyResponseOutput) ToSubResourceReadOnlyResponseOutputWithContext(ctx context.Context) SubResourceReadOnlyResponseOutput {
	return o
}

// Resource Id
func (o SubResourceReadOnlyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SubResourceReadOnlyResponse) string { return v.Id }).(pulumi.StringOutput)
}

type SubResourceReadOnlyResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceReadOnlyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceReadOnlyResponse)(nil)).Elem()
}

func (o SubResourceReadOnlyResponseArrayOutput) ToSubResourceReadOnlyResponseArrayOutput() SubResourceReadOnlyResponseArrayOutput {
	return o
}

func (o SubResourceReadOnlyResponseArrayOutput) ToSubResourceReadOnlyResponseArrayOutputWithContext(ctx context.Context) SubResourceReadOnlyResponseArrayOutput {
	return o
}

func (o SubResourceReadOnlyResponseArrayOutput) Index(i pulumi.IntInput) SubResourceReadOnlyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceReadOnlyResponse {
		return vs[0].([]SubResourceReadOnlyResponse)[vs[1].(int)]
	}).(SubResourceReadOnlyResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(CapacityReservationGroupInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationInstanceViewWithNameResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationInstanceViewWithNameResponseArrayOutput{})
	pulumi.RegisterOutputType(CapacityReservationUtilizationResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationUtilizationResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponseOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsOutputResponseOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SubResourceReadOnlyResponseOutput{})
	pulumi.RegisterOutputType(SubResourceReadOnlyResponseArrayOutput{})
}
