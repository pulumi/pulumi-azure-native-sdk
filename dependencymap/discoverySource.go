// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dependencymap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Discovery Source resource
// Azure REST API version: 2025-01-31-preview.
type DiscoverySource struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of Discovery Source resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Source ArmId of Discovery Source resource
	SourceId pulumi.StringOutput `pulumi:"sourceId"`
	// Source type of Discovery Source resource.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDiscoverySource registers a new resource with the given unique name, arguments, and options.
func NewDiscoverySource(ctx *pulumi.Context,
	name string, args *DiscoverySourceArgs, opts ...pulumi.ResourceOption) (*DiscoverySource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MapName == nil {
		return nil, errors.New("invalid value for required argument 'MapName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	if args.SourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:dependencymap/v20250131preview:DiscoverySource"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DiscoverySource
	err := ctx.RegisterResource("azure-native:dependencymap:DiscoverySource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiscoverySource gets an existing DiscoverySource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiscoverySource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiscoverySourceState, opts ...pulumi.ResourceOption) (*DiscoverySource, error) {
	var resource DiscoverySource
	err := ctx.ReadResource("azure-native:dependencymap:DiscoverySource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiscoverySource resources.
type discoverySourceState struct {
}

type DiscoverySourceState struct {
}

func (DiscoverySourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*discoverySourceState)(nil)).Elem()
}

type discoverySourceArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Maps resource name
	MapName string `pulumi:"mapName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Source ArmId of Discovery Source resource
	SourceId string `pulumi:"sourceId"`
	// discovery source resource
	SourceName *string `pulumi:"sourceName"`
	// Source type of Discovery Source resource.
	SourceType string `pulumi:"sourceType"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DiscoverySource resource.
type DiscoverySourceArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Maps resource name
	MapName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Source ArmId of Discovery Source resource
	SourceId pulumi.StringInput
	// discovery source resource
	SourceName pulumi.StringPtrInput
	// Source type of Discovery Source resource.
	SourceType pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (DiscoverySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*discoverySourceArgs)(nil)).Elem()
}

type DiscoverySourceInput interface {
	pulumi.Input

	ToDiscoverySourceOutput() DiscoverySourceOutput
	ToDiscoverySourceOutputWithContext(ctx context.Context) DiscoverySourceOutput
}

func (*DiscoverySource) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoverySource)(nil)).Elem()
}

func (i *DiscoverySource) ToDiscoverySourceOutput() DiscoverySourceOutput {
	return i.ToDiscoverySourceOutputWithContext(context.Background())
}

func (i *DiscoverySource) ToDiscoverySourceOutputWithContext(ctx context.Context) DiscoverySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoverySourceOutput)
}

type DiscoverySourceOutput struct{ *pulumi.OutputState }

func (DiscoverySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiscoverySource)(nil)).Elem()
}

func (o DiscoverySourceOutput) ToDiscoverySourceOutput() DiscoverySourceOutput {
	return o
}

func (o DiscoverySourceOutput) ToDiscoverySourceOutputWithContext(ctx context.Context) DiscoverySourceOutput {
	return o
}

// The Azure API version of the resource.
func (o DiscoverySourceOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o DiscoverySourceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o DiscoverySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of Discovery Source resource.
func (o DiscoverySourceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Source ArmId of Discovery Source resource
func (o DiscoverySourceOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

// Source type of Discovery Source resource.
func (o DiscoverySourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DiscoverySourceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DiscoverySource) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o DiscoverySourceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DiscoverySourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DiscoverySource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DiscoverySourceOutput{})
}
