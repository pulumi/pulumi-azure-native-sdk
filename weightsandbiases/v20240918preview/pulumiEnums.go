// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240918preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned,UserAssigned")
)

func (ManagedServiceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return e.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return ManagedServiceIdentityType(e).ToManagedServiceIdentityTypeOutputWithContext(ctx).ToManagedServiceIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedServiceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedServiceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentityType) *ManagedServiceIdentityType {
		return &v
	}).(ManagedServiceIdentityTypePtrOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedServiceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) Elem() ManagedServiceIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityType) ManagedServiceIdentityType {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityType
		return ret
	}).(ManagedServiceIdentityTypeOutput)
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedServiceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedServiceIdentityTypeInput is an input type that accepts values of the ManagedServiceIdentityType enum
// A concrete instance of `ManagedServiceIdentityTypeInput` can be one of the following:
//
//	ManagedServiceIdentityTypeNone
//	ManagedServiceIdentityTypeSystemAssigned
//	ManagedServiceIdentityTypeUserAssigned
//	ManagedServiceIdentityType_SystemAssigned_UserAssigned
type ManagedServiceIdentityTypeInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput
	ToManagedServiceIdentityTypeOutputWithContext(context.Context) ManagedServiceIdentityTypeOutput
}

var managedServiceIdentityTypePtrType = reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()

type ManagedServiceIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput
	ToManagedServiceIdentityTypePtrOutputWithContext(context.Context) ManagedServiceIdentityTypePtrOutput
}

type managedServiceIdentityTypePtr string

func ManagedServiceIdentityTypePtr(v string) ManagedServiceIdentityTypePtrInput {
	return (*managedServiceIdentityTypePtr)(&v)
}

func (*managedServiceIdentityTypePtr) ElementType() reflect.Type {
	return managedServiceIdentityTypePtrType
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedServiceIdentityTypePtrOutput)
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedServiceIdentityTypePtrOutput)
}

// The region of the instance
type Region string

const (
	// Region: East US
	RegionEastus = Region("eastus")
	// Region: Central US
	RegionCentralus = Region("centralus")
	// Region: West US
	RegionWestus = Region("westus")
	// Region: West Europe
	RegionWesteurope = Region("westeurope")
	// Region: Japan East
	RegionJapaneast = Region("japaneast")
	// Region: Korea Central
	RegionKoreacentral = Region("koreacentral")
)

func (Region) ElementType() reflect.Type {
	return reflect.TypeOf((*Region)(nil)).Elem()
}

func (e Region) ToRegionOutput() RegionOutput {
	return pulumi.ToOutput(e).(RegionOutput)
}

func (e Region) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RegionOutput)
}

func (e Region) ToRegionPtrOutput() RegionPtrOutput {
	return e.ToRegionPtrOutputWithContext(context.Background())
}

func (e Region) ToRegionPtrOutputWithContext(ctx context.Context) RegionPtrOutput {
	return Region(e).ToRegionOutputWithContext(ctx).ToRegionPtrOutputWithContext(ctx)
}

func (e Region) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Region) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Region) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Region) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RegionOutput struct{ *pulumi.OutputState }

func (RegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Region)(nil)).Elem()
}

func (o RegionOutput) ToRegionOutput() RegionOutput {
	return o
}

func (o RegionOutput) ToRegionOutputWithContext(ctx context.Context) RegionOutput {
	return o
}

func (o RegionOutput) ToRegionPtrOutput() RegionPtrOutput {
	return o.ToRegionPtrOutputWithContext(context.Background())
}

func (o RegionOutput) ToRegionPtrOutputWithContext(ctx context.Context) RegionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Region) *Region {
		return &v
	}).(RegionPtrOutput)
}

func (o RegionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RegionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Region) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RegionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RegionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Region) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RegionPtrOutput struct{ *pulumi.OutputState }

func (RegionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Region)(nil)).Elem()
}

func (o RegionPtrOutput) ToRegionPtrOutput() RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) ToRegionPtrOutputWithContext(ctx context.Context) RegionPtrOutput {
	return o
}

func (o RegionPtrOutput) Elem() RegionOutput {
	return o.ApplyT(func(v *Region) Region {
		if v != nil {
			return *v
		}
		var ret Region
		return ret
	}).(RegionOutput)
}

func (o RegionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RegionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Region) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RegionInput is an input type that accepts values of the Region enum
// A concrete instance of `RegionInput` can be one of the following:
//
//	RegionEastus
//	RegionCentralus
//	RegionWestus
//	RegionWesteurope
//	RegionJapaneast
//	RegionKoreacentral
type RegionInput interface {
	pulumi.Input

	ToRegionOutput() RegionOutput
	ToRegionOutputWithContext(context.Context) RegionOutput
}

var regionPtrType = reflect.TypeOf((**Region)(nil)).Elem()

type RegionPtrInput interface {
	pulumi.Input

	ToRegionPtrOutput() RegionPtrOutput
	ToRegionPtrOutputWithContext(context.Context) RegionPtrOutput
}

type regionPtr string

func RegionPtr(v string) RegionPtrInput {
	return (*regionPtr)(&v)
}

func (*regionPtr) ElementType() reflect.Type {
	return regionPtrType
}

func (in *regionPtr) ToRegionPtrOutput() RegionPtrOutput {
	return pulumi.ToOutput(in).(RegionPtrOutput)
}

func (in *regionPtr) ToRegionPtrOutputWithContext(ctx context.Context) RegionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RegionPtrOutput)
}

// State of the Single Sign On for the resource
type SingleSignOnStates string

const (
	// Initial state of the SSO resource
	SingleSignOnStatesInitial = SingleSignOnStates("Initial")
	// State of the SSO resource when it is enabled
	SingleSignOnStatesEnable = SingleSignOnStates("Enable")
	// State of the SSO resource when it is disabled
	SingleSignOnStatesDisable = SingleSignOnStates("Disable")
)

func (SingleSignOnStates) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleSignOnStates)(nil)).Elem()
}

func (e SingleSignOnStates) ToSingleSignOnStatesOutput() SingleSignOnStatesOutput {
	return pulumi.ToOutput(e).(SingleSignOnStatesOutput)
}

func (e SingleSignOnStates) ToSingleSignOnStatesOutputWithContext(ctx context.Context) SingleSignOnStatesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SingleSignOnStatesOutput)
}

func (e SingleSignOnStates) ToSingleSignOnStatesPtrOutput() SingleSignOnStatesPtrOutput {
	return e.ToSingleSignOnStatesPtrOutputWithContext(context.Background())
}

func (e SingleSignOnStates) ToSingleSignOnStatesPtrOutputWithContext(ctx context.Context) SingleSignOnStatesPtrOutput {
	return SingleSignOnStates(e).ToSingleSignOnStatesOutputWithContext(ctx).ToSingleSignOnStatesPtrOutputWithContext(ctx)
}

func (e SingleSignOnStates) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SingleSignOnStates) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SingleSignOnStates) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SingleSignOnStates) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SingleSignOnStatesOutput struct{ *pulumi.OutputState }

func (SingleSignOnStatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleSignOnStates)(nil)).Elem()
}

func (o SingleSignOnStatesOutput) ToSingleSignOnStatesOutput() SingleSignOnStatesOutput {
	return o
}

func (o SingleSignOnStatesOutput) ToSingleSignOnStatesOutputWithContext(ctx context.Context) SingleSignOnStatesOutput {
	return o
}

func (o SingleSignOnStatesOutput) ToSingleSignOnStatesPtrOutput() SingleSignOnStatesPtrOutput {
	return o.ToSingleSignOnStatesPtrOutputWithContext(context.Background())
}

func (o SingleSignOnStatesOutput) ToSingleSignOnStatesPtrOutputWithContext(ctx context.Context) SingleSignOnStatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleSignOnStates) *SingleSignOnStates {
		return &v
	}).(SingleSignOnStatesPtrOutput)
}

func (o SingleSignOnStatesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SingleSignOnStatesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SingleSignOnStates) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SingleSignOnStatesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SingleSignOnStatesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SingleSignOnStates) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SingleSignOnStatesPtrOutput struct{ *pulumi.OutputState }

func (SingleSignOnStatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleSignOnStates)(nil)).Elem()
}

func (o SingleSignOnStatesPtrOutput) ToSingleSignOnStatesPtrOutput() SingleSignOnStatesPtrOutput {
	return o
}

func (o SingleSignOnStatesPtrOutput) ToSingleSignOnStatesPtrOutputWithContext(ctx context.Context) SingleSignOnStatesPtrOutput {
	return o
}

func (o SingleSignOnStatesPtrOutput) Elem() SingleSignOnStatesOutput {
	return o.ApplyT(func(v *SingleSignOnStates) SingleSignOnStates {
		if v != nil {
			return *v
		}
		var ret SingleSignOnStates
		return ret
	}).(SingleSignOnStatesOutput)
}

func (o SingleSignOnStatesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SingleSignOnStatesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SingleSignOnStates) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SingleSignOnStatesInput is an input type that accepts values of the SingleSignOnStates enum
// A concrete instance of `SingleSignOnStatesInput` can be one of the following:
//
//	SingleSignOnStatesInitial
//	SingleSignOnStatesEnable
//	SingleSignOnStatesDisable
type SingleSignOnStatesInput interface {
	pulumi.Input

	ToSingleSignOnStatesOutput() SingleSignOnStatesOutput
	ToSingleSignOnStatesOutputWithContext(context.Context) SingleSignOnStatesOutput
}

var singleSignOnStatesPtrType = reflect.TypeOf((**SingleSignOnStates)(nil)).Elem()

type SingleSignOnStatesPtrInput interface {
	pulumi.Input

	ToSingleSignOnStatesPtrOutput() SingleSignOnStatesPtrOutput
	ToSingleSignOnStatesPtrOutputWithContext(context.Context) SingleSignOnStatesPtrOutput
}

type singleSignOnStatesPtr string

func SingleSignOnStatesPtr(v string) SingleSignOnStatesPtrInput {
	return (*singleSignOnStatesPtr)(&v)
}

func (*singleSignOnStatesPtr) ElementType() reflect.Type {
	return singleSignOnStatesPtrType
}

func (in *singleSignOnStatesPtr) ToSingleSignOnStatesPtrOutput() SingleSignOnStatesPtrOutput {
	return pulumi.ToOutput(in).(SingleSignOnStatesPtrOutput)
}

func (in *singleSignOnStatesPtr) ToSingleSignOnStatesPtrOutputWithContext(ctx context.Context) SingleSignOnStatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SingleSignOnStatesPtrOutput)
}

// Type of Single Sign-On mechanism being used
type SingleSignOnType string

const (
	// Security Assertion Markup Language (SAML) based Single Sign-On
	SingleSignOnTypeSaml = SingleSignOnType("Saml")
	// OpenID Connect based Single Sign-On.
	SingleSignOnTypeOpenId = SingleSignOnType("OpenId")
)

func (SingleSignOnType) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleSignOnType)(nil)).Elem()
}

func (e SingleSignOnType) ToSingleSignOnTypeOutput() SingleSignOnTypeOutput {
	return pulumi.ToOutput(e).(SingleSignOnTypeOutput)
}

func (e SingleSignOnType) ToSingleSignOnTypeOutputWithContext(ctx context.Context) SingleSignOnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SingleSignOnTypeOutput)
}

func (e SingleSignOnType) ToSingleSignOnTypePtrOutput() SingleSignOnTypePtrOutput {
	return e.ToSingleSignOnTypePtrOutputWithContext(context.Background())
}

func (e SingleSignOnType) ToSingleSignOnTypePtrOutputWithContext(ctx context.Context) SingleSignOnTypePtrOutput {
	return SingleSignOnType(e).ToSingleSignOnTypeOutputWithContext(ctx).ToSingleSignOnTypePtrOutputWithContext(ctx)
}

func (e SingleSignOnType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SingleSignOnType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SingleSignOnType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SingleSignOnType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SingleSignOnTypeOutput struct{ *pulumi.OutputState }

func (SingleSignOnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleSignOnType)(nil)).Elem()
}

func (o SingleSignOnTypeOutput) ToSingleSignOnTypeOutput() SingleSignOnTypeOutput {
	return o
}

func (o SingleSignOnTypeOutput) ToSingleSignOnTypeOutputWithContext(ctx context.Context) SingleSignOnTypeOutput {
	return o
}

func (o SingleSignOnTypeOutput) ToSingleSignOnTypePtrOutput() SingleSignOnTypePtrOutput {
	return o.ToSingleSignOnTypePtrOutputWithContext(context.Background())
}

func (o SingleSignOnTypeOutput) ToSingleSignOnTypePtrOutputWithContext(ctx context.Context) SingleSignOnTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleSignOnType) *SingleSignOnType {
		return &v
	}).(SingleSignOnTypePtrOutput)
}

func (o SingleSignOnTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SingleSignOnTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SingleSignOnType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SingleSignOnTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SingleSignOnTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SingleSignOnType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SingleSignOnTypePtrOutput struct{ *pulumi.OutputState }

func (SingleSignOnTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleSignOnType)(nil)).Elem()
}

func (o SingleSignOnTypePtrOutput) ToSingleSignOnTypePtrOutput() SingleSignOnTypePtrOutput {
	return o
}

func (o SingleSignOnTypePtrOutput) ToSingleSignOnTypePtrOutputWithContext(ctx context.Context) SingleSignOnTypePtrOutput {
	return o
}

func (o SingleSignOnTypePtrOutput) Elem() SingleSignOnTypeOutput {
	return o.ApplyT(func(v *SingleSignOnType) SingleSignOnType {
		if v != nil {
			return *v
		}
		var ret SingleSignOnType
		return ret
	}).(SingleSignOnTypeOutput)
}

func (o SingleSignOnTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SingleSignOnTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SingleSignOnType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SingleSignOnTypeInput is an input type that accepts values of the SingleSignOnType enum
// A concrete instance of `SingleSignOnTypeInput` can be one of the following:
//
//	SingleSignOnTypeSaml
//	SingleSignOnTypeOpenId
type SingleSignOnTypeInput interface {
	pulumi.Input

	ToSingleSignOnTypeOutput() SingleSignOnTypeOutput
	ToSingleSignOnTypeOutputWithContext(context.Context) SingleSignOnTypeOutput
}

var singleSignOnTypePtrType = reflect.TypeOf((**SingleSignOnType)(nil)).Elem()

type SingleSignOnTypePtrInput interface {
	pulumi.Input

	ToSingleSignOnTypePtrOutput() SingleSignOnTypePtrOutput
	ToSingleSignOnTypePtrOutputWithContext(context.Context) SingleSignOnTypePtrOutput
}

type singleSignOnTypePtr string

func SingleSignOnTypePtr(v string) SingleSignOnTypePtrInput {
	return (*singleSignOnTypePtr)(&v)
}

func (*singleSignOnTypePtr) ElementType() reflect.Type {
	return singleSignOnTypePtrType
}

func (in *singleSignOnTypePtr) ToSingleSignOnTypePtrOutput() SingleSignOnTypePtrOutput {
	return pulumi.ToOutput(in).(SingleSignOnTypePtrOutput)
}

func (in *singleSignOnTypePtr) ToSingleSignOnTypePtrOutputWithContext(ctx context.Context) SingleSignOnTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SingleSignOnTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedServiceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(RegionOutput{})
	pulumi.RegisterOutputType(RegionPtrOutput{})
	pulumi.RegisterOutputType(SingleSignOnStatesOutput{})
	pulumi.RegisterOutputType(SingleSignOnStatesPtrOutput{})
	pulumi.RegisterOutputType(SingleSignOnTypeOutput{})
	pulumi.RegisterOutputType(SingleSignOnTypePtrOutput{})
}
