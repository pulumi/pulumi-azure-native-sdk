// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// The Data Lake data destination for Analytics Connector.
type AnalyticsConnectorDataLakeDataDestination struct {
	// The name for the Data Lake.
	DataLakeName string `pulumi:"dataLakeName"`
	// Name of data destination.
	Name *string `pulumi:"name"`
	// Type of data destination.
	// Expected value is 'datalake'.
	Type string `pulumi:"type"`
}

// AnalyticsConnectorDataLakeDataDestinationInput is an input type that accepts AnalyticsConnectorDataLakeDataDestinationArgs and AnalyticsConnectorDataLakeDataDestinationOutput values.
// You can construct a concrete instance of `AnalyticsConnectorDataLakeDataDestinationInput` via:
//
//	AnalyticsConnectorDataLakeDataDestinationArgs{...}
type AnalyticsConnectorDataLakeDataDestinationInput interface {
	pulumi.Input

	ToAnalyticsConnectorDataLakeDataDestinationOutput() AnalyticsConnectorDataLakeDataDestinationOutput
	ToAnalyticsConnectorDataLakeDataDestinationOutputWithContext(context.Context) AnalyticsConnectorDataLakeDataDestinationOutput
}

// The Data Lake data destination for Analytics Connector.
type AnalyticsConnectorDataLakeDataDestinationArgs struct {
	// The name for the Data Lake.
	DataLakeName pulumi.StringInput `pulumi:"dataLakeName"`
	// Name of data destination.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of data destination.
	// Expected value is 'datalake'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AnalyticsConnectorDataLakeDataDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorDataLakeDataDestination)(nil)).Elem()
}

func (i AnalyticsConnectorDataLakeDataDestinationArgs) ToAnalyticsConnectorDataLakeDataDestinationOutput() AnalyticsConnectorDataLakeDataDestinationOutput {
	return i.ToAnalyticsConnectorDataLakeDataDestinationOutputWithContext(context.Background())
}

func (i AnalyticsConnectorDataLakeDataDestinationArgs) ToAnalyticsConnectorDataLakeDataDestinationOutputWithContext(ctx context.Context) AnalyticsConnectorDataLakeDataDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConnectorDataLakeDataDestinationOutput)
}

func (i AnalyticsConnectorDataLakeDataDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorDataLakeDataDestination] {
	return pulumix.Output[AnalyticsConnectorDataLakeDataDestination]{
		OutputState: i.ToAnalyticsConnectorDataLakeDataDestinationOutputWithContext(ctx).OutputState,
	}
}

// The Data Lake data destination for Analytics Connector.
type AnalyticsConnectorDataLakeDataDestinationOutput struct{ *pulumi.OutputState }

func (AnalyticsConnectorDataLakeDataDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorDataLakeDataDestination)(nil)).Elem()
}

func (o AnalyticsConnectorDataLakeDataDestinationOutput) ToAnalyticsConnectorDataLakeDataDestinationOutput() AnalyticsConnectorDataLakeDataDestinationOutput {
	return o
}

func (o AnalyticsConnectorDataLakeDataDestinationOutput) ToAnalyticsConnectorDataLakeDataDestinationOutputWithContext(ctx context.Context) AnalyticsConnectorDataLakeDataDestinationOutput {
	return o
}

func (o AnalyticsConnectorDataLakeDataDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorDataLakeDataDestination] {
	return pulumix.Output[AnalyticsConnectorDataLakeDataDestination]{
		OutputState: o.OutputState,
	}
}

// The name for the Data Lake.
func (o AnalyticsConnectorDataLakeDataDestinationOutput) DataLakeName() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorDataLakeDataDestination) string { return v.DataLakeName }).(pulumi.StringOutput)
}

// Name of data destination.
func (o AnalyticsConnectorDataLakeDataDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsConnectorDataLakeDataDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of data destination.
// Expected value is 'datalake'.
func (o AnalyticsConnectorDataLakeDataDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorDataLakeDataDestination) string { return v.Type }).(pulumi.StringOutput)
}

// The Data Lake data destination for Analytics Connector.
type AnalyticsConnectorDataLakeDataDestinationResponse struct {
	// The name for the Data Lake.
	DataLakeName string `pulumi:"dataLakeName"`
	// Name of data destination.
	Name *string `pulumi:"name"`
	// Type of data destination.
	// Expected value is 'datalake'.
	Type string `pulumi:"type"`
}

// The Data Lake data destination for Analytics Connector.
type AnalyticsConnectorDataLakeDataDestinationResponseOutput struct{ *pulumi.OutputState }

func (AnalyticsConnectorDataLakeDataDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorDataLakeDataDestinationResponse)(nil)).Elem()
}

func (o AnalyticsConnectorDataLakeDataDestinationResponseOutput) ToAnalyticsConnectorDataLakeDataDestinationResponseOutput() AnalyticsConnectorDataLakeDataDestinationResponseOutput {
	return o
}

func (o AnalyticsConnectorDataLakeDataDestinationResponseOutput) ToAnalyticsConnectorDataLakeDataDestinationResponseOutputWithContext(ctx context.Context) AnalyticsConnectorDataLakeDataDestinationResponseOutput {
	return o
}

func (o AnalyticsConnectorDataLakeDataDestinationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorDataLakeDataDestinationResponse] {
	return pulumix.Output[AnalyticsConnectorDataLakeDataDestinationResponse]{
		OutputState: o.OutputState,
	}
}

// The name for the Data Lake.
func (o AnalyticsConnectorDataLakeDataDestinationResponseOutput) DataLakeName() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorDataLakeDataDestinationResponse) string { return v.DataLakeName }).(pulumi.StringOutput)
}

// Name of data destination.
func (o AnalyticsConnectorDataLakeDataDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsConnectorDataLakeDataDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of data destination.
// Expected value is 'datalake'.
func (o AnalyticsConnectorDataLakeDataDestinationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorDataLakeDataDestinationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The FHIR service data source for Analytics Connector.
type AnalyticsConnectorFhirServiceDataSource struct {
	// The kind of FHIR Service.
	Kind string `pulumi:"kind"`
	// Type of data source.
	// Expected value is 'fhirservice'.
	Type string `pulumi:"type"`
	// The URL of FHIR service.
	Url string `pulumi:"url"`
}

// AnalyticsConnectorFhirServiceDataSourceInput is an input type that accepts AnalyticsConnectorFhirServiceDataSourceArgs and AnalyticsConnectorFhirServiceDataSourceOutput values.
// You can construct a concrete instance of `AnalyticsConnectorFhirServiceDataSourceInput` via:
//
//	AnalyticsConnectorFhirServiceDataSourceArgs{...}
type AnalyticsConnectorFhirServiceDataSourceInput interface {
	pulumi.Input

	ToAnalyticsConnectorFhirServiceDataSourceOutput() AnalyticsConnectorFhirServiceDataSourceOutput
	ToAnalyticsConnectorFhirServiceDataSourceOutputWithContext(context.Context) AnalyticsConnectorFhirServiceDataSourceOutput
}

// The FHIR service data source for Analytics Connector.
type AnalyticsConnectorFhirServiceDataSourceArgs struct {
	// The kind of FHIR Service.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Type of data source.
	// Expected value is 'fhirservice'.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of FHIR service.
	Url pulumi.StringInput `pulumi:"url"`
}

func (AnalyticsConnectorFhirServiceDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorFhirServiceDataSource)(nil)).Elem()
}

func (i AnalyticsConnectorFhirServiceDataSourceArgs) ToAnalyticsConnectorFhirServiceDataSourceOutput() AnalyticsConnectorFhirServiceDataSourceOutput {
	return i.ToAnalyticsConnectorFhirServiceDataSourceOutputWithContext(context.Background())
}

func (i AnalyticsConnectorFhirServiceDataSourceArgs) ToAnalyticsConnectorFhirServiceDataSourceOutputWithContext(ctx context.Context) AnalyticsConnectorFhirServiceDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConnectorFhirServiceDataSourceOutput)
}

func (i AnalyticsConnectorFhirServiceDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorFhirServiceDataSource] {
	return pulumix.Output[AnalyticsConnectorFhirServiceDataSource]{
		OutputState: i.ToAnalyticsConnectorFhirServiceDataSourceOutputWithContext(ctx).OutputState,
	}
}

// The FHIR service data source for Analytics Connector.
type AnalyticsConnectorFhirServiceDataSourceOutput struct{ *pulumi.OutputState }

func (AnalyticsConnectorFhirServiceDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorFhirServiceDataSource)(nil)).Elem()
}

func (o AnalyticsConnectorFhirServiceDataSourceOutput) ToAnalyticsConnectorFhirServiceDataSourceOutput() AnalyticsConnectorFhirServiceDataSourceOutput {
	return o
}

func (o AnalyticsConnectorFhirServiceDataSourceOutput) ToAnalyticsConnectorFhirServiceDataSourceOutputWithContext(ctx context.Context) AnalyticsConnectorFhirServiceDataSourceOutput {
	return o
}

func (o AnalyticsConnectorFhirServiceDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorFhirServiceDataSource] {
	return pulumix.Output[AnalyticsConnectorFhirServiceDataSource]{
		OutputState: o.OutputState,
	}
}

// The kind of FHIR Service.
func (o AnalyticsConnectorFhirServiceDataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirServiceDataSource) string { return v.Kind }).(pulumi.StringOutput)
}

// Type of data source.
// Expected value is 'fhirservice'.
func (o AnalyticsConnectorFhirServiceDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirServiceDataSource) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of FHIR service.
func (o AnalyticsConnectorFhirServiceDataSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirServiceDataSource) string { return v.Url }).(pulumi.StringOutput)
}

// The FHIR service data source for Analytics Connector.
type AnalyticsConnectorFhirServiceDataSourceResponse struct {
	// The kind of FHIR Service.
	Kind string `pulumi:"kind"`
	// Type of data source.
	// Expected value is 'fhirservice'.
	Type string `pulumi:"type"`
	// The URL of FHIR service.
	Url string `pulumi:"url"`
}

// The FHIR service data source for Analytics Connector.
type AnalyticsConnectorFhirServiceDataSourceResponseOutput struct{ *pulumi.OutputState }

func (AnalyticsConnectorFhirServiceDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorFhirServiceDataSourceResponse)(nil)).Elem()
}

func (o AnalyticsConnectorFhirServiceDataSourceResponseOutput) ToAnalyticsConnectorFhirServiceDataSourceResponseOutput() AnalyticsConnectorFhirServiceDataSourceResponseOutput {
	return o
}

func (o AnalyticsConnectorFhirServiceDataSourceResponseOutput) ToAnalyticsConnectorFhirServiceDataSourceResponseOutputWithContext(ctx context.Context) AnalyticsConnectorFhirServiceDataSourceResponseOutput {
	return o
}

func (o AnalyticsConnectorFhirServiceDataSourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorFhirServiceDataSourceResponse] {
	return pulumix.Output[AnalyticsConnectorFhirServiceDataSourceResponse]{
		OutputState: o.OutputState,
	}
}

// The kind of FHIR Service.
func (o AnalyticsConnectorFhirServiceDataSourceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirServiceDataSourceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Type of data source.
// Expected value is 'fhirservice'.
func (o AnalyticsConnectorFhirServiceDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirServiceDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of FHIR service.
func (o AnalyticsConnectorFhirServiceDataSourceResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirServiceDataSourceResponse) string { return v.Url }).(pulumi.StringOutput)
}

// FHIR Service data mapping configuration for Analytics Connector.
type AnalyticsConnectorFhirToParquetMapping struct {
	// Artifact reference for extension schema.
	ExtensionSchemaReference *string `pulumi:"extensionSchemaReference"`
	// Artifact reference for filter configurations.
	FilterConfigurationReference *string `pulumi:"filterConfigurationReference"`
	// Type of data mapping.
	// Expected value is 'fhirToParquet'.
	Type string `pulumi:"type"`
}

// AnalyticsConnectorFhirToParquetMappingInput is an input type that accepts AnalyticsConnectorFhirToParquetMappingArgs and AnalyticsConnectorFhirToParquetMappingOutput values.
// You can construct a concrete instance of `AnalyticsConnectorFhirToParquetMappingInput` via:
//
//	AnalyticsConnectorFhirToParquetMappingArgs{...}
type AnalyticsConnectorFhirToParquetMappingInput interface {
	pulumi.Input

	ToAnalyticsConnectorFhirToParquetMappingOutput() AnalyticsConnectorFhirToParquetMappingOutput
	ToAnalyticsConnectorFhirToParquetMappingOutputWithContext(context.Context) AnalyticsConnectorFhirToParquetMappingOutput
}

// FHIR Service data mapping configuration for Analytics Connector.
type AnalyticsConnectorFhirToParquetMappingArgs struct {
	// Artifact reference for extension schema.
	ExtensionSchemaReference pulumi.StringPtrInput `pulumi:"extensionSchemaReference"`
	// Artifact reference for filter configurations.
	FilterConfigurationReference pulumi.StringPtrInput `pulumi:"filterConfigurationReference"`
	// Type of data mapping.
	// Expected value is 'fhirToParquet'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AnalyticsConnectorFhirToParquetMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorFhirToParquetMapping)(nil)).Elem()
}

func (i AnalyticsConnectorFhirToParquetMappingArgs) ToAnalyticsConnectorFhirToParquetMappingOutput() AnalyticsConnectorFhirToParquetMappingOutput {
	return i.ToAnalyticsConnectorFhirToParquetMappingOutputWithContext(context.Background())
}

func (i AnalyticsConnectorFhirToParquetMappingArgs) ToAnalyticsConnectorFhirToParquetMappingOutputWithContext(ctx context.Context) AnalyticsConnectorFhirToParquetMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConnectorFhirToParquetMappingOutput)
}

func (i AnalyticsConnectorFhirToParquetMappingArgs) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorFhirToParquetMapping] {
	return pulumix.Output[AnalyticsConnectorFhirToParquetMapping]{
		OutputState: i.ToAnalyticsConnectorFhirToParquetMappingOutputWithContext(ctx).OutputState,
	}
}

// FHIR Service data mapping configuration for Analytics Connector.
type AnalyticsConnectorFhirToParquetMappingOutput struct{ *pulumi.OutputState }

func (AnalyticsConnectorFhirToParquetMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorFhirToParquetMapping)(nil)).Elem()
}

func (o AnalyticsConnectorFhirToParquetMappingOutput) ToAnalyticsConnectorFhirToParquetMappingOutput() AnalyticsConnectorFhirToParquetMappingOutput {
	return o
}

func (o AnalyticsConnectorFhirToParquetMappingOutput) ToAnalyticsConnectorFhirToParquetMappingOutputWithContext(ctx context.Context) AnalyticsConnectorFhirToParquetMappingOutput {
	return o
}

func (o AnalyticsConnectorFhirToParquetMappingOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorFhirToParquetMapping] {
	return pulumix.Output[AnalyticsConnectorFhirToParquetMapping]{
		OutputState: o.OutputState,
	}
}

// Artifact reference for extension schema.
func (o AnalyticsConnectorFhirToParquetMappingOutput) ExtensionSchemaReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirToParquetMapping) *string { return v.ExtensionSchemaReference }).(pulumi.StringPtrOutput)
}

// Artifact reference for filter configurations.
func (o AnalyticsConnectorFhirToParquetMappingOutput) FilterConfigurationReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirToParquetMapping) *string { return v.FilterConfigurationReference }).(pulumi.StringPtrOutput)
}

// Type of data mapping.
// Expected value is 'fhirToParquet'.
func (o AnalyticsConnectorFhirToParquetMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirToParquetMapping) string { return v.Type }).(pulumi.StringOutput)
}

// FHIR Service data mapping configuration for Analytics Connector.
type AnalyticsConnectorFhirToParquetMappingResponse struct {
	// Artifact reference for extension schema.
	ExtensionSchemaReference *string `pulumi:"extensionSchemaReference"`
	// Artifact reference for filter configurations.
	FilterConfigurationReference *string `pulumi:"filterConfigurationReference"`
	// Type of data mapping.
	// Expected value is 'fhirToParquet'.
	Type string `pulumi:"type"`
}

// FHIR Service data mapping configuration for Analytics Connector.
type AnalyticsConnectorFhirToParquetMappingResponseOutput struct{ *pulumi.OutputState }

func (AnalyticsConnectorFhirToParquetMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsConnectorFhirToParquetMappingResponse)(nil)).Elem()
}

func (o AnalyticsConnectorFhirToParquetMappingResponseOutput) ToAnalyticsConnectorFhirToParquetMappingResponseOutput() AnalyticsConnectorFhirToParquetMappingResponseOutput {
	return o
}

func (o AnalyticsConnectorFhirToParquetMappingResponseOutput) ToAnalyticsConnectorFhirToParquetMappingResponseOutputWithContext(ctx context.Context) AnalyticsConnectorFhirToParquetMappingResponseOutput {
	return o
}

func (o AnalyticsConnectorFhirToParquetMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AnalyticsConnectorFhirToParquetMappingResponse] {
	return pulumix.Output[AnalyticsConnectorFhirToParquetMappingResponse]{
		OutputState: o.OutputState,
	}
}

// Artifact reference for extension schema.
func (o AnalyticsConnectorFhirToParquetMappingResponseOutput) ExtensionSchemaReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirToParquetMappingResponse) *string { return v.ExtensionSchemaReference }).(pulumi.StringPtrOutput)
}

// Artifact reference for filter configurations.
func (o AnalyticsConnectorFhirToParquetMappingResponseOutput) FilterConfigurationReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirToParquetMappingResponse) *string { return v.FilterConfigurationReference }).(pulumi.StringPtrOutput)
}

// Type of data mapping.
// Expected value is 'fhirToParquet'.
func (o AnalyticsConnectorFhirToParquetMappingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsConnectorFhirToParquetMappingResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Setting indicating whether the service has a managed identity associated with it.
type ServiceManagedIdentityIdentity struct {
	// Type of identity being specified, currently SystemAssigned and None are allowed.
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ServiceManagedIdentityIdentityInput is an input type that accepts ServiceManagedIdentityIdentityArgs and ServiceManagedIdentityIdentityOutput values.
// You can construct a concrete instance of `ServiceManagedIdentityIdentityInput` via:
//
//	ServiceManagedIdentityIdentityArgs{...}
type ServiceManagedIdentityIdentityInput interface {
	pulumi.Input

	ToServiceManagedIdentityIdentityOutput() ServiceManagedIdentityIdentityOutput
	ToServiceManagedIdentityIdentityOutputWithContext(context.Context) ServiceManagedIdentityIdentityOutput
}

// Setting indicating whether the service has a managed identity associated with it.
type ServiceManagedIdentityIdentityArgs struct {
	// Type of identity being specified, currently SystemAssigned and None are allowed.
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ServiceManagedIdentityIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedIdentityIdentity)(nil)).Elem()
}

func (i ServiceManagedIdentityIdentityArgs) ToServiceManagedIdentityIdentityOutput() ServiceManagedIdentityIdentityOutput {
	return i.ToServiceManagedIdentityIdentityOutputWithContext(context.Background())
}

func (i ServiceManagedIdentityIdentityArgs) ToServiceManagedIdentityIdentityOutputWithContext(ctx context.Context) ServiceManagedIdentityIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedIdentityIdentityOutput)
}

func (i ServiceManagedIdentityIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceManagedIdentityIdentity] {
	return pulumix.Output[ServiceManagedIdentityIdentity]{
		OutputState: i.ToServiceManagedIdentityIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceManagedIdentityIdentityArgs) ToServiceManagedIdentityIdentityPtrOutput() ServiceManagedIdentityIdentityPtrOutput {
	return i.ToServiceManagedIdentityIdentityPtrOutputWithContext(context.Background())
}

func (i ServiceManagedIdentityIdentityArgs) ToServiceManagedIdentityIdentityPtrOutputWithContext(ctx context.Context) ServiceManagedIdentityIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedIdentityIdentityOutput).ToServiceManagedIdentityIdentityPtrOutputWithContext(ctx)
}

// ServiceManagedIdentityIdentityPtrInput is an input type that accepts ServiceManagedIdentityIdentityArgs, ServiceManagedIdentityIdentityPtr and ServiceManagedIdentityIdentityPtrOutput values.
// You can construct a concrete instance of `ServiceManagedIdentityIdentityPtrInput` via:
//
//	        ServiceManagedIdentityIdentityArgs{...}
//
//	or:
//
//	        nil
type ServiceManagedIdentityIdentityPtrInput interface {
	pulumi.Input

	ToServiceManagedIdentityIdentityPtrOutput() ServiceManagedIdentityIdentityPtrOutput
	ToServiceManagedIdentityIdentityPtrOutputWithContext(context.Context) ServiceManagedIdentityIdentityPtrOutput
}

type serviceManagedIdentityIdentityPtrType ServiceManagedIdentityIdentityArgs

func ServiceManagedIdentityIdentityPtr(v *ServiceManagedIdentityIdentityArgs) ServiceManagedIdentityIdentityPtrInput {
	return (*serviceManagedIdentityIdentityPtrType)(v)
}

func (*serviceManagedIdentityIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedIdentityIdentity)(nil)).Elem()
}

func (i *serviceManagedIdentityIdentityPtrType) ToServiceManagedIdentityIdentityPtrOutput() ServiceManagedIdentityIdentityPtrOutput {
	return i.ToServiceManagedIdentityIdentityPtrOutputWithContext(context.Background())
}

func (i *serviceManagedIdentityIdentityPtrType) ToServiceManagedIdentityIdentityPtrOutputWithContext(ctx context.Context) ServiceManagedIdentityIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedIdentityIdentityPtrOutput)
}

func (i *serviceManagedIdentityIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceManagedIdentityIdentity] {
	return pulumix.Output[*ServiceManagedIdentityIdentity]{
		OutputState: i.ToServiceManagedIdentityIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Setting indicating whether the service has a managed identity associated with it.
type ServiceManagedIdentityIdentityOutput struct{ *pulumi.OutputState }

func (ServiceManagedIdentityIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedIdentityIdentity)(nil)).Elem()
}

func (o ServiceManagedIdentityIdentityOutput) ToServiceManagedIdentityIdentityOutput() ServiceManagedIdentityIdentityOutput {
	return o
}

func (o ServiceManagedIdentityIdentityOutput) ToServiceManagedIdentityIdentityOutputWithContext(ctx context.Context) ServiceManagedIdentityIdentityOutput {
	return o
}

func (o ServiceManagedIdentityIdentityOutput) ToServiceManagedIdentityIdentityPtrOutput() ServiceManagedIdentityIdentityPtrOutput {
	return o.ToServiceManagedIdentityIdentityPtrOutputWithContext(context.Background())
}

func (o ServiceManagedIdentityIdentityOutput) ToServiceManagedIdentityIdentityPtrOutputWithContext(ctx context.Context) ServiceManagedIdentityIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceManagedIdentityIdentity) *ServiceManagedIdentityIdentity {
		return &v
	}).(ServiceManagedIdentityIdentityPtrOutput)
}

func (o ServiceManagedIdentityIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceManagedIdentityIdentity] {
	return pulumix.Output[ServiceManagedIdentityIdentity]{
		OutputState: o.OutputState,
	}
}

// Type of identity being specified, currently SystemAssigned and None are allowed.
func (o ServiceManagedIdentityIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceManagedIdentityIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ServiceManagedIdentityIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceManagedIdentityIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ServiceManagedIdentityIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedIdentityIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedIdentityIdentity)(nil)).Elem()
}

func (o ServiceManagedIdentityIdentityPtrOutput) ToServiceManagedIdentityIdentityPtrOutput() ServiceManagedIdentityIdentityPtrOutput {
	return o
}

func (o ServiceManagedIdentityIdentityPtrOutput) ToServiceManagedIdentityIdentityPtrOutputWithContext(ctx context.Context) ServiceManagedIdentityIdentityPtrOutput {
	return o
}

func (o ServiceManagedIdentityIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceManagedIdentityIdentity] {
	return pulumix.Output[*ServiceManagedIdentityIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ServiceManagedIdentityIdentityPtrOutput) Elem() ServiceManagedIdentityIdentityOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityIdentity) ServiceManagedIdentityIdentity {
		if v != nil {
			return *v
		}
		var ret ServiceManagedIdentityIdentity
		return ret
	}).(ServiceManagedIdentityIdentityOutput)
}

// Type of identity being specified, currently SystemAssigned and None are allowed.
func (o ServiceManagedIdentityIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ServiceManagedIdentityIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Setting indicating whether the service has a managed identity associated with it.
type ServiceManagedIdentityResponseIdentity struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of identity being specified, currently SystemAssigned and None are allowed.
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Setting indicating whether the service has a managed identity associated with it.
type ServiceManagedIdentityResponseIdentityOutput struct{ *pulumi.OutputState }

func (ServiceManagedIdentityResponseIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedIdentityResponseIdentity)(nil)).Elem()
}

func (o ServiceManagedIdentityResponseIdentityOutput) ToServiceManagedIdentityResponseIdentityOutput() ServiceManagedIdentityResponseIdentityOutput {
	return o
}

func (o ServiceManagedIdentityResponseIdentityOutput) ToServiceManagedIdentityResponseIdentityOutputWithContext(ctx context.Context) ServiceManagedIdentityResponseIdentityOutput {
	return o
}

func (o ServiceManagedIdentityResponseIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceManagedIdentityResponseIdentity] {
	return pulumix.Output[ServiceManagedIdentityResponseIdentity]{
		OutputState: o.OutputState,
	}
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ServiceManagedIdentityResponseIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceManagedIdentityResponseIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ServiceManagedIdentityResponseIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceManagedIdentityResponseIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of identity being specified, currently SystemAssigned and None are allowed.
func (o ServiceManagedIdentityResponseIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceManagedIdentityResponseIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ServiceManagedIdentityResponseIdentityOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ServiceManagedIdentityResponseIdentity) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ServiceManagedIdentityResponseIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedIdentityResponseIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedIdentityResponseIdentity)(nil)).Elem()
}

func (o ServiceManagedIdentityResponseIdentityPtrOutput) ToServiceManagedIdentityResponseIdentityPtrOutput() ServiceManagedIdentityResponseIdentityPtrOutput {
	return o
}

func (o ServiceManagedIdentityResponseIdentityPtrOutput) ToServiceManagedIdentityResponseIdentityPtrOutputWithContext(ctx context.Context) ServiceManagedIdentityResponseIdentityPtrOutput {
	return o
}

func (o ServiceManagedIdentityResponseIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceManagedIdentityResponseIdentity] {
	return pulumix.Output[*ServiceManagedIdentityResponseIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ServiceManagedIdentityResponseIdentityPtrOutput) Elem() ServiceManagedIdentityResponseIdentityOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityResponseIdentity) ServiceManagedIdentityResponseIdentity {
		if v != nil {
			return *v
		}
		var ret ServiceManagedIdentityResponseIdentity
		return ret
	}).(ServiceManagedIdentityResponseIdentityOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ServiceManagedIdentityResponseIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ServiceManagedIdentityResponseIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of identity being specified, currently SystemAssigned and None are allowed.
func (o ServiceManagedIdentityResponseIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ServiceManagedIdentityResponseIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ServiceManagedIdentityResponseIdentity) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentityResponse] {
	return pulumix.Output[map[string]UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsConnectorDataLakeDataDestinationOutput{})
	pulumi.RegisterOutputType(AnalyticsConnectorDataLakeDataDestinationResponseOutput{})
	pulumi.RegisterOutputType(AnalyticsConnectorFhirServiceDataSourceOutput{})
	pulumi.RegisterOutputType(AnalyticsConnectorFhirServiceDataSourceResponseOutput{})
	pulumi.RegisterOutputType(AnalyticsConnectorFhirToParquetMappingOutput{})
	pulumi.RegisterOutputType(AnalyticsConnectorFhirToParquetMappingResponseOutput{})
	pulumi.RegisterOutputType(ServiceManagedIdentityIdentityOutput{})
	pulumi.RegisterOutputType(ServiceManagedIdentityIdentityPtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedIdentityResponseIdentityOutput{})
	pulumi.RegisterOutputType(ServiceManagedIdentityResponseIdentityPtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
