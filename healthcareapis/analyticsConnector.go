// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcareapis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Analytics Connector definition.
// Azure REST API version: 2022-10-01-preview.
type AnalyticsConnector struct {
	pulumi.CustomResourceState

	// Data destination configuration for Analytics Connector.
	DataDestinationConfiguration AnalyticsConnectorDataLakeDataDestinationResponseOutput `pulumi:"dataDestinationConfiguration"`
	// Data mapping configuration for Analytics Connector.
	DataMappingConfiguration AnalyticsConnectorFhirToParquetMappingResponseOutput `pulumi:"dataMappingConfiguration"`
	// Data source for Analytics Connector.
	DataSourceConfiguration AnalyticsConnectorFhirServiceDataSourceResponseOutput `pulumi:"dataSourceConfiguration"`
	// An etag associated with the resource, used for optimistic concurrency when editing it.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Setting indicating whether the service has a managed identity associated with it.
	Identity ServiceManagedIdentityResponseIdentityPtrOutput `pulumi:"identity"`
	// The resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAnalyticsConnector registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsConnector(ctx *pulumi.Context,
	name string, args *AnalyticsConnectorArgs, opts ...pulumi.ResourceOption) (*AnalyticsConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataDestinationConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'DataDestinationConfiguration'")
	}
	if args.DataMappingConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'DataMappingConfiguration'")
	}
	if args.DataSourceConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceConfiguration'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:healthcareapis/v20221001preview:AnalyticsConnector"),
		},
	})
	opts = append(opts, aliases)
	var resource AnalyticsConnector
	err := ctx.RegisterResource("azure-native:healthcareapis:AnalyticsConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsConnector gets an existing AnalyticsConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsConnectorState, opts ...pulumi.ResourceOption) (*AnalyticsConnector, error) {
	var resource AnalyticsConnector
	err := ctx.ReadResource("azure-native:healthcareapis:AnalyticsConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsConnector resources.
type analyticsConnectorState struct {
}

type AnalyticsConnectorState struct {
}

func (AnalyticsConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsConnectorState)(nil)).Elem()
}

type analyticsConnectorArgs struct {
	// The name of Analytics Connector resource.
	AnalyticsConnectorName *string `pulumi:"analyticsConnectorName"`
	// Data destination configuration for Analytics Connector.
	DataDestinationConfiguration AnalyticsConnectorDataLakeDataDestination `pulumi:"dataDestinationConfiguration"`
	// Data mapping configuration for Analytics Connector.
	DataMappingConfiguration AnalyticsConnectorFhirToParquetMapping `pulumi:"dataMappingConfiguration"`
	// Data source for Analytics Connector.
	DataSourceConfiguration AnalyticsConnectorFhirServiceDataSource `pulumi:"dataSourceConfiguration"`
	// Setting indicating whether the service has a managed identity associated with it.
	Identity *ServiceManagedIdentityIdentity `pulumi:"identity"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The name of the resource group that contains the service instance.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of workspace resource.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a AnalyticsConnector resource.
type AnalyticsConnectorArgs struct {
	// The name of Analytics Connector resource.
	AnalyticsConnectorName pulumi.StringPtrInput
	// Data destination configuration for Analytics Connector.
	DataDestinationConfiguration AnalyticsConnectorDataLakeDataDestinationInput
	// Data mapping configuration for Analytics Connector.
	DataMappingConfiguration AnalyticsConnectorFhirToParquetMappingInput
	// Data source for Analytics Connector.
	DataSourceConfiguration AnalyticsConnectorFhirServiceDataSourceInput
	// Setting indicating whether the service has a managed identity associated with it.
	Identity ServiceManagedIdentityIdentityPtrInput
	// The resource location.
	Location pulumi.StringPtrInput
	// The name of the resource group that contains the service instance.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of workspace resource.
	WorkspaceName pulumi.StringInput
}

func (AnalyticsConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsConnectorArgs)(nil)).Elem()
}

type AnalyticsConnectorInput interface {
	pulumi.Input

	ToAnalyticsConnectorOutput() AnalyticsConnectorOutput
	ToAnalyticsConnectorOutputWithContext(ctx context.Context) AnalyticsConnectorOutput
}

func (*AnalyticsConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsConnector)(nil)).Elem()
}

func (i *AnalyticsConnector) ToAnalyticsConnectorOutput() AnalyticsConnectorOutput {
	return i.ToAnalyticsConnectorOutputWithContext(context.Background())
}

func (i *AnalyticsConnector) ToAnalyticsConnectorOutputWithContext(ctx context.Context) AnalyticsConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsConnectorOutput)
}

type AnalyticsConnectorOutput struct{ *pulumi.OutputState }

func (AnalyticsConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsConnector)(nil)).Elem()
}

func (o AnalyticsConnectorOutput) ToAnalyticsConnectorOutput() AnalyticsConnectorOutput {
	return o
}

func (o AnalyticsConnectorOutput) ToAnalyticsConnectorOutputWithContext(ctx context.Context) AnalyticsConnectorOutput {
	return o
}

// Data destination configuration for Analytics Connector.
func (o AnalyticsConnectorOutput) DataDestinationConfiguration() AnalyticsConnectorDataLakeDataDestinationResponseOutput {
	return o.ApplyT(func(v *AnalyticsConnector) AnalyticsConnectorDataLakeDataDestinationResponseOutput {
		return v.DataDestinationConfiguration
	}).(AnalyticsConnectorDataLakeDataDestinationResponseOutput)
}

// Data mapping configuration for Analytics Connector.
func (o AnalyticsConnectorOutput) DataMappingConfiguration() AnalyticsConnectorFhirToParquetMappingResponseOutput {
	return o.ApplyT(func(v *AnalyticsConnector) AnalyticsConnectorFhirToParquetMappingResponseOutput {
		return v.DataMappingConfiguration
	}).(AnalyticsConnectorFhirToParquetMappingResponseOutput)
}

// Data source for Analytics Connector.
func (o AnalyticsConnectorOutput) DataSourceConfiguration() AnalyticsConnectorFhirServiceDataSourceResponseOutput {
	return o.ApplyT(func(v *AnalyticsConnector) AnalyticsConnectorFhirServiceDataSourceResponseOutput {
		return v.DataSourceConfiguration
	}).(AnalyticsConnectorFhirServiceDataSourceResponseOutput)
}

// An etag associated with the resource, used for optimistic concurrency when editing it.
func (o AnalyticsConnectorOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalyticsConnector) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// Setting indicating whether the service has a managed identity associated with it.
func (o AnalyticsConnectorOutput) Identity() ServiceManagedIdentityResponseIdentityPtrOutput {
	return o.ApplyT(func(v *AnalyticsConnector) ServiceManagedIdentityResponseIdentityPtrOutput { return v.Identity }).(ServiceManagedIdentityResponseIdentityPtrOutput)
}

// The resource location.
func (o AnalyticsConnectorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalyticsConnector) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o AnalyticsConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state.
func (o AnalyticsConnectorOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsConnector) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o AnalyticsConnectorOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *AnalyticsConnector) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o AnalyticsConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnalyticsConnector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource type.
func (o AnalyticsConnectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsConnector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsConnectorOutput{})
}
