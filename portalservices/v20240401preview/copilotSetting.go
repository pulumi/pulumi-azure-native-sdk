// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240401preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The copilot settings tenant resource definition.
type CopilotSetting struct {
	pulumi.CustomResourceState

	// Boolean indicating if role-based access control is enabled for copilot in this tenant.
	AccessControlEnabled pulumi.BoolOutput `pulumi:"accessControlEnabled"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last provisioning operation performed on the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCopilotSetting registers a new resource with the given unique name, arguments, and options.
func NewCopilotSetting(ctx *pulumi.Context,
	name string, args *CopilotSettingArgs, opts ...pulumi.ResourceOption) (*CopilotSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessControlEnabled == nil {
		return nil, errors.New("invalid value for required argument 'AccessControlEnabled'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:portalservices:CopilotSetting"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CopilotSetting
	err := ctx.RegisterResource("azure-native:portalservices/v20240401preview:CopilotSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCopilotSetting gets an existing CopilotSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCopilotSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CopilotSettingState, opts ...pulumi.ResourceOption) (*CopilotSetting, error) {
	var resource CopilotSetting
	err := ctx.ReadResource("azure-native:portalservices/v20240401preview:CopilotSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CopilotSetting resources.
type copilotSettingState struct {
}

type CopilotSettingState struct {
}

func (CopilotSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*copilotSettingState)(nil)).Elem()
}

type copilotSettingArgs struct {
	// Boolean indicating if role-based access control is enabled for copilot in this tenant.
	AccessControlEnabled bool `pulumi:"accessControlEnabled"`
}

// The set of arguments for constructing a CopilotSetting resource.
type CopilotSettingArgs struct {
	// Boolean indicating if role-based access control is enabled for copilot in this tenant.
	AccessControlEnabled pulumi.BoolInput
}

func (CopilotSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*copilotSettingArgs)(nil)).Elem()
}

type CopilotSettingInput interface {
	pulumi.Input

	ToCopilotSettingOutput() CopilotSettingOutput
	ToCopilotSettingOutputWithContext(ctx context.Context) CopilotSettingOutput
}

func (*CopilotSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**CopilotSetting)(nil)).Elem()
}

func (i *CopilotSetting) ToCopilotSettingOutput() CopilotSettingOutput {
	return i.ToCopilotSettingOutputWithContext(context.Background())
}

func (i *CopilotSetting) ToCopilotSettingOutputWithContext(ctx context.Context) CopilotSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopilotSettingOutput)
}

type CopilotSettingOutput struct{ *pulumi.OutputState }

func (CopilotSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopilotSetting)(nil)).Elem()
}

func (o CopilotSettingOutput) ToCopilotSettingOutput() CopilotSettingOutput {
	return o
}

func (o CopilotSettingOutput) ToCopilotSettingOutputWithContext(ctx context.Context) CopilotSettingOutput {
	return o
}

// Boolean indicating if role-based access control is enabled for copilot in this tenant.
func (o CopilotSettingOutput) AccessControlEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CopilotSetting) pulumi.BoolOutput { return v.AccessControlEnabled }).(pulumi.BoolOutput)
}

// The name of the resource
func (o CopilotSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CopilotSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last provisioning operation performed on the resource.
func (o CopilotSettingOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *CopilotSetting) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o CopilotSettingOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *CopilotSetting) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o CopilotSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CopilotSetting) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(CopilotSettingOutput{})
}
