// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codesigning

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get details of a certificate profile.
//
// Uses Azure REST API version 2024-09-30-preview.
//
// Other available API versions: 2024-02-05-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native codesigning [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupCertificateProfile(ctx *pulumi.Context, args *LookupCertificateProfileArgs, opts ...pulumi.InvokeOption) (*LookupCertificateProfileResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateProfileResult
	err := ctx.Invoke("azure-native:codesigning:getCertificateProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupCertificateProfileArgs struct {
	// Trusted Signing account name.
	AccountName string `pulumi:"accountName"`
	// Certificate profile name.
	ProfileName string `pulumi:"profileName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Certificate profile resource.
type LookupCertificateProfileResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Identity validation id used for the certificate subject name.
	IdentityValidationId string `pulumi:"identityValidationId"`
	// Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
	IncludeCity *bool `pulumi:"includeCity"`
	// Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
	IncludeCountry *bool `pulumi:"includeCountry"`
	// Whether to include PC in the certificate subject name.
	IncludePostalCode *bool `pulumi:"includePostalCode"`
	// Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
	IncludeState *bool `pulumi:"includeState"`
	// Whether to include STREET in the certificate subject name.
	IncludeStreetAddress *bool `pulumi:"includeStreetAddress"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Profile type of the certificate.
	ProfileType string `pulumi:"profileType"`
	// Status of the current operation on certificate profile.
	ProvisioningState string `pulumi:"provisioningState"`
	// Status of the certificate profile.
	Status string `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupCertificateProfileResult
func (val *LookupCertificateProfileResult) Defaults() *LookupCertificateProfileResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncludeCity == nil {
		includeCity_ := false
		tmp.IncludeCity = &includeCity_
	}
	if tmp.IncludeCountry == nil {
		includeCountry_ := false
		tmp.IncludeCountry = &includeCountry_
	}
	if tmp.IncludePostalCode == nil {
		includePostalCode_ := false
		tmp.IncludePostalCode = &includePostalCode_
	}
	if tmp.IncludeState == nil {
		includeState_ := false
		tmp.IncludeState = &includeState_
	}
	if tmp.IncludeStreetAddress == nil {
		includeStreetAddress_ := false
		tmp.IncludeStreetAddress = &includeStreetAddress_
	}
	return &tmp
}
func LookupCertificateProfileOutput(ctx *pulumi.Context, args LookupCertificateProfileOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCertificateProfileResultOutput, error) {
			args := v.(LookupCertificateProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:codesigning:getCertificateProfile", args, LookupCertificateProfileResultOutput{}, options).(LookupCertificateProfileResultOutput), nil
		}).(LookupCertificateProfileResultOutput)
}

type LookupCertificateProfileOutputArgs struct {
	// Trusted Signing account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Certificate profile name.
	ProfileName pulumi.StringInput `pulumi:"profileName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupCertificateProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateProfileArgs)(nil)).Elem()
}

// Certificate profile resource.
type LookupCertificateProfileResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateProfileResult)(nil)).Elem()
}

func (o LookupCertificateProfileResultOutput) ToLookupCertificateProfileResultOutput() LookupCertificateProfileResultOutput {
	return o
}

func (o LookupCertificateProfileResultOutput) ToLookupCertificateProfileResultOutputWithContext(ctx context.Context) LookupCertificateProfileResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupCertificateProfileResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupCertificateProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identity validation id used for the certificate subject name.
func (o LookupCertificateProfileResultOutput) IdentityValidationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.IdentityValidationId }).(pulumi.StringOutput)
}

// Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
func (o LookupCertificateProfileResultOutput) IncludeCity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) *bool { return v.IncludeCity }).(pulumi.BoolPtrOutput)
}

// Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
func (o LookupCertificateProfileResultOutput) IncludeCountry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) *bool { return v.IncludeCountry }).(pulumi.BoolPtrOutput)
}

// Whether to include PC in the certificate subject name.
func (o LookupCertificateProfileResultOutput) IncludePostalCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) *bool { return v.IncludePostalCode }).(pulumi.BoolPtrOutput)
}

// Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
func (o LookupCertificateProfileResultOutput) IncludeState() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) *bool { return v.IncludeState }).(pulumi.BoolPtrOutput)
}

// Whether to include STREET in the certificate subject name.
func (o LookupCertificateProfileResultOutput) IncludeStreetAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) *bool { return v.IncludeStreetAddress }).(pulumi.BoolPtrOutput)
}

// The name of the resource
func (o LookupCertificateProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

// Profile type of the certificate.
func (o LookupCertificateProfileResultOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.ProfileType }).(pulumi.StringOutput)
}

// Status of the current operation on certificate profile.
func (o LookupCertificateProfileResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Status of the certificate profile.
func (o LookupCertificateProfileResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupCertificateProfileResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupCertificateProfileResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateProfileResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateProfileResultOutput{})
}
