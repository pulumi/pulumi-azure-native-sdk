// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagecache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns an import job.
// Azure REST API version: 2024-03-01.
func LookupImportJob(ctx *pulumi.Context, args *LookupImportJobArgs, opts ...pulumi.InvokeOption) (*LookupImportJobResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupImportJobResult
	err := ctx.Invoke("azure-native:storagecache:getImportJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupImportJobArgs struct {
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName string `pulumi:"amlFilesystemName"`
	// Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	ImportJobName string `pulumi:"importJobName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// An import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type LookupImportJobResult struct {
	// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
	BlobsImportedPerSecond float64 `pulumi:"blobsImportedPerSecond"`
	// A recent and frequently updated rate of blobs walked per second.
	BlobsWalkedPerSecond float64 `pulumi:"blobsWalkedPerSecond"`
	// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
	ConflictResolutionMode *string `pulumi:"conflictResolutionMode"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
	ImportPrefixes []string `pulumi:"importPrefixes"`
	// The time of the last completed archive operation
	LastCompletionTime string `pulumi:"lastCompletionTime"`
	// The time the latest archive operation started
	LastStartedTime string `pulumi:"lastStartedTime"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
	MaximumErrors *int `pulumi:"maximumErrors"`
	// The name of the resource
	Name string `pulumi:"name"`
	// ARM provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
	State string `pulumi:"state"`
	// The status message of the import job.
	StatusMessage string `pulumi:"statusMessage"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The total blobs that have been imported since import began.
	TotalBlobsImported float64 `pulumi:"totalBlobsImported"`
	// The total blob objects walked.
	TotalBlobsWalked float64 `pulumi:"totalBlobsWalked"`
	// Number of conflicts in the import job.
	TotalConflicts int `pulumi:"totalConflicts"`
	// Number of errors in the import job.
	TotalErrors int `pulumi:"totalErrors"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupImportJobResult
func (val *LookupImportJobResult) Defaults() *LookupImportJobResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ConflictResolutionMode == nil {
		conflictResolutionMode_ := "Fail"
		tmp.ConflictResolutionMode = &conflictResolutionMode_
	}
	if tmp.MaximumErrors == nil {
		maximumErrors_ := 0
		tmp.MaximumErrors = &maximumErrors_
	}
	return &tmp
}

func LookupImportJobOutput(ctx *pulumi.Context, args LookupImportJobOutputArgs, opts ...pulumi.InvokeOption) LookupImportJobResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImportJobResult, error) {
			args := v.(LookupImportJobArgs)
			r, err := LookupImportJob(ctx, &args, opts...)
			var s LookupImportJobResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImportJobResultOutput)
}

type LookupImportJobOutputArgs struct {
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName pulumi.StringInput `pulumi:"amlFilesystemName"`
	// Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	ImportJobName pulumi.StringInput `pulumi:"importJobName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupImportJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImportJobArgs)(nil)).Elem()
}

// An import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type LookupImportJobResultOutput struct{ *pulumi.OutputState }

func (LookupImportJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImportJobResult)(nil)).Elem()
}

func (o LookupImportJobResultOutput) ToLookupImportJobResultOutput() LookupImportJobResultOutput {
	return o
}

func (o LookupImportJobResultOutput) ToLookupImportJobResultOutputWithContext(ctx context.Context) LookupImportJobResultOutput {
	return o
}

// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
func (o LookupImportJobResultOutput) BlobsImportedPerSecond() pulumi.Float64Output {
	return o.ApplyT(func(v LookupImportJobResult) float64 { return v.BlobsImportedPerSecond }).(pulumi.Float64Output)
}

// A recent and frequently updated rate of blobs walked per second.
func (o LookupImportJobResultOutput) BlobsWalkedPerSecond() pulumi.Float64Output {
	return o.ApplyT(func(v LookupImportJobResult) float64 { return v.BlobsWalkedPerSecond }).(pulumi.Float64Output)
}

// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
func (o LookupImportJobResultOutput) ConflictResolutionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImportJobResult) *string { return v.ConflictResolutionMode }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupImportJobResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.Id }).(pulumi.StringOutput)
}

// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
func (o LookupImportJobResultOutput) ImportPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupImportJobResult) []string { return v.ImportPrefixes }).(pulumi.StringArrayOutput)
}

// The time of the last completed archive operation
func (o LookupImportJobResultOutput) LastCompletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.LastCompletionTime }).(pulumi.StringOutput)
}

// The time the latest archive operation started
func (o LookupImportJobResultOutput) LastStartedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.LastStartedTime }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupImportJobResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.Location }).(pulumi.StringOutput)
}

// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
func (o LookupImportJobResultOutput) MaximumErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupImportJobResult) *int { return v.MaximumErrors }).(pulumi.IntPtrOutput)
}

// The name of the resource
func (o LookupImportJobResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.Name }).(pulumi.StringOutput)
}

// ARM provisioning state.
func (o LookupImportJobResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
func (o LookupImportJobResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.State }).(pulumi.StringOutput)
}

// The status message of the import job.
func (o LookupImportJobResultOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupImportJobResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupImportJobResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupImportJobResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupImportJobResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The total blobs that have been imported since import began.
func (o LookupImportJobResultOutput) TotalBlobsImported() pulumi.Float64Output {
	return o.ApplyT(func(v LookupImportJobResult) float64 { return v.TotalBlobsImported }).(pulumi.Float64Output)
}

// The total blob objects walked.
func (o LookupImportJobResultOutput) TotalBlobsWalked() pulumi.Float64Output {
	return o.ApplyT(func(v LookupImportJobResult) float64 { return v.TotalBlobsWalked }).(pulumi.Float64Output)
}

// Number of conflicts in the import job.
func (o LookupImportJobResultOutput) TotalConflicts() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImportJobResult) int { return v.TotalConflicts }).(pulumi.IntOutput)
}

// Number of errors in the import job.
func (o LookupImportJobResultOutput) TotalErrors() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImportJobResult) int { return v.TotalErrors }).(pulumi.IntOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupImportJobResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImportJobResultOutput{})
}
