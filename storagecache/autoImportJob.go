// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagecache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An auto import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
//
// Uses Azure REST API version 2025-07-01.
type AutoImportJob struct {
	pulumi.CustomResourceState

	// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
	AdminStatus pulumi.StringPtrOutput `pulumi:"adminStatus"`
	// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
	AutoImportPrefixes pulumi.StringArrayOutput `pulumi:"autoImportPrefixes"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The storage account blob change feed status of the auto import job.
	BlobSyncEvents AutoImportJobResponseBlobSyncEventsOutput `pulumi:"blobSyncEvents"`
	// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
	ConflictResolutionMode pulumi.StringPtrOutput `pulumi:"conflictResolutionMode"`
	// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
	EnableDeletions pulumi.BoolPtrOutput `pulumi:"enableDeletions"`
	// Number of directories imported during full scan.
	ImportedDirectories pulumi.Float64Output `pulumi:"importedDirectories"`
	// Number of files imported during full scan.
	ImportedFiles pulumi.Float64Output `pulumi:"importedFiles"`
	// Number of symlinks imported during full scan.
	ImportedSymlinks pulumi.Float64Output `pulumi:"importedSymlinks"`
	// The time (in UTC) of the last completed auto import job.
	LastCompletionTimeUTC pulumi.StringOutput `pulumi:"lastCompletionTimeUTC"`
	// The time (in UTC) the latest auto import job started.
	LastStartedTimeUTC pulumi.StringOutput `pulumi:"lastStartedTimeUTC"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
	MaximumErrors pulumi.Float64PtrOutput `pulumi:"maximumErrors"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of preexisting directories during full scan.
	PreexistingDirectories pulumi.Float64Output `pulumi:"preexistingDirectories"`
	// Number of preexisting files during full scan.
	PreexistingFiles pulumi.Float64Output `pulumi:"preexistingFiles"`
	// Number of preexisting symlinks during full scan.
	PreexistingSymlinks pulumi.Float64Output `pulumi:"preexistingSymlinks"`
	// ARM provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Rate of blob import during full scan.
	RateOfBlobImport pulumi.Float64Output `pulumi:"rateOfBlobImport"`
	// Rate of blobs walked during full scan.
	RateOfBlobWalk pulumi.Float64Output `pulumi:"rateOfBlobWalk"`
	// Date and time of when the full scan ended.
	ScanEndTime pulumi.StringOutput `pulumi:"scanEndTime"`
	// Date and time of when the currently running full scan began.
	ScanStartTime pulumi.StringOutput `pulumi:"scanStartTime"`
	// The state of the auto import operation.
	State pulumi.StringOutput `pulumi:"state"`
	// Server-defined status code for auto import job.
	StatusCode pulumi.StringOutput `pulumi:"statusCode"`
	// Server-defined status message for auto import job.
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Total number of blobs imported during full scan.
	TotalBlobsImported pulumi.Float64Output `pulumi:"totalBlobsImported"`
	// Total number of blobs walked during full scan.
	TotalBlobsWalked pulumi.Float64Output `pulumi:"totalBlobsWalked"`
	// Total conflicts encountered during full scan.
	TotalConflicts pulumi.Float64Output `pulumi:"totalConflicts"`
	// Total errors encountered during full scan.
	TotalErrors pulumi.Float64Output `pulumi:"totalErrors"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAutoImportJob registers a new resource with the given unique name, arguments, and options.
func NewAutoImportJob(ctx *pulumi.Context,
	name string, args *AutoImportJobArgs, opts ...pulumi.ResourceOption) (*AutoImportJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AmlFilesystemName == nil {
		return nil, errors.New("invalid value for required argument 'AmlFilesystemName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.AdminStatus == nil {
		args.AdminStatus = pulumi.StringPtr("Enable")
	}
	if args.ConflictResolutionMode == nil {
		args.ConflictResolutionMode = pulumi.StringPtr("Skip")
	}
	if args.EnableDeletions == nil {
		args.EnableDeletions = pulumi.BoolPtr(false)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:storagecache/v20250701:AutoImportJob"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AutoImportJob
	err := ctx.RegisterResource("azure-native:storagecache:AutoImportJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoImportJob gets an existing AutoImportJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoImportJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoImportJobState, opts ...pulumi.ResourceOption) (*AutoImportJob, error) {
	var resource AutoImportJob
	err := ctx.ReadResource("azure-native:storagecache:AutoImportJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoImportJob resources.
type autoImportJobState struct {
}

type AutoImportJobState struct {
}

func (AutoImportJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoImportJobState)(nil)).Elem()
}

type autoImportJobArgs struct {
	// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
	AdminStatus *string `pulumi:"adminStatus"`
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName string `pulumi:"amlFilesystemName"`
	// Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AutoImportJobName *string `pulumi:"autoImportJobName"`
	// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
	AutoImportPrefixes []string `pulumi:"autoImportPrefixes"`
	// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
	ConflictResolutionMode *string `pulumi:"conflictResolutionMode"`
	// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
	EnableDeletions *bool `pulumi:"enableDeletions"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
	MaximumErrors *float64 `pulumi:"maximumErrors"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AutoImportJob resource.
type AutoImportJobArgs struct {
	// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
	AdminStatus pulumi.StringPtrInput
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName pulumi.StringInput
	// Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AutoImportJobName pulumi.StringPtrInput
	// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
	AutoImportPrefixes pulumi.StringArrayInput
	// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
	ConflictResolutionMode pulumi.StringPtrInput
	// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
	EnableDeletions pulumi.BoolPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
	MaximumErrors pulumi.Float64PtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (AutoImportJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoImportJobArgs)(nil)).Elem()
}

type AutoImportJobInput interface {
	pulumi.Input

	ToAutoImportJobOutput() AutoImportJobOutput
	ToAutoImportJobOutputWithContext(ctx context.Context) AutoImportJobOutput
}

func (*AutoImportJob) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoImportJob)(nil)).Elem()
}

func (i *AutoImportJob) ToAutoImportJobOutput() AutoImportJobOutput {
	return i.ToAutoImportJobOutputWithContext(context.Background())
}

func (i *AutoImportJob) ToAutoImportJobOutputWithContext(ctx context.Context) AutoImportJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoImportJobOutput)
}

type AutoImportJobOutput struct{ *pulumi.OutputState }

func (AutoImportJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoImportJob)(nil)).Elem()
}

func (o AutoImportJobOutput) ToAutoImportJobOutput() AutoImportJobOutput {
	return o
}

func (o AutoImportJobOutput) ToAutoImportJobOutputWithContext(ctx context.Context) AutoImportJobOutput {
	return o
}

// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
func (o AutoImportJobOutput) AdminStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringPtrOutput { return v.AdminStatus }).(pulumi.StringPtrOutput)
}

// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
func (o AutoImportJobOutput) AutoImportPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringArrayOutput { return v.AutoImportPrefixes }).(pulumi.StringArrayOutput)
}

// The Azure API version of the resource.
func (o AutoImportJobOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The storage account blob change feed status of the auto import job.
func (o AutoImportJobOutput) BlobSyncEvents() AutoImportJobResponseBlobSyncEventsOutput {
	return o.ApplyT(func(v *AutoImportJob) AutoImportJobResponseBlobSyncEventsOutput { return v.BlobSyncEvents }).(AutoImportJobResponseBlobSyncEventsOutput)
}

// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
func (o AutoImportJobOutput) ConflictResolutionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringPtrOutput { return v.ConflictResolutionMode }).(pulumi.StringPtrOutput)
}

// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
func (o AutoImportJobOutput) EnableDeletions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.BoolPtrOutput { return v.EnableDeletions }).(pulumi.BoolPtrOutput)
}

// Number of directories imported during full scan.
func (o AutoImportJobOutput) ImportedDirectories() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.ImportedDirectories }).(pulumi.Float64Output)
}

// Number of files imported during full scan.
func (o AutoImportJobOutput) ImportedFiles() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.ImportedFiles }).(pulumi.Float64Output)
}

// Number of symlinks imported during full scan.
func (o AutoImportJobOutput) ImportedSymlinks() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.ImportedSymlinks }).(pulumi.Float64Output)
}

// The time (in UTC) of the last completed auto import job.
func (o AutoImportJobOutput) LastCompletionTimeUTC() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.LastCompletionTimeUTC }).(pulumi.StringOutput)
}

// The time (in UTC) the latest auto import job started.
func (o AutoImportJobOutput) LastStartedTimeUTC() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.LastStartedTimeUTC }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o AutoImportJobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
func (o AutoImportJobOutput) MaximumErrors() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64PtrOutput { return v.MaximumErrors }).(pulumi.Float64PtrOutput)
}

// The name of the resource
func (o AutoImportJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of preexisting directories during full scan.
func (o AutoImportJobOutput) PreexistingDirectories() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.PreexistingDirectories }).(pulumi.Float64Output)
}

// Number of preexisting files during full scan.
func (o AutoImportJobOutput) PreexistingFiles() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.PreexistingFiles }).(pulumi.Float64Output)
}

// Number of preexisting symlinks during full scan.
func (o AutoImportJobOutput) PreexistingSymlinks() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.PreexistingSymlinks }).(pulumi.Float64Output)
}

// ARM provisioning state.
func (o AutoImportJobOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Rate of blob import during full scan.
func (o AutoImportJobOutput) RateOfBlobImport() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.RateOfBlobImport }).(pulumi.Float64Output)
}

// Rate of blobs walked during full scan.
func (o AutoImportJobOutput) RateOfBlobWalk() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.RateOfBlobWalk }).(pulumi.Float64Output)
}

// Date and time of when the full scan ended.
func (o AutoImportJobOutput) ScanEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.ScanEndTime }).(pulumi.StringOutput)
}

// Date and time of when the currently running full scan began.
func (o AutoImportJobOutput) ScanStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.ScanStartTime }).(pulumi.StringOutput)
}

// The state of the auto import operation.
func (o AutoImportJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Server-defined status code for auto import job.
func (o AutoImportJobOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.StatusCode }).(pulumi.StringOutput)
}

// Server-defined status message for auto import job.
func (o AutoImportJobOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o AutoImportJobOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *AutoImportJob) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o AutoImportJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Total number of blobs imported during full scan.
func (o AutoImportJobOutput) TotalBlobsImported() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.TotalBlobsImported }).(pulumi.Float64Output)
}

// Total number of blobs walked during full scan.
func (o AutoImportJobOutput) TotalBlobsWalked() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.TotalBlobsWalked }).(pulumi.Float64Output)
}

// Total conflicts encountered during full scan.
func (o AutoImportJobOutput) TotalConflicts() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.TotalConflicts }).(pulumi.Float64Output)
}

// Total errors encountered during full scan.
func (o AutoImportJobOutput) TotalErrors() pulumi.Float64Output {
	return o.ApplyT(func(v *AutoImportJob) pulumi.Float64Output { return v.TotalErrors }).(pulumi.Float64Output)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o AutoImportJobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoImportJob) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AutoImportJobOutput{})
}
