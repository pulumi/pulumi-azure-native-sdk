// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storagecache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns an auto import job.
//
// Uses Azure REST API version 2025-07-01.
func LookupAutoImportJob(ctx *pulumi.Context, args *LookupAutoImportJobArgs, opts ...pulumi.InvokeOption) (*LookupAutoImportJobResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupAutoImportJobResult
	err := ctx.Invoke("azure-native:storagecache:getAutoImportJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupAutoImportJobArgs struct {
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName string `pulumi:"amlFilesystemName"`
	// Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AutoImportJobName string `pulumi:"autoImportJobName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// An auto import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type LookupAutoImportJobResult struct {
	// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
	AdminStatus *string `pulumi:"adminStatus"`
	// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
	AutoImportPrefixes []string `pulumi:"autoImportPrefixes"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// The storage account blob change feed status of the auto import job.
	BlobSyncEvents AutoImportJobResponseBlobSyncEvents `pulumi:"blobSyncEvents"`
	// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
	ConflictResolutionMode *string `pulumi:"conflictResolutionMode"`
	// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
	EnableDeletions *bool `pulumi:"enableDeletions"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Number of directories imported during full scan.
	ImportedDirectories float64 `pulumi:"importedDirectories"`
	// Number of files imported during full scan.
	ImportedFiles float64 `pulumi:"importedFiles"`
	// Number of symlinks imported during full scan.
	ImportedSymlinks float64 `pulumi:"importedSymlinks"`
	// The time (in UTC) of the last completed auto import job.
	LastCompletionTimeUTC string `pulumi:"lastCompletionTimeUTC"`
	// The time (in UTC) the latest auto import job started.
	LastStartedTimeUTC string `pulumi:"lastStartedTimeUTC"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
	MaximumErrors *float64 `pulumi:"maximumErrors"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Number of preexisting directories during full scan.
	PreexistingDirectories float64 `pulumi:"preexistingDirectories"`
	// Number of preexisting files during full scan.
	PreexistingFiles float64 `pulumi:"preexistingFiles"`
	// Number of preexisting symlinks during full scan.
	PreexistingSymlinks float64 `pulumi:"preexistingSymlinks"`
	// ARM provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Rate of blob import during full scan.
	RateOfBlobImport float64 `pulumi:"rateOfBlobImport"`
	// Rate of blobs walked during full scan.
	RateOfBlobWalk float64 `pulumi:"rateOfBlobWalk"`
	// Date and time of when the full scan ended.
	ScanEndTime string `pulumi:"scanEndTime"`
	// Date and time of when the currently running full scan began.
	ScanStartTime string `pulumi:"scanStartTime"`
	// The state of the auto import operation.
	State string `pulumi:"state"`
	// Server-defined status code for auto import job.
	StatusCode string `pulumi:"statusCode"`
	// Server-defined status message for auto import job.
	StatusMessage string `pulumi:"statusMessage"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Total number of blobs imported during full scan.
	TotalBlobsImported float64 `pulumi:"totalBlobsImported"`
	// Total number of blobs walked during full scan.
	TotalBlobsWalked float64 `pulumi:"totalBlobsWalked"`
	// Total conflicts encountered during full scan.
	TotalConflicts float64 `pulumi:"totalConflicts"`
	// Total errors encountered during full scan.
	TotalErrors float64 `pulumi:"totalErrors"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupAutoImportJobResult
func (val *LookupAutoImportJobResult) Defaults() *LookupAutoImportJobResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AdminStatus == nil {
		adminStatus_ := "Enable"
		tmp.AdminStatus = &adminStatus_
	}
	if tmp.ConflictResolutionMode == nil {
		conflictResolutionMode_ := "Skip"
		tmp.ConflictResolutionMode = &conflictResolutionMode_
	}
	if tmp.EnableDeletions == nil {
		enableDeletions_ := false
		tmp.EnableDeletions = &enableDeletions_
	}
	return &tmp
}
func LookupAutoImportJobOutput(ctx *pulumi.Context, args LookupAutoImportJobOutputArgs, opts ...pulumi.InvokeOption) LookupAutoImportJobResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAutoImportJobResultOutput, error) {
			args := v.(LookupAutoImportJobArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:storagecache:getAutoImportJob", args, LookupAutoImportJobResultOutput{}, options).(LookupAutoImportJobResultOutput), nil
		}).(LookupAutoImportJobResultOutput)
}

type LookupAutoImportJobOutputArgs struct {
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName pulumi.StringInput `pulumi:"amlFilesystemName"`
	// Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AutoImportJobName pulumi.StringInput `pulumi:"autoImportJobName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAutoImportJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAutoImportJobArgs)(nil)).Elem()
}

// An auto import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type LookupAutoImportJobResultOutput struct{ *pulumi.OutputState }

func (LookupAutoImportJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAutoImportJobResult)(nil)).Elem()
}

func (o LookupAutoImportJobResultOutput) ToLookupAutoImportJobResultOutput() LookupAutoImportJobResultOutput {
	return o
}

func (o LookupAutoImportJobResultOutput) ToLookupAutoImportJobResultOutputWithContext(ctx context.Context) LookupAutoImportJobResultOutput {
	return o
}

// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
func (o LookupAutoImportJobResultOutput) AdminStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) *string { return v.AdminStatus }).(pulumi.StringPtrOutput)
}

// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
func (o LookupAutoImportJobResultOutput) AutoImportPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) []string { return v.AutoImportPrefixes }).(pulumi.StringArrayOutput)
}

// The Azure API version of the resource.
func (o LookupAutoImportJobResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The storage account blob change feed status of the auto import job.
func (o LookupAutoImportJobResultOutput) BlobSyncEvents() AutoImportJobResponseBlobSyncEventsOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) AutoImportJobResponseBlobSyncEvents { return v.BlobSyncEvents }).(AutoImportJobResponseBlobSyncEventsOutput)
}

// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
func (o LookupAutoImportJobResultOutput) ConflictResolutionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) *string { return v.ConflictResolutionMode }).(pulumi.StringPtrOutput)
}

// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
func (o LookupAutoImportJobResultOutput) EnableDeletions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) *bool { return v.EnableDeletions }).(pulumi.BoolPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupAutoImportJobResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.Id }).(pulumi.StringOutput)
}

// Number of directories imported during full scan.
func (o LookupAutoImportJobResultOutput) ImportedDirectories() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.ImportedDirectories }).(pulumi.Float64Output)
}

// Number of files imported during full scan.
func (o LookupAutoImportJobResultOutput) ImportedFiles() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.ImportedFiles }).(pulumi.Float64Output)
}

// Number of symlinks imported during full scan.
func (o LookupAutoImportJobResultOutput) ImportedSymlinks() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.ImportedSymlinks }).(pulumi.Float64Output)
}

// The time (in UTC) of the last completed auto import job.
func (o LookupAutoImportJobResultOutput) LastCompletionTimeUTC() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.LastCompletionTimeUTC }).(pulumi.StringOutput)
}

// The time (in UTC) the latest auto import job started.
func (o LookupAutoImportJobResultOutput) LastStartedTimeUTC() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.LastStartedTimeUTC }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupAutoImportJobResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.Location }).(pulumi.StringOutput)
}

// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
func (o LookupAutoImportJobResultOutput) MaximumErrors() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) *float64 { return v.MaximumErrors }).(pulumi.Float64PtrOutput)
}

// The name of the resource
func (o LookupAutoImportJobResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.Name }).(pulumi.StringOutput)
}

// Number of preexisting directories during full scan.
func (o LookupAutoImportJobResultOutput) PreexistingDirectories() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.PreexistingDirectories }).(pulumi.Float64Output)
}

// Number of preexisting files during full scan.
func (o LookupAutoImportJobResultOutput) PreexistingFiles() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.PreexistingFiles }).(pulumi.Float64Output)
}

// Number of preexisting symlinks during full scan.
func (o LookupAutoImportJobResultOutput) PreexistingSymlinks() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.PreexistingSymlinks }).(pulumi.Float64Output)
}

// ARM provisioning state.
func (o LookupAutoImportJobResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Rate of blob import during full scan.
func (o LookupAutoImportJobResultOutput) RateOfBlobImport() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.RateOfBlobImport }).(pulumi.Float64Output)
}

// Rate of blobs walked during full scan.
func (o LookupAutoImportJobResultOutput) RateOfBlobWalk() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.RateOfBlobWalk }).(pulumi.Float64Output)
}

// Date and time of when the full scan ended.
func (o LookupAutoImportJobResultOutput) ScanEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.ScanEndTime }).(pulumi.StringOutput)
}

// Date and time of when the currently running full scan began.
func (o LookupAutoImportJobResultOutput) ScanStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.ScanStartTime }).(pulumi.StringOutput)
}

// The state of the auto import operation.
func (o LookupAutoImportJobResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.State }).(pulumi.StringOutput)
}

// Server-defined status code for auto import job.
func (o LookupAutoImportJobResultOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.StatusCode }).(pulumi.StringOutput)
}

// Server-defined status message for auto import job.
func (o LookupAutoImportJobResultOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupAutoImportJobResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupAutoImportJobResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Total number of blobs imported during full scan.
func (o LookupAutoImportJobResultOutput) TotalBlobsImported() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.TotalBlobsImported }).(pulumi.Float64Output)
}

// Total number of blobs walked during full scan.
func (o LookupAutoImportJobResultOutput) TotalBlobsWalked() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.TotalBlobsWalked }).(pulumi.Float64Output)
}

// Total conflicts encountered during full scan.
func (o LookupAutoImportJobResultOutput) TotalConflicts() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.TotalConflicts }).(pulumi.Float64Output)
}

// Total errors encountered during full scan.
func (o LookupAutoImportJobResultOutput) TotalErrors() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAutoImportJobResult) float64 { return v.TotalErrors }).(pulumi.Float64Output)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupAutoImportJobResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAutoImportJobResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAutoImportJobResultOutput{})
}
