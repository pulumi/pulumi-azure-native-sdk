// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The type of identity used for the resource.
type AmlFilesystemIdentityType string

const (
	AmlFilesystemIdentityTypeUserAssigned = AmlFilesystemIdentityType("UserAssigned")
	AmlFilesystemIdentityTypeNone         = AmlFilesystemIdentityType("None")
)

func (AmlFilesystemIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlFilesystemIdentityType)(nil)).Elem()
}

func (e AmlFilesystemIdentityType) ToAmlFilesystemIdentityTypeOutput() AmlFilesystemIdentityTypeOutput {
	return pulumi.ToOutput(e).(AmlFilesystemIdentityTypeOutput)
}

func (e AmlFilesystemIdentityType) ToAmlFilesystemIdentityTypeOutputWithContext(ctx context.Context) AmlFilesystemIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AmlFilesystemIdentityTypeOutput)
}

func (e AmlFilesystemIdentityType) ToAmlFilesystemIdentityTypePtrOutput() AmlFilesystemIdentityTypePtrOutput {
	return e.ToAmlFilesystemIdentityTypePtrOutputWithContext(context.Background())
}

func (e AmlFilesystemIdentityType) ToAmlFilesystemIdentityTypePtrOutputWithContext(ctx context.Context) AmlFilesystemIdentityTypePtrOutput {
	return AmlFilesystemIdentityType(e).ToAmlFilesystemIdentityTypeOutputWithContext(ctx).ToAmlFilesystemIdentityTypePtrOutputWithContext(ctx)
}

func (e AmlFilesystemIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AmlFilesystemIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AmlFilesystemIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AmlFilesystemIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AmlFilesystemIdentityTypeOutput struct{ *pulumi.OutputState }

func (AmlFilesystemIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlFilesystemIdentityType)(nil)).Elem()
}

func (o AmlFilesystemIdentityTypeOutput) ToAmlFilesystemIdentityTypeOutput() AmlFilesystemIdentityTypeOutput {
	return o
}

func (o AmlFilesystemIdentityTypeOutput) ToAmlFilesystemIdentityTypeOutputWithContext(ctx context.Context) AmlFilesystemIdentityTypeOutput {
	return o
}

func (o AmlFilesystemIdentityTypeOutput) ToAmlFilesystemIdentityTypePtrOutput() AmlFilesystemIdentityTypePtrOutput {
	return o.ToAmlFilesystemIdentityTypePtrOutputWithContext(context.Background())
}

func (o AmlFilesystemIdentityTypeOutput) ToAmlFilesystemIdentityTypePtrOutputWithContext(ctx context.Context) AmlFilesystemIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlFilesystemIdentityType) *AmlFilesystemIdentityType {
		return &v
	}).(AmlFilesystemIdentityTypePtrOutput)
}

func (o AmlFilesystemIdentityTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AmlFilesystemIdentityType] {
	return pulumix.Output[AmlFilesystemIdentityType]{
		OutputState: o.OutputState,
	}
}

func (o AmlFilesystemIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AmlFilesystemIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AmlFilesystemIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AmlFilesystemIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AmlFilesystemIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AmlFilesystemIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AmlFilesystemIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (AmlFilesystemIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlFilesystemIdentityType)(nil)).Elem()
}

func (o AmlFilesystemIdentityTypePtrOutput) ToAmlFilesystemIdentityTypePtrOutput() AmlFilesystemIdentityTypePtrOutput {
	return o
}

func (o AmlFilesystemIdentityTypePtrOutput) ToAmlFilesystemIdentityTypePtrOutputWithContext(ctx context.Context) AmlFilesystemIdentityTypePtrOutput {
	return o
}

func (o AmlFilesystemIdentityTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AmlFilesystemIdentityType] {
	return pulumix.Output[*AmlFilesystemIdentityType]{
		OutputState: o.OutputState,
	}
}

func (o AmlFilesystemIdentityTypePtrOutput) Elem() AmlFilesystemIdentityTypeOutput {
	return o.ApplyT(func(v *AmlFilesystemIdentityType) AmlFilesystemIdentityType {
		if v != nil {
			return *v
		}
		var ret AmlFilesystemIdentityType
		return ret
	}).(AmlFilesystemIdentityTypeOutput)
}

func (o AmlFilesystemIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AmlFilesystemIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AmlFilesystemIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AmlFilesystemIdentityTypeInput is an input type that accepts AmlFilesystemIdentityTypeArgs and AmlFilesystemIdentityTypeOutput values.
// You can construct a concrete instance of `AmlFilesystemIdentityTypeInput` via:
//
//	AmlFilesystemIdentityTypeArgs{...}
type AmlFilesystemIdentityTypeInput interface {
	pulumi.Input

	ToAmlFilesystemIdentityTypeOutput() AmlFilesystemIdentityTypeOutput
	ToAmlFilesystemIdentityTypeOutputWithContext(context.Context) AmlFilesystemIdentityTypeOutput
}

var amlFilesystemIdentityTypePtrType = reflect.TypeOf((**AmlFilesystemIdentityType)(nil)).Elem()

type AmlFilesystemIdentityTypePtrInput interface {
	pulumi.Input

	ToAmlFilesystemIdentityTypePtrOutput() AmlFilesystemIdentityTypePtrOutput
	ToAmlFilesystemIdentityTypePtrOutputWithContext(context.Context) AmlFilesystemIdentityTypePtrOutput
}

type amlFilesystemIdentityTypePtr string

func AmlFilesystemIdentityTypePtr(v string) AmlFilesystemIdentityTypePtrInput {
	return (*amlFilesystemIdentityTypePtr)(&v)
}

func (*amlFilesystemIdentityTypePtr) ElementType() reflect.Type {
	return amlFilesystemIdentityTypePtrType
}

func (in *amlFilesystemIdentityTypePtr) ToAmlFilesystemIdentityTypePtrOutput() AmlFilesystemIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(AmlFilesystemIdentityTypePtrOutput)
}

func (in *amlFilesystemIdentityTypePtr) ToAmlFilesystemIdentityTypePtrOutputWithContext(ctx context.Context) AmlFilesystemIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AmlFilesystemIdentityTypePtrOutput)
}

func (in *amlFilesystemIdentityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AmlFilesystemIdentityType] {
	return pulumix.Output[*AmlFilesystemIdentityType]{
		OutputState: in.ToAmlFilesystemIdentityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of identity used for the cache
type CacheIdentityType string

const (
	CacheIdentityTypeSystemAssigned               = CacheIdentityType("SystemAssigned")
	CacheIdentityTypeUserAssigned                 = CacheIdentityType("UserAssigned")
	CacheIdentityType_SystemAssigned_UserAssigned = CacheIdentityType("SystemAssigned, UserAssigned")
	CacheIdentityTypeNone                         = CacheIdentityType("None")
)

func (CacheIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityType)(nil)).Elem()
}

func (e CacheIdentityType) ToCacheIdentityTypeOutput() CacheIdentityTypeOutput {
	return pulumi.ToOutput(e).(CacheIdentityTypeOutput)
}

func (e CacheIdentityType) ToCacheIdentityTypeOutputWithContext(ctx context.Context) CacheIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CacheIdentityTypeOutput)
}

func (e CacheIdentityType) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return e.ToCacheIdentityTypePtrOutputWithContext(context.Background())
}

func (e CacheIdentityType) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return CacheIdentityType(e).ToCacheIdentityTypeOutputWithContext(ctx).ToCacheIdentityTypePtrOutputWithContext(ctx)
}

func (e CacheIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CacheIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CacheIdentityTypeOutput struct{ *pulumi.OutputState }

func (CacheIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityType)(nil)).Elem()
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypeOutput() CacheIdentityTypeOutput {
	return o
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypeOutputWithContext(ctx context.Context) CacheIdentityTypeOutput {
	return o
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return o.ToCacheIdentityTypePtrOutputWithContext(context.Background())
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheIdentityType) *CacheIdentityType {
		return &v
	}).(CacheIdentityTypePtrOutput)
}

func (o CacheIdentityTypeOutput) ToOutput(ctx context.Context) pulumix.Output[CacheIdentityType] {
	return pulumix.Output[CacheIdentityType]{
		OutputState: o.OutputState,
	}
}

func (o CacheIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CacheIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CacheIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CacheIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (CacheIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentityType)(nil)).Elem()
}

func (o CacheIdentityTypePtrOutput) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return o
}

func (o CacheIdentityTypePtrOutput) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return o
}

func (o CacheIdentityTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CacheIdentityType] {
	return pulumix.Output[*CacheIdentityType]{
		OutputState: o.OutputState,
	}
}

func (o CacheIdentityTypePtrOutput) Elem() CacheIdentityTypeOutput {
	return o.ApplyT(func(v *CacheIdentityType) CacheIdentityType {
		if v != nil {
			return *v
		}
		var ret CacheIdentityType
		return ret
	}).(CacheIdentityTypeOutput)
}

func (o CacheIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CacheIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CacheIdentityTypeInput is an input type that accepts CacheIdentityTypeArgs and CacheIdentityTypeOutput values.
// You can construct a concrete instance of `CacheIdentityTypeInput` via:
//
//	CacheIdentityTypeArgs{...}
type CacheIdentityTypeInput interface {
	pulumi.Input

	ToCacheIdentityTypeOutput() CacheIdentityTypeOutput
	ToCacheIdentityTypeOutputWithContext(context.Context) CacheIdentityTypeOutput
}

var cacheIdentityTypePtrType = reflect.TypeOf((**CacheIdentityType)(nil)).Elem()

type CacheIdentityTypePtrInput interface {
	pulumi.Input

	ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput
	ToCacheIdentityTypePtrOutputWithContext(context.Context) CacheIdentityTypePtrOutput
}

type cacheIdentityTypePtr string

func CacheIdentityTypePtr(v string) CacheIdentityTypePtrInput {
	return (*cacheIdentityTypePtr)(&v)
}

func (*cacheIdentityTypePtr) ElementType() reflect.Type {
	return cacheIdentityTypePtrType
}

func (in *cacheIdentityTypePtr) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(CacheIdentityTypePtrOutput)
}

func (in *cacheIdentityTypePtr) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CacheIdentityTypePtrOutput)
}

func (in *cacheIdentityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CacheIdentityType] {
	return pulumix.Output[*CacheIdentityType]{
		OutputState: in.ToCacheIdentityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Day of the week on which the maintenance window will occur.
type MaintenanceDayOfWeekType string

const (
	MaintenanceDayOfWeekTypeMonday    = MaintenanceDayOfWeekType("Monday")
	MaintenanceDayOfWeekTypeTuesday   = MaintenanceDayOfWeekType("Tuesday")
	MaintenanceDayOfWeekTypeWednesday = MaintenanceDayOfWeekType("Wednesday")
	MaintenanceDayOfWeekTypeThursday  = MaintenanceDayOfWeekType("Thursday")
	MaintenanceDayOfWeekTypeFriday    = MaintenanceDayOfWeekType("Friday")
	MaintenanceDayOfWeekTypeSaturday  = MaintenanceDayOfWeekType("Saturday")
	MaintenanceDayOfWeekTypeSunday    = MaintenanceDayOfWeekType("Sunday")
)

func (MaintenanceDayOfWeekType) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceDayOfWeekType)(nil)).Elem()
}

func (e MaintenanceDayOfWeekType) ToMaintenanceDayOfWeekTypeOutput() MaintenanceDayOfWeekTypeOutput {
	return pulumi.ToOutput(e).(MaintenanceDayOfWeekTypeOutput)
}

func (e MaintenanceDayOfWeekType) ToMaintenanceDayOfWeekTypeOutputWithContext(ctx context.Context) MaintenanceDayOfWeekTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MaintenanceDayOfWeekTypeOutput)
}

func (e MaintenanceDayOfWeekType) ToMaintenanceDayOfWeekTypePtrOutput() MaintenanceDayOfWeekTypePtrOutput {
	return e.ToMaintenanceDayOfWeekTypePtrOutputWithContext(context.Background())
}

func (e MaintenanceDayOfWeekType) ToMaintenanceDayOfWeekTypePtrOutputWithContext(ctx context.Context) MaintenanceDayOfWeekTypePtrOutput {
	return MaintenanceDayOfWeekType(e).ToMaintenanceDayOfWeekTypeOutputWithContext(ctx).ToMaintenanceDayOfWeekTypePtrOutputWithContext(ctx)
}

func (e MaintenanceDayOfWeekType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MaintenanceDayOfWeekType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MaintenanceDayOfWeekType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MaintenanceDayOfWeekType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MaintenanceDayOfWeekTypeOutput struct{ *pulumi.OutputState }

func (MaintenanceDayOfWeekTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceDayOfWeekType)(nil)).Elem()
}

func (o MaintenanceDayOfWeekTypeOutput) ToMaintenanceDayOfWeekTypeOutput() MaintenanceDayOfWeekTypeOutput {
	return o
}

func (o MaintenanceDayOfWeekTypeOutput) ToMaintenanceDayOfWeekTypeOutputWithContext(ctx context.Context) MaintenanceDayOfWeekTypeOutput {
	return o
}

func (o MaintenanceDayOfWeekTypeOutput) ToMaintenanceDayOfWeekTypePtrOutput() MaintenanceDayOfWeekTypePtrOutput {
	return o.ToMaintenanceDayOfWeekTypePtrOutputWithContext(context.Background())
}

func (o MaintenanceDayOfWeekTypeOutput) ToMaintenanceDayOfWeekTypePtrOutputWithContext(ctx context.Context) MaintenanceDayOfWeekTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceDayOfWeekType) *MaintenanceDayOfWeekType {
		return &v
	}).(MaintenanceDayOfWeekTypePtrOutput)
}

func (o MaintenanceDayOfWeekTypeOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceDayOfWeekType] {
	return pulumix.Output[MaintenanceDayOfWeekType]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceDayOfWeekTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MaintenanceDayOfWeekTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MaintenanceDayOfWeekType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MaintenanceDayOfWeekTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MaintenanceDayOfWeekTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MaintenanceDayOfWeekType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MaintenanceDayOfWeekTypePtrOutput struct{ *pulumi.OutputState }

func (MaintenanceDayOfWeekTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceDayOfWeekType)(nil)).Elem()
}

func (o MaintenanceDayOfWeekTypePtrOutput) ToMaintenanceDayOfWeekTypePtrOutput() MaintenanceDayOfWeekTypePtrOutput {
	return o
}

func (o MaintenanceDayOfWeekTypePtrOutput) ToMaintenanceDayOfWeekTypePtrOutputWithContext(ctx context.Context) MaintenanceDayOfWeekTypePtrOutput {
	return o
}

func (o MaintenanceDayOfWeekTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceDayOfWeekType] {
	return pulumix.Output[*MaintenanceDayOfWeekType]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceDayOfWeekTypePtrOutput) Elem() MaintenanceDayOfWeekTypeOutput {
	return o.ApplyT(func(v *MaintenanceDayOfWeekType) MaintenanceDayOfWeekType {
		if v != nil {
			return *v
		}
		var ret MaintenanceDayOfWeekType
		return ret
	}).(MaintenanceDayOfWeekTypeOutput)
}

func (o MaintenanceDayOfWeekTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MaintenanceDayOfWeekTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MaintenanceDayOfWeekType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MaintenanceDayOfWeekTypeInput is an input type that accepts MaintenanceDayOfWeekTypeArgs and MaintenanceDayOfWeekTypeOutput values.
// You can construct a concrete instance of `MaintenanceDayOfWeekTypeInput` via:
//
//	MaintenanceDayOfWeekTypeArgs{...}
type MaintenanceDayOfWeekTypeInput interface {
	pulumi.Input

	ToMaintenanceDayOfWeekTypeOutput() MaintenanceDayOfWeekTypeOutput
	ToMaintenanceDayOfWeekTypeOutputWithContext(context.Context) MaintenanceDayOfWeekTypeOutput
}

var maintenanceDayOfWeekTypePtrType = reflect.TypeOf((**MaintenanceDayOfWeekType)(nil)).Elem()

type MaintenanceDayOfWeekTypePtrInput interface {
	pulumi.Input

	ToMaintenanceDayOfWeekTypePtrOutput() MaintenanceDayOfWeekTypePtrOutput
	ToMaintenanceDayOfWeekTypePtrOutputWithContext(context.Context) MaintenanceDayOfWeekTypePtrOutput
}

type maintenanceDayOfWeekTypePtr string

func MaintenanceDayOfWeekTypePtr(v string) MaintenanceDayOfWeekTypePtrInput {
	return (*maintenanceDayOfWeekTypePtr)(&v)
}

func (*maintenanceDayOfWeekTypePtr) ElementType() reflect.Type {
	return maintenanceDayOfWeekTypePtrType
}

func (in *maintenanceDayOfWeekTypePtr) ToMaintenanceDayOfWeekTypePtrOutput() MaintenanceDayOfWeekTypePtrOutput {
	return pulumi.ToOutput(in).(MaintenanceDayOfWeekTypePtrOutput)
}

func (in *maintenanceDayOfWeekTypePtr) ToMaintenanceDayOfWeekTypePtrOutputWithContext(ctx context.Context) MaintenanceDayOfWeekTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MaintenanceDayOfWeekTypePtrOutput)
}

func (in *maintenanceDayOfWeekTypePtr) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceDayOfWeekType] {
	return pulumix.Output[*MaintenanceDayOfWeekType]{
		OutputState: in.ToMaintenanceDayOfWeekTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Access allowed by this rule.
type NfsAccessRuleAccess string

const (
	NfsAccessRuleAccessNo = NfsAccessRuleAccess("no")
	NfsAccessRuleAccessRo = NfsAccessRuleAccess("ro")
	NfsAccessRuleAccessRw = NfsAccessRuleAccess("rw")
)

// Scope for this rule. The scope and filter determine which clients match the rule.
type NfsAccessRuleScope string

const (
	NfsAccessRuleScopeDefault = NfsAccessRuleScope("default")
	NfsAccessRuleScopeNetwork = NfsAccessRuleScope("network")
	NfsAccessRuleScopeHost    = NfsAccessRuleScope("host")
)

// Storage target operational state.
type OperationalStateType string

const (
	OperationalStateTypeReady     = OperationalStateType("Ready")
	OperationalStateTypeBusy      = OperationalStateType("Busy")
	OperationalStateTypeSuspended = OperationalStateType("Suspended")
	OperationalStateTypeFlushing  = OperationalStateType("Flushing")
)

// Type of the Storage Target.
type StorageTargetType string

const (
	StorageTargetTypeNfs3    = StorageTargetType("nfs3")
	StorageTargetTypeClfs    = StorageTargetType("clfs")
	StorageTargetTypeUnknown = StorageTargetType("unknown")
	StorageTargetTypeBlobNfs = StorageTargetType("blobNfs")
)

// This setting determines how the cache gets username and group names for clients.
type UsernameSource string

const (
	UsernameSourceAD   = UsernameSource("AD")
	UsernameSourceLDAP = UsernameSource("LDAP")
	UsernameSourceFile = UsernameSource("File")
	UsernameSourceNone = UsernameSource("None")
)

func init() {
	pulumi.RegisterOutputType(AmlFilesystemIdentityTypeOutput{})
	pulumi.RegisterOutputType(AmlFilesystemIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(CacheIdentityTypeOutput{})
	pulumi.RegisterOutputType(CacheIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceDayOfWeekTypeOutput{})
	pulumi.RegisterOutputType(MaintenanceDayOfWeekTypePtrOutput{})
}
