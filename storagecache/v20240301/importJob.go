// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240301

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type ImportJob struct {
	pulumi.CustomResourceState

	// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
	BlobsImportedPerSecond pulumi.Float64Output `pulumi:"blobsImportedPerSecond"`
	// A recent and frequently updated rate of blobs walked per second.
	BlobsWalkedPerSecond pulumi.Float64Output `pulumi:"blobsWalkedPerSecond"`
	// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
	ConflictResolutionMode pulumi.StringPtrOutput `pulumi:"conflictResolutionMode"`
	// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
	ImportPrefixes pulumi.StringArrayOutput `pulumi:"importPrefixes"`
	// The time of the last completed archive operation
	LastCompletionTime pulumi.StringOutput `pulumi:"lastCompletionTime"`
	// The time the latest archive operation started
	LastStartedTime pulumi.StringOutput `pulumi:"lastStartedTime"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
	MaximumErrors pulumi.IntPtrOutput `pulumi:"maximumErrors"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// ARM provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
	State pulumi.StringOutput `pulumi:"state"`
	// The status message of the import job.
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The total blobs that have been imported since import began.
	TotalBlobsImported pulumi.Float64Output `pulumi:"totalBlobsImported"`
	// The total blob objects walked.
	TotalBlobsWalked pulumi.Float64Output `pulumi:"totalBlobsWalked"`
	// Number of conflicts in the import job.
	TotalConflicts pulumi.IntOutput `pulumi:"totalConflicts"`
	// Number of errors in the import job.
	TotalErrors pulumi.IntOutput `pulumi:"totalErrors"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewImportJob registers a new resource with the given unique name, arguments, and options.
func NewImportJob(ctx *pulumi.Context,
	name string, args *ImportJobArgs, opts ...pulumi.ResourceOption) (*ImportJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AmlFilesystemName == nil {
		return nil, errors.New("invalid value for required argument 'AmlFilesystemName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ConflictResolutionMode == nil {
		args.ConflictResolutionMode = pulumi.StringPtr("Fail")
	}
	if args.MaximumErrors == nil {
		args.MaximumErrors = pulumi.IntPtr(0)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:storagecache/v20240301:importJob"),
		},
		{
			Type: pulumi.String("azure-native:storagecache:ImportJob"),
		},
		{
			Type: pulumi.String("azure-native:storagecache:importJob"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImportJob
	err := ctx.RegisterResource("azure-native:storagecache/v20240301:ImportJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImportJob gets an existing ImportJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImportJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImportJobState, opts ...pulumi.ResourceOption) (*ImportJob, error) {
	var resource ImportJob
	err := ctx.ReadResource("azure-native:storagecache/v20240301:ImportJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImportJob resources.
type importJobState struct {
}

type ImportJobState struct {
}

func (ImportJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*importJobState)(nil)).Elem()
}

type importJobArgs struct {
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName string `pulumi:"amlFilesystemName"`
	// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
	ConflictResolutionMode *string `pulumi:"conflictResolutionMode"`
	// Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	ImportJobName *string `pulumi:"importJobName"`
	// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
	ImportPrefixes []string `pulumi:"importPrefixes"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
	MaximumErrors *int `pulumi:"maximumErrors"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ImportJob resource.
type ImportJobArgs struct {
	// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	AmlFilesystemName pulumi.StringInput
	// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
	ConflictResolutionMode pulumi.StringPtrInput
	// Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
	ImportJobName pulumi.StringPtrInput
	// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
	ImportPrefixes pulumi.StringArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
	MaximumErrors pulumi.IntPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ImportJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*importJobArgs)(nil)).Elem()
}

type ImportJobInput interface {
	pulumi.Input

	ToImportJobOutput() ImportJobOutput
	ToImportJobOutputWithContext(ctx context.Context) ImportJobOutput
}

func (*ImportJob) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportJob)(nil)).Elem()
}

func (i *ImportJob) ToImportJobOutput() ImportJobOutput {
	return i.ToImportJobOutputWithContext(context.Background())
}

func (i *ImportJob) ToImportJobOutputWithContext(ctx context.Context) ImportJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportJobOutput)
}

type ImportJobOutput struct{ *pulumi.OutputState }

func (ImportJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportJob)(nil)).Elem()
}

func (o ImportJobOutput) ToImportJobOutput() ImportJobOutput {
	return o
}

func (o ImportJobOutput) ToImportJobOutputWithContext(ctx context.Context) ImportJobOutput {
	return o
}

// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
func (o ImportJobOutput) BlobsImportedPerSecond() pulumi.Float64Output {
	return o.ApplyT(func(v *ImportJob) pulumi.Float64Output { return v.BlobsImportedPerSecond }).(pulumi.Float64Output)
}

// A recent and frequently updated rate of blobs walked per second.
func (o ImportJobOutput) BlobsWalkedPerSecond() pulumi.Float64Output {
	return o.ApplyT(func(v *ImportJob) pulumi.Float64Output { return v.BlobsWalkedPerSecond }).(pulumi.Float64Output)
}

// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
func (o ImportJobOutput) ConflictResolutionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringPtrOutput { return v.ConflictResolutionMode }).(pulumi.StringPtrOutput)
}

// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
func (o ImportJobOutput) ImportPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringArrayOutput { return v.ImportPrefixes }).(pulumi.StringArrayOutput)
}

// The time of the last completed archive operation
func (o ImportJobOutput) LastCompletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.LastCompletionTime }).(pulumi.StringOutput)
}

// The time the latest archive operation started
func (o ImportJobOutput) LastStartedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.LastStartedTime }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o ImportJobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
func (o ImportJobOutput) MaximumErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.IntPtrOutput { return v.MaximumErrors }).(pulumi.IntPtrOutput)
}

// The name of the resource
func (o ImportJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ARM provisioning state.
func (o ImportJobOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
func (o ImportJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The status message of the import job.
func (o ImportJobOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ImportJobOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ImportJob) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o ImportJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The total blobs that have been imported since import began.
func (o ImportJobOutput) TotalBlobsImported() pulumi.Float64Output {
	return o.ApplyT(func(v *ImportJob) pulumi.Float64Output { return v.TotalBlobsImported }).(pulumi.Float64Output)
}

// The total blob objects walked.
func (o ImportJobOutput) TotalBlobsWalked() pulumi.Float64Output {
	return o.ApplyT(func(v *ImportJob) pulumi.Float64Output { return v.TotalBlobsWalked }).(pulumi.Float64Output)
}

// Number of conflicts in the import job.
func (o ImportJobOutput) TotalConflicts() pulumi.IntOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.IntOutput { return v.TotalConflicts }).(pulumi.IntOutput)
}

// Number of errors in the import job.
func (o ImportJobOutput) TotalErrors() pulumi.IntOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.IntOutput { return v.TotalErrors }).(pulumi.IntOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ImportJobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ImportJobOutput{})
}
