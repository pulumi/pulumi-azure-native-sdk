// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfile struct {
	// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
	DisconnectDelay *string `pulumi:"disconnectDelay"`
	// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
	IdleDelay *string `pulumi:"idleDelay"`
	// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
	NoConnectDelay *string `pulumi:"noConnectDelay"`
	// Whether shutdown on disconnect is enabled
	ShutdownOnDisconnect *EnableState `pulumi:"shutdownOnDisconnect"`
	// Whether a VM will get shutdown when it has idled for a period of time.
	ShutdownOnIdle *ShutdownOnIdleMode `pulumi:"shutdownOnIdle"`
	// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
	ShutdownWhenNotConnected *EnableState `pulumi:"shutdownWhenNotConnected"`
}

// Defaults sets the appropriate defaults for AutoShutdownProfile
func (val *AutoShutdownProfile) Defaults() *AutoShutdownProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShutdownOnDisconnect == nil {
		shutdownOnDisconnect_ := EnableState("Disabled")
		tmp.ShutdownOnDisconnect = &shutdownOnDisconnect_
	}
	if tmp.ShutdownOnIdle == nil {
		shutdownOnIdle_ := ShutdownOnIdleMode("None")
		tmp.ShutdownOnIdle = &shutdownOnIdle_
	}
	if tmp.ShutdownWhenNotConnected == nil {
		shutdownWhenNotConnected_ := EnableState("Disabled")
		tmp.ShutdownWhenNotConnected = &shutdownWhenNotConnected_
	}
	return &tmp
}

// AutoShutdownProfileInput is an input type that accepts AutoShutdownProfileArgs and AutoShutdownProfileOutput values.
// You can construct a concrete instance of `AutoShutdownProfileInput` via:
//
//	AutoShutdownProfileArgs{...}
type AutoShutdownProfileInput interface {
	pulumi.Input

	ToAutoShutdownProfileOutput() AutoShutdownProfileOutput
	ToAutoShutdownProfileOutputWithContext(context.Context) AutoShutdownProfileOutput
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileArgs struct {
	// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
	DisconnectDelay pulumi.StringPtrInput `pulumi:"disconnectDelay"`
	// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
	IdleDelay pulumi.StringPtrInput `pulumi:"idleDelay"`
	// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
	NoConnectDelay pulumi.StringPtrInput `pulumi:"noConnectDelay"`
	// Whether shutdown on disconnect is enabled
	ShutdownOnDisconnect EnableStatePtrInput `pulumi:"shutdownOnDisconnect"`
	// Whether a VM will get shutdown when it has idled for a period of time.
	ShutdownOnIdle ShutdownOnIdleModePtrInput `pulumi:"shutdownOnIdle"`
	// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
	ShutdownWhenNotConnected EnableStatePtrInput `pulumi:"shutdownWhenNotConnected"`
}

// Defaults sets the appropriate defaults for AutoShutdownProfileArgs
func (val *AutoShutdownProfileArgs) Defaults() *AutoShutdownProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShutdownOnDisconnect == nil {
		tmp.ShutdownOnDisconnect = EnableState("Disabled")
	}
	if tmp.ShutdownOnIdle == nil {
		tmp.ShutdownOnIdle = ShutdownOnIdleMode("None")
	}
	if tmp.ShutdownWhenNotConnected == nil {
		tmp.ShutdownWhenNotConnected = EnableState("Disabled")
	}
	return &tmp
}
func (AutoShutdownProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoShutdownProfile)(nil)).Elem()
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfileOutput() AutoShutdownProfileOutput {
	return i.ToAutoShutdownProfileOutputWithContext(context.Background())
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfileOutputWithContext(ctx context.Context) AutoShutdownProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoShutdownProfileOutput)
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return i.ToAutoShutdownProfilePtrOutputWithContext(context.Background())
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoShutdownProfileOutput).ToAutoShutdownProfilePtrOutputWithContext(ctx)
}

// AutoShutdownProfilePtrInput is an input type that accepts AutoShutdownProfileArgs, AutoShutdownProfilePtr and AutoShutdownProfilePtrOutput values.
// You can construct a concrete instance of `AutoShutdownProfilePtrInput` via:
//
//	        AutoShutdownProfileArgs{...}
//
//	or:
//
//	        nil
type AutoShutdownProfilePtrInput interface {
	pulumi.Input

	ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput
	ToAutoShutdownProfilePtrOutputWithContext(context.Context) AutoShutdownProfilePtrOutput
}

type autoShutdownProfilePtrType AutoShutdownProfileArgs

func AutoShutdownProfilePtr(v *AutoShutdownProfileArgs) AutoShutdownProfilePtrInput {
	return (*autoShutdownProfilePtrType)(v)
}

func (*autoShutdownProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoShutdownProfile)(nil)).Elem()
}

func (i *autoShutdownProfilePtrType) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return i.ToAutoShutdownProfilePtrOutputWithContext(context.Background())
}

func (i *autoShutdownProfilePtrType) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoShutdownProfilePtrOutput)
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoShutdownProfile)(nil)).Elem()
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfileOutput() AutoShutdownProfileOutput {
	return o
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfileOutputWithContext(ctx context.Context) AutoShutdownProfileOutput {
	return o
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return o.ToAutoShutdownProfilePtrOutputWithContext(context.Background())
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoShutdownProfile) *AutoShutdownProfile {
		return &v
	}).(AutoShutdownProfilePtrOutput)
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfileOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *string { return v.DisconnectDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfileOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *string { return v.IdleDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfileOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *string { return v.NoConnectDelay }).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfileOutput) ShutdownOnDisconnect() EnableStatePtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *EnableState { return v.ShutdownOnDisconnect }).(EnableStatePtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfileOutput) ShutdownOnIdle() ShutdownOnIdleModePtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *ShutdownOnIdleMode { return v.ShutdownOnIdle }).(ShutdownOnIdleModePtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfileOutput) ShutdownWhenNotConnected() EnableStatePtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *EnableState { return v.ShutdownWhenNotConnected }).(EnableStatePtrOutput)
}

type AutoShutdownProfilePtrOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoShutdownProfile)(nil)).Elem()
}

func (o AutoShutdownProfilePtrOutput) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return o
}

func (o AutoShutdownProfilePtrOutput) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return o
}

func (o AutoShutdownProfilePtrOutput) Elem() AutoShutdownProfileOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) AutoShutdownProfile {
		if v != nil {
			return *v
		}
		var ret AutoShutdownProfile
		return ret
	}).(AutoShutdownProfileOutput)
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfilePtrOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *string {
		if v == nil {
			return nil
		}
		return v.DisconnectDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfilePtrOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *string {
		if v == nil {
			return nil
		}
		return v.IdleDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfilePtrOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *string {
		if v == nil {
			return nil
		}
		return v.NoConnectDelay
	}).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfilePtrOutput) ShutdownOnDisconnect() EnableStatePtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *EnableState {
		if v == nil {
			return nil
		}
		return v.ShutdownOnDisconnect
	}).(EnableStatePtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfilePtrOutput) ShutdownOnIdle() ShutdownOnIdleModePtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *ShutdownOnIdleMode {
		if v == nil {
			return nil
		}
		return v.ShutdownOnIdle
	}).(ShutdownOnIdleModePtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfilePtrOutput) ShutdownWhenNotConnected() EnableStatePtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *EnableState {
		if v == nil {
			return nil
		}
		return v.ShutdownWhenNotConnected
	}).(EnableStatePtrOutput)
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileResponse struct {
	// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
	DisconnectDelay *string `pulumi:"disconnectDelay"`
	// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
	IdleDelay *string `pulumi:"idleDelay"`
	// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
	NoConnectDelay *string `pulumi:"noConnectDelay"`
	// Whether shutdown on disconnect is enabled
	ShutdownOnDisconnect *string `pulumi:"shutdownOnDisconnect"`
	// Whether a VM will get shutdown when it has idled for a period of time.
	ShutdownOnIdle *string `pulumi:"shutdownOnIdle"`
	// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
	ShutdownWhenNotConnected *string `pulumi:"shutdownWhenNotConnected"`
}

// Defaults sets the appropriate defaults for AutoShutdownProfileResponse
func (val *AutoShutdownProfileResponse) Defaults() *AutoShutdownProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShutdownOnDisconnect == nil {
		shutdownOnDisconnect_ := "Disabled"
		tmp.ShutdownOnDisconnect = &shutdownOnDisconnect_
	}
	if tmp.ShutdownOnIdle == nil {
		shutdownOnIdle_ := "None"
		tmp.ShutdownOnIdle = &shutdownOnIdle_
	}
	if tmp.ShutdownWhenNotConnected == nil {
		shutdownWhenNotConnected_ := "Disabled"
		tmp.ShutdownWhenNotConnected = &shutdownWhenNotConnected_
	}
	return &tmp
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileResponseOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoShutdownProfileResponse)(nil)).Elem()
}

func (o AutoShutdownProfileResponseOutput) ToAutoShutdownProfileResponseOutput() AutoShutdownProfileResponseOutput {
	return o
}

func (o AutoShutdownProfileResponseOutput) ToAutoShutdownProfileResponseOutputWithContext(ctx context.Context) AutoShutdownProfileResponseOutput {
	return o
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfileResponseOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.DisconnectDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfileResponseOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.IdleDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfileResponseOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.NoConnectDelay }).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfileResponseOutput) ShutdownOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.ShutdownOnDisconnect }).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfileResponseOutput) ShutdownOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.ShutdownOnIdle }).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfileResponseOutput) ShutdownWhenNotConnected() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.ShutdownWhenNotConnected }).(pulumi.StringPtrOutput)
}

type AutoShutdownProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoShutdownProfileResponse)(nil)).Elem()
}

func (o AutoShutdownProfileResponsePtrOutput) ToAutoShutdownProfileResponsePtrOutput() AutoShutdownProfileResponsePtrOutput {
	return o
}

func (o AutoShutdownProfileResponsePtrOutput) ToAutoShutdownProfileResponsePtrOutputWithContext(ctx context.Context) AutoShutdownProfileResponsePtrOutput {
	return o
}

func (o AutoShutdownProfileResponsePtrOutput) Elem() AutoShutdownProfileResponseOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) AutoShutdownProfileResponse {
		if v != nil {
			return *v
		}
		var ret AutoShutdownProfileResponse
		return ret
	}).(AutoShutdownProfileResponseOutput)
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfileResponsePtrOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisconnectDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfileResponsePtrOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdleDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfileResponsePtrOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NoConnectDelay
	}).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfileResponsePtrOutput) ShutdownOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShutdownOnDisconnect
	}).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfileResponsePtrOutput) ShutdownOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShutdownOnIdle
	}).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfileResponsePtrOutput) ShutdownWhenNotConnected() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShutdownWhenNotConnected
	}).(pulumi.StringPtrOutput)
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfile struct {
	// The enabled access level for Client Access over RDP.
	ClientRdpAccess *ConnectionType `pulumi:"clientRdpAccess"`
	// The enabled access level for Client Access over SSH.
	ClientSshAccess *ConnectionType `pulumi:"clientSshAccess"`
	// The enabled access level for Web Access over RDP.
	WebRdpAccess *ConnectionType `pulumi:"webRdpAccess"`
	// The enabled access level for Web Access over SSH.
	WebSshAccess *ConnectionType `pulumi:"webSshAccess"`
}

// Defaults sets the appropriate defaults for ConnectionProfile
func (val *ConnectionProfile) Defaults() *ConnectionProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClientRdpAccess == nil {
		clientRdpAccess_ := ConnectionType("None")
		tmp.ClientRdpAccess = &clientRdpAccess_
	}
	if tmp.ClientSshAccess == nil {
		clientSshAccess_ := ConnectionType("None")
		tmp.ClientSshAccess = &clientSshAccess_
	}
	if tmp.WebRdpAccess == nil {
		webRdpAccess_ := ConnectionType("None")
		tmp.WebRdpAccess = &webRdpAccess_
	}
	if tmp.WebSshAccess == nil {
		webSshAccess_ := ConnectionType("None")
		tmp.WebSshAccess = &webSshAccess_
	}
	return &tmp
}

// ConnectionProfileInput is an input type that accepts ConnectionProfileArgs and ConnectionProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileInput` via:
//
//	ConnectionProfileArgs{...}
type ConnectionProfileInput interface {
	pulumi.Input

	ToConnectionProfileOutput() ConnectionProfileOutput
	ToConnectionProfileOutputWithContext(context.Context) ConnectionProfileOutput
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileArgs struct {
	// The enabled access level for Client Access over RDP.
	ClientRdpAccess ConnectionTypePtrInput `pulumi:"clientRdpAccess"`
	// The enabled access level for Client Access over SSH.
	ClientSshAccess ConnectionTypePtrInput `pulumi:"clientSshAccess"`
	// The enabled access level for Web Access over RDP.
	WebRdpAccess ConnectionTypePtrInput `pulumi:"webRdpAccess"`
	// The enabled access level for Web Access over SSH.
	WebSshAccess ConnectionTypePtrInput `pulumi:"webSshAccess"`
}

// Defaults sets the appropriate defaults for ConnectionProfileArgs
func (val *ConnectionProfileArgs) Defaults() *ConnectionProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClientRdpAccess == nil {
		tmp.ClientRdpAccess = ConnectionType("None")
	}
	if tmp.ClientSshAccess == nil {
		tmp.ClientSshAccess = ConnectionType("None")
	}
	if tmp.WebRdpAccess == nil {
		tmp.WebRdpAccess = ConnectionType("None")
	}
	if tmp.WebSshAccess == nil {
		tmp.WebSshAccess = ConnectionType("None")
	}
	return &tmp
}
func (ConnectionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfile)(nil)).Elem()
}

func (i ConnectionProfileArgs) ToConnectionProfileOutput() ConnectionProfileOutput {
	return i.ToConnectionProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileArgs) ToConnectionProfileOutputWithContext(ctx context.Context) ConnectionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOutput)
}

func (i ConnectionProfileArgs) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return i.ToConnectionProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileArgs) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOutput).ToConnectionProfilePtrOutputWithContext(ctx)
}

// ConnectionProfilePtrInput is an input type that accepts ConnectionProfileArgs, ConnectionProfilePtr and ConnectionProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfilePtrInput` via:
//
//	        ConnectionProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput
	ToConnectionProfilePtrOutputWithContext(context.Context) ConnectionProfilePtrOutput
}

type connectionProfilePtrType ConnectionProfileArgs

func ConnectionProfilePtr(v *ConnectionProfileArgs) ConnectionProfilePtrInput {
	return (*connectionProfilePtrType)(v)
}

func (*connectionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfile)(nil)).Elem()
}

func (i *connectionProfilePtrType) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return i.ToConnectionProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfilePtrType) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePtrOutput)
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfile)(nil)).Elem()
}

func (o ConnectionProfileOutput) ToConnectionProfileOutput() ConnectionProfileOutput {
	return o
}

func (o ConnectionProfileOutput) ToConnectionProfileOutputWithContext(ctx context.Context) ConnectionProfileOutput {
	return o
}

func (o ConnectionProfileOutput) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return o.ToConnectionProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileOutput) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfile) *ConnectionProfile {
		return &v
	}).(ConnectionProfilePtrOutput)
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfileOutput) ClientRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.ClientRdpAccess }).(ConnectionTypePtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfileOutput) ClientSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.ClientSshAccess }).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfileOutput) WebRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.WebRdpAccess }).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfileOutput) WebSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.WebSshAccess }).(ConnectionTypePtrOutput)
}

type ConnectionProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfile)(nil)).Elem()
}

func (o ConnectionProfilePtrOutput) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return o
}

func (o ConnectionProfilePtrOutput) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return o
}

func (o ConnectionProfilePtrOutput) Elem() ConnectionProfileOutput {
	return o.ApplyT(func(v *ConnectionProfile) ConnectionProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfile
		return ret
	}).(ConnectionProfileOutput)
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfilePtrOutput) ClientRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.ClientRdpAccess
	}).(ConnectionTypePtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfilePtrOutput) ClientSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.ClientSshAccess
	}).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfilePtrOutput) WebRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.WebRdpAccess
	}).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfilePtrOutput) WebSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.WebSshAccess
	}).(ConnectionTypePtrOutput)
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileResponse struct {
	// The enabled access level for Client Access over RDP.
	ClientRdpAccess *string `pulumi:"clientRdpAccess"`
	// The enabled access level for Client Access over SSH.
	ClientSshAccess *string `pulumi:"clientSshAccess"`
	// The enabled access level for Web Access over RDP.
	WebRdpAccess *string `pulumi:"webRdpAccess"`
	// The enabled access level for Web Access over SSH.
	WebSshAccess *string `pulumi:"webSshAccess"`
}

// Defaults sets the appropriate defaults for ConnectionProfileResponse
func (val *ConnectionProfileResponse) Defaults() *ConnectionProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClientRdpAccess == nil {
		clientRdpAccess_ := "None"
		tmp.ClientRdpAccess = &clientRdpAccess_
	}
	if tmp.ClientSshAccess == nil {
		clientSshAccess_ := "None"
		tmp.ClientSshAccess = &clientSshAccess_
	}
	if tmp.WebRdpAccess == nil {
		webRdpAccess_ := "None"
		tmp.WebRdpAccess = &webRdpAccess_
	}
	if tmp.WebSshAccess == nil {
		webSshAccess_ := "None"
		tmp.WebSshAccess = &webSshAccess_
	}
	return &tmp
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileResponseOutput struct{ *pulumi.OutputState }

func (ConnectionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileResponse)(nil)).Elem()
}

func (o ConnectionProfileResponseOutput) ToConnectionProfileResponseOutput() ConnectionProfileResponseOutput {
	return o
}

func (o ConnectionProfileResponseOutput) ToConnectionProfileResponseOutputWithContext(ctx context.Context) ConnectionProfileResponseOutput {
	return o
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfileResponseOutput) ClientRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.ClientRdpAccess }).(pulumi.StringPtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfileResponseOutput) ClientSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.ClientSshAccess }).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfileResponseOutput) WebRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.WebRdpAccess }).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfileResponseOutput) WebSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.WebSshAccess }).(pulumi.StringPtrOutput)
}

type ConnectionProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileResponse)(nil)).Elem()
}

func (o ConnectionProfileResponsePtrOutput) ToConnectionProfileResponsePtrOutput() ConnectionProfileResponsePtrOutput {
	return o
}

func (o ConnectionProfileResponsePtrOutput) ToConnectionProfileResponsePtrOutputWithContext(ctx context.Context) ConnectionProfileResponsePtrOutput {
	return o
}

func (o ConnectionProfileResponsePtrOutput) Elem() ConnectionProfileResponseOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) ConnectionProfileResponse {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileResponse
		return ret
	}).(ConnectionProfileResponseOutput)
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfileResponsePtrOutput) ClientRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientRdpAccess
	}).(pulumi.StringPtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfileResponsePtrOutput) ClientSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSshAccess
	}).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfileResponsePtrOutput) WebRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.WebRdpAccess
	}).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfileResponsePtrOutput) WebSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.WebSshAccess
	}).(pulumi.StringPtrOutput)
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfile struct {
	// The external subnet resource id
	SubnetId *string `pulumi:"subnetId"`
}

// LabPlanNetworkProfileInput is an input type that accepts LabPlanNetworkProfileArgs and LabPlanNetworkProfileOutput values.
// You can construct a concrete instance of `LabPlanNetworkProfileInput` via:
//
//	LabPlanNetworkProfileArgs{...}
type LabPlanNetworkProfileInput interface {
	pulumi.Input

	ToLabPlanNetworkProfileOutput() LabPlanNetworkProfileOutput
	ToLabPlanNetworkProfileOutputWithContext(context.Context) LabPlanNetworkProfileOutput
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileArgs struct {
	// The external subnet resource id
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (LabPlanNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabPlanNetworkProfile)(nil)).Elem()
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfileOutput() LabPlanNetworkProfileOutput {
	return i.ToLabPlanNetworkProfileOutputWithContext(context.Background())
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfileOutputWithContext(ctx context.Context) LabPlanNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabPlanNetworkProfileOutput)
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return i.ToLabPlanNetworkProfilePtrOutputWithContext(context.Background())
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabPlanNetworkProfileOutput).ToLabPlanNetworkProfilePtrOutputWithContext(ctx)
}

// LabPlanNetworkProfilePtrInput is an input type that accepts LabPlanNetworkProfileArgs, LabPlanNetworkProfilePtr and LabPlanNetworkProfilePtrOutput values.
// You can construct a concrete instance of `LabPlanNetworkProfilePtrInput` via:
//
//	        LabPlanNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type LabPlanNetworkProfilePtrInput interface {
	pulumi.Input

	ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput
	ToLabPlanNetworkProfilePtrOutputWithContext(context.Context) LabPlanNetworkProfilePtrOutput
}

type labPlanNetworkProfilePtrType LabPlanNetworkProfileArgs

func LabPlanNetworkProfilePtr(v *LabPlanNetworkProfileArgs) LabPlanNetworkProfilePtrInput {
	return (*labPlanNetworkProfilePtrType)(v)
}

func (*labPlanNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabPlanNetworkProfile)(nil)).Elem()
}

func (i *labPlanNetworkProfilePtrType) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return i.ToLabPlanNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *labPlanNetworkProfilePtrType) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabPlanNetworkProfilePtrOutput)
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabPlanNetworkProfile)(nil)).Elem()
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfileOutput() LabPlanNetworkProfileOutput {
	return o
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfileOutputWithContext(ctx context.Context) LabPlanNetworkProfileOutput {
	return o
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return o.ToLabPlanNetworkProfilePtrOutputWithContext(context.Background())
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabPlanNetworkProfile) *LabPlanNetworkProfile {
		return &v
	}).(LabPlanNetworkProfilePtrOutput)
}

// The external subnet resource id
func (o LabPlanNetworkProfileOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabPlanNetworkProfile) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type LabPlanNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabPlanNetworkProfile)(nil)).Elem()
}

func (o LabPlanNetworkProfilePtrOutput) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return o
}

func (o LabPlanNetworkProfilePtrOutput) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return o
}

func (o LabPlanNetworkProfilePtrOutput) Elem() LabPlanNetworkProfileOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfile) LabPlanNetworkProfile {
		if v != nil {
			return *v
		}
		var ret LabPlanNetworkProfile
		return ret
	}).(LabPlanNetworkProfileOutput)
}

// The external subnet resource id
func (o LabPlanNetworkProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileResponse struct {
	// The external subnet resource id
	SubnetId *string `pulumi:"subnetId"`
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabPlanNetworkProfileResponse)(nil)).Elem()
}

func (o LabPlanNetworkProfileResponseOutput) ToLabPlanNetworkProfileResponseOutput() LabPlanNetworkProfileResponseOutput {
	return o
}

func (o LabPlanNetworkProfileResponseOutput) ToLabPlanNetworkProfileResponseOutputWithContext(ctx context.Context) LabPlanNetworkProfileResponseOutput {
	return o
}

// The external subnet resource id
func (o LabPlanNetworkProfileResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabPlanNetworkProfileResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type LabPlanNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabPlanNetworkProfileResponse)(nil)).Elem()
}

func (o LabPlanNetworkProfileResponsePtrOutput) ToLabPlanNetworkProfileResponsePtrOutput() LabPlanNetworkProfileResponsePtrOutput {
	return o
}

func (o LabPlanNetworkProfileResponsePtrOutput) ToLabPlanNetworkProfileResponsePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfileResponsePtrOutput {
	return o
}

func (o LabPlanNetworkProfileResponsePtrOutput) Elem() LabPlanNetworkProfileResponseOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfileResponse) LabPlanNetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret LabPlanNetworkProfileResponse
		return ret
	}).(LabPlanNetworkProfileResponseOutput)
}

// The external subnet resource id
func (o LabPlanNetworkProfileResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Recurrence pattern of a lab schedule.
type RecurrencePattern struct {
	// When the recurrence will expire. This date is inclusive.
	ExpirationDate string `pulumi:"expirationDate"`
	// The frequency of the recurrence.
	Frequency RecurrenceFrequency `pulumi:"frequency"`
	// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
	Interval *int `pulumi:"interval"`
	// The week days the schedule runs. Used for when the Frequency is set to Weekly.
	WeekDays []WeekDay `pulumi:"weekDays"`
}

// RecurrencePatternInput is an input type that accepts RecurrencePatternArgs and RecurrencePatternOutput values.
// You can construct a concrete instance of `RecurrencePatternInput` via:
//
//	RecurrencePatternArgs{...}
type RecurrencePatternInput interface {
	pulumi.Input

	ToRecurrencePatternOutput() RecurrencePatternOutput
	ToRecurrencePatternOutputWithContext(context.Context) RecurrencePatternOutput
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternArgs struct {
	// When the recurrence will expire. This date is inclusive.
	ExpirationDate pulumi.StringInput `pulumi:"expirationDate"`
	// The frequency of the recurrence.
	Frequency RecurrenceFrequencyInput `pulumi:"frequency"`
	// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The week days the schedule runs. Used for when the Frequency is set to Weekly.
	WeekDays WeekDayArrayInput `pulumi:"weekDays"`
}

func (RecurrencePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePattern)(nil)).Elem()
}

func (i RecurrencePatternArgs) ToRecurrencePatternOutput() RecurrencePatternOutput {
	return i.ToRecurrencePatternOutputWithContext(context.Background())
}

func (i RecurrencePatternArgs) ToRecurrencePatternOutputWithContext(ctx context.Context) RecurrencePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternOutput)
}

func (i RecurrencePatternArgs) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return i.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (i RecurrencePatternArgs) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternOutput).ToRecurrencePatternPtrOutputWithContext(ctx)
}

// RecurrencePatternPtrInput is an input type that accepts RecurrencePatternArgs, RecurrencePatternPtr and RecurrencePatternPtrOutput values.
// You can construct a concrete instance of `RecurrencePatternPtrInput` via:
//
//	        RecurrencePatternArgs{...}
//
//	or:
//
//	        nil
type RecurrencePatternPtrInput interface {
	pulumi.Input

	ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput
	ToRecurrencePatternPtrOutputWithContext(context.Context) RecurrencePatternPtrOutput
}

type recurrencePatternPtrType RecurrencePatternArgs

func RecurrencePatternPtr(v *RecurrencePatternArgs) RecurrencePatternPtrInput {
	return (*recurrencePatternPtrType)(v)
}

func (*recurrencePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePattern)(nil)).Elem()
}

func (i *recurrencePatternPtrType) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return i.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (i *recurrencePatternPtrType) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternPtrOutput)
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternOutput struct{ *pulumi.OutputState }

func (RecurrencePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePattern)(nil)).Elem()
}

func (o RecurrencePatternOutput) ToRecurrencePatternOutput() RecurrencePatternOutput {
	return o
}

func (o RecurrencePatternOutput) ToRecurrencePatternOutputWithContext(ctx context.Context) RecurrencePatternOutput {
	return o
}

func (o RecurrencePatternOutput) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return o.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (o RecurrencePatternOutput) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrencePattern) *RecurrencePattern {
		return &v
	}).(RecurrencePatternPtrOutput)
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrencePattern) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternOutput) Frequency() RecurrenceFrequencyOutput {
	return o.ApplyT(func(v RecurrencePattern) RecurrenceFrequency { return v.Frequency }).(RecurrenceFrequencyOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrencePattern) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternOutput) WeekDays() WeekDayArrayOutput {
	return o.ApplyT(func(v RecurrencePattern) []WeekDay { return v.WeekDays }).(WeekDayArrayOutput)
}

type RecurrencePatternPtrOutput struct{ *pulumi.OutputState }

func (RecurrencePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePattern)(nil)).Elem()
}

func (o RecurrencePatternPtrOutput) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return o
}

func (o RecurrencePatternPtrOutput) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return o
}

func (o RecurrencePatternPtrOutput) Elem() RecurrencePatternOutput {
	return o.ApplyT(func(v *RecurrencePattern) RecurrencePattern {
		if v != nil {
			return *v
		}
		var ret RecurrencePattern
		return ret
	}).(RecurrencePatternOutput)
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternPtrOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrencePattern) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationDate
	}).(pulumi.StringPtrOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternPtrOutput) Frequency() RecurrenceFrequencyPtrOutput {
	return o.ApplyT(func(v *RecurrencePattern) *RecurrenceFrequency {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(RecurrenceFrequencyPtrOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrencePattern) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternPtrOutput) WeekDays() WeekDayArrayOutput {
	return o.ApplyT(func(v *RecurrencePattern) []WeekDay {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(WeekDayArrayOutput)
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternResponse struct {
	// When the recurrence will expire. This date is inclusive.
	ExpirationDate string `pulumi:"expirationDate"`
	// The frequency of the recurrence.
	Frequency string `pulumi:"frequency"`
	// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
	Interval *int `pulumi:"interval"`
	// The week days the schedule runs. Used for when the Frequency is set to Weekly.
	WeekDays []string `pulumi:"weekDays"`
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternResponseOutput struct{ *pulumi.OutputState }

func (RecurrencePatternResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePatternResponse)(nil)).Elem()
}

func (o RecurrencePatternResponseOutput) ToRecurrencePatternResponseOutput() RecurrencePatternResponseOutput {
	return o
}

func (o RecurrencePatternResponseOutput) ToRecurrencePatternResponseOutputWithContext(ctx context.Context) RecurrencePatternResponseOutput {
	return o
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternResponseOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrencePatternResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrencePatternResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePatternResponse)(nil)).Elem()
}

func (o RecurrencePatternResponsePtrOutput) ToRecurrencePatternResponsePtrOutput() RecurrencePatternResponsePtrOutput {
	return o
}

func (o RecurrencePatternResponsePtrOutput) ToRecurrencePatternResponsePtrOutputWithContext(ctx context.Context) RecurrencePatternResponsePtrOutput {
	return o
}

func (o RecurrencePatternResponsePtrOutput) Elem() RecurrencePatternResponseOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) RecurrencePatternResponse {
		if v != nil {
			return *v
		}
		var ret RecurrencePatternResponse
		return ret
	}).(RecurrencePatternResponseOutput)
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternResponsePtrOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationDate
	}).(pulumi.StringPtrOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

// Support contact information and instructions.
type SupportInfo struct {
	// Support contact email address.
	Email *string `pulumi:"email"`
	// Support instructions.
	Instructions *string `pulumi:"instructions"`
	// Support contact phone number.
	Phone *string `pulumi:"phone"`
	// Support web address.
	Url *string `pulumi:"url"`
}

// SupportInfoInput is an input type that accepts SupportInfoArgs and SupportInfoOutput values.
// You can construct a concrete instance of `SupportInfoInput` via:
//
//	SupportInfoArgs{...}
type SupportInfoInput interface {
	pulumi.Input

	ToSupportInfoOutput() SupportInfoOutput
	ToSupportInfoOutputWithContext(context.Context) SupportInfoOutput
}

// Support contact information and instructions.
type SupportInfoArgs struct {
	// Support contact email address.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Support instructions.
	Instructions pulumi.StringPtrInput `pulumi:"instructions"`
	// Support contact phone number.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
	// Support web address.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SupportInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportInfo)(nil)).Elem()
}

func (i SupportInfoArgs) ToSupportInfoOutput() SupportInfoOutput {
	return i.ToSupportInfoOutputWithContext(context.Background())
}

func (i SupportInfoArgs) ToSupportInfoOutputWithContext(ctx context.Context) SupportInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportInfoOutput)
}

func (i SupportInfoArgs) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return i.ToSupportInfoPtrOutputWithContext(context.Background())
}

func (i SupportInfoArgs) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportInfoOutput).ToSupportInfoPtrOutputWithContext(ctx)
}

// SupportInfoPtrInput is an input type that accepts SupportInfoArgs, SupportInfoPtr and SupportInfoPtrOutput values.
// You can construct a concrete instance of `SupportInfoPtrInput` via:
//
//	        SupportInfoArgs{...}
//
//	or:
//
//	        nil
type SupportInfoPtrInput interface {
	pulumi.Input

	ToSupportInfoPtrOutput() SupportInfoPtrOutput
	ToSupportInfoPtrOutputWithContext(context.Context) SupportInfoPtrOutput
}

type supportInfoPtrType SupportInfoArgs

func SupportInfoPtr(v *SupportInfoArgs) SupportInfoPtrInput {
	return (*supportInfoPtrType)(v)
}

func (*supportInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportInfo)(nil)).Elem()
}

func (i *supportInfoPtrType) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return i.ToSupportInfoPtrOutputWithContext(context.Background())
}

func (i *supportInfoPtrType) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportInfoPtrOutput)
}

// Support contact information and instructions.
type SupportInfoOutput struct{ *pulumi.OutputState }

func (SupportInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportInfo)(nil)).Elem()
}

func (o SupportInfoOutput) ToSupportInfoOutput() SupportInfoOutput {
	return o
}

func (o SupportInfoOutput) ToSupportInfoOutputWithContext(ctx context.Context) SupportInfoOutput {
	return o
}

func (o SupportInfoOutput) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return o.ToSupportInfoPtrOutputWithContext(context.Background())
}

func (o SupportInfoOutput) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SupportInfo) *SupportInfo {
		return &v
	}).(SupportInfoPtrOutput)
}

// Support contact email address.
func (o SupportInfoOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Instructions }).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SupportInfoPtrOutput struct{ *pulumi.OutputState }

func (SupportInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportInfo)(nil)).Elem()
}

func (o SupportInfoPtrOutput) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return o
}

func (o SupportInfoPtrOutput) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return o
}

func (o SupportInfoPtrOutput) Elem() SupportInfoOutput {
	return o.ApplyT(func(v *SupportInfo) SupportInfo {
		if v != nil {
			return *v
		}
		var ret SupportInfo
		return ret
	}).(SupportInfoOutput)
}

// Support contact email address.
func (o SupportInfoPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoPtrOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Instructions
	}).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoPtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Phone
	}).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Support contact information and instructions.
type SupportInfoResponse struct {
	// Support contact email address.
	Email *string `pulumi:"email"`
	// Support instructions.
	Instructions *string `pulumi:"instructions"`
	// Support contact phone number.
	Phone *string `pulumi:"phone"`
	// Support web address.
	Url *string `pulumi:"url"`
}

// Support contact information and instructions.
type SupportInfoResponseOutput struct{ *pulumi.OutputState }

func (SupportInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportInfoResponse)(nil)).Elem()
}

func (o SupportInfoResponseOutput) ToSupportInfoResponseOutput() SupportInfoResponseOutput {
	return o
}

func (o SupportInfoResponseOutput) ToSupportInfoResponseOutputWithContext(ctx context.Context) SupportInfoResponseOutput {
	return o
}

// Support contact email address.
func (o SupportInfoResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoResponseOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Instructions }).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoResponseOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SupportInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SupportInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportInfoResponse)(nil)).Elem()
}

func (o SupportInfoResponsePtrOutput) ToSupportInfoResponsePtrOutput() SupportInfoResponsePtrOutput {
	return o
}

func (o SupportInfoResponsePtrOutput) ToSupportInfoResponsePtrOutputWithContext(ctx context.Context) SupportInfoResponsePtrOutput {
	return o
}

func (o SupportInfoResponsePtrOutput) Elem() SupportInfoResponseOutput {
	return o.ApplyT(func(v *SupportInfoResponse) SupportInfoResponse {
		if v != nil {
			return *v
		}
		var ret SupportInfoResponse
		return ret
	}).(SupportInfoResponseOutput)
}

// Support contact email address.
func (o SupportInfoResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoResponsePtrOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Instructions
	}).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoResponsePtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Phone
	}).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AutoShutdownProfileOutput{})
	pulumi.RegisterOutputType(AutoShutdownProfilePtrOutput{})
	pulumi.RegisterOutputType(AutoShutdownProfileResponseOutput{})
	pulumi.RegisterOutputType(AutoShutdownProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileResponseOutput{})
	pulumi.RegisterOutputType(ConnectionProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfileOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrencePatternOutput{})
	pulumi.RegisterOutputType(RecurrencePatternPtrOutput{})
	pulumi.RegisterOutputType(RecurrencePatternResponseOutput{})
	pulumi.RegisterOutputType(RecurrencePatternResponsePtrOutput{})
	pulumi.RegisterOutputType(SupportInfoOutput{})
	pulumi.RegisterOutputType(SupportInfoPtrOutput{})
	pulumi.RegisterOutputType(SupportInfoResponseOutput{})
	pulumi.RegisterOutputType(SupportInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
