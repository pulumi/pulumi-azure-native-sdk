// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hybridcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the specified cloud connector in a specified resource group.
// Azure REST API version: 2023-01-01-preview.
func LookupCloudConnector(ctx *pulumi.Context, args *LookupCloudConnectorArgs, opts ...pulumi.InvokeOption) (*LookupCloudConnectorResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupCloudConnectorResult
	err := ctx.Invoke("azure-native:hybridcloud:getCloudConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCloudConnectorArgs struct {
	// The name of the cloud connector resource
	CloudConnectorName string `pulumi:"cloudConnectorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Cloud Connector resource.
type LookupCloudConnectorResult struct {
	// Account identifier of the remote cloud.
	AccountId *string `pulumi:"accountId"`
	// The cloud connector type.
	CloudType *string `pulumi:"cloudType"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag string `pulumi:"etag"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state of the cloud connector resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupCloudConnectorOutput(ctx *pulumi.Context, args LookupCloudConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupCloudConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCloudConnectorResult, error) {
			args := v.(LookupCloudConnectorArgs)
			r, err := LookupCloudConnector(ctx, &args, opts...)
			var s LookupCloudConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCloudConnectorResultOutput)
}

type LookupCloudConnectorOutputArgs struct {
	// The name of the cloud connector resource
	CloudConnectorName pulumi.StringInput `pulumi:"cloudConnectorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupCloudConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudConnectorArgs)(nil)).Elem()
}

// Cloud Connector resource.
type LookupCloudConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupCloudConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudConnectorResult)(nil)).Elem()
}

func (o LookupCloudConnectorResultOutput) ToLookupCloudConnectorResultOutput() LookupCloudConnectorResultOutput {
	return o
}

func (o LookupCloudConnectorResultOutput) ToLookupCloudConnectorResultOutputWithContext(ctx context.Context) LookupCloudConnectorResultOutput {
	return o
}

// Account identifier of the remote cloud.
func (o LookupCloudConnectorResultOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The cloud connector type.
func (o LookupCloudConnectorResultOutput) CloudType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) *string { return v.CloudType }).(pulumi.StringPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o LookupCloudConnectorResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupCloudConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupCloudConnectorResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupCloudConnectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the cloud connector resource.
func (o LookupCloudConnectorResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupCloudConnectorResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupCloudConnectorResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupCloudConnectorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudConnectorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudConnectorResultOutput{})
}
