// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230101preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource which represents the managed network connection between Azure Gateways and remote cloud gateways.
type CloudConnection struct {
	pulumi.CustomResourceState

	// The cloud connector which discovered the remote resource.
	CloudConnector ResourceReferenceResponsePtrOutput `pulumi:"cloudConnector"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the cloud collection resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Identifier for the remote cloud resource
	RemoteResourceId pulumi.StringPtrOutput `pulumi:"remoteResourceId"`
	// Shared key of the cloud connection.
	SharedKey pulumi.StringPtrOutput `pulumi:"sharedKey"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The virtualHub to which the cloud connection belongs.
	VirtualHub ResourceReferenceResponsePtrOutput `pulumi:"virtualHub"`
}

// NewCloudConnection registers a new resource with the given unique name, arguments, and options.
func NewCloudConnection(ctx *pulumi.Context,
	name string, args *CloudConnectionArgs, opts ...pulumi.ResourceOption) (*CloudConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridcloud:CloudConnection"),
		},
	})
	opts = append(opts, aliases)
	var resource CloudConnection
	err := ctx.RegisterResource("azure-native:hybridcloud/v20230101preview:CloudConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudConnection gets an existing CloudConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudConnectionState, opts ...pulumi.ResourceOption) (*CloudConnection, error) {
	var resource CloudConnection
	err := ctx.ReadResource("azure-native:hybridcloud/v20230101preview:CloudConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudConnection resources.
type cloudConnectionState struct {
}

type CloudConnectionState struct {
}

func (CloudConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudConnectionState)(nil)).Elem()
}

type cloudConnectionArgs struct {
	// The name of the cloud connection resource
	CloudConnectionName *string `pulumi:"cloudConnectionName"`
	// The cloud connector which discovered the remote resource.
	CloudConnector *ResourceReference `pulumi:"cloudConnector"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Identifier for the remote cloud resource
	RemoteResourceId *string `pulumi:"remoteResourceId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Shared key of the cloud connection.
	SharedKey *string `pulumi:"sharedKey"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The virtualHub to which the cloud connection belongs.
	VirtualHub *ResourceReference `pulumi:"virtualHub"`
}

// The set of arguments for constructing a CloudConnection resource.
type CloudConnectionArgs struct {
	// The name of the cloud connection resource
	CloudConnectionName pulumi.StringPtrInput
	// The cloud connector which discovered the remote resource.
	CloudConnector ResourceReferencePtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Identifier for the remote cloud resource
	RemoteResourceId pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Shared key of the cloud connection.
	SharedKey pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The virtualHub to which the cloud connection belongs.
	VirtualHub ResourceReferencePtrInput
}

func (CloudConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudConnectionArgs)(nil)).Elem()
}

type CloudConnectionInput interface {
	pulumi.Input

	ToCloudConnectionOutput() CloudConnectionOutput
	ToCloudConnectionOutputWithContext(ctx context.Context) CloudConnectionOutput
}

func (*CloudConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudConnection)(nil)).Elem()
}

func (i *CloudConnection) ToCloudConnectionOutput() CloudConnectionOutput {
	return i.ToCloudConnectionOutputWithContext(context.Background())
}

func (i *CloudConnection) ToCloudConnectionOutputWithContext(ctx context.Context) CloudConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudConnectionOutput)
}

type CloudConnectionOutput struct{ *pulumi.OutputState }

func (CloudConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudConnection)(nil)).Elem()
}

func (o CloudConnectionOutput) ToCloudConnectionOutput() CloudConnectionOutput {
	return o
}

func (o CloudConnectionOutput) ToCloudConnectionOutputWithContext(ctx context.Context) CloudConnectionOutput {
	return o
}

// The cloud connector which discovered the remote resource.
func (o CloudConnectionOutput) CloudConnector() ResourceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CloudConnection) ResourceReferenceResponsePtrOutput { return v.CloudConnector }).(ResourceReferenceResponsePtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o CloudConnectionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o CloudConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o CloudConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the cloud collection resource.
func (o CloudConnectionOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Identifier for the remote cloud resource
func (o CloudConnectionOutput) RemoteResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringPtrOutput { return v.RemoteResourceId }).(pulumi.StringPtrOutput)
}

// Shared key of the cloud connection.
func (o CloudConnectionOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringPtrOutput { return v.SharedKey }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o CloudConnectionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *CloudConnection) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o CloudConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o CloudConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The virtualHub to which the cloud connection belongs.
func (o CloudConnectionOutput) VirtualHub() ResourceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CloudConnection) ResourceReferenceResponsePtrOutput { return v.VirtualHub }).(ResourceReferenceResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CloudConnectionOutput{})
}
