// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20241201

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Microsoft.AwsConnector resource
type Ec2NetworkAcl struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties Ec2NetworkAclPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEc2NetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewEc2NetworkAcl(ctx *pulumi.Context,
	name string, args *Ec2NetworkAclArgs, opts ...pulumi.ResourceOption) (*Ec2NetworkAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:awsconnector:Ec2NetworkAcl"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Ec2NetworkAcl
	err := ctx.RegisterResource("azure-native:awsconnector/v20241201:Ec2NetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEc2NetworkAcl gets an existing Ec2NetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEc2NetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ec2NetworkAclState, opts ...pulumi.ResourceOption) (*Ec2NetworkAcl, error) {
	var resource Ec2NetworkAcl
	err := ctx.ReadResource("azure-native:awsconnector/v20241201:Ec2NetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ec2NetworkAcl resources.
type ec2NetworkAclState struct {
}

type Ec2NetworkAclState struct {
}

func (Ec2NetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2NetworkAclState)(nil)).Elem()
}

type ec2NetworkAclArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Name of Ec2NetworkAcl
	Name *string `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties *Ec2NetworkAclProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Ec2NetworkAcl resource.
type Ec2NetworkAclArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Name of Ec2NetworkAcl
	Name pulumi.StringPtrInput
	// The resource-specific properties for this resource.
	Properties Ec2NetworkAclPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (Ec2NetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2NetworkAclArgs)(nil)).Elem()
}

type Ec2NetworkAclInput interface {
	pulumi.Input

	ToEc2NetworkAclOutput() Ec2NetworkAclOutput
	ToEc2NetworkAclOutputWithContext(ctx context.Context) Ec2NetworkAclOutput
}

func (*Ec2NetworkAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2NetworkAcl)(nil)).Elem()
}

func (i *Ec2NetworkAcl) ToEc2NetworkAclOutput() Ec2NetworkAclOutput {
	return i.ToEc2NetworkAclOutputWithContext(context.Background())
}

func (i *Ec2NetworkAcl) ToEc2NetworkAclOutputWithContext(ctx context.Context) Ec2NetworkAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ec2NetworkAclOutput)
}

type Ec2NetworkAclOutput struct{ *pulumi.OutputState }

func (Ec2NetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2NetworkAcl)(nil)).Elem()
}

func (o Ec2NetworkAclOutput) ToEc2NetworkAclOutput() Ec2NetworkAclOutput {
	return o
}

func (o Ec2NetworkAclOutput) ToEc2NetworkAclOutputWithContext(ctx context.Context) Ec2NetworkAclOutput {
	return o
}

// The geo-location where the resource lives
func (o Ec2NetworkAclOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2NetworkAcl) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o Ec2NetworkAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2NetworkAcl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o Ec2NetworkAclOutput) Properties() Ec2NetworkAclPropertiesResponseOutput {
	return o.ApplyT(func(v *Ec2NetworkAcl) Ec2NetworkAclPropertiesResponseOutput { return v.Properties }).(Ec2NetworkAclPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o Ec2NetworkAclOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Ec2NetworkAcl) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o Ec2NetworkAclOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ec2NetworkAcl) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o Ec2NetworkAclOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2NetworkAcl) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(Ec2NetworkAclOutput{})
}
