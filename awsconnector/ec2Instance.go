// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsconnector

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Microsoft.AwsConnector resource
// Azure REST API version: 2024-12-01. Prior API version in Azure Native 2.x: 2024-12-01.
type Ec2Instance struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties Ec2InstancePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEc2Instance registers a new resource with the given unique name, arguments, and options.
func NewEc2Instance(ctx *pulumi.Context,
	name string, args *Ec2InstanceArgs, opts ...pulumi.ResourceOption) (*Ec2Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	if args.Properties != nil {
		args.Properties = args.Properties.ToEc2InstancePropertiesPtrOutput().ApplyT(func(v *Ec2InstanceProperties) *Ec2InstanceProperties { return v.Defaults() }).(Ec2InstancePropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:awsconnector/v20241201:Ec2Instance"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Ec2Instance
	err := ctx.RegisterResource("azure-native:awsconnector:Ec2Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEc2Instance gets an existing Ec2Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEc2Instance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ec2InstanceState, opts ...pulumi.ResourceOption) (*Ec2Instance, error) {
	var resource Ec2Instance
	err := ctx.ReadResource("azure-native:awsconnector:Ec2Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ec2Instance resources.
type ec2InstanceState struct {
}

type Ec2InstanceState struct {
}

func (Ec2InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2InstanceState)(nil)).Elem()
}

type ec2InstanceArgs struct {
	// The resource-specific properties for this resource.
	Properties *Ec2InstanceProperties `pulumi:"properties"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
}

// The set of arguments for constructing a Ec2Instance resource.
type Ec2InstanceArgs struct {
	// The resource-specific properties for this resource.
	Properties Ec2InstancePropertiesPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
}

func (Ec2InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2InstanceArgs)(nil)).Elem()
}

type Ec2InstanceInput interface {
	pulumi.Input

	ToEc2InstanceOutput() Ec2InstanceOutput
	ToEc2InstanceOutputWithContext(ctx context.Context) Ec2InstanceOutput
}

func (*Ec2Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2Instance)(nil)).Elem()
}

func (i *Ec2Instance) ToEc2InstanceOutput() Ec2InstanceOutput {
	return i.ToEc2InstanceOutputWithContext(context.Background())
}

func (i *Ec2Instance) ToEc2InstanceOutputWithContext(ctx context.Context) Ec2InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ec2InstanceOutput)
}

type Ec2InstanceOutput struct{ *pulumi.OutputState }

func (Ec2InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2Instance)(nil)).Elem()
}

func (o Ec2InstanceOutput) ToEc2InstanceOutput() Ec2InstanceOutput {
	return o
}

func (o Ec2InstanceOutput) ToEc2InstanceOutputWithContext(ctx context.Context) Ec2InstanceOutput {
	return o
}

// The Azure API version of the resource.
func (o Ec2InstanceOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2Instance) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o Ec2InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o Ec2InstanceOutput) Properties() Ec2InstancePropertiesResponseOutput {
	return o.ApplyT(func(v *Ec2Instance) Ec2InstancePropertiesResponseOutput { return v.Properties }).(Ec2InstancePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o Ec2InstanceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Ec2Instance) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o Ec2InstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2Instance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(Ec2InstanceOutput{})
}
