// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsconnector

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Microsoft.AwsConnector resource
// Azure REST API version: 2024-12-01. Prior API version in Azure Native 2.x: 2024-12-01.
type EksCluster struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties EksClusterPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEksCluster registers a new resource with the given unique name, arguments, and options.
func NewEksCluster(ctx *pulumi.Context,
	name string, args *EksClusterArgs, opts ...pulumi.ResourceOption) (*EksCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:awsconnector/v20241201:EksCluster"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EksCluster
	err := ctx.RegisterResource("azure-native:awsconnector:EksCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEksCluster gets an existing EksCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEksCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EksClusterState, opts ...pulumi.ResourceOption) (*EksCluster, error) {
	var resource EksCluster
	err := ctx.ReadResource("azure-native:awsconnector:EksCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EksCluster resources.
type eksClusterState struct {
}

type EksClusterState struct {
}

func (EksClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusterState)(nil)).Elem()
}

type eksClusterArgs struct {
	// The resource-specific properties for this resource.
	Properties *EksClusterProperties `pulumi:"properties"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
}

// The set of arguments for constructing a EksCluster resource.
type EksClusterArgs struct {
	// The resource-specific properties for this resource.
	Properties EksClusterPropertiesPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
}

func (EksClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusterArgs)(nil)).Elem()
}

type EksClusterInput interface {
	pulumi.Input

	ToEksClusterOutput() EksClusterOutput
	ToEksClusterOutputWithContext(ctx context.Context) EksClusterOutput
}

func (*EksCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**EksCluster)(nil)).Elem()
}

func (i *EksCluster) ToEksClusterOutput() EksClusterOutput {
	return i.ToEksClusterOutputWithContext(context.Background())
}

func (i *EksCluster) ToEksClusterOutputWithContext(ctx context.Context) EksClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusterOutput)
}

type EksClusterOutput struct{ *pulumi.OutputState }

func (EksClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EksCluster)(nil)).Elem()
}

func (o EksClusterOutput) ToEksClusterOutput() EksClusterOutput {
	return o
}

func (o EksClusterOutput) ToEksClusterOutputWithContext(ctx context.Context) EksClusterOutput {
	return o
}

// The Azure API version of the resource.
func (o EksClusterOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o EksClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o EksClusterOutput) Properties() EksClusterPropertiesResponseOutput {
	return o.ApplyT(func(v *EksCluster) EksClusterPropertiesResponseOutput { return v.Properties }).(EksClusterPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EksClusterOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *EksCluster) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EksClusterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EksClusterOutput{})
}
