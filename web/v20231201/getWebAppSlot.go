// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description for Gets the details of a web, mobile, or API app.
func LookupWebAppSlot(ctx *pulumi.Context, args *LookupWebAppSlotArgs, opts ...pulumi.InvokeOption) (*LookupWebAppSlotResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupWebAppSlotResult
	err := ctx.Invoke("azure-native:web/v20231201:getWebAppSlot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupWebAppSlotArgs struct {
	// Name of the app.
	Name string `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the deployment slot. By default, this API returns the production slot.
	Slot string `pulumi:"slot"`
}

// A web app, a mobile app backend, or an API app.
type LookupWebAppSlotResult struct {
	// Management information availability state for the app.
	AvailabilityState string `pulumi:"availabilityState"`
	// <code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// <code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.
	ClientCertEnabled *bool `pulumi:"clientCertEnabled"`
	// client certificate authentication comma-separated exclusion paths
	ClientCertExclusionPaths *string `pulumi:"clientCertExclusionPaths"`
	// This composes with ClientCertEnabled setting.
	// - ClientCertEnabled: false means ClientCert is ignored.
	// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
	// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
	ClientCertMode *string `pulumi:"clientCertMode"`
	// Size of the function container.
	ContainerSize *int `pulumi:"containerSize"`
	// Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
	DailyMemoryTimeQuota *int `pulumi:"dailyMemoryTimeQuota"`
	// Dapr configuration of the app.
	DaprConfig *DaprConfigResponse `pulumi:"daprConfig"`
	// Default hostname of the app. Read-only.
	DefaultHostName string `pulumi:"defaultHostName"`
	// Property to configure various DNS related settings for a site.
	DnsConfiguration *SiteDnsConfigResponse `pulumi:"dnsConfiguration"`
	// <code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).
	Enabled *bool `pulumi:"enabled"`
	// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
	// the app is not served on those hostnames.
	EnabledHostNames []string `pulumi:"enabledHostNames"`
	// Extended Location.
	ExtendedLocation *ExtendedLocationResponse `pulumi:"extendedLocation"`
	// Configuration specific of the Azure Function app.
	FunctionAppConfig *FunctionAppConfigResponse `pulumi:"functionAppConfig"`
	// Hostname SSL states are used to manage the SSL bindings for app's hostnames.
	HostNameSslStates []HostNameSslStateResponse `pulumi:"hostNameSslStates"`
	// Hostnames associated with the app.
	HostNames []string `pulumi:"hostNames"`
	// <code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.
	//  If <code>true</code>, the app is only accessible via API management process.
	HostNamesDisabled *bool `pulumi:"hostNamesDisabled"`
	// App Service Environment to use for the app.
	HostingEnvironmentProfile *HostingEnvironmentProfileResponse `pulumi:"hostingEnvironmentProfile"`
	// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
	// http requests
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// Hyper-V sandbox.
	HyperV *bool `pulumi:"hyperV"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Managed service identity.
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// Specifies an operation id if this site has a pending operation.
	InProgressOperationId string `pulumi:"inProgressOperationId"`
	// <code>true</code> if the app is a default container; otherwise, <code>false</code>.
	IsDefaultContainer bool `pulumi:"isDefaultContainer"`
	// Obsolete: Hyper-V sandbox.
	IsXenon *bool `pulumi:"isXenon"`
	// Identity to use for Key Vault Reference authentication.
	KeyVaultReferenceIdentity *string `pulumi:"keyVaultReferenceIdentity"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Last time the app was modified, in UTC. Read-only.
	LastModifiedTimeUtc string `pulumi:"lastModifiedTimeUtc"`
	// Resource Location.
	Location string `pulumi:"location"`
	// Azure Resource Manager ID of the customer's selected Managed Environment on which to host this app. This must be of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.App/managedEnvironments/{managedEnvironmentName}
	ManagedEnvironmentId *string `pulumi:"managedEnvironmentId"`
	// Maximum number of workers.
	// This only applies to Functions container.
	MaxNumberOfWorkers int `pulumi:"maxNumberOfWorkers"`
	// Resource Name.
	Name string `pulumi:"name"`
	// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
	OutboundIpAddresses string `pulumi:"outboundIpAddresses"`
	// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
	PossibleOutboundIpAddresses string `pulumi:"possibleOutboundIpAddresses"`
	// Property to allow or block all public traffic. Allowed Values: 'Enabled', 'Disabled' or an empty string.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Site redundancy mode
	RedundancyMode *string `pulumi:"redundancyMode"`
	// Name of the repository site.
	RepositorySiteName string `pulumi:"repositorySiteName"`
	// <code>true</code> if reserved; otherwise, <code>false</code>.
	Reserved *bool `pulumi:"reserved"`
	// Function app resource requirements.
	ResourceConfig *ResourceConfigResponse `pulumi:"resourceConfig"`
	// Name of the resource group the app belongs to. Read-only.
	ResourceGroup string `pulumi:"resourceGroup"`
	// <code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.
	ScmSiteAlsoStopped *bool `pulumi:"scmSiteAlsoStopped"`
	// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
	ServerFarmId *string `pulumi:"serverFarmId"`
	// Configuration of the app.
	SiteConfig *SiteConfigResponse `pulumi:"siteConfig"`
	// Status of the last deployment slot swap operation.
	SlotSwapStatus SlotSwapStatusResponse `pulumi:"slotSwapStatus"`
	// Current state of the app.
	State string `pulumi:"state"`
	// Checks if Customer provided storage account is required
	StorageAccountRequired *bool `pulumi:"storageAccountRequired"`
	// App suspended till in case memory-time quota is exceeded.
	SuspendedTill string `pulumi:"suspendedTill"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Specifies which deployment slot this app will swap into. Read-only.
	TargetSwapSlot string `pulumi:"targetSwapSlot"`
	// Azure Traffic Manager hostnames associated with the app. Read-only.
	TrafficManagerHostNames []string `pulumi:"trafficManagerHostNames"`
	// Resource type.
	Type string `pulumi:"type"`
	// State indicating whether the app has exceeded its quota usage. Read-only.
	UsageState string `pulumi:"usageState"`
	// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
	// This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
	VirtualNetworkSubnetId *string `pulumi:"virtualNetworkSubnetId"`
	// To enable Backup and Restore operations over virtual network
	VnetBackupRestoreEnabled *bool `pulumi:"vnetBackupRestoreEnabled"`
	// To enable accessing content over virtual network
	VnetContentShareEnabled *bool `pulumi:"vnetContentShareEnabled"`
	// To enable pulling image over Virtual Network
	VnetImagePullEnabled *bool `pulumi:"vnetImagePullEnabled"`
	// Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
	VnetRouteAllEnabled *bool `pulumi:"vnetRouteAllEnabled"`
	// Workload profile name for function app to execute on.
	WorkloadProfileName *string `pulumi:"workloadProfileName"`
}

// Defaults sets the appropriate defaults for LookupWebAppSlotResult
func (val *LookupWebAppSlotResult) Defaults() *LookupWebAppSlotResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DaprConfig = tmp.DaprConfig.Defaults()

	if tmp.HyperV == nil {
		hyperV_ := false
		tmp.HyperV = &hyperV_
	}
	if tmp.IsXenon == nil {
		isXenon_ := false
		tmp.IsXenon = &isXenon_
	}
	if tmp.Reserved == nil {
		reserved_ := false
		tmp.Reserved = &reserved_
	}
	if tmp.ScmSiteAlsoStopped == nil {
		scmSiteAlsoStopped_ := false
		tmp.ScmSiteAlsoStopped = &scmSiteAlsoStopped_
	}
	tmp.SiteConfig = tmp.SiteConfig.Defaults()

	return &tmp
}

func LookupWebAppSlotOutput(ctx *pulumi.Context, args LookupWebAppSlotOutputArgs, opts ...pulumi.InvokeOption) LookupWebAppSlotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWebAppSlotResult, error) {
			args := v.(LookupWebAppSlotArgs)
			r, err := LookupWebAppSlot(ctx, &args, opts...)
			var s LookupWebAppSlotResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWebAppSlotResultOutput)
}

type LookupWebAppSlotOutputArgs struct {
	// Name of the app.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the deployment slot. By default, this API returns the production slot.
	Slot pulumi.StringInput `pulumi:"slot"`
}

func (LookupWebAppSlotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebAppSlotArgs)(nil)).Elem()
}

// A web app, a mobile app backend, or an API app.
type LookupWebAppSlotResultOutput struct{ *pulumi.OutputState }

func (LookupWebAppSlotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebAppSlotResult)(nil)).Elem()
}

func (o LookupWebAppSlotResultOutput) ToLookupWebAppSlotResultOutput() LookupWebAppSlotResultOutput {
	return o
}

func (o LookupWebAppSlotResultOutput) ToLookupWebAppSlotResultOutputWithContext(ctx context.Context) LookupWebAppSlotResultOutput {
	return o
}

// Management information availability state for the app.
func (o LookupWebAppSlotResultOutput) AvailabilityState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.AvailabilityState }).(pulumi.StringOutput)
}

// <code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.
func (o LookupWebAppSlotResultOutput) ClientAffinityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.ClientAffinityEnabled }).(pulumi.BoolPtrOutput)
}

// <code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.
func (o LookupWebAppSlotResultOutput) ClientCertEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.ClientCertEnabled }).(pulumi.BoolPtrOutput)
}

// client certificate authentication comma-separated exclusion paths
func (o LookupWebAppSlotResultOutput) ClientCertExclusionPaths() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.ClientCertExclusionPaths }).(pulumi.StringPtrOutput)
}

// This composes with ClientCertEnabled setting.
// - ClientCertEnabled: false means ClientCert is ignored.
// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
func (o LookupWebAppSlotResultOutput) ClientCertMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.ClientCertMode }).(pulumi.StringPtrOutput)
}

// Size of the function container.
func (o LookupWebAppSlotResultOutput) ContainerSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *int { return v.ContainerSize }).(pulumi.IntPtrOutput)
}

// Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
func (o LookupWebAppSlotResultOutput) CustomDomainVerificationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.CustomDomainVerificationId }).(pulumi.StringPtrOutput)
}

// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
func (o LookupWebAppSlotResultOutput) DailyMemoryTimeQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *int { return v.DailyMemoryTimeQuota }).(pulumi.IntPtrOutput)
}

// Dapr configuration of the app.
func (o LookupWebAppSlotResultOutput) DaprConfig() DaprConfigResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *DaprConfigResponse { return v.DaprConfig }).(DaprConfigResponsePtrOutput)
}

// Default hostname of the app. Read-only.
func (o LookupWebAppSlotResultOutput) DefaultHostName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.DefaultHostName }).(pulumi.StringOutput)
}

// Property to configure various DNS related settings for a site.
func (o LookupWebAppSlotResultOutput) DnsConfiguration() SiteDnsConfigResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *SiteDnsConfigResponse { return v.DnsConfiguration }).(SiteDnsConfigResponsePtrOutput)
}

// <code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).
func (o LookupWebAppSlotResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
// the app is not served on those hostnames.
func (o LookupWebAppSlotResultOutput) EnabledHostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) []string { return v.EnabledHostNames }).(pulumi.StringArrayOutput)
}

// Extended Location.
func (o LookupWebAppSlotResultOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *ExtendedLocationResponse { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// Configuration specific of the Azure Function app.
func (o LookupWebAppSlotResultOutput) FunctionAppConfig() FunctionAppConfigResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *FunctionAppConfigResponse { return v.FunctionAppConfig }).(FunctionAppConfigResponsePtrOutput)
}

// Hostname SSL states are used to manage the SSL bindings for app's hostnames.
func (o LookupWebAppSlotResultOutput) HostNameSslStates() HostNameSslStateResponseArrayOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) []HostNameSslStateResponse { return v.HostNameSslStates }).(HostNameSslStateResponseArrayOutput)
}

// Hostnames associated with the app.
func (o LookupWebAppSlotResultOutput) HostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) []string { return v.HostNames }).(pulumi.StringArrayOutput)
}

// <code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.
//
//	If <code>true</code>, the app is only accessible via API management process.
func (o LookupWebAppSlotResultOutput) HostNamesDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.HostNamesDisabled }).(pulumi.BoolPtrOutput)
}

// App Service Environment to use for the app.
func (o LookupWebAppSlotResultOutput) HostingEnvironmentProfile() HostingEnvironmentProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *HostingEnvironmentProfileResponse { return v.HostingEnvironmentProfile }).(HostingEnvironmentProfileResponsePtrOutput)
}

// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
// http requests
func (o LookupWebAppSlotResultOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// Hyper-V sandbox.
func (o LookupWebAppSlotResultOutput) HyperV() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.HyperV }).(pulumi.BoolPtrOutput)
}

// Resource Id.
func (o LookupWebAppSlotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.Id }).(pulumi.StringOutput)
}

// Managed service identity.
func (o LookupWebAppSlotResultOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// Specifies an operation id if this site has a pending operation.
func (o LookupWebAppSlotResultOutput) InProgressOperationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.InProgressOperationId }).(pulumi.StringOutput)
}

// <code>true</code> if the app is a default container; otherwise, <code>false</code>.
func (o LookupWebAppSlotResultOutput) IsDefaultContainer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) bool { return v.IsDefaultContainer }).(pulumi.BoolOutput)
}

// Obsolete: Hyper-V sandbox.
func (o LookupWebAppSlotResultOutput) IsXenon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.IsXenon }).(pulumi.BoolPtrOutput)
}

// Identity to use for Key Vault Reference authentication.
func (o LookupWebAppSlotResultOutput) KeyVaultReferenceIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.KeyVaultReferenceIdentity }).(pulumi.StringPtrOutput)
}

// Kind of resource.
func (o LookupWebAppSlotResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Last time the app was modified, in UTC. Read-only.
func (o LookupWebAppSlotResultOutput) LastModifiedTimeUtc() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.LastModifiedTimeUtc }).(pulumi.StringOutput)
}

// Resource Location.
func (o LookupWebAppSlotResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.Location }).(pulumi.StringOutput)
}

// Azure Resource Manager ID of the customer's selected Managed Environment on which to host this app. This must be of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.App/managedEnvironments/{managedEnvironmentName}
func (o LookupWebAppSlotResultOutput) ManagedEnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.ManagedEnvironmentId }).(pulumi.StringPtrOutput)
}

// Maximum number of workers.
// This only applies to Functions container.
func (o LookupWebAppSlotResultOutput) MaxNumberOfWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) int { return v.MaxNumberOfWorkers }).(pulumi.IntOutput)
}

// Resource Name.
func (o LookupWebAppSlotResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
func (o LookupWebAppSlotResultOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
func (o LookupWebAppSlotResultOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Property to allow or block all public traffic. Allowed Values: 'Enabled', 'Disabled' or an empty string.
func (o LookupWebAppSlotResultOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Site redundancy mode
func (o LookupWebAppSlotResultOutput) RedundancyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.RedundancyMode }).(pulumi.StringPtrOutput)
}

// Name of the repository site.
func (o LookupWebAppSlotResultOutput) RepositorySiteName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.RepositorySiteName }).(pulumi.StringOutput)
}

// <code>true</code> if reserved; otherwise, <code>false</code>.
func (o LookupWebAppSlotResultOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.Reserved }).(pulumi.BoolPtrOutput)
}

// Function app resource requirements.
func (o LookupWebAppSlotResultOutput) ResourceConfig() ResourceConfigResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *ResourceConfigResponse { return v.ResourceConfig }).(ResourceConfigResponsePtrOutput)
}

// Name of the resource group the app belongs to. Read-only.
func (o LookupWebAppSlotResultOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// <code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.
func (o LookupWebAppSlotResultOutput) ScmSiteAlsoStopped() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.ScmSiteAlsoStopped }).(pulumi.BoolPtrOutput)
}

// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
func (o LookupWebAppSlotResultOutput) ServerFarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.ServerFarmId }).(pulumi.StringPtrOutput)
}

// Configuration of the app.
func (o LookupWebAppSlotResultOutput) SiteConfig() SiteConfigResponsePtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *SiteConfigResponse { return v.SiteConfig }).(SiteConfigResponsePtrOutput)
}

// Status of the last deployment slot swap operation.
func (o LookupWebAppSlotResultOutput) SlotSwapStatus() SlotSwapStatusResponseOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) SlotSwapStatusResponse { return v.SlotSwapStatus }).(SlotSwapStatusResponseOutput)
}

// Current state of the app.
func (o LookupWebAppSlotResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.State }).(pulumi.StringOutput)
}

// Checks if Customer provided storage account is required
func (o LookupWebAppSlotResultOutput) StorageAccountRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.StorageAccountRequired }).(pulumi.BoolPtrOutput)
}

// App suspended till in case memory-time quota is exceeded.
func (o LookupWebAppSlotResultOutput) SuspendedTill() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.SuspendedTill }).(pulumi.StringOutput)
}

// Resource tags.
func (o LookupWebAppSlotResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies which deployment slot this app will swap into. Read-only.
func (o LookupWebAppSlotResultOutput) TargetSwapSlot() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.TargetSwapSlot }).(pulumi.StringOutput)
}

// Azure Traffic Manager hostnames associated with the app. Read-only.
func (o LookupWebAppSlotResultOutput) TrafficManagerHostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) []string { return v.TrafficManagerHostNames }).(pulumi.StringArrayOutput)
}

// Resource type.
func (o LookupWebAppSlotResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.Type }).(pulumi.StringOutput)
}

// State indicating whether the app has exceeded its quota usage. Read-only.
func (o LookupWebAppSlotResultOutput) UsageState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) string { return v.UsageState }).(pulumi.StringOutput)
}

// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
// This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
func (o LookupWebAppSlotResultOutput) VirtualNetworkSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.VirtualNetworkSubnetId }).(pulumi.StringPtrOutput)
}

// To enable Backup and Restore operations over virtual network
func (o LookupWebAppSlotResultOutput) VnetBackupRestoreEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.VnetBackupRestoreEnabled }).(pulumi.BoolPtrOutput)
}

// To enable accessing content over virtual network
func (o LookupWebAppSlotResultOutput) VnetContentShareEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.VnetContentShareEnabled }).(pulumi.BoolPtrOutput)
}

// To enable pulling image over Virtual Network
func (o LookupWebAppSlotResultOutput) VnetImagePullEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.VnetImagePullEnabled }).(pulumi.BoolPtrOutput)
}

// Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
func (o LookupWebAppSlotResultOutput) VnetRouteAllEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *bool { return v.VnetRouteAllEnabled }).(pulumi.BoolPtrOutput)
}

// Workload profile name for function app to execute on.
func (o LookupWebAppSlotResultOutput) WorkloadProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSlotResult) *string { return v.WorkloadProfileName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWebAppSlotResultOutput{})
}
