// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package web

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SSL certificate for an app.
//
// Uses Azure REST API version 2024-11-01.
type SiteCertificate struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// CNAME of the certificate to be issued via free certificate
	CanonicalName pulumi.StringPtrOutput `pulumi:"canonicalName"`
	// Raw bytes of .cer file
	CerBlob pulumi.StringOutput `pulumi:"cerBlob"`
	// Method of domain validation for free cert
	DomainValidationMethod pulumi.StringPtrOutput `pulumi:"domainValidationMethod"`
	// Certificate expiration date.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// Friendly name of the certificate.
	FriendlyName pulumi.StringOutput `pulumi:"friendlyName"`
	// Host names the certificate applies to.
	HostNames pulumi.StringArrayOutput `pulumi:"hostNames"`
	// Specification for the App Service Environment to use for the certificate.
	HostingEnvironmentProfile HostingEnvironmentProfileResponseOutput `pulumi:"hostingEnvironmentProfile"`
	// Certificate issue Date.
	IssueDate pulumi.StringOutput `pulumi:"issueDate"`
	// Certificate issuer.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Azure Key Vault Csm resource Id.
	KeyVaultId pulumi.StringPtrOutput `pulumi:"keyVaultId"`
	// Azure Key Vault secret name.
	KeyVaultSecretName pulumi.StringPtrOutput `pulumi:"keyVaultSecretName"`
	// Status of the Key Vault secret.
	KeyVaultSecretStatus pulumi.StringOutput `pulumi:"keyVaultSecretStatus"`
	// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Certificate password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Pfx blob.
	PfxBlob pulumi.StringPtrOutput `pulumi:"pfxBlob"`
	// Public key hash.
	PublicKeyHash pulumi.StringOutput `pulumi:"publicKeyHash"`
	// Self link.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Resource ID of the associated App Service plan.
	ServerFarmId pulumi.StringPtrOutput `pulumi:"serverFarmId"`
	// App name.
	SiteName pulumi.StringOutput `pulumi:"siteName"`
	// Subject name of the certificate.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Certificate thumbprint.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Is the certificate valid?.
	Valid pulumi.BoolOutput `pulumi:"valid"`
}

// NewSiteCertificate registers a new resource with the given unique name, arguments, and options.
func NewSiteCertificate(ctx *pulumi.Context,
	name string, args *SiteCertificateArgs, opts ...pulumi.ResourceOption) (*SiteCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:web/v20241101:SiteCertificate"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SiteCertificate
	err := ctx.RegisterResource("azure-native:web:SiteCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSiteCertificate gets an existing SiteCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteCertificateState, opts ...pulumi.ResourceOption) (*SiteCertificate, error) {
	var resource SiteCertificate
	err := ctx.ReadResource("azure-native:web:SiteCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SiteCertificate resources.
type siteCertificateState struct {
}

type SiteCertificateState struct {
}

func (SiteCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteCertificateState)(nil)).Elem()
}

type siteCertificateArgs struct {
	// CNAME of the certificate to be issued via free certificate
	CanonicalName *string `pulumi:"canonicalName"`
	// Name of the certificate.
	CertificateName *string `pulumi:"certificateName"`
	// Method of domain validation for free cert
	DomainValidationMethod *string `pulumi:"domainValidationMethod"`
	// Host names the certificate applies to.
	HostNames []string `pulumi:"hostNames"`
	// Azure Key Vault Csm resource Id.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// Azure Key Vault secret name.
	KeyVaultSecretName *string `pulumi:"keyVaultSecretName"`
	// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
	Kind *string `pulumi:"kind"`
	// Resource Location.
	Location *string `pulumi:"location"`
	// Name of the site.
	Name string `pulumi:"name"`
	// Certificate password.
	Password *string `pulumi:"password"`
	// Pfx blob.
	PfxBlob *string `pulumi:"pfxBlob"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource ID of the associated App Service plan.
	ServerFarmId *string `pulumi:"serverFarmId"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SiteCertificate resource.
type SiteCertificateArgs struct {
	// CNAME of the certificate to be issued via free certificate
	CanonicalName pulumi.StringPtrInput
	// Name of the certificate.
	CertificateName pulumi.StringPtrInput
	// Method of domain validation for free cert
	DomainValidationMethod pulumi.StringPtrInput
	// Host names the certificate applies to.
	HostNames pulumi.StringArrayInput
	// Azure Key Vault Csm resource Id.
	KeyVaultId pulumi.StringPtrInput
	// Azure Key Vault secret name.
	KeyVaultSecretName pulumi.StringPtrInput
	// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
	Kind pulumi.StringPtrInput
	// Resource Location.
	Location pulumi.StringPtrInput
	// Name of the site.
	Name pulumi.StringInput
	// Certificate password.
	Password pulumi.StringPtrInput
	// Pfx blob.
	PfxBlob pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource ID of the associated App Service plan.
	ServerFarmId pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SiteCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteCertificateArgs)(nil)).Elem()
}

type SiteCertificateInput interface {
	pulumi.Input

	ToSiteCertificateOutput() SiteCertificateOutput
	ToSiteCertificateOutputWithContext(ctx context.Context) SiteCertificateOutput
}

func (*SiteCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteCertificate)(nil)).Elem()
}

func (i *SiteCertificate) ToSiteCertificateOutput() SiteCertificateOutput {
	return i.ToSiteCertificateOutputWithContext(context.Background())
}

func (i *SiteCertificate) ToSiteCertificateOutputWithContext(ctx context.Context) SiteCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteCertificateOutput)
}

type SiteCertificateOutput struct{ *pulumi.OutputState }

func (SiteCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteCertificate)(nil)).Elem()
}

func (o SiteCertificateOutput) ToSiteCertificateOutput() SiteCertificateOutput {
	return o
}

func (o SiteCertificateOutput) ToSiteCertificateOutputWithContext(ctx context.Context) SiteCertificateOutput {
	return o
}

// The Azure API version of the resource.
func (o SiteCertificateOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// CNAME of the certificate to be issued via free certificate
func (o SiteCertificateOutput) CanonicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.CanonicalName }).(pulumi.StringPtrOutput)
}

// Raw bytes of .cer file
func (o SiteCertificateOutput) CerBlob() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.CerBlob }).(pulumi.StringOutput)
}

// Method of domain validation for free cert
func (o SiteCertificateOutput) DomainValidationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.DomainValidationMethod }).(pulumi.StringPtrOutput)
}

// Certificate expiration date.
func (o SiteCertificateOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// Friendly name of the certificate.
func (o SiteCertificateOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.FriendlyName }).(pulumi.StringOutput)
}

// Host names the certificate applies to.
func (o SiteCertificateOutput) HostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringArrayOutput { return v.HostNames }).(pulumi.StringArrayOutput)
}

// Specification for the App Service Environment to use for the certificate.
func (o SiteCertificateOutput) HostingEnvironmentProfile() HostingEnvironmentProfileResponseOutput {
	return o.ApplyT(func(v *SiteCertificate) HostingEnvironmentProfileResponseOutput { return v.HostingEnvironmentProfile }).(HostingEnvironmentProfileResponseOutput)
}

// Certificate issue Date.
func (o SiteCertificateOutput) IssueDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.IssueDate }).(pulumi.StringOutput)
}

// Certificate issuer.
func (o SiteCertificateOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Azure Key Vault Csm resource Id.
func (o SiteCertificateOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// Azure Key Vault secret name.
func (o SiteCertificateOutput) KeyVaultSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.KeyVaultSecretName }).(pulumi.StringPtrOutput)
}

// Status of the Key Vault secret.
func (o SiteCertificateOutput) KeyVaultSecretStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.KeyVaultSecretStatus }).(pulumi.StringOutput)
}

// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
func (o SiteCertificateOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location.
func (o SiteCertificateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource Name.
func (o SiteCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Certificate password.
func (o SiteCertificateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Pfx blob.
func (o SiteCertificateOutput) PfxBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.PfxBlob }).(pulumi.StringPtrOutput)
}

// Public key hash.
func (o SiteCertificateOutput) PublicKeyHash() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.PublicKeyHash }).(pulumi.StringOutput)
}

// Self link.
func (o SiteCertificateOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Resource ID of the associated App Service plan.
func (o SiteCertificateOutput) ServerFarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringPtrOutput { return v.ServerFarmId }).(pulumi.StringPtrOutput)
}

// App name.
func (o SiteCertificateOutput) SiteName() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.SiteName }).(pulumi.StringOutput)
}

// Subject name of the certificate.
func (o SiteCertificateOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.SubjectName }).(pulumi.StringOutput)
}

// Resource tags.
func (o SiteCertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Certificate thumbprint.
func (o SiteCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

// Resource type.
func (o SiteCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Is the certificate valid?.
func (o SiteCertificateOutput) Valid() pulumi.BoolOutput {
	return o.ApplyT(func(v *SiteCertificate) pulumi.BoolOutput { return v.Valid }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(SiteCertificateOutput{})
}
