// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppLogsConfiguration struct {
	Destination               *string                    `pulumi:"destination"`
	LogAnalyticsConfiguration *LogAnalyticsConfiguration `pulumi:"logAnalyticsConfiguration"`
}

// AppLogsConfigurationInput is an input type that accepts AppLogsConfigurationArgs and AppLogsConfigurationOutput values.
// You can construct a concrete instance of `AppLogsConfigurationInput` via:
//
//	AppLogsConfigurationArgs{...}
type AppLogsConfigurationInput interface {
	pulumi.Input

	ToAppLogsConfigurationOutput() AppLogsConfigurationOutput
	ToAppLogsConfigurationOutputWithContext(context.Context) AppLogsConfigurationOutput
}

type AppLogsConfigurationArgs struct {
	Destination               pulumi.StringPtrInput             `pulumi:"destination"`
	LogAnalyticsConfiguration LogAnalyticsConfigurationPtrInput `pulumi:"logAnalyticsConfiguration"`
}

func (AppLogsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLogsConfiguration)(nil)).Elem()
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationOutput() AppLogsConfigurationOutput {
	return i.ToAppLogsConfigurationOutputWithContext(context.Background())
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationOutputWithContext(ctx context.Context) AppLogsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppLogsConfigurationOutput)
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return i.ToAppLogsConfigurationPtrOutputWithContext(context.Background())
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppLogsConfigurationOutput).ToAppLogsConfigurationPtrOutputWithContext(ctx)
}

// AppLogsConfigurationPtrInput is an input type that accepts AppLogsConfigurationArgs, AppLogsConfigurationPtr and AppLogsConfigurationPtrOutput values.
// You can construct a concrete instance of `AppLogsConfigurationPtrInput` via:
//
//	        AppLogsConfigurationArgs{...}
//
//	or:
//
//	        nil
type AppLogsConfigurationPtrInput interface {
	pulumi.Input

	ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput
	ToAppLogsConfigurationPtrOutputWithContext(context.Context) AppLogsConfigurationPtrOutput
}

type appLogsConfigurationPtrType AppLogsConfigurationArgs

func AppLogsConfigurationPtr(v *AppLogsConfigurationArgs) AppLogsConfigurationPtrInput {
	return (*appLogsConfigurationPtrType)(v)
}

func (*appLogsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppLogsConfiguration)(nil)).Elem()
}

func (i *appLogsConfigurationPtrType) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return i.ToAppLogsConfigurationPtrOutputWithContext(context.Background())
}

func (i *appLogsConfigurationPtrType) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppLogsConfigurationPtrOutput)
}

type AppLogsConfigurationOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLogsConfiguration)(nil)).Elem()
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationOutput() AppLogsConfigurationOutput {
	return o
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationOutputWithContext(ctx context.Context) AppLogsConfigurationOutput {
	return o
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return o.ToAppLogsConfigurationPtrOutputWithContext(context.Background())
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppLogsConfiguration) *AppLogsConfiguration {
		return &v
	}).(AppLogsConfigurationPtrOutput)
}

func (o AppLogsConfigurationOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppLogsConfiguration) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o AppLogsConfigurationOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationPtrOutput {
	return o.ApplyT(func(v AppLogsConfiguration) *LogAnalyticsConfiguration { return v.LogAnalyticsConfiguration }).(LogAnalyticsConfigurationPtrOutput)
}

type AppLogsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppLogsConfiguration)(nil)).Elem()
}

func (o AppLogsConfigurationPtrOutput) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return o
}

func (o AppLogsConfigurationPtrOutput) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return o
}

func (o AppLogsConfigurationPtrOutput) Elem() AppLogsConfigurationOutput {
	return o.ApplyT(func(v *AppLogsConfiguration) AppLogsConfiguration {
		if v != nil {
			return *v
		}
		var ret AppLogsConfiguration
		return ret
	}).(AppLogsConfigurationOutput)
}

func (o AppLogsConfigurationPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppLogsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

func (o AppLogsConfigurationPtrOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationPtrOutput {
	return o.ApplyT(func(v *AppLogsConfiguration) *LogAnalyticsConfiguration {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsConfiguration
	}).(LogAnalyticsConfigurationPtrOutput)
}

type AppLogsConfigurationResponse struct {
	Destination               *string                            `pulumi:"destination"`
	LogAnalyticsConfiguration *LogAnalyticsConfigurationResponse `pulumi:"logAnalyticsConfiguration"`
}

type AppLogsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLogsConfigurationResponse)(nil)).Elem()
}

func (o AppLogsConfigurationResponseOutput) ToAppLogsConfigurationResponseOutput() AppLogsConfigurationResponseOutput {
	return o
}

func (o AppLogsConfigurationResponseOutput) ToAppLogsConfigurationResponseOutputWithContext(ctx context.Context) AppLogsConfigurationResponseOutput {
	return o
}

func (o AppLogsConfigurationResponseOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppLogsConfigurationResponse) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o AppLogsConfigurationResponseOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AppLogsConfigurationResponse) *LogAnalyticsConfigurationResponse {
		return v.LogAnalyticsConfiguration
	}).(LogAnalyticsConfigurationResponsePtrOutput)
}

type AppLogsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppLogsConfigurationResponse)(nil)).Elem()
}

func (o AppLogsConfigurationResponsePtrOutput) ToAppLogsConfigurationResponsePtrOutput() AppLogsConfigurationResponsePtrOutput {
	return o
}

func (o AppLogsConfigurationResponsePtrOutput) ToAppLogsConfigurationResponsePtrOutputWithContext(ctx context.Context) AppLogsConfigurationResponsePtrOutput {
	return o
}

func (o AppLogsConfigurationResponsePtrOutput) Elem() AppLogsConfigurationResponseOutput {
	return o.ApplyT(func(v *AppLogsConfigurationResponse) AppLogsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AppLogsConfigurationResponse
		return ret
	}).(AppLogsConfigurationResponseOutput)
}

func (o AppLogsConfigurationResponsePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppLogsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

func (o AppLogsConfigurationResponsePtrOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AppLogsConfigurationResponse) *LogAnalyticsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsConfiguration
	}).(LogAnalyticsConfigurationResponsePtrOutput)
}

type ArcConfiguration struct {
	ArtifactStorageAccessMode    *string                `pulumi:"artifactStorageAccessMode"`
	ArtifactStorageClassName     *string                `pulumi:"artifactStorageClassName"`
	ArtifactStorageMountPath     *string                `pulumi:"artifactStorageMountPath"`
	ArtifactStorageNodeName      *string                `pulumi:"artifactStorageNodeName"`
	ArtifactsStorageType         *StorageType           `pulumi:"artifactsStorageType"`
	FrontEndServiceConfiguration *FrontEndConfiguration `pulumi:"frontEndServiceConfiguration"`
	KubeConfig                   *string                `pulumi:"kubeConfig"`
}

// ArcConfigurationInput is an input type that accepts ArcConfigurationArgs and ArcConfigurationOutput values.
// You can construct a concrete instance of `ArcConfigurationInput` via:
//
//	ArcConfigurationArgs{...}
type ArcConfigurationInput interface {
	pulumi.Input

	ToArcConfigurationOutput() ArcConfigurationOutput
	ToArcConfigurationOutputWithContext(context.Context) ArcConfigurationOutput
}

type ArcConfigurationArgs struct {
	ArtifactStorageAccessMode    pulumi.StringPtrInput         `pulumi:"artifactStorageAccessMode"`
	ArtifactStorageClassName     pulumi.StringPtrInput         `pulumi:"artifactStorageClassName"`
	ArtifactStorageMountPath     pulumi.StringPtrInput         `pulumi:"artifactStorageMountPath"`
	ArtifactStorageNodeName      pulumi.StringPtrInput         `pulumi:"artifactStorageNodeName"`
	ArtifactsStorageType         StorageTypePtrInput           `pulumi:"artifactsStorageType"`
	FrontEndServiceConfiguration FrontEndConfigurationPtrInput `pulumi:"frontEndServiceConfiguration"`
	KubeConfig                   pulumi.StringPtrInput         `pulumi:"kubeConfig"`
}

func (ArcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcConfiguration)(nil)).Elem()
}

func (i ArcConfigurationArgs) ToArcConfigurationOutput() ArcConfigurationOutput {
	return i.ToArcConfigurationOutputWithContext(context.Background())
}

func (i ArcConfigurationArgs) ToArcConfigurationOutputWithContext(ctx context.Context) ArcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArcConfigurationOutput)
}

func (i ArcConfigurationArgs) ToArcConfigurationPtrOutput() ArcConfigurationPtrOutput {
	return i.ToArcConfigurationPtrOutputWithContext(context.Background())
}

func (i ArcConfigurationArgs) ToArcConfigurationPtrOutputWithContext(ctx context.Context) ArcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArcConfigurationOutput).ToArcConfigurationPtrOutputWithContext(ctx)
}

// ArcConfigurationPtrInput is an input type that accepts ArcConfigurationArgs, ArcConfigurationPtr and ArcConfigurationPtrOutput values.
// You can construct a concrete instance of `ArcConfigurationPtrInput` via:
//
//	        ArcConfigurationArgs{...}
//
//	or:
//
//	        nil
type ArcConfigurationPtrInput interface {
	pulumi.Input

	ToArcConfigurationPtrOutput() ArcConfigurationPtrOutput
	ToArcConfigurationPtrOutputWithContext(context.Context) ArcConfigurationPtrOutput
}

type arcConfigurationPtrType ArcConfigurationArgs

func ArcConfigurationPtr(v *ArcConfigurationArgs) ArcConfigurationPtrInput {
	return (*arcConfigurationPtrType)(v)
}

func (*arcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcConfiguration)(nil)).Elem()
}

func (i *arcConfigurationPtrType) ToArcConfigurationPtrOutput() ArcConfigurationPtrOutput {
	return i.ToArcConfigurationPtrOutputWithContext(context.Background())
}

func (i *arcConfigurationPtrType) ToArcConfigurationPtrOutputWithContext(ctx context.Context) ArcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArcConfigurationPtrOutput)
}

type ArcConfigurationOutput struct{ *pulumi.OutputState }

func (ArcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcConfiguration)(nil)).Elem()
}

func (o ArcConfigurationOutput) ToArcConfigurationOutput() ArcConfigurationOutput {
	return o
}

func (o ArcConfigurationOutput) ToArcConfigurationOutputWithContext(ctx context.Context) ArcConfigurationOutput {
	return o
}

func (o ArcConfigurationOutput) ToArcConfigurationPtrOutput() ArcConfigurationPtrOutput {
	return o.ToArcConfigurationPtrOutputWithContext(context.Background())
}

func (o ArcConfigurationOutput) ToArcConfigurationPtrOutputWithContext(ctx context.Context) ArcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArcConfiguration) *ArcConfiguration {
		return &v
	}).(ArcConfigurationPtrOutput)
}

func (o ArcConfigurationOutput) ArtifactStorageAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfiguration) *string { return v.ArtifactStorageAccessMode }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationOutput) ArtifactStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfiguration) *string { return v.ArtifactStorageClassName }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationOutput) ArtifactStorageMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfiguration) *string { return v.ArtifactStorageMountPath }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationOutput) ArtifactStorageNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfiguration) *string { return v.ArtifactStorageNodeName }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationOutput) ArtifactsStorageType() StorageTypePtrOutput {
	return o.ApplyT(func(v ArcConfiguration) *StorageType { return v.ArtifactsStorageType }).(StorageTypePtrOutput)
}

func (o ArcConfigurationOutput) FrontEndServiceConfiguration() FrontEndConfigurationPtrOutput {
	return o.ApplyT(func(v ArcConfiguration) *FrontEndConfiguration { return v.FrontEndServiceConfiguration }).(FrontEndConfigurationPtrOutput)
}

func (o ArcConfigurationOutput) KubeConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfiguration) *string { return v.KubeConfig }).(pulumi.StringPtrOutput)
}

type ArcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ArcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcConfiguration)(nil)).Elem()
}

func (o ArcConfigurationPtrOutput) ToArcConfigurationPtrOutput() ArcConfigurationPtrOutput {
	return o
}

func (o ArcConfigurationPtrOutput) ToArcConfigurationPtrOutputWithContext(ctx context.Context) ArcConfigurationPtrOutput {
	return o
}

func (o ArcConfigurationPtrOutput) Elem() ArcConfigurationOutput {
	return o.ApplyT(func(v *ArcConfiguration) ArcConfiguration {
		if v != nil {
			return *v
		}
		var ret ArcConfiguration
		return ret
	}).(ArcConfigurationOutput)
}

func (o ArcConfigurationPtrOutput) ArtifactStorageAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageAccessMode
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationPtrOutput) ArtifactStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageClassName
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationPtrOutput) ArtifactStorageMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageMountPath
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationPtrOutput) ArtifactStorageNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageNodeName
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationPtrOutput) ArtifactsStorageType() StorageTypePtrOutput {
	return o.ApplyT(func(v *ArcConfiguration) *StorageType {
		if v == nil {
			return nil
		}
		return v.ArtifactsStorageType
	}).(StorageTypePtrOutput)
}

func (o ArcConfigurationPtrOutput) FrontEndServiceConfiguration() FrontEndConfigurationPtrOutput {
	return o.ApplyT(func(v *ArcConfiguration) *FrontEndConfiguration {
		if v == nil {
			return nil
		}
		return v.FrontEndServiceConfiguration
	}).(FrontEndConfigurationPtrOutput)
}

func (o ArcConfigurationPtrOutput) KubeConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KubeConfig
	}).(pulumi.StringPtrOutput)
}

type ArcConfigurationResponse struct {
	ArtifactStorageAccessMode    *string                        `pulumi:"artifactStorageAccessMode"`
	ArtifactStorageClassName     *string                        `pulumi:"artifactStorageClassName"`
	ArtifactStorageMountPath     *string                        `pulumi:"artifactStorageMountPath"`
	ArtifactStorageNodeName      *string                        `pulumi:"artifactStorageNodeName"`
	ArtifactsStorageType         *string                        `pulumi:"artifactsStorageType"`
	FrontEndServiceConfiguration *FrontEndConfigurationResponse `pulumi:"frontEndServiceConfiguration"`
}

type ArcConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ArcConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcConfigurationResponse)(nil)).Elem()
}

func (o ArcConfigurationResponseOutput) ToArcConfigurationResponseOutput() ArcConfigurationResponseOutput {
	return o
}

func (o ArcConfigurationResponseOutput) ToArcConfigurationResponseOutputWithContext(ctx context.Context) ArcConfigurationResponseOutput {
	return o
}

func (o ArcConfigurationResponseOutput) ArtifactStorageAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfigurationResponse) *string { return v.ArtifactStorageAccessMode }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponseOutput) ArtifactStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfigurationResponse) *string { return v.ArtifactStorageClassName }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponseOutput) ArtifactStorageMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfigurationResponse) *string { return v.ArtifactStorageMountPath }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponseOutput) ArtifactStorageNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfigurationResponse) *string { return v.ArtifactStorageNodeName }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponseOutput) ArtifactsStorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArcConfigurationResponse) *string { return v.ArtifactsStorageType }).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponseOutput) FrontEndServiceConfiguration() FrontEndConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ArcConfigurationResponse) *FrontEndConfigurationResponse { return v.FrontEndServiceConfiguration }).(FrontEndConfigurationResponsePtrOutput)
}

type ArcConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ArcConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcConfigurationResponse)(nil)).Elem()
}

func (o ArcConfigurationResponsePtrOutput) ToArcConfigurationResponsePtrOutput() ArcConfigurationResponsePtrOutput {
	return o
}

func (o ArcConfigurationResponsePtrOutput) ToArcConfigurationResponsePtrOutputWithContext(ctx context.Context) ArcConfigurationResponsePtrOutput {
	return o
}

func (o ArcConfigurationResponsePtrOutput) Elem() ArcConfigurationResponseOutput {
	return o.ApplyT(func(v *ArcConfigurationResponse) ArcConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ArcConfigurationResponse
		return ret
	}).(ArcConfigurationResponseOutput)
}

func (o ArcConfigurationResponsePtrOutput) ArtifactStorageAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageAccessMode
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponsePtrOutput) ArtifactStorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageClassName
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponsePtrOutput) ArtifactStorageMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageMountPath
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponsePtrOutput) ArtifactStorageNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorageNodeName
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponsePtrOutput) ArtifactsStorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArcConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactsStorageType
	}).(pulumi.StringPtrOutput)
}

func (o ArcConfigurationResponsePtrOutput) FrontEndServiceConfiguration() FrontEndConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ArcConfigurationResponse) *FrontEndConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.FrontEndServiceConfiguration
	}).(FrontEndConfigurationResponsePtrOutput)
}

// Azure Files or Blob Storage access information value for dictionary storage.
type AzureStorageInfoValueResponse struct {
	// Access key for the storage account.
	AccessKey *string `pulumi:"accessKey"`
	// Name of the storage account.
	AccountName *string `pulumi:"accountName"`
	// Path to mount the storage within the site's runtime environment.
	MountPath *string `pulumi:"mountPath"`
	// Name of the file share (container name, for Blob storage).
	ShareName *string `pulumi:"shareName"`
	// State of the storage account.
	State string `pulumi:"state"`
	// Type of storage.
	Type *string `pulumi:"type"`
}

// Azure Files or Blob Storage access information value for dictionary storage.
type AzureStorageInfoValueResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageInfoValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageInfoValueResponse)(nil)).Elem()
}

func (o AzureStorageInfoValueResponseOutput) ToAzureStorageInfoValueResponseOutput() AzureStorageInfoValueResponseOutput {
	return o
}

func (o AzureStorageInfoValueResponseOutput) ToAzureStorageInfoValueResponseOutputWithContext(ctx context.Context) AzureStorageInfoValueResponseOutput {
	return o
}

// Access key for the storage account.
func (o AzureStorageInfoValueResponseOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageInfoValueResponse) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Name of the storage account.
func (o AzureStorageInfoValueResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageInfoValueResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Path to mount the storage within the site's runtime environment.
func (o AzureStorageInfoValueResponseOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageInfoValueResponse) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Name of the file share (container name, for Blob storage).
func (o AzureStorageInfoValueResponseOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageInfoValueResponse) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

// State of the storage account.
func (o AzureStorageInfoValueResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AzureStorageInfoValueResponse) string { return v.State }).(pulumi.StringOutput)
}

// Type of storage.
func (o AzureStorageInfoValueResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageInfoValueResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AzureStorageInfoValueResponseMapOutput struct{ *pulumi.OutputState }

func (AzureStorageInfoValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureStorageInfoValueResponse)(nil)).Elem()
}

func (o AzureStorageInfoValueResponseMapOutput) ToAzureStorageInfoValueResponseMapOutput() AzureStorageInfoValueResponseMapOutput {
	return o
}

func (o AzureStorageInfoValueResponseMapOutput) ToAzureStorageInfoValueResponseMapOutputWithContext(ctx context.Context) AzureStorageInfoValueResponseMapOutput {
	return o
}

func (o AzureStorageInfoValueResponseMapOutput) MapIndex(k pulumi.StringInput) AzureStorageInfoValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureStorageInfoValueResponse {
		return vs[0].(map[string]AzureStorageInfoValueResponse)[vs[1].(string)]
	}).(AzureStorageInfoValueResponseOutput)
}

// Backup description.
type BackupItemResponse struct {
	// Id of the backup.
	BackupId int `pulumi:"backupId"`
	// Name of the blob which contains data for this backup.
	BlobName string `pulumi:"blobName"`
	// Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.
	CorrelationId string `pulumi:"correlationId"`
	// Timestamp of the backup creation.
	Created string `pulumi:"created"`
	// List of databases included in the backup.
	Databases []DatabaseBackupSettingResponse `pulumi:"databases"`
	// Timestamp when this backup finished.
	FinishedTimeStamp string `pulumi:"finishedTimeStamp"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Timestamp of a last restore operation which used this backup.
	LastRestoreTimeStamp string `pulumi:"lastRestoreTimeStamp"`
	// Details regarding this backup. Might contain an error message.
	Log string `pulumi:"log"`
	// Resource Name.
	Name string `pulumi:"name"`
	// True if this backup has been created due to a schedule being triggered.
	Scheduled bool `pulumi:"scheduled"`
	// Size of the backup in bytes.
	SizeInBytes float64 `pulumi:"sizeInBytes"`
	// Backup status.
	Status string `pulumi:"status"`
	// SAS URL for the storage account container which contains this backup.
	StorageAccountUrl string `pulumi:"storageAccountUrl"`
	// Resource type.
	Type string `pulumi:"type"`
	// Size of the original web app which has been backed up.
	WebsiteSizeInBytes float64 `pulumi:"websiteSizeInBytes"`
}

// Backup description.
type BackupItemResponseOutput struct{ *pulumi.OutputState }

func (BackupItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupItemResponse)(nil)).Elem()
}

func (o BackupItemResponseOutput) ToBackupItemResponseOutput() BackupItemResponseOutput {
	return o
}

func (o BackupItemResponseOutput) ToBackupItemResponseOutputWithContext(ctx context.Context) BackupItemResponseOutput {
	return o
}

// Id of the backup.
func (o BackupItemResponseOutput) BackupId() pulumi.IntOutput {
	return o.ApplyT(func(v BackupItemResponse) int { return v.BackupId }).(pulumi.IntOutput)
}

// Name of the blob which contains data for this backup.
func (o BackupItemResponseOutput) BlobName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.BlobName }).(pulumi.StringOutput)
}

// Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.
func (o BackupItemResponseOutput) CorrelationId() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.CorrelationId }).(pulumi.StringOutput)
}

// Timestamp of the backup creation.
func (o BackupItemResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.Created }).(pulumi.StringOutput)
}

// List of databases included in the backup.
func (o BackupItemResponseOutput) Databases() DatabaseBackupSettingResponseArrayOutput {
	return o.ApplyT(func(v BackupItemResponse) []DatabaseBackupSettingResponse { return v.Databases }).(DatabaseBackupSettingResponseArrayOutput)
}

// Timestamp when this backup finished.
func (o BackupItemResponseOutput) FinishedTimeStamp() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.FinishedTimeStamp }).(pulumi.StringOutput)
}

// Resource Id.
func (o BackupItemResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o BackupItemResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupItemResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Timestamp of a last restore operation which used this backup.
func (o BackupItemResponseOutput) LastRestoreTimeStamp() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.LastRestoreTimeStamp }).(pulumi.StringOutput)
}

// Details regarding this backup. Might contain an error message.
func (o BackupItemResponseOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.Log }).(pulumi.StringOutput)
}

// Resource Name.
func (o BackupItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

// True if this backup has been created due to a schedule being triggered.
func (o BackupItemResponseOutput) Scheduled() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupItemResponse) bool { return v.Scheduled }).(pulumi.BoolOutput)
}

// Size of the backup in bytes.
func (o BackupItemResponseOutput) SizeInBytes() pulumi.Float64Output {
	return o.ApplyT(func(v BackupItemResponse) float64 { return v.SizeInBytes }).(pulumi.Float64Output)
}

// Backup status.
func (o BackupItemResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.Status }).(pulumi.StringOutput)
}

// SAS URL for the storage account container which contains this backup.
func (o BackupItemResponseOutput) StorageAccountUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.StorageAccountUrl }).(pulumi.StringOutput)
}

// Resource type.
func (o BackupItemResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BackupItemResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Size of the original web app which has been backed up.
func (o BackupItemResponseOutput) WebsiteSizeInBytes() pulumi.Float64Output {
	return o.ApplyT(func(v BackupItemResponse) float64 { return v.WebsiteSizeInBytes }).(pulumi.Float64Output)
}

type BackupItemResponseArrayOutput struct{ *pulumi.OutputState }

func (BackupItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupItemResponse)(nil)).Elem()
}

func (o BackupItemResponseArrayOutput) ToBackupItemResponseArrayOutput() BackupItemResponseArrayOutput {
	return o
}

func (o BackupItemResponseArrayOutput) ToBackupItemResponseArrayOutputWithContext(ctx context.Context) BackupItemResponseArrayOutput {
	return o
}

func (o BackupItemResponseArrayOutput) Index(i pulumi.IntInput) BackupItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupItemResponse {
		return vs[0].([]BackupItemResponse)[vs[1].(int)]
	}).(BackupItemResponseOutput)
}

// Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
type BackupSchedule struct {
	// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
	FrequencyInterval int `pulumi:"frequencyInterval"`
	// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
	FrequencyUnit FrequencyUnit `pulumi:"frequencyUnit"`
	// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
	KeepAtLeastOneBackup bool `pulumi:"keepAtLeastOneBackup"`
	// After how many days backups should be deleted.
	RetentionPeriodInDays int `pulumi:"retentionPeriodInDays"`
	// When the schedule should start working.
	StartTime *string `pulumi:"startTime"`
}

// Defaults sets the appropriate defaults for BackupSchedule
func (val *BackupSchedule) Defaults() *BackupSchedule {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.FrequencyInterval) {
		tmp.FrequencyInterval = 7
	}
	if isZero(tmp.FrequencyUnit) {
		tmp.FrequencyUnit = FrequencyUnit("Day")
	}
	if isZero(tmp.KeepAtLeastOneBackup) {
		tmp.KeepAtLeastOneBackup = true
	}
	if isZero(tmp.RetentionPeriodInDays) {
		tmp.RetentionPeriodInDays = 30
	}
	return &tmp
}

// BackupScheduleInput is an input type that accepts BackupScheduleArgs and BackupScheduleOutput values.
// You can construct a concrete instance of `BackupScheduleInput` via:
//
//	BackupScheduleArgs{...}
type BackupScheduleInput interface {
	pulumi.Input

	ToBackupScheduleOutput() BackupScheduleOutput
	ToBackupScheduleOutputWithContext(context.Context) BackupScheduleOutput
}

// Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
type BackupScheduleArgs struct {
	// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
	FrequencyInterval pulumi.IntInput `pulumi:"frequencyInterval"`
	// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
	FrequencyUnit FrequencyUnitInput `pulumi:"frequencyUnit"`
	// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
	KeepAtLeastOneBackup pulumi.BoolInput `pulumi:"keepAtLeastOneBackup"`
	// After how many days backups should be deleted.
	RetentionPeriodInDays pulumi.IntInput `pulumi:"retentionPeriodInDays"`
	// When the schedule should start working.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

// Defaults sets the appropriate defaults for BackupScheduleArgs
func (val *BackupScheduleArgs) Defaults() *BackupScheduleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FrequencyInterval == nil {
		tmp.FrequencyInterval = pulumi.Int(7)
	}
	if tmp.FrequencyUnit == nil {
		tmp.FrequencyUnit = FrequencyUnit("Day")
	}
	if tmp.KeepAtLeastOneBackup == nil {
		tmp.KeepAtLeastOneBackup = pulumi.Bool(true)
	}
	if tmp.RetentionPeriodInDays == nil {
		tmp.RetentionPeriodInDays = pulumi.Int(30)
	}
	return &tmp
}
func (BackupScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSchedule)(nil)).Elem()
}

func (i BackupScheduleArgs) ToBackupScheduleOutput() BackupScheduleOutput {
	return i.ToBackupScheduleOutputWithContext(context.Background())
}

func (i BackupScheduleArgs) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleOutput)
}

func (i BackupScheduleArgs) ToBackupSchedulePtrOutput() BackupSchedulePtrOutput {
	return i.ToBackupSchedulePtrOutputWithContext(context.Background())
}

func (i BackupScheduleArgs) ToBackupSchedulePtrOutputWithContext(ctx context.Context) BackupSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleOutput).ToBackupSchedulePtrOutputWithContext(ctx)
}

// BackupSchedulePtrInput is an input type that accepts BackupScheduleArgs, BackupSchedulePtr and BackupSchedulePtrOutput values.
// You can construct a concrete instance of `BackupSchedulePtrInput` via:
//
//	        BackupScheduleArgs{...}
//
//	or:
//
//	        nil
type BackupSchedulePtrInput interface {
	pulumi.Input

	ToBackupSchedulePtrOutput() BackupSchedulePtrOutput
	ToBackupSchedulePtrOutputWithContext(context.Context) BackupSchedulePtrOutput
}

type backupSchedulePtrType BackupScheduleArgs

func BackupSchedulePtr(v *BackupScheduleArgs) BackupSchedulePtrInput {
	return (*backupSchedulePtrType)(v)
}

func (*backupSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (i *backupSchedulePtrType) ToBackupSchedulePtrOutput() BackupSchedulePtrOutput {
	return i.ToBackupSchedulePtrOutputWithContext(context.Background())
}

func (i *backupSchedulePtrType) ToBackupSchedulePtrOutputWithContext(ctx context.Context) BackupSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSchedulePtrOutput)
}

// Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
type BackupScheduleOutput struct{ *pulumi.OutputState }

func (BackupScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleOutput) ToBackupScheduleOutput() BackupScheduleOutput {
	return o
}

func (o BackupScheduleOutput) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return o
}

func (o BackupScheduleOutput) ToBackupSchedulePtrOutput() BackupSchedulePtrOutput {
	return o.ToBackupSchedulePtrOutputWithContext(context.Background())
}

func (o BackupScheduleOutput) ToBackupSchedulePtrOutputWithContext(ctx context.Context) BackupSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupSchedule) *BackupSchedule {
		return &v
	}).(BackupSchedulePtrOutput)
}

// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
func (o BackupScheduleOutput) FrequencyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v BackupSchedule) int { return v.FrequencyInterval }).(pulumi.IntOutput)
}

// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
func (o BackupScheduleOutput) FrequencyUnit() FrequencyUnitOutput {
	return o.ApplyT(func(v BackupSchedule) FrequencyUnit { return v.FrequencyUnit }).(FrequencyUnitOutput)
}

// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
func (o BackupScheduleOutput) KeepAtLeastOneBackup() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupSchedule) bool { return v.KeepAtLeastOneBackup }).(pulumi.BoolOutput)
}

// After how many days backups should be deleted.
func (o BackupScheduleOutput) RetentionPeriodInDays() pulumi.IntOutput {
	return o.ApplyT(func(v BackupSchedule) int { return v.RetentionPeriodInDays }).(pulumi.IntOutput)
}

// When the schedule should start working.
func (o BackupScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type BackupSchedulePtrOutput struct{ *pulumi.OutputState }

func (BackupSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (o BackupSchedulePtrOutput) ToBackupSchedulePtrOutput() BackupSchedulePtrOutput {
	return o
}

func (o BackupSchedulePtrOutput) ToBackupSchedulePtrOutputWithContext(ctx context.Context) BackupSchedulePtrOutput {
	return o
}

func (o BackupSchedulePtrOutput) Elem() BackupScheduleOutput {
	return o.ApplyT(func(v *BackupSchedule) BackupSchedule {
		if v != nil {
			return *v
		}
		var ret BackupSchedule
		return ret
	}).(BackupScheduleOutput)
}

// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
func (o BackupSchedulePtrOutput) FrequencyInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) *int {
		if v == nil {
			return nil
		}
		return &v.FrequencyInterval
	}).(pulumi.IntPtrOutput)
}

// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
func (o BackupSchedulePtrOutput) FrequencyUnit() FrequencyUnitPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) *FrequencyUnit {
		if v == nil {
			return nil
		}
		return &v.FrequencyUnit
	}).(FrequencyUnitPtrOutput)
}

// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
func (o BackupSchedulePtrOutput) KeepAtLeastOneBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) *bool {
		if v == nil {
			return nil
		}
		return &v.KeepAtLeastOneBackup
	}).(pulumi.BoolPtrOutput)
}

// After how many days backups should be deleted.
func (o BackupSchedulePtrOutput) RetentionPeriodInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) *int {
		if v == nil {
			return nil
		}
		return &v.RetentionPeriodInDays
	}).(pulumi.IntPtrOutput)
}

// When the schedule should start working.
func (o BackupSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
type BackupScheduleResponse struct {
	// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
	FrequencyInterval int `pulumi:"frequencyInterval"`
	// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
	FrequencyUnit string `pulumi:"frequencyUnit"`
	// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
	KeepAtLeastOneBackup bool `pulumi:"keepAtLeastOneBackup"`
	// Last time when this schedule was triggered.
	LastExecutionTime string `pulumi:"lastExecutionTime"`
	// After how many days backups should be deleted.
	RetentionPeriodInDays int `pulumi:"retentionPeriodInDays"`
	// When the schedule should start working.
	StartTime *string `pulumi:"startTime"`
}

// Defaults sets the appropriate defaults for BackupScheduleResponse
func (val *BackupScheduleResponse) Defaults() *BackupScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.FrequencyInterval) {
		tmp.FrequencyInterval = 7
	}
	if isZero(tmp.FrequencyUnit) {
		tmp.FrequencyUnit = "Day"
	}
	if isZero(tmp.KeepAtLeastOneBackup) {
		tmp.KeepAtLeastOneBackup = true
	}
	if isZero(tmp.RetentionPeriodInDays) {
		tmp.RetentionPeriodInDays = 30
	}
	return &tmp
}

// Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
type BackupScheduleResponseOutput struct{ *pulumi.OutputState }

func (BackupScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupScheduleResponse)(nil)).Elem()
}

func (o BackupScheduleResponseOutput) ToBackupScheduleResponseOutput() BackupScheduleResponseOutput {
	return o
}

func (o BackupScheduleResponseOutput) ToBackupScheduleResponseOutputWithContext(ctx context.Context) BackupScheduleResponseOutput {
	return o
}

// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
func (o BackupScheduleResponseOutput) FrequencyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v BackupScheduleResponse) int { return v.FrequencyInterval }).(pulumi.IntOutput)
}

// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
func (o BackupScheduleResponseOutput) FrequencyUnit() pulumi.StringOutput {
	return o.ApplyT(func(v BackupScheduleResponse) string { return v.FrequencyUnit }).(pulumi.StringOutput)
}

// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
func (o BackupScheduleResponseOutput) KeepAtLeastOneBackup() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupScheduleResponse) bool { return v.KeepAtLeastOneBackup }).(pulumi.BoolOutput)
}

// Last time when this schedule was triggered.
func (o BackupScheduleResponseOutput) LastExecutionTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupScheduleResponse) string { return v.LastExecutionTime }).(pulumi.StringOutput)
}

// After how many days backups should be deleted.
func (o BackupScheduleResponseOutput) RetentionPeriodInDays() pulumi.IntOutput {
	return o.ApplyT(func(v BackupScheduleResponse) int { return v.RetentionPeriodInDays }).(pulumi.IntOutput)
}

// When the schedule should start working.
func (o BackupScheduleResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupScheduleResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type BackupScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (BackupScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupScheduleResponse)(nil)).Elem()
}

func (o BackupScheduleResponsePtrOutput) ToBackupScheduleResponsePtrOutput() BackupScheduleResponsePtrOutput {
	return o
}

func (o BackupScheduleResponsePtrOutput) ToBackupScheduleResponsePtrOutputWithContext(ctx context.Context) BackupScheduleResponsePtrOutput {
	return o
}

func (o BackupScheduleResponsePtrOutput) Elem() BackupScheduleResponseOutput {
	return o.ApplyT(func(v *BackupScheduleResponse) BackupScheduleResponse {
		if v != nil {
			return *v
		}
		var ret BackupScheduleResponse
		return ret
	}).(BackupScheduleResponseOutput)
}

// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
func (o BackupScheduleResponsePtrOutput) FrequencyInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FrequencyInterval
	}).(pulumi.IntPtrOutput)
}

// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
func (o BackupScheduleResponsePtrOutput) FrequencyUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FrequencyUnit
	}).(pulumi.StringPtrOutput)
}

// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
func (o BackupScheduleResponsePtrOutput) KeepAtLeastOneBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupScheduleResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.KeepAtLeastOneBackup
	}).(pulumi.BoolPtrOutput)
}

// Last time when this schedule was triggered.
func (o BackupScheduleResponsePtrOutput) LastExecutionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastExecutionTime
	}).(pulumi.StringPtrOutput)
}

// After how many days backups should be deleted.
func (o BackupScheduleResponsePtrOutput) RetentionPeriodInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RetentionPeriodInDays
	}).(pulumi.IntPtrOutput)
}

// When the schedule should start working.
func (o BackupScheduleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Database connection string value to type pair.
type ConnStringValueTypePairResponse struct {
	// Type of database.
	Type string `pulumi:"type"`
	// Value of pair.
	Value string `pulumi:"value"`
}

// Database connection string value to type pair.
type ConnStringValueTypePairResponseOutput struct{ *pulumi.OutputState }

func (ConnStringValueTypePairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnStringValueTypePairResponse)(nil)).Elem()
}

func (o ConnStringValueTypePairResponseOutput) ToConnStringValueTypePairResponseOutput() ConnStringValueTypePairResponseOutput {
	return o
}

func (o ConnStringValueTypePairResponseOutput) ToConnStringValueTypePairResponseOutputWithContext(ctx context.Context) ConnStringValueTypePairResponseOutput {
	return o
}

// Type of database.
func (o ConnStringValueTypePairResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnStringValueTypePairResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of pair.
func (o ConnStringValueTypePairResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConnStringValueTypePairResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ConnStringValueTypePairResponseMapOutput struct{ *pulumi.OutputState }

func (ConnStringValueTypePairResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ConnStringValueTypePairResponse)(nil)).Elem()
}

func (o ConnStringValueTypePairResponseMapOutput) ToConnStringValueTypePairResponseMapOutput() ConnStringValueTypePairResponseMapOutput {
	return o
}

func (o ConnStringValueTypePairResponseMapOutput) ToConnStringValueTypePairResponseMapOutputWithContext(ctx context.Context) ConnStringValueTypePairResponseMapOutput {
	return o
}

func (o ConnStringValueTypePairResponseMapOutput) MapIndex(k pulumi.StringInput) ConnStringValueTypePairResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ConnStringValueTypePairResponse {
		return vs[0].(map[string]ConnStringValueTypePairResponse)[vs[1].(string)]
	}).(ConnStringValueTypePairResponseOutput)
}

// Database backup settings.
type DatabaseBackupSetting struct {
	// Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
	ConnectionString *string `pulumi:"connectionString"`
	// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
	// This is used during restore with overwrite connection strings options.
	ConnectionStringName *string `pulumi:"connectionStringName"`
	// Database type (e.g. SqlAzure / MySql).
	DatabaseType string  `pulumi:"databaseType"`
	Name         *string `pulumi:"name"`
}

// DatabaseBackupSettingInput is an input type that accepts DatabaseBackupSettingArgs and DatabaseBackupSettingOutput values.
// You can construct a concrete instance of `DatabaseBackupSettingInput` via:
//
//	DatabaseBackupSettingArgs{...}
type DatabaseBackupSettingInput interface {
	pulumi.Input

	ToDatabaseBackupSettingOutput() DatabaseBackupSettingOutput
	ToDatabaseBackupSettingOutputWithContext(context.Context) DatabaseBackupSettingOutput
}

// Database backup settings.
type DatabaseBackupSettingArgs struct {
	// Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
	ConnectionString pulumi.StringPtrInput `pulumi:"connectionString"`
	// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
	// This is used during restore with overwrite connection strings options.
	ConnectionStringName pulumi.StringPtrInput `pulumi:"connectionStringName"`
	// Database type (e.g. SqlAzure / MySql).
	DatabaseType pulumi.StringInput    `pulumi:"databaseType"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
}

func (DatabaseBackupSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackupSetting)(nil)).Elem()
}

func (i DatabaseBackupSettingArgs) ToDatabaseBackupSettingOutput() DatabaseBackupSettingOutput {
	return i.ToDatabaseBackupSettingOutputWithContext(context.Background())
}

func (i DatabaseBackupSettingArgs) ToDatabaseBackupSettingOutputWithContext(ctx context.Context) DatabaseBackupSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupSettingOutput)
}

// DatabaseBackupSettingArrayInput is an input type that accepts DatabaseBackupSettingArray and DatabaseBackupSettingArrayOutput values.
// You can construct a concrete instance of `DatabaseBackupSettingArrayInput` via:
//
//	DatabaseBackupSettingArray{ DatabaseBackupSettingArgs{...} }
type DatabaseBackupSettingArrayInput interface {
	pulumi.Input

	ToDatabaseBackupSettingArrayOutput() DatabaseBackupSettingArrayOutput
	ToDatabaseBackupSettingArrayOutputWithContext(context.Context) DatabaseBackupSettingArrayOutput
}

type DatabaseBackupSettingArray []DatabaseBackupSettingInput

func (DatabaseBackupSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseBackupSetting)(nil)).Elem()
}

func (i DatabaseBackupSettingArray) ToDatabaseBackupSettingArrayOutput() DatabaseBackupSettingArrayOutput {
	return i.ToDatabaseBackupSettingArrayOutputWithContext(context.Background())
}

func (i DatabaseBackupSettingArray) ToDatabaseBackupSettingArrayOutputWithContext(ctx context.Context) DatabaseBackupSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupSettingArrayOutput)
}

// Database backup settings.
type DatabaseBackupSettingOutput struct{ *pulumi.OutputState }

func (DatabaseBackupSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackupSetting)(nil)).Elem()
}

func (o DatabaseBackupSettingOutput) ToDatabaseBackupSettingOutput() DatabaseBackupSettingOutput {
	return o
}

func (o DatabaseBackupSettingOutput) ToDatabaseBackupSettingOutputWithContext(ctx context.Context) DatabaseBackupSettingOutput {
	return o
}

// Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
func (o DatabaseBackupSettingOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseBackupSetting) *string { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
// This is used during restore with overwrite connection strings options.
func (o DatabaseBackupSettingOutput) ConnectionStringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseBackupSetting) *string { return v.ConnectionStringName }).(pulumi.StringPtrOutput)
}

// Database type (e.g. SqlAzure / MySql).
func (o DatabaseBackupSettingOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupSetting) string { return v.DatabaseType }).(pulumi.StringOutput)
}

func (o DatabaseBackupSettingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseBackupSetting) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatabaseBackupSettingArrayOutput struct{ *pulumi.OutputState }

func (DatabaseBackupSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseBackupSetting)(nil)).Elem()
}

func (o DatabaseBackupSettingArrayOutput) ToDatabaseBackupSettingArrayOutput() DatabaseBackupSettingArrayOutput {
	return o
}

func (o DatabaseBackupSettingArrayOutput) ToDatabaseBackupSettingArrayOutputWithContext(ctx context.Context) DatabaseBackupSettingArrayOutput {
	return o
}

func (o DatabaseBackupSettingArrayOutput) Index(i pulumi.IntInput) DatabaseBackupSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseBackupSetting {
		return vs[0].([]DatabaseBackupSetting)[vs[1].(int)]
	}).(DatabaseBackupSettingOutput)
}

// Database backup settings.
type DatabaseBackupSettingResponse struct {
	// Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
	ConnectionString *string `pulumi:"connectionString"`
	// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
	// This is used during restore with overwrite connection strings options.
	ConnectionStringName *string `pulumi:"connectionStringName"`
	// Database type (e.g. SqlAzure / MySql).
	DatabaseType string  `pulumi:"databaseType"`
	Name         *string `pulumi:"name"`
}

// Database backup settings.
type DatabaseBackupSettingResponseOutput struct{ *pulumi.OutputState }

func (DatabaseBackupSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackupSettingResponse)(nil)).Elem()
}

func (o DatabaseBackupSettingResponseOutput) ToDatabaseBackupSettingResponseOutput() DatabaseBackupSettingResponseOutput {
	return o
}

func (o DatabaseBackupSettingResponseOutput) ToDatabaseBackupSettingResponseOutputWithContext(ctx context.Context) DatabaseBackupSettingResponseOutput {
	return o
}

// Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
func (o DatabaseBackupSettingResponseOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseBackupSettingResponse) *string { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
// This is used during restore with overwrite connection strings options.
func (o DatabaseBackupSettingResponseOutput) ConnectionStringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseBackupSettingResponse) *string { return v.ConnectionStringName }).(pulumi.StringPtrOutput)
}

// Database type (e.g. SqlAzure / MySql).
func (o DatabaseBackupSettingResponseOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupSettingResponse) string { return v.DatabaseType }).(pulumi.StringOutput)
}

func (o DatabaseBackupSettingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseBackupSettingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatabaseBackupSettingResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseBackupSettingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseBackupSettingResponse)(nil)).Elem()
}

func (o DatabaseBackupSettingResponseArrayOutput) ToDatabaseBackupSettingResponseArrayOutput() DatabaseBackupSettingResponseArrayOutput {
	return o
}

func (o DatabaseBackupSettingResponseArrayOutput) ToDatabaseBackupSettingResponseArrayOutputWithContext(ctx context.Context) DatabaseBackupSettingResponseArrayOutput {
	return o
}

func (o DatabaseBackupSettingResponseArrayOutput) Index(i pulumi.IntInput) DatabaseBackupSettingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseBackupSettingResponse {
		return vs[0].([]DatabaseBackupSettingResponse)[vs[1].(int)]
	}).(DatabaseBackupSettingResponseOutput)
}

// Extended Location.
type ExtendedLocation struct {
	// Name of extended location.
	Name *string `pulumi:"name"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// Extended Location.
type ExtendedLocationArgs struct {
	// Name of extended location.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

// Extended Location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

// Name of extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// Name of extended location.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Extended Location.
type ExtendedLocationResponse struct {
	// Name of extended location.
	Name *string `pulumi:"name"`
	// Type of extended location.
	Type string `pulumi:"type"`
}

// Extended Location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// Name of extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// Name of extended location.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Type of extended location.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type FrontEndConfiguration struct {
	Kind *FrontEndServiceType `pulumi:"kind"`
}

// FrontEndConfigurationInput is an input type that accepts FrontEndConfigurationArgs and FrontEndConfigurationOutput values.
// You can construct a concrete instance of `FrontEndConfigurationInput` via:
//
//	FrontEndConfigurationArgs{...}
type FrontEndConfigurationInput interface {
	pulumi.Input

	ToFrontEndConfigurationOutput() FrontEndConfigurationOutput
	ToFrontEndConfigurationOutputWithContext(context.Context) FrontEndConfigurationOutput
}

type FrontEndConfigurationArgs struct {
	Kind FrontEndServiceTypePtrInput `pulumi:"kind"`
}

func (FrontEndConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontEndConfiguration)(nil)).Elem()
}

func (i FrontEndConfigurationArgs) ToFrontEndConfigurationOutput() FrontEndConfigurationOutput {
	return i.ToFrontEndConfigurationOutputWithContext(context.Background())
}

func (i FrontEndConfigurationArgs) ToFrontEndConfigurationOutputWithContext(ctx context.Context) FrontEndConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontEndConfigurationOutput)
}

func (i FrontEndConfigurationArgs) ToFrontEndConfigurationPtrOutput() FrontEndConfigurationPtrOutput {
	return i.ToFrontEndConfigurationPtrOutputWithContext(context.Background())
}

func (i FrontEndConfigurationArgs) ToFrontEndConfigurationPtrOutputWithContext(ctx context.Context) FrontEndConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontEndConfigurationOutput).ToFrontEndConfigurationPtrOutputWithContext(ctx)
}

// FrontEndConfigurationPtrInput is an input type that accepts FrontEndConfigurationArgs, FrontEndConfigurationPtr and FrontEndConfigurationPtrOutput values.
// You can construct a concrete instance of `FrontEndConfigurationPtrInput` via:
//
//	        FrontEndConfigurationArgs{...}
//
//	or:
//
//	        nil
type FrontEndConfigurationPtrInput interface {
	pulumi.Input

	ToFrontEndConfigurationPtrOutput() FrontEndConfigurationPtrOutput
	ToFrontEndConfigurationPtrOutputWithContext(context.Context) FrontEndConfigurationPtrOutput
}

type frontEndConfigurationPtrType FrontEndConfigurationArgs

func FrontEndConfigurationPtr(v *FrontEndConfigurationArgs) FrontEndConfigurationPtrInput {
	return (*frontEndConfigurationPtrType)(v)
}

func (*frontEndConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontEndConfiguration)(nil)).Elem()
}

func (i *frontEndConfigurationPtrType) ToFrontEndConfigurationPtrOutput() FrontEndConfigurationPtrOutput {
	return i.ToFrontEndConfigurationPtrOutputWithContext(context.Background())
}

func (i *frontEndConfigurationPtrType) ToFrontEndConfigurationPtrOutputWithContext(ctx context.Context) FrontEndConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontEndConfigurationPtrOutput)
}

type FrontEndConfigurationOutput struct{ *pulumi.OutputState }

func (FrontEndConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontEndConfiguration)(nil)).Elem()
}

func (o FrontEndConfigurationOutput) ToFrontEndConfigurationOutput() FrontEndConfigurationOutput {
	return o
}

func (o FrontEndConfigurationOutput) ToFrontEndConfigurationOutputWithContext(ctx context.Context) FrontEndConfigurationOutput {
	return o
}

func (o FrontEndConfigurationOutput) ToFrontEndConfigurationPtrOutput() FrontEndConfigurationPtrOutput {
	return o.ToFrontEndConfigurationPtrOutputWithContext(context.Background())
}

func (o FrontEndConfigurationOutput) ToFrontEndConfigurationPtrOutputWithContext(ctx context.Context) FrontEndConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontEndConfiguration) *FrontEndConfiguration {
		return &v
	}).(FrontEndConfigurationPtrOutput)
}

func (o FrontEndConfigurationOutput) Kind() FrontEndServiceTypePtrOutput {
	return o.ApplyT(func(v FrontEndConfiguration) *FrontEndServiceType { return v.Kind }).(FrontEndServiceTypePtrOutput)
}

type FrontEndConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FrontEndConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontEndConfiguration)(nil)).Elem()
}

func (o FrontEndConfigurationPtrOutput) ToFrontEndConfigurationPtrOutput() FrontEndConfigurationPtrOutput {
	return o
}

func (o FrontEndConfigurationPtrOutput) ToFrontEndConfigurationPtrOutputWithContext(ctx context.Context) FrontEndConfigurationPtrOutput {
	return o
}

func (o FrontEndConfigurationPtrOutput) Elem() FrontEndConfigurationOutput {
	return o.ApplyT(func(v *FrontEndConfiguration) FrontEndConfiguration {
		if v != nil {
			return *v
		}
		var ret FrontEndConfiguration
		return ret
	}).(FrontEndConfigurationOutput)
}

func (o FrontEndConfigurationPtrOutput) Kind() FrontEndServiceTypePtrOutput {
	return o.ApplyT(func(v *FrontEndConfiguration) *FrontEndServiceType {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(FrontEndServiceTypePtrOutput)
}

type FrontEndConfigurationResponse struct {
	Kind *string `pulumi:"kind"`
}

type FrontEndConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FrontEndConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontEndConfigurationResponse)(nil)).Elem()
}

func (o FrontEndConfigurationResponseOutput) ToFrontEndConfigurationResponseOutput() FrontEndConfigurationResponseOutput {
	return o
}

func (o FrontEndConfigurationResponseOutput) ToFrontEndConfigurationResponseOutputWithContext(ctx context.Context) FrontEndConfigurationResponseOutput {
	return o
}

func (o FrontEndConfigurationResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontEndConfigurationResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type FrontEndConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FrontEndConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontEndConfigurationResponse)(nil)).Elem()
}

func (o FrontEndConfigurationResponsePtrOutput) ToFrontEndConfigurationResponsePtrOutput() FrontEndConfigurationResponsePtrOutput {
	return o
}

func (o FrontEndConfigurationResponsePtrOutput) ToFrontEndConfigurationResponsePtrOutputWithContext(ctx context.Context) FrontEndConfigurationResponsePtrOutput {
	return o
}

func (o FrontEndConfigurationResponsePtrOutput) Elem() FrontEndConfigurationResponseOutput {
	return o.ApplyT(func(v *FrontEndConfigurationResponse) FrontEndConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret FrontEndConfigurationResponse
		return ret
	}).(FrontEndConfigurationResponseOutput)
}

func (o FrontEndConfigurationResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontEndConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// A domain specific resource identifier.
type IdentifierResponse struct {
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// Resource type.
	Type string `pulumi:"type"`
	// String representation of the identity.
	Value *string `pulumi:"value"`
}

// A domain specific resource identifier.
type IdentifierResponseOutput struct{ *pulumi.OutputState }

func (IdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentifierResponse)(nil)).Elem()
}

func (o IdentifierResponseOutput) ToIdentifierResponseOutput() IdentifierResponseOutput {
	return o
}

func (o IdentifierResponseOutput) ToIdentifierResponseOutputWithContext(ctx context.Context) IdentifierResponseOutput {
	return o
}

// Resource Id.
func (o IdentifierResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o IdentifierResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentifierResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o IdentifierResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Resource type.
func (o IdentifierResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierResponse) string { return v.Type }).(pulumi.StringOutput)
}

// String representation of the identity.
func (o IdentifierResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentifierResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IdentifierResponseArrayOutput struct{ *pulumi.OutputState }

func (IdentifierResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentifierResponse)(nil)).Elem()
}

func (o IdentifierResponseArrayOutput) ToIdentifierResponseArrayOutput() IdentifierResponseArrayOutput {
	return o
}

func (o IdentifierResponseArrayOutput) ToIdentifierResponseArrayOutputWithContext(ctx context.Context) IdentifierResponseArrayOutput {
	return o
}

func (o IdentifierResponseArrayOutput) Index(i pulumi.IntInput) IdentifierResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentifierResponse {
		return vs[0].([]IdentifierResponse)[vs[1].(int)]
	}).(IdentifierResponseOutput)
}

type LogAnalyticsConfiguration struct {
	CustomerId *string `pulumi:"customerId"`
	SharedKey  *string `pulumi:"sharedKey"`
}

// LogAnalyticsConfigurationInput is an input type that accepts LogAnalyticsConfigurationArgs and LogAnalyticsConfigurationOutput values.
// You can construct a concrete instance of `LogAnalyticsConfigurationInput` via:
//
//	LogAnalyticsConfigurationArgs{...}
type LogAnalyticsConfigurationInput interface {
	pulumi.Input

	ToLogAnalyticsConfigurationOutput() LogAnalyticsConfigurationOutput
	ToLogAnalyticsConfigurationOutputWithContext(context.Context) LogAnalyticsConfigurationOutput
}

type LogAnalyticsConfigurationArgs struct {
	CustomerId pulumi.StringPtrInput `pulumi:"customerId"`
	SharedKey  pulumi.StringPtrInput `pulumi:"sharedKey"`
}

func (LogAnalyticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsConfiguration)(nil)).Elem()
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationOutput() LogAnalyticsConfigurationOutput {
	return i.ToLogAnalyticsConfigurationOutputWithContext(context.Background())
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationOutputWithContext(ctx context.Context) LogAnalyticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsConfigurationOutput)
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return i.ToLogAnalyticsConfigurationPtrOutputWithContext(context.Background())
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsConfigurationOutput).ToLogAnalyticsConfigurationPtrOutputWithContext(ctx)
}

// LogAnalyticsConfigurationPtrInput is an input type that accepts LogAnalyticsConfigurationArgs, LogAnalyticsConfigurationPtr and LogAnalyticsConfigurationPtrOutput values.
// You can construct a concrete instance of `LogAnalyticsConfigurationPtrInput` via:
//
//	        LogAnalyticsConfigurationArgs{...}
//
//	or:
//
//	        nil
type LogAnalyticsConfigurationPtrInput interface {
	pulumi.Input

	ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput
	ToLogAnalyticsConfigurationPtrOutputWithContext(context.Context) LogAnalyticsConfigurationPtrOutput
}

type logAnalyticsConfigurationPtrType LogAnalyticsConfigurationArgs

func LogAnalyticsConfigurationPtr(v *LogAnalyticsConfigurationArgs) LogAnalyticsConfigurationPtrInput {
	return (*logAnalyticsConfigurationPtrType)(v)
}

func (*logAnalyticsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsConfiguration)(nil)).Elem()
}

func (i *logAnalyticsConfigurationPtrType) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return i.ToLogAnalyticsConfigurationPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsConfigurationPtrType) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsConfigurationPtrOutput)
}

type LogAnalyticsConfigurationOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsConfiguration)(nil)).Elem()
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationOutput() LogAnalyticsConfigurationOutput {
	return o
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationOutputWithContext(ctx context.Context) LogAnalyticsConfigurationOutput {
	return o
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return o.ToLogAnalyticsConfigurationPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogAnalyticsConfiguration) *LogAnalyticsConfiguration {
		return &v
	}).(LogAnalyticsConfigurationPtrOutput)
}

func (o LogAnalyticsConfigurationOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfiguration) *string { return v.CustomerId }).(pulumi.StringPtrOutput)
}

func (o LogAnalyticsConfigurationOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfiguration) *string { return v.SharedKey }).(pulumi.StringPtrOutput)
}

type LogAnalyticsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsConfiguration)(nil)).Elem()
}

func (o LogAnalyticsConfigurationPtrOutput) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return o
}

func (o LogAnalyticsConfigurationPtrOutput) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return o
}

func (o LogAnalyticsConfigurationPtrOutput) Elem() LogAnalyticsConfigurationOutput {
	return o.ApplyT(func(v *LogAnalyticsConfiguration) LogAnalyticsConfiguration {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsConfiguration
		return ret
	}).(LogAnalyticsConfigurationOutput)
}

func (o LogAnalyticsConfigurationPtrOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomerId
	}).(pulumi.StringPtrOutput)
}

func (o LogAnalyticsConfigurationPtrOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SharedKey
	}).(pulumi.StringPtrOutput)
}

type LogAnalyticsConfigurationResponse struct {
	CustomerId *string `pulumi:"customerId"`
}

type LogAnalyticsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsConfigurationResponse)(nil)).Elem()
}

func (o LogAnalyticsConfigurationResponseOutput) ToLogAnalyticsConfigurationResponseOutput() LogAnalyticsConfigurationResponseOutput {
	return o
}

func (o LogAnalyticsConfigurationResponseOutput) ToLogAnalyticsConfigurationResponseOutputWithContext(ctx context.Context) LogAnalyticsConfigurationResponseOutput {
	return o
}

func (o LogAnalyticsConfigurationResponseOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfigurationResponse) *string { return v.CustomerId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsConfigurationResponse)(nil)).Elem()
}

func (o LogAnalyticsConfigurationResponsePtrOutput) ToLogAnalyticsConfigurationResponsePtrOutput() LogAnalyticsConfigurationResponsePtrOutput {
	return o
}

func (o LogAnalyticsConfigurationResponsePtrOutput) ToLogAnalyticsConfigurationResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationResponsePtrOutput {
	return o
}

func (o LogAnalyticsConfigurationResponsePtrOutput) Elem() LogAnalyticsConfigurationResponseOutput {
	return o.ApplyT(func(v *LogAnalyticsConfigurationResponse) LogAnalyticsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsConfigurationResponse
		return ret
	}).(LogAnalyticsConfigurationResponseOutput)
}

func (o LogAnalyticsConfigurationResponsePtrOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomerId
	}).(pulumi.StringPtrOutput)
}

// Static Site User ARM resource.
type StaticSiteUserARMResourceResponse struct {
	// The display name for the static site user.
	DisplayName string `pulumi:"displayName"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// The identity provider for the static site user.
	Provider string `pulumi:"provider"`
	// The roles for the static site user, in free-form string format
	Roles *string `pulumi:"roles"`
	// Resource type.
	Type string `pulumi:"type"`
	// The user id for the static site user.
	UserId string `pulumi:"userId"`
}

// Static Site User ARM resource.
type StaticSiteUserARMResourceResponseOutput struct{ *pulumi.OutputState }

func (StaticSiteUserARMResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteUserARMResourceResponse)(nil)).Elem()
}

func (o StaticSiteUserARMResourceResponseOutput) ToStaticSiteUserARMResourceResponseOutput() StaticSiteUserARMResourceResponseOutput {
	return o
}

func (o StaticSiteUserARMResourceResponseOutput) ToStaticSiteUserARMResourceResponseOutputWithContext(ctx context.Context) StaticSiteUserARMResourceResponseOutput {
	return o
}

// The display name for the static site user.
func (o StaticSiteUserARMResourceResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Resource Id.
func (o StaticSiteUserARMResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o StaticSiteUserARMResourceResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o StaticSiteUserARMResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The identity provider for the static site user.
func (o StaticSiteUserARMResourceResponseOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Provider }).(pulumi.StringOutput)
}

// The roles for the static site user, in free-form string format
func (o StaticSiteUserARMResourceResponseOutput) Roles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) *string { return v.Roles }).(pulumi.StringPtrOutput)
}

// Resource type.
func (o StaticSiteUserARMResourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user id for the static site user.
func (o StaticSiteUserARMResourceResponseOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.UserId }).(pulumi.StringOutput)
}

type StaticSiteUserARMResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (StaticSiteUserARMResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticSiteUserARMResourceResponse)(nil)).Elem()
}

func (o StaticSiteUserARMResourceResponseArrayOutput) ToStaticSiteUserARMResourceResponseArrayOutput() StaticSiteUserARMResourceResponseArrayOutput {
	return o
}

func (o StaticSiteUserARMResourceResponseArrayOutput) ToStaticSiteUserARMResourceResponseArrayOutputWithContext(ctx context.Context) StaticSiteUserARMResourceResponseArrayOutput {
	return o
}

func (o StaticSiteUserARMResourceResponseArrayOutput) Index(i pulumi.IntInput) StaticSiteUserARMResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticSiteUserARMResourceResponse {
		return vs[0].([]StaticSiteUserARMResourceResponse)[vs[1].(int)]
	}).(StaticSiteUserARMResourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AppLogsConfigurationOutput{})
	pulumi.RegisterOutputType(AppLogsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AppLogsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AppLogsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ArcConfigurationOutput{})
	pulumi.RegisterOutputType(ArcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ArcConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ArcConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureStorageInfoValueResponseOutput{})
	pulumi.RegisterOutputType(AzureStorageInfoValueResponseMapOutput{})
	pulumi.RegisterOutputType(BackupItemResponseOutput{})
	pulumi.RegisterOutputType(BackupItemResponseArrayOutput{})
	pulumi.RegisterOutputType(BackupScheduleOutput{})
	pulumi.RegisterOutputType(BackupSchedulePtrOutput{})
	pulumi.RegisterOutputType(BackupScheduleResponseOutput{})
	pulumi.RegisterOutputType(BackupScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnStringValueTypePairResponseOutput{})
	pulumi.RegisterOutputType(ConnStringValueTypePairResponseMapOutput{})
	pulumi.RegisterOutputType(DatabaseBackupSettingOutput{})
	pulumi.RegisterOutputType(DatabaseBackupSettingArrayOutput{})
	pulumi.RegisterOutputType(DatabaseBackupSettingResponseOutput{})
	pulumi.RegisterOutputType(DatabaseBackupSettingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(FrontEndConfigurationOutput{})
	pulumi.RegisterOutputType(FrontEndConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FrontEndConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FrontEndConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentifierResponseOutput{})
	pulumi.RegisterOutputType(IdentifierResponseArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StaticSiteUserARMResourceResponseOutput{})
	pulumi.RegisterOutputType(StaticSiteUserARMResourceResponseArrayOutput{})
}
