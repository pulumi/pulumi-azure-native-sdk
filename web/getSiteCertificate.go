// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package web

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SSL certificate for an app.
//
// Uses Azure REST API version 2024-11-01.
func LookupSiteCertificate(ctx *pulumi.Context, args *LookupSiteCertificateArgs, opts ...pulumi.InvokeOption) (*LookupSiteCertificateResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSiteCertificateResult
	err := ctx.Invoke("azure-native:web:getSiteCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSiteCertificateArgs struct {
	// Name of the certificate.
	CertificateName string `pulumi:"certificateName"`
	// Name of the site.
	Name string `pulumi:"name"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// SSL certificate for an app.
type LookupSiteCertificateResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// CNAME of the certificate to be issued via free certificate
	CanonicalName *string `pulumi:"canonicalName"`
	// Raw bytes of .cer file
	CerBlob string `pulumi:"cerBlob"`
	// Method of domain validation for free cert
	DomainValidationMethod *string `pulumi:"domainValidationMethod"`
	// Certificate expiration date.
	ExpirationDate string `pulumi:"expirationDate"`
	// Friendly name of the certificate.
	FriendlyName string `pulumi:"friendlyName"`
	// Host names the certificate applies to.
	HostNames []string `pulumi:"hostNames"`
	// Specification for the App Service Environment to use for the certificate.
	HostingEnvironmentProfile HostingEnvironmentProfileResponse `pulumi:"hostingEnvironmentProfile"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Certificate issue Date.
	IssueDate string `pulumi:"issueDate"`
	// Certificate issuer.
	Issuer string `pulumi:"issuer"`
	// Azure Key Vault Csm resource Id.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// Azure Key Vault secret name.
	KeyVaultSecretName *string `pulumi:"keyVaultSecretName"`
	// Status of the Key Vault secret.
	KeyVaultSecretStatus string `pulumi:"keyVaultSecretStatus"`
	// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
	Kind *string `pulumi:"kind"`
	// Resource Location.
	Location string `pulumi:"location"`
	// Resource Name.
	Name string `pulumi:"name"`
	// Certificate password.
	Password *string `pulumi:"password"`
	// Pfx blob.
	PfxBlob *string `pulumi:"pfxBlob"`
	// Public key hash.
	PublicKeyHash string `pulumi:"publicKeyHash"`
	// Self link.
	SelfLink string `pulumi:"selfLink"`
	// Resource ID of the associated App Service plan.
	ServerFarmId *string `pulumi:"serverFarmId"`
	// App name.
	SiteName string `pulumi:"siteName"`
	// Subject name of the certificate.
	SubjectName string `pulumi:"subjectName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Certificate thumbprint.
	Thumbprint string `pulumi:"thumbprint"`
	// Resource type.
	Type string `pulumi:"type"`
	// Is the certificate valid?.
	Valid bool `pulumi:"valid"`
}

func LookupSiteCertificateOutput(ctx *pulumi.Context, args LookupSiteCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupSiteCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSiteCertificateResultOutput, error) {
			args := v.(LookupSiteCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:web:getSiteCertificate", args, LookupSiteCertificateResultOutput{}, options).(LookupSiteCertificateResultOutput), nil
		}).(LookupSiteCertificateResultOutput)
}

type LookupSiteCertificateOutputArgs struct {
	// Name of the certificate.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// Name of the site.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupSiteCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSiteCertificateArgs)(nil)).Elem()
}

// SSL certificate for an app.
type LookupSiteCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupSiteCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSiteCertificateResult)(nil)).Elem()
}

func (o LookupSiteCertificateResultOutput) ToLookupSiteCertificateResultOutput() LookupSiteCertificateResultOutput {
	return o
}

func (o LookupSiteCertificateResultOutput) ToLookupSiteCertificateResultOutputWithContext(ctx context.Context) LookupSiteCertificateResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupSiteCertificateResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// CNAME of the certificate to be issued via free certificate
func (o LookupSiteCertificateResultOutput) CanonicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.CanonicalName }).(pulumi.StringPtrOutput)
}

// Raw bytes of .cer file
func (o LookupSiteCertificateResultOutput) CerBlob() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.CerBlob }).(pulumi.StringOutput)
}

// Method of domain validation for free cert
func (o LookupSiteCertificateResultOutput) DomainValidationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.DomainValidationMethod }).(pulumi.StringPtrOutput)
}

// Certificate expiration date.
func (o LookupSiteCertificateResultOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// Friendly name of the certificate.
func (o LookupSiteCertificateResultOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.FriendlyName }).(pulumi.StringOutput)
}

// Host names the certificate applies to.
func (o LookupSiteCertificateResultOutput) HostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) []string { return v.HostNames }).(pulumi.StringArrayOutput)
}

// Specification for the App Service Environment to use for the certificate.
func (o LookupSiteCertificateResultOutput) HostingEnvironmentProfile() HostingEnvironmentProfileResponseOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) HostingEnvironmentProfileResponse {
		return v.HostingEnvironmentProfile
	}).(HostingEnvironmentProfileResponseOutput)
}

// Resource Id.
func (o LookupSiteCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate issue Date.
func (o LookupSiteCertificateResultOutput) IssueDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.IssueDate }).(pulumi.StringOutput)
}

// Certificate issuer.
func (o LookupSiteCertificateResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.Issuer }).(pulumi.StringOutput)
}

// Azure Key Vault Csm resource Id.
func (o LookupSiteCertificateResultOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// Azure Key Vault secret name.
func (o LookupSiteCertificateResultOutput) KeyVaultSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.KeyVaultSecretName }).(pulumi.StringPtrOutput)
}

// Status of the Key Vault secret.
func (o LookupSiteCertificateResultOutput) KeyVaultSecretStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.KeyVaultSecretStatus }).(pulumi.StringOutput)
}

// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
func (o LookupSiteCertificateResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Location.
func (o LookupSiteCertificateResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource Name.
func (o LookupSiteCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Certificate password.
func (o LookupSiteCertificateResultOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Pfx blob.
func (o LookupSiteCertificateResultOutput) PfxBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.PfxBlob }).(pulumi.StringPtrOutput)
}

// Public key hash.
func (o LookupSiteCertificateResultOutput) PublicKeyHash() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.PublicKeyHash }).(pulumi.StringOutput)
}

// Self link.
func (o LookupSiteCertificateResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Resource ID of the associated App Service plan.
func (o LookupSiteCertificateResultOutput) ServerFarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) *string { return v.ServerFarmId }).(pulumi.StringPtrOutput)
}

// App name.
func (o LookupSiteCertificateResultOutput) SiteName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.SiteName }).(pulumi.StringOutput)
}

// Subject name of the certificate.
func (o LookupSiteCertificateResultOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.SubjectName }).(pulumi.StringOutput)
}

// Resource tags.
func (o LookupSiteCertificateResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Certificate thumbprint.
func (o LookupSiteCertificateResultOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Resource type.
func (o LookupSiteCertificateResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) string { return v.Type }).(pulumi.StringOutput)
}

// Is the certificate valid?.
func (o LookupSiteCertificateResultOutput) Valid() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSiteCertificateResult) bool { return v.Valid }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSiteCertificateResultOutput{})
}
