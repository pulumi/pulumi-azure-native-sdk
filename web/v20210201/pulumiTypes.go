// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidation struct {
	// The configuration settings of the allowed list of audiences from which to validate the JWT token.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
}

// AllowedAudiencesValidationInput is an input type that accepts AllowedAudiencesValidationArgs and AllowedAudiencesValidationOutput values.
// You can construct a concrete instance of `AllowedAudiencesValidationInput` via:
//
//	AllowedAudiencesValidationArgs{...}
type AllowedAudiencesValidationInput interface {
	pulumi.Input

	ToAllowedAudiencesValidationOutput() AllowedAudiencesValidationOutput
	ToAllowedAudiencesValidationOutputWithContext(context.Context) AllowedAudiencesValidationOutput
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationArgs struct {
	// The configuration settings of the allowed list of audiences from which to validate the JWT token.
	AllowedAudiences pulumi.StringArrayInput `pulumi:"allowedAudiences"`
}

func (AllowedAudiencesValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedAudiencesValidation)(nil)).Elem()
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationOutput() AllowedAudiencesValidationOutput {
	return i.ToAllowedAudiencesValidationOutputWithContext(context.Background())
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationOutputWithContext(ctx context.Context) AllowedAudiencesValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedAudiencesValidationOutput)
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return i.ToAllowedAudiencesValidationPtrOutputWithContext(context.Background())
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedAudiencesValidationOutput).ToAllowedAudiencesValidationPtrOutputWithContext(ctx)
}

// AllowedAudiencesValidationPtrInput is an input type that accepts AllowedAudiencesValidationArgs, AllowedAudiencesValidationPtr and AllowedAudiencesValidationPtrOutput values.
// You can construct a concrete instance of `AllowedAudiencesValidationPtrInput` via:
//
//	        AllowedAudiencesValidationArgs{...}
//
//	or:
//
//	        nil
type AllowedAudiencesValidationPtrInput interface {
	pulumi.Input

	ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput
	ToAllowedAudiencesValidationPtrOutputWithContext(context.Context) AllowedAudiencesValidationPtrOutput
}

type allowedAudiencesValidationPtrType AllowedAudiencesValidationArgs

func AllowedAudiencesValidationPtr(v *AllowedAudiencesValidationArgs) AllowedAudiencesValidationPtrInput {
	return (*allowedAudiencesValidationPtrType)(v)
}

func (*allowedAudiencesValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedAudiencesValidation)(nil)).Elem()
}

func (i *allowedAudiencesValidationPtrType) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return i.ToAllowedAudiencesValidationPtrOutputWithContext(context.Background())
}

func (i *allowedAudiencesValidationPtrType) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedAudiencesValidationPtrOutput)
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedAudiencesValidation)(nil)).Elem()
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationOutput() AllowedAudiencesValidationOutput {
	return o
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationOutputWithContext(ctx context.Context) AllowedAudiencesValidationOutput {
	return o
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return o.ToAllowedAudiencesValidationPtrOutputWithContext(context.Background())
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllowedAudiencesValidation) *AllowedAudiencesValidation {
		return &v
	}).(AllowedAudiencesValidationPtrOutput)
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedAudiencesValidation) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

type AllowedAudiencesValidationPtrOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedAudiencesValidation)(nil)).Elem()
}

func (o AllowedAudiencesValidationPtrOutput) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return o
}

func (o AllowedAudiencesValidationPtrOutput) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return o
}

func (o AllowedAudiencesValidationPtrOutput) Elem() AllowedAudiencesValidationOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidation) AllowedAudiencesValidation {
		if v != nil {
			return *v
		}
		var ret AllowedAudiencesValidation
		return ret
	}).(AllowedAudiencesValidationOutput)
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationPtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidation) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationResponse struct {
	// The configuration settings of the allowed list of audiences from which to validate the JWT token.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationResponseOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedAudiencesValidationResponse)(nil)).Elem()
}

func (o AllowedAudiencesValidationResponseOutput) ToAllowedAudiencesValidationResponseOutput() AllowedAudiencesValidationResponseOutput {
	return o
}

func (o AllowedAudiencesValidationResponseOutput) ToAllowedAudiencesValidationResponseOutputWithContext(ctx context.Context) AllowedAudiencesValidationResponseOutput {
	return o
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationResponseOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedAudiencesValidationResponse) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

type AllowedAudiencesValidationResponsePtrOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedAudiencesValidationResponse)(nil)).Elem()
}

func (o AllowedAudiencesValidationResponsePtrOutput) ToAllowedAudiencesValidationResponsePtrOutput() AllowedAudiencesValidationResponsePtrOutput {
	return o
}

func (o AllowedAudiencesValidationResponsePtrOutput) ToAllowedAudiencesValidationResponsePtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationResponsePtrOutput {
	return o
}

func (o AllowedAudiencesValidationResponsePtrOutput) Elem() AllowedAudiencesValidationResponseOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidationResponse) AllowedAudiencesValidationResponse {
		if v != nil {
			return *v
		}
		var ret AllowedAudiencesValidationResponse
		return ret
	}).(AllowedAudiencesValidationResponseOutput)
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationResponsePtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidationResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipals struct {
	// The list of the allowed groups.
	Groups []string `pulumi:"groups"`
	// The list of the allowed identities.
	Identities []string `pulumi:"identities"`
}

// AllowedPrincipalsInput is an input type that accepts AllowedPrincipalsArgs and AllowedPrincipalsOutput values.
// You can construct a concrete instance of `AllowedPrincipalsInput` via:
//
//	AllowedPrincipalsArgs{...}
type AllowedPrincipalsInput interface {
	pulumi.Input

	ToAllowedPrincipalsOutput() AllowedPrincipalsOutput
	ToAllowedPrincipalsOutputWithContext(context.Context) AllowedPrincipalsOutput
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsArgs struct {
	// The list of the allowed groups.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The list of the allowed identities.
	Identities pulumi.StringArrayInput `pulumi:"identities"`
}

func (AllowedPrincipalsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedPrincipals)(nil)).Elem()
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsOutput() AllowedPrincipalsOutput {
	return i.ToAllowedPrincipalsOutputWithContext(context.Background())
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsOutputWithContext(ctx context.Context) AllowedPrincipalsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedPrincipalsOutput)
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return i.ToAllowedPrincipalsPtrOutputWithContext(context.Background())
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedPrincipalsOutput).ToAllowedPrincipalsPtrOutputWithContext(ctx)
}

// AllowedPrincipalsPtrInput is an input type that accepts AllowedPrincipalsArgs, AllowedPrincipalsPtr and AllowedPrincipalsPtrOutput values.
// You can construct a concrete instance of `AllowedPrincipalsPtrInput` via:
//
//	        AllowedPrincipalsArgs{...}
//
//	or:
//
//	        nil
type AllowedPrincipalsPtrInput interface {
	pulumi.Input

	ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput
	ToAllowedPrincipalsPtrOutputWithContext(context.Context) AllowedPrincipalsPtrOutput
}

type allowedPrincipalsPtrType AllowedPrincipalsArgs

func AllowedPrincipalsPtr(v *AllowedPrincipalsArgs) AllowedPrincipalsPtrInput {
	return (*allowedPrincipalsPtrType)(v)
}

func (*allowedPrincipalsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedPrincipals)(nil)).Elem()
}

func (i *allowedPrincipalsPtrType) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return i.ToAllowedPrincipalsPtrOutputWithContext(context.Background())
}

func (i *allowedPrincipalsPtrType) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedPrincipalsPtrOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedPrincipals)(nil)).Elem()
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsOutput() AllowedPrincipalsOutput {
	return o
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsOutputWithContext(ctx context.Context) AllowedPrincipalsOutput {
	return o
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return o.ToAllowedPrincipalsPtrOutputWithContext(context.Background())
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllowedPrincipals) *AllowedPrincipals {
		return &v
	}).(AllowedPrincipalsPtrOutput)
}

// The list of the allowed groups.
func (o AllowedPrincipalsOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipals) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipals) []string { return v.Identities }).(pulumi.StringArrayOutput)
}

type AllowedPrincipalsPtrOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedPrincipals)(nil)).Elem()
}

func (o AllowedPrincipalsPtrOutput) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return o
}

func (o AllowedPrincipalsPtrOutput) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return o
}

func (o AllowedPrincipalsPtrOutput) Elem() AllowedPrincipalsOutput {
	return o.ApplyT(func(v *AllowedPrincipals) AllowedPrincipals {
		if v != nil {
			return *v
		}
		var ret AllowedPrincipals
		return ret
	}).(AllowedPrincipalsOutput)
}

// The list of the allowed groups.
func (o AllowedPrincipalsPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipals) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsPtrOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipals) []string {
		if v == nil {
			return nil
		}
		return v.Identities
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsResponse struct {
	// The list of the allowed groups.
	Groups []string `pulumi:"groups"`
	// The list of the allowed identities.
	Identities []string `pulumi:"identities"`
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsResponseOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedPrincipalsResponse)(nil)).Elem()
}

func (o AllowedPrincipalsResponseOutput) ToAllowedPrincipalsResponseOutput() AllowedPrincipalsResponseOutput {
	return o
}

func (o AllowedPrincipalsResponseOutput) ToAllowedPrincipalsResponseOutputWithContext(ctx context.Context) AllowedPrincipalsResponseOutput {
	return o
}

// The list of the allowed groups.
func (o AllowedPrincipalsResponseOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipalsResponse) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsResponseOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipalsResponse) []string { return v.Identities }).(pulumi.StringArrayOutput)
}

type AllowedPrincipalsResponsePtrOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedPrincipalsResponse)(nil)).Elem()
}

func (o AllowedPrincipalsResponsePtrOutput) ToAllowedPrincipalsResponsePtrOutput() AllowedPrincipalsResponsePtrOutput {
	return o
}

func (o AllowedPrincipalsResponsePtrOutput) ToAllowedPrincipalsResponsePtrOutputWithContext(ctx context.Context) AllowedPrincipalsResponsePtrOutput {
	return o
}

func (o AllowedPrincipalsResponsePtrOutput) Elem() AllowedPrincipalsResponseOutput {
	return o.ApplyT(func(v *AllowedPrincipalsResponse) AllowedPrincipalsResponse {
		if v != nil {
			return *v
		}
		var ret AllowedPrincipalsResponse
		return ret
	}).(AllowedPrincipalsResponseOutput)
}

// The list of the allowed groups.
func (o AllowedPrincipalsResponsePtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipalsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsResponsePtrOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipalsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Identities
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistration struct {
	// The App ID of the app used for login.
	AppId *string `pulumi:"appId"`
	// The app setting name that contains the app secret.
	AppSecretSettingName *string `pulumi:"appSecretSettingName"`
}

// AppRegistrationInput is an input type that accepts AppRegistrationArgs and AppRegistrationOutput values.
// You can construct a concrete instance of `AppRegistrationInput` via:
//
//	AppRegistrationArgs{...}
type AppRegistrationInput interface {
	pulumi.Input

	ToAppRegistrationOutput() AppRegistrationOutput
	ToAppRegistrationOutputWithContext(context.Context) AppRegistrationOutput
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationArgs struct {
	// The App ID of the app used for login.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// The app setting name that contains the app secret.
	AppSecretSettingName pulumi.StringPtrInput `pulumi:"appSecretSettingName"`
}

func (AppRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRegistration)(nil)).Elem()
}

func (i AppRegistrationArgs) ToAppRegistrationOutput() AppRegistrationOutput {
	return i.ToAppRegistrationOutputWithContext(context.Background())
}

func (i AppRegistrationArgs) ToAppRegistrationOutputWithContext(ctx context.Context) AppRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRegistrationOutput)
}

func (i AppRegistrationArgs) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return i.ToAppRegistrationPtrOutputWithContext(context.Background())
}

func (i AppRegistrationArgs) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRegistrationOutput).ToAppRegistrationPtrOutputWithContext(ctx)
}

// AppRegistrationPtrInput is an input type that accepts AppRegistrationArgs, AppRegistrationPtr and AppRegistrationPtrOutput values.
// You can construct a concrete instance of `AppRegistrationPtrInput` via:
//
//	        AppRegistrationArgs{...}
//
//	or:
//
//	        nil
type AppRegistrationPtrInput interface {
	pulumi.Input

	ToAppRegistrationPtrOutput() AppRegistrationPtrOutput
	ToAppRegistrationPtrOutputWithContext(context.Context) AppRegistrationPtrOutput
}

type appRegistrationPtrType AppRegistrationArgs

func AppRegistrationPtr(v *AppRegistrationArgs) AppRegistrationPtrInput {
	return (*appRegistrationPtrType)(v)
}

func (*appRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRegistration)(nil)).Elem()
}

func (i *appRegistrationPtrType) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return i.ToAppRegistrationPtrOutputWithContext(context.Background())
}

func (i *appRegistrationPtrType) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRegistrationPtrOutput)
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationOutput struct{ *pulumi.OutputState }

func (AppRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRegistration)(nil)).Elem()
}

func (o AppRegistrationOutput) ToAppRegistrationOutput() AppRegistrationOutput {
	return o
}

func (o AppRegistrationOutput) ToAppRegistrationOutputWithContext(ctx context.Context) AppRegistrationOutput {
	return o
}

func (o AppRegistrationOutput) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return o.ToAppRegistrationPtrOutputWithContext(context.Background())
}

func (o AppRegistrationOutput) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppRegistration) *AppRegistration {
		return &v
	}).(AppRegistrationPtrOutput)
}

// The App ID of the app used for login.
func (o AppRegistrationOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistration) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistration) *string { return v.AppSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AppRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRegistration)(nil)).Elem()
}

func (o AppRegistrationPtrOutput) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return o
}

func (o AppRegistrationPtrOutput) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return o
}

func (o AppRegistrationPtrOutput) Elem() AppRegistrationOutput {
	return o.ApplyT(func(v *AppRegistration) AppRegistration {
		if v != nil {
			return *v
		}
		var ret AppRegistration
		return ret
	}).(AppRegistrationOutput)
}

// The App ID of the app used for login.
func (o AppRegistrationPtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistration) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationPtrOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistration) *string {
		if v == nil {
			return nil
		}
		return v.AppSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationResponse struct {
	// The App ID of the app used for login.
	AppId *string `pulumi:"appId"`
	// The app setting name that contains the app secret.
	AppSecretSettingName *string `pulumi:"appSecretSettingName"`
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AppRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRegistrationResponse)(nil)).Elem()
}

func (o AppRegistrationResponseOutput) ToAppRegistrationResponseOutput() AppRegistrationResponseOutput {
	return o
}

func (o AppRegistrationResponseOutput) ToAppRegistrationResponseOutputWithContext(ctx context.Context) AppRegistrationResponseOutput {
	return o
}

// The App ID of the app used for login.
func (o AppRegistrationResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistrationResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationResponseOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistrationResponse) *string { return v.AppSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AppRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRegistrationResponse)(nil)).Elem()
}

func (o AppRegistrationResponsePtrOutput) ToAppRegistrationResponsePtrOutput() AppRegistrationResponsePtrOutput {
	return o
}

func (o AppRegistrationResponsePtrOutput) ToAppRegistrationResponsePtrOutputWithContext(ctx context.Context) AppRegistrationResponsePtrOutput {
	return o
}

func (o AppRegistrationResponsePtrOutput) Elem() AppRegistrationResponseOutput {
	return o.ApplyT(func(v *AppRegistrationResponse) AppRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AppRegistrationResponse
		return ret
	}).(AppRegistrationResponseOutput)
}

// The App ID of the app used for login.
func (o AppRegistrationResponsePtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationResponsePtrOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Apple provider.
type Apple struct {
	// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the Apple registration.
	Registration *AppleRegistration `pulumi:"registration"`
}

// AppleInput is an input type that accepts AppleArgs and AppleOutput values.
// You can construct a concrete instance of `AppleInput` via:
//
//	AppleArgs{...}
type AppleInput interface {
	pulumi.Input

	ToAppleOutput() AppleOutput
	ToAppleOutputWithContext(context.Context) AppleOutput
}

// The configuration settings of the Apple provider.
type AppleArgs struct {
	// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the Apple registration.
	Registration AppleRegistrationPtrInput `pulumi:"registration"`
}

func (AppleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Apple)(nil)).Elem()
}

func (i AppleArgs) ToAppleOutput() AppleOutput {
	return i.ToAppleOutputWithContext(context.Background())
}

func (i AppleArgs) ToAppleOutputWithContext(ctx context.Context) AppleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleOutput)
}

func (i AppleArgs) ToApplePtrOutput() ApplePtrOutput {
	return i.ToApplePtrOutputWithContext(context.Background())
}

func (i AppleArgs) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleOutput).ToApplePtrOutputWithContext(ctx)
}

// ApplePtrInput is an input type that accepts AppleArgs, ApplePtr and ApplePtrOutput values.
// You can construct a concrete instance of `ApplePtrInput` via:
//
//	        AppleArgs{...}
//
//	or:
//
//	        nil
type ApplePtrInput interface {
	pulumi.Input

	ToApplePtrOutput() ApplePtrOutput
	ToApplePtrOutputWithContext(context.Context) ApplePtrOutput
}

type applePtrType AppleArgs

func ApplePtr(v *AppleArgs) ApplePtrInput {
	return (*applePtrType)(v)
}

func (*applePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Apple)(nil)).Elem()
}

func (i *applePtrType) ToApplePtrOutput() ApplePtrOutput {
	return i.ToApplePtrOutputWithContext(context.Background())
}

func (i *applePtrType) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplePtrOutput)
}

// The configuration settings of the Apple provider.
type AppleOutput struct{ *pulumi.OutputState }

func (AppleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Apple)(nil)).Elem()
}

func (o AppleOutput) ToAppleOutput() AppleOutput {
	return o
}

func (o AppleOutput) ToAppleOutputWithContext(ctx context.Context) AppleOutput {
	return o
}

func (o AppleOutput) ToApplePtrOutput() ApplePtrOutput {
	return o.ToApplePtrOutputWithContext(context.Background())
}

func (o AppleOutput) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Apple) *Apple {
		return &v
	}).(ApplePtrOutput)
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AppleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Apple) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o AppleOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v Apple) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the Apple registration.
func (o AppleOutput) Registration() AppleRegistrationPtrOutput {
	return o.ApplyT(func(v Apple) *AppleRegistration { return v.Registration }).(AppleRegistrationPtrOutput)
}

type ApplePtrOutput struct{ *pulumi.OutputState }

func (ApplePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Apple)(nil)).Elem()
}

func (o ApplePtrOutput) ToApplePtrOutput() ApplePtrOutput {
	return o
}

func (o ApplePtrOutput) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return o
}

func (o ApplePtrOutput) Elem() AppleOutput {
	return o.ApplyT(func(v *Apple) Apple {
		if v != nil {
			return *v
		}
		var ret Apple
		return ret
	}).(AppleOutput)
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o ApplePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Apple) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o ApplePtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *Apple) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the Apple registration.
func (o ApplePtrOutput) Registration() AppleRegistrationPtrOutput {
	return o.ApplyT(func(v *Apple) *AppleRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppleRegistrationPtrOutput)
}

// The configuration settings of the registration for the Apple provider
type AppleRegistration struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// AppleRegistrationInput is an input type that accepts AppleRegistrationArgs and AppleRegistrationOutput values.
// You can construct a concrete instance of `AppleRegistrationInput` via:
//
//	AppleRegistrationArgs{...}
type AppleRegistrationInput interface {
	pulumi.Input

	ToAppleRegistrationOutput() AppleRegistrationOutput
	ToAppleRegistrationOutputWithContext(context.Context) AppleRegistrationOutput
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationArgs struct {
	// The Client ID of the app used for login.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
}

func (AppleRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleRegistration)(nil)).Elem()
}

func (i AppleRegistrationArgs) ToAppleRegistrationOutput() AppleRegistrationOutput {
	return i.ToAppleRegistrationOutputWithContext(context.Background())
}

func (i AppleRegistrationArgs) ToAppleRegistrationOutputWithContext(ctx context.Context) AppleRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleRegistrationOutput)
}

func (i AppleRegistrationArgs) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return i.ToAppleRegistrationPtrOutputWithContext(context.Background())
}

func (i AppleRegistrationArgs) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleRegistrationOutput).ToAppleRegistrationPtrOutputWithContext(ctx)
}

// AppleRegistrationPtrInput is an input type that accepts AppleRegistrationArgs, AppleRegistrationPtr and AppleRegistrationPtrOutput values.
// You can construct a concrete instance of `AppleRegistrationPtrInput` via:
//
//	        AppleRegistrationArgs{...}
//
//	or:
//
//	        nil
type AppleRegistrationPtrInput interface {
	pulumi.Input

	ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput
	ToAppleRegistrationPtrOutputWithContext(context.Context) AppleRegistrationPtrOutput
}

type appleRegistrationPtrType AppleRegistrationArgs

func AppleRegistrationPtr(v *AppleRegistrationArgs) AppleRegistrationPtrInput {
	return (*appleRegistrationPtrType)(v)
}

func (*appleRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleRegistration)(nil)).Elem()
}

func (i *appleRegistrationPtrType) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return i.ToAppleRegistrationPtrOutputWithContext(context.Background())
}

func (i *appleRegistrationPtrType) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleRegistrationPtrOutput)
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationOutput struct{ *pulumi.OutputState }

func (AppleRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleRegistration)(nil)).Elem()
}

func (o AppleRegistrationOutput) ToAppleRegistrationOutput() AppleRegistrationOutput {
	return o
}

func (o AppleRegistrationOutput) ToAppleRegistrationOutputWithContext(ctx context.Context) AppleRegistrationOutput {
	return o
}

func (o AppleRegistrationOutput) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return o.ToAppleRegistrationPtrOutputWithContext(context.Background())
}

func (o AppleRegistrationOutput) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppleRegistration) *AppleRegistration {
		return &v
	}).(AppleRegistrationPtrOutput)
}

// The Client ID of the app used for login.
func (o AppleRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistration) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppleRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AppleRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleRegistration)(nil)).Elem()
}

func (o AppleRegistrationPtrOutput) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return o
}

func (o AppleRegistrationPtrOutput) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return o
}

func (o AppleRegistrationPtrOutput) Elem() AppleRegistrationOutput {
	return o.ApplyT(func(v *AppleRegistration) AppleRegistration {
		if v != nil {
			return *v
		}
		var ret AppleRegistration
		return ret
	}).(AppleRegistrationOutput)
}

// The Client ID of the app used for login.
func (o AppleRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationResponse struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AppleRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleRegistrationResponse)(nil)).Elem()
}

func (o AppleRegistrationResponseOutput) ToAppleRegistrationResponseOutput() AppleRegistrationResponseOutput {
	return o
}

func (o AppleRegistrationResponseOutput) ToAppleRegistrationResponseOutputWithContext(ctx context.Context) AppleRegistrationResponseOutput {
	return o
}

// The Client ID of the app used for login.
func (o AppleRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistrationResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppleRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AppleRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleRegistrationResponse)(nil)).Elem()
}

func (o AppleRegistrationResponsePtrOutput) ToAppleRegistrationResponsePtrOutput() AppleRegistrationResponsePtrOutput {
	return o
}

func (o AppleRegistrationResponsePtrOutput) ToAppleRegistrationResponsePtrOutputWithContext(ctx context.Context) AppleRegistrationResponsePtrOutput {
	return o
}

func (o AppleRegistrationResponsePtrOutput) Elem() AppleRegistrationResponseOutput {
	return o.ApplyT(func(v *AppleRegistrationResponse) AppleRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AppleRegistrationResponse
		return ret
	}).(AppleRegistrationResponseOutput)
}

// The Client ID of the app used for login.
func (o AppleRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Apple provider.
type AppleResponse struct {
	// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the Apple registration.
	Registration *AppleRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Apple provider.
type AppleResponseOutput struct{ *pulumi.OutputState }

func (AppleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleResponse)(nil)).Elem()
}

func (o AppleResponseOutput) ToAppleResponseOutput() AppleResponseOutput {
	return o
}

func (o AppleResponseOutput) ToAppleResponseOutputWithContext(ctx context.Context) AppleResponseOutput {
	return o
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AppleResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppleResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o AppleResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v AppleResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the Apple registration.
func (o AppleResponseOutput) Registration() AppleRegistrationResponsePtrOutput {
	return o.ApplyT(func(v AppleResponse) *AppleRegistrationResponse { return v.Registration }).(AppleRegistrationResponsePtrOutput)
}

type AppleResponsePtrOutput struct{ *pulumi.OutputState }

func (AppleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleResponse)(nil)).Elem()
}

func (o AppleResponsePtrOutput) ToAppleResponsePtrOutput() AppleResponsePtrOutput {
	return o
}

func (o AppleResponsePtrOutput) ToAppleResponsePtrOutputWithContext(ctx context.Context) AppleResponsePtrOutput {
	return o
}

func (o AppleResponsePtrOutput) Elem() AppleResponseOutput {
	return o.ApplyT(func(v *AppleResponse) AppleResponse {
		if v != nil {
			return *v
		}
		var ret AppleResponse
		return ret
	}).(AppleResponseOutput)
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AppleResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppleResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o AppleResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *AppleResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the Apple registration.
func (o AppleResponsePtrOutput) Registration() AppleRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *AppleResponse) *AppleRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppleRegistrationResponsePtrOutput)
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponse struct {
	Id string `pulumi:"id"`
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponseOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutput() ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutputWithContext(ctx context.Context) ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ArmIdWrapperResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ArmIdWrapperResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutput() ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutputWithContext(ctx context.Context) ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) Elem() ArmIdWrapperResponseOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) ArmIdWrapperResponse {
		if v != nil {
			return *v
		}
		var ret ArmIdWrapperResponse
		return ret
	}).(ArmIdWrapperResponseOutput)
}

func (o ArmIdWrapperResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The plan object in Azure Resource Manager, represents a marketplace plan.
type ArmPlanResponse struct {
	// The name.
	Name *string `pulumi:"name"`
	// The product.
	Product *string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher.
	Publisher *string `pulumi:"publisher"`
	// Version of product.
	Version *string `pulumi:"version"`
}

// The plan object in Azure Resource Manager, represents a marketplace plan.
type ArmPlanResponseOutput struct{ *pulumi.OutputState }

func (ArmPlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmPlanResponse)(nil)).Elem()
}

func (o ArmPlanResponseOutput) ToArmPlanResponseOutput() ArmPlanResponseOutput {
	return o
}

func (o ArmPlanResponseOutput) ToArmPlanResponseOutputWithContext(ctx context.Context) ArmPlanResponseOutput {
	return o
}

// The name.
func (o ArmPlanResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmPlanResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The product.
func (o ArmPlanResponseOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmPlanResponse) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o ArmPlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmPlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher.
func (o ArmPlanResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmPlanResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Version of product.
func (o ArmPlanResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmPlanResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ArmPlanResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmPlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmPlanResponse)(nil)).Elem()
}

func (o ArmPlanResponsePtrOutput) ToArmPlanResponsePtrOutput() ArmPlanResponsePtrOutput {
	return o
}

func (o ArmPlanResponsePtrOutput) ToArmPlanResponsePtrOutputWithContext(ctx context.Context) ArmPlanResponsePtrOutput {
	return o
}

func (o ArmPlanResponsePtrOutput) Elem() ArmPlanResponseOutput {
	return o.ApplyT(func(v *ArmPlanResponse) ArmPlanResponse {
		if v != nil {
			return *v
		}
		var ret ArmPlanResponse
		return ret
	}).(ArmPlanResponseOutput)
}

// The name.
func (o ArmPlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The product.
func (o ArmPlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o ArmPlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher.
func (o ArmPlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Version of product.
func (o ArmPlanResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the platform of App Service Authentication/Authorization.
type AuthPlatform struct {
	// The path of the config file containing auth settings if they come from a file.
	// If the path is relative, base will the site's root directory.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
	// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// AuthPlatformInput is an input type that accepts AuthPlatformArgs and AuthPlatformOutput values.
// You can construct a concrete instance of `AuthPlatformInput` via:
//
//	AuthPlatformArgs{...}
type AuthPlatformInput interface {
	pulumi.Input

	ToAuthPlatformOutput() AuthPlatformOutput
	ToAuthPlatformOutputWithContext(context.Context) AuthPlatformOutput
}

// The configuration settings of the platform of App Service Authentication/Authorization.
type AuthPlatformArgs struct {
	// The path of the config file containing auth settings if they come from a file.
	// If the path is relative, base will the site's root directory.
	ConfigFilePath pulumi.StringPtrInput `pulumi:"configFilePath"`
	// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
	// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
	RuntimeVersion pulumi.StringPtrInput `pulumi:"runtimeVersion"`
}

func (AuthPlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthPlatform)(nil)).Elem()
}

func (i AuthPlatformArgs) ToAuthPlatformOutput() AuthPlatformOutput {
	return i.ToAuthPlatformOutputWithContext(context.Background())
}

func (i AuthPlatformArgs) ToAuthPlatformOutputWithContext(ctx context.Context) AuthPlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthPlatformOutput)
}

func (i AuthPlatformArgs) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return i.ToAuthPlatformPtrOutputWithContext(context.Background())
}

func (i AuthPlatformArgs) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthPlatformOutput).ToAuthPlatformPtrOutputWithContext(ctx)
}

// AuthPlatformPtrInput is an input type that accepts AuthPlatformArgs, AuthPlatformPtr and AuthPlatformPtrOutput values.
// You can construct a concrete instance of `AuthPlatformPtrInput` via:
//
//	        AuthPlatformArgs{...}
//
//	or:
//
//	        nil
type AuthPlatformPtrInput interface {
	pulumi.Input

	ToAuthPlatformPtrOutput() AuthPlatformPtrOutput
	ToAuthPlatformPtrOutputWithContext(context.Context) AuthPlatformPtrOutput
}

type authPlatformPtrType AuthPlatformArgs

func AuthPlatformPtr(v *AuthPlatformArgs) AuthPlatformPtrInput {
	return (*authPlatformPtrType)(v)
}

func (*authPlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthPlatform)(nil)).Elem()
}

func (i *authPlatformPtrType) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return i.ToAuthPlatformPtrOutputWithContext(context.Background())
}

func (i *authPlatformPtrType) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthPlatformPtrOutput)
}

// The configuration settings of the platform of App Service Authentication/Authorization.
type AuthPlatformOutput struct{ *pulumi.OutputState }

func (AuthPlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthPlatform)(nil)).Elem()
}

func (o AuthPlatformOutput) ToAuthPlatformOutput() AuthPlatformOutput {
	return o
}

func (o AuthPlatformOutput) ToAuthPlatformOutputWithContext(ctx context.Context) AuthPlatformOutput {
	return o
}

func (o AuthPlatformOutput) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return o.ToAuthPlatformPtrOutputWithContext(context.Background())
}

func (o AuthPlatformOutput) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthPlatform) *AuthPlatform {
		return &v
	}).(AuthPlatformPtrOutput)
}

// The path of the config file containing auth settings if they come from a file.
// If the path is relative, base will the site's root directory.
func (o AuthPlatformOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthPlatform) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthPlatform) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthPlatform) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type AuthPlatformPtrOutput struct{ *pulumi.OutputState }

func (AuthPlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthPlatform)(nil)).Elem()
}

func (o AuthPlatformPtrOutput) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return o
}

func (o AuthPlatformPtrOutput) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return o
}

func (o AuthPlatformPtrOutput) Elem() AuthPlatformOutput {
	return o.ApplyT(func(v *AuthPlatform) AuthPlatform {
		if v != nil {
			return *v
		}
		var ret AuthPlatform
		return ret
	}).(AuthPlatformOutput)
}

// The path of the config file containing auth settings if they come from a file.
// If the path is relative, base will the site's root directory.
func (o AuthPlatformPtrOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthPlatform) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFilePath
	}).(pulumi.StringPtrOutput)
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthPlatform) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformPtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthPlatform) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the platform of App Service Authentication/Authorization.
type AuthPlatformResponse struct {
	// The path of the config file containing auth settings if they come from a file.
	// If the path is relative, base will the site's root directory.
	ConfigFilePath *string `pulumi:"configFilePath"`
	// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
	// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// The configuration settings of the platform of App Service Authentication/Authorization.
type AuthPlatformResponseOutput struct{ *pulumi.OutputState }

func (AuthPlatformResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthPlatformResponse)(nil)).Elem()
}

func (o AuthPlatformResponseOutput) ToAuthPlatformResponseOutput() AuthPlatformResponseOutput {
	return o
}

func (o AuthPlatformResponseOutput) ToAuthPlatformResponseOutputWithContext(ctx context.Context) AuthPlatformResponseOutput {
	return o
}

// The path of the config file containing auth settings if they come from a file.
// If the path is relative, base will the site's root directory.
func (o AuthPlatformResponseOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthPlatformResponse) *string { return v.ConfigFilePath }).(pulumi.StringPtrOutput)
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthPlatformResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformResponseOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthPlatformResponse) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type AuthPlatformResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthPlatformResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthPlatformResponse)(nil)).Elem()
}

func (o AuthPlatformResponsePtrOutput) ToAuthPlatformResponsePtrOutput() AuthPlatformResponsePtrOutput {
	return o
}

func (o AuthPlatformResponsePtrOutput) ToAuthPlatformResponsePtrOutputWithContext(ctx context.Context) AuthPlatformResponsePtrOutput {
	return o
}

func (o AuthPlatformResponsePtrOutput) Elem() AuthPlatformResponseOutput {
	return o.ApplyT(func(v *AuthPlatformResponse) AuthPlatformResponse {
		if v != nil {
			return *v
		}
		var ret AuthPlatformResponse
		return ret
	}).(AuthPlatformResponseOutput)
}

// The path of the config file containing auth settings if they come from a file.
// If the path is relative, base will the site's root directory.
func (o AuthPlatformResponsePtrOutput) ConfigFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthPlatformResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFilePath
	}).(pulumi.StringPtrOutput)
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthPlatformResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformResponsePtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthPlatformResponse) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectory struct {
	// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
	// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
	// read or write to this property.
	IsAutoProvisioned *bool `pulumi:"isAutoProvisioned"`
	// The configuration settings of the Azure Active Directory login flow.
	Login *AzureActiveDirectoryLogin `pulumi:"login"`
	// The configuration settings of the Azure Active Directory app registration.
	Registration *AzureActiveDirectoryRegistration `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AzureActiveDirectoryValidation `pulumi:"validation"`
}

// AzureActiveDirectoryInput is an input type that accepts AzureActiveDirectoryArgs and AzureActiveDirectoryOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryInput` via:
//
//	AzureActiveDirectoryArgs{...}
type AzureActiveDirectoryInput interface {
	pulumi.Input

	ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput
	ToAzureActiveDirectoryOutputWithContext(context.Context) AzureActiveDirectoryOutput
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryArgs struct {
	// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
	// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
	// read or write to this property.
	IsAutoProvisioned pulumi.BoolPtrInput `pulumi:"isAutoProvisioned"`
	// The configuration settings of the Azure Active Directory login flow.
	Login AzureActiveDirectoryLoginPtrInput `pulumi:"login"`
	// The configuration settings of the Azure Active Directory app registration.
	Registration AzureActiveDirectoryRegistrationPtrInput `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation AzureActiveDirectoryValidationPtrInput `pulumi:"validation"`
}

func (AzureActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return i.ToAzureActiveDirectoryOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput)
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput).ToAzureActiveDirectoryPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryPtrInput is an input type that accepts AzureActiveDirectoryArgs, AzureActiveDirectoryPtr and AzureActiveDirectoryPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryPtrInput` via:
//
//	        AzureActiveDirectoryArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput
	ToAzureActiveDirectoryPtrOutputWithContext(context.Context) AzureActiveDirectoryPtrOutput
}

type azureActiveDirectoryPtrType AzureActiveDirectoryArgs

func AzureActiveDirectoryPtr(v *AzureActiveDirectoryArgs) AzureActiveDirectoryPtrInput {
	return (*azureActiveDirectoryPtrType)(v)
}

func (*azureActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryPtrOutput)
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectory) *AzureActiveDirectory {
		return &v
	}).(AzureActiveDirectoryPtrOutput)
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *bool { return v.IsAutoProvisioned }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryOutput) Login() AzureActiveDirectoryLoginPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *AzureActiveDirectoryLogin { return v.Login }).(AzureActiveDirectoryLoginPtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryOutput) Registration() AzureActiveDirectoryRegistrationPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *AzureActiveDirectoryRegistration { return v.Registration }).(AzureActiveDirectoryRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryOutput) Validation() AzureActiveDirectoryValidationPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *AzureActiveDirectoryValidation { return v.Validation }).(AzureActiveDirectoryValidationPtrOutput)
}

type AzureActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) Elem() AzureActiveDirectoryOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) AzureActiveDirectory {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectory
		return ret
	}).(AzureActiveDirectoryOutput)
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryPtrOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.IsAutoProvisioned
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryPtrOutput) Login() AzureActiveDirectoryLoginPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *AzureActiveDirectoryLogin {
		if v == nil {
			return nil
		}
		return v.Login
	}).(AzureActiveDirectoryLoginPtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryPtrOutput) Registration() AzureActiveDirectoryRegistrationPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *AzureActiveDirectoryRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureActiveDirectoryRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryPtrOutput) Validation() AzureActiveDirectoryValidationPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *AzureActiveDirectoryValidation {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AzureActiveDirectoryValidationPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLogin struct {
	// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
	DisableWWWAuthenticate *bool `pulumi:"disableWWWAuthenticate"`
	// Login parameters to send to the OpenID Connect authorization endpoint when
	// a user logs in. Each parameter must be in the form "key=value".
	LoginParameters []string `pulumi:"loginParameters"`
}

// AzureActiveDirectoryLoginInput is an input type that accepts AzureActiveDirectoryLoginArgs and AzureActiveDirectoryLoginOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryLoginInput` via:
//
//	AzureActiveDirectoryLoginArgs{...}
type AzureActiveDirectoryLoginInput interface {
	pulumi.Input

	ToAzureActiveDirectoryLoginOutput() AzureActiveDirectoryLoginOutput
	ToAzureActiveDirectoryLoginOutputWithContext(context.Context) AzureActiveDirectoryLoginOutput
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginArgs struct {
	// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
	DisableWWWAuthenticate pulumi.BoolPtrInput `pulumi:"disableWWWAuthenticate"`
	// Login parameters to send to the OpenID Connect authorization endpoint when
	// a user logs in. Each parameter must be in the form "key=value".
	LoginParameters pulumi.StringArrayInput `pulumi:"loginParameters"`
}

func (AzureActiveDirectoryLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryLogin)(nil)).Elem()
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginOutput() AzureActiveDirectoryLoginOutput {
	return i.ToAzureActiveDirectoryLoginOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryLoginOutput)
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return i.ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryLoginOutput).ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryLoginPtrInput is an input type that accepts AzureActiveDirectoryLoginArgs, AzureActiveDirectoryLoginPtr and AzureActiveDirectoryLoginPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryLoginPtrInput` via:
//
//	        AzureActiveDirectoryLoginArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryLoginPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput
	ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Context) AzureActiveDirectoryLoginPtrOutput
}

type azureActiveDirectoryLoginPtrType AzureActiveDirectoryLoginArgs

func AzureActiveDirectoryLoginPtr(v *AzureActiveDirectoryLoginArgs) AzureActiveDirectoryLoginPtrInput {
	return (*azureActiveDirectoryLoginPtrType)(v)
}

func (*azureActiveDirectoryLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryLogin)(nil)).Elem()
}

func (i *azureActiveDirectoryLoginPtrType) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return i.ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryLoginPtrType) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryLoginPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryLogin)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginOutput() AzureActiveDirectoryLoginOutput {
	return o
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginOutput {
	return o
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return o.ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectoryLogin) *AzureActiveDirectoryLogin {
		return &v
	}).(AzureActiveDirectoryLoginPtrOutput)
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLogin) *bool { return v.DisableWWWAuthenticate }).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLogin) []string { return v.LoginParameters }).(pulumi.StringArrayOutput)
}

type AzureActiveDirectoryLoginPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryLogin)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginPtrOutput) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginPtrOutput) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginPtrOutput) Elem() AzureActiveDirectoryLoginOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLogin) AzureActiveDirectoryLogin {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryLogin
		return ret
	}).(AzureActiveDirectoryLoginOutput)
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginPtrOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLogin) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWWWAuthenticate
	}).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginPtrOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLogin) []string {
		if v == nil {
			return nil
		}
		return v.LoginParameters
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginResponse struct {
	// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
	DisableWWWAuthenticate *bool `pulumi:"disableWWWAuthenticate"`
	// Login parameters to send to the OpenID Connect authorization endpoint when
	// a user logs in. Each parameter must be in the form "key=value".
	LoginParameters []string `pulumi:"loginParameters"`
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryLoginResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginResponseOutput) ToAzureActiveDirectoryLoginResponseOutput() AzureActiveDirectoryLoginResponseOutput {
	return o
}

func (o AzureActiveDirectoryLoginResponseOutput) ToAzureActiveDirectoryLoginResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginResponseOutput {
	return o
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginResponseOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLoginResponse) *bool { return v.DisableWWWAuthenticate }).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginResponseOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLoginResponse) []string { return v.LoginParameters }).(pulumi.StringArrayOutput)
}

type AzureActiveDirectoryLoginResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryLoginResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginResponsePtrOutput) ToAzureActiveDirectoryLoginResponsePtrOutput() AzureActiveDirectoryLoginResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginResponsePtrOutput) ToAzureActiveDirectoryLoginResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginResponsePtrOutput) Elem() AzureActiveDirectoryLoginResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLoginResponse) AzureActiveDirectoryLoginResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryLoginResponse
		return ret
	}).(AzureActiveDirectoryLoginResponseOutput)
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginResponsePtrOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLoginResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWWWAuthenticate
	}).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginResponsePtrOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLoginResponse) []string {
		if v == nil {
			return nil
		}
		return v.LoginParameters
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistration struct {
	// The Client ID of this relying party application, known as the client_id.
	// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
	// other 3rd party OpenID Connect providers.
	// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
	ClientId *string `pulumi:"clientId"`
	// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateIssuer *string `pulumi:"clientSecretCertificateIssuer"`
	// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateSubjectAlternativeName *string `pulumi:"clientSecretCertificateSubjectAlternativeName"`
	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret. It is also optional.
	ClientSecretCertificateThumbprint *string `pulumi:"clientSecretCertificateThumbprint"`
	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
	// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
	// This URI is a case-sensitive identifier for the token issuer.
	// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
	OpenIdIssuer *string `pulumi:"openIdIssuer"`
}

// AzureActiveDirectoryRegistrationInput is an input type that accepts AzureActiveDirectoryRegistrationArgs and AzureActiveDirectoryRegistrationOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryRegistrationInput` via:
//
//	AzureActiveDirectoryRegistrationArgs{...}
type AzureActiveDirectoryRegistrationInput interface {
	pulumi.Input

	ToAzureActiveDirectoryRegistrationOutput() AzureActiveDirectoryRegistrationOutput
	ToAzureActiveDirectoryRegistrationOutputWithContext(context.Context) AzureActiveDirectoryRegistrationOutput
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationArgs struct {
	// The Client ID of this relying party application, known as the client_id.
	// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
	// other 3rd party OpenID Connect providers.
	// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateIssuer pulumi.StringPtrInput `pulumi:"clientSecretCertificateIssuer"`
	// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateSubjectAlternativeName pulumi.StringPtrInput `pulumi:"clientSecretCertificateSubjectAlternativeName"`
	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret. It is also optional.
	ClientSecretCertificateThumbprint pulumi.StringPtrInput `pulumi:"clientSecretCertificateThumbprint"`
	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
	// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
	// This URI is a case-sensitive identifier for the token issuer.
	// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
	OpenIdIssuer pulumi.StringPtrInput `pulumi:"openIdIssuer"`
}

func (AzureActiveDirectoryRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationOutput() AzureActiveDirectoryRegistrationOutput {
	return i.ToAzureActiveDirectoryRegistrationOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryRegistrationOutput)
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return i.ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryRegistrationOutput).ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryRegistrationPtrInput is an input type that accepts AzureActiveDirectoryRegistrationArgs, AzureActiveDirectoryRegistrationPtr and AzureActiveDirectoryRegistrationPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryRegistrationPtrInput` via:
//
//	        AzureActiveDirectoryRegistrationArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryRegistrationPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput
	ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Context) AzureActiveDirectoryRegistrationPtrOutput
}

type azureActiveDirectoryRegistrationPtrType AzureActiveDirectoryRegistrationArgs

func AzureActiveDirectoryRegistrationPtr(v *AzureActiveDirectoryRegistrationArgs) AzureActiveDirectoryRegistrationPtrInput {
	return (*azureActiveDirectoryRegistrationPtrType)(v)
}

func (*azureActiveDirectoryRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (i *azureActiveDirectoryRegistrationPtrType) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return i.ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryRegistrationPtrType) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationOutput() AzureActiveDirectoryRegistrationOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return o.ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectoryRegistration) *AzureActiveDirectoryRegistration {
		return &v
	}).(AzureActiveDirectoryRegistrationPtrOutput)
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientSecretCertificateIssuer }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string {
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientSecretCertificateThumbprint }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.OpenIdIssuer }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationPtrOutput) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationPtrOutput) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationPtrOutput) Elem() AzureActiveDirectoryRegistrationOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) AzureActiveDirectoryRegistration {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryRegistration
		return ret
	}).(AzureActiveDirectoryRegistrationOutput)
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateIssuer
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationPtrOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.OpenIdIssuer
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationResponse struct {
	// The Client ID of this relying party application, known as the client_id.
	// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
	// other 3rd party OpenID Connect providers.
	// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
	ClientId *string `pulumi:"clientId"`
	// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateIssuer *string `pulumi:"clientSecretCertificateIssuer"`
	// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateSubjectAlternativeName *string `pulumi:"clientSecretCertificateSubjectAlternativeName"`
	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret. It is also optional.
	ClientSecretCertificateThumbprint *string `pulumi:"clientSecretCertificateThumbprint"`
	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
	// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
	// This URI is a case-sensitive identifier for the token issuer.
	// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
	OpenIdIssuer *string `pulumi:"openIdIssuer"`
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryRegistrationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationResponseOutput) ToAzureActiveDirectoryRegistrationResponseOutput() AzureActiveDirectoryRegistrationResponseOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationResponseOutput) ToAzureActiveDirectoryRegistrationResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationResponseOutput {
	return o
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientSecretCertificateIssuer }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string {
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientSecretCertificateThumbprint }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationResponseOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.OpenIdIssuer }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryRegistrationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ToAzureActiveDirectoryRegistrationResponsePtrOutput() AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ToAzureActiveDirectoryRegistrationResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationResponsePtrOutput) Elem() AzureActiveDirectoryRegistrationResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) AzureActiveDirectoryRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryRegistrationResponse
		return ret
	}).(AzureActiveDirectoryRegistrationResponseOutput)
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateIssuer
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OpenIdIssuer
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryResponse struct {
	// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
	// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
	// read or write to this property.
	IsAutoProvisioned *bool `pulumi:"isAutoProvisioned"`
	// The configuration settings of the Azure Active Directory login flow.
	Login *AzureActiveDirectoryLoginResponse `pulumi:"login"`
	// The configuration settings of the Azure Active Directory app registration.
	Registration *AzureActiveDirectoryRegistrationResponse `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AzureActiveDirectoryValidationResponse `pulumi:"validation"`
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutput() AzureActiveDirectoryResponseOutput {
	return o
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryResponseOutput {
	return o
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryResponseOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *bool { return v.IsAutoProvisioned }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryResponseOutput) Login() AzureActiveDirectoryLoginResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *AzureActiveDirectoryLoginResponse { return v.Login }).(AzureActiveDirectoryLoginResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryResponseOutput) Registration() AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *AzureActiveDirectoryRegistrationResponse { return v.Registration }).(AzureActiveDirectoryRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryResponseOutput) Validation() AzureActiveDirectoryValidationResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *AzureActiveDirectoryValidationResponse { return v.Validation }).(AzureActiveDirectoryValidationResponsePtrOutput)
}

type AzureActiveDirectoryResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) Elem() AzureActiveDirectoryResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) AzureActiveDirectoryResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryResponse
		return ret
	}).(AzureActiveDirectoryResponseOutput)
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryResponsePtrOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsAutoProvisioned
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryResponsePtrOutput) Login() AzureActiveDirectoryLoginResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *AzureActiveDirectoryLoginResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(AzureActiveDirectoryLoginResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryResponsePtrOutput) Registration() AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *AzureActiveDirectoryRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureActiveDirectoryRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryResponsePtrOutput) Validation() AzureActiveDirectoryValidationResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *AzureActiveDirectoryValidationResponse {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AzureActiveDirectoryValidationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidation struct {
	// The list of audiences that can make successful authentication/authorization requests.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The configuration settings of the default authorization policy.
	DefaultAuthorizationPolicy *DefaultAuthorizationPolicy `pulumi:"defaultAuthorizationPolicy"`
	// The configuration settings of the checks that should be made while validating the JWT Claims.
	JwtClaimChecks *JwtClaimChecks `pulumi:"jwtClaimChecks"`
}

// AzureActiveDirectoryValidationInput is an input type that accepts AzureActiveDirectoryValidationArgs and AzureActiveDirectoryValidationOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryValidationInput` via:
//
//	AzureActiveDirectoryValidationArgs{...}
type AzureActiveDirectoryValidationInput interface {
	pulumi.Input

	ToAzureActiveDirectoryValidationOutput() AzureActiveDirectoryValidationOutput
	ToAzureActiveDirectoryValidationOutputWithContext(context.Context) AzureActiveDirectoryValidationOutput
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationArgs struct {
	// The list of audiences that can make successful authentication/authorization requests.
	AllowedAudiences pulumi.StringArrayInput `pulumi:"allowedAudiences"`
	// The configuration settings of the default authorization policy.
	DefaultAuthorizationPolicy DefaultAuthorizationPolicyPtrInput `pulumi:"defaultAuthorizationPolicy"`
	// The configuration settings of the checks that should be made while validating the JWT Claims.
	JwtClaimChecks JwtClaimChecksPtrInput `pulumi:"jwtClaimChecks"`
}

func (AzureActiveDirectoryValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryValidation)(nil)).Elem()
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationOutput() AzureActiveDirectoryValidationOutput {
	return i.ToAzureActiveDirectoryValidationOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryValidationOutput)
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return i.ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryValidationOutput).ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryValidationPtrInput is an input type that accepts AzureActiveDirectoryValidationArgs, AzureActiveDirectoryValidationPtr and AzureActiveDirectoryValidationPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryValidationPtrInput` via:
//
//	        AzureActiveDirectoryValidationArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryValidationPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput
	ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Context) AzureActiveDirectoryValidationPtrOutput
}

type azureActiveDirectoryValidationPtrType AzureActiveDirectoryValidationArgs

func AzureActiveDirectoryValidationPtr(v *AzureActiveDirectoryValidationArgs) AzureActiveDirectoryValidationPtrInput {
	return (*azureActiveDirectoryValidationPtrType)(v)
}

func (*azureActiveDirectoryValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryValidation)(nil)).Elem()
}

func (i *azureActiveDirectoryValidationPtrType) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return i.ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryValidationPtrType) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryValidationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryValidation)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationOutput() AzureActiveDirectoryValidationOutput {
	return o
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationOutput {
	return o
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return o.ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectoryValidation) *AzureActiveDirectoryValidation {
		return &v
	}).(AzureActiveDirectoryValidationPtrOutput)
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidation) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidation) *DefaultAuthorizationPolicy {
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyPtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationOutput) JwtClaimChecks() JwtClaimChecksPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidation) *JwtClaimChecks { return v.JwtClaimChecks }).(JwtClaimChecksPtrOutput)
}

type AzureActiveDirectoryValidationPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryValidation)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationPtrOutput) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationPtrOutput) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationPtrOutput) Elem() AzureActiveDirectoryValidationOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) AzureActiveDirectoryValidation {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryValidation
		return ret
	}).(AzureActiveDirectoryValidationOutput)
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationPtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationPtrOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) *DefaultAuthorizationPolicy {
		if v == nil {
			return nil
		}
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyPtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationPtrOutput) JwtClaimChecks() JwtClaimChecksPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) *JwtClaimChecks {
		if v == nil {
			return nil
		}
		return v.JwtClaimChecks
	}).(JwtClaimChecksPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationResponse struct {
	// The list of audiences that can make successful authentication/authorization requests.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The configuration settings of the default authorization policy.
	DefaultAuthorizationPolicy *DefaultAuthorizationPolicyResponse `pulumi:"defaultAuthorizationPolicy"`
	// The configuration settings of the checks that should be made while validating the JWT Claims.
	JwtClaimChecks *JwtClaimChecksResponse `pulumi:"jwtClaimChecks"`
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryValidationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationResponseOutput) ToAzureActiveDirectoryValidationResponseOutput() AzureActiveDirectoryValidationResponseOutput {
	return o
}

func (o AzureActiveDirectoryValidationResponseOutput) ToAzureActiveDirectoryValidationResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationResponseOutput {
	return o
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationResponseOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidationResponse) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationResponseOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidationResponse) *DefaultAuthorizationPolicyResponse {
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyResponsePtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationResponseOutput) JwtClaimChecks() JwtClaimChecksResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidationResponse) *JwtClaimChecksResponse { return v.JwtClaimChecks }).(JwtClaimChecksResponsePtrOutput)
}

type AzureActiveDirectoryValidationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryValidationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationResponsePtrOutput) ToAzureActiveDirectoryValidationResponsePtrOutput() AzureActiveDirectoryValidationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationResponsePtrOutput) ToAzureActiveDirectoryValidationResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationResponsePtrOutput) Elem() AzureActiveDirectoryValidationResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) AzureActiveDirectoryValidationResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryValidationResponse
		return ret
	}).(AzureActiveDirectoryValidationResponseOutput)
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationResponsePtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationResponsePtrOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) *DefaultAuthorizationPolicyResponse {
		if v == nil {
			return nil
		}
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyResponsePtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationResponsePtrOutput) JwtClaimChecks() JwtClaimChecksResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) *JwtClaimChecksResponse {
		if v == nil {
			return nil
		}
		return v.JwtClaimChecks
	}).(JwtClaimChecksResponsePtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebApps struct {
	// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the Azure Static Web Apps registration.
	Registration *AzureStaticWebAppsRegistration `pulumi:"registration"`
}

// AzureStaticWebAppsInput is an input type that accepts AzureStaticWebAppsArgs and AzureStaticWebAppsOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsInput` via:
//
//	AzureStaticWebAppsArgs{...}
type AzureStaticWebAppsInput interface {
	pulumi.Input

	ToAzureStaticWebAppsOutput() AzureStaticWebAppsOutput
	ToAzureStaticWebAppsOutputWithContext(context.Context) AzureStaticWebAppsOutput
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsArgs struct {
	// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the Azure Static Web Apps registration.
	Registration AzureStaticWebAppsRegistrationPtrInput `pulumi:"registration"`
}

func (AzureStaticWebAppsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebApps)(nil)).Elem()
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsOutput() AzureStaticWebAppsOutput {
	return i.ToAzureStaticWebAppsOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsOutputWithContext(ctx context.Context) AzureStaticWebAppsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsOutput)
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return i.ToAzureStaticWebAppsPtrOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsOutput).ToAzureStaticWebAppsPtrOutputWithContext(ctx)
}

// AzureStaticWebAppsPtrInput is an input type that accepts AzureStaticWebAppsArgs, AzureStaticWebAppsPtr and AzureStaticWebAppsPtrOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsPtrInput` via:
//
//	        AzureStaticWebAppsArgs{...}
//
//	or:
//
//	        nil
type AzureStaticWebAppsPtrInput interface {
	pulumi.Input

	ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput
	ToAzureStaticWebAppsPtrOutputWithContext(context.Context) AzureStaticWebAppsPtrOutput
}

type azureStaticWebAppsPtrType AzureStaticWebAppsArgs

func AzureStaticWebAppsPtr(v *AzureStaticWebAppsArgs) AzureStaticWebAppsPtrInput {
	return (*azureStaticWebAppsPtrType)(v)
}

func (*azureStaticWebAppsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebApps)(nil)).Elem()
}

func (i *azureStaticWebAppsPtrType) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return i.ToAzureStaticWebAppsPtrOutputWithContext(context.Background())
}

func (i *azureStaticWebAppsPtrType) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebApps)(nil)).Elem()
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsOutput() AzureStaticWebAppsOutput {
	return o
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsOutputWithContext(ctx context.Context) AzureStaticWebAppsOutput {
	return o
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return o.ToAzureStaticWebAppsPtrOutputWithContext(context.Background())
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureStaticWebApps) *AzureStaticWebApps {
		return &v
	}).(AzureStaticWebAppsPtrOutput)
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStaticWebApps) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsOutput) Registration() AzureStaticWebAppsRegistrationPtrOutput {
	return o.ApplyT(func(v AzureStaticWebApps) *AzureStaticWebAppsRegistration { return v.Registration }).(AzureStaticWebAppsRegistrationPtrOutput)
}

type AzureStaticWebAppsPtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebApps)(nil)).Elem()
}

func (o AzureStaticWebAppsPtrOutput) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return o
}

func (o AzureStaticWebAppsPtrOutput) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return o
}

func (o AzureStaticWebAppsPtrOutput) Elem() AzureStaticWebAppsOutput {
	return o.ApplyT(func(v *AzureStaticWebApps) AzureStaticWebApps {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebApps
		return ret
	}).(AzureStaticWebAppsOutput)
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebApps) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsPtrOutput) Registration() AzureStaticWebAppsRegistrationPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebApps) *AzureStaticWebAppsRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureStaticWebAppsRegistrationPtrOutput)
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistration struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
}

// AzureStaticWebAppsRegistrationInput is an input type that accepts AzureStaticWebAppsRegistrationArgs and AzureStaticWebAppsRegistrationOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsRegistrationInput` via:
//
//	AzureStaticWebAppsRegistrationArgs{...}
type AzureStaticWebAppsRegistrationInput interface {
	pulumi.Input

	ToAzureStaticWebAppsRegistrationOutput() AzureStaticWebAppsRegistrationOutput
	ToAzureStaticWebAppsRegistrationOutputWithContext(context.Context) AzureStaticWebAppsRegistrationOutput
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationArgs struct {
	// The Client ID of the app used for login.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
}

func (AzureStaticWebAppsRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationOutput() AzureStaticWebAppsRegistrationOutput {
	return i.ToAzureStaticWebAppsRegistrationOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsRegistrationOutput)
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return i.ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsRegistrationOutput).ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx)
}

// AzureStaticWebAppsRegistrationPtrInput is an input type that accepts AzureStaticWebAppsRegistrationArgs, AzureStaticWebAppsRegistrationPtr and AzureStaticWebAppsRegistrationPtrOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsRegistrationPtrInput` via:
//
//	        AzureStaticWebAppsRegistrationArgs{...}
//
//	or:
//
//	        nil
type AzureStaticWebAppsRegistrationPtrInput interface {
	pulumi.Input

	ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput
	ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Context) AzureStaticWebAppsRegistrationPtrOutput
}

type azureStaticWebAppsRegistrationPtrType AzureStaticWebAppsRegistrationArgs

func AzureStaticWebAppsRegistrationPtr(v *AzureStaticWebAppsRegistrationArgs) AzureStaticWebAppsRegistrationPtrInput {
	return (*azureStaticWebAppsRegistrationPtrType)(v)
}

func (*azureStaticWebAppsRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (i *azureStaticWebAppsRegistrationPtrType) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return i.ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Background())
}

func (i *azureStaticWebAppsRegistrationPtrType) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsRegistrationPtrOutput)
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationOutput() AzureStaticWebAppsRegistrationOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return o.ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Background())
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureStaticWebAppsRegistration) *AzureStaticWebAppsRegistration {
		return &v
	}).(AzureStaticWebAppsRegistrationPtrOutput)
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

type AzureStaticWebAppsRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationPtrOutput) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationPtrOutput) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationPtrOutput) Elem() AzureStaticWebAppsRegistrationOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistration) AzureStaticWebAppsRegistration {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebAppsRegistration
		return ret
	}).(AzureStaticWebAppsRegistrationOutput)
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationResponse struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsRegistrationResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationResponseOutput) ToAzureStaticWebAppsRegistrationResponseOutput() AzureStaticWebAppsRegistrationResponseOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationResponseOutput) ToAzureStaticWebAppsRegistrationResponseOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationResponseOutput {
	return o
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

type AzureStaticWebAppsRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsRegistrationResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationResponsePtrOutput) ToAzureStaticWebAppsRegistrationResponsePtrOutput() AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationResponsePtrOutput) ToAzureStaticWebAppsRegistrationResponsePtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationResponsePtrOutput) Elem() AzureStaticWebAppsRegistrationResponseOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistrationResponse) AzureStaticWebAppsRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebAppsRegistrationResponse
		return ret
	}).(AzureStaticWebAppsRegistrationResponseOutput)
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsResponse struct {
	// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the Azure Static Web Apps registration.
	Registration *AzureStaticWebAppsRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsResponseOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsResponseOutput) ToAzureStaticWebAppsResponseOutput() AzureStaticWebAppsResponseOutput {
	return o
}

func (o AzureStaticWebAppsResponseOutput) ToAzureStaticWebAppsResponseOutputWithContext(ctx context.Context) AzureStaticWebAppsResponseOutput {
	return o
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsResponseOutput) Registration() AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsResponse) *AzureStaticWebAppsRegistrationResponse { return v.Registration }).(AzureStaticWebAppsRegistrationResponsePtrOutput)
}

type AzureStaticWebAppsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsResponsePtrOutput) ToAzureStaticWebAppsResponsePtrOutput() AzureStaticWebAppsResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsResponsePtrOutput) ToAzureStaticWebAppsResponsePtrOutputWithContext(ctx context.Context) AzureStaticWebAppsResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsResponsePtrOutput) Elem() AzureStaticWebAppsResponseOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsResponse) AzureStaticWebAppsResponse {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebAppsResponse
		return ret
	}).(AzureStaticWebAppsResponseOutput)
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsResponsePtrOutput) Registration() AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsResponse) *AzureStaticWebAppsRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureStaticWebAppsRegistrationResponsePtrOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStore struct {
	// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
	SasUrlSettingName *string `pulumi:"sasUrlSettingName"`
}

// BlobStorageTokenStoreInput is an input type that accepts BlobStorageTokenStoreArgs and BlobStorageTokenStoreOutput values.
// You can construct a concrete instance of `BlobStorageTokenStoreInput` via:
//
//	BlobStorageTokenStoreArgs{...}
type BlobStorageTokenStoreInput interface {
	pulumi.Input

	ToBlobStorageTokenStoreOutput() BlobStorageTokenStoreOutput
	ToBlobStorageTokenStoreOutputWithContext(context.Context) BlobStorageTokenStoreOutput
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreArgs struct {
	// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
	SasUrlSettingName pulumi.StringPtrInput `pulumi:"sasUrlSettingName"`
}

func (BlobStorageTokenStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStorageTokenStore)(nil)).Elem()
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStoreOutput() BlobStorageTokenStoreOutput {
	return i.ToBlobStorageTokenStoreOutputWithContext(context.Background())
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStoreOutputWithContext(ctx context.Context) BlobStorageTokenStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStorageTokenStoreOutput)
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return i.ToBlobStorageTokenStorePtrOutputWithContext(context.Background())
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStorageTokenStoreOutput).ToBlobStorageTokenStorePtrOutputWithContext(ctx)
}

// BlobStorageTokenStorePtrInput is an input type that accepts BlobStorageTokenStoreArgs, BlobStorageTokenStorePtr and BlobStorageTokenStorePtrOutput values.
// You can construct a concrete instance of `BlobStorageTokenStorePtrInput` via:
//
//	        BlobStorageTokenStoreArgs{...}
//
//	or:
//
//	        nil
type BlobStorageTokenStorePtrInput interface {
	pulumi.Input

	ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput
	ToBlobStorageTokenStorePtrOutputWithContext(context.Context) BlobStorageTokenStorePtrOutput
}

type blobStorageTokenStorePtrType BlobStorageTokenStoreArgs

func BlobStorageTokenStorePtr(v *BlobStorageTokenStoreArgs) BlobStorageTokenStorePtrInput {
	return (*blobStorageTokenStorePtrType)(v)
}

func (*blobStorageTokenStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageTokenStore)(nil)).Elem()
}

func (i *blobStorageTokenStorePtrType) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return i.ToBlobStorageTokenStorePtrOutputWithContext(context.Background())
}

func (i *blobStorageTokenStorePtrType) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStorageTokenStorePtrOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStorageTokenStore)(nil)).Elem()
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStoreOutput() BlobStorageTokenStoreOutput {
	return o
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStoreOutputWithContext(ctx context.Context) BlobStorageTokenStoreOutput {
	return o
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return o.ToBlobStorageTokenStorePtrOutputWithContext(context.Background())
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobStorageTokenStore) *BlobStorageTokenStore {
		return &v
	}).(BlobStorageTokenStorePtrOutput)
}

// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStoreOutput) SasUrlSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStorageTokenStore) *string { return v.SasUrlSettingName }).(pulumi.StringPtrOutput)
}

type BlobStorageTokenStorePtrOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageTokenStore)(nil)).Elem()
}

func (o BlobStorageTokenStorePtrOutput) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return o
}

func (o BlobStorageTokenStorePtrOutput) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return o
}

func (o BlobStorageTokenStorePtrOutput) Elem() BlobStorageTokenStoreOutput {
	return o.ApplyT(func(v *BlobStorageTokenStore) BlobStorageTokenStore {
		if v != nil {
			return *v
		}
		var ret BlobStorageTokenStore
		return ret
	}).(BlobStorageTokenStoreOutput)
}

// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStorePtrOutput) SasUrlSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStorageTokenStore) *string {
		if v == nil {
			return nil
		}
		return v.SasUrlSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreResponse struct {
	// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
	SasUrlSettingName *string `pulumi:"sasUrlSettingName"`
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreResponseOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStorageTokenStoreResponse)(nil)).Elem()
}

func (o BlobStorageTokenStoreResponseOutput) ToBlobStorageTokenStoreResponseOutput() BlobStorageTokenStoreResponseOutput {
	return o
}

func (o BlobStorageTokenStoreResponseOutput) ToBlobStorageTokenStoreResponseOutputWithContext(ctx context.Context) BlobStorageTokenStoreResponseOutput {
	return o
}

// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStoreResponseOutput) SasUrlSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStorageTokenStoreResponse) *string { return v.SasUrlSettingName }).(pulumi.StringPtrOutput)
}

type BlobStorageTokenStoreResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageTokenStoreResponse)(nil)).Elem()
}

func (o BlobStorageTokenStoreResponsePtrOutput) ToBlobStorageTokenStoreResponsePtrOutput() BlobStorageTokenStoreResponsePtrOutput {
	return o
}

func (o BlobStorageTokenStoreResponsePtrOutput) ToBlobStorageTokenStoreResponsePtrOutputWithContext(ctx context.Context) BlobStorageTokenStoreResponsePtrOutput {
	return o
}

func (o BlobStorageTokenStoreResponsePtrOutput) Elem() BlobStorageTokenStoreResponseOutput {
	return o.ApplyT(func(v *BlobStorageTokenStoreResponse) BlobStorageTokenStoreResponse {
		if v != nil {
			return *v
		}
		var ret BlobStorageTokenStoreResponse
		return ret
	}).(BlobStorageTokenStoreResponseOutput)
}

// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStoreResponsePtrOutput) SasUrlSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStorageTokenStoreResponse) *string {
		if v == nil {
			return nil
		}
		return v.SasUrlSettingName
	}).(pulumi.StringPtrOutput)
}

// Describes the capabilities/features allowed for a specific SKU.
type Capability struct {
	// Name of the SKU capability.
	Name *string `pulumi:"name"`
	// Reason of the SKU capability.
	Reason *string `pulumi:"reason"`
	// Value of the SKU capability.
	Value *string `pulumi:"value"`
}

// CapabilityInput is an input type that accepts CapabilityArgs and CapabilityOutput values.
// You can construct a concrete instance of `CapabilityInput` via:
//
//	CapabilityArgs{...}
type CapabilityInput interface {
	pulumi.Input

	ToCapabilityOutput() CapabilityOutput
	ToCapabilityOutputWithContext(context.Context) CapabilityOutput
}

// Describes the capabilities/features allowed for a specific SKU.
type CapabilityArgs struct {
	// Name of the SKU capability.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Reason of the SKU capability.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Value of the SKU capability.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Capability)(nil)).Elem()
}

func (i CapabilityArgs) ToCapabilityOutput() CapabilityOutput {
	return i.ToCapabilityOutputWithContext(context.Background())
}

func (i CapabilityArgs) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityOutput)
}

// CapabilityArrayInput is an input type that accepts CapabilityArray and CapabilityArrayOutput values.
// You can construct a concrete instance of `CapabilityArrayInput` via:
//
//	CapabilityArray{ CapabilityArgs{...} }
type CapabilityArrayInput interface {
	pulumi.Input

	ToCapabilityArrayOutput() CapabilityArrayOutput
	ToCapabilityArrayOutputWithContext(context.Context) CapabilityArrayOutput
}

type CapabilityArray []CapabilityInput

func (CapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Capability)(nil)).Elem()
}

func (i CapabilityArray) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return i.ToCapabilityArrayOutputWithContext(context.Background())
}

func (i CapabilityArray) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityArrayOutput)
}

// Describes the capabilities/features allowed for a specific SKU.
type CapabilityOutput struct{ *pulumi.OutputState }

func (CapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Capability)(nil)).Elem()
}

func (o CapabilityOutput) ToCapabilityOutput() CapabilityOutput {
	return o
}

func (o CapabilityOutput) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return o
}

// Name of the SKU capability.
func (o CapabilityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Capability) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reason of the SKU capability.
func (o CapabilityOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Capability) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Value of the SKU capability.
func (o CapabilityOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Capability) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CapabilityArrayOutput struct{ *pulumi.OutputState }

func (CapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Capability)(nil)).Elem()
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) Index(i pulumi.IntInput) CapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Capability {
		return vs[0].([]Capability)[vs[1].(int)]
	}).(CapabilityOutput)
}

// Describes the capabilities/features allowed for a specific SKU.
type CapabilityResponse struct {
	// Name of the SKU capability.
	Name *string `pulumi:"name"`
	// Reason of the SKU capability.
	Reason *string `pulumi:"reason"`
	// Value of the SKU capability.
	Value *string `pulumi:"value"`
}

// Describes the capabilities/features allowed for a specific SKU.
type CapabilityResponseOutput struct{ *pulumi.OutputState }

func (CapabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityResponse)(nil)).Elem()
}

func (o CapabilityResponseOutput) ToCapabilityResponseOutput() CapabilityResponseOutput {
	return o
}

func (o CapabilityResponseOutput) ToCapabilityResponseOutputWithContext(ctx context.Context) CapabilityResponseOutput {
	return o
}

// Name of the SKU capability.
func (o CapabilityResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reason of the SKU capability.
func (o CapabilityResponseOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityResponse) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Value of the SKU capability.
func (o CapabilityResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CapabilityResponseArrayOutput struct{ *pulumi.OutputState }

func (CapabilityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityResponse)(nil)).Elem()
}

func (o CapabilityResponseArrayOutput) ToCapabilityResponseArrayOutput() CapabilityResponseArrayOutput {
	return o
}

func (o CapabilityResponseArrayOutput) ToCapabilityResponseArrayOutputWithContext(ctx context.Context) CapabilityResponseArrayOutput {
	return o
}

func (o CapabilityResponseArrayOutput) Index(i pulumi.IntInput) CapabilityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapabilityResponse {
		return vs[0].([]CapabilityResponse)[vs[1].(int)]
	}).(CapabilityResponseOutput)
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistration struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// ClientRegistrationInput is an input type that accepts ClientRegistrationArgs and ClientRegistrationOutput values.
// You can construct a concrete instance of `ClientRegistrationInput` via:
//
//	ClientRegistrationArgs{...}
type ClientRegistrationInput interface {
	pulumi.Input

	ToClientRegistrationOutput() ClientRegistrationOutput
	ToClientRegistrationOutputWithContext(context.Context) ClientRegistrationOutput
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationArgs struct {
	// The Client ID of the app used for login.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
}

func (ClientRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientRegistration)(nil)).Elem()
}

func (i ClientRegistrationArgs) ToClientRegistrationOutput() ClientRegistrationOutput {
	return i.ToClientRegistrationOutputWithContext(context.Background())
}

func (i ClientRegistrationArgs) ToClientRegistrationOutputWithContext(ctx context.Context) ClientRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientRegistrationOutput)
}

func (i ClientRegistrationArgs) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return i.ToClientRegistrationPtrOutputWithContext(context.Background())
}

func (i ClientRegistrationArgs) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientRegistrationOutput).ToClientRegistrationPtrOutputWithContext(ctx)
}

// ClientRegistrationPtrInput is an input type that accepts ClientRegistrationArgs, ClientRegistrationPtr and ClientRegistrationPtrOutput values.
// You can construct a concrete instance of `ClientRegistrationPtrInput` via:
//
//	        ClientRegistrationArgs{...}
//
//	or:
//
//	        nil
type ClientRegistrationPtrInput interface {
	pulumi.Input

	ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput
	ToClientRegistrationPtrOutputWithContext(context.Context) ClientRegistrationPtrOutput
}

type clientRegistrationPtrType ClientRegistrationArgs

func ClientRegistrationPtr(v *ClientRegistrationArgs) ClientRegistrationPtrInput {
	return (*clientRegistrationPtrType)(v)
}

func (*clientRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientRegistration)(nil)).Elem()
}

func (i *clientRegistrationPtrType) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return i.ToClientRegistrationPtrOutputWithContext(context.Background())
}

func (i *clientRegistrationPtrType) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientRegistrationPtrOutput)
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationOutput struct{ *pulumi.OutputState }

func (ClientRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientRegistration)(nil)).Elem()
}

func (o ClientRegistrationOutput) ToClientRegistrationOutput() ClientRegistrationOutput {
	return o
}

func (o ClientRegistrationOutput) ToClientRegistrationOutputWithContext(ctx context.Context) ClientRegistrationOutput {
	return o
}

func (o ClientRegistrationOutput) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return o.ToClientRegistrationPtrOutputWithContext(context.Background())
}

func (o ClientRegistrationOutput) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientRegistration) *ClientRegistration {
		return &v
	}).(ClientRegistrationPtrOutput)
}

// The Client ID of the app used for login.
func (o ClientRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistration) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type ClientRegistrationPtrOutput struct{ *pulumi.OutputState }

func (ClientRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientRegistration)(nil)).Elem()
}

func (o ClientRegistrationPtrOutput) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return o
}

func (o ClientRegistrationPtrOutput) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return o
}

func (o ClientRegistrationPtrOutput) Elem() ClientRegistrationOutput {
	return o.ApplyT(func(v *ClientRegistration) ClientRegistration {
		if v != nil {
			return *v
		}
		var ret ClientRegistration
		return ret
	}).(ClientRegistrationOutput)
}

// The Client ID of the app used for login.
func (o ClientRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationResponse struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationResponseOutput struct{ *pulumi.OutputState }

func (ClientRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientRegistrationResponse)(nil)).Elem()
}

func (o ClientRegistrationResponseOutput) ToClientRegistrationResponseOutput() ClientRegistrationResponseOutput {
	return o
}

func (o ClientRegistrationResponseOutput) ToClientRegistrationResponseOutputWithContext(ctx context.Context) ClientRegistrationResponseOutput {
	return o
}

// The Client ID of the app used for login.
func (o ClientRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistrationResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type ClientRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientRegistrationResponse)(nil)).Elem()
}

func (o ClientRegistrationResponsePtrOutput) ToClientRegistrationResponsePtrOutput() ClientRegistrationResponsePtrOutput {
	return o
}

func (o ClientRegistrationResponsePtrOutput) ToClientRegistrationResponsePtrOutputWithContext(ctx context.Context) ClientRegistrationResponsePtrOutput {
	return o
}

func (o ClientRegistrationResponsePtrOutput) Elem() ClientRegistrationResponseOutput {
	return o.ApplyT(func(v *ClientRegistrationResponse) ClientRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret ClientRegistrationResponse
		return ret
	}).(ClientRegistrationResponseOutput)
}

// The Client ID of the app used for login.
func (o ClientRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the session cookie's expiration.
type CookieExpiration struct {
	// The convention used when determining the session cookie's expiration.
	Convention *CookieExpirationConvention `pulumi:"convention"`
	// The time after the request is made when the session cookie should expire.
	TimeToExpiration *string `pulumi:"timeToExpiration"`
}

// CookieExpirationInput is an input type that accepts CookieExpirationArgs and CookieExpirationOutput values.
// You can construct a concrete instance of `CookieExpirationInput` via:
//
//	CookieExpirationArgs{...}
type CookieExpirationInput interface {
	pulumi.Input

	ToCookieExpirationOutput() CookieExpirationOutput
	ToCookieExpirationOutputWithContext(context.Context) CookieExpirationOutput
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationArgs struct {
	// The convention used when determining the session cookie's expiration.
	Convention CookieExpirationConventionPtrInput `pulumi:"convention"`
	// The time after the request is made when the session cookie should expire.
	TimeToExpiration pulumi.StringPtrInput `pulumi:"timeToExpiration"`
}

func (CookieExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CookieExpiration)(nil)).Elem()
}

func (i CookieExpirationArgs) ToCookieExpirationOutput() CookieExpirationOutput {
	return i.ToCookieExpirationOutputWithContext(context.Background())
}

func (i CookieExpirationArgs) ToCookieExpirationOutputWithContext(ctx context.Context) CookieExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CookieExpirationOutput)
}

func (i CookieExpirationArgs) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return i.ToCookieExpirationPtrOutputWithContext(context.Background())
}

func (i CookieExpirationArgs) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CookieExpirationOutput).ToCookieExpirationPtrOutputWithContext(ctx)
}

// CookieExpirationPtrInput is an input type that accepts CookieExpirationArgs, CookieExpirationPtr and CookieExpirationPtrOutput values.
// You can construct a concrete instance of `CookieExpirationPtrInput` via:
//
//	        CookieExpirationArgs{...}
//
//	or:
//
//	        nil
type CookieExpirationPtrInput interface {
	pulumi.Input

	ToCookieExpirationPtrOutput() CookieExpirationPtrOutput
	ToCookieExpirationPtrOutputWithContext(context.Context) CookieExpirationPtrOutput
}

type cookieExpirationPtrType CookieExpirationArgs

func CookieExpirationPtr(v *CookieExpirationArgs) CookieExpirationPtrInput {
	return (*cookieExpirationPtrType)(v)
}

func (*cookieExpirationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CookieExpiration)(nil)).Elem()
}

func (i *cookieExpirationPtrType) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return i.ToCookieExpirationPtrOutputWithContext(context.Background())
}

func (i *cookieExpirationPtrType) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CookieExpirationPtrOutput)
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationOutput struct{ *pulumi.OutputState }

func (CookieExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CookieExpiration)(nil)).Elem()
}

func (o CookieExpirationOutput) ToCookieExpirationOutput() CookieExpirationOutput {
	return o
}

func (o CookieExpirationOutput) ToCookieExpirationOutputWithContext(ctx context.Context) CookieExpirationOutput {
	return o
}

func (o CookieExpirationOutput) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return o.ToCookieExpirationPtrOutputWithContext(context.Background())
}

func (o CookieExpirationOutput) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CookieExpiration) *CookieExpiration {
		return &v
	}).(CookieExpirationPtrOutput)
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationOutput) Convention() CookieExpirationConventionPtrOutput {
	return o.ApplyT(func(v CookieExpiration) *CookieExpirationConvention { return v.Convention }).(CookieExpirationConventionPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CookieExpiration) *string { return v.TimeToExpiration }).(pulumi.StringPtrOutput)
}

type CookieExpirationPtrOutput struct{ *pulumi.OutputState }

func (CookieExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CookieExpiration)(nil)).Elem()
}

func (o CookieExpirationPtrOutput) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return o
}

func (o CookieExpirationPtrOutput) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return o
}

func (o CookieExpirationPtrOutput) Elem() CookieExpirationOutput {
	return o.ApplyT(func(v *CookieExpiration) CookieExpiration {
		if v != nil {
			return *v
		}
		var ret CookieExpiration
		return ret
	}).(CookieExpirationOutput)
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationPtrOutput) Convention() CookieExpirationConventionPtrOutput {
	return o.ApplyT(func(v *CookieExpiration) *CookieExpirationConvention {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(CookieExpirationConventionPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationPtrOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CookieExpiration) *string {
		if v == nil {
			return nil
		}
		return v.TimeToExpiration
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationResponse struct {
	// The convention used when determining the session cookie's expiration.
	Convention *string `pulumi:"convention"`
	// The time after the request is made when the session cookie should expire.
	TimeToExpiration *string `pulumi:"timeToExpiration"`
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationResponseOutput struct{ *pulumi.OutputState }

func (CookieExpirationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CookieExpirationResponse)(nil)).Elem()
}

func (o CookieExpirationResponseOutput) ToCookieExpirationResponseOutput() CookieExpirationResponseOutput {
	return o
}

func (o CookieExpirationResponseOutput) ToCookieExpirationResponseOutputWithContext(ctx context.Context) CookieExpirationResponseOutput {
	return o
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationResponseOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CookieExpirationResponse) *string { return v.Convention }).(pulumi.StringPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationResponseOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CookieExpirationResponse) *string { return v.TimeToExpiration }).(pulumi.StringPtrOutput)
}

type CookieExpirationResponsePtrOutput struct{ *pulumi.OutputState }

func (CookieExpirationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CookieExpirationResponse)(nil)).Elem()
}

func (o CookieExpirationResponsePtrOutput) ToCookieExpirationResponsePtrOutput() CookieExpirationResponsePtrOutput {
	return o
}

func (o CookieExpirationResponsePtrOutput) ToCookieExpirationResponsePtrOutputWithContext(ctx context.Context) CookieExpirationResponsePtrOutput {
	return o
}

func (o CookieExpirationResponsePtrOutput) Elem() CookieExpirationResponseOutput {
	return o.ApplyT(func(v *CookieExpirationResponse) CookieExpirationResponse {
		if v != nil {
			return *v
		}
		var ret CookieExpirationResponse
		return ret
	}).(CookieExpirationResponseOutput)
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationResponsePtrOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CookieExpirationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(pulumi.StringPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationResponsePtrOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CookieExpirationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeToExpiration
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProvider struct {
	// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow of the custom Open ID Connect provider.
	Login *OpenIdConnectLogin `pulumi:"login"`
	// The configuration settings of the app registration for the custom Open ID Connect provider.
	Registration *OpenIdConnectRegistration `pulumi:"registration"`
}

// CustomOpenIdConnectProviderInput is an input type that accepts CustomOpenIdConnectProviderArgs and CustomOpenIdConnectProviderOutput values.
// You can construct a concrete instance of `CustomOpenIdConnectProviderInput` via:
//
//	CustomOpenIdConnectProviderArgs{...}
type CustomOpenIdConnectProviderInput interface {
	pulumi.Input

	ToCustomOpenIdConnectProviderOutput() CustomOpenIdConnectProviderOutput
	ToCustomOpenIdConnectProviderOutputWithContext(context.Context) CustomOpenIdConnectProviderOutput
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderArgs struct {
	// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow of the custom Open ID Connect provider.
	Login OpenIdConnectLoginPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the custom Open ID Connect provider.
	Registration OpenIdConnectRegistrationPtrInput `pulumi:"registration"`
}

func (CustomOpenIdConnectProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomOpenIdConnectProvider)(nil)).Elem()
}

func (i CustomOpenIdConnectProviderArgs) ToCustomOpenIdConnectProviderOutput() CustomOpenIdConnectProviderOutput {
	return i.ToCustomOpenIdConnectProviderOutputWithContext(context.Background())
}

func (i CustomOpenIdConnectProviderArgs) ToCustomOpenIdConnectProviderOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomOpenIdConnectProviderOutput)
}

// CustomOpenIdConnectProviderMapInput is an input type that accepts CustomOpenIdConnectProviderMap and CustomOpenIdConnectProviderMapOutput values.
// You can construct a concrete instance of `CustomOpenIdConnectProviderMapInput` via:
//
//	CustomOpenIdConnectProviderMap{ "key": CustomOpenIdConnectProviderArgs{...} }
type CustomOpenIdConnectProviderMapInput interface {
	pulumi.Input

	ToCustomOpenIdConnectProviderMapOutput() CustomOpenIdConnectProviderMapOutput
	ToCustomOpenIdConnectProviderMapOutputWithContext(context.Context) CustomOpenIdConnectProviderMapOutput
}

type CustomOpenIdConnectProviderMap map[string]CustomOpenIdConnectProviderInput

func (CustomOpenIdConnectProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomOpenIdConnectProvider)(nil)).Elem()
}

func (i CustomOpenIdConnectProviderMap) ToCustomOpenIdConnectProviderMapOutput() CustomOpenIdConnectProviderMapOutput {
	return i.ToCustomOpenIdConnectProviderMapOutputWithContext(context.Background())
}

func (i CustomOpenIdConnectProviderMap) ToCustomOpenIdConnectProviderMapOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomOpenIdConnectProviderMapOutput)
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomOpenIdConnectProvider)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderOutput) ToCustomOpenIdConnectProviderOutput() CustomOpenIdConnectProviderOutput {
	return o
}

func (o CustomOpenIdConnectProviderOutput) ToCustomOpenIdConnectProviderOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderOutput {
	return o
}

// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
func (o CustomOpenIdConnectProviderOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProvider) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderOutput) Login() OpenIdConnectLoginPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProvider) *OpenIdConnectLogin { return v.Login }).(OpenIdConnectLoginPtrOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderOutput) Registration() OpenIdConnectRegistrationPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProvider) *OpenIdConnectRegistration { return v.Registration }).(OpenIdConnectRegistrationPtrOutput)
}

type CustomOpenIdConnectProviderMapOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomOpenIdConnectProvider)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderMapOutput) ToCustomOpenIdConnectProviderMapOutput() CustomOpenIdConnectProviderMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderMapOutput) ToCustomOpenIdConnectProviderMapOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderMapOutput) MapIndex(k pulumi.StringInput) CustomOpenIdConnectProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomOpenIdConnectProvider {
		return vs[0].(map[string]CustomOpenIdConnectProvider)[vs[1].(string)]
	}).(CustomOpenIdConnectProviderOutput)
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderResponse struct {
	// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow of the custom Open ID Connect provider.
	Login *OpenIdConnectLoginResponse `pulumi:"login"`
	// The configuration settings of the app registration for the custom Open ID Connect provider.
	Registration *OpenIdConnectRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderResponseOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomOpenIdConnectProviderResponse)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderResponseOutput) ToCustomOpenIdConnectProviderResponseOutput() CustomOpenIdConnectProviderResponseOutput {
	return o
}

func (o CustomOpenIdConnectProviderResponseOutput) ToCustomOpenIdConnectProviderResponseOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderResponseOutput {
	return o
}

// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
func (o CustomOpenIdConnectProviderResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProviderResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderResponseOutput) Login() OpenIdConnectLoginResponsePtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProviderResponse) *OpenIdConnectLoginResponse { return v.Login }).(OpenIdConnectLoginResponsePtrOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderResponseOutput) Registration() OpenIdConnectRegistrationResponsePtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProviderResponse) *OpenIdConnectRegistrationResponse { return v.Registration }).(OpenIdConnectRegistrationResponsePtrOutput)
}

type CustomOpenIdConnectProviderResponseMapOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomOpenIdConnectProviderResponse)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderResponseMapOutput) ToCustomOpenIdConnectProviderResponseMapOutput() CustomOpenIdConnectProviderResponseMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderResponseMapOutput) ToCustomOpenIdConnectProviderResponseMapOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderResponseMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderResponseMapOutput) MapIndex(k pulumi.StringInput) CustomOpenIdConnectProviderResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomOpenIdConnectProviderResponse {
		return vs[0].(map[string]CustomOpenIdConnectProviderResponse)[vs[1].(string)]
	}).(CustomOpenIdConnectProviderResponseOutput)
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicy struct {
	// The configuration settings of the Azure Active Directory allowed applications.
	AllowedApplications []string `pulumi:"allowedApplications"`
	// The configuration settings of the Azure Active Directory allowed principals.
	AllowedPrincipals *AllowedPrincipals `pulumi:"allowedPrincipals"`
}

// DefaultAuthorizationPolicyInput is an input type that accepts DefaultAuthorizationPolicyArgs and DefaultAuthorizationPolicyOutput values.
// You can construct a concrete instance of `DefaultAuthorizationPolicyInput` via:
//
//	DefaultAuthorizationPolicyArgs{...}
type DefaultAuthorizationPolicyInput interface {
	pulumi.Input

	ToDefaultAuthorizationPolicyOutput() DefaultAuthorizationPolicyOutput
	ToDefaultAuthorizationPolicyOutputWithContext(context.Context) DefaultAuthorizationPolicyOutput
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyArgs struct {
	// The configuration settings of the Azure Active Directory allowed applications.
	AllowedApplications pulumi.StringArrayInput `pulumi:"allowedApplications"`
	// The configuration settings of the Azure Active Directory allowed principals.
	AllowedPrincipals AllowedPrincipalsPtrInput `pulumi:"allowedPrincipals"`
}

func (DefaultAuthorizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAuthorizationPolicy)(nil)).Elem()
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyOutput() DefaultAuthorizationPolicyOutput {
	return i.ToDefaultAuthorizationPolicyOutputWithContext(context.Background())
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultAuthorizationPolicyOutput)
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return i.ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Background())
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultAuthorizationPolicyOutput).ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx)
}

// DefaultAuthorizationPolicyPtrInput is an input type that accepts DefaultAuthorizationPolicyArgs, DefaultAuthorizationPolicyPtr and DefaultAuthorizationPolicyPtrOutput values.
// You can construct a concrete instance of `DefaultAuthorizationPolicyPtrInput` via:
//
//	        DefaultAuthorizationPolicyArgs{...}
//
//	or:
//
//	        nil
type DefaultAuthorizationPolicyPtrInput interface {
	pulumi.Input

	ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput
	ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Context) DefaultAuthorizationPolicyPtrOutput
}

type defaultAuthorizationPolicyPtrType DefaultAuthorizationPolicyArgs

func DefaultAuthorizationPolicyPtr(v *DefaultAuthorizationPolicyArgs) DefaultAuthorizationPolicyPtrInput {
	return (*defaultAuthorizationPolicyPtrType)(v)
}

func (*defaultAuthorizationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultAuthorizationPolicy)(nil)).Elem()
}

func (i *defaultAuthorizationPolicyPtrType) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return i.ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Background())
}

func (i *defaultAuthorizationPolicyPtrType) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultAuthorizationPolicyPtrOutput)
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAuthorizationPolicy)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyOutput() DefaultAuthorizationPolicyOutput {
	return o
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyOutput {
	return o
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return o.ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Background())
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultAuthorizationPolicy) *DefaultAuthorizationPolicy {
		return &v
	}).(DefaultAuthorizationPolicyPtrOutput)
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicy) []string { return v.AllowedApplications }).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyOutput) AllowedPrincipals() AllowedPrincipalsPtrOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicy) *AllowedPrincipals { return v.AllowedPrincipals }).(AllowedPrincipalsPtrOutput)
}

type DefaultAuthorizationPolicyPtrOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultAuthorizationPolicy)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyPtrOutput) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyPtrOutput) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyPtrOutput) Elem() DefaultAuthorizationPolicyOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicy) DefaultAuthorizationPolicy {
		if v != nil {
			return *v
		}
		var ret DefaultAuthorizationPolicy
		return ret
	}).(DefaultAuthorizationPolicyOutput)
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyPtrOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedApplications
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyPtrOutput) AllowedPrincipals() AllowedPrincipalsPtrOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicy) *AllowedPrincipals {
		if v == nil {
			return nil
		}
		return v.AllowedPrincipals
	}).(AllowedPrincipalsPtrOutput)
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyResponse struct {
	// The configuration settings of the Azure Active Directory allowed applications.
	AllowedApplications []string `pulumi:"allowedApplications"`
	// The configuration settings of the Azure Active Directory allowed principals.
	AllowedPrincipals *AllowedPrincipalsResponse `pulumi:"allowedPrincipals"`
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyResponseOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAuthorizationPolicyResponse)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyResponseOutput) ToDefaultAuthorizationPolicyResponseOutput() DefaultAuthorizationPolicyResponseOutput {
	return o
}

func (o DefaultAuthorizationPolicyResponseOutput) ToDefaultAuthorizationPolicyResponseOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyResponseOutput {
	return o
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyResponseOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicyResponse) []string { return v.AllowedApplications }).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyResponseOutput) AllowedPrincipals() AllowedPrincipalsResponsePtrOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicyResponse) *AllowedPrincipalsResponse { return v.AllowedPrincipals }).(AllowedPrincipalsResponsePtrOutput)
}

type DefaultAuthorizationPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultAuthorizationPolicyResponse)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyResponsePtrOutput) ToDefaultAuthorizationPolicyResponsePtrOutput() DefaultAuthorizationPolicyResponsePtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyResponsePtrOutput) ToDefaultAuthorizationPolicyResponsePtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyResponsePtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyResponsePtrOutput) Elem() DefaultAuthorizationPolicyResponseOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicyResponse) DefaultAuthorizationPolicyResponse {
		if v != nil {
			return *v
		}
		var ret DefaultAuthorizationPolicyResponse
		return ret
	}).(DefaultAuthorizationPolicyResponseOutput)
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyResponsePtrOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedApplications
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyResponsePtrOutput) AllowedPrincipals() AllowedPrincipalsResponsePtrOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicyResponse) *AllowedPrincipalsResponse {
		if v == nil {
			return nil
		}
		return v.AllowedPrincipals
	}).(AllowedPrincipalsResponsePtrOutput)
}

// Body of the error response returned from the API.
type ErrorEntityResponse struct {
	// Basic error code.
	Code *string `pulumi:"code"`
	// Error Details.
	Details []ErrorEntityResponse `pulumi:"details"`
	// Type of error.
	ExtendedCode *string `pulumi:"extendedCode"`
	// Inner errors.
	InnerErrors []ErrorEntityResponse `pulumi:"innerErrors"`
	// Any details of the error.
	Message *string `pulumi:"message"`
	// Message template.
	MessageTemplate *string `pulumi:"messageTemplate"`
	// Parameters for the template.
	Parameters []string `pulumi:"parameters"`
	// The error target.
	Target *string `pulumi:"target"`
}

// Body of the error response returned from the API.
type ErrorEntityResponseOutput struct{ *pulumi.OutputState }

func (ErrorEntityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorEntityResponse)(nil)).Elem()
}

func (o ErrorEntityResponseOutput) ToErrorEntityResponseOutput() ErrorEntityResponseOutput {
	return o
}

func (o ErrorEntityResponseOutput) ToErrorEntityResponseOutputWithContext(ctx context.Context) ErrorEntityResponseOutput {
	return o
}

// Basic error code.
func (o ErrorEntityResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorEntityResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Error Details.
func (o ErrorEntityResponseOutput) Details() ErrorEntityResponseArrayOutput {
	return o.ApplyT(func(v ErrorEntityResponse) []ErrorEntityResponse { return v.Details }).(ErrorEntityResponseArrayOutput)
}

// Type of error.
func (o ErrorEntityResponseOutput) ExtendedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorEntityResponse) *string { return v.ExtendedCode }).(pulumi.StringPtrOutput)
}

// Inner errors.
func (o ErrorEntityResponseOutput) InnerErrors() ErrorEntityResponseArrayOutput {
	return o.ApplyT(func(v ErrorEntityResponse) []ErrorEntityResponse { return v.InnerErrors }).(ErrorEntityResponseArrayOutput)
}

// Any details of the error.
func (o ErrorEntityResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorEntityResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Message template.
func (o ErrorEntityResponseOutput) MessageTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorEntityResponse) *string { return v.MessageTemplate }).(pulumi.StringPtrOutput)
}

// Parameters for the template.
func (o ErrorEntityResponseOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ErrorEntityResponse) []string { return v.Parameters }).(pulumi.StringArrayOutput)
}

// The error target.
func (o ErrorEntityResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorEntityResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ErrorEntityResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorEntityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorEntityResponse)(nil)).Elem()
}

func (o ErrorEntityResponsePtrOutput) ToErrorEntityResponsePtrOutput() ErrorEntityResponsePtrOutput {
	return o
}

func (o ErrorEntityResponsePtrOutput) ToErrorEntityResponsePtrOutputWithContext(ctx context.Context) ErrorEntityResponsePtrOutput {
	return o
}

func (o ErrorEntityResponsePtrOutput) Elem() ErrorEntityResponseOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) ErrorEntityResponse {
		if v != nil {
			return *v
		}
		var ret ErrorEntityResponse
		return ret
	}).(ErrorEntityResponseOutput)
}

// Basic error code.
func (o ErrorEntityResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// Error Details.
func (o ErrorEntityResponsePtrOutput) Details() ErrorEntityResponseArrayOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) []ErrorEntityResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorEntityResponseArrayOutput)
}

// Type of error.
func (o ErrorEntityResponsePtrOutput) ExtendedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtendedCode
	}).(pulumi.StringPtrOutput)
}

// Inner errors.
func (o ErrorEntityResponsePtrOutput) InnerErrors() ErrorEntityResponseArrayOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) []ErrorEntityResponse {
		if v == nil {
			return nil
		}
		return v.InnerErrors
	}).(ErrorEntityResponseArrayOutput)
}

// Any details of the error.
func (o ErrorEntityResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Message template.
func (o ErrorEntityResponsePtrOutput) MessageTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) *string {
		if v == nil {
			return nil
		}
		return v.MessageTemplate
	}).(pulumi.StringPtrOutput)
}

// Parameters for the template.
func (o ErrorEntityResponsePtrOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) []string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringArrayOutput)
}

// The error target.
func (o ErrorEntityResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorEntityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorEntityResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorEntityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorEntityResponse)(nil)).Elem()
}

func (o ErrorEntityResponseArrayOutput) ToErrorEntityResponseArrayOutput() ErrorEntityResponseArrayOutput {
	return o
}

func (o ErrorEntityResponseArrayOutput) ToErrorEntityResponseArrayOutputWithContext(ctx context.Context) ErrorEntityResponseArrayOutput {
	return o
}

func (o ErrorEntityResponseArrayOutput) Index(i pulumi.IntInput) ErrorEntityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorEntityResponse {
		return vs[0].([]ErrorEntityResponse)[vs[1].(int)]
	}).(ErrorEntityResponseOutput)
}

// The configuration settings of the Facebook provider.
type Facebook struct {
	// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The version of the Facebook api to be used while logging in.
	GraphApiVersion *string `pulumi:"graphApiVersion"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the app registration for the Facebook provider.
	Registration *AppRegistration `pulumi:"registration"`
}

// FacebookInput is an input type that accepts FacebookArgs and FacebookOutput values.
// You can construct a concrete instance of `FacebookInput` via:
//
//	FacebookArgs{...}
type FacebookInput interface {
	pulumi.Input

	ToFacebookOutput() FacebookOutput
	ToFacebookOutputWithContext(context.Context) FacebookOutput
}

// The configuration settings of the Facebook provider.
type FacebookArgs struct {
	// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The version of the Facebook api to be used while logging in.
	GraphApiVersion pulumi.StringPtrInput `pulumi:"graphApiVersion"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the Facebook provider.
	Registration AppRegistrationPtrInput `pulumi:"registration"`
}

func (FacebookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Facebook)(nil)).Elem()
}

func (i FacebookArgs) ToFacebookOutput() FacebookOutput {
	return i.ToFacebookOutputWithContext(context.Background())
}

func (i FacebookArgs) ToFacebookOutputWithContext(ctx context.Context) FacebookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FacebookOutput)
}

func (i FacebookArgs) ToFacebookPtrOutput() FacebookPtrOutput {
	return i.ToFacebookPtrOutputWithContext(context.Background())
}

func (i FacebookArgs) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FacebookOutput).ToFacebookPtrOutputWithContext(ctx)
}

// FacebookPtrInput is an input type that accepts FacebookArgs, FacebookPtr and FacebookPtrOutput values.
// You can construct a concrete instance of `FacebookPtrInput` via:
//
//	        FacebookArgs{...}
//
//	or:
//
//	        nil
type FacebookPtrInput interface {
	pulumi.Input

	ToFacebookPtrOutput() FacebookPtrOutput
	ToFacebookPtrOutputWithContext(context.Context) FacebookPtrOutput
}

type facebookPtrType FacebookArgs

func FacebookPtr(v *FacebookArgs) FacebookPtrInput {
	return (*facebookPtrType)(v)
}

func (*facebookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Facebook)(nil)).Elem()
}

func (i *facebookPtrType) ToFacebookPtrOutput() FacebookPtrOutput {
	return i.ToFacebookPtrOutputWithContext(context.Background())
}

func (i *facebookPtrType) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FacebookPtrOutput)
}

// The configuration settings of the Facebook provider.
type FacebookOutput struct{ *pulumi.OutputState }

func (FacebookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Facebook)(nil)).Elem()
}

func (o FacebookOutput) ToFacebookOutput() FacebookOutput {
	return o
}

func (o FacebookOutput) ToFacebookOutputWithContext(ctx context.Context) FacebookOutput {
	return o
}

func (o FacebookOutput) ToFacebookPtrOutput() FacebookPtrOutput {
	return o.ToFacebookPtrOutputWithContext(context.Background())
}

func (o FacebookOutput) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Facebook) *Facebook {
		return &v
	}).(FacebookPtrOutput)
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Facebook) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Facebook) *string { return v.GraphApiVersion }).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v Facebook) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookOutput) Registration() AppRegistrationPtrOutput {
	return o.ApplyT(func(v Facebook) *AppRegistration { return v.Registration }).(AppRegistrationPtrOutput)
}

type FacebookPtrOutput struct{ *pulumi.OutputState }

func (FacebookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Facebook)(nil)).Elem()
}

func (o FacebookPtrOutput) ToFacebookPtrOutput() FacebookPtrOutput {
	return o
}

func (o FacebookPtrOutput) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return o
}

func (o FacebookPtrOutput) Elem() FacebookOutput {
	return o.ApplyT(func(v *Facebook) Facebook {
		if v != nil {
			return *v
		}
		var ret Facebook
		return ret
	}).(FacebookOutput)
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Facebook) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookPtrOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Facebook) *string {
		if v == nil {
			return nil
		}
		return v.GraphApiVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookPtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *Facebook) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookPtrOutput) Registration() AppRegistrationPtrOutput {
	return o.ApplyT(func(v *Facebook) *AppRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppRegistrationPtrOutput)
}

// The configuration settings of the Facebook provider.
type FacebookResponse struct {
	// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The version of the Facebook api to be used while logging in.
	GraphApiVersion *string `pulumi:"graphApiVersion"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the app registration for the Facebook provider.
	Registration *AppRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Facebook provider.
type FacebookResponseOutput struct{ *pulumi.OutputState }

func (FacebookResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FacebookResponse)(nil)).Elem()
}

func (o FacebookResponseOutput) ToFacebookResponseOutput() FacebookResponseOutput {
	return o
}

func (o FacebookResponseOutput) ToFacebookResponseOutputWithContext(ctx context.Context) FacebookResponseOutput {
	return o
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FacebookResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookResponseOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FacebookResponse) *string { return v.GraphApiVersion }).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v FacebookResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookResponseOutput) Registration() AppRegistrationResponsePtrOutput {
	return o.ApplyT(func(v FacebookResponse) *AppRegistrationResponse { return v.Registration }).(AppRegistrationResponsePtrOutput)
}

type FacebookResponsePtrOutput struct{ *pulumi.OutputState }

func (FacebookResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FacebookResponse)(nil)).Elem()
}

func (o FacebookResponsePtrOutput) ToFacebookResponsePtrOutput() FacebookResponsePtrOutput {
	return o
}

func (o FacebookResponsePtrOutput) ToFacebookResponsePtrOutputWithContext(ctx context.Context) FacebookResponsePtrOutput {
	return o
}

func (o FacebookResponsePtrOutput) Elem() FacebookResponseOutput {
	return o.ApplyT(func(v *FacebookResponse) FacebookResponse {
		if v != nil {
			return *v
		}
		var ret FacebookResponse
		return ret
	}).(FacebookResponseOutput)
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookResponsePtrOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *string {
		if v == nil {
			return nil
		}
		return v.GraphApiVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookResponsePtrOutput) Registration() AppRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *AppRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppRegistrationResponsePtrOutput)
}

// The configuration settings of the storage of the tokens if a file system is used.
type FileSystemTokenStore struct {
	// The directory in which the tokens will be stored.
	Directory *string `pulumi:"directory"`
}

// FileSystemTokenStoreInput is an input type that accepts FileSystemTokenStoreArgs and FileSystemTokenStoreOutput values.
// You can construct a concrete instance of `FileSystemTokenStoreInput` via:
//
//	FileSystemTokenStoreArgs{...}
type FileSystemTokenStoreInput interface {
	pulumi.Input

	ToFileSystemTokenStoreOutput() FileSystemTokenStoreOutput
	ToFileSystemTokenStoreOutputWithContext(context.Context) FileSystemTokenStoreOutput
}

// The configuration settings of the storage of the tokens if a file system is used.
type FileSystemTokenStoreArgs struct {
	// The directory in which the tokens will be stored.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
}

func (FileSystemTokenStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemTokenStore)(nil)).Elem()
}

func (i FileSystemTokenStoreArgs) ToFileSystemTokenStoreOutput() FileSystemTokenStoreOutput {
	return i.ToFileSystemTokenStoreOutputWithContext(context.Background())
}

func (i FileSystemTokenStoreArgs) ToFileSystemTokenStoreOutputWithContext(ctx context.Context) FileSystemTokenStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemTokenStoreOutput)
}

func (i FileSystemTokenStoreArgs) ToFileSystemTokenStorePtrOutput() FileSystemTokenStorePtrOutput {
	return i.ToFileSystemTokenStorePtrOutputWithContext(context.Background())
}

func (i FileSystemTokenStoreArgs) ToFileSystemTokenStorePtrOutputWithContext(ctx context.Context) FileSystemTokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemTokenStoreOutput).ToFileSystemTokenStorePtrOutputWithContext(ctx)
}

// FileSystemTokenStorePtrInput is an input type that accepts FileSystemTokenStoreArgs, FileSystemTokenStorePtr and FileSystemTokenStorePtrOutput values.
// You can construct a concrete instance of `FileSystemTokenStorePtrInput` via:
//
//	        FileSystemTokenStoreArgs{...}
//
//	or:
//
//	        nil
type FileSystemTokenStorePtrInput interface {
	pulumi.Input

	ToFileSystemTokenStorePtrOutput() FileSystemTokenStorePtrOutput
	ToFileSystemTokenStorePtrOutputWithContext(context.Context) FileSystemTokenStorePtrOutput
}

type fileSystemTokenStorePtrType FileSystemTokenStoreArgs

func FileSystemTokenStorePtr(v *FileSystemTokenStoreArgs) FileSystemTokenStorePtrInput {
	return (*fileSystemTokenStorePtrType)(v)
}

func (*fileSystemTokenStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemTokenStore)(nil)).Elem()
}

func (i *fileSystemTokenStorePtrType) ToFileSystemTokenStorePtrOutput() FileSystemTokenStorePtrOutput {
	return i.ToFileSystemTokenStorePtrOutputWithContext(context.Background())
}

func (i *fileSystemTokenStorePtrType) ToFileSystemTokenStorePtrOutputWithContext(ctx context.Context) FileSystemTokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemTokenStorePtrOutput)
}

// The configuration settings of the storage of the tokens if a file system is used.
type FileSystemTokenStoreOutput struct{ *pulumi.OutputState }

func (FileSystemTokenStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemTokenStore)(nil)).Elem()
}

func (o FileSystemTokenStoreOutput) ToFileSystemTokenStoreOutput() FileSystemTokenStoreOutput {
	return o
}

func (o FileSystemTokenStoreOutput) ToFileSystemTokenStoreOutputWithContext(ctx context.Context) FileSystemTokenStoreOutput {
	return o
}

func (o FileSystemTokenStoreOutput) ToFileSystemTokenStorePtrOutput() FileSystemTokenStorePtrOutput {
	return o.ToFileSystemTokenStorePtrOutputWithContext(context.Background())
}

func (o FileSystemTokenStoreOutput) ToFileSystemTokenStorePtrOutputWithContext(ctx context.Context) FileSystemTokenStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemTokenStore) *FileSystemTokenStore {
		return &v
	}).(FileSystemTokenStorePtrOutput)
}

// The directory in which the tokens will be stored.
func (o FileSystemTokenStoreOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemTokenStore) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

type FileSystemTokenStorePtrOutput struct{ *pulumi.OutputState }

func (FileSystemTokenStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemTokenStore)(nil)).Elem()
}

func (o FileSystemTokenStorePtrOutput) ToFileSystemTokenStorePtrOutput() FileSystemTokenStorePtrOutput {
	return o
}

func (o FileSystemTokenStorePtrOutput) ToFileSystemTokenStorePtrOutputWithContext(ctx context.Context) FileSystemTokenStorePtrOutput {
	return o
}

func (o FileSystemTokenStorePtrOutput) Elem() FileSystemTokenStoreOutput {
	return o.ApplyT(func(v *FileSystemTokenStore) FileSystemTokenStore {
		if v != nil {
			return *v
		}
		var ret FileSystemTokenStore
		return ret
	}).(FileSystemTokenStoreOutput)
}

// The directory in which the tokens will be stored.
func (o FileSystemTokenStorePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemTokenStore) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the storage of the tokens if a file system is used.
type FileSystemTokenStoreResponse struct {
	// The directory in which the tokens will be stored.
	Directory *string `pulumi:"directory"`
}

// The configuration settings of the storage of the tokens if a file system is used.
type FileSystemTokenStoreResponseOutput struct{ *pulumi.OutputState }

func (FileSystemTokenStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemTokenStoreResponse)(nil)).Elem()
}

func (o FileSystemTokenStoreResponseOutput) ToFileSystemTokenStoreResponseOutput() FileSystemTokenStoreResponseOutput {
	return o
}

func (o FileSystemTokenStoreResponseOutput) ToFileSystemTokenStoreResponseOutputWithContext(ctx context.Context) FileSystemTokenStoreResponseOutput {
	return o
}

// The directory in which the tokens will be stored.
func (o FileSystemTokenStoreResponseOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemTokenStoreResponse) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

type FileSystemTokenStoreResponsePtrOutput struct{ *pulumi.OutputState }

func (FileSystemTokenStoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemTokenStoreResponse)(nil)).Elem()
}

func (o FileSystemTokenStoreResponsePtrOutput) ToFileSystemTokenStoreResponsePtrOutput() FileSystemTokenStoreResponsePtrOutput {
	return o
}

func (o FileSystemTokenStoreResponsePtrOutput) ToFileSystemTokenStoreResponsePtrOutputWithContext(ctx context.Context) FileSystemTokenStoreResponsePtrOutput {
	return o
}

func (o FileSystemTokenStoreResponsePtrOutput) Elem() FileSystemTokenStoreResponseOutput {
	return o.ApplyT(func(v *FileSystemTokenStoreResponse) FileSystemTokenStoreResponse {
		if v != nil {
			return *v
		}
		var ret FileSystemTokenStoreResponse
		return ret
	}).(FileSystemTokenStoreResponseOutput)
}

// The directory in which the tokens will be stored.
func (o FileSystemTokenStoreResponsePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemTokenStoreResponse) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxy struct {
	// The convention used to determine the url of the request made.
	Convention *ForwardProxyConvention `pulumi:"convention"`
	// The name of the header containing the host of the request.
	CustomHostHeaderName *string `pulumi:"customHostHeaderName"`
	// The name of the header containing the scheme of the request.
	CustomProtoHeaderName *string `pulumi:"customProtoHeaderName"`
}

// ForwardProxyInput is an input type that accepts ForwardProxyArgs and ForwardProxyOutput values.
// You can construct a concrete instance of `ForwardProxyInput` via:
//
//	ForwardProxyArgs{...}
type ForwardProxyInput interface {
	pulumi.Input

	ToForwardProxyOutput() ForwardProxyOutput
	ToForwardProxyOutputWithContext(context.Context) ForwardProxyOutput
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyArgs struct {
	// The convention used to determine the url of the request made.
	Convention ForwardProxyConventionPtrInput `pulumi:"convention"`
	// The name of the header containing the host of the request.
	CustomHostHeaderName pulumi.StringPtrInput `pulumi:"customHostHeaderName"`
	// The name of the header containing the scheme of the request.
	CustomProtoHeaderName pulumi.StringPtrInput `pulumi:"customProtoHeaderName"`
}

func (ForwardProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardProxy)(nil)).Elem()
}

func (i ForwardProxyArgs) ToForwardProxyOutput() ForwardProxyOutput {
	return i.ToForwardProxyOutputWithContext(context.Background())
}

func (i ForwardProxyArgs) ToForwardProxyOutputWithContext(ctx context.Context) ForwardProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardProxyOutput)
}

func (i ForwardProxyArgs) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return i.ToForwardProxyPtrOutputWithContext(context.Background())
}

func (i ForwardProxyArgs) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardProxyOutput).ToForwardProxyPtrOutputWithContext(ctx)
}

// ForwardProxyPtrInput is an input type that accepts ForwardProxyArgs, ForwardProxyPtr and ForwardProxyPtrOutput values.
// You can construct a concrete instance of `ForwardProxyPtrInput` via:
//
//	        ForwardProxyArgs{...}
//
//	or:
//
//	        nil
type ForwardProxyPtrInput interface {
	pulumi.Input

	ToForwardProxyPtrOutput() ForwardProxyPtrOutput
	ToForwardProxyPtrOutputWithContext(context.Context) ForwardProxyPtrOutput
}

type forwardProxyPtrType ForwardProxyArgs

func ForwardProxyPtr(v *ForwardProxyArgs) ForwardProxyPtrInput {
	return (*forwardProxyPtrType)(v)
}

func (*forwardProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardProxy)(nil)).Elem()
}

func (i *forwardProxyPtrType) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return i.ToForwardProxyPtrOutputWithContext(context.Background())
}

func (i *forwardProxyPtrType) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardProxyPtrOutput)
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyOutput struct{ *pulumi.OutputState }

func (ForwardProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardProxy)(nil)).Elem()
}

func (o ForwardProxyOutput) ToForwardProxyOutput() ForwardProxyOutput {
	return o
}

func (o ForwardProxyOutput) ToForwardProxyOutputWithContext(ctx context.Context) ForwardProxyOutput {
	return o
}

func (o ForwardProxyOutput) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return o.ToForwardProxyPtrOutputWithContext(context.Background())
}

func (o ForwardProxyOutput) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForwardProxy) *ForwardProxy {
		return &v
	}).(ForwardProxyPtrOutput)
}

// The convention used to determine the url of the request made.
func (o ForwardProxyOutput) Convention() ForwardProxyConventionPtrOutput {
	return o.ApplyT(func(v ForwardProxy) *ForwardProxyConvention { return v.Convention }).(ForwardProxyConventionPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxy) *string { return v.CustomHostHeaderName }).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxy) *string { return v.CustomProtoHeaderName }).(pulumi.StringPtrOutput)
}

type ForwardProxyPtrOutput struct{ *pulumi.OutputState }

func (ForwardProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardProxy)(nil)).Elem()
}

func (o ForwardProxyPtrOutput) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return o
}

func (o ForwardProxyPtrOutput) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return o
}

func (o ForwardProxyPtrOutput) Elem() ForwardProxyOutput {
	return o.ApplyT(func(v *ForwardProxy) ForwardProxy {
		if v != nil {
			return *v
		}
		var ret ForwardProxy
		return ret
	}).(ForwardProxyOutput)
}

// The convention used to determine the url of the request made.
func (o ForwardProxyPtrOutput) Convention() ForwardProxyConventionPtrOutput {
	return o.ApplyT(func(v *ForwardProxy) *ForwardProxyConvention {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(ForwardProxyConventionPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyPtrOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxy) *string {
		if v == nil {
			return nil
		}
		return v.CustomHostHeaderName
	}).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyPtrOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxy) *string {
		if v == nil {
			return nil
		}
		return v.CustomProtoHeaderName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyResponse struct {
	// The convention used to determine the url of the request made.
	Convention *string `pulumi:"convention"`
	// The name of the header containing the host of the request.
	CustomHostHeaderName *string `pulumi:"customHostHeaderName"`
	// The name of the header containing the scheme of the request.
	CustomProtoHeaderName *string `pulumi:"customProtoHeaderName"`
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyResponseOutput struct{ *pulumi.OutputState }

func (ForwardProxyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardProxyResponse)(nil)).Elem()
}

func (o ForwardProxyResponseOutput) ToForwardProxyResponseOutput() ForwardProxyResponseOutput {
	return o
}

func (o ForwardProxyResponseOutput) ToForwardProxyResponseOutputWithContext(ctx context.Context) ForwardProxyResponseOutput {
	return o
}

// The convention used to determine the url of the request made.
func (o ForwardProxyResponseOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxyResponse) *string { return v.Convention }).(pulumi.StringPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyResponseOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxyResponse) *string { return v.CustomHostHeaderName }).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyResponseOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxyResponse) *string { return v.CustomProtoHeaderName }).(pulumi.StringPtrOutput)
}

type ForwardProxyResponsePtrOutput struct{ *pulumi.OutputState }

func (ForwardProxyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardProxyResponse)(nil)).Elem()
}

func (o ForwardProxyResponsePtrOutput) ToForwardProxyResponsePtrOutput() ForwardProxyResponsePtrOutput {
	return o
}

func (o ForwardProxyResponsePtrOutput) ToForwardProxyResponsePtrOutputWithContext(ctx context.Context) ForwardProxyResponsePtrOutput {
	return o
}

func (o ForwardProxyResponsePtrOutput) Elem() ForwardProxyResponseOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) ForwardProxyResponse {
		if v != nil {
			return *v
		}
		var ret ForwardProxyResponse
		return ret
	}).(ForwardProxyResponseOutput)
}

// The convention used to determine the url of the request made.
func (o ForwardProxyResponsePtrOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(pulumi.StringPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyResponsePtrOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomHostHeaderName
	}).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyResponsePtrOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomProtoHeaderName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the GitHub provider.
type GitHub struct {
	// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the app registration for the GitHub provider.
	Registration *ClientRegistration `pulumi:"registration"`
}

// GitHubInput is an input type that accepts GitHubArgs and GitHubOutput values.
// You can construct a concrete instance of `GitHubInput` via:
//
//	GitHubArgs{...}
type GitHubInput interface {
	pulumi.Input

	ToGitHubOutput() GitHubOutput
	ToGitHubOutputWithContext(context.Context) GitHubOutput
}

// The configuration settings of the GitHub provider.
type GitHubArgs struct {
	// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the GitHub provider.
	Registration ClientRegistrationPtrInput `pulumi:"registration"`
}

func (GitHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHub)(nil)).Elem()
}

func (i GitHubArgs) ToGitHubOutput() GitHubOutput {
	return i.ToGitHubOutputWithContext(context.Background())
}

func (i GitHubArgs) ToGitHubOutputWithContext(ctx context.Context) GitHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubOutput)
}

func (i GitHubArgs) ToGitHubPtrOutput() GitHubPtrOutput {
	return i.ToGitHubPtrOutputWithContext(context.Background())
}

func (i GitHubArgs) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubOutput).ToGitHubPtrOutputWithContext(ctx)
}

// GitHubPtrInput is an input type that accepts GitHubArgs, GitHubPtr and GitHubPtrOutput values.
// You can construct a concrete instance of `GitHubPtrInput` via:
//
//	        GitHubArgs{...}
//
//	or:
//
//	        nil
type GitHubPtrInput interface {
	pulumi.Input

	ToGitHubPtrOutput() GitHubPtrOutput
	ToGitHubPtrOutputWithContext(context.Context) GitHubPtrOutput
}

type gitHubPtrType GitHubArgs

func GitHubPtr(v *GitHubArgs) GitHubPtrInput {
	return (*gitHubPtrType)(v)
}

func (*gitHubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHub)(nil)).Elem()
}

func (i *gitHubPtrType) ToGitHubPtrOutput() GitHubPtrOutput {
	return i.ToGitHubPtrOutputWithContext(context.Background())
}

func (i *gitHubPtrType) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubPtrOutput)
}

// The configuration settings of the GitHub provider.
type GitHubOutput struct{ *pulumi.OutputState }

func (GitHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHub)(nil)).Elem()
}

func (o GitHubOutput) ToGitHubOutput() GitHubOutput {
	return o
}

func (o GitHubOutput) ToGitHubOutputWithContext(ctx context.Context) GitHubOutput {
	return o
}

func (o GitHubOutput) ToGitHubPtrOutput() GitHubPtrOutput {
	return o.ToGitHubPtrOutputWithContext(context.Background())
}

func (o GitHubOutput) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHub) *GitHub {
		return &v
	}).(GitHubPtrOutput)
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitHub) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v GitHub) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v GitHub) *ClientRegistration { return v.Registration }).(ClientRegistrationPtrOutput)
}

type GitHubPtrOutput struct{ *pulumi.OutputState }

func (GitHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHub)(nil)).Elem()
}

func (o GitHubPtrOutput) ToGitHubPtrOutput() GitHubPtrOutput {
	return o
}

func (o GitHubPtrOutput) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return o
}

func (o GitHubPtrOutput) Elem() GitHubOutput {
	return o.ApplyT(func(v *GitHub) GitHub {
		if v != nil {
			return *v
		}
		var ret GitHub
		return ret
	}).(GitHubOutput)
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitHub) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubPtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *GitHub) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubPtrOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v *GitHub) *ClientRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationPtrOutput)
}

// The configuration settings of the GitHub provider.
type GitHubResponse struct {
	// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the app registration for the GitHub provider.
	Registration *ClientRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the GitHub provider.
type GitHubResponseOutput struct{ *pulumi.OutputState }

func (GitHubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubResponse)(nil)).Elem()
}

func (o GitHubResponseOutput) ToGitHubResponseOutput() GitHubResponseOutput {
	return o
}

func (o GitHubResponseOutput) ToGitHubResponseOutputWithContext(ctx context.Context) GitHubResponseOutput {
	return o
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitHubResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v GitHubResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubResponseOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v GitHubResponse) *ClientRegistrationResponse { return v.Registration }).(ClientRegistrationResponsePtrOutput)
}

type GitHubResponsePtrOutput struct{ *pulumi.OutputState }

func (GitHubResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubResponse)(nil)).Elem()
}

func (o GitHubResponsePtrOutput) ToGitHubResponsePtrOutput() GitHubResponsePtrOutput {
	return o
}

func (o GitHubResponsePtrOutput) ToGitHubResponsePtrOutputWithContext(ctx context.Context) GitHubResponsePtrOutput {
	return o
}

func (o GitHubResponsePtrOutput) Elem() GitHubResponseOutput {
	return o.ApplyT(func(v *GitHubResponse) GitHubResponse {
		if v != nil {
			return *v
		}
		var ret GitHubResponse
		return ret
	}).(GitHubResponseOutput)
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitHubResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *GitHubResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubResponsePtrOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *GitHubResponse) *ClientRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationResponsePtrOutput)
}

// The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
type GlobalValidation struct {
	// The paths for which unauthenticated flow would not be redirected to the login page.
	ExcludedPaths []string `pulumi:"excludedPaths"`
	// The default authentication provider to use when multiple providers are configured.
	// This setting is only needed if multiple providers are configured and the unauthenticated client
	// action is set to "RedirectToLoginPage".
	RedirectToProvider *string `pulumi:"redirectToProvider"`
	// <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
	RequireAuthentication *bool `pulumi:"requireAuthentication"`
	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction *UnauthenticatedClientActionV2 `pulumi:"unauthenticatedClientAction"`
}

// GlobalValidationInput is an input type that accepts GlobalValidationArgs and GlobalValidationOutput values.
// You can construct a concrete instance of `GlobalValidationInput` via:
//
//	GlobalValidationArgs{...}
type GlobalValidationInput interface {
	pulumi.Input

	ToGlobalValidationOutput() GlobalValidationOutput
	ToGlobalValidationOutputWithContext(context.Context) GlobalValidationOutput
}

// The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
type GlobalValidationArgs struct {
	// The paths for which unauthenticated flow would not be redirected to the login page.
	ExcludedPaths pulumi.StringArrayInput `pulumi:"excludedPaths"`
	// The default authentication provider to use when multiple providers are configured.
	// This setting is only needed if multiple providers are configured and the unauthenticated client
	// action is set to "RedirectToLoginPage".
	RedirectToProvider pulumi.StringPtrInput `pulumi:"redirectToProvider"`
	// <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
	RequireAuthentication pulumi.BoolPtrInput `pulumi:"requireAuthentication"`
	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction UnauthenticatedClientActionV2PtrInput `pulumi:"unauthenticatedClientAction"`
}

func (GlobalValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalValidation)(nil)).Elem()
}

func (i GlobalValidationArgs) ToGlobalValidationOutput() GlobalValidationOutput {
	return i.ToGlobalValidationOutputWithContext(context.Background())
}

func (i GlobalValidationArgs) ToGlobalValidationOutputWithContext(ctx context.Context) GlobalValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalValidationOutput)
}

func (i GlobalValidationArgs) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return i.ToGlobalValidationPtrOutputWithContext(context.Background())
}

func (i GlobalValidationArgs) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalValidationOutput).ToGlobalValidationPtrOutputWithContext(ctx)
}

// GlobalValidationPtrInput is an input type that accepts GlobalValidationArgs, GlobalValidationPtr and GlobalValidationPtrOutput values.
// You can construct a concrete instance of `GlobalValidationPtrInput` via:
//
//	        GlobalValidationArgs{...}
//
//	or:
//
//	        nil
type GlobalValidationPtrInput interface {
	pulumi.Input

	ToGlobalValidationPtrOutput() GlobalValidationPtrOutput
	ToGlobalValidationPtrOutputWithContext(context.Context) GlobalValidationPtrOutput
}

type globalValidationPtrType GlobalValidationArgs

func GlobalValidationPtr(v *GlobalValidationArgs) GlobalValidationPtrInput {
	return (*globalValidationPtrType)(v)
}

func (*globalValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalValidation)(nil)).Elem()
}

func (i *globalValidationPtrType) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return i.ToGlobalValidationPtrOutputWithContext(context.Background())
}

func (i *globalValidationPtrType) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalValidationPtrOutput)
}

// The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
type GlobalValidationOutput struct{ *pulumi.OutputState }

func (GlobalValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalValidation)(nil)).Elem()
}

func (o GlobalValidationOutput) ToGlobalValidationOutput() GlobalValidationOutput {
	return o
}

func (o GlobalValidationOutput) ToGlobalValidationOutputWithContext(ctx context.Context) GlobalValidationOutput {
	return o
}

func (o GlobalValidationOutput) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return o.ToGlobalValidationPtrOutputWithContext(context.Background())
}

func (o GlobalValidationOutput) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalValidation) *GlobalValidation {
		return &v
	}).(GlobalValidationPtrOutput)
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalValidation) []string { return v.ExcludedPaths }).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalValidation) *string { return v.RedirectToProvider }).(pulumi.StringPtrOutput)
}

// <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
func (o GlobalValidationOutput) RequireAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlobalValidation) *bool { return v.RequireAuthentication }).(pulumi.BoolPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationOutput) UnauthenticatedClientAction() UnauthenticatedClientActionV2PtrOutput {
	return o.ApplyT(func(v GlobalValidation) *UnauthenticatedClientActionV2 { return v.UnauthenticatedClientAction }).(UnauthenticatedClientActionV2PtrOutput)
}

type GlobalValidationPtrOutput struct{ *pulumi.OutputState }

func (GlobalValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalValidation)(nil)).Elem()
}

func (o GlobalValidationPtrOutput) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return o
}

func (o GlobalValidationPtrOutput) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return o
}

func (o GlobalValidationPtrOutput) Elem() GlobalValidationOutput {
	return o.ApplyT(func(v *GlobalValidation) GlobalValidation {
		if v != nil {
			return *v
		}
		var ret GlobalValidation
		return ret
	}).(GlobalValidationOutput)
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationPtrOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlobalValidation) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPaths
	}).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationPtrOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalValidation) *string {
		if v == nil {
			return nil
		}
		return v.RedirectToProvider
	}).(pulumi.StringPtrOutput)
}

// <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
func (o GlobalValidationPtrOutput) RequireAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalValidation) *bool {
		if v == nil {
			return nil
		}
		return v.RequireAuthentication
	}).(pulumi.BoolPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationPtrOutput) UnauthenticatedClientAction() UnauthenticatedClientActionV2PtrOutput {
	return o.ApplyT(func(v *GlobalValidation) *UnauthenticatedClientActionV2 {
		if v == nil {
			return nil
		}
		return v.UnauthenticatedClientAction
	}).(UnauthenticatedClientActionV2PtrOutput)
}

// The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
type GlobalValidationResponse struct {
	// The paths for which unauthenticated flow would not be redirected to the login page.
	ExcludedPaths []string `pulumi:"excludedPaths"`
	// The default authentication provider to use when multiple providers are configured.
	// This setting is only needed if multiple providers are configured and the unauthenticated client
	// action is set to "RedirectToLoginPage".
	RedirectToProvider *string `pulumi:"redirectToProvider"`
	// <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
	RequireAuthentication *bool `pulumi:"requireAuthentication"`
	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction *string `pulumi:"unauthenticatedClientAction"`
}

// The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
type GlobalValidationResponseOutput struct{ *pulumi.OutputState }

func (GlobalValidationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalValidationResponse)(nil)).Elem()
}

func (o GlobalValidationResponseOutput) ToGlobalValidationResponseOutput() GlobalValidationResponseOutput {
	return o
}

func (o GlobalValidationResponseOutput) ToGlobalValidationResponseOutputWithContext(ctx context.Context) GlobalValidationResponseOutput {
	return o
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationResponseOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalValidationResponse) []string { return v.ExcludedPaths }).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationResponseOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalValidationResponse) *string { return v.RedirectToProvider }).(pulumi.StringPtrOutput)
}

// <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
func (o GlobalValidationResponseOutput) RequireAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GlobalValidationResponse) *bool { return v.RequireAuthentication }).(pulumi.BoolPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationResponseOutput) UnauthenticatedClientAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalValidationResponse) *string { return v.UnauthenticatedClientAction }).(pulumi.StringPtrOutput)
}

type GlobalValidationResponsePtrOutput struct{ *pulumi.OutputState }

func (GlobalValidationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalValidationResponse)(nil)).Elem()
}

func (o GlobalValidationResponsePtrOutput) ToGlobalValidationResponsePtrOutput() GlobalValidationResponsePtrOutput {
	return o
}

func (o GlobalValidationResponsePtrOutput) ToGlobalValidationResponsePtrOutputWithContext(ctx context.Context) GlobalValidationResponsePtrOutput {
	return o
}

func (o GlobalValidationResponsePtrOutput) Elem() GlobalValidationResponseOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) GlobalValidationResponse {
		if v != nil {
			return *v
		}
		var ret GlobalValidationResponse
		return ret
	}).(GlobalValidationResponseOutput)
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationResponsePtrOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPaths
	}).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationResponsePtrOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RedirectToProvider
	}).(pulumi.StringPtrOutput)
}

// <code>true</code> if the authentication flow is required any request is made; otherwise, <code>false</code>.
func (o GlobalValidationResponsePtrOutput) RequireAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireAuthentication
	}).(pulumi.BoolPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationResponsePtrOutput) UnauthenticatedClientAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) *string {
		if v == nil {
			return nil
		}
		return v.UnauthenticatedClientAction
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Google provider.
type Google struct {
	// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the app registration for the Google provider.
	Registration *ClientRegistration `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AllowedAudiencesValidation `pulumi:"validation"`
}

// GoogleInput is an input type that accepts GoogleArgs and GoogleOutput values.
// You can construct a concrete instance of `GoogleInput` via:
//
//	GoogleArgs{...}
type GoogleInput interface {
	pulumi.Input

	ToGoogleOutput() GoogleOutput
	ToGoogleOutputWithContext(context.Context) GoogleOutput
}

// The configuration settings of the Google provider.
type GoogleArgs struct {
	// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the Google provider.
	Registration ClientRegistrationPtrInput `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation AllowedAudiencesValidationPtrInput `pulumi:"validation"`
}

func (GoogleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Google)(nil)).Elem()
}

func (i GoogleArgs) ToGoogleOutput() GoogleOutput {
	return i.ToGoogleOutputWithContext(context.Background())
}

func (i GoogleArgs) ToGoogleOutputWithContext(ctx context.Context) GoogleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleOutput)
}

func (i GoogleArgs) ToGooglePtrOutput() GooglePtrOutput {
	return i.ToGooglePtrOutputWithContext(context.Background())
}

func (i GoogleArgs) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleOutput).ToGooglePtrOutputWithContext(ctx)
}

// GooglePtrInput is an input type that accepts GoogleArgs, GooglePtr and GooglePtrOutput values.
// You can construct a concrete instance of `GooglePtrInput` via:
//
//	        GoogleArgs{...}
//
//	or:
//
//	        nil
type GooglePtrInput interface {
	pulumi.Input

	ToGooglePtrOutput() GooglePtrOutput
	ToGooglePtrOutputWithContext(context.Context) GooglePtrOutput
}

type googlePtrType GoogleArgs

func GooglePtr(v *GoogleArgs) GooglePtrInput {
	return (*googlePtrType)(v)
}

func (*googlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Google)(nil)).Elem()
}

func (i *googlePtrType) ToGooglePtrOutput() GooglePtrOutput {
	return i.ToGooglePtrOutputWithContext(context.Background())
}

func (i *googlePtrType) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePtrOutput)
}

// The configuration settings of the Google provider.
type GoogleOutput struct{ *pulumi.OutputState }

func (GoogleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Google)(nil)).Elem()
}

func (o GoogleOutput) ToGoogleOutput() GoogleOutput {
	return o
}

func (o GoogleOutput) ToGoogleOutputWithContext(ctx context.Context) GoogleOutput {
	return o
}

func (o GoogleOutput) ToGooglePtrOutput() GooglePtrOutput {
	return o.ToGooglePtrOutputWithContext(context.Background())
}

func (o GoogleOutput) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Google) *Google {
		return &v
	}).(GooglePtrOutput)
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GoogleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Google) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GoogleOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v Google) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GoogleOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v Google) *ClientRegistration { return v.Registration }).(ClientRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GoogleOutput) Validation() AllowedAudiencesValidationPtrOutput {
	return o.ApplyT(func(v Google) *AllowedAudiencesValidation { return v.Validation }).(AllowedAudiencesValidationPtrOutput)
}

type GooglePtrOutput struct{ *pulumi.OutputState }

func (GooglePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Google)(nil)).Elem()
}

func (o GooglePtrOutput) ToGooglePtrOutput() GooglePtrOutput {
	return o
}

func (o GooglePtrOutput) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return o
}

func (o GooglePtrOutput) Elem() GoogleOutput {
	return o.ApplyT(func(v *Google) Google {
		if v != nil {
			return *v
		}
		var ret Google
		return ret
	}).(GoogleOutput)
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GooglePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Google) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GooglePtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *Google) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GooglePtrOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v *Google) *ClientRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GooglePtrOutput) Validation() AllowedAudiencesValidationPtrOutput {
	return o.ApplyT(func(v *Google) *AllowedAudiencesValidation {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AllowedAudiencesValidationPtrOutput)
}

// The configuration settings of the Google provider.
type GoogleResponse struct {
	// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the app registration for the Google provider.
	Registration *ClientRegistrationResponse `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AllowedAudiencesValidationResponse `pulumi:"validation"`
}

// The configuration settings of the Google provider.
type GoogleResponseOutput struct{ *pulumi.OutputState }

func (GoogleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleResponse)(nil)).Elem()
}

func (o GoogleResponseOutput) ToGoogleResponseOutput() GoogleResponseOutput {
	return o
}

func (o GoogleResponseOutput) ToGoogleResponseOutputWithContext(ctx context.Context) GoogleResponseOutput {
	return o
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GoogleResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GoogleResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v GoogleResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GoogleResponseOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v GoogleResponse) *ClientRegistrationResponse { return v.Registration }).(ClientRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GoogleResponseOutput) Validation() AllowedAudiencesValidationResponsePtrOutput {
	return o.ApplyT(func(v GoogleResponse) *AllowedAudiencesValidationResponse { return v.Validation }).(AllowedAudiencesValidationResponsePtrOutput)
}

type GoogleResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleResponse)(nil)).Elem()
}

func (o GoogleResponsePtrOutput) ToGoogleResponsePtrOutput() GoogleResponsePtrOutput {
	return o
}

func (o GoogleResponsePtrOutput) ToGoogleResponsePtrOutputWithContext(ctx context.Context) GoogleResponsePtrOutput {
	return o
}

func (o GoogleResponsePtrOutput) Elem() GoogleResponseOutput {
	return o.ApplyT(func(v *GoogleResponse) GoogleResponse {
		if v != nil {
			return *v
		}
		var ret GoogleResponse
		return ret
	}).(GoogleResponseOutput)
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GoogleResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GoogleResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GoogleResponsePtrOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *ClientRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GoogleResponsePtrOutput) Validation() AllowedAudiencesValidationResponsePtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *AllowedAudiencesValidationResponse {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AllowedAudiencesValidationResponsePtrOutput)
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
type HttpSettings struct {
	// The configuration settings of a forward proxy used to make the requests.
	ForwardProxy *ForwardProxy `pulumi:"forwardProxy"`
	// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
	RequireHttps *bool `pulumi:"requireHttps"`
	// The configuration settings of the paths HTTP requests.
	Routes *HttpSettingsRoutes `pulumi:"routes"`
}

// HttpSettingsInput is an input type that accepts HttpSettingsArgs and HttpSettingsOutput values.
// You can construct a concrete instance of `HttpSettingsInput` via:
//
//	HttpSettingsArgs{...}
type HttpSettingsInput interface {
	pulumi.Input

	ToHttpSettingsOutput() HttpSettingsOutput
	ToHttpSettingsOutputWithContext(context.Context) HttpSettingsOutput
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
type HttpSettingsArgs struct {
	// The configuration settings of a forward proxy used to make the requests.
	ForwardProxy ForwardProxyPtrInput `pulumi:"forwardProxy"`
	// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
	RequireHttps pulumi.BoolPtrInput `pulumi:"requireHttps"`
	// The configuration settings of the paths HTTP requests.
	Routes HttpSettingsRoutesPtrInput `pulumi:"routes"`
}

func (HttpSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettings)(nil)).Elem()
}

func (i HttpSettingsArgs) ToHttpSettingsOutput() HttpSettingsOutput {
	return i.ToHttpSettingsOutputWithContext(context.Background())
}

func (i HttpSettingsArgs) ToHttpSettingsOutputWithContext(ctx context.Context) HttpSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsOutput)
}

func (i HttpSettingsArgs) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return i.ToHttpSettingsPtrOutputWithContext(context.Background())
}

func (i HttpSettingsArgs) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsOutput).ToHttpSettingsPtrOutputWithContext(ctx)
}

// HttpSettingsPtrInput is an input type that accepts HttpSettingsArgs, HttpSettingsPtr and HttpSettingsPtrOutput values.
// You can construct a concrete instance of `HttpSettingsPtrInput` via:
//
//	        HttpSettingsArgs{...}
//
//	or:
//
//	        nil
type HttpSettingsPtrInput interface {
	pulumi.Input

	ToHttpSettingsPtrOutput() HttpSettingsPtrOutput
	ToHttpSettingsPtrOutputWithContext(context.Context) HttpSettingsPtrOutput
}

type httpSettingsPtrType HttpSettingsArgs

func HttpSettingsPtr(v *HttpSettingsArgs) HttpSettingsPtrInput {
	return (*httpSettingsPtrType)(v)
}

func (*httpSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettings)(nil)).Elem()
}

func (i *httpSettingsPtrType) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return i.ToHttpSettingsPtrOutputWithContext(context.Background())
}

func (i *httpSettingsPtrType) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsPtrOutput)
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
type HttpSettingsOutput struct{ *pulumi.OutputState }

func (HttpSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettings)(nil)).Elem()
}

func (o HttpSettingsOutput) ToHttpSettingsOutput() HttpSettingsOutput {
	return o
}

func (o HttpSettingsOutput) ToHttpSettingsOutputWithContext(ctx context.Context) HttpSettingsOutput {
	return o
}

func (o HttpSettingsOutput) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return o.ToHttpSettingsPtrOutputWithContext(context.Background())
}

func (o HttpSettingsOutput) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpSettings) *HttpSettings {
		return &v
	}).(HttpSettingsPtrOutput)
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsOutput) ForwardProxy() ForwardProxyPtrOutput {
	return o.ApplyT(func(v HttpSettings) *ForwardProxy { return v.ForwardProxy }).(ForwardProxyPtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpSettings) *bool { return v.RequireHttps }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsOutput) Routes() HttpSettingsRoutesPtrOutput {
	return o.ApplyT(func(v HttpSettings) *HttpSettingsRoutes { return v.Routes }).(HttpSettingsRoutesPtrOutput)
}

type HttpSettingsPtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettings)(nil)).Elem()
}

func (o HttpSettingsPtrOutput) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return o
}

func (o HttpSettingsPtrOutput) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return o
}

func (o HttpSettingsPtrOutput) Elem() HttpSettingsOutput {
	return o.ApplyT(func(v *HttpSettings) HttpSettings {
		if v != nil {
			return *v
		}
		var ret HttpSettings
		return ret
	}).(HttpSettingsOutput)
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsPtrOutput) ForwardProxy() ForwardProxyPtrOutput {
	return o.ApplyT(func(v *HttpSettings) *ForwardProxy {
		if v == nil {
			return nil
		}
		return v.ForwardProxy
	}).(ForwardProxyPtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsPtrOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RequireHttps
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsPtrOutput) Routes() HttpSettingsRoutesPtrOutput {
	return o.ApplyT(func(v *HttpSettings) *HttpSettingsRoutes {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(HttpSettingsRoutesPtrOutput)
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
type HttpSettingsResponse struct {
	// The configuration settings of a forward proxy used to make the requests.
	ForwardProxy *ForwardProxyResponse `pulumi:"forwardProxy"`
	// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
	RequireHttps *bool `pulumi:"requireHttps"`
	// The configuration settings of the paths HTTP requests.
	Routes *HttpSettingsRoutesResponse `pulumi:"routes"`
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
type HttpSettingsResponseOutput struct{ *pulumi.OutputState }

func (HttpSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsResponse)(nil)).Elem()
}

func (o HttpSettingsResponseOutput) ToHttpSettingsResponseOutput() HttpSettingsResponseOutput {
	return o
}

func (o HttpSettingsResponseOutput) ToHttpSettingsResponseOutputWithContext(ctx context.Context) HttpSettingsResponseOutput {
	return o
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsResponseOutput) ForwardProxy() ForwardProxyResponsePtrOutput {
	return o.ApplyT(func(v HttpSettingsResponse) *ForwardProxyResponse { return v.ForwardProxy }).(ForwardProxyResponsePtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsResponseOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpSettingsResponse) *bool { return v.RequireHttps }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsResponseOutput) Routes() HttpSettingsRoutesResponsePtrOutput {
	return o.ApplyT(func(v HttpSettingsResponse) *HttpSettingsRoutesResponse { return v.Routes }).(HttpSettingsRoutesResponsePtrOutput)
}

type HttpSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsResponse)(nil)).Elem()
}

func (o HttpSettingsResponsePtrOutput) ToHttpSettingsResponsePtrOutput() HttpSettingsResponsePtrOutput {
	return o
}

func (o HttpSettingsResponsePtrOutput) ToHttpSettingsResponsePtrOutputWithContext(ctx context.Context) HttpSettingsResponsePtrOutput {
	return o
}

func (o HttpSettingsResponsePtrOutput) Elem() HttpSettingsResponseOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) HttpSettingsResponse {
		if v != nil {
			return *v
		}
		var ret HttpSettingsResponse
		return ret
	}).(HttpSettingsResponseOutput)
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsResponsePtrOutput) ForwardProxy() ForwardProxyResponsePtrOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) *ForwardProxyResponse {
		if v == nil {
			return nil
		}
		return v.ForwardProxy
	}).(ForwardProxyResponsePtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsResponsePtrOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireHttps
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsResponsePtrOutput) Routes() HttpSettingsRoutesResponsePtrOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) *HttpSettingsRoutesResponse {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(HttpSettingsRoutesResponsePtrOutput)
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutes struct {
	// The prefix that should precede all the authentication/authorization paths.
	ApiPrefix *string `pulumi:"apiPrefix"`
}

// HttpSettingsRoutesInput is an input type that accepts HttpSettingsRoutesArgs and HttpSettingsRoutesOutput values.
// You can construct a concrete instance of `HttpSettingsRoutesInput` via:
//
//	HttpSettingsRoutesArgs{...}
type HttpSettingsRoutesInput interface {
	pulumi.Input

	ToHttpSettingsRoutesOutput() HttpSettingsRoutesOutput
	ToHttpSettingsRoutesOutputWithContext(context.Context) HttpSettingsRoutesOutput
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesArgs struct {
	// The prefix that should precede all the authentication/authorization paths.
	ApiPrefix pulumi.StringPtrInput `pulumi:"apiPrefix"`
}

func (HttpSettingsRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsRoutes)(nil)).Elem()
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesOutput() HttpSettingsRoutesOutput {
	return i.ToHttpSettingsRoutesOutputWithContext(context.Background())
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesOutputWithContext(ctx context.Context) HttpSettingsRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsRoutesOutput)
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return i.ToHttpSettingsRoutesPtrOutputWithContext(context.Background())
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsRoutesOutput).ToHttpSettingsRoutesPtrOutputWithContext(ctx)
}

// HttpSettingsRoutesPtrInput is an input type that accepts HttpSettingsRoutesArgs, HttpSettingsRoutesPtr and HttpSettingsRoutesPtrOutput values.
// You can construct a concrete instance of `HttpSettingsRoutesPtrInput` via:
//
//	        HttpSettingsRoutesArgs{...}
//
//	or:
//
//	        nil
type HttpSettingsRoutesPtrInput interface {
	pulumi.Input

	ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput
	ToHttpSettingsRoutesPtrOutputWithContext(context.Context) HttpSettingsRoutesPtrOutput
}

type httpSettingsRoutesPtrType HttpSettingsRoutesArgs

func HttpSettingsRoutesPtr(v *HttpSettingsRoutesArgs) HttpSettingsRoutesPtrInput {
	return (*httpSettingsRoutesPtrType)(v)
}

func (*httpSettingsRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsRoutes)(nil)).Elem()
}

func (i *httpSettingsRoutesPtrType) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return i.ToHttpSettingsRoutesPtrOutputWithContext(context.Background())
}

func (i *httpSettingsRoutesPtrType) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsRoutesPtrOutput)
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsRoutes)(nil)).Elem()
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesOutput() HttpSettingsRoutesOutput {
	return o
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesOutputWithContext(ctx context.Context) HttpSettingsRoutesOutput {
	return o
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return o.ToHttpSettingsRoutesPtrOutputWithContext(context.Background())
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpSettingsRoutes) *HttpSettingsRoutes {
		return &v
	}).(HttpSettingsRoutesPtrOutput)
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpSettingsRoutes) *string { return v.ApiPrefix }).(pulumi.StringPtrOutput)
}

type HttpSettingsRoutesPtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsRoutes)(nil)).Elem()
}

func (o HttpSettingsRoutesPtrOutput) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return o
}

func (o HttpSettingsRoutesPtrOutput) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return o
}

func (o HttpSettingsRoutesPtrOutput) Elem() HttpSettingsRoutesOutput {
	return o.ApplyT(func(v *HttpSettingsRoutes) HttpSettingsRoutes {
		if v != nil {
			return *v
		}
		var ret HttpSettingsRoutes
		return ret
	}).(HttpSettingsRoutesOutput)
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesPtrOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpSettingsRoutes) *string {
		if v == nil {
			return nil
		}
		return v.ApiPrefix
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesResponse struct {
	// The prefix that should precede all the authentication/authorization paths.
	ApiPrefix *string `pulumi:"apiPrefix"`
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesResponseOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsRoutesResponse)(nil)).Elem()
}

func (o HttpSettingsRoutesResponseOutput) ToHttpSettingsRoutesResponseOutput() HttpSettingsRoutesResponseOutput {
	return o
}

func (o HttpSettingsRoutesResponseOutput) ToHttpSettingsRoutesResponseOutputWithContext(ctx context.Context) HttpSettingsRoutesResponseOutput {
	return o
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesResponseOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpSettingsRoutesResponse) *string { return v.ApiPrefix }).(pulumi.StringPtrOutput)
}

type HttpSettingsRoutesResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsRoutesResponse)(nil)).Elem()
}

func (o HttpSettingsRoutesResponsePtrOutput) ToHttpSettingsRoutesResponsePtrOutput() HttpSettingsRoutesResponsePtrOutput {
	return o
}

func (o HttpSettingsRoutesResponsePtrOutput) ToHttpSettingsRoutesResponsePtrOutputWithContext(ctx context.Context) HttpSettingsRoutesResponsePtrOutput {
	return o
}

func (o HttpSettingsRoutesResponsePtrOutput) Elem() HttpSettingsRoutesResponseOutput {
	return o.ApplyT(func(v *HttpSettingsRoutesResponse) HttpSettingsRoutesResponse {
		if v != nil {
			return *v
		}
		var ret HttpSettingsRoutesResponse
		return ret
	}).(HttpSettingsRoutesResponseOutput)
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesResponsePtrOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpSettingsRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiPrefix
	}).(pulumi.StringPtrOutput)
}

// A domain specific resource identifier.
type IdentifierResponse struct {
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// Resource type.
	Type string `pulumi:"type"`
	// String representation of the identity.
	Value *string `pulumi:"value"`
}

// A domain specific resource identifier.
type IdentifierResponseOutput struct{ *pulumi.OutputState }

func (IdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentifierResponse)(nil)).Elem()
}

func (o IdentifierResponseOutput) ToIdentifierResponseOutput() IdentifierResponseOutput {
	return o
}

func (o IdentifierResponseOutput) ToIdentifierResponseOutputWithContext(ctx context.Context) IdentifierResponseOutput {
	return o
}

// Resource Id.
func (o IdentifierResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o IdentifierResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentifierResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o IdentifierResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Resource type.
func (o IdentifierResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IdentifierResponse) string { return v.Type }).(pulumi.StringOutput)
}

// String representation of the identity.
func (o IdentifierResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentifierResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IdentifierResponseArrayOutput struct{ *pulumi.OutputState }

func (IdentifierResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentifierResponse)(nil)).Elem()
}

func (o IdentifierResponseArrayOutput) ToIdentifierResponseArrayOutput() IdentifierResponseArrayOutput {
	return o
}

func (o IdentifierResponseArrayOutput) ToIdentifierResponseArrayOutputWithContext(ctx context.Context) IdentifierResponseArrayOutput {
	return o
}

func (o IdentifierResponseArrayOutput) Index(i pulumi.IntInput) IdentifierResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentifierResponse {
		return vs[0].([]IdentifierResponse)[vs[1].(int)]
	}).(IdentifierResponseOutput)
}

// The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
type IdentityProviders struct {
	// The configuration settings of the Apple provider.
	Apple *Apple `pulumi:"apple"`
	// The configuration settings of the Azure Active directory provider.
	AzureActiveDirectory *AzureActiveDirectory `pulumi:"azureActiveDirectory"`
	// The configuration settings of the Azure Static Web Apps provider.
	AzureStaticWebApps *AzureStaticWebApps `pulumi:"azureStaticWebApps"`
	// The map of the name of the alias of each custom Open ID Connect provider to the
	// configuration settings of the custom Open ID Connect provider.
	CustomOpenIdConnectProviders map[string]CustomOpenIdConnectProvider `pulumi:"customOpenIdConnectProviders"`
	// The configuration settings of the Facebook provider.
	Facebook *Facebook `pulumi:"facebook"`
	// The configuration settings of the GitHub provider.
	GitHub *GitHub `pulumi:"gitHub"`
	// The configuration settings of the Google provider.
	Google *Google `pulumi:"google"`
	// The configuration settings of the legacy Microsoft Account provider.
	LegacyMicrosoftAccount *LegacyMicrosoftAccount `pulumi:"legacyMicrosoftAccount"`
	// The configuration settings of the Twitter provider.
	Twitter *Twitter `pulumi:"twitter"`
}

// IdentityProvidersInput is an input type that accepts IdentityProvidersArgs and IdentityProvidersOutput values.
// You can construct a concrete instance of `IdentityProvidersInput` via:
//
//	IdentityProvidersArgs{...}
type IdentityProvidersInput interface {
	pulumi.Input

	ToIdentityProvidersOutput() IdentityProvidersOutput
	ToIdentityProvidersOutputWithContext(context.Context) IdentityProvidersOutput
}

// The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
type IdentityProvidersArgs struct {
	// The configuration settings of the Apple provider.
	Apple ApplePtrInput `pulumi:"apple"`
	// The configuration settings of the Azure Active directory provider.
	AzureActiveDirectory AzureActiveDirectoryPtrInput `pulumi:"azureActiveDirectory"`
	// The configuration settings of the Azure Static Web Apps provider.
	AzureStaticWebApps AzureStaticWebAppsPtrInput `pulumi:"azureStaticWebApps"`
	// The map of the name of the alias of each custom Open ID Connect provider to the
	// configuration settings of the custom Open ID Connect provider.
	CustomOpenIdConnectProviders CustomOpenIdConnectProviderMapInput `pulumi:"customOpenIdConnectProviders"`
	// The configuration settings of the Facebook provider.
	Facebook FacebookPtrInput `pulumi:"facebook"`
	// The configuration settings of the GitHub provider.
	GitHub GitHubPtrInput `pulumi:"gitHub"`
	// The configuration settings of the Google provider.
	Google GooglePtrInput `pulumi:"google"`
	// The configuration settings of the legacy Microsoft Account provider.
	LegacyMicrosoftAccount LegacyMicrosoftAccountPtrInput `pulumi:"legacyMicrosoftAccount"`
	// The configuration settings of the Twitter provider.
	Twitter TwitterPtrInput `pulumi:"twitter"`
}

func (IdentityProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviders)(nil)).Elem()
}

func (i IdentityProvidersArgs) ToIdentityProvidersOutput() IdentityProvidersOutput {
	return i.ToIdentityProvidersOutputWithContext(context.Background())
}

func (i IdentityProvidersArgs) ToIdentityProvidersOutputWithContext(ctx context.Context) IdentityProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProvidersOutput)
}

func (i IdentityProvidersArgs) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return i.ToIdentityProvidersPtrOutputWithContext(context.Background())
}

func (i IdentityProvidersArgs) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProvidersOutput).ToIdentityProvidersPtrOutputWithContext(ctx)
}

// IdentityProvidersPtrInput is an input type that accepts IdentityProvidersArgs, IdentityProvidersPtr and IdentityProvidersPtrOutput values.
// You can construct a concrete instance of `IdentityProvidersPtrInput` via:
//
//	        IdentityProvidersArgs{...}
//
//	or:
//
//	        nil
type IdentityProvidersPtrInput interface {
	pulumi.Input

	ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput
	ToIdentityProvidersPtrOutputWithContext(context.Context) IdentityProvidersPtrOutput
}

type identityProvidersPtrType IdentityProvidersArgs

func IdentityProvidersPtr(v *IdentityProvidersArgs) IdentityProvidersPtrInput {
	return (*identityProvidersPtrType)(v)
}

func (*identityProvidersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviders)(nil)).Elem()
}

func (i *identityProvidersPtrType) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return i.ToIdentityProvidersPtrOutputWithContext(context.Background())
}

func (i *identityProvidersPtrType) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProvidersPtrOutput)
}

// The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
type IdentityProvidersOutput struct{ *pulumi.OutputState }

func (IdentityProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviders)(nil)).Elem()
}

func (o IdentityProvidersOutput) ToIdentityProvidersOutput() IdentityProvidersOutput {
	return o
}

func (o IdentityProvidersOutput) ToIdentityProvidersOutputWithContext(ctx context.Context) IdentityProvidersOutput {
	return o
}

func (o IdentityProvidersOutput) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return o.ToIdentityProvidersPtrOutputWithContext(context.Background())
}

func (o IdentityProvidersOutput) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProviders) *IdentityProviders {
		return &v
	}).(IdentityProvidersPtrOutput)
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersOutput) Apple() ApplePtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Apple { return v.Apple }).(ApplePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersOutput) AzureActiveDirectory() AzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *AzureActiveDirectory { return v.AzureActiveDirectory }).(AzureActiveDirectoryPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersOutput) AzureStaticWebApps() AzureStaticWebAppsPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *AzureStaticWebApps { return v.AzureStaticWebApps }).(AzureStaticWebAppsPtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderMapOutput {
	return o.ApplyT(func(v IdentityProviders) map[string]CustomOpenIdConnectProvider {
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersOutput) Facebook() FacebookPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Facebook { return v.Facebook }).(FacebookPtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersOutput) GitHub() GitHubPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *GitHub { return v.GitHub }).(GitHubPtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersOutput) Google() GooglePtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Google { return v.Google }).(GooglePtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider.
func (o IdentityProvidersOutput) LegacyMicrosoftAccount() LegacyMicrosoftAccountPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *LegacyMicrosoftAccount { return v.LegacyMicrosoftAccount }).(LegacyMicrosoftAccountPtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersOutput) Twitter() TwitterPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Twitter { return v.Twitter }).(TwitterPtrOutput)
}

type IdentityProvidersPtrOutput struct{ *pulumi.OutputState }

func (IdentityProvidersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviders)(nil)).Elem()
}

func (o IdentityProvidersPtrOutput) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return o
}

func (o IdentityProvidersPtrOutput) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return o
}

func (o IdentityProvidersPtrOutput) Elem() IdentityProvidersOutput {
	return o.ApplyT(func(v *IdentityProviders) IdentityProviders {
		if v != nil {
			return *v
		}
		var ret IdentityProviders
		return ret
	}).(IdentityProvidersOutput)
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersPtrOutput) Apple() ApplePtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Apple {
		if v == nil {
			return nil
		}
		return v.Apple
	}).(ApplePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersPtrOutput) AzureActiveDirectory() AzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *AzureActiveDirectory {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectory
	}).(AzureActiveDirectoryPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersPtrOutput) AzureStaticWebApps() AzureStaticWebAppsPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *AzureStaticWebApps {
		if v == nil {
			return nil
		}
		return v.AzureStaticWebApps
	}).(AzureStaticWebAppsPtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersPtrOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderMapOutput {
	return o.ApplyT(func(v *IdentityProviders) map[string]CustomOpenIdConnectProvider {
		if v == nil {
			return nil
		}
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersPtrOutput) Facebook() FacebookPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Facebook {
		if v == nil {
			return nil
		}
		return v.Facebook
	}).(FacebookPtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersPtrOutput) GitHub() GitHubPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *GitHub {
		if v == nil {
			return nil
		}
		return v.GitHub
	}).(GitHubPtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersPtrOutput) Google() GooglePtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Google {
		if v == nil {
			return nil
		}
		return v.Google
	}).(GooglePtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider.
func (o IdentityProvidersPtrOutput) LegacyMicrosoftAccount() LegacyMicrosoftAccountPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *LegacyMicrosoftAccount {
		if v == nil {
			return nil
		}
		return v.LegacyMicrosoftAccount
	}).(LegacyMicrosoftAccountPtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersPtrOutput) Twitter() TwitterPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Twitter {
		if v == nil {
			return nil
		}
		return v.Twitter
	}).(TwitterPtrOutput)
}

// The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
type IdentityProvidersResponse struct {
	// The configuration settings of the Apple provider.
	Apple *AppleResponse `pulumi:"apple"`
	// The configuration settings of the Azure Active directory provider.
	AzureActiveDirectory *AzureActiveDirectoryResponse `pulumi:"azureActiveDirectory"`
	// The configuration settings of the Azure Static Web Apps provider.
	AzureStaticWebApps *AzureStaticWebAppsResponse `pulumi:"azureStaticWebApps"`
	// The map of the name of the alias of each custom Open ID Connect provider to the
	// configuration settings of the custom Open ID Connect provider.
	CustomOpenIdConnectProviders map[string]CustomOpenIdConnectProviderResponse `pulumi:"customOpenIdConnectProviders"`
	// The configuration settings of the Facebook provider.
	Facebook *FacebookResponse `pulumi:"facebook"`
	// The configuration settings of the GitHub provider.
	GitHub *GitHubResponse `pulumi:"gitHub"`
	// The configuration settings of the Google provider.
	Google *GoogleResponse `pulumi:"google"`
	// The configuration settings of the legacy Microsoft Account provider.
	LegacyMicrosoftAccount *LegacyMicrosoftAccountResponse `pulumi:"legacyMicrosoftAccount"`
	// The configuration settings of the Twitter provider.
	Twitter *TwitterResponse `pulumi:"twitter"`
}

// The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
type IdentityProvidersResponseOutput struct{ *pulumi.OutputState }

func (IdentityProvidersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProvidersResponse)(nil)).Elem()
}

func (o IdentityProvidersResponseOutput) ToIdentityProvidersResponseOutput() IdentityProvidersResponseOutput {
	return o
}

func (o IdentityProvidersResponseOutput) ToIdentityProvidersResponseOutputWithContext(ctx context.Context) IdentityProvidersResponseOutput {
	return o
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersResponseOutput) Apple() AppleResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *AppleResponse { return v.Apple }).(AppleResponsePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersResponseOutput) AzureActiveDirectory() AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *AzureActiveDirectoryResponse { return v.AzureActiveDirectory }).(AzureActiveDirectoryResponsePtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersResponseOutput) AzureStaticWebApps() AzureStaticWebAppsResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *AzureStaticWebAppsResponse { return v.AzureStaticWebApps }).(AzureStaticWebAppsResponsePtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersResponseOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderResponseMapOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) map[string]CustomOpenIdConnectProviderResponse {
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderResponseMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersResponseOutput) Facebook() FacebookResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *FacebookResponse { return v.Facebook }).(FacebookResponsePtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersResponseOutput) GitHub() GitHubResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *GitHubResponse { return v.GitHub }).(GitHubResponsePtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersResponseOutput) Google() GoogleResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *GoogleResponse { return v.Google }).(GoogleResponsePtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider.
func (o IdentityProvidersResponseOutput) LegacyMicrosoftAccount() LegacyMicrosoftAccountResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *LegacyMicrosoftAccountResponse { return v.LegacyMicrosoftAccount }).(LegacyMicrosoftAccountResponsePtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersResponseOutput) Twitter() TwitterResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *TwitterResponse { return v.Twitter }).(TwitterResponsePtrOutput)
}

type IdentityProvidersResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityProvidersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProvidersResponse)(nil)).Elem()
}

func (o IdentityProvidersResponsePtrOutput) ToIdentityProvidersResponsePtrOutput() IdentityProvidersResponsePtrOutput {
	return o
}

func (o IdentityProvidersResponsePtrOutput) ToIdentityProvidersResponsePtrOutputWithContext(ctx context.Context) IdentityProvidersResponsePtrOutput {
	return o
}

func (o IdentityProvidersResponsePtrOutput) Elem() IdentityProvidersResponseOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) IdentityProvidersResponse {
		if v != nil {
			return *v
		}
		var ret IdentityProvidersResponse
		return ret
	}).(IdentityProvidersResponseOutput)
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersResponsePtrOutput) Apple() AppleResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *AppleResponse {
		if v == nil {
			return nil
		}
		return v.Apple
	}).(AppleResponsePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersResponsePtrOutput) AzureActiveDirectory() AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *AzureActiveDirectoryResponse {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectory
	}).(AzureActiveDirectoryResponsePtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersResponsePtrOutput) AzureStaticWebApps() AzureStaticWebAppsResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *AzureStaticWebAppsResponse {
		if v == nil {
			return nil
		}
		return v.AzureStaticWebApps
	}).(AzureStaticWebAppsResponsePtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersResponsePtrOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderResponseMapOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) map[string]CustomOpenIdConnectProviderResponse {
		if v == nil {
			return nil
		}
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderResponseMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersResponsePtrOutput) Facebook() FacebookResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *FacebookResponse {
		if v == nil {
			return nil
		}
		return v.Facebook
	}).(FacebookResponsePtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersResponsePtrOutput) GitHub() GitHubResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *GitHubResponse {
		if v == nil {
			return nil
		}
		return v.GitHub
	}).(GitHubResponsePtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersResponsePtrOutput) Google() GoogleResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *GoogleResponse {
		if v == nil {
			return nil
		}
		return v.Google
	}).(GoogleResponsePtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider.
func (o IdentityProvidersResponsePtrOutput) LegacyMicrosoftAccount() LegacyMicrosoftAccountResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *LegacyMicrosoftAccountResponse {
		if v == nil {
			return nil
		}
		return v.LegacyMicrosoftAccount
	}).(LegacyMicrosoftAccountResponsePtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersResponsePtrOutput) Twitter() TwitterResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *TwitterResponse {
		if v == nil {
			return nil
		}
		return v.Twitter
	}).(TwitterResponsePtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecks struct {
	// The list of the allowed client applications.
	AllowedClientApplications []string `pulumi:"allowedClientApplications"`
	// The list of the allowed groups.
	AllowedGroups []string `pulumi:"allowedGroups"`
}

// JwtClaimChecksInput is an input type that accepts JwtClaimChecksArgs and JwtClaimChecksOutput values.
// You can construct a concrete instance of `JwtClaimChecksInput` via:
//
//	JwtClaimChecksArgs{...}
type JwtClaimChecksInput interface {
	pulumi.Input

	ToJwtClaimChecksOutput() JwtClaimChecksOutput
	ToJwtClaimChecksOutputWithContext(context.Context) JwtClaimChecksOutput
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksArgs struct {
	// The list of the allowed client applications.
	AllowedClientApplications pulumi.StringArrayInput `pulumi:"allowedClientApplications"`
	// The list of the allowed groups.
	AllowedGroups pulumi.StringArrayInput `pulumi:"allowedGroups"`
}

func (JwtClaimChecksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimChecks)(nil)).Elem()
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksOutput() JwtClaimChecksOutput {
	return i.ToJwtClaimChecksOutputWithContext(context.Background())
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksOutputWithContext(ctx context.Context) JwtClaimChecksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimChecksOutput)
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return i.ToJwtClaimChecksPtrOutputWithContext(context.Background())
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimChecksOutput).ToJwtClaimChecksPtrOutputWithContext(ctx)
}

// JwtClaimChecksPtrInput is an input type that accepts JwtClaimChecksArgs, JwtClaimChecksPtr and JwtClaimChecksPtrOutput values.
// You can construct a concrete instance of `JwtClaimChecksPtrInput` via:
//
//	        JwtClaimChecksArgs{...}
//
//	or:
//
//	        nil
type JwtClaimChecksPtrInput interface {
	pulumi.Input

	ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput
	ToJwtClaimChecksPtrOutputWithContext(context.Context) JwtClaimChecksPtrOutput
}

type jwtClaimChecksPtrType JwtClaimChecksArgs

func JwtClaimChecksPtr(v *JwtClaimChecksArgs) JwtClaimChecksPtrInput {
	return (*jwtClaimChecksPtrType)(v)
}

func (*jwtClaimChecksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaimChecks)(nil)).Elem()
}

func (i *jwtClaimChecksPtrType) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return i.ToJwtClaimChecksPtrOutputWithContext(context.Background())
}

func (i *jwtClaimChecksPtrType) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimChecksPtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimChecks)(nil)).Elem()
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksOutput() JwtClaimChecksOutput {
	return o
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksOutputWithContext(ctx context.Context) JwtClaimChecksOutput {
	return o
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return o.ToJwtClaimChecksPtrOutputWithContext(context.Background())
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JwtClaimChecks) *JwtClaimChecks {
		return &v
	}).(JwtClaimChecksPtrOutput)
}

// The list of the allowed client applications.
func (o JwtClaimChecksOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecks) []string { return v.AllowedClientApplications }).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecks) []string { return v.AllowedGroups }).(pulumi.StringArrayOutput)
}

type JwtClaimChecksPtrOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaimChecks)(nil)).Elem()
}

func (o JwtClaimChecksPtrOutput) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return o
}

func (o JwtClaimChecksPtrOutput) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return o
}

func (o JwtClaimChecksPtrOutput) Elem() JwtClaimChecksOutput {
	return o.ApplyT(func(v *JwtClaimChecks) JwtClaimChecks {
		if v != nil {
			return *v
		}
		var ret JwtClaimChecks
		return ret
	}).(JwtClaimChecksOutput)
}

// The list of the allowed client applications.
func (o JwtClaimChecksPtrOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecks) []string {
		if v == nil {
			return nil
		}
		return v.AllowedClientApplications
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksPtrOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecks) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGroups
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksResponse struct {
	// The list of the allowed client applications.
	AllowedClientApplications []string `pulumi:"allowedClientApplications"`
	// The list of the allowed groups.
	AllowedGroups []string `pulumi:"allowedGroups"`
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksResponseOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimChecksResponse)(nil)).Elem()
}

func (o JwtClaimChecksResponseOutput) ToJwtClaimChecksResponseOutput() JwtClaimChecksResponseOutput {
	return o
}

func (o JwtClaimChecksResponseOutput) ToJwtClaimChecksResponseOutputWithContext(ctx context.Context) JwtClaimChecksResponseOutput {
	return o
}

// The list of the allowed client applications.
func (o JwtClaimChecksResponseOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecksResponse) []string { return v.AllowedClientApplications }).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksResponseOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecksResponse) []string { return v.AllowedGroups }).(pulumi.StringArrayOutput)
}

type JwtClaimChecksResponsePtrOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaimChecksResponse)(nil)).Elem()
}

func (o JwtClaimChecksResponsePtrOutput) ToJwtClaimChecksResponsePtrOutput() JwtClaimChecksResponsePtrOutput {
	return o
}

func (o JwtClaimChecksResponsePtrOutput) ToJwtClaimChecksResponsePtrOutputWithContext(ctx context.Context) JwtClaimChecksResponsePtrOutput {
	return o
}

func (o JwtClaimChecksResponsePtrOutput) Elem() JwtClaimChecksResponseOutput {
	return o.ApplyT(func(v *JwtClaimChecksResponse) JwtClaimChecksResponse {
		if v != nil {
			return *v
		}
		var ret JwtClaimChecksResponse
		return ret
	}).(JwtClaimChecksResponseOutput)
}

// The list of the allowed client applications.
func (o JwtClaimChecksResponsePtrOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecksResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedClientApplications
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksResponsePtrOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecksResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGroups
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the legacy Microsoft Account provider.
type LegacyMicrosoftAccount struct {
	// <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the app registration for the legacy Microsoft Account provider.
	Registration *ClientRegistration `pulumi:"registration"`
	// The configuration settings of the legacy Microsoft Account provider token validation flow.
	Validation *AllowedAudiencesValidation `pulumi:"validation"`
}

// LegacyMicrosoftAccountInput is an input type that accepts LegacyMicrosoftAccountArgs and LegacyMicrosoftAccountOutput values.
// You can construct a concrete instance of `LegacyMicrosoftAccountInput` via:
//
//	LegacyMicrosoftAccountArgs{...}
type LegacyMicrosoftAccountInput interface {
	pulumi.Input

	ToLegacyMicrosoftAccountOutput() LegacyMicrosoftAccountOutput
	ToLegacyMicrosoftAccountOutputWithContext(context.Context) LegacyMicrosoftAccountOutput
}

// The configuration settings of the legacy Microsoft Account provider.
type LegacyMicrosoftAccountArgs struct {
	// <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the legacy Microsoft Account provider.
	Registration ClientRegistrationPtrInput `pulumi:"registration"`
	// The configuration settings of the legacy Microsoft Account provider token validation flow.
	Validation AllowedAudiencesValidationPtrInput `pulumi:"validation"`
}

func (LegacyMicrosoftAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyMicrosoftAccount)(nil)).Elem()
}

func (i LegacyMicrosoftAccountArgs) ToLegacyMicrosoftAccountOutput() LegacyMicrosoftAccountOutput {
	return i.ToLegacyMicrosoftAccountOutputWithContext(context.Background())
}

func (i LegacyMicrosoftAccountArgs) ToLegacyMicrosoftAccountOutputWithContext(ctx context.Context) LegacyMicrosoftAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyMicrosoftAccountOutput)
}

func (i LegacyMicrosoftAccountArgs) ToLegacyMicrosoftAccountPtrOutput() LegacyMicrosoftAccountPtrOutput {
	return i.ToLegacyMicrosoftAccountPtrOutputWithContext(context.Background())
}

func (i LegacyMicrosoftAccountArgs) ToLegacyMicrosoftAccountPtrOutputWithContext(ctx context.Context) LegacyMicrosoftAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyMicrosoftAccountOutput).ToLegacyMicrosoftAccountPtrOutputWithContext(ctx)
}

// LegacyMicrosoftAccountPtrInput is an input type that accepts LegacyMicrosoftAccountArgs, LegacyMicrosoftAccountPtr and LegacyMicrosoftAccountPtrOutput values.
// You can construct a concrete instance of `LegacyMicrosoftAccountPtrInput` via:
//
//	        LegacyMicrosoftAccountArgs{...}
//
//	or:
//
//	        nil
type LegacyMicrosoftAccountPtrInput interface {
	pulumi.Input

	ToLegacyMicrosoftAccountPtrOutput() LegacyMicrosoftAccountPtrOutput
	ToLegacyMicrosoftAccountPtrOutputWithContext(context.Context) LegacyMicrosoftAccountPtrOutput
}

type legacyMicrosoftAccountPtrType LegacyMicrosoftAccountArgs

func LegacyMicrosoftAccountPtr(v *LegacyMicrosoftAccountArgs) LegacyMicrosoftAccountPtrInput {
	return (*legacyMicrosoftAccountPtrType)(v)
}

func (*legacyMicrosoftAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyMicrosoftAccount)(nil)).Elem()
}

func (i *legacyMicrosoftAccountPtrType) ToLegacyMicrosoftAccountPtrOutput() LegacyMicrosoftAccountPtrOutput {
	return i.ToLegacyMicrosoftAccountPtrOutputWithContext(context.Background())
}

func (i *legacyMicrosoftAccountPtrType) ToLegacyMicrosoftAccountPtrOutputWithContext(ctx context.Context) LegacyMicrosoftAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyMicrosoftAccountPtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider.
type LegacyMicrosoftAccountOutput struct{ *pulumi.OutputState }

func (LegacyMicrosoftAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyMicrosoftAccount)(nil)).Elem()
}

func (o LegacyMicrosoftAccountOutput) ToLegacyMicrosoftAccountOutput() LegacyMicrosoftAccountOutput {
	return o
}

func (o LegacyMicrosoftAccountOutput) ToLegacyMicrosoftAccountOutputWithContext(ctx context.Context) LegacyMicrosoftAccountOutput {
	return o
}

func (o LegacyMicrosoftAccountOutput) ToLegacyMicrosoftAccountPtrOutput() LegacyMicrosoftAccountPtrOutput {
	return o.ToLegacyMicrosoftAccountPtrOutputWithContext(context.Background())
}

func (o LegacyMicrosoftAccountOutput) ToLegacyMicrosoftAccountPtrOutputWithContext(ctx context.Context) LegacyMicrosoftAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LegacyMicrosoftAccount) *LegacyMicrosoftAccount {
		return &v
	}).(LegacyMicrosoftAccountPtrOutput)
}

// <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o LegacyMicrosoftAccountOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccount) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o LegacyMicrosoftAccountOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccount) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the legacy Microsoft Account provider.
func (o LegacyMicrosoftAccountOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccount) *ClientRegistration { return v.Registration }).(ClientRegistrationPtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider token validation flow.
func (o LegacyMicrosoftAccountOutput) Validation() AllowedAudiencesValidationPtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccount) *AllowedAudiencesValidation { return v.Validation }).(AllowedAudiencesValidationPtrOutput)
}

type LegacyMicrosoftAccountPtrOutput struct{ *pulumi.OutputState }

func (LegacyMicrosoftAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyMicrosoftAccount)(nil)).Elem()
}

func (o LegacyMicrosoftAccountPtrOutput) ToLegacyMicrosoftAccountPtrOutput() LegacyMicrosoftAccountPtrOutput {
	return o
}

func (o LegacyMicrosoftAccountPtrOutput) ToLegacyMicrosoftAccountPtrOutputWithContext(ctx context.Context) LegacyMicrosoftAccountPtrOutput {
	return o
}

func (o LegacyMicrosoftAccountPtrOutput) Elem() LegacyMicrosoftAccountOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccount) LegacyMicrosoftAccount {
		if v != nil {
			return *v
		}
		var ret LegacyMicrosoftAccount
		return ret
	}).(LegacyMicrosoftAccountOutput)
}

// <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o LegacyMicrosoftAccountPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccount) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o LegacyMicrosoftAccountPtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccount) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the legacy Microsoft Account provider.
func (o LegacyMicrosoftAccountPtrOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccount) *ClientRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationPtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider token validation flow.
func (o LegacyMicrosoftAccountPtrOutput) Validation() AllowedAudiencesValidationPtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccount) *AllowedAudiencesValidation {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AllowedAudiencesValidationPtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider.
type LegacyMicrosoftAccountResponse struct {
	// <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the app registration for the legacy Microsoft Account provider.
	Registration *ClientRegistrationResponse `pulumi:"registration"`
	// The configuration settings of the legacy Microsoft Account provider token validation flow.
	Validation *AllowedAudiencesValidationResponse `pulumi:"validation"`
}

// The configuration settings of the legacy Microsoft Account provider.
type LegacyMicrosoftAccountResponseOutput struct{ *pulumi.OutputState }

func (LegacyMicrosoftAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyMicrosoftAccountResponse)(nil)).Elem()
}

func (o LegacyMicrosoftAccountResponseOutput) ToLegacyMicrosoftAccountResponseOutput() LegacyMicrosoftAccountResponseOutput {
	return o
}

func (o LegacyMicrosoftAccountResponseOutput) ToLegacyMicrosoftAccountResponseOutputWithContext(ctx context.Context) LegacyMicrosoftAccountResponseOutput {
	return o
}

// <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o LegacyMicrosoftAccountResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccountResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o LegacyMicrosoftAccountResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccountResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the legacy Microsoft Account provider.
func (o LegacyMicrosoftAccountResponseOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccountResponse) *ClientRegistrationResponse { return v.Registration }).(ClientRegistrationResponsePtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider token validation flow.
func (o LegacyMicrosoftAccountResponseOutput) Validation() AllowedAudiencesValidationResponsePtrOutput {
	return o.ApplyT(func(v LegacyMicrosoftAccountResponse) *AllowedAudiencesValidationResponse { return v.Validation }).(AllowedAudiencesValidationResponsePtrOutput)
}

type LegacyMicrosoftAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (LegacyMicrosoftAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyMicrosoftAccountResponse)(nil)).Elem()
}

func (o LegacyMicrosoftAccountResponsePtrOutput) ToLegacyMicrosoftAccountResponsePtrOutput() LegacyMicrosoftAccountResponsePtrOutput {
	return o
}

func (o LegacyMicrosoftAccountResponsePtrOutput) ToLegacyMicrosoftAccountResponsePtrOutputWithContext(ctx context.Context) LegacyMicrosoftAccountResponsePtrOutput {
	return o
}

func (o LegacyMicrosoftAccountResponsePtrOutput) Elem() LegacyMicrosoftAccountResponseOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccountResponse) LegacyMicrosoftAccountResponse {
		if v != nil {
			return *v
		}
		var ret LegacyMicrosoftAccountResponse
		return ret
	}).(LegacyMicrosoftAccountResponseOutput)
}

// <code>false</code> if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o LegacyMicrosoftAccountResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccountResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o LegacyMicrosoftAccountResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccountResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the legacy Microsoft Account provider.
func (o LegacyMicrosoftAccountResponsePtrOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccountResponse) *ClientRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationResponsePtrOutput)
}

// The configuration settings of the legacy Microsoft Account provider token validation flow.
func (o LegacyMicrosoftAccountResponsePtrOutput) Validation() AllowedAudiencesValidationResponsePtrOutput {
	return o.ApplyT(func(v *LegacyMicrosoftAccountResponse) *AllowedAudiencesValidationResponse {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AllowedAudiencesValidationResponsePtrOutput)
}

// The configuration settings of the login flow of users using App Service Authentication/Authorization.
type Login struct {
	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
	// This is an advanced setting typically only needed by Windows Store application backends.
	// Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls []string `pulumi:"allowedExternalRedirectUrls"`
	// The configuration settings of the session cookie's expiration.
	CookieExpiration *CookieExpiration `pulumi:"cookieExpiration"`
	// The configuration settings of the nonce used in the login flow.
	Nonce *Nonce `pulumi:"nonce"`
	// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
	PreserveUrlFragmentsForLogins *bool `pulumi:"preserveUrlFragmentsForLogins"`
	// The routes that specify the endpoints used for login and logout requests.
	Routes *LoginRoutes `pulumi:"routes"`
	// The configuration settings of the token store.
	TokenStore *TokenStore `pulumi:"tokenStore"`
}

// LoginInput is an input type that accepts LoginArgs and LoginOutput values.
// You can construct a concrete instance of `LoginInput` via:
//
//	LoginArgs{...}
type LoginInput interface {
	pulumi.Input

	ToLoginOutput() LoginOutput
	ToLoginOutputWithContext(context.Context) LoginOutput
}

// The configuration settings of the login flow of users using App Service Authentication/Authorization.
type LoginArgs struct {
	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
	// This is an advanced setting typically only needed by Windows Store application backends.
	// Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls pulumi.StringArrayInput `pulumi:"allowedExternalRedirectUrls"`
	// The configuration settings of the session cookie's expiration.
	CookieExpiration CookieExpirationPtrInput `pulumi:"cookieExpiration"`
	// The configuration settings of the nonce used in the login flow.
	Nonce NoncePtrInput `pulumi:"nonce"`
	// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
	PreserveUrlFragmentsForLogins pulumi.BoolPtrInput `pulumi:"preserveUrlFragmentsForLogins"`
	// The routes that specify the endpoints used for login and logout requests.
	Routes LoginRoutesPtrInput `pulumi:"routes"`
	// The configuration settings of the token store.
	TokenStore TokenStorePtrInput `pulumi:"tokenStore"`
}

func (LoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Login)(nil)).Elem()
}

func (i LoginArgs) ToLoginOutput() LoginOutput {
	return i.ToLoginOutputWithContext(context.Background())
}

func (i LoginArgs) ToLoginOutputWithContext(ctx context.Context) LoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginOutput)
}

func (i LoginArgs) ToLoginPtrOutput() LoginPtrOutput {
	return i.ToLoginPtrOutputWithContext(context.Background())
}

func (i LoginArgs) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginOutput).ToLoginPtrOutputWithContext(ctx)
}

// LoginPtrInput is an input type that accepts LoginArgs, LoginPtr and LoginPtrOutput values.
// You can construct a concrete instance of `LoginPtrInput` via:
//
//	        LoginArgs{...}
//
//	or:
//
//	        nil
type LoginPtrInput interface {
	pulumi.Input

	ToLoginPtrOutput() LoginPtrOutput
	ToLoginPtrOutputWithContext(context.Context) LoginPtrOutput
}

type loginPtrType LoginArgs

func LoginPtr(v *LoginArgs) LoginPtrInput {
	return (*loginPtrType)(v)
}

func (*loginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Login)(nil)).Elem()
}

func (i *loginPtrType) ToLoginPtrOutput() LoginPtrOutput {
	return i.ToLoginPtrOutputWithContext(context.Background())
}

func (i *loginPtrType) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginPtrOutput)
}

// The configuration settings of the login flow of users using App Service Authentication/Authorization.
type LoginOutput struct{ *pulumi.OutputState }

func (LoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Login)(nil)).Elem()
}

func (o LoginOutput) ToLoginOutput() LoginOutput {
	return o
}

func (o LoginOutput) ToLoginOutputWithContext(ctx context.Context) LoginOutput {
	return o
}

func (o LoginOutput) ToLoginPtrOutput() LoginPtrOutput {
	return o.ToLoginPtrOutputWithContext(context.Background())
}

func (o LoginOutput) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Login) *Login {
		return &v
	}).(LoginPtrOutput)
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Login) []string { return v.AllowedExternalRedirectUrls }).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginOutput) CookieExpiration() CookieExpirationPtrOutput {
	return o.ApplyT(func(v Login) *CookieExpiration { return v.CookieExpiration }).(CookieExpirationPtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginOutput) Nonce() NoncePtrOutput {
	return o.ApplyT(func(v Login) *Nonce { return v.Nonce }).(NoncePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Login) *bool { return v.PreserveUrlFragmentsForLogins }).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginOutput) Routes() LoginRoutesPtrOutput {
	return o.ApplyT(func(v Login) *LoginRoutes { return v.Routes }).(LoginRoutesPtrOutput)
}

// The configuration settings of the token store.
func (o LoginOutput) TokenStore() TokenStorePtrOutput {
	return o.ApplyT(func(v Login) *TokenStore { return v.TokenStore }).(TokenStorePtrOutput)
}

type LoginPtrOutput struct{ *pulumi.OutputState }

func (LoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Login)(nil)).Elem()
}

func (o LoginPtrOutput) ToLoginPtrOutput() LoginPtrOutput {
	return o
}

func (o LoginPtrOutput) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return o
}

func (o LoginPtrOutput) Elem() LoginOutput {
	return o.ApplyT(func(v *Login) Login {
		if v != nil {
			return *v
		}
		var ret Login
		return ret
	}).(LoginOutput)
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginPtrOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Login) []string {
		if v == nil {
			return nil
		}
		return v.AllowedExternalRedirectUrls
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginPtrOutput) CookieExpiration() CookieExpirationPtrOutput {
	return o.ApplyT(func(v *Login) *CookieExpiration {
		if v == nil {
			return nil
		}
		return v.CookieExpiration
	}).(CookieExpirationPtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginPtrOutput) Nonce() NoncePtrOutput {
	return o.ApplyT(func(v *Login) *Nonce {
		if v == nil {
			return nil
		}
		return v.Nonce
	}).(NoncePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginPtrOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Login) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveUrlFragmentsForLogins
	}).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginPtrOutput) Routes() LoginRoutesPtrOutput {
	return o.ApplyT(func(v *Login) *LoginRoutes {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(LoginRoutesPtrOutput)
}

// The configuration settings of the token store.
func (o LoginPtrOutput) TokenStore() TokenStorePtrOutput {
	return o.ApplyT(func(v *Login) *TokenStore {
		if v == nil {
			return nil
		}
		return v.TokenStore
	}).(TokenStorePtrOutput)
}

// The configuration settings of the login flow of users using App Service Authentication/Authorization.
type LoginResponse struct {
	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
	// This is an advanced setting typically only needed by Windows Store application backends.
	// Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls []string `pulumi:"allowedExternalRedirectUrls"`
	// The configuration settings of the session cookie's expiration.
	CookieExpiration *CookieExpirationResponse `pulumi:"cookieExpiration"`
	// The configuration settings of the nonce used in the login flow.
	Nonce *NonceResponse `pulumi:"nonce"`
	// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
	PreserveUrlFragmentsForLogins *bool `pulumi:"preserveUrlFragmentsForLogins"`
	// The routes that specify the endpoints used for login and logout requests.
	Routes *LoginRoutesResponse `pulumi:"routes"`
	// The configuration settings of the token store.
	TokenStore *TokenStoreResponse `pulumi:"tokenStore"`
}

// The configuration settings of the login flow of users using App Service Authentication/Authorization.
type LoginResponseOutput struct{ *pulumi.OutputState }

func (LoginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginResponse)(nil)).Elem()
}

func (o LoginResponseOutput) ToLoginResponseOutput() LoginResponseOutput {
	return o
}

func (o LoginResponseOutput) ToLoginResponseOutputWithContext(ctx context.Context) LoginResponseOutput {
	return o
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginResponseOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoginResponse) []string { return v.AllowedExternalRedirectUrls }).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginResponseOutput) CookieExpiration() CookieExpirationResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *CookieExpirationResponse { return v.CookieExpiration }).(CookieExpirationResponsePtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginResponseOutput) Nonce() NonceResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *NonceResponse { return v.Nonce }).(NonceResponsePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginResponseOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoginResponse) *bool { return v.PreserveUrlFragmentsForLogins }).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginResponseOutput) Routes() LoginRoutesResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *LoginRoutesResponse { return v.Routes }).(LoginRoutesResponsePtrOutput)
}

// The configuration settings of the token store.
func (o LoginResponseOutput) TokenStore() TokenStoreResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *TokenStoreResponse { return v.TokenStore }).(TokenStoreResponsePtrOutput)
}

type LoginResponsePtrOutput struct{ *pulumi.OutputState }

func (LoginResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginResponse)(nil)).Elem()
}

func (o LoginResponsePtrOutput) ToLoginResponsePtrOutput() LoginResponsePtrOutput {
	return o
}

func (o LoginResponsePtrOutput) ToLoginResponsePtrOutputWithContext(ctx context.Context) LoginResponsePtrOutput {
	return o
}

func (o LoginResponsePtrOutput) Elem() LoginResponseOutput {
	return o.ApplyT(func(v *LoginResponse) LoginResponse {
		if v != nil {
			return *v
		}
		var ret LoginResponse
		return ret
	}).(LoginResponseOutput)
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginResponsePtrOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoginResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedExternalRedirectUrls
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginResponsePtrOutput) CookieExpiration() CookieExpirationResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *CookieExpirationResponse {
		if v == nil {
			return nil
		}
		return v.CookieExpiration
	}).(CookieExpirationResponsePtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginResponsePtrOutput) Nonce() NonceResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *NonceResponse {
		if v == nil {
			return nil
		}
		return v.Nonce
	}).(NonceResponsePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginResponsePtrOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoginResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveUrlFragmentsForLogins
	}).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginResponsePtrOutput) Routes() LoginRoutesResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *LoginRoutesResponse {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(LoginRoutesResponsePtrOutput)
}

// The configuration settings of the token store.
func (o LoginResponsePtrOutput) TokenStore() TokenStoreResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *TokenStoreResponse {
		if v == nil {
			return nil
		}
		return v.TokenStore
	}).(TokenStoreResponsePtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutes struct {
	// The endpoint at which a logout request should be made.
	LogoutEndpoint *string `pulumi:"logoutEndpoint"`
}

// LoginRoutesInput is an input type that accepts LoginRoutesArgs and LoginRoutesOutput values.
// You can construct a concrete instance of `LoginRoutesInput` via:
//
//	LoginRoutesArgs{...}
type LoginRoutesInput interface {
	pulumi.Input

	ToLoginRoutesOutput() LoginRoutesOutput
	ToLoginRoutesOutputWithContext(context.Context) LoginRoutesOutput
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesArgs struct {
	// The endpoint at which a logout request should be made.
	LogoutEndpoint pulumi.StringPtrInput `pulumi:"logoutEndpoint"`
}

func (LoginRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginRoutes)(nil)).Elem()
}

func (i LoginRoutesArgs) ToLoginRoutesOutput() LoginRoutesOutput {
	return i.ToLoginRoutesOutputWithContext(context.Background())
}

func (i LoginRoutesArgs) ToLoginRoutesOutputWithContext(ctx context.Context) LoginRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginRoutesOutput)
}

func (i LoginRoutesArgs) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return i.ToLoginRoutesPtrOutputWithContext(context.Background())
}

func (i LoginRoutesArgs) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginRoutesOutput).ToLoginRoutesPtrOutputWithContext(ctx)
}

// LoginRoutesPtrInput is an input type that accepts LoginRoutesArgs, LoginRoutesPtr and LoginRoutesPtrOutput values.
// You can construct a concrete instance of `LoginRoutesPtrInput` via:
//
//	        LoginRoutesArgs{...}
//
//	or:
//
//	        nil
type LoginRoutesPtrInput interface {
	pulumi.Input

	ToLoginRoutesPtrOutput() LoginRoutesPtrOutput
	ToLoginRoutesPtrOutputWithContext(context.Context) LoginRoutesPtrOutput
}

type loginRoutesPtrType LoginRoutesArgs

func LoginRoutesPtr(v *LoginRoutesArgs) LoginRoutesPtrInput {
	return (*loginRoutesPtrType)(v)
}

func (*loginRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginRoutes)(nil)).Elem()
}

func (i *loginRoutesPtrType) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return i.ToLoginRoutesPtrOutputWithContext(context.Background())
}

func (i *loginRoutesPtrType) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginRoutesPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesOutput struct{ *pulumi.OutputState }

func (LoginRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginRoutes)(nil)).Elem()
}

func (o LoginRoutesOutput) ToLoginRoutesOutput() LoginRoutesOutput {
	return o
}

func (o LoginRoutesOutput) ToLoginRoutesOutputWithContext(ctx context.Context) LoginRoutesOutput {
	return o
}

func (o LoginRoutesOutput) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return o.ToLoginRoutesPtrOutputWithContext(context.Background())
}

func (o LoginRoutesOutput) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoginRoutes) *LoginRoutes {
		return &v
	}).(LoginRoutesPtrOutput)
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoginRoutes) *string { return v.LogoutEndpoint }).(pulumi.StringPtrOutput)
}

type LoginRoutesPtrOutput struct{ *pulumi.OutputState }

func (LoginRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginRoutes)(nil)).Elem()
}

func (o LoginRoutesPtrOutput) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return o
}

func (o LoginRoutesPtrOutput) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return o
}

func (o LoginRoutesPtrOutput) Elem() LoginRoutesOutput {
	return o.ApplyT(func(v *LoginRoutes) LoginRoutes {
		if v != nil {
			return *v
		}
		var ret LoginRoutes
		return ret
	}).(LoginRoutesOutput)
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesPtrOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginRoutes) *string {
		if v == nil {
			return nil
		}
		return v.LogoutEndpoint
	}).(pulumi.StringPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesResponse struct {
	// The endpoint at which a logout request should be made.
	LogoutEndpoint *string `pulumi:"logoutEndpoint"`
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesResponseOutput struct{ *pulumi.OutputState }

func (LoginRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginRoutesResponse)(nil)).Elem()
}

func (o LoginRoutesResponseOutput) ToLoginRoutesResponseOutput() LoginRoutesResponseOutput {
	return o
}

func (o LoginRoutesResponseOutput) ToLoginRoutesResponseOutputWithContext(ctx context.Context) LoginRoutesResponseOutput {
	return o
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesResponseOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoginRoutesResponse) *string { return v.LogoutEndpoint }).(pulumi.StringPtrOutput)
}

type LoginRoutesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoginRoutesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginRoutesResponse)(nil)).Elem()
}

func (o LoginRoutesResponsePtrOutput) ToLoginRoutesResponsePtrOutput() LoginRoutesResponsePtrOutput {
	return o
}

func (o LoginRoutesResponsePtrOutput) ToLoginRoutesResponsePtrOutputWithContext(ctx context.Context) LoginRoutesResponsePtrOutput {
	return o
}

func (o LoginRoutesResponsePtrOutput) Elem() LoginRoutesResponseOutput {
	return o.ApplyT(func(v *LoginRoutesResponse) LoginRoutesResponse {
		if v != nil {
			return *v
		}
		var ret LoginRoutesResponse
		return ret
	}).(LoginRoutesResponseOutput)
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesResponsePtrOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogoutEndpoint
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopes struct {
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// LoginScopesInput is an input type that accepts LoginScopesArgs and LoginScopesOutput values.
// You can construct a concrete instance of `LoginScopesInput` via:
//
//	LoginScopesArgs{...}
type LoginScopesInput interface {
	pulumi.Input

	ToLoginScopesOutput() LoginScopesOutput
	ToLoginScopesOutputWithContext(context.Context) LoginScopesOutput
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesArgs struct {
	// A list of the scopes that should be requested while authenticating.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (LoginScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginScopes)(nil)).Elem()
}

func (i LoginScopesArgs) ToLoginScopesOutput() LoginScopesOutput {
	return i.ToLoginScopesOutputWithContext(context.Background())
}

func (i LoginScopesArgs) ToLoginScopesOutputWithContext(ctx context.Context) LoginScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginScopesOutput)
}

func (i LoginScopesArgs) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return i.ToLoginScopesPtrOutputWithContext(context.Background())
}

func (i LoginScopesArgs) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginScopesOutput).ToLoginScopesPtrOutputWithContext(ctx)
}

// LoginScopesPtrInput is an input type that accepts LoginScopesArgs, LoginScopesPtr and LoginScopesPtrOutput values.
// You can construct a concrete instance of `LoginScopesPtrInput` via:
//
//	        LoginScopesArgs{...}
//
//	or:
//
//	        nil
type LoginScopesPtrInput interface {
	pulumi.Input

	ToLoginScopesPtrOutput() LoginScopesPtrOutput
	ToLoginScopesPtrOutputWithContext(context.Context) LoginScopesPtrOutput
}

type loginScopesPtrType LoginScopesArgs

func LoginScopesPtr(v *LoginScopesArgs) LoginScopesPtrInput {
	return (*loginScopesPtrType)(v)
}

func (*loginScopesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginScopes)(nil)).Elem()
}

func (i *loginScopesPtrType) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return i.ToLoginScopesPtrOutputWithContext(context.Background())
}

func (i *loginScopesPtrType) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginScopesPtrOutput)
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesOutput struct{ *pulumi.OutputState }

func (LoginScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginScopes)(nil)).Elem()
}

func (o LoginScopesOutput) ToLoginScopesOutput() LoginScopesOutput {
	return o
}

func (o LoginScopesOutput) ToLoginScopesOutputWithContext(ctx context.Context) LoginScopesOutput {
	return o
}

func (o LoginScopesOutput) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return o.ToLoginScopesPtrOutputWithContext(context.Background())
}

func (o LoginScopesOutput) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoginScopes) *LoginScopes {
		return &v
	}).(LoginScopesPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoginScopes) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type LoginScopesPtrOutput struct{ *pulumi.OutputState }

func (LoginScopesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginScopes)(nil)).Elem()
}

func (o LoginScopesPtrOutput) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return o
}

func (o LoginScopesPtrOutput) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return o
}

func (o LoginScopesPtrOutput) Elem() LoginScopesOutput {
	return o.ApplyT(func(v *LoginScopes) LoginScopes {
		if v != nil {
			return *v
		}
		var ret LoginScopes
		return ret
	}).(LoginScopesOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoginScopes) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesResponse struct {
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesResponseOutput struct{ *pulumi.OutputState }

func (LoginScopesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginScopesResponse)(nil)).Elem()
}

func (o LoginScopesResponseOutput) ToLoginScopesResponseOutput() LoginScopesResponseOutput {
	return o
}

func (o LoginScopesResponseOutput) ToLoginScopesResponseOutputWithContext(ctx context.Context) LoginScopesResponseOutput {
	return o
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoginScopesResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type LoginScopesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoginScopesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginScopesResponse)(nil)).Elem()
}

func (o LoginScopesResponsePtrOutput) ToLoginScopesResponsePtrOutput() LoginScopesResponsePtrOutput {
	return o
}

func (o LoginScopesResponsePtrOutput) ToLoginScopesResponsePtrOutputWithContext(ctx context.Context) LoginScopesResponsePtrOutput {
	return o
}

func (o LoginScopesResponsePtrOutput) Elem() LoginScopesResponseOutput {
	return o.ApplyT(func(v *LoginScopesResponse) LoginScopesResponse {
		if v != nil {
			return *v
		}
		var ret LoginScopesResponse
		return ret
	}).(LoginScopesResponseOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesResponsePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoginScopesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Managed service identity.
type ManagedServiceIdentity struct {
	// Type of managed service identity.
	Type *ManagedServiceIdentityType `pulumi:"type"`
	// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity.
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity.
	Type ManagedServiceIdentityTypePtrInput `pulumi:"type"`
	// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity.
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity.
func (o ManagedServiceIdentityOutput) Type() ManagedServiceIdentityTypePtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) *ManagedServiceIdentityType { return v.Type }).(ManagedServiceIdentityTypePtrOutput)
}

// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity.
func (o ManagedServiceIdentityPtrOutput) Type() ManagedServiceIdentityTypePtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *ManagedServiceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ManagedServiceIdentityTypePtrOutput)
}

// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity.
type ManagedServiceIdentityResponse struct {
	// Principal Id of managed service identity.
	PrincipalId string `pulumi:"principalId"`
	// Tenant of managed service identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity.
	Type *string `pulumi:"type"`
	// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity.
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// Principal Id of managed service identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Tenant of managed service identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity.
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// Principal Id of managed service identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Tenant of managed service identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity.
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// The configuration settings of the nonce used in the login flow.
type Nonce struct {
	// The time after the request is made when the nonce should expire.
	NonceExpirationInterval *string `pulumi:"nonceExpirationInterval"`
	// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
	ValidateNonce *bool `pulumi:"validateNonce"`
}

// NonceInput is an input type that accepts NonceArgs and NonceOutput values.
// You can construct a concrete instance of `NonceInput` via:
//
//	NonceArgs{...}
type NonceInput interface {
	pulumi.Input

	ToNonceOutput() NonceOutput
	ToNonceOutputWithContext(context.Context) NonceOutput
}

// The configuration settings of the nonce used in the login flow.
type NonceArgs struct {
	// The time after the request is made when the nonce should expire.
	NonceExpirationInterval pulumi.StringPtrInput `pulumi:"nonceExpirationInterval"`
	// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
	ValidateNonce pulumi.BoolPtrInput `pulumi:"validateNonce"`
}

func (NonceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nonce)(nil)).Elem()
}

func (i NonceArgs) ToNonceOutput() NonceOutput {
	return i.ToNonceOutputWithContext(context.Background())
}

func (i NonceArgs) ToNonceOutputWithContext(ctx context.Context) NonceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonceOutput)
}

func (i NonceArgs) ToNoncePtrOutput() NoncePtrOutput {
	return i.ToNoncePtrOutputWithContext(context.Background())
}

func (i NonceArgs) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonceOutput).ToNoncePtrOutputWithContext(ctx)
}

// NoncePtrInput is an input type that accepts NonceArgs, NoncePtr and NoncePtrOutput values.
// You can construct a concrete instance of `NoncePtrInput` via:
//
//	        NonceArgs{...}
//
//	or:
//
//	        nil
type NoncePtrInput interface {
	pulumi.Input

	ToNoncePtrOutput() NoncePtrOutput
	ToNoncePtrOutputWithContext(context.Context) NoncePtrOutput
}

type noncePtrType NonceArgs

func NoncePtr(v *NonceArgs) NoncePtrInput {
	return (*noncePtrType)(v)
}

func (*noncePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Nonce)(nil)).Elem()
}

func (i *noncePtrType) ToNoncePtrOutput() NoncePtrOutput {
	return i.ToNoncePtrOutputWithContext(context.Background())
}

func (i *noncePtrType) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoncePtrOutput)
}

// The configuration settings of the nonce used in the login flow.
type NonceOutput struct{ *pulumi.OutputState }

func (NonceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nonce)(nil)).Elem()
}

func (o NonceOutput) ToNonceOutput() NonceOutput {
	return o
}

func (o NonceOutput) ToNonceOutputWithContext(ctx context.Context) NonceOutput {
	return o
}

func (o NonceOutput) ToNoncePtrOutput() NoncePtrOutput {
	return o.ToNoncePtrOutputWithContext(context.Background())
}

func (o NonceOutput) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Nonce) *Nonce {
		return &v
	}).(NoncePtrOutput)
}

// The time after the request is made when the nonce should expire.
func (o NonceOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nonce) *string { return v.NonceExpirationInterval }).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NonceOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Nonce) *bool { return v.ValidateNonce }).(pulumi.BoolPtrOutput)
}

type NoncePtrOutput struct{ *pulumi.OutputState }

func (NoncePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nonce)(nil)).Elem()
}

func (o NoncePtrOutput) ToNoncePtrOutput() NoncePtrOutput {
	return o
}

func (o NoncePtrOutput) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return o
}

func (o NoncePtrOutput) Elem() NonceOutput {
	return o.ApplyT(func(v *Nonce) Nonce {
		if v != nil {
			return *v
		}
		var ret Nonce
		return ret
	}).(NonceOutput)
}

// The time after the request is made when the nonce should expire.
func (o NoncePtrOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nonce) *string {
		if v == nil {
			return nil
		}
		return v.NonceExpirationInterval
	}).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NoncePtrOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Nonce) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateNonce
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the nonce used in the login flow.
type NonceResponse struct {
	// The time after the request is made when the nonce should expire.
	NonceExpirationInterval *string `pulumi:"nonceExpirationInterval"`
	// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
	ValidateNonce *bool `pulumi:"validateNonce"`
}

// The configuration settings of the nonce used in the login flow.
type NonceResponseOutput struct{ *pulumi.OutputState }

func (NonceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonceResponse)(nil)).Elem()
}

func (o NonceResponseOutput) ToNonceResponseOutput() NonceResponseOutput {
	return o
}

func (o NonceResponseOutput) ToNonceResponseOutputWithContext(ctx context.Context) NonceResponseOutput {
	return o
}

// The time after the request is made when the nonce should expire.
func (o NonceResponseOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonceResponse) *string { return v.NonceExpirationInterval }).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NonceResponseOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NonceResponse) *bool { return v.ValidateNonce }).(pulumi.BoolPtrOutput)
}

type NonceResponsePtrOutput struct{ *pulumi.OutputState }

func (NonceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NonceResponse)(nil)).Elem()
}

func (o NonceResponsePtrOutput) ToNonceResponsePtrOutput() NonceResponsePtrOutput {
	return o
}

func (o NonceResponsePtrOutput) ToNonceResponsePtrOutputWithContext(ctx context.Context) NonceResponsePtrOutput {
	return o
}

func (o NonceResponsePtrOutput) Elem() NonceResponseOutput {
	return o.ApplyT(func(v *NonceResponse) NonceResponse {
		if v != nil {
			return *v
		}
		var ret NonceResponse
		return ret
	}).(NonceResponseOutput)
}

// The time after the request is made when the nonce should expire.
func (o NonceResponsePtrOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NonceResponse) *string {
		if v == nil {
			return nil
		}
		return v.NonceExpirationInterval
	}).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NonceResponsePtrOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NonceResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateNonce
	}).(pulumi.BoolPtrOutput)
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredential struct {
	// The app setting that contains the client secret for the custom Open ID Connect provider.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The method that should be used to authenticate the user.
	Method *ClientCredentialMethod `pulumi:"method"`
}

// OpenIdConnectClientCredentialInput is an input type that accepts OpenIdConnectClientCredentialArgs and OpenIdConnectClientCredentialOutput values.
// You can construct a concrete instance of `OpenIdConnectClientCredentialInput` via:
//
//	OpenIdConnectClientCredentialArgs{...}
type OpenIdConnectClientCredentialInput interface {
	pulumi.Input

	ToOpenIdConnectClientCredentialOutput() OpenIdConnectClientCredentialOutput
	ToOpenIdConnectClientCredentialOutputWithContext(context.Context) OpenIdConnectClientCredentialOutput
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialArgs struct {
	// The app setting that contains the client secret for the custom Open ID Connect provider.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
	// The method that should be used to authenticate the user.
	Method ClientCredentialMethodPtrInput `pulumi:"method"`
}

func (OpenIdConnectClientCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectClientCredential)(nil)).Elem()
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialOutput() OpenIdConnectClientCredentialOutput {
	return i.ToOpenIdConnectClientCredentialOutputWithContext(context.Background())
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectClientCredentialOutput)
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return i.ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectClientCredentialOutput).ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx)
}

// OpenIdConnectClientCredentialPtrInput is an input type that accepts OpenIdConnectClientCredentialArgs, OpenIdConnectClientCredentialPtr and OpenIdConnectClientCredentialPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectClientCredentialPtrInput` via:
//
//	        OpenIdConnectClientCredentialArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectClientCredentialPtrInput interface {
	pulumi.Input

	ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput
	ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Context) OpenIdConnectClientCredentialPtrOutput
}

type openIdConnectClientCredentialPtrType OpenIdConnectClientCredentialArgs

func OpenIdConnectClientCredentialPtr(v *OpenIdConnectClientCredentialArgs) OpenIdConnectClientCredentialPtrInput {
	return (*openIdConnectClientCredentialPtrType)(v)
}

func (*openIdConnectClientCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectClientCredential)(nil)).Elem()
}

func (i *openIdConnectClientCredentialPtrType) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return i.ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Background())
}

func (i *openIdConnectClientCredentialPtrType) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectClientCredentialPtrOutput)
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectClientCredential)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialOutput() OpenIdConnectClientCredentialOutput {
	return o
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialOutput {
	return o
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return o.ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectClientCredential) *OpenIdConnectClientCredential {
		return &v
	}).(OpenIdConnectClientCredentialPtrOutput)
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredential) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialOutput) Method() ClientCredentialMethodPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredential) *ClientCredentialMethod { return v.Method }).(ClientCredentialMethodPtrOutput)
}

type OpenIdConnectClientCredentialPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectClientCredential)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialPtrOutput) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialPtrOutput) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialPtrOutput) Elem() OpenIdConnectClientCredentialOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredential) OpenIdConnectClientCredential {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectClientCredential
		return ret
	}).(OpenIdConnectClientCredentialOutput)
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredential) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialPtrOutput) Method() ClientCredentialMethodPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredential) *ClientCredentialMethod {
		if v == nil {
			return nil
		}
		return v.Method
	}).(ClientCredentialMethodPtrOutput)
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialResponse struct {
	// The app setting that contains the client secret for the custom Open ID Connect provider.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The method that should be used to authenticate the user.
	Method *string `pulumi:"method"`
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectClientCredentialResponse)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialResponseOutput) ToOpenIdConnectClientCredentialResponseOutput() OpenIdConnectClientCredentialResponseOutput {
	return o
}

func (o OpenIdConnectClientCredentialResponseOutput) ToOpenIdConnectClientCredentialResponseOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialResponseOutput {
	return o
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredentialResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialResponseOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredentialResponse) *string { return v.Method }).(pulumi.StringPtrOutput)
}

type OpenIdConnectClientCredentialResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectClientCredentialResponse)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialResponsePtrOutput) ToOpenIdConnectClientCredentialResponsePtrOutput() OpenIdConnectClientCredentialResponsePtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialResponsePtrOutput) ToOpenIdConnectClientCredentialResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialResponsePtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialResponsePtrOutput) Elem() OpenIdConnectClientCredentialResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredentialResponse) OpenIdConnectClientCredentialResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectClientCredentialResponse
		return ret
	}).(OpenIdConnectClientCredentialResponseOutput)
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialResponsePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfig struct {
	// The endpoint to be used to make an authorization request.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// The endpoint that provides the keys necessary to validate the token.
	CertificationUri *string `pulumi:"certificationUri"`
	// The endpoint that issues the token.
	Issuer *string `pulumi:"issuer"`
	// The endpoint to be used to request a token.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The endpoint that contains all the configuration endpoints for the provider.
	WellKnownOpenIdConfiguration *string `pulumi:"wellKnownOpenIdConfiguration"`
}

// OpenIdConnectConfigInput is an input type that accepts OpenIdConnectConfigArgs and OpenIdConnectConfigOutput values.
// You can construct a concrete instance of `OpenIdConnectConfigInput` via:
//
//	OpenIdConnectConfigArgs{...}
type OpenIdConnectConfigInput interface {
	pulumi.Input

	ToOpenIdConnectConfigOutput() OpenIdConnectConfigOutput
	ToOpenIdConnectConfigOutputWithContext(context.Context) OpenIdConnectConfigOutput
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigArgs struct {
	// The endpoint to be used to make an authorization request.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// The endpoint that provides the keys necessary to validate the token.
	CertificationUri pulumi.StringPtrInput `pulumi:"certificationUri"`
	// The endpoint that issues the token.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The endpoint to be used to request a token.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The endpoint that contains all the configuration endpoints for the provider.
	WellKnownOpenIdConfiguration pulumi.StringPtrInput `pulumi:"wellKnownOpenIdConfiguration"`
}

func (OpenIdConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectConfig)(nil)).Elem()
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigOutput() OpenIdConnectConfigOutput {
	return i.ToOpenIdConnectConfigOutputWithContext(context.Background())
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigOutputWithContext(ctx context.Context) OpenIdConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectConfigOutput)
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return i.ToOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectConfigOutput).ToOpenIdConnectConfigPtrOutputWithContext(ctx)
}

// OpenIdConnectConfigPtrInput is an input type that accepts OpenIdConnectConfigArgs, OpenIdConnectConfigPtr and OpenIdConnectConfigPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectConfigPtrInput` via:
//
//	        OpenIdConnectConfigArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectConfigPtrInput interface {
	pulumi.Input

	ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput
	ToOpenIdConnectConfigPtrOutputWithContext(context.Context) OpenIdConnectConfigPtrOutput
}

type openIdConnectConfigPtrType OpenIdConnectConfigArgs

func OpenIdConnectConfigPtr(v *OpenIdConnectConfigArgs) OpenIdConnectConfigPtrInput {
	return (*openIdConnectConfigPtrType)(v)
}

func (*openIdConnectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectConfig)(nil)).Elem()
}

func (i *openIdConnectConfigPtrType) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return i.ToOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (i *openIdConnectConfigPtrType) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectConfigPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectConfig)(nil)).Elem()
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigOutput() OpenIdConnectConfigOutput {
	return o
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigOutputWithContext(ctx context.Context) OpenIdConnectConfigOutput {
	return o
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return o.ToOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectConfig) *OpenIdConnectConfig {
		return &v
	}).(OpenIdConnectConfigPtrOutput)
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.CertificationUri }).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.WellKnownOpenIdConfiguration }).(pulumi.StringPtrOutput)
}

type OpenIdConnectConfigPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectConfig)(nil)).Elem()
}

func (o OpenIdConnectConfigPtrOutput) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return o
}

func (o OpenIdConnectConfigPtrOutput) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return o
}

func (o OpenIdConnectConfigPtrOutput) Elem() OpenIdConnectConfigOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) OpenIdConnectConfig {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectConfig
		return ret
	}).(OpenIdConnectConfigOutput)
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigPtrOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.CertificationUri
	}).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigPtrOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.WellKnownOpenIdConfiguration
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigResponse struct {
	// The endpoint to be used to make an authorization request.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// The endpoint that provides the keys necessary to validate the token.
	CertificationUri *string `pulumi:"certificationUri"`
	// The endpoint that issues the token.
	Issuer *string `pulumi:"issuer"`
	// The endpoint to be used to request a token.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The endpoint that contains all the configuration endpoints for the provider.
	WellKnownOpenIdConfiguration *string `pulumi:"wellKnownOpenIdConfiguration"`
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectConfigResponse)(nil)).Elem()
}

func (o OpenIdConnectConfigResponseOutput) ToOpenIdConnectConfigResponseOutput() OpenIdConnectConfigResponseOutput {
	return o
}

func (o OpenIdConnectConfigResponseOutput) ToOpenIdConnectConfigResponseOutputWithContext(ctx context.Context) OpenIdConnectConfigResponseOutput {
	return o
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigResponseOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigResponseOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.CertificationUri }).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigResponseOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigResponseOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigResponseOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.WellKnownOpenIdConfiguration }).(pulumi.StringPtrOutput)
}

type OpenIdConnectConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectConfigResponse)(nil)).Elem()
}

func (o OpenIdConnectConfigResponsePtrOutput) ToOpenIdConnectConfigResponsePtrOutput() OpenIdConnectConfigResponsePtrOutput {
	return o
}

func (o OpenIdConnectConfigResponsePtrOutput) ToOpenIdConnectConfigResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectConfigResponsePtrOutput {
	return o
}

func (o OpenIdConnectConfigResponsePtrOutput) Elem() OpenIdConnectConfigResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) OpenIdConnectConfigResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectConfigResponse
		return ret
	}).(OpenIdConnectConfigResponseOutput)
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigResponsePtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigResponsePtrOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificationUri
	}).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigResponsePtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigResponsePtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigResponsePtrOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.WellKnownOpenIdConfiguration
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLogin struct {
	// The name of the claim that contains the users name.
	NameClaimType *string `pulumi:"nameClaimType"`
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// OpenIdConnectLoginInput is an input type that accepts OpenIdConnectLoginArgs and OpenIdConnectLoginOutput values.
// You can construct a concrete instance of `OpenIdConnectLoginInput` via:
//
//	OpenIdConnectLoginArgs{...}
type OpenIdConnectLoginInput interface {
	pulumi.Input

	ToOpenIdConnectLoginOutput() OpenIdConnectLoginOutput
	ToOpenIdConnectLoginOutputWithContext(context.Context) OpenIdConnectLoginOutput
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginArgs struct {
	// The name of the claim that contains the users name.
	NameClaimType pulumi.StringPtrInput `pulumi:"nameClaimType"`
	// A list of the scopes that should be requested while authenticating.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (OpenIdConnectLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectLogin)(nil)).Elem()
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginOutput() OpenIdConnectLoginOutput {
	return i.ToOpenIdConnectLoginOutputWithContext(context.Background())
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginOutputWithContext(ctx context.Context) OpenIdConnectLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectLoginOutput)
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return i.ToOpenIdConnectLoginPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectLoginOutput).ToOpenIdConnectLoginPtrOutputWithContext(ctx)
}

// OpenIdConnectLoginPtrInput is an input type that accepts OpenIdConnectLoginArgs, OpenIdConnectLoginPtr and OpenIdConnectLoginPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectLoginPtrInput` via:
//
//	        OpenIdConnectLoginArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectLoginPtrInput interface {
	pulumi.Input

	ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput
	ToOpenIdConnectLoginPtrOutputWithContext(context.Context) OpenIdConnectLoginPtrOutput
}

type openIdConnectLoginPtrType OpenIdConnectLoginArgs

func OpenIdConnectLoginPtr(v *OpenIdConnectLoginArgs) OpenIdConnectLoginPtrInput {
	return (*openIdConnectLoginPtrType)(v)
}

func (*openIdConnectLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectLogin)(nil)).Elem()
}

func (i *openIdConnectLoginPtrType) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return i.ToOpenIdConnectLoginPtrOutputWithContext(context.Background())
}

func (i *openIdConnectLoginPtrType) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectLoginPtrOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectLogin)(nil)).Elem()
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginOutput() OpenIdConnectLoginOutput {
	return o
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginOutputWithContext(ctx context.Context) OpenIdConnectLoginOutput {
	return o
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return o.ToOpenIdConnectLoginPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectLogin) *OpenIdConnectLogin {
		return &v
	}).(OpenIdConnectLoginPtrOutput)
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectLogin) *string { return v.NameClaimType }).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpenIdConnectLogin) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OpenIdConnectLoginPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectLogin)(nil)).Elem()
}

func (o OpenIdConnectLoginPtrOutput) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return o
}

func (o OpenIdConnectLoginPtrOutput) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return o
}

func (o OpenIdConnectLoginPtrOutput) Elem() OpenIdConnectLoginOutput {
	return o.ApplyT(func(v *OpenIdConnectLogin) OpenIdConnectLogin {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectLogin
		return ret
	}).(OpenIdConnectLoginOutput)
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginPtrOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectLogin) *string {
		if v == nil {
			return nil
		}
		return v.NameClaimType
	}).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenIdConnectLogin) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginResponse struct {
	// The name of the claim that contains the users name.
	NameClaimType *string `pulumi:"nameClaimType"`
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectLoginResponse)(nil)).Elem()
}

func (o OpenIdConnectLoginResponseOutput) ToOpenIdConnectLoginResponseOutput() OpenIdConnectLoginResponseOutput {
	return o
}

func (o OpenIdConnectLoginResponseOutput) ToOpenIdConnectLoginResponseOutputWithContext(ctx context.Context) OpenIdConnectLoginResponseOutput {
	return o
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginResponseOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectLoginResponse) *string { return v.NameClaimType }).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpenIdConnectLoginResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OpenIdConnectLoginResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectLoginResponse)(nil)).Elem()
}

func (o OpenIdConnectLoginResponsePtrOutput) ToOpenIdConnectLoginResponsePtrOutput() OpenIdConnectLoginResponsePtrOutput {
	return o
}

func (o OpenIdConnectLoginResponsePtrOutput) ToOpenIdConnectLoginResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectLoginResponsePtrOutput {
	return o
}

func (o OpenIdConnectLoginResponsePtrOutput) Elem() OpenIdConnectLoginResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectLoginResponse) OpenIdConnectLoginResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectLoginResponse
		return ret
	}).(OpenIdConnectLoginResponseOutput)
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginResponsePtrOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectLoginResponse) *string {
		if v == nil {
			return nil
		}
		return v.NameClaimType
	}).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginResponsePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenIdConnectLoginResponse) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistration struct {
	// The authentication credentials of the custom Open ID Connect provider.
	ClientCredential *OpenIdConnectClientCredential `pulumi:"clientCredential"`
	// The client id of the custom Open ID Connect provider.
	ClientId *string `pulumi:"clientId"`
	// The configuration settings of the endpoints used for the custom Open ID Connect provider.
	OpenIdConnectConfiguration *OpenIdConnectConfig `pulumi:"openIdConnectConfiguration"`
}

// OpenIdConnectRegistrationInput is an input type that accepts OpenIdConnectRegistrationArgs and OpenIdConnectRegistrationOutput values.
// You can construct a concrete instance of `OpenIdConnectRegistrationInput` via:
//
//	OpenIdConnectRegistrationArgs{...}
type OpenIdConnectRegistrationInput interface {
	pulumi.Input

	ToOpenIdConnectRegistrationOutput() OpenIdConnectRegistrationOutput
	ToOpenIdConnectRegistrationOutputWithContext(context.Context) OpenIdConnectRegistrationOutput
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationArgs struct {
	// The authentication credentials of the custom Open ID Connect provider.
	ClientCredential OpenIdConnectClientCredentialPtrInput `pulumi:"clientCredential"`
	// The client id of the custom Open ID Connect provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The configuration settings of the endpoints used for the custom Open ID Connect provider.
	OpenIdConnectConfiguration OpenIdConnectConfigPtrInput `pulumi:"openIdConnectConfiguration"`
}

func (OpenIdConnectRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectRegistration)(nil)).Elem()
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationOutput() OpenIdConnectRegistrationOutput {
	return i.ToOpenIdConnectRegistrationOutputWithContext(context.Background())
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationOutputWithContext(ctx context.Context) OpenIdConnectRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectRegistrationOutput)
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return i.ToOpenIdConnectRegistrationPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectRegistrationOutput).ToOpenIdConnectRegistrationPtrOutputWithContext(ctx)
}

// OpenIdConnectRegistrationPtrInput is an input type that accepts OpenIdConnectRegistrationArgs, OpenIdConnectRegistrationPtr and OpenIdConnectRegistrationPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectRegistrationPtrInput` via:
//
//	        OpenIdConnectRegistrationArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectRegistrationPtrInput interface {
	pulumi.Input

	ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput
	ToOpenIdConnectRegistrationPtrOutputWithContext(context.Context) OpenIdConnectRegistrationPtrOutput
}

type openIdConnectRegistrationPtrType OpenIdConnectRegistrationArgs

func OpenIdConnectRegistrationPtr(v *OpenIdConnectRegistrationArgs) OpenIdConnectRegistrationPtrInput {
	return (*openIdConnectRegistrationPtrType)(v)
}

func (*openIdConnectRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectRegistration)(nil)).Elem()
}

func (i *openIdConnectRegistrationPtrType) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return i.ToOpenIdConnectRegistrationPtrOutputWithContext(context.Background())
}

func (i *openIdConnectRegistrationPtrType) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectRegistrationPtrOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectRegistration)(nil)).Elem()
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationOutput() OpenIdConnectRegistrationOutput {
	return o
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationOutputWithContext(ctx context.Context) OpenIdConnectRegistrationOutput {
	return o
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return o.ToOpenIdConnectRegistrationPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectRegistration) *OpenIdConnectRegistration {
		return &v
	}).(OpenIdConnectRegistrationPtrOutput)
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationOutput) ClientCredential() OpenIdConnectClientCredentialPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistration) *OpenIdConnectClientCredential { return v.ClientCredential }).(OpenIdConnectClientCredentialPtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationOutput) OpenIdConnectConfiguration() OpenIdConnectConfigPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistration) *OpenIdConnectConfig { return v.OpenIdConnectConfiguration }).(OpenIdConnectConfigPtrOutput)
}

type OpenIdConnectRegistrationPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectRegistration)(nil)).Elem()
}

func (o OpenIdConnectRegistrationPtrOutput) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return o
}

func (o OpenIdConnectRegistrationPtrOutput) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return o
}

func (o OpenIdConnectRegistrationPtrOutput) Elem() OpenIdConnectRegistrationOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) OpenIdConnectRegistration {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectRegistration
		return ret
	}).(OpenIdConnectRegistrationOutput)
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationPtrOutput) ClientCredential() OpenIdConnectClientCredentialPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) *OpenIdConnectClientCredential {
		if v == nil {
			return nil
		}
		return v.ClientCredential
	}).(OpenIdConnectClientCredentialPtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationPtrOutput) OpenIdConnectConfiguration() OpenIdConnectConfigPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) *OpenIdConnectConfig {
		if v == nil {
			return nil
		}
		return v.OpenIdConnectConfiguration
	}).(OpenIdConnectConfigPtrOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationResponse struct {
	// The authentication credentials of the custom Open ID Connect provider.
	ClientCredential *OpenIdConnectClientCredentialResponse `pulumi:"clientCredential"`
	// The client id of the custom Open ID Connect provider.
	ClientId *string `pulumi:"clientId"`
	// The configuration settings of the endpoints used for the custom Open ID Connect provider.
	OpenIdConnectConfiguration *OpenIdConnectConfigResponse `pulumi:"openIdConnectConfiguration"`
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectRegistrationResponse)(nil)).Elem()
}

func (o OpenIdConnectRegistrationResponseOutput) ToOpenIdConnectRegistrationResponseOutput() OpenIdConnectRegistrationResponseOutput {
	return o
}

func (o OpenIdConnectRegistrationResponseOutput) ToOpenIdConnectRegistrationResponseOutputWithContext(ctx context.Context) OpenIdConnectRegistrationResponseOutput {
	return o
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponseOutput) ClientCredential() OpenIdConnectClientCredentialResponsePtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistrationResponse) *OpenIdConnectClientCredentialResponse {
		return v.ClientCredential
	}).(OpenIdConnectClientCredentialResponsePtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponseOutput) OpenIdConnectConfiguration() OpenIdConnectConfigResponsePtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistrationResponse) *OpenIdConnectConfigResponse {
		return v.OpenIdConnectConfiguration
	}).(OpenIdConnectConfigResponsePtrOutput)
}

type OpenIdConnectRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectRegistrationResponse)(nil)).Elem()
}

func (o OpenIdConnectRegistrationResponsePtrOutput) ToOpenIdConnectRegistrationResponsePtrOutput() OpenIdConnectRegistrationResponsePtrOutput {
	return o
}

func (o OpenIdConnectRegistrationResponsePtrOutput) ToOpenIdConnectRegistrationResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationResponsePtrOutput {
	return o
}

func (o OpenIdConnectRegistrationResponsePtrOutput) Elem() OpenIdConnectRegistrationResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) OpenIdConnectRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectRegistrationResponse
		return ret
	}).(OpenIdConnectRegistrationResponseOutput)
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponsePtrOutput) ClientCredential() OpenIdConnectClientCredentialResponsePtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) *OpenIdConnectClientCredentialResponse {
		if v == nil {
			return nil
		}
		return v.ClientCredential
	}).(OpenIdConnectClientCredentialResponsePtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponsePtrOutput) OpenIdConnectConfiguration() OpenIdConnectConfigResponsePtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) *OpenIdConnectConfigResponse {
		if v == nil {
			return nil
		}
		return v.OpenIdConnectConfiguration
	}).(OpenIdConnectConfigResponsePtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionStateResponse struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description *string `pulumi:"description"`
	// Status of a private link connection
	Status *string `pulumi:"status"`
}

// The state of a private link connection
type PrivateLinkConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutput() PrivateLinkConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponseOutput {
	return o
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutput() PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) Elem() PrivateLinkConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) PrivateLinkConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionStateResponse
		return ret
	}).(PrivateLinkConnectionStateResponseOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponse struct {
	// Resource Id.
	Id string `pulumi:"id"`
	// Private IPAddresses mapped to the remote private endpoint
	IpAddresses []string `pulumi:"ipAddresses"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// PrivateEndpoint of a remote private endpoint connection
	PrivateEndpoint *ArmIdWrapperResponse `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	ProvisioningState                 string                              `pulumi:"provisioningState"`
	// Resource type.
	Type string `pulumi:"type"`
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (RemotePrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutput() RemotePrivateEndpointConnectionResponseOutput {
	return o
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) RemotePrivateEndpointConnectionResponseOutput {
	return o
}

// Resource Id.
func (o RemotePrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Private IPAddresses mapped to the remote private endpoint
func (o RemotePrivateEndpointConnectionResponseOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Kind of resource.
func (o RemotePrivateEndpointConnectionResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o RemotePrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// PrivateEndpoint of a remote private endpoint connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateEndpoint() ArmIdWrapperResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *ArmIdWrapperResponse { return v.PrivateEndpoint }).(ArmIdWrapperResponsePtrOutput)
}

// The state of a private link connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *PrivateLinkConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStateResponsePtrOutput)
}

func (o RemotePrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource type.
func (o RemotePrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type RemotePrivateEndpointConnectionResponsePtrOutput struct{ *pulumi.OutputState }

func (RemotePrivateEndpointConnectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemotePrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RemotePrivateEndpointConnectionResponsePtrOutput) ToRemotePrivateEndpointConnectionResponsePtrOutput() RemotePrivateEndpointConnectionResponsePtrOutput {
	return o
}

func (o RemotePrivateEndpointConnectionResponsePtrOutput) ToRemotePrivateEndpointConnectionResponsePtrOutputWithContext(ctx context.Context) RemotePrivateEndpointConnectionResponsePtrOutput {
	return o
}

func (o RemotePrivateEndpointConnectionResponsePtrOutput) Elem() RemotePrivateEndpointConnectionResponseOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) RemotePrivateEndpointConnectionResponse {
		if v != nil {
			return *v
		}
		var ret RemotePrivateEndpointConnectionResponse
		return ret
	}).(RemotePrivateEndpointConnectionResponseOutput)
}

// Resource Id.
func (o RemotePrivateEndpointConnectionResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Private IPAddresses mapped to the remote private endpoint
func (o RemotePrivateEndpointConnectionResponsePtrOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpAddresses
	}).(pulumi.StringArrayOutput)
}

// Kind of resource.
func (o RemotePrivateEndpointConnectionResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o RemotePrivateEndpointConnectionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// PrivateEndpoint of a remote private endpoint connection
func (o RemotePrivateEndpointConnectionResponsePtrOutput) PrivateEndpoint() ArmIdWrapperResponsePtrOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) *ArmIdWrapperResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(ArmIdWrapperResponsePtrOutput)
}

// The state of a private link connection
func (o RemotePrivateEndpointConnectionResponsePtrOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) *PrivateLinkConnectionStateResponse {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStateResponsePtrOutput)
}

func (o RemotePrivateEndpointConnectionResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Resource type.
func (o RemotePrivateEndpointConnectionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemotePrivateEndpointConnectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Message envelope that contains the common Azure resource manager properties and the resource provider specific content.
type ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse struct {
	// Azure-AsyncOperation Error info.
	Error *ErrorEntityResponse `pulumi:"error"`
	// Resource Id. Typically ID is populated only for responses to GET requests. Caller is responsible for passing in this
	// value for GET requests only.
	// For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
	Id *string `pulumi:"id"`
	// MSI resource
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// Geographical region resource belongs to e.g. SouthCentralUS, SouthEastAsia.
	Location *string `pulumi:"location"`
	// Name of resource.
	Name *string `pulumi:"name"`
	// Azure resource manager plan.
	Plan *ArmPlanResponse `pulumi:"plan"`
	// Resource specific properties.
	Properties *RemotePrivateEndpointConnectionResponse `pulumi:"properties"`
	// SKU description of the resource.
	Sku *SkuDescriptionResponse `pulumi:"sku"`
	// Azure-AsyncOperation Status info.
	Status *string `pulumi:"status"`
	// Tags associated with resource.
	Tags map[string]string `pulumi:"tags"`
	// Type of resource e.g "Microsoft.Web/sites".
	Type *string `pulumi:"type"`
	// Logical Availability Zones the service is hosted in
	Zones []string `pulumi:"zones"`
}

// Message envelope that contains the common Azure resource manager properties and the resource provider specific content.
type ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) ToResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput() ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput {
	return o
}

func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) ToResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput {
	return o
}

// Azure-AsyncOperation Error info.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Error() ErrorEntityResponsePtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *ErrorEntityResponse {
		return v.Error
	}).(ErrorEntityResponsePtrOutput)
}

// Resource Id. Typically ID is populated only for responses to GET requests. Caller is responsible for passing in this
// value for GET requests only.
// For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// MSI resource
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *ManagedServiceIdentityResponse {
		return v.Identity
	}).(ManagedServiceIdentityResponsePtrOutput)
}

// Geographical region resource belongs to e.g. SouthCentralUS, SouthEastAsia.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of resource.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Azure resource manager plan.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Plan() ArmPlanResponsePtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *ArmPlanResponse { return v.Plan }).(ArmPlanResponsePtrOutput)
}

// Resource specific properties.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Properties() RemotePrivateEndpointConnectionResponsePtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *RemotePrivateEndpointConnectionResponse {
		return v.Properties
	}).(RemotePrivateEndpointConnectionResponsePtrOutput)
}

// SKU description of the resource.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Sku() SkuDescriptionResponsePtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *SkuDescriptionResponse {
		return v.Sku
	}).(SkuDescriptionResponsePtrOutput)
}

// Azure-AsyncOperation Status info.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tags associated with resource.
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) map[string]string {
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Type of resource e.g "Microsoft.Web/sites".
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Logical Availability Zones the service is hosted in
func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput) ToResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput() ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput) ToResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse {
		return vs[0].([]ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput)
}

// Description of the App Service plan scale options.
type SkuCapacity struct {
	// Default number of workers for this App Service plan SKU.
	Default *int `pulumi:"default"`
	// Maximum number of Elastic workers for this App Service plan SKU.
	ElasticMaximum *int `pulumi:"elasticMaximum"`
	// Maximum number of workers for this App Service plan SKU.
	Maximum *int `pulumi:"maximum"`
	// Minimum number of workers for this App Service plan SKU.
	Minimum *int `pulumi:"minimum"`
	// Available scale configurations for an App Service plan.
	ScaleType *string `pulumi:"scaleType"`
}

// SkuCapacityInput is an input type that accepts SkuCapacityArgs and SkuCapacityOutput values.
// You can construct a concrete instance of `SkuCapacityInput` via:
//
//	SkuCapacityArgs{...}
type SkuCapacityInput interface {
	pulumi.Input

	ToSkuCapacityOutput() SkuCapacityOutput
	ToSkuCapacityOutputWithContext(context.Context) SkuCapacityOutput
}

// Description of the App Service plan scale options.
type SkuCapacityArgs struct {
	// Default number of workers for this App Service plan SKU.
	Default pulumi.IntPtrInput `pulumi:"default"`
	// Maximum number of Elastic workers for this App Service plan SKU.
	ElasticMaximum pulumi.IntPtrInput `pulumi:"elasticMaximum"`
	// Maximum number of workers for this App Service plan SKU.
	Maximum pulumi.IntPtrInput `pulumi:"maximum"`
	// Minimum number of workers for this App Service plan SKU.
	Minimum pulumi.IntPtrInput `pulumi:"minimum"`
	// Available scale configurations for an App Service plan.
	ScaleType pulumi.StringPtrInput `pulumi:"scaleType"`
}

func (SkuCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuCapacity)(nil)).Elem()
}

func (i SkuCapacityArgs) ToSkuCapacityOutput() SkuCapacityOutput {
	return i.ToSkuCapacityOutputWithContext(context.Background())
}

func (i SkuCapacityArgs) ToSkuCapacityOutputWithContext(ctx context.Context) SkuCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuCapacityOutput)
}

func (i SkuCapacityArgs) ToSkuCapacityPtrOutput() SkuCapacityPtrOutput {
	return i.ToSkuCapacityPtrOutputWithContext(context.Background())
}

func (i SkuCapacityArgs) ToSkuCapacityPtrOutputWithContext(ctx context.Context) SkuCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuCapacityOutput).ToSkuCapacityPtrOutputWithContext(ctx)
}

// SkuCapacityPtrInput is an input type that accepts SkuCapacityArgs, SkuCapacityPtr and SkuCapacityPtrOutput values.
// You can construct a concrete instance of `SkuCapacityPtrInput` via:
//
//	        SkuCapacityArgs{...}
//
//	or:
//
//	        nil
type SkuCapacityPtrInput interface {
	pulumi.Input

	ToSkuCapacityPtrOutput() SkuCapacityPtrOutput
	ToSkuCapacityPtrOutputWithContext(context.Context) SkuCapacityPtrOutput
}

type skuCapacityPtrType SkuCapacityArgs

func SkuCapacityPtr(v *SkuCapacityArgs) SkuCapacityPtrInput {
	return (*skuCapacityPtrType)(v)
}

func (*skuCapacityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuCapacity)(nil)).Elem()
}

func (i *skuCapacityPtrType) ToSkuCapacityPtrOutput() SkuCapacityPtrOutput {
	return i.ToSkuCapacityPtrOutputWithContext(context.Background())
}

func (i *skuCapacityPtrType) ToSkuCapacityPtrOutputWithContext(ctx context.Context) SkuCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuCapacityPtrOutput)
}

// Description of the App Service plan scale options.
type SkuCapacityOutput struct{ *pulumi.OutputState }

func (SkuCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuCapacity)(nil)).Elem()
}

func (o SkuCapacityOutput) ToSkuCapacityOutput() SkuCapacityOutput {
	return o
}

func (o SkuCapacityOutput) ToSkuCapacityOutputWithContext(ctx context.Context) SkuCapacityOutput {
	return o
}

func (o SkuCapacityOutput) ToSkuCapacityPtrOutput() SkuCapacityPtrOutput {
	return o.ToSkuCapacityPtrOutputWithContext(context.Background())
}

func (o SkuCapacityOutput) ToSkuCapacityPtrOutputWithContext(ctx context.Context) SkuCapacityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuCapacity) *SkuCapacity {
		return &v
	}).(SkuCapacityPtrOutput)
}

// Default number of workers for this App Service plan SKU.
func (o SkuCapacityOutput) Default() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacity) *int { return v.Default }).(pulumi.IntPtrOutput)
}

// Maximum number of Elastic workers for this App Service plan SKU.
func (o SkuCapacityOutput) ElasticMaximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacity) *int { return v.ElasticMaximum }).(pulumi.IntPtrOutput)
}

// Maximum number of workers for this App Service plan SKU.
func (o SkuCapacityOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacity) *int { return v.Maximum }).(pulumi.IntPtrOutput)
}

// Minimum number of workers for this App Service plan SKU.
func (o SkuCapacityOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacity) *int { return v.Minimum }).(pulumi.IntPtrOutput)
}

// Available scale configurations for an App Service plan.
func (o SkuCapacityOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuCapacity) *string { return v.ScaleType }).(pulumi.StringPtrOutput)
}

type SkuCapacityPtrOutput struct{ *pulumi.OutputState }

func (SkuCapacityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuCapacity)(nil)).Elem()
}

func (o SkuCapacityPtrOutput) ToSkuCapacityPtrOutput() SkuCapacityPtrOutput {
	return o
}

func (o SkuCapacityPtrOutput) ToSkuCapacityPtrOutputWithContext(ctx context.Context) SkuCapacityPtrOutput {
	return o
}

func (o SkuCapacityPtrOutput) Elem() SkuCapacityOutput {
	return o.ApplyT(func(v *SkuCapacity) SkuCapacity {
		if v != nil {
			return *v
		}
		var ret SkuCapacity
		return ret
	}).(SkuCapacityOutput)
}

// Default number of workers for this App Service plan SKU.
func (o SkuCapacityPtrOutput) Default() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacity) *int {
		if v == nil {
			return nil
		}
		return v.Default
	}).(pulumi.IntPtrOutput)
}

// Maximum number of Elastic workers for this App Service plan SKU.
func (o SkuCapacityPtrOutput) ElasticMaximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacity) *int {
		if v == nil {
			return nil
		}
		return v.ElasticMaximum
	}).(pulumi.IntPtrOutput)
}

// Maximum number of workers for this App Service plan SKU.
func (o SkuCapacityPtrOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacity) *int {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.IntPtrOutput)
}

// Minimum number of workers for this App Service plan SKU.
func (o SkuCapacityPtrOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacity) *int {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.IntPtrOutput)
}

// Available scale configurations for an App Service plan.
func (o SkuCapacityPtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuCapacity) *string {
		if v == nil {
			return nil
		}
		return v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Description of the App Service plan scale options.
type SkuCapacityResponse struct {
	// Default number of workers for this App Service plan SKU.
	Default *int `pulumi:"default"`
	// Maximum number of Elastic workers for this App Service plan SKU.
	ElasticMaximum *int `pulumi:"elasticMaximum"`
	// Maximum number of workers for this App Service plan SKU.
	Maximum *int `pulumi:"maximum"`
	// Minimum number of workers for this App Service plan SKU.
	Minimum *int `pulumi:"minimum"`
	// Available scale configurations for an App Service plan.
	ScaleType *string `pulumi:"scaleType"`
}

// Description of the App Service plan scale options.
type SkuCapacityResponseOutput struct{ *pulumi.OutputState }

func (SkuCapacityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuCapacityResponse)(nil)).Elem()
}

func (o SkuCapacityResponseOutput) ToSkuCapacityResponseOutput() SkuCapacityResponseOutput {
	return o
}

func (o SkuCapacityResponseOutput) ToSkuCapacityResponseOutputWithContext(ctx context.Context) SkuCapacityResponseOutput {
	return o
}

// Default number of workers for this App Service plan SKU.
func (o SkuCapacityResponseOutput) Default() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacityResponse) *int { return v.Default }).(pulumi.IntPtrOutput)
}

// Maximum number of Elastic workers for this App Service plan SKU.
func (o SkuCapacityResponseOutput) ElasticMaximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacityResponse) *int { return v.ElasticMaximum }).(pulumi.IntPtrOutput)
}

// Maximum number of workers for this App Service plan SKU.
func (o SkuCapacityResponseOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacityResponse) *int { return v.Maximum }).(pulumi.IntPtrOutput)
}

// Minimum number of workers for this App Service plan SKU.
func (o SkuCapacityResponseOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuCapacityResponse) *int { return v.Minimum }).(pulumi.IntPtrOutput)
}

// Available scale configurations for an App Service plan.
func (o SkuCapacityResponseOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuCapacityResponse) *string { return v.ScaleType }).(pulumi.StringPtrOutput)
}

type SkuCapacityResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuCapacityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuCapacityResponse)(nil)).Elem()
}

func (o SkuCapacityResponsePtrOutput) ToSkuCapacityResponsePtrOutput() SkuCapacityResponsePtrOutput {
	return o
}

func (o SkuCapacityResponsePtrOutput) ToSkuCapacityResponsePtrOutputWithContext(ctx context.Context) SkuCapacityResponsePtrOutput {
	return o
}

func (o SkuCapacityResponsePtrOutput) Elem() SkuCapacityResponseOutput {
	return o.ApplyT(func(v *SkuCapacityResponse) SkuCapacityResponse {
		if v != nil {
			return *v
		}
		var ret SkuCapacityResponse
		return ret
	}).(SkuCapacityResponseOutput)
}

// Default number of workers for this App Service plan SKU.
func (o SkuCapacityResponsePtrOutput) Default() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.Default
	}).(pulumi.IntPtrOutput)
}

// Maximum number of Elastic workers for this App Service plan SKU.
func (o SkuCapacityResponsePtrOutput) ElasticMaximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.ElasticMaximum
	}).(pulumi.IntPtrOutput)
}

// Maximum number of workers for this App Service plan SKU.
func (o SkuCapacityResponsePtrOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.IntPtrOutput)
}

// Minimum number of workers for this App Service plan SKU.
func (o SkuCapacityResponsePtrOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.IntPtrOutput)
}

// Available scale configurations for an App Service plan.
func (o SkuCapacityResponsePtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuCapacityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Description of a SKU for a scalable resource.
type SkuDescription struct {
	// Capabilities of the SKU, e.g., is traffic manager enabled?
	Capabilities []Capability `pulumi:"capabilities"`
	// Current number of instances assigned to the resource.
	Capacity *int `pulumi:"capacity"`
	// Family code of the resource SKU.
	Family *string `pulumi:"family"`
	// Locations of the SKU.
	Locations []string `pulumi:"locations"`
	// Name of the resource SKU.
	Name *string `pulumi:"name"`
	// Size specifier of the resource SKU.
	Size *string `pulumi:"size"`
	// Min, max, and default scale values of the SKU.
	SkuCapacity *SkuCapacity `pulumi:"skuCapacity"`
	// Service tier of the resource SKU.
	Tier *string `pulumi:"tier"`
}

// SkuDescriptionInput is an input type that accepts SkuDescriptionArgs and SkuDescriptionOutput values.
// You can construct a concrete instance of `SkuDescriptionInput` via:
//
//	SkuDescriptionArgs{...}
type SkuDescriptionInput interface {
	pulumi.Input

	ToSkuDescriptionOutput() SkuDescriptionOutput
	ToSkuDescriptionOutputWithContext(context.Context) SkuDescriptionOutput
}

// Description of a SKU for a scalable resource.
type SkuDescriptionArgs struct {
	// Capabilities of the SKU, e.g., is traffic manager enabled?
	Capabilities CapabilityArrayInput `pulumi:"capabilities"`
	// Current number of instances assigned to the resource.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Family code of the resource SKU.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// Locations of the SKU.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// Name of the resource SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Size specifier of the resource SKU.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// Min, max, and default scale values of the SKU.
	SkuCapacity SkuCapacityPtrInput `pulumi:"skuCapacity"`
	// Service tier of the resource SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuDescription)(nil)).Elem()
}

func (i SkuDescriptionArgs) ToSkuDescriptionOutput() SkuDescriptionOutput {
	return i.ToSkuDescriptionOutputWithContext(context.Background())
}

func (i SkuDescriptionArgs) ToSkuDescriptionOutputWithContext(ctx context.Context) SkuDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuDescriptionOutput)
}

func (i SkuDescriptionArgs) ToSkuDescriptionPtrOutput() SkuDescriptionPtrOutput {
	return i.ToSkuDescriptionPtrOutputWithContext(context.Background())
}

func (i SkuDescriptionArgs) ToSkuDescriptionPtrOutputWithContext(ctx context.Context) SkuDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuDescriptionOutput).ToSkuDescriptionPtrOutputWithContext(ctx)
}

// SkuDescriptionPtrInput is an input type that accepts SkuDescriptionArgs, SkuDescriptionPtr and SkuDescriptionPtrOutput values.
// You can construct a concrete instance of `SkuDescriptionPtrInput` via:
//
//	        SkuDescriptionArgs{...}
//
//	or:
//
//	        nil
type SkuDescriptionPtrInput interface {
	pulumi.Input

	ToSkuDescriptionPtrOutput() SkuDescriptionPtrOutput
	ToSkuDescriptionPtrOutputWithContext(context.Context) SkuDescriptionPtrOutput
}

type skuDescriptionPtrType SkuDescriptionArgs

func SkuDescriptionPtr(v *SkuDescriptionArgs) SkuDescriptionPtrInput {
	return (*skuDescriptionPtrType)(v)
}

func (*skuDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuDescription)(nil)).Elem()
}

func (i *skuDescriptionPtrType) ToSkuDescriptionPtrOutput() SkuDescriptionPtrOutput {
	return i.ToSkuDescriptionPtrOutputWithContext(context.Background())
}

func (i *skuDescriptionPtrType) ToSkuDescriptionPtrOutputWithContext(ctx context.Context) SkuDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuDescriptionPtrOutput)
}

// Description of a SKU for a scalable resource.
type SkuDescriptionOutput struct{ *pulumi.OutputState }

func (SkuDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuDescription)(nil)).Elem()
}

func (o SkuDescriptionOutput) ToSkuDescriptionOutput() SkuDescriptionOutput {
	return o
}

func (o SkuDescriptionOutput) ToSkuDescriptionOutputWithContext(ctx context.Context) SkuDescriptionOutput {
	return o
}

func (o SkuDescriptionOutput) ToSkuDescriptionPtrOutput() SkuDescriptionPtrOutput {
	return o.ToSkuDescriptionPtrOutputWithContext(context.Background())
}

func (o SkuDescriptionOutput) ToSkuDescriptionPtrOutputWithContext(ctx context.Context) SkuDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuDescription) *SkuDescription {
		return &v
	}).(SkuDescriptionPtrOutput)
}

// Capabilities of the SKU, e.g., is traffic manager enabled?
func (o SkuDescriptionOutput) Capabilities() CapabilityArrayOutput {
	return o.ApplyT(func(v SkuDescription) []Capability { return v.Capabilities }).(CapabilityArrayOutput)
}

// Current number of instances assigned to the resource.
func (o SkuDescriptionOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuDescription) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Family code of the resource SKU.
func (o SkuDescriptionOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescription) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// Locations of the SKU.
func (o SkuDescriptionOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SkuDescription) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Name of the resource SKU.
func (o SkuDescriptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescription) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Size specifier of the resource SKU.
func (o SkuDescriptionOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescription) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// Min, max, and default scale values of the SKU.
func (o SkuDescriptionOutput) SkuCapacity() SkuCapacityPtrOutput {
	return o.ApplyT(func(v SkuDescription) *SkuCapacity { return v.SkuCapacity }).(SkuCapacityPtrOutput)
}

// Service tier of the resource SKU.
func (o SkuDescriptionOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescription) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuDescriptionPtrOutput struct{ *pulumi.OutputState }

func (SkuDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuDescription)(nil)).Elem()
}

func (o SkuDescriptionPtrOutput) ToSkuDescriptionPtrOutput() SkuDescriptionPtrOutput {
	return o
}

func (o SkuDescriptionPtrOutput) ToSkuDescriptionPtrOutputWithContext(ctx context.Context) SkuDescriptionPtrOutput {
	return o
}

func (o SkuDescriptionPtrOutput) Elem() SkuDescriptionOutput {
	return o.ApplyT(func(v *SkuDescription) SkuDescription {
		if v != nil {
			return *v
		}
		var ret SkuDescription
		return ret
	}).(SkuDescriptionOutput)
}

// Capabilities of the SKU, e.g., is traffic manager enabled?
func (o SkuDescriptionPtrOutput) Capabilities() CapabilityArrayOutput {
	return o.ApplyT(func(v *SkuDescription) []Capability {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(CapabilityArrayOutput)
}

// Current number of instances assigned to the resource.
func (o SkuDescriptionPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuDescription) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Family code of the resource SKU.
func (o SkuDescriptionPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescription) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// Locations of the SKU.
func (o SkuDescriptionPtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SkuDescription) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// Name of the resource SKU.
func (o SkuDescriptionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescription) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Size specifier of the resource SKU.
func (o SkuDescriptionPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescription) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// Min, max, and default scale values of the SKU.
func (o SkuDescriptionPtrOutput) SkuCapacity() SkuCapacityPtrOutput {
	return o.ApplyT(func(v *SkuDescription) *SkuCapacity {
		if v == nil {
			return nil
		}
		return v.SkuCapacity
	}).(SkuCapacityPtrOutput)
}

// Service tier of the resource SKU.
func (o SkuDescriptionPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescription) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Description of a SKU for a scalable resource.
type SkuDescriptionResponse struct {
	// Capabilities of the SKU, e.g., is traffic manager enabled?
	Capabilities []CapabilityResponse `pulumi:"capabilities"`
	// Current number of instances assigned to the resource.
	Capacity *int `pulumi:"capacity"`
	// Family code of the resource SKU.
	Family *string `pulumi:"family"`
	// Locations of the SKU.
	Locations []string `pulumi:"locations"`
	// Name of the resource SKU.
	Name *string `pulumi:"name"`
	// Size specifier of the resource SKU.
	Size *string `pulumi:"size"`
	// Min, max, and default scale values of the SKU.
	SkuCapacity *SkuCapacityResponse `pulumi:"skuCapacity"`
	// Service tier of the resource SKU.
	Tier *string `pulumi:"tier"`
}

// Description of a SKU for a scalable resource.
type SkuDescriptionResponseOutput struct{ *pulumi.OutputState }

func (SkuDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuDescriptionResponse)(nil)).Elem()
}

func (o SkuDescriptionResponseOutput) ToSkuDescriptionResponseOutput() SkuDescriptionResponseOutput {
	return o
}

func (o SkuDescriptionResponseOutput) ToSkuDescriptionResponseOutputWithContext(ctx context.Context) SkuDescriptionResponseOutput {
	return o
}

// Capabilities of the SKU, e.g., is traffic manager enabled?
func (o SkuDescriptionResponseOutput) Capabilities() CapabilityResponseArrayOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) []CapabilityResponse { return v.Capabilities }).(CapabilityResponseArrayOutput)
}

// Current number of instances assigned to the resource.
func (o SkuDescriptionResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Family code of the resource SKU.
func (o SkuDescriptionResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// Locations of the SKU.
func (o SkuDescriptionResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Name of the resource SKU.
func (o SkuDescriptionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Size specifier of the resource SKU.
func (o SkuDescriptionResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// Min, max, and default scale values of the SKU.
func (o SkuDescriptionResponseOutput) SkuCapacity() SkuCapacityResponsePtrOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) *SkuCapacityResponse { return v.SkuCapacity }).(SkuCapacityResponsePtrOutput)
}

// Service tier of the resource SKU.
func (o SkuDescriptionResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuDescriptionResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuDescriptionResponse)(nil)).Elem()
}

func (o SkuDescriptionResponsePtrOutput) ToSkuDescriptionResponsePtrOutput() SkuDescriptionResponsePtrOutput {
	return o
}

func (o SkuDescriptionResponsePtrOutput) ToSkuDescriptionResponsePtrOutputWithContext(ctx context.Context) SkuDescriptionResponsePtrOutput {
	return o
}

func (o SkuDescriptionResponsePtrOutput) Elem() SkuDescriptionResponseOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) SkuDescriptionResponse {
		if v != nil {
			return *v
		}
		var ret SkuDescriptionResponse
		return ret
	}).(SkuDescriptionResponseOutput)
}

// Capabilities of the SKU, e.g., is traffic manager enabled?
func (o SkuDescriptionResponsePtrOutput) Capabilities() CapabilityResponseArrayOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) []CapabilityResponse {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(CapabilityResponseArrayOutput)
}

// Current number of instances assigned to the resource.
func (o SkuDescriptionResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Family code of the resource SKU.
func (o SkuDescriptionResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// Locations of the SKU.
func (o SkuDescriptionResponsePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// Name of the resource SKU.
func (o SkuDescriptionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Size specifier of the resource SKU.
func (o SkuDescriptionResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// Min, max, and default scale values of the SKU.
func (o SkuDescriptionResponsePtrOutput) SkuCapacity() SkuCapacityResponsePtrOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) *SkuCapacityResponse {
		if v == nil {
			return nil
		}
		return v.SkuCapacity
	}).(SkuCapacityResponsePtrOutput)
}

// Service tier of the resource SKU.
func (o SkuDescriptionResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Build properties for the static site.
type StaticSiteBuildProperties struct {
	// A custom command to run during deployment of the Azure Functions API application.
	ApiBuildCommand *string `pulumi:"apiBuildCommand"`
	// The path to the api code within the repository.
	ApiLocation *string `pulumi:"apiLocation"`
	// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
	AppArtifactLocation *string `pulumi:"appArtifactLocation"`
	// A custom command to run during deployment of the static content application.
	AppBuildCommand *string `pulumi:"appBuildCommand"`
	// The path to the app code within the repository.
	AppLocation *string `pulumi:"appLocation"`
	// Github Action secret name override.
	GithubActionSecretNameOverride *string `pulumi:"githubActionSecretNameOverride"`
	// The output path of the app after building.
	OutputLocation *string `pulumi:"outputLocation"`
	// Skip Github Action workflow generation.
	SkipGithubActionWorkflowGeneration *bool `pulumi:"skipGithubActionWorkflowGeneration"`
}

// StaticSiteBuildPropertiesInput is an input type that accepts StaticSiteBuildPropertiesArgs and StaticSiteBuildPropertiesOutput values.
// You can construct a concrete instance of `StaticSiteBuildPropertiesInput` via:
//
//	StaticSiteBuildPropertiesArgs{...}
type StaticSiteBuildPropertiesInput interface {
	pulumi.Input

	ToStaticSiteBuildPropertiesOutput() StaticSiteBuildPropertiesOutput
	ToStaticSiteBuildPropertiesOutputWithContext(context.Context) StaticSiteBuildPropertiesOutput
}

// Build properties for the static site.
type StaticSiteBuildPropertiesArgs struct {
	// A custom command to run during deployment of the Azure Functions API application.
	ApiBuildCommand pulumi.StringPtrInput `pulumi:"apiBuildCommand"`
	// The path to the api code within the repository.
	ApiLocation pulumi.StringPtrInput `pulumi:"apiLocation"`
	// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
	AppArtifactLocation pulumi.StringPtrInput `pulumi:"appArtifactLocation"`
	// A custom command to run during deployment of the static content application.
	AppBuildCommand pulumi.StringPtrInput `pulumi:"appBuildCommand"`
	// The path to the app code within the repository.
	AppLocation pulumi.StringPtrInput `pulumi:"appLocation"`
	// Github Action secret name override.
	GithubActionSecretNameOverride pulumi.StringPtrInput `pulumi:"githubActionSecretNameOverride"`
	// The output path of the app after building.
	OutputLocation pulumi.StringPtrInput `pulumi:"outputLocation"`
	// Skip Github Action workflow generation.
	SkipGithubActionWorkflowGeneration pulumi.BoolPtrInput `pulumi:"skipGithubActionWorkflowGeneration"`
}

func (StaticSiteBuildPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteBuildProperties)(nil)).Elem()
}

func (i StaticSiteBuildPropertiesArgs) ToStaticSiteBuildPropertiesOutput() StaticSiteBuildPropertiesOutput {
	return i.ToStaticSiteBuildPropertiesOutputWithContext(context.Background())
}

func (i StaticSiteBuildPropertiesArgs) ToStaticSiteBuildPropertiesOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteBuildPropertiesOutput)
}

func (i StaticSiteBuildPropertiesArgs) ToStaticSiteBuildPropertiesPtrOutput() StaticSiteBuildPropertiesPtrOutput {
	return i.ToStaticSiteBuildPropertiesPtrOutputWithContext(context.Background())
}

func (i StaticSiteBuildPropertiesArgs) ToStaticSiteBuildPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteBuildPropertiesOutput).ToStaticSiteBuildPropertiesPtrOutputWithContext(ctx)
}

// StaticSiteBuildPropertiesPtrInput is an input type that accepts StaticSiteBuildPropertiesArgs, StaticSiteBuildPropertiesPtr and StaticSiteBuildPropertiesPtrOutput values.
// You can construct a concrete instance of `StaticSiteBuildPropertiesPtrInput` via:
//
//	        StaticSiteBuildPropertiesArgs{...}
//
//	or:
//
//	        nil
type StaticSiteBuildPropertiesPtrInput interface {
	pulumi.Input

	ToStaticSiteBuildPropertiesPtrOutput() StaticSiteBuildPropertiesPtrOutput
	ToStaticSiteBuildPropertiesPtrOutputWithContext(context.Context) StaticSiteBuildPropertiesPtrOutput
}

type staticSiteBuildPropertiesPtrType StaticSiteBuildPropertiesArgs

func StaticSiteBuildPropertiesPtr(v *StaticSiteBuildPropertiesArgs) StaticSiteBuildPropertiesPtrInput {
	return (*staticSiteBuildPropertiesPtrType)(v)
}

func (*staticSiteBuildPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteBuildProperties)(nil)).Elem()
}

func (i *staticSiteBuildPropertiesPtrType) ToStaticSiteBuildPropertiesPtrOutput() StaticSiteBuildPropertiesPtrOutput {
	return i.ToStaticSiteBuildPropertiesPtrOutputWithContext(context.Background())
}

func (i *staticSiteBuildPropertiesPtrType) ToStaticSiteBuildPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteBuildPropertiesPtrOutput)
}

// Build properties for the static site.
type StaticSiteBuildPropertiesOutput struct{ *pulumi.OutputState }

func (StaticSiteBuildPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteBuildProperties)(nil)).Elem()
}

func (o StaticSiteBuildPropertiesOutput) ToStaticSiteBuildPropertiesOutput() StaticSiteBuildPropertiesOutput {
	return o
}

func (o StaticSiteBuildPropertiesOutput) ToStaticSiteBuildPropertiesOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesOutput {
	return o
}

func (o StaticSiteBuildPropertiesOutput) ToStaticSiteBuildPropertiesPtrOutput() StaticSiteBuildPropertiesPtrOutput {
	return o.ToStaticSiteBuildPropertiesPtrOutputWithContext(context.Background())
}

func (o StaticSiteBuildPropertiesOutput) ToStaticSiteBuildPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticSiteBuildProperties) *StaticSiteBuildProperties {
		return &v
	}).(StaticSiteBuildPropertiesPtrOutput)
}

// A custom command to run during deployment of the Azure Functions API application.
func (o StaticSiteBuildPropertiesOutput) ApiBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *string { return v.ApiBuildCommand }).(pulumi.StringPtrOutput)
}

// The path to the api code within the repository.
func (o StaticSiteBuildPropertiesOutput) ApiLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *string { return v.ApiLocation }).(pulumi.StringPtrOutput)
}

// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
func (o StaticSiteBuildPropertiesOutput) AppArtifactLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *string { return v.AppArtifactLocation }).(pulumi.StringPtrOutput)
}

// A custom command to run during deployment of the static content application.
func (o StaticSiteBuildPropertiesOutput) AppBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *string { return v.AppBuildCommand }).(pulumi.StringPtrOutput)
}

// The path to the app code within the repository.
func (o StaticSiteBuildPropertiesOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *string { return v.AppLocation }).(pulumi.StringPtrOutput)
}

// Github Action secret name override.
func (o StaticSiteBuildPropertiesOutput) GithubActionSecretNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *string { return v.GithubActionSecretNameOverride }).(pulumi.StringPtrOutput)
}

// The output path of the app after building.
func (o StaticSiteBuildPropertiesOutput) OutputLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *string { return v.OutputLocation }).(pulumi.StringPtrOutput)
}

// Skip Github Action workflow generation.
func (o StaticSiteBuildPropertiesOutput) SkipGithubActionWorkflowGeneration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildProperties) *bool { return v.SkipGithubActionWorkflowGeneration }).(pulumi.BoolPtrOutput)
}

type StaticSiteBuildPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StaticSiteBuildPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteBuildProperties)(nil)).Elem()
}

func (o StaticSiteBuildPropertiesPtrOutput) ToStaticSiteBuildPropertiesPtrOutput() StaticSiteBuildPropertiesPtrOutput {
	return o
}

func (o StaticSiteBuildPropertiesPtrOutput) ToStaticSiteBuildPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesPtrOutput {
	return o
}

func (o StaticSiteBuildPropertiesPtrOutput) Elem() StaticSiteBuildPropertiesOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) StaticSiteBuildProperties {
		if v != nil {
			return *v
		}
		var ret StaticSiteBuildProperties
		return ret
	}).(StaticSiteBuildPropertiesOutput)
}

// A custom command to run during deployment of the Azure Functions API application.
func (o StaticSiteBuildPropertiesPtrOutput) ApiBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApiBuildCommand
	}).(pulumi.StringPtrOutput)
}

// The path to the api code within the repository.
func (o StaticSiteBuildPropertiesPtrOutput) ApiLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApiLocation
	}).(pulumi.StringPtrOutput)
}

// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
func (o StaticSiteBuildPropertiesPtrOutput) AppArtifactLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *string {
		if v == nil {
			return nil
		}
		return v.AppArtifactLocation
	}).(pulumi.StringPtrOutput)
}

// A custom command to run during deployment of the static content application.
func (o StaticSiteBuildPropertiesPtrOutput) AppBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *string {
		if v == nil {
			return nil
		}
		return v.AppBuildCommand
	}).(pulumi.StringPtrOutput)
}

// The path to the app code within the repository.
func (o StaticSiteBuildPropertiesPtrOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *string {
		if v == nil {
			return nil
		}
		return v.AppLocation
	}).(pulumi.StringPtrOutput)
}

// Github Action secret name override.
func (o StaticSiteBuildPropertiesPtrOutput) GithubActionSecretNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *string {
		if v == nil {
			return nil
		}
		return v.GithubActionSecretNameOverride
	}).(pulumi.StringPtrOutput)
}

// The output path of the app after building.
func (o StaticSiteBuildPropertiesPtrOutput) OutputLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *string {
		if v == nil {
			return nil
		}
		return v.OutputLocation
	}).(pulumi.StringPtrOutput)
}

// Skip Github Action workflow generation.
func (o StaticSiteBuildPropertiesPtrOutput) SkipGithubActionWorkflowGeneration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildProperties) *bool {
		if v == nil {
			return nil
		}
		return v.SkipGithubActionWorkflowGeneration
	}).(pulumi.BoolPtrOutput)
}

// Build properties for the static site.
type StaticSiteBuildPropertiesResponse struct {
	// A custom command to run during deployment of the Azure Functions API application.
	ApiBuildCommand *string `pulumi:"apiBuildCommand"`
	// The path to the api code within the repository.
	ApiLocation *string `pulumi:"apiLocation"`
	// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
	AppArtifactLocation *string `pulumi:"appArtifactLocation"`
	// A custom command to run during deployment of the static content application.
	AppBuildCommand *string `pulumi:"appBuildCommand"`
	// The path to the app code within the repository.
	AppLocation *string `pulumi:"appLocation"`
	// Github Action secret name override.
	GithubActionSecretNameOverride *string `pulumi:"githubActionSecretNameOverride"`
	// The output path of the app after building.
	OutputLocation *string `pulumi:"outputLocation"`
	// Skip Github Action workflow generation.
	SkipGithubActionWorkflowGeneration *bool `pulumi:"skipGithubActionWorkflowGeneration"`
}

// Build properties for the static site.
type StaticSiteBuildPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StaticSiteBuildPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteBuildPropertiesResponse)(nil)).Elem()
}

func (o StaticSiteBuildPropertiesResponseOutput) ToStaticSiteBuildPropertiesResponseOutput() StaticSiteBuildPropertiesResponseOutput {
	return o
}

func (o StaticSiteBuildPropertiesResponseOutput) ToStaticSiteBuildPropertiesResponseOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesResponseOutput {
	return o
}

// A custom command to run during deployment of the Azure Functions API application.
func (o StaticSiteBuildPropertiesResponseOutput) ApiBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *string { return v.ApiBuildCommand }).(pulumi.StringPtrOutput)
}

// The path to the api code within the repository.
func (o StaticSiteBuildPropertiesResponseOutput) ApiLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *string { return v.ApiLocation }).(pulumi.StringPtrOutput)
}

// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
func (o StaticSiteBuildPropertiesResponseOutput) AppArtifactLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *string { return v.AppArtifactLocation }).(pulumi.StringPtrOutput)
}

// A custom command to run during deployment of the static content application.
func (o StaticSiteBuildPropertiesResponseOutput) AppBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *string { return v.AppBuildCommand }).(pulumi.StringPtrOutput)
}

// The path to the app code within the repository.
func (o StaticSiteBuildPropertiesResponseOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *string { return v.AppLocation }).(pulumi.StringPtrOutput)
}

// Github Action secret name override.
func (o StaticSiteBuildPropertiesResponseOutput) GithubActionSecretNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *string { return v.GithubActionSecretNameOverride }).(pulumi.StringPtrOutput)
}

// The output path of the app after building.
func (o StaticSiteBuildPropertiesResponseOutput) OutputLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *string { return v.OutputLocation }).(pulumi.StringPtrOutput)
}

// Skip Github Action workflow generation.
func (o StaticSiteBuildPropertiesResponseOutput) SkipGithubActionWorkflowGeneration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticSiteBuildPropertiesResponse) *bool { return v.SkipGithubActionWorkflowGeneration }).(pulumi.BoolPtrOutput)
}

type StaticSiteBuildPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (StaticSiteBuildPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteBuildPropertiesResponse)(nil)).Elem()
}

func (o StaticSiteBuildPropertiesResponsePtrOutput) ToStaticSiteBuildPropertiesResponsePtrOutput() StaticSiteBuildPropertiesResponsePtrOutput {
	return o
}

func (o StaticSiteBuildPropertiesResponsePtrOutput) ToStaticSiteBuildPropertiesResponsePtrOutputWithContext(ctx context.Context) StaticSiteBuildPropertiesResponsePtrOutput {
	return o
}

func (o StaticSiteBuildPropertiesResponsePtrOutput) Elem() StaticSiteBuildPropertiesResponseOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) StaticSiteBuildPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret StaticSiteBuildPropertiesResponse
		return ret
	}).(StaticSiteBuildPropertiesResponseOutput)
}

// A custom command to run during deployment of the Azure Functions API application.
func (o StaticSiteBuildPropertiesResponsePtrOutput) ApiBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiBuildCommand
	}).(pulumi.StringPtrOutput)
}

// The path to the api code within the repository.
func (o StaticSiteBuildPropertiesResponsePtrOutput) ApiLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiLocation
	}).(pulumi.StringPtrOutput)
}

// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
func (o StaticSiteBuildPropertiesResponsePtrOutput) AppArtifactLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppArtifactLocation
	}).(pulumi.StringPtrOutput)
}

// A custom command to run during deployment of the static content application.
func (o StaticSiteBuildPropertiesResponsePtrOutput) AppBuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppBuildCommand
	}).(pulumi.StringPtrOutput)
}

// The path to the app code within the repository.
func (o StaticSiteBuildPropertiesResponsePtrOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppLocation
	}).(pulumi.StringPtrOutput)
}

// Github Action secret name override.
func (o StaticSiteBuildPropertiesResponsePtrOutput) GithubActionSecretNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.GithubActionSecretNameOverride
	}).(pulumi.StringPtrOutput)
}

// The output path of the app after building.
func (o StaticSiteBuildPropertiesResponsePtrOutput) OutputLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OutputLocation
	}).(pulumi.StringPtrOutput)
}

// Skip Github Action workflow generation.
func (o StaticSiteBuildPropertiesResponsePtrOutput) SkipGithubActionWorkflowGeneration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StaticSiteBuildPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SkipGithubActionWorkflowGeneration
	}).(pulumi.BoolPtrOutput)
}

// Template Options for the static site.
type StaticSiteTemplateOptions struct {
	// Description of the newly generated repository.
	Description *string `pulumi:"description"`
	// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
	IsPrivate *bool `pulumi:"isPrivate"`
	// Owner of the newly generated repository.
	Owner *string `pulumi:"owner"`
	// Name of the newly generated repository.
	RepositoryName *string `pulumi:"repositoryName"`
	// URL of the template repository. The newly generated repository will be based on this one.
	TemplateRepositoryUrl *string `pulumi:"templateRepositoryUrl"`
}

// StaticSiteTemplateOptionsInput is an input type that accepts StaticSiteTemplateOptionsArgs and StaticSiteTemplateOptionsOutput values.
// You can construct a concrete instance of `StaticSiteTemplateOptionsInput` via:
//
//	StaticSiteTemplateOptionsArgs{...}
type StaticSiteTemplateOptionsInput interface {
	pulumi.Input

	ToStaticSiteTemplateOptionsOutput() StaticSiteTemplateOptionsOutput
	ToStaticSiteTemplateOptionsOutputWithContext(context.Context) StaticSiteTemplateOptionsOutput
}

// Template Options for the static site.
type StaticSiteTemplateOptionsArgs struct {
	// Description of the newly generated repository.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
	IsPrivate pulumi.BoolPtrInput `pulumi:"isPrivate"`
	// Owner of the newly generated repository.
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// Name of the newly generated repository.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// URL of the template repository. The newly generated repository will be based on this one.
	TemplateRepositoryUrl pulumi.StringPtrInput `pulumi:"templateRepositoryUrl"`
}

func (StaticSiteTemplateOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteTemplateOptions)(nil)).Elem()
}

func (i StaticSiteTemplateOptionsArgs) ToStaticSiteTemplateOptionsOutput() StaticSiteTemplateOptionsOutput {
	return i.ToStaticSiteTemplateOptionsOutputWithContext(context.Background())
}

func (i StaticSiteTemplateOptionsArgs) ToStaticSiteTemplateOptionsOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteTemplateOptionsOutput)
}

func (i StaticSiteTemplateOptionsArgs) ToStaticSiteTemplateOptionsPtrOutput() StaticSiteTemplateOptionsPtrOutput {
	return i.ToStaticSiteTemplateOptionsPtrOutputWithContext(context.Background())
}

func (i StaticSiteTemplateOptionsArgs) ToStaticSiteTemplateOptionsPtrOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteTemplateOptionsOutput).ToStaticSiteTemplateOptionsPtrOutputWithContext(ctx)
}

// StaticSiteTemplateOptionsPtrInput is an input type that accepts StaticSiteTemplateOptionsArgs, StaticSiteTemplateOptionsPtr and StaticSiteTemplateOptionsPtrOutput values.
// You can construct a concrete instance of `StaticSiteTemplateOptionsPtrInput` via:
//
//	        StaticSiteTemplateOptionsArgs{...}
//
//	or:
//
//	        nil
type StaticSiteTemplateOptionsPtrInput interface {
	pulumi.Input

	ToStaticSiteTemplateOptionsPtrOutput() StaticSiteTemplateOptionsPtrOutput
	ToStaticSiteTemplateOptionsPtrOutputWithContext(context.Context) StaticSiteTemplateOptionsPtrOutput
}

type staticSiteTemplateOptionsPtrType StaticSiteTemplateOptionsArgs

func StaticSiteTemplateOptionsPtr(v *StaticSiteTemplateOptionsArgs) StaticSiteTemplateOptionsPtrInput {
	return (*staticSiteTemplateOptionsPtrType)(v)
}

func (*staticSiteTemplateOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteTemplateOptions)(nil)).Elem()
}

func (i *staticSiteTemplateOptionsPtrType) ToStaticSiteTemplateOptionsPtrOutput() StaticSiteTemplateOptionsPtrOutput {
	return i.ToStaticSiteTemplateOptionsPtrOutputWithContext(context.Background())
}

func (i *staticSiteTemplateOptionsPtrType) ToStaticSiteTemplateOptionsPtrOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteTemplateOptionsPtrOutput)
}

// Template Options for the static site.
type StaticSiteTemplateOptionsOutput struct{ *pulumi.OutputState }

func (StaticSiteTemplateOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteTemplateOptions)(nil)).Elem()
}

func (o StaticSiteTemplateOptionsOutput) ToStaticSiteTemplateOptionsOutput() StaticSiteTemplateOptionsOutput {
	return o
}

func (o StaticSiteTemplateOptionsOutput) ToStaticSiteTemplateOptionsOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsOutput {
	return o
}

func (o StaticSiteTemplateOptionsOutput) ToStaticSiteTemplateOptionsPtrOutput() StaticSiteTemplateOptionsPtrOutput {
	return o.ToStaticSiteTemplateOptionsPtrOutputWithContext(context.Background())
}

func (o StaticSiteTemplateOptionsOutput) ToStaticSiteTemplateOptionsPtrOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticSiteTemplateOptions) *StaticSiteTemplateOptions {
		return &v
	}).(StaticSiteTemplateOptionsPtrOutput)
}

// Description of the newly generated repository.
func (o StaticSiteTemplateOptionsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptions) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
func (o StaticSiteTemplateOptionsOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptions) *bool { return v.IsPrivate }).(pulumi.BoolPtrOutput)
}

// Owner of the newly generated repository.
func (o StaticSiteTemplateOptionsOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptions) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// Name of the newly generated repository.
func (o StaticSiteTemplateOptionsOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptions) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// URL of the template repository. The newly generated repository will be based on this one.
func (o StaticSiteTemplateOptionsOutput) TemplateRepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptions) *string { return v.TemplateRepositoryUrl }).(pulumi.StringPtrOutput)
}

type StaticSiteTemplateOptionsPtrOutput struct{ *pulumi.OutputState }

func (StaticSiteTemplateOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteTemplateOptions)(nil)).Elem()
}

func (o StaticSiteTemplateOptionsPtrOutput) ToStaticSiteTemplateOptionsPtrOutput() StaticSiteTemplateOptionsPtrOutput {
	return o
}

func (o StaticSiteTemplateOptionsPtrOutput) ToStaticSiteTemplateOptionsPtrOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsPtrOutput {
	return o
}

func (o StaticSiteTemplateOptionsPtrOutput) Elem() StaticSiteTemplateOptionsOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptions) StaticSiteTemplateOptions {
		if v != nil {
			return *v
		}
		var ret StaticSiteTemplateOptions
		return ret
	}).(StaticSiteTemplateOptionsOutput)
}

// Description of the newly generated repository.
func (o StaticSiteTemplateOptionsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptions) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
func (o StaticSiteTemplateOptionsPtrOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IsPrivate
	}).(pulumi.BoolPtrOutput)
}

// Owner of the newly generated repository.
func (o StaticSiteTemplateOptionsPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptions) *string {
		if v == nil {
			return nil
		}
		return v.Owner
	}).(pulumi.StringPtrOutput)
}

// Name of the newly generated repository.
func (o StaticSiteTemplateOptionsPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptions) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// URL of the template repository. The newly generated repository will be based on this one.
func (o StaticSiteTemplateOptionsPtrOutput) TemplateRepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptions) *string {
		if v == nil {
			return nil
		}
		return v.TemplateRepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// Template Options for the static site.
type StaticSiteTemplateOptionsResponse struct {
	// Description of the newly generated repository.
	Description *string `pulumi:"description"`
	// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
	IsPrivate *bool `pulumi:"isPrivate"`
	// Owner of the newly generated repository.
	Owner *string `pulumi:"owner"`
	// Name of the newly generated repository.
	RepositoryName *string `pulumi:"repositoryName"`
	// URL of the template repository. The newly generated repository will be based on this one.
	TemplateRepositoryUrl *string `pulumi:"templateRepositoryUrl"`
}

// Template Options for the static site.
type StaticSiteTemplateOptionsResponseOutput struct{ *pulumi.OutputState }

func (StaticSiteTemplateOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteTemplateOptionsResponse)(nil)).Elem()
}

func (o StaticSiteTemplateOptionsResponseOutput) ToStaticSiteTemplateOptionsResponseOutput() StaticSiteTemplateOptionsResponseOutput {
	return o
}

func (o StaticSiteTemplateOptionsResponseOutput) ToStaticSiteTemplateOptionsResponseOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsResponseOutput {
	return o
}

// Description of the newly generated repository.
func (o StaticSiteTemplateOptionsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptionsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
func (o StaticSiteTemplateOptionsResponseOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptionsResponse) *bool { return v.IsPrivate }).(pulumi.BoolPtrOutput)
}

// Owner of the newly generated repository.
func (o StaticSiteTemplateOptionsResponseOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptionsResponse) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// Name of the newly generated repository.
func (o StaticSiteTemplateOptionsResponseOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptionsResponse) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// URL of the template repository. The newly generated repository will be based on this one.
func (o StaticSiteTemplateOptionsResponseOutput) TemplateRepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteTemplateOptionsResponse) *string { return v.TemplateRepositoryUrl }).(pulumi.StringPtrOutput)
}

type StaticSiteTemplateOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (StaticSiteTemplateOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteTemplateOptionsResponse)(nil)).Elem()
}

func (o StaticSiteTemplateOptionsResponsePtrOutput) ToStaticSiteTemplateOptionsResponsePtrOutput() StaticSiteTemplateOptionsResponsePtrOutput {
	return o
}

func (o StaticSiteTemplateOptionsResponsePtrOutput) ToStaticSiteTemplateOptionsResponsePtrOutputWithContext(ctx context.Context) StaticSiteTemplateOptionsResponsePtrOutput {
	return o
}

func (o StaticSiteTemplateOptionsResponsePtrOutput) Elem() StaticSiteTemplateOptionsResponseOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptionsResponse) StaticSiteTemplateOptionsResponse {
		if v != nil {
			return *v
		}
		var ret StaticSiteTemplateOptionsResponse
		return ret
	}).(StaticSiteTemplateOptionsResponseOutput)
}

// Description of the newly generated repository.
func (o StaticSiteTemplateOptionsResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
func (o StaticSiteTemplateOptionsResponsePtrOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsPrivate
	}).(pulumi.BoolPtrOutput)
}

// Owner of the newly generated repository.
func (o StaticSiteTemplateOptionsResponsePtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Owner
	}).(pulumi.StringPtrOutput)
}

// Name of the newly generated repository.
func (o StaticSiteTemplateOptionsResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// URL of the template repository. The newly generated repository will be based on this one.
func (o StaticSiteTemplateOptionsResponsePtrOutput) TemplateRepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteTemplateOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TemplateRepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// Static Site User ARM resource.
type StaticSiteUserARMResourceResponse struct {
	// The display name for the static site user.
	DisplayName string `pulumi:"displayName"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// The identity provider for the static site user.
	Provider string `pulumi:"provider"`
	// The roles for the static site user, in free-form string format
	Roles *string `pulumi:"roles"`
	// Resource type.
	Type string `pulumi:"type"`
	// The user id for the static site user.
	UserId string `pulumi:"userId"`
}

// Static Site User ARM resource.
type StaticSiteUserARMResourceResponseOutput struct{ *pulumi.OutputState }

func (StaticSiteUserARMResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteUserARMResourceResponse)(nil)).Elem()
}

func (o StaticSiteUserARMResourceResponseOutput) ToStaticSiteUserARMResourceResponseOutput() StaticSiteUserARMResourceResponseOutput {
	return o
}

func (o StaticSiteUserARMResourceResponseOutput) ToStaticSiteUserARMResourceResponseOutputWithContext(ctx context.Context) StaticSiteUserARMResourceResponseOutput {
	return o
}

// The display name for the static site user.
func (o StaticSiteUserARMResourceResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Resource Id.
func (o StaticSiteUserARMResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o StaticSiteUserARMResourceResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o StaticSiteUserARMResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The identity provider for the static site user.
func (o StaticSiteUserARMResourceResponseOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Provider }).(pulumi.StringOutput)
}

// The roles for the static site user, in free-form string format
func (o StaticSiteUserARMResourceResponseOutput) Roles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) *string { return v.Roles }).(pulumi.StringPtrOutput)
}

// Resource type.
func (o StaticSiteUserARMResourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user id for the static site user.
func (o StaticSiteUserARMResourceResponseOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserARMResourceResponse) string { return v.UserId }).(pulumi.StringOutput)
}

type StaticSiteUserARMResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (StaticSiteUserARMResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticSiteUserARMResourceResponse)(nil)).Elem()
}

func (o StaticSiteUserARMResourceResponseArrayOutput) ToStaticSiteUserARMResourceResponseArrayOutput() StaticSiteUserARMResourceResponseArrayOutput {
	return o
}

func (o StaticSiteUserARMResourceResponseArrayOutput) ToStaticSiteUserARMResourceResponseArrayOutputWithContext(ctx context.Context) StaticSiteUserARMResourceResponseArrayOutput {
	return o
}

func (o StaticSiteUserARMResourceResponseArrayOutput) Index(i pulumi.IntInput) StaticSiteUserARMResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticSiteUserARMResourceResponse {
		return vs[0].([]StaticSiteUserARMResourceResponse)[vs[1].(int)]
	}).(StaticSiteUserARMResourceResponseOutput)
}

// A static site user provided function.
type StaticSiteUserProvidedFunctionAppResponse struct {
	// The date and time on which the function app was registered with the static site.
	CreatedOn string `pulumi:"createdOn"`
	// The region of the function app registered with the static site
	FunctionAppRegion *string `pulumi:"functionAppRegion"`
	// The resource id of the function app registered with the static site
	FunctionAppResourceId *string `pulumi:"functionAppResourceId"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// Resource type.
	Type string `pulumi:"type"`
}

// A static site user provided function.
type StaticSiteUserProvidedFunctionAppResponseOutput struct{ *pulumi.OutputState }

func (StaticSiteUserProvidedFunctionAppResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteUserProvidedFunctionAppResponse)(nil)).Elem()
}

func (o StaticSiteUserProvidedFunctionAppResponseOutput) ToStaticSiteUserProvidedFunctionAppResponseOutput() StaticSiteUserProvidedFunctionAppResponseOutput {
	return o
}

func (o StaticSiteUserProvidedFunctionAppResponseOutput) ToStaticSiteUserProvidedFunctionAppResponseOutputWithContext(ctx context.Context) StaticSiteUserProvidedFunctionAppResponseOutput {
	return o
}

// The date and time on which the function app was registered with the static site.
func (o StaticSiteUserProvidedFunctionAppResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserProvidedFunctionAppResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The region of the function app registered with the static site
func (o StaticSiteUserProvidedFunctionAppResponseOutput) FunctionAppRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteUserProvidedFunctionAppResponse) *string { return v.FunctionAppRegion }).(pulumi.StringPtrOutput)
}

// The resource id of the function app registered with the static site
func (o StaticSiteUserProvidedFunctionAppResponseOutput) FunctionAppResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteUserProvidedFunctionAppResponse) *string { return v.FunctionAppResourceId }).(pulumi.StringPtrOutput)
}

// Resource Id.
func (o StaticSiteUserProvidedFunctionAppResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserProvidedFunctionAppResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o StaticSiteUserProvidedFunctionAppResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteUserProvidedFunctionAppResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o StaticSiteUserProvidedFunctionAppResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserProvidedFunctionAppResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Resource type.
func (o StaticSiteUserProvidedFunctionAppResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteUserProvidedFunctionAppResponse) string { return v.Type }).(pulumi.StringOutput)
}

type StaticSiteUserProvidedFunctionAppResponseArrayOutput struct{ *pulumi.OutputState }

func (StaticSiteUserProvidedFunctionAppResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticSiteUserProvidedFunctionAppResponse)(nil)).Elem()
}

func (o StaticSiteUserProvidedFunctionAppResponseArrayOutput) ToStaticSiteUserProvidedFunctionAppResponseArrayOutput() StaticSiteUserProvidedFunctionAppResponseArrayOutput {
	return o
}

func (o StaticSiteUserProvidedFunctionAppResponseArrayOutput) ToStaticSiteUserProvidedFunctionAppResponseArrayOutputWithContext(ctx context.Context) StaticSiteUserProvidedFunctionAppResponseArrayOutput {
	return o
}

func (o StaticSiteUserProvidedFunctionAppResponseArrayOutput) Index(i pulumi.IntInput) StaticSiteUserProvidedFunctionAppResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticSiteUserProvidedFunctionAppResponse {
		return vs[0].([]StaticSiteUserProvidedFunctionAppResponse)[vs[1].(int)]
	}).(StaticSiteUserProvidedFunctionAppResponseOutput)
}

// The configuration settings of the token store.
type TokenStore struct {
	// The configuration settings of the storage of the tokens if blob storage is used.
	AzureBlobStorage *BlobStorageTokenStore `pulumi:"azureBlobStorage"`
	// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
	//  The default is <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the storage of the tokens if a file system is used.
	FileSystem *FileSystemTokenStore `pulumi:"fileSystem"`
	// The number of hours after session token expiration that a session token can be used to
	// call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours *float64 `pulumi:"tokenRefreshExtensionHours"`
}

// TokenStoreInput is an input type that accepts TokenStoreArgs and TokenStoreOutput values.
// You can construct a concrete instance of `TokenStoreInput` via:
//
//	TokenStoreArgs{...}
type TokenStoreInput interface {
	pulumi.Input

	ToTokenStoreOutput() TokenStoreOutput
	ToTokenStoreOutputWithContext(context.Context) TokenStoreOutput
}

// The configuration settings of the token store.
type TokenStoreArgs struct {
	// The configuration settings of the storage of the tokens if blob storage is used.
	AzureBlobStorage BlobStorageTokenStorePtrInput `pulumi:"azureBlobStorage"`
	// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
	//  The default is <code>false</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the storage of the tokens if a file system is used.
	FileSystem FileSystemTokenStorePtrInput `pulumi:"fileSystem"`
	// The number of hours after session token expiration that a session token can be used to
	// call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours pulumi.Float64PtrInput `pulumi:"tokenRefreshExtensionHours"`
}

func (TokenStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenStore)(nil)).Elem()
}

func (i TokenStoreArgs) ToTokenStoreOutput() TokenStoreOutput {
	return i.ToTokenStoreOutputWithContext(context.Background())
}

func (i TokenStoreArgs) ToTokenStoreOutputWithContext(ctx context.Context) TokenStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenStoreOutput)
}

func (i TokenStoreArgs) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return i.ToTokenStorePtrOutputWithContext(context.Background())
}

func (i TokenStoreArgs) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenStoreOutput).ToTokenStorePtrOutputWithContext(ctx)
}

// TokenStorePtrInput is an input type that accepts TokenStoreArgs, TokenStorePtr and TokenStorePtrOutput values.
// You can construct a concrete instance of `TokenStorePtrInput` via:
//
//	        TokenStoreArgs{...}
//
//	or:
//
//	        nil
type TokenStorePtrInput interface {
	pulumi.Input

	ToTokenStorePtrOutput() TokenStorePtrOutput
	ToTokenStorePtrOutputWithContext(context.Context) TokenStorePtrOutput
}

type tokenStorePtrType TokenStoreArgs

func TokenStorePtr(v *TokenStoreArgs) TokenStorePtrInput {
	return (*tokenStorePtrType)(v)
}

func (*tokenStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenStore)(nil)).Elem()
}

func (i *tokenStorePtrType) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return i.ToTokenStorePtrOutputWithContext(context.Background())
}

func (i *tokenStorePtrType) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenStorePtrOutput)
}

// The configuration settings of the token store.
type TokenStoreOutput struct{ *pulumi.OutputState }

func (TokenStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenStore)(nil)).Elem()
}

func (o TokenStoreOutput) ToTokenStoreOutput() TokenStoreOutput {
	return o
}

func (o TokenStoreOutput) ToTokenStoreOutputWithContext(ctx context.Context) TokenStoreOutput {
	return o
}

func (o TokenStoreOutput) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return o.ToTokenStorePtrOutputWithContext(context.Background())
}

func (o TokenStoreOutput) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenStore) *TokenStore {
		return &v
	}).(TokenStorePtrOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStoreOutput) AzureBlobStorage() BlobStorageTokenStorePtrOutput {
	return o.ApplyT(func(v TokenStore) *BlobStorageTokenStore { return v.AzureBlobStorage }).(BlobStorageTokenStorePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStoreOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenStore) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the storage of the tokens if a file system is used.
func (o TokenStoreOutput) FileSystem() FileSystemTokenStorePtrOutput {
	return o.ApplyT(func(v TokenStore) *FileSystemTokenStore { return v.FileSystem }).(FileSystemTokenStorePtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStoreOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TokenStore) *float64 { return v.TokenRefreshExtensionHours }).(pulumi.Float64PtrOutput)
}

type TokenStorePtrOutput struct{ *pulumi.OutputState }

func (TokenStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenStore)(nil)).Elem()
}

func (o TokenStorePtrOutput) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return o
}

func (o TokenStorePtrOutput) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return o
}

func (o TokenStorePtrOutput) Elem() TokenStoreOutput {
	return o.ApplyT(func(v *TokenStore) TokenStore {
		if v != nil {
			return *v
		}
		var ret TokenStore
		return ret
	}).(TokenStoreOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStorePtrOutput) AzureBlobStorage() BlobStorageTokenStorePtrOutput {
	return o.ApplyT(func(v *TokenStore) *BlobStorageTokenStore {
		if v == nil {
			return nil
		}
		return v.AzureBlobStorage
	}).(BlobStorageTokenStorePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStorePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenStore) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the storage of the tokens if a file system is used.
func (o TokenStorePtrOutput) FileSystem() FileSystemTokenStorePtrOutput {
	return o.ApplyT(func(v *TokenStore) *FileSystemTokenStore {
		if v == nil {
			return nil
		}
		return v.FileSystem
	}).(FileSystemTokenStorePtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStorePtrOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TokenStore) *float64 {
		if v == nil {
			return nil
		}
		return v.TokenRefreshExtensionHours
	}).(pulumi.Float64PtrOutput)
}

// The configuration settings of the token store.
type TokenStoreResponse struct {
	// The configuration settings of the storage of the tokens if blob storage is used.
	AzureBlobStorage *BlobStorageTokenStoreResponse `pulumi:"azureBlobStorage"`
	// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
	//  The default is <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the storage of the tokens if a file system is used.
	FileSystem *FileSystemTokenStoreResponse `pulumi:"fileSystem"`
	// The number of hours after session token expiration that a session token can be used to
	// call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours *float64 `pulumi:"tokenRefreshExtensionHours"`
}

// The configuration settings of the token store.
type TokenStoreResponseOutput struct{ *pulumi.OutputState }

func (TokenStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenStoreResponse)(nil)).Elem()
}

func (o TokenStoreResponseOutput) ToTokenStoreResponseOutput() TokenStoreResponseOutput {
	return o
}

func (o TokenStoreResponseOutput) ToTokenStoreResponseOutputWithContext(ctx context.Context) TokenStoreResponseOutput {
	return o
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStoreResponseOutput) AzureBlobStorage() BlobStorageTokenStoreResponsePtrOutput {
	return o.ApplyT(func(v TokenStoreResponse) *BlobStorageTokenStoreResponse { return v.AzureBlobStorage }).(BlobStorageTokenStoreResponsePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStoreResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenStoreResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the storage of the tokens if a file system is used.
func (o TokenStoreResponseOutput) FileSystem() FileSystemTokenStoreResponsePtrOutput {
	return o.ApplyT(func(v TokenStoreResponse) *FileSystemTokenStoreResponse { return v.FileSystem }).(FileSystemTokenStoreResponsePtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStoreResponseOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TokenStoreResponse) *float64 { return v.TokenRefreshExtensionHours }).(pulumi.Float64PtrOutput)
}

type TokenStoreResponsePtrOutput struct{ *pulumi.OutputState }

func (TokenStoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenStoreResponse)(nil)).Elem()
}

func (o TokenStoreResponsePtrOutput) ToTokenStoreResponsePtrOutput() TokenStoreResponsePtrOutput {
	return o
}

func (o TokenStoreResponsePtrOutput) ToTokenStoreResponsePtrOutputWithContext(ctx context.Context) TokenStoreResponsePtrOutput {
	return o
}

func (o TokenStoreResponsePtrOutput) Elem() TokenStoreResponseOutput {
	return o.ApplyT(func(v *TokenStoreResponse) TokenStoreResponse {
		if v != nil {
			return *v
		}
		var ret TokenStoreResponse
		return ret
	}).(TokenStoreResponseOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStoreResponsePtrOutput) AzureBlobStorage() BlobStorageTokenStoreResponsePtrOutput {
	return o.ApplyT(func(v *TokenStoreResponse) *BlobStorageTokenStoreResponse {
		if v == nil {
			return nil
		}
		return v.AzureBlobStorage
	}).(BlobStorageTokenStoreResponsePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStoreResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenStoreResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the storage of the tokens if a file system is used.
func (o TokenStoreResponsePtrOutput) FileSystem() FileSystemTokenStoreResponsePtrOutput {
	return o.ApplyT(func(v *TokenStoreResponse) *FileSystemTokenStoreResponse {
		if v == nil {
			return nil
		}
		return v.FileSystem
	}).(FileSystemTokenStoreResponsePtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStoreResponsePtrOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TokenStoreResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TokenRefreshExtensionHours
	}).(pulumi.Float64PtrOutput)
}

// The configuration settings of the Twitter provider.
type Twitter struct {
	// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the app registration for the Twitter provider.
	Registration *TwitterRegistration `pulumi:"registration"`
}

// TwitterInput is an input type that accepts TwitterArgs and TwitterOutput values.
// You can construct a concrete instance of `TwitterInput` via:
//
//	TwitterArgs{...}
type TwitterInput interface {
	pulumi.Input

	ToTwitterOutput() TwitterOutput
	ToTwitterOutputWithContext(context.Context) TwitterOutput
}

// The configuration settings of the Twitter provider.
type TwitterArgs struct {
	// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the app registration for the Twitter provider.
	Registration TwitterRegistrationPtrInput `pulumi:"registration"`
}

func (TwitterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Twitter)(nil)).Elem()
}

func (i TwitterArgs) ToTwitterOutput() TwitterOutput {
	return i.ToTwitterOutputWithContext(context.Background())
}

func (i TwitterArgs) ToTwitterOutputWithContext(ctx context.Context) TwitterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterOutput)
}

func (i TwitterArgs) ToTwitterPtrOutput() TwitterPtrOutput {
	return i.ToTwitterPtrOutputWithContext(context.Background())
}

func (i TwitterArgs) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterOutput).ToTwitterPtrOutputWithContext(ctx)
}

// TwitterPtrInput is an input type that accepts TwitterArgs, TwitterPtr and TwitterPtrOutput values.
// You can construct a concrete instance of `TwitterPtrInput` via:
//
//	        TwitterArgs{...}
//
//	or:
//
//	        nil
type TwitterPtrInput interface {
	pulumi.Input

	ToTwitterPtrOutput() TwitterPtrOutput
	ToTwitterPtrOutputWithContext(context.Context) TwitterPtrOutput
}

type twitterPtrType TwitterArgs

func TwitterPtr(v *TwitterArgs) TwitterPtrInput {
	return (*twitterPtrType)(v)
}

func (*twitterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Twitter)(nil)).Elem()
}

func (i *twitterPtrType) ToTwitterPtrOutput() TwitterPtrOutput {
	return i.ToTwitterPtrOutputWithContext(context.Background())
}

func (i *twitterPtrType) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterPtrOutput)
}

// The configuration settings of the Twitter provider.
type TwitterOutput struct{ *pulumi.OutputState }

func (TwitterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Twitter)(nil)).Elem()
}

func (o TwitterOutput) ToTwitterOutput() TwitterOutput {
	return o
}

func (o TwitterOutput) ToTwitterOutputWithContext(ctx context.Context) TwitterOutput {
	return o
}

func (o TwitterOutput) ToTwitterPtrOutput() TwitterPtrOutput {
	return o.ToTwitterPtrOutputWithContext(context.Background())
}

func (o TwitterOutput) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Twitter) *Twitter {
		return &v
	}).(TwitterPtrOutput)
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Twitter) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterOutput) Registration() TwitterRegistrationPtrOutput {
	return o.ApplyT(func(v Twitter) *TwitterRegistration { return v.Registration }).(TwitterRegistrationPtrOutput)
}

type TwitterPtrOutput struct{ *pulumi.OutputState }

func (TwitterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Twitter)(nil)).Elem()
}

func (o TwitterPtrOutput) ToTwitterPtrOutput() TwitterPtrOutput {
	return o
}

func (o TwitterPtrOutput) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return o
}

func (o TwitterPtrOutput) Elem() TwitterOutput {
	return o.ApplyT(func(v *Twitter) Twitter {
		if v != nil {
			return *v
		}
		var ret Twitter
		return ret
	}).(TwitterOutput)
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Twitter) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterPtrOutput) Registration() TwitterRegistrationPtrOutput {
	return o.ApplyT(func(v *Twitter) *TwitterRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(TwitterRegistrationPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistration struct {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// This setting is required for enabling Twitter Sign-In.
	// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
	ConsumerKey *string `pulumi:"consumerKey"`
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
	// application used for sign-in.
	ConsumerSecretSettingName *string `pulumi:"consumerSecretSettingName"`
}

// TwitterRegistrationInput is an input type that accepts TwitterRegistrationArgs and TwitterRegistrationOutput values.
// You can construct a concrete instance of `TwitterRegistrationInput` via:
//
//	TwitterRegistrationArgs{...}
type TwitterRegistrationInput interface {
	pulumi.Input

	ToTwitterRegistrationOutput() TwitterRegistrationOutput
	ToTwitterRegistrationOutputWithContext(context.Context) TwitterRegistrationOutput
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationArgs struct {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// This setting is required for enabling Twitter Sign-In.
	// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
	ConsumerKey pulumi.StringPtrInput `pulumi:"consumerKey"`
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
	// application used for sign-in.
	ConsumerSecretSettingName pulumi.StringPtrInput `pulumi:"consumerSecretSettingName"`
}

func (TwitterRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterRegistration)(nil)).Elem()
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationOutput() TwitterRegistrationOutput {
	return i.ToTwitterRegistrationOutputWithContext(context.Background())
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationOutputWithContext(ctx context.Context) TwitterRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterRegistrationOutput)
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return i.ToTwitterRegistrationPtrOutputWithContext(context.Background())
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterRegistrationOutput).ToTwitterRegistrationPtrOutputWithContext(ctx)
}

// TwitterRegistrationPtrInput is an input type that accepts TwitterRegistrationArgs, TwitterRegistrationPtr and TwitterRegistrationPtrOutput values.
// You can construct a concrete instance of `TwitterRegistrationPtrInput` via:
//
//	        TwitterRegistrationArgs{...}
//
//	or:
//
//	        nil
type TwitterRegistrationPtrInput interface {
	pulumi.Input

	ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput
	ToTwitterRegistrationPtrOutputWithContext(context.Context) TwitterRegistrationPtrOutput
}

type twitterRegistrationPtrType TwitterRegistrationArgs

func TwitterRegistrationPtr(v *TwitterRegistrationArgs) TwitterRegistrationPtrInput {
	return (*twitterRegistrationPtrType)(v)
}

func (*twitterRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterRegistration)(nil)).Elem()
}

func (i *twitterRegistrationPtrType) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return i.ToTwitterRegistrationPtrOutputWithContext(context.Background())
}

func (i *twitterRegistrationPtrType) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterRegistrationPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterRegistration)(nil)).Elem()
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationOutput() TwitterRegistrationOutput {
	return o
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationOutputWithContext(ctx context.Context) TwitterRegistrationOutput {
	return o
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return o.ToTwitterRegistrationPtrOutputWithContext(context.Background())
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TwitterRegistration) *TwitterRegistration {
		return &v
	}).(TwitterRegistrationPtrOutput)
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistration) *string { return v.ConsumerKey }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistration) *string { return v.ConsumerSecretSettingName }).(pulumi.StringPtrOutput)
}

type TwitterRegistrationPtrOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterRegistration)(nil)).Elem()
}

func (o TwitterRegistrationPtrOutput) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return o
}

func (o TwitterRegistrationPtrOutput) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return o
}

func (o TwitterRegistrationPtrOutput) Elem() TwitterRegistrationOutput {
	return o.ApplyT(func(v *TwitterRegistration) TwitterRegistration {
		if v != nil {
			return *v
		}
		var ret TwitterRegistration
		return ret
	}).(TwitterRegistrationOutput)
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationPtrOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerKey
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationPtrOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationResponse struct {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// This setting is required for enabling Twitter Sign-In.
	// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
	ConsumerKey *string `pulumi:"consumerKey"`
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
	// application used for sign-in.
	ConsumerSecretSettingName *string `pulumi:"consumerSecretSettingName"`
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationResponseOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterRegistrationResponse)(nil)).Elem()
}

func (o TwitterRegistrationResponseOutput) ToTwitterRegistrationResponseOutput() TwitterRegistrationResponseOutput {
	return o
}

func (o TwitterRegistrationResponseOutput) ToTwitterRegistrationResponseOutputWithContext(ctx context.Context) TwitterRegistrationResponseOutput {
	return o
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationResponseOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistrationResponse) *string { return v.ConsumerKey }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationResponseOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistrationResponse) *string { return v.ConsumerSecretSettingName }).(pulumi.StringPtrOutput)
}

type TwitterRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterRegistrationResponse)(nil)).Elem()
}

func (o TwitterRegistrationResponsePtrOutput) ToTwitterRegistrationResponsePtrOutput() TwitterRegistrationResponsePtrOutput {
	return o
}

func (o TwitterRegistrationResponsePtrOutput) ToTwitterRegistrationResponsePtrOutputWithContext(ctx context.Context) TwitterRegistrationResponsePtrOutput {
	return o
}

func (o TwitterRegistrationResponsePtrOutput) Elem() TwitterRegistrationResponseOutput {
	return o.ApplyT(func(v *TwitterRegistrationResponse) TwitterRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret TwitterRegistrationResponse
		return ret
	}).(TwitterRegistrationResponseOutput)
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationResponsePtrOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerKey
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationResponsePtrOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Twitter provider.
type TwitterResponse struct {
	// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the app registration for the Twitter provider.
	Registration *TwitterRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Twitter provider.
type TwitterResponseOutput struct{ *pulumi.OutputState }

func (TwitterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterResponse)(nil)).Elem()
}

func (o TwitterResponseOutput) ToTwitterResponseOutput() TwitterResponseOutput {
	return o
}

func (o TwitterResponseOutput) ToTwitterResponseOutputWithContext(ctx context.Context) TwitterResponseOutput {
	return o
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TwitterResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterResponseOutput) Registration() TwitterRegistrationResponsePtrOutput {
	return o.ApplyT(func(v TwitterResponse) *TwitterRegistrationResponse { return v.Registration }).(TwitterRegistrationResponsePtrOutput)
}

type TwitterResponsePtrOutput struct{ *pulumi.OutputState }

func (TwitterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterResponse)(nil)).Elem()
}

func (o TwitterResponsePtrOutput) ToTwitterResponsePtrOutput() TwitterResponsePtrOutput {
	return o
}

func (o TwitterResponsePtrOutput) ToTwitterResponsePtrOutputWithContext(ctx context.Context) TwitterResponsePtrOutput {
	return o
}

func (o TwitterResponsePtrOutput) Elem() TwitterResponseOutput {
	return o.ApplyT(func(v *TwitterResponse) TwitterResponse {
		if v != nil {
			return *v
		}
		var ret TwitterResponse
		return ret
	}).(TwitterResponseOutput)
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TwitterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterResponsePtrOutput) Registration() TwitterRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *TwitterResponse) *TwitterRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(TwitterRegistrationResponsePtrOutput)
}

// User Assigned identity.
type UserAssignedIdentityResponse struct {
	// Client Id of user assigned identity
	ClientId string `pulumi:"clientId"`
	// Principal Id of user assigned identity
	PrincipalId string `pulumi:"principalId"`
}

// User Assigned identity.
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// Client Id of user assigned identity
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Principal Id of user assigned identity
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AllowedAudiencesValidationOutput{})
	pulumi.RegisterOutputType(AllowedAudiencesValidationPtrOutput{})
	pulumi.RegisterOutputType(AllowedAudiencesValidationResponseOutput{})
	pulumi.RegisterOutputType(AllowedAudiencesValidationResponsePtrOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsPtrOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsResponseOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsResponsePtrOutput{})
	pulumi.RegisterOutputType(AppRegistrationOutput{})
	pulumi.RegisterOutputType(AppRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AppRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AppRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AppleOutput{})
	pulumi.RegisterOutputType(ApplePtrOutput{})
	pulumi.RegisterOutputType(AppleRegistrationOutput{})
	pulumi.RegisterOutputType(AppleRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AppleRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AppleRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AppleResponseOutput{})
	pulumi.RegisterOutputType(AppleResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmIdWrapperResponseOutput{})
	pulumi.RegisterOutputType(ArmIdWrapperResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmPlanResponseOutput{})
	pulumi.RegisterOutputType(ArmPlanResponsePtrOutput{})
	pulumi.RegisterOutputType(AuthPlatformOutput{})
	pulumi.RegisterOutputType(AuthPlatformPtrOutput{})
	pulumi.RegisterOutputType(AuthPlatformResponseOutput{})
	pulumi.RegisterOutputType(AuthPlatformResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsPtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsResponseOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsResponsePtrOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStoreOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStorePtrOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStoreResponseOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStoreResponsePtrOutput{})
	pulumi.RegisterOutputType(CapabilityOutput{})
	pulumi.RegisterOutputType(CapabilityArrayOutput{})
	pulumi.RegisterOutputType(CapabilityResponseOutput{})
	pulumi.RegisterOutputType(CapabilityResponseArrayOutput{})
	pulumi.RegisterOutputType(ClientRegistrationOutput{})
	pulumi.RegisterOutputType(ClientRegistrationPtrOutput{})
	pulumi.RegisterOutputType(ClientRegistrationResponseOutput{})
	pulumi.RegisterOutputType(ClientRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(CookieExpirationOutput{})
	pulumi.RegisterOutputType(CookieExpirationPtrOutput{})
	pulumi.RegisterOutputType(CookieExpirationResponseOutput{})
	pulumi.RegisterOutputType(CookieExpirationResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderMapOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderResponseOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderResponseMapOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyPtrOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyResponseOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorEntityResponseOutput{})
	pulumi.RegisterOutputType(ErrorEntityResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorEntityResponseArrayOutput{})
	pulumi.RegisterOutputType(FacebookOutput{})
	pulumi.RegisterOutputType(FacebookPtrOutput{})
	pulumi.RegisterOutputType(FacebookResponseOutput{})
	pulumi.RegisterOutputType(FacebookResponsePtrOutput{})
	pulumi.RegisterOutputType(FileSystemTokenStoreOutput{})
	pulumi.RegisterOutputType(FileSystemTokenStorePtrOutput{})
	pulumi.RegisterOutputType(FileSystemTokenStoreResponseOutput{})
	pulumi.RegisterOutputType(FileSystemTokenStoreResponsePtrOutput{})
	pulumi.RegisterOutputType(ForwardProxyOutput{})
	pulumi.RegisterOutputType(ForwardProxyPtrOutput{})
	pulumi.RegisterOutputType(ForwardProxyResponseOutput{})
	pulumi.RegisterOutputType(ForwardProxyResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubOutput{})
	pulumi.RegisterOutputType(GitHubPtrOutput{})
	pulumi.RegisterOutputType(GitHubResponseOutput{})
	pulumi.RegisterOutputType(GitHubResponsePtrOutput{})
	pulumi.RegisterOutputType(GlobalValidationOutput{})
	pulumi.RegisterOutputType(GlobalValidationPtrOutput{})
	pulumi.RegisterOutputType(GlobalValidationResponseOutput{})
	pulumi.RegisterOutputType(GlobalValidationResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleOutput{})
	pulumi.RegisterOutputType(GooglePtrOutput{})
	pulumi.RegisterOutputType(GoogleResponseOutput{})
	pulumi.RegisterOutputType(GoogleResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsOutput{})
	pulumi.RegisterOutputType(HttpSettingsPtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsResponseOutput{})
	pulumi.RegisterOutputType(HttpSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesPtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesResponseOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentifierResponseOutput{})
	pulumi.RegisterOutputType(IdentifierResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityProvidersOutput{})
	pulumi.RegisterOutputType(IdentityProvidersPtrOutput{})
	pulumi.RegisterOutputType(IdentityProvidersResponseOutput{})
	pulumi.RegisterOutputType(IdentityProvidersResponsePtrOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksPtrOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksResponseOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksResponsePtrOutput{})
	pulumi.RegisterOutputType(LegacyMicrosoftAccountOutput{})
	pulumi.RegisterOutputType(LegacyMicrosoftAccountPtrOutput{})
	pulumi.RegisterOutputType(LegacyMicrosoftAccountResponseOutput{})
	pulumi.RegisterOutputType(LegacyMicrosoftAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(LoginOutput{})
	pulumi.RegisterOutputType(LoginPtrOutput{})
	pulumi.RegisterOutputType(LoginResponseOutput{})
	pulumi.RegisterOutputType(LoginResponsePtrOutput{})
	pulumi.RegisterOutputType(LoginRoutesOutput{})
	pulumi.RegisterOutputType(LoginRoutesPtrOutput{})
	pulumi.RegisterOutputType(LoginRoutesResponseOutput{})
	pulumi.RegisterOutputType(LoginRoutesResponsePtrOutput{})
	pulumi.RegisterOutputType(LoginScopesOutput{})
	pulumi.RegisterOutputType(LoginScopesPtrOutput{})
	pulumi.RegisterOutputType(LoginScopesResponseOutput{})
	pulumi.RegisterOutputType(LoginScopesResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(NonceOutput{})
	pulumi.RegisterOutputType(NoncePtrOutput{})
	pulumi.RegisterOutputType(NonceResponseOutput{})
	pulumi.RegisterOutputType(NonceResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(RemotePrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(RemotePrivateEndpointConnectionResponsePtrOutput{})
	pulumi.RegisterOutputType(ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuCapacityOutput{})
	pulumi.RegisterOutputType(SkuCapacityPtrOutput{})
	pulumi.RegisterOutputType(SkuCapacityResponseOutput{})
	pulumi.RegisterOutputType(SkuCapacityResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuDescriptionOutput{})
	pulumi.RegisterOutputType(SkuDescriptionPtrOutput{})
	pulumi.RegisterOutputType(SkuDescriptionResponseOutput{})
	pulumi.RegisterOutputType(SkuDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(StaticSiteBuildPropertiesOutput{})
	pulumi.RegisterOutputType(StaticSiteBuildPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StaticSiteBuildPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StaticSiteBuildPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(StaticSiteTemplateOptionsOutput{})
	pulumi.RegisterOutputType(StaticSiteTemplateOptionsPtrOutput{})
	pulumi.RegisterOutputType(StaticSiteTemplateOptionsResponseOutput{})
	pulumi.RegisterOutputType(StaticSiteTemplateOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(StaticSiteUserARMResourceResponseOutput{})
	pulumi.RegisterOutputType(StaticSiteUserARMResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(StaticSiteUserProvidedFunctionAppResponseOutput{})
	pulumi.RegisterOutputType(StaticSiteUserProvidedFunctionAppResponseArrayOutput{})
	pulumi.RegisterOutputType(TokenStoreOutput{})
	pulumi.RegisterOutputType(TokenStorePtrOutput{})
	pulumi.RegisterOutputType(TokenStoreResponseOutput{})
	pulumi.RegisterOutputType(TokenStoreResponsePtrOutput{})
	pulumi.RegisterOutputType(TwitterOutput{})
	pulumi.RegisterOutputType(TwitterPtrOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationPtrOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationResponseOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(TwitterResponseOutput{})
	pulumi.RegisterOutputType(TwitterResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
