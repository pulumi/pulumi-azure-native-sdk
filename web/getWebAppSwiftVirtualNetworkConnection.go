// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package web

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description for Gets a Swift Virtual Network connection.
//
// Uses Azure REST API version 2024-04-01.
//
// Other available API versions: 2018-02-01, 2018-11-01, 2019-08-01, 2020-06-01, 2020-09-01, 2020-10-01, 2020-12-01, 2021-01-01, 2021-01-15, 2021-02-01, 2021-03-01, 2022-03-01, 2022-09-01, 2023-01-01, 2023-12-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native web [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupWebAppSwiftVirtualNetworkConnection(ctx *pulumi.Context, args *LookupWebAppSwiftVirtualNetworkConnectionArgs, opts ...pulumi.InvokeOption) (*LookupWebAppSwiftVirtualNetworkConnectionResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupWebAppSwiftVirtualNetworkConnectionResult
	err := ctx.Invoke("azure-native:web:getWebAppSwiftVirtualNetworkConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWebAppSwiftVirtualNetworkConnectionArgs struct {
	// Name of the app.
	Name string `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
type LookupWebAppSwiftVirtualNetworkConnectionResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name string `pulumi:"name"`
	// The Virtual Network subnet's resource ID. This is the subnet that this Web App will join. This subnet must have a delegation to Microsoft.Web/serverFarms defined first.
	SubnetResourceId *string `pulumi:"subnetResourceId"`
	// A flag that specifies if the scale unit this Web App is on supports Swift integration.
	SwiftSupported *bool `pulumi:"swiftSupported"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupWebAppSwiftVirtualNetworkConnectionOutput(ctx *pulumi.Context, args LookupWebAppSwiftVirtualNetworkConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupWebAppSwiftVirtualNetworkConnectionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWebAppSwiftVirtualNetworkConnectionResultOutput, error) {
			args := v.(LookupWebAppSwiftVirtualNetworkConnectionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:web:getWebAppSwiftVirtualNetworkConnection", args, LookupWebAppSwiftVirtualNetworkConnectionResultOutput{}, options).(LookupWebAppSwiftVirtualNetworkConnectionResultOutput), nil
		}).(LookupWebAppSwiftVirtualNetworkConnectionResultOutput)
}

type LookupWebAppSwiftVirtualNetworkConnectionOutputArgs struct {
	// Name of the app.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupWebAppSwiftVirtualNetworkConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebAppSwiftVirtualNetworkConnectionArgs)(nil)).Elem()
}

// Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
type LookupWebAppSwiftVirtualNetworkConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupWebAppSwiftVirtualNetworkConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebAppSwiftVirtualNetworkConnectionResult)(nil)).Elem()
}

func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) ToLookupWebAppSwiftVirtualNetworkConnectionResultOutput() LookupWebAppSwiftVirtualNetworkConnectionResultOutput {
	return o
}

func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) ToLookupWebAppSwiftVirtualNetworkConnectionResultOutputWithContext(ctx context.Context) LookupWebAppSwiftVirtualNetworkConnectionResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSwiftVirtualNetworkConnectionResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Resource Id.
func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSwiftVirtualNetworkConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kind of resource.
func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSwiftVirtualNetworkConnectionResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSwiftVirtualNetworkConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Virtual Network subnet's resource ID. This is the subnet that this Web App will join. This subnet must have a delegation to Microsoft.Web/serverFarms defined first.
func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) SubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWebAppSwiftVirtualNetworkConnectionResult) *string { return v.SubnetResourceId }).(pulumi.StringPtrOutput)
}

// A flag that specifies if the scale unit this Web App is on supports Swift integration.
func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) SwiftSupported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWebAppSwiftVirtualNetworkConnectionResult) *bool { return v.SwiftSupported }).(pulumi.BoolPtrOutput)
}

// Resource type.
func (o LookupWebAppSwiftVirtualNetworkConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebAppSwiftVirtualNetworkConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWebAppSwiftVirtualNetworkConnectionResultOutput{})
}
