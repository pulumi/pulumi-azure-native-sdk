// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230101

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Static Site Database Connection resource.
type StaticSiteDatabaseConnection struct {
	pulumi.CustomResourceState

	// A list of configuration files associated with this database connection.
	ConfigurationFiles StaticSiteDatabaseConnectionConfigurationFileOverviewResponseArrayOutput `pulumi:"configurationFiles"`
	// If present, the identity is used in conjunction with connection string to connect to the database. Use of the system-assigned managed identity is indicated with the string 'SystemAssigned', while use of a user-assigned managed identity is indicated with the resource id of the managed identity resource.
	ConnectionIdentity pulumi.StringPtrOutput `pulumi:"connectionIdentity"`
	// The connection string to use to connect to the database.
	ConnectionString pulumi.StringPtrOutput `pulumi:"connectionString"`
	// Kind of resource.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region of the database resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The resource id of the database.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStaticSiteDatabaseConnection registers a new resource with the given unique name, arguments, and options.
func NewStaticSiteDatabaseConnection(ctx *pulumi.Context,
	name string, args *StaticSiteDatabaseConnectionArgs, opts ...pulumi.ResourceOption) (*StaticSiteDatabaseConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:web:StaticSiteDatabaseConnection"),
		},
		{
			Type: pulumi.String("azure-native:web/v20220901:StaticSiteDatabaseConnection"),
		},
		{
			Type: pulumi.String("azure-native:web/v20231201:StaticSiteDatabaseConnection"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StaticSiteDatabaseConnection
	err := ctx.RegisterResource("azure-native:web/v20230101:StaticSiteDatabaseConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticSiteDatabaseConnection gets an existing StaticSiteDatabaseConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticSiteDatabaseConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticSiteDatabaseConnectionState, opts ...pulumi.ResourceOption) (*StaticSiteDatabaseConnection, error) {
	var resource StaticSiteDatabaseConnection
	err := ctx.ReadResource("azure-native:web/v20230101:StaticSiteDatabaseConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticSiteDatabaseConnection resources.
type staticSiteDatabaseConnectionState struct {
}

type StaticSiteDatabaseConnectionState struct {
}

func (StaticSiteDatabaseConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticSiteDatabaseConnectionState)(nil)).Elem()
}

type staticSiteDatabaseConnectionArgs struct {
	// If present, the identity is used in conjunction with connection string to connect to the database. Use of the system-assigned managed identity is indicated with the string 'SystemAssigned', while use of a user-assigned managed identity is indicated with the resource id of the managed identity resource.
	ConnectionIdentity *string `pulumi:"connectionIdentity"`
	// The connection string to use to connect to the database.
	ConnectionString *string `pulumi:"connectionString"`
	// Name of the database connection.
	DatabaseConnectionName *string `pulumi:"databaseConnectionName"`
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Name of the static site
	Name string `pulumi:"name"`
	// The region of the database resource.
	Region string `pulumi:"region"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource id of the database.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a StaticSiteDatabaseConnection resource.
type StaticSiteDatabaseConnectionArgs struct {
	// If present, the identity is used in conjunction with connection string to connect to the database. Use of the system-assigned managed identity is indicated with the string 'SystemAssigned', while use of a user-assigned managed identity is indicated with the resource id of the managed identity resource.
	ConnectionIdentity pulumi.StringPtrInput
	// The connection string to use to connect to the database.
	ConnectionString pulumi.StringPtrInput
	// Name of the database connection.
	DatabaseConnectionName pulumi.StringPtrInput
	// Kind of resource.
	Kind pulumi.StringPtrInput
	// Name of the static site
	Name pulumi.StringInput
	// The region of the database resource.
	Region pulumi.StringInput
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput
	// The resource id of the database.
	ResourceId pulumi.StringInput
}

func (StaticSiteDatabaseConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticSiteDatabaseConnectionArgs)(nil)).Elem()
}

type StaticSiteDatabaseConnectionInput interface {
	pulumi.Input

	ToStaticSiteDatabaseConnectionOutput() StaticSiteDatabaseConnectionOutput
	ToStaticSiteDatabaseConnectionOutputWithContext(ctx context.Context) StaticSiteDatabaseConnectionOutput
}

func (*StaticSiteDatabaseConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteDatabaseConnection)(nil)).Elem()
}

func (i *StaticSiteDatabaseConnection) ToStaticSiteDatabaseConnectionOutput() StaticSiteDatabaseConnectionOutput {
	return i.ToStaticSiteDatabaseConnectionOutputWithContext(context.Background())
}

func (i *StaticSiteDatabaseConnection) ToStaticSiteDatabaseConnectionOutputWithContext(ctx context.Context) StaticSiteDatabaseConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteDatabaseConnectionOutput)
}

type StaticSiteDatabaseConnectionOutput struct{ *pulumi.OutputState }

func (StaticSiteDatabaseConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteDatabaseConnection)(nil)).Elem()
}

func (o StaticSiteDatabaseConnectionOutput) ToStaticSiteDatabaseConnectionOutput() StaticSiteDatabaseConnectionOutput {
	return o
}

func (o StaticSiteDatabaseConnectionOutput) ToStaticSiteDatabaseConnectionOutputWithContext(ctx context.Context) StaticSiteDatabaseConnectionOutput {
	return o
}

// A list of configuration files associated with this database connection.
func (o StaticSiteDatabaseConnectionOutput) ConfigurationFiles() StaticSiteDatabaseConnectionConfigurationFileOverviewResponseArrayOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) StaticSiteDatabaseConnectionConfigurationFileOverviewResponseArrayOutput {
		return v.ConfigurationFiles
	}).(StaticSiteDatabaseConnectionConfigurationFileOverviewResponseArrayOutput)
}

// If present, the identity is used in conjunction with connection string to connect to the database. Use of the system-assigned managed identity is indicated with the string 'SystemAssigned', while use of a user-assigned managed identity is indicated with the resource id of the managed identity resource.
func (o StaticSiteDatabaseConnectionOutput) ConnectionIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) pulumi.StringPtrOutput { return v.ConnectionIdentity }).(pulumi.StringPtrOutput)
}

// The connection string to use to connect to the database.
func (o StaticSiteDatabaseConnectionOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) pulumi.StringPtrOutput { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// Kind of resource.
func (o StaticSiteDatabaseConnectionOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource Name.
func (o StaticSiteDatabaseConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region of the database resource.
func (o StaticSiteDatabaseConnectionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The resource id of the database.
func (o StaticSiteDatabaseConnectionOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Resource type.
func (o StaticSiteDatabaseConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticSiteDatabaseConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(StaticSiteDatabaseConnectionOutput{})
}
