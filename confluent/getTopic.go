// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluent

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get confluent topic by Name
//
// Uses Azure REST API version 2024-07-01.
//
// Other available API versions: 2025-07-17-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native confluent [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupTopic(ctx *pulumi.Context, args *LookupTopicArgs, opts ...pulumi.InvokeOption) (*LookupTopicResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupTopicResult
	err := ctx.Invoke("azure-native:confluent:getTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTopicArgs struct {
	// Confluent kafka or schema registry cluster id
	ClusterId string `pulumi:"clusterId"`
	// Confluent environment id
	EnvironmentId string `pulumi:"environmentId"`
	// Organization resource name
	OrganizationName string `pulumi:"organizationName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Confluent kafka or schema registry topic name
	TopicName string `pulumi:"topicName"`
}

// Details of topic record
type LookupTopicResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Config Specification of the topic
	Configs *TopicsRelatedLinkResponse `pulumi:"configs"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Input Config Specification of the topic
	InputConfigs []TopicsInputConfigResponse `pulumi:"inputConfigs"`
	// Type of topic
	Kind *string `pulumi:"kind"`
	// Metadata of the record
	Metadata *TopicMetadataEntityResponse `pulumi:"metadata"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Partition Specification of the topic
	Partitions *TopicsRelatedLinkResponse `pulumi:"partitions"`
	// Partition count of the topic
	PartitionsCount *string `pulumi:"partitionsCount"`
	// Partition Reassignment Specification of the topic
	PartitionsReassignments *TopicsRelatedLinkResponse `pulumi:"partitionsReassignments"`
	// Replication factor of the topic
	ReplicationFactor *string `pulumi:"replicationFactor"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Topic Id returned by Confluent
	TopicId *string `pulumi:"topicId"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupTopicOutput(ctx *pulumi.Context, args LookupTopicOutputArgs, opts ...pulumi.InvokeOption) LookupTopicResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTopicResultOutput, error) {
			args := v.(LookupTopicArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:confluent:getTopic", args, LookupTopicResultOutput{}, options).(LookupTopicResultOutput), nil
		}).(LookupTopicResultOutput)
}

type LookupTopicOutputArgs struct {
	// Confluent kafka or schema registry cluster id
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Confluent environment id
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// Organization resource name
	OrganizationName pulumi.StringInput `pulumi:"organizationName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Confluent kafka or schema registry topic name
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (LookupTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicArgs)(nil)).Elem()
}

// Details of topic record
type LookupTopicResultOutput struct{ *pulumi.OutputState }

func (LookupTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicResult)(nil)).Elem()
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutput() LookupTopicResultOutput {
	return o
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutputWithContext(ctx context.Context) LookupTopicResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupTopicResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Config Specification of the topic
func (o LookupTopicResultOutput) Configs() TopicsRelatedLinkResponsePtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *TopicsRelatedLinkResponse { return v.Configs }).(TopicsRelatedLinkResponsePtrOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

// Input Config Specification of the topic
func (o LookupTopicResultOutput) InputConfigs() TopicsInputConfigResponseArrayOutput {
	return o.ApplyT(func(v LookupTopicResult) []TopicsInputConfigResponse { return v.InputConfigs }).(TopicsInputConfigResponseArrayOutput)
}

// Type of topic
func (o LookupTopicResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Metadata of the record
func (o LookupTopicResultOutput) Metadata() TopicMetadataEntityResponsePtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *TopicMetadataEntityResponse { return v.Metadata }).(TopicMetadataEntityResponsePtrOutput)
}

// The name of the resource
func (o LookupTopicResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Name }).(pulumi.StringOutput)
}

// Partition Specification of the topic
func (o LookupTopicResultOutput) Partitions() TopicsRelatedLinkResponsePtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *TopicsRelatedLinkResponse { return v.Partitions }).(TopicsRelatedLinkResponsePtrOutput)
}

// Partition count of the topic
func (o LookupTopicResultOutput) PartitionsCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *string { return v.PartitionsCount }).(pulumi.StringPtrOutput)
}

// Partition Reassignment Specification of the topic
func (o LookupTopicResultOutput) PartitionsReassignments() TopicsRelatedLinkResponsePtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *TopicsRelatedLinkResponse { return v.PartitionsReassignments }).(TopicsRelatedLinkResponsePtrOutput)
}

// Replication factor of the topic
func (o LookupTopicResultOutput) ReplicationFactor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *string { return v.ReplicationFactor }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupTopicResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupTopicResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Topic Id returned by Confluent
func (o LookupTopicResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupTopicResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTopicResultOutput{})
}
