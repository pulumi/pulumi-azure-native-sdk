// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluent

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Details of topic record
//
// Uses Azure REST API version 2024-07-01. In version 2.x of the Azure Native provider, it used API version 2024-07-01.
type Topic struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Config Specification of the topic
	Configs TopicsRelatedLinkResponsePtrOutput `pulumi:"configs"`
	// Input Config Specification of the topic
	InputConfigs TopicsInputConfigResponseArrayOutput `pulumi:"inputConfigs"`
	// Type of topic
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Metadata of the record
	Metadata TopicMetadataEntityResponsePtrOutput `pulumi:"metadata"`
	// Display name of the topic
	Name pulumi.StringOutput `pulumi:"name"`
	// Partition Specification of the topic
	Partitions TopicsRelatedLinkResponsePtrOutput `pulumi:"partitions"`
	// Partition count of the topic
	PartitionsCount pulumi.StringPtrOutput `pulumi:"partitionsCount"`
	// Partition Reassignment Specification of the topic
	PartitionsReassignments TopicsRelatedLinkResponsePtrOutput `pulumi:"partitionsReassignments"`
	// Replication factor of the topic
	ReplicationFactor pulumi.StringPtrOutput `pulumi:"replicationFactor"`
	// Topic Id returned by Confluent
	TopicId pulumi.StringPtrOutput `pulumi:"topicId"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.OrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:confluent/v20240701:Topic"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Topic
	err := ctx.RegisterResource("azure-native:confluent:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("azure-native:confluent:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
}

type TopicState struct {
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	// Confluent kafka or schema registry cluster id
	ClusterId string `pulumi:"clusterId"`
	// Config Specification of the topic
	Configs *TopicsRelatedLink `pulumi:"configs"`
	// Confluent environment id
	EnvironmentId string `pulumi:"environmentId"`
	// Input Config Specification of the topic
	InputConfigs []TopicsInputConfig `pulumi:"inputConfigs"`
	// Type of topic
	Kind *string `pulumi:"kind"`
	// Metadata of the record
	Metadata *TopicMetadataEntity `pulumi:"metadata"`
	// Organization resource name
	OrganizationName string `pulumi:"organizationName"`
	// Partition Specification of the topic
	Partitions *TopicsRelatedLink `pulumi:"partitions"`
	// Partition count of the topic
	PartitionsCount *string `pulumi:"partitionsCount"`
	// Partition Reassignment Specification of the topic
	PartitionsReassignments *TopicsRelatedLink `pulumi:"partitionsReassignments"`
	// Replication factor of the topic
	ReplicationFactor *string `pulumi:"replicationFactor"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Topic Id returned by Confluent
	TopicId *string `pulumi:"topicId"`
	// Confluent kafka or schema registry topic name
	TopicName *string `pulumi:"topicName"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// Confluent kafka or schema registry cluster id
	ClusterId pulumi.StringInput
	// Config Specification of the topic
	Configs TopicsRelatedLinkPtrInput
	// Confluent environment id
	EnvironmentId pulumi.StringInput
	// Input Config Specification of the topic
	InputConfigs TopicsInputConfigArrayInput
	// Type of topic
	Kind pulumi.StringPtrInput
	// Metadata of the record
	Metadata TopicMetadataEntityPtrInput
	// Organization resource name
	OrganizationName pulumi.StringInput
	// Partition Specification of the topic
	Partitions TopicsRelatedLinkPtrInput
	// Partition count of the topic
	PartitionsCount pulumi.StringPtrInput
	// Partition Reassignment Specification of the topic
	PartitionsReassignments TopicsRelatedLinkPtrInput
	// Replication factor of the topic
	ReplicationFactor pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Topic Id returned by Confluent
	TopicId pulumi.StringPtrInput
	// Confluent kafka or schema registry topic name
	TopicName pulumi.StringPtrInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

// The Azure API version of the resource.
func (o TopicOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Config Specification of the topic
func (o TopicOutput) Configs() TopicsRelatedLinkResponsePtrOutput {
	return o.ApplyT(func(v *Topic) TopicsRelatedLinkResponsePtrOutput { return v.Configs }).(TopicsRelatedLinkResponsePtrOutput)
}

// Input Config Specification of the topic
func (o TopicOutput) InputConfigs() TopicsInputConfigResponseArrayOutput {
	return o.ApplyT(func(v *Topic) TopicsInputConfigResponseArrayOutput { return v.InputConfigs }).(TopicsInputConfigResponseArrayOutput)
}

// Type of topic
func (o TopicOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Metadata of the record
func (o TopicOutput) Metadata() TopicMetadataEntityResponsePtrOutput {
	return o.ApplyT(func(v *Topic) TopicMetadataEntityResponsePtrOutput { return v.Metadata }).(TopicMetadataEntityResponsePtrOutput)
}

// Display name of the topic
func (o TopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Partition Specification of the topic
func (o TopicOutput) Partitions() TopicsRelatedLinkResponsePtrOutput {
	return o.ApplyT(func(v *Topic) TopicsRelatedLinkResponsePtrOutput { return v.Partitions }).(TopicsRelatedLinkResponsePtrOutput)
}

// Partition count of the topic
func (o TopicOutput) PartitionsCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.PartitionsCount }).(pulumi.StringPtrOutput)
}

// Partition Reassignment Specification of the topic
func (o TopicOutput) PartitionsReassignments() TopicsRelatedLinkResponsePtrOutput {
	return o.ApplyT(func(v *Topic) TopicsRelatedLinkResponsePtrOutput { return v.PartitionsReassignments }).(TopicsRelatedLinkResponsePtrOutput)
}

// Replication factor of the topic
func (o TopicOutput) ReplicationFactor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.ReplicationFactor }).(pulumi.StringPtrOutput)
}

// Topic Id returned by Confluent
func (o TopicOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringPtrOutput { return v.TopicId }).(pulumi.StringPtrOutput)
}

// The type of the resource.
func (o TopicOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TopicOutput{})
}
