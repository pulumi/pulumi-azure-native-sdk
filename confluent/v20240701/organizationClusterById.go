// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240701

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Details of cluster record
type OrganizationClusterById struct {
	pulumi.CustomResourceState

	// Type of cluster
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Metadata of the record
	Metadata SCMetadataEntityResponsePtrOutput `pulumi:"metadata"`
	// Display name of the cluster
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Specification of the cluster
	Spec SCClusterSpecEntityResponsePtrOutput `pulumi:"spec"`
	// Specification of the cluster status
	Status ClusterStatusEntityResponsePtrOutput `pulumi:"status"`
	// Type of the resource
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewOrganizationClusterById registers a new resource with the given unique name, arguments, and options.
func NewOrganizationClusterById(ctx *pulumi.Context,
	name string, args *OrganizationClusterByIdArgs, opts ...pulumi.ResourceOption) (*OrganizationClusterById, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.OrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:confluent:OrganizationClusterById"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OrganizationClusterById
	err := ctx.RegisterResource("azure-native:confluent/v20240701:OrganizationClusterById", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationClusterById gets an existing OrganizationClusterById resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationClusterById(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationClusterByIdState, opts ...pulumi.ResourceOption) (*OrganizationClusterById, error) {
	var resource OrganizationClusterById
	err := ctx.ReadResource("azure-native:confluent/v20240701:OrganizationClusterById", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationClusterById resources.
type organizationClusterByIdState struct {
}

type OrganizationClusterByIdState struct {
}

func (OrganizationClusterByIdState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationClusterByIdState)(nil)).Elem()
}

type organizationClusterByIdArgs struct {
	// Confluent kafka or schema registry cluster id
	ClusterId *string `pulumi:"clusterId"`
	// Confluent environment id
	EnvironmentId string `pulumi:"environmentId"`
	// Id of the cluster
	Id *string `pulumi:"id"`
	// Type of cluster
	Kind *string `pulumi:"kind"`
	// Metadata of the record
	Metadata *SCMetadataEntity `pulumi:"metadata"`
	// Display name of the cluster
	Name *string `pulumi:"name"`
	// Organization resource name
	OrganizationName string `pulumi:"organizationName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specification of the cluster
	Spec *SCClusterSpecEntity `pulumi:"spec"`
	// Specification of the cluster status
	Status *ClusterStatusEntity `pulumi:"status"`
	// Type of the resource
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a OrganizationClusterById resource.
type OrganizationClusterByIdArgs struct {
	// Confluent kafka or schema registry cluster id
	ClusterId pulumi.StringPtrInput
	// Confluent environment id
	EnvironmentId pulumi.StringInput
	// Id of the cluster
	Id pulumi.StringPtrInput
	// Type of cluster
	Kind pulumi.StringPtrInput
	// Metadata of the record
	Metadata SCMetadataEntityPtrInput
	// Display name of the cluster
	Name pulumi.StringPtrInput
	// Organization resource name
	OrganizationName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Specification of the cluster
	Spec SCClusterSpecEntityPtrInput
	// Specification of the cluster status
	Status ClusterStatusEntityPtrInput
	// Type of the resource
	Type pulumi.StringPtrInput
}

func (OrganizationClusterByIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationClusterByIdArgs)(nil)).Elem()
}

type OrganizationClusterByIdInput interface {
	pulumi.Input

	ToOrganizationClusterByIdOutput() OrganizationClusterByIdOutput
	ToOrganizationClusterByIdOutputWithContext(ctx context.Context) OrganizationClusterByIdOutput
}

func (*OrganizationClusterById) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationClusterById)(nil)).Elem()
}

func (i *OrganizationClusterById) ToOrganizationClusterByIdOutput() OrganizationClusterByIdOutput {
	return i.ToOrganizationClusterByIdOutputWithContext(context.Background())
}

func (i *OrganizationClusterById) ToOrganizationClusterByIdOutputWithContext(ctx context.Context) OrganizationClusterByIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationClusterByIdOutput)
}

type OrganizationClusterByIdOutput struct{ *pulumi.OutputState }

func (OrganizationClusterByIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationClusterById)(nil)).Elem()
}

func (o OrganizationClusterByIdOutput) ToOrganizationClusterByIdOutput() OrganizationClusterByIdOutput {
	return o
}

func (o OrganizationClusterByIdOutput) ToOrganizationClusterByIdOutputWithContext(ctx context.Context) OrganizationClusterByIdOutput {
	return o
}

// Type of cluster
func (o OrganizationClusterByIdOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationClusterById) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Metadata of the record
func (o OrganizationClusterByIdOutput) Metadata() SCMetadataEntityResponsePtrOutput {
	return o.ApplyT(func(v *OrganizationClusterById) SCMetadataEntityResponsePtrOutput { return v.Metadata }).(SCMetadataEntityResponsePtrOutput)
}

// Display name of the cluster
func (o OrganizationClusterByIdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationClusterById) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Specification of the cluster
func (o OrganizationClusterByIdOutput) Spec() SCClusterSpecEntityResponsePtrOutput {
	return o.ApplyT(func(v *OrganizationClusterById) SCClusterSpecEntityResponsePtrOutput { return v.Spec }).(SCClusterSpecEntityResponsePtrOutput)
}

// Specification of the cluster status
func (o OrganizationClusterByIdOutput) Status() ClusterStatusEntityResponsePtrOutput {
	return o.ApplyT(func(v *OrganizationClusterById) ClusterStatusEntityResponsePtrOutput { return v.Status }).(ClusterStatusEntityResponsePtrOutput)
}

// Type of the resource
func (o OrganizationClusterByIdOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationClusterById) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(OrganizationClusterByIdOutput{})
}
