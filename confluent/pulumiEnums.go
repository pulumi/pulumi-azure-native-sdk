// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confluent

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Kafka Auth Type
type AuthType string

const (
	AuthType_SERVICE_ACCOUNT = AuthType("SERVICE_ACCOUNT")
	AuthType_KAFKA_API_KEY   = AuthType("KAFKA_API_KEY")
)

func (AuthType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthType)(nil)).Elem()
}

func (e AuthType) ToAuthTypeOutput() AuthTypeOutput {
	return pulumi.ToOutput(e).(AuthTypeOutput)
}

func (e AuthType) ToAuthTypeOutputWithContext(ctx context.Context) AuthTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuthTypeOutput)
}

func (e AuthType) ToAuthTypePtrOutput() AuthTypePtrOutput {
	return e.ToAuthTypePtrOutputWithContext(context.Background())
}

func (e AuthType) ToAuthTypePtrOutputWithContext(ctx context.Context) AuthTypePtrOutput {
	return AuthType(e).ToAuthTypeOutputWithContext(ctx).ToAuthTypePtrOutputWithContext(ctx)
}

func (e AuthType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuthType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuthTypeOutput struct{ *pulumi.OutputState }

func (AuthTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthType)(nil)).Elem()
}

func (o AuthTypeOutput) ToAuthTypeOutput() AuthTypeOutput {
	return o
}

func (o AuthTypeOutput) ToAuthTypeOutputWithContext(ctx context.Context) AuthTypeOutput {
	return o
}

func (o AuthTypeOutput) ToAuthTypePtrOutput() AuthTypePtrOutput {
	return o.ToAuthTypePtrOutputWithContext(context.Background())
}

func (o AuthTypeOutput) ToAuthTypePtrOutputWithContext(ctx context.Context) AuthTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthType) *AuthType {
		return &v
	}).(AuthTypePtrOutput)
}

func (o AuthTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuthTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuthTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuthTypePtrOutput struct{ *pulumi.OutputState }

func (AuthTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthType)(nil)).Elem()
}

func (o AuthTypePtrOutput) ToAuthTypePtrOutput() AuthTypePtrOutput {
	return o
}

func (o AuthTypePtrOutput) ToAuthTypePtrOutputWithContext(ctx context.Context) AuthTypePtrOutput {
	return o
}

func (o AuthTypePtrOutput) Elem() AuthTypeOutput {
	return o.ApplyT(func(v *AuthType) AuthType {
		if v != nil {
			return *v
		}
		var ret AuthType
		return ret
	}).(AuthTypeOutput)
}

func (o AuthTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuthType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuthTypeInput is an input type that accepts values of the AuthType enum
// A concrete instance of `AuthTypeInput` can be one of the following:
//
//	AuthType_SERVICE_ACCOUNT
//	AuthType_KAFKA_API_KEY
type AuthTypeInput interface {
	pulumi.Input

	ToAuthTypeOutput() AuthTypeOutput
	ToAuthTypeOutputWithContext(context.Context) AuthTypeOutput
}

var authTypePtrType = reflect.TypeOf((**AuthType)(nil)).Elem()

type AuthTypePtrInput interface {
	pulumi.Input

	ToAuthTypePtrOutput() AuthTypePtrOutput
	ToAuthTypePtrOutputWithContext(context.Context) AuthTypePtrOutput
}

type authTypePtr string

func AuthTypePtr(v string) AuthTypePtrInput {
	return (*authTypePtr)(&v)
}

func (*authTypePtr) ElementType() reflect.Type {
	return authTypePtrType
}

func (in *authTypePtr) ToAuthTypePtrOutput() AuthTypePtrOutput {
	return pulumi.ToOutput(in).(AuthTypePtrOutput)
}

func (in *authTypePtr) ToAuthTypePtrOutputWithContext(ctx context.Context) AuthTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuthTypePtrOutput)
}

// Connector Class
type ConnectorClass string

const (
	ConnectorClassAZUREBLOBSOURCE = ConnectorClass("AZUREBLOBSOURCE")
	ConnectorClassAZUREBLOBSINK   = ConnectorClass("AZUREBLOBSINK")
)

func (ConnectorClass) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorClass)(nil)).Elem()
}

func (e ConnectorClass) ToConnectorClassOutput() ConnectorClassOutput {
	return pulumi.ToOutput(e).(ConnectorClassOutput)
}

func (e ConnectorClass) ToConnectorClassOutputWithContext(ctx context.Context) ConnectorClassOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectorClassOutput)
}

func (e ConnectorClass) ToConnectorClassPtrOutput() ConnectorClassPtrOutput {
	return e.ToConnectorClassPtrOutputWithContext(context.Background())
}

func (e ConnectorClass) ToConnectorClassPtrOutputWithContext(ctx context.Context) ConnectorClassPtrOutput {
	return ConnectorClass(e).ToConnectorClassOutputWithContext(ctx).ToConnectorClassPtrOutputWithContext(ctx)
}

func (e ConnectorClass) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorClass) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorClass) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectorClass) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectorClassOutput struct{ *pulumi.OutputState }

func (ConnectorClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorClass)(nil)).Elem()
}

func (o ConnectorClassOutput) ToConnectorClassOutput() ConnectorClassOutput {
	return o
}

func (o ConnectorClassOutput) ToConnectorClassOutputWithContext(ctx context.Context) ConnectorClassOutput {
	return o
}

func (o ConnectorClassOutput) ToConnectorClassPtrOutput() ConnectorClassPtrOutput {
	return o.ToConnectorClassPtrOutputWithContext(context.Background())
}

func (o ConnectorClassOutput) ToConnectorClassPtrOutputWithContext(ctx context.Context) ConnectorClassPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorClass) *ConnectorClass {
		return &v
	}).(ConnectorClassPtrOutput)
}

func (o ConnectorClassOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectorClassOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorClass) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectorClassOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorClassOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorClass) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectorClassPtrOutput struct{ *pulumi.OutputState }

func (ConnectorClassPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorClass)(nil)).Elem()
}

func (o ConnectorClassPtrOutput) ToConnectorClassPtrOutput() ConnectorClassPtrOutput {
	return o
}

func (o ConnectorClassPtrOutput) ToConnectorClassPtrOutputWithContext(ctx context.Context) ConnectorClassPtrOutput {
	return o
}

func (o ConnectorClassPtrOutput) Elem() ConnectorClassOutput {
	return o.ApplyT(func(v *ConnectorClass) ConnectorClass {
		if v != nil {
			return *v
		}
		var ret ConnectorClass
		return ret
	}).(ConnectorClassOutput)
}

func (o ConnectorClassPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorClassPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectorClass) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectorClassInput is an input type that accepts values of the ConnectorClass enum
// A concrete instance of `ConnectorClassInput` can be one of the following:
//
//	ConnectorClassAZUREBLOBSOURCE
//	ConnectorClassAZUREBLOBSINK
type ConnectorClassInput interface {
	pulumi.Input

	ToConnectorClassOutput() ConnectorClassOutput
	ToConnectorClassOutputWithContext(context.Context) ConnectorClassOutput
}

var connectorClassPtrType = reflect.TypeOf((**ConnectorClass)(nil)).Elem()

type ConnectorClassPtrInput interface {
	pulumi.Input

	ToConnectorClassPtrOutput() ConnectorClassPtrOutput
	ToConnectorClassPtrOutputWithContext(context.Context) ConnectorClassPtrOutput
}

type connectorClassPtr string

func ConnectorClassPtr(v string) ConnectorClassPtrInput {
	return (*connectorClassPtr)(&v)
}

func (*connectorClassPtr) ElementType() reflect.Type {
	return connectorClassPtrType
}

func (in *connectorClassPtr) ToConnectorClassPtrOutput() ConnectorClassPtrOutput {
	return pulumi.ToOutput(in).(ConnectorClassPtrOutput)
}

func (in *connectorClassPtr) ToConnectorClassPtrOutputWithContext(ctx context.Context) ConnectorClassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectorClassPtrOutput)
}

// The connector service type.
type ConnectorServiceType string

const (
	ConnectorServiceTypeAzureBlobStorageSinkConnector      = ConnectorServiceType("AzureBlobStorageSinkConnector")
	ConnectorServiceTypeAzureBlobStorageSourceConnector    = ConnectorServiceType("AzureBlobStorageSourceConnector")
	ConnectorServiceTypeAzureCosmosDBSinkConnector         = ConnectorServiceType("AzureCosmosDBSinkConnector")
	ConnectorServiceTypeAzureCosmosDBSourceConnector       = ConnectorServiceType("AzureCosmosDBSourceConnector")
	ConnectorServiceTypeAzureSynapseAnalyticsSinkConnector = ConnectorServiceType("AzureSynapseAnalyticsSinkConnector")
)

// Connector Status
type ConnectorStatus string

const (
	ConnectorStatusPROVISIONING = ConnectorStatus("PROVISIONING")
	ConnectorStatusRUNNING      = ConnectorStatus("RUNNING")
	ConnectorStatusPAUSED       = ConnectorStatus("PAUSED")
	ConnectorStatusFAILED       = ConnectorStatus("FAILED")
)

func (ConnectorStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorStatus)(nil)).Elem()
}

func (e ConnectorStatus) ToConnectorStatusOutput() ConnectorStatusOutput {
	return pulumi.ToOutput(e).(ConnectorStatusOutput)
}

func (e ConnectorStatus) ToConnectorStatusOutputWithContext(ctx context.Context) ConnectorStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectorStatusOutput)
}

func (e ConnectorStatus) ToConnectorStatusPtrOutput() ConnectorStatusPtrOutput {
	return e.ToConnectorStatusPtrOutputWithContext(context.Background())
}

func (e ConnectorStatus) ToConnectorStatusPtrOutputWithContext(ctx context.Context) ConnectorStatusPtrOutput {
	return ConnectorStatus(e).ToConnectorStatusOutputWithContext(ctx).ToConnectorStatusPtrOutputWithContext(ctx)
}

func (e ConnectorStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectorStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectorStatusOutput struct{ *pulumi.OutputState }

func (ConnectorStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorStatus)(nil)).Elem()
}

func (o ConnectorStatusOutput) ToConnectorStatusOutput() ConnectorStatusOutput {
	return o
}

func (o ConnectorStatusOutput) ToConnectorStatusOutputWithContext(ctx context.Context) ConnectorStatusOutput {
	return o
}

func (o ConnectorStatusOutput) ToConnectorStatusPtrOutput() ConnectorStatusPtrOutput {
	return o.ToConnectorStatusPtrOutputWithContext(context.Background())
}

func (o ConnectorStatusOutput) ToConnectorStatusPtrOutputWithContext(ctx context.Context) ConnectorStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorStatus) *ConnectorStatus {
		return &v
	}).(ConnectorStatusPtrOutput)
}

func (o ConnectorStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectorStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectorStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectorStatusPtrOutput struct{ *pulumi.OutputState }

func (ConnectorStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorStatus)(nil)).Elem()
}

func (o ConnectorStatusPtrOutput) ToConnectorStatusPtrOutput() ConnectorStatusPtrOutput {
	return o
}

func (o ConnectorStatusPtrOutput) ToConnectorStatusPtrOutputWithContext(ctx context.Context) ConnectorStatusPtrOutput {
	return o
}

func (o ConnectorStatusPtrOutput) Elem() ConnectorStatusOutput {
	return o.ApplyT(func(v *ConnectorStatus) ConnectorStatus {
		if v != nil {
			return *v
		}
		var ret ConnectorStatus
		return ret
	}).(ConnectorStatusOutput)
}

func (o ConnectorStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectorStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectorStatusInput is an input type that accepts values of the ConnectorStatus enum
// A concrete instance of `ConnectorStatusInput` can be one of the following:
//
//	ConnectorStatusPROVISIONING
//	ConnectorStatusRUNNING
//	ConnectorStatusPAUSED
//	ConnectorStatusFAILED
type ConnectorStatusInput interface {
	pulumi.Input

	ToConnectorStatusOutput() ConnectorStatusOutput
	ToConnectorStatusOutputWithContext(context.Context) ConnectorStatusOutput
}

var connectorStatusPtrType = reflect.TypeOf((**ConnectorStatus)(nil)).Elem()

type ConnectorStatusPtrInput interface {
	pulumi.Input

	ToConnectorStatusPtrOutput() ConnectorStatusPtrOutput
	ToConnectorStatusPtrOutputWithContext(context.Context) ConnectorStatusPtrOutput
}

type connectorStatusPtr string

func ConnectorStatusPtr(v string) ConnectorStatusPtrInput {
	return (*connectorStatusPtr)(&v)
}

func (*connectorStatusPtr) ElementType() reflect.Type {
	return connectorStatusPtrType
}

func (in *connectorStatusPtr) ToConnectorStatusPtrOutput() ConnectorStatusPtrOutput {
	return pulumi.ToOutput(in).(ConnectorStatusPtrOutput)
}

func (in *connectorStatusPtr) ToConnectorStatusPtrOutputWithContext(ctx context.Context) ConnectorStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectorStatusPtrOutput)
}

// Connector Type
type ConnectorType string

const (
	ConnectorTypeSINK   = ConnectorType("SINK")
	ConnectorTypeSOURCE = ConnectorType("SOURCE")
)

func (ConnectorType) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorType)(nil)).Elem()
}

func (e ConnectorType) ToConnectorTypeOutput() ConnectorTypeOutput {
	return pulumi.ToOutput(e).(ConnectorTypeOutput)
}

func (e ConnectorType) ToConnectorTypeOutputWithContext(ctx context.Context) ConnectorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectorTypeOutput)
}

func (e ConnectorType) ToConnectorTypePtrOutput() ConnectorTypePtrOutput {
	return e.ToConnectorTypePtrOutputWithContext(context.Background())
}

func (e ConnectorType) ToConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorTypePtrOutput {
	return ConnectorType(e).ToConnectorTypeOutputWithContext(ctx).ToConnectorTypePtrOutputWithContext(ctx)
}

func (e ConnectorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectorTypeOutput struct{ *pulumi.OutputState }

func (ConnectorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorType)(nil)).Elem()
}

func (o ConnectorTypeOutput) ToConnectorTypeOutput() ConnectorTypeOutput {
	return o
}

func (o ConnectorTypeOutput) ToConnectorTypeOutputWithContext(ctx context.Context) ConnectorTypeOutput {
	return o
}

func (o ConnectorTypeOutput) ToConnectorTypePtrOutput() ConnectorTypePtrOutput {
	return o.ToConnectorTypePtrOutputWithContext(context.Background())
}

func (o ConnectorTypeOutput) ToConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorType) *ConnectorType {
		return &v
	}).(ConnectorTypePtrOutput)
}

func (o ConnectorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectorTypePtrOutput struct{ *pulumi.OutputState }

func (ConnectorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorType)(nil)).Elem()
}

func (o ConnectorTypePtrOutput) ToConnectorTypePtrOutput() ConnectorTypePtrOutput {
	return o
}

func (o ConnectorTypePtrOutput) ToConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorTypePtrOutput {
	return o
}

func (o ConnectorTypePtrOutput) Elem() ConnectorTypeOutput {
	return o.ApplyT(func(v *ConnectorType) ConnectorType {
		if v != nil {
			return *v
		}
		var ret ConnectorType
		return ret
	}).(ConnectorTypeOutput)
}

func (o ConnectorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectorTypeInput is an input type that accepts values of the ConnectorType enum
// A concrete instance of `ConnectorTypeInput` can be one of the following:
//
//	ConnectorTypeSINK
//	ConnectorTypeSOURCE
type ConnectorTypeInput interface {
	pulumi.Input

	ToConnectorTypeOutput() ConnectorTypeOutput
	ToConnectorTypeOutputWithContext(context.Context) ConnectorTypeOutput
}

var connectorTypePtrType = reflect.TypeOf((**ConnectorType)(nil)).Elem()

type ConnectorTypePtrInput interface {
	pulumi.Input

	ToConnectorTypePtrOutput() ConnectorTypePtrOutput
	ToConnectorTypePtrOutputWithContext(context.Context) ConnectorTypePtrOutput
}

type connectorTypePtr string

func ConnectorTypePtr(v string) ConnectorTypePtrInput {
	return (*connectorTypePtr)(&v)
}

func (*connectorTypePtr) ElementType() reflect.Type {
	return connectorTypePtrType
}

func (in *connectorTypePtr) ToConnectorTypePtrOutput() ConnectorTypePtrOutput {
	return pulumi.ToOutput(in).(ConnectorTypePtrOutput)
}

func (in *connectorTypePtr) ToConnectorTypePtrOutputWithContext(ctx context.Context) ConnectorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectorTypePtrOutput)
}

// Kafka Output Data Format Type
type DataFormatType string

const (
	DataFormatTypeAVRO     = DataFormatType("AVRO")
	DataFormatTypeJSON     = DataFormatType("JSON")
	DataFormatTypeSTRING   = DataFormatType("STRING")
	DataFormatTypeBYTES    = DataFormatType("BYTES")
	DataFormatTypePROTOBUF = DataFormatType("PROTOBUF")
)

func (DataFormatType) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFormatType)(nil)).Elem()
}

func (e DataFormatType) ToDataFormatTypeOutput() DataFormatTypeOutput {
	return pulumi.ToOutput(e).(DataFormatTypeOutput)
}

func (e DataFormatType) ToDataFormatTypeOutputWithContext(ctx context.Context) DataFormatTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataFormatTypeOutput)
}

func (e DataFormatType) ToDataFormatTypePtrOutput() DataFormatTypePtrOutput {
	return e.ToDataFormatTypePtrOutputWithContext(context.Background())
}

func (e DataFormatType) ToDataFormatTypePtrOutputWithContext(ctx context.Context) DataFormatTypePtrOutput {
	return DataFormatType(e).ToDataFormatTypeOutputWithContext(ctx).ToDataFormatTypePtrOutputWithContext(ctx)
}

func (e DataFormatType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataFormatType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataFormatType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataFormatType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataFormatTypeOutput struct{ *pulumi.OutputState }

func (DataFormatTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFormatType)(nil)).Elem()
}

func (o DataFormatTypeOutput) ToDataFormatTypeOutput() DataFormatTypeOutput {
	return o
}

func (o DataFormatTypeOutput) ToDataFormatTypeOutputWithContext(ctx context.Context) DataFormatTypeOutput {
	return o
}

func (o DataFormatTypeOutput) ToDataFormatTypePtrOutput() DataFormatTypePtrOutput {
	return o.ToDataFormatTypePtrOutputWithContext(context.Background())
}

func (o DataFormatTypeOutput) ToDataFormatTypePtrOutputWithContext(ctx context.Context) DataFormatTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataFormatType) *DataFormatType {
		return &v
	}).(DataFormatTypePtrOutput)
}

func (o DataFormatTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataFormatTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataFormatType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataFormatTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataFormatTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataFormatType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataFormatTypePtrOutput struct{ *pulumi.OutputState }

func (DataFormatTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFormatType)(nil)).Elem()
}

func (o DataFormatTypePtrOutput) ToDataFormatTypePtrOutput() DataFormatTypePtrOutput {
	return o
}

func (o DataFormatTypePtrOutput) ToDataFormatTypePtrOutputWithContext(ctx context.Context) DataFormatTypePtrOutput {
	return o
}

func (o DataFormatTypePtrOutput) Elem() DataFormatTypeOutput {
	return o.ApplyT(func(v *DataFormatType) DataFormatType {
		if v != nil {
			return *v
		}
		var ret DataFormatType
		return ret
	}).(DataFormatTypeOutput)
}

func (o DataFormatTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataFormatTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataFormatType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataFormatTypeInput is an input type that accepts values of the DataFormatType enum
// A concrete instance of `DataFormatTypeInput` can be one of the following:
//
//	DataFormatTypeAVRO
//	DataFormatTypeJSON
//	DataFormatTypeSTRING
//	DataFormatTypeBYTES
//	DataFormatTypePROTOBUF
type DataFormatTypeInput interface {
	pulumi.Input

	ToDataFormatTypeOutput() DataFormatTypeOutput
	ToDataFormatTypeOutputWithContext(context.Context) DataFormatTypeOutput
}

var dataFormatTypePtrType = reflect.TypeOf((**DataFormatType)(nil)).Elem()

type DataFormatTypePtrInput interface {
	pulumi.Input

	ToDataFormatTypePtrOutput() DataFormatTypePtrOutput
	ToDataFormatTypePtrOutputWithContext(context.Context) DataFormatTypePtrOutput
}

type dataFormatTypePtr string

func DataFormatTypePtr(v string) DataFormatTypePtrInput {
	return (*dataFormatTypePtr)(&v)
}

func (*dataFormatTypePtr) ElementType() reflect.Type {
	return dataFormatTypePtrType
}

func (in *dataFormatTypePtr) ToDataFormatTypePtrOutput() DataFormatTypePtrOutput {
	return pulumi.ToOutput(in).(DataFormatTypePtrOutput)
}

func (in *dataFormatTypePtr) ToDataFormatTypePtrOutputWithContext(ctx context.Context) DataFormatTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataFormatTypePtrOutput)
}

// Stream governance configuration
type Package string

const (
	PackageESSENTIALS = Package("ESSENTIALS")
	PackageADVANCED   = Package("ADVANCED")
)

func (Package) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (e Package) ToPackageOutput() PackageOutput {
	return pulumi.ToOutput(e).(PackageOutput)
}

func (e Package) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PackageOutput)
}

func (e Package) ToPackagePtrOutput() PackagePtrOutput {
	return e.ToPackagePtrOutputWithContext(context.Background())
}

func (e Package) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return Package(e).ToPackageOutputWithContext(ctx).ToPackagePtrOutputWithContext(ctx)
}

func (e Package) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Package) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Package) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Package) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

func (o PackageOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o.ToPackagePtrOutputWithContext(context.Background())
}

func (o PackageOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Package) *Package {
		return &v
	}).(PackagePtrOutput)
}

func (o PackageOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PackageOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Package) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PackageOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackageOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Package) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PackagePtrOutput struct{ *pulumi.OutputState }

func (PackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackagePtrOutput) ToPackagePtrOutput() PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return o
}

func (o PackagePtrOutput) Elem() PackageOutput {
	return o.ApplyT(func(v *Package) Package {
		if v != nil {
			return *v
		}
		var ret Package
		return ret
	}).(PackageOutput)
}

func (o PackagePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackagePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Package) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PackageInput is an input type that accepts values of the Package enum
// A concrete instance of `PackageInput` can be one of the following:
//
//	PackageESSENTIALS
//	PackageADVANCED
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

var packagePtrType = reflect.TypeOf((**Package)(nil)).Elem()

type PackagePtrInput interface {
	pulumi.Input

	ToPackagePtrOutput() PackagePtrOutput
	ToPackagePtrOutputWithContext(context.Context) PackagePtrOutput
}

type packagePtr string

func PackagePtr(v string) PackagePtrInput {
	return (*packagePtr)(&v)
}

func (*packagePtr) ElementType() reflect.Type {
	return packagePtrType
}

func (in *packagePtr) ToPackagePtrOutput() PackagePtrOutput {
	return pulumi.ToOutput(in).(PackagePtrOutput)
}

func (in *packagePtr) ToPackagePtrOutputWithContext(ctx context.Context) PackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PackagePtrOutput)
}

// The partner connector type.
type PartnerConnectorType string

const (
	PartnerConnectorTypeKafkaAzureBlobStorageSource    = PartnerConnectorType("KafkaAzureBlobStorageSource")
	PartnerConnectorTypeKafkaAzureBlobStorageSink      = PartnerConnectorType("KafkaAzureBlobStorageSink")
	PartnerConnectorTypeKafkaAzureCosmosDBSource       = PartnerConnectorType("KafkaAzureCosmosDBSource")
	PartnerConnectorTypeKafkaAzureCosmosDBSink         = PartnerConnectorType("KafkaAzureCosmosDBSink")
	PartnerConnectorTypeKafkaAzureSynapseAnalyticsSink = PartnerConnectorType("KafkaAzureSynapseAnalyticsSink")
)

// SaaS Offer Status
type SaaSOfferStatus string

const (
	SaaSOfferStatusStarted                 = SaaSOfferStatus("Started")
	SaaSOfferStatusPendingFulfillmentStart = SaaSOfferStatus("PendingFulfillmentStart")
	SaaSOfferStatusInProgress              = SaaSOfferStatus("InProgress")
	SaaSOfferStatusSubscribed              = SaaSOfferStatus("Subscribed")
	SaaSOfferStatusSuspended               = SaaSOfferStatus("Suspended")
	SaaSOfferStatusReinstated              = SaaSOfferStatus("Reinstated")
	SaaSOfferStatusSucceeded               = SaaSOfferStatus("Succeeded")
	SaaSOfferStatusFailed                  = SaaSOfferStatus("Failed")
	SaaSOfferStatusUnsubscribed            = SaaSOfferStatus("Unsubscribed")
	SaaSOfferStatusUpdating                = SaaSOfferStatus("Updating")
)

func (SaaSOfferStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*SaaSOfferStatus)(nil)).Elem()
}

func (e SaaSOfferStatus) ToSaaSOfferStatusOutput() SaaSOfferStatusOutput {
	return pulumi.ToOutput(e).(SaaSOfferStatusOutput)
}

func (e SaaSOfferStatus) ToSaaSOfferStatusOutputWithContext(ctx context.Context) SaaSOfferStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SaaSOfferStatusOutput)
}

func (e SaaSOfferStatus) ToSaaSOfferStatusPtrOutput() SaaSOfferStatusPtrOutput {
	return e.ToSaaSOfferStatusPtrOutputWithContext(context.Background())
}

func (e SaaSOfferStatus) ToSaaSOfferStatusPtrOutputWithContext(ctx context.Context) SaaSOfferStatusPtrOutput {
	return SaaSOfferStatus(e).ToSaaSOfferStatusOutputWithContext(ctx).ToSaaSOfferStatusPtrOutputWithContext(ctx)
}

func (e SaaSOfferStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SaaSOfferStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SaaSOfferStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SaaSOfferStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SaaSOfferStatusOutput struct{ *pulumi.OutputState }

func (SaaSOfferStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaaSOfferStatus)(nil)).Elem()
}

func (o SaaSOfferStatusOutput) ToSaaSOfferStatusOutput() SaaSOfferStatusOutput {
	return o
}

func (o SaaSOfferStatusOutput) ToSaaSOfferStatusOutputWithContext(ctx context.Context) SaaSOfferStatusOutput {
	return o
}

func (o SaaSOfferStatusOutput) ToSaaSOfferStatusPtrOutput() SaaSOfferStatusPtrOutput {
	return o.ToSaaSOfferStatusPtrOutputWithContext(context.Background())
}

func (o SaaSOfferStatusOutput) ToSaaSOfferStatusPtrOutputWithContext(ctx context.Context) SaaSOfferStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SaaSOfferStatus) *SaaSOfferStatus {
		return &v
	}).(SaaSOfferStatusPtrOutput)
}

func (o SaaSOfferStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SaaSOfferStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SaaSOfferStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SaaSOfferStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SaaSOfferStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SaaSOfferStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SaaSOfferStatusPtrOutput struct{ *pulumi.OutputState }

func (SaaSOfferStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaaSOfferStatus)(nil)).Elem()
}

func (o SaaSOfferStatusPtrOutput) ToSaaSOfferStatusPtrOutput() SaaSOfferStatusPtrOutput {
	return o
}

func (o SaaSOfferStatusPtrOutput) ToSaaSOfferStatusPtrOutputWithContext(ctx context.Context) SaaSOfferStatusPtrOutput {
	return o
}

func (o SaaSOfferStatusPtrOutput) Elem() SaaSOfferStatusOutput {
	return o.ApplyT(func(v *SaaSOfferStatus) SaaSOfferStatus {
		if v != nil {
			return *v
		}
		var ret SaaSOfferStatus
		return ret
	}).(SaaSOfferStatusOutput)
}

func (o SaaSOfferStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SaaSOfferStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SaaSOfferStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SaaSOfferStatusInput is an input type that accepts values of the SaaSOfferStatus enum
// A concrete instance of `SaaSOfferStatusInput` can be one of the following:
//
//	SaaSOfferStatusStarted
//	SaaSOfferStatusPendingFulfillmentStart
//	SaaSOfferStatusInProgress
//	SaaSOfferStatusSubscribed
//	SaaSOfferStatusSuspended
//	SaaSOfferStatusReinstated
//	SaaSOfferStatusSucceeded
//	SaaSOfferStatusFailed
//	SaaSOfferStatusUnsubscribed
//	SaaSOfferStatusUpdating
type SaaSOfferStatusInput interface {
	pulumi.Input

	ToSaaSOfferStatusOutput() SaaSOfferStatusOutput
	ToSaaSOfferStatusOutputWithContext(context.Context) SaaSOfferStatusOutput
}

var saaSOfferStatusPtrType = reflect.TypeOf((**SaaSOfferStatus)(nil)).Elem()

type SaaSOfferStatusPtrInput interface {
	pulumi.Input

	ToSaaSOfferStatusPtrOutput() SaaSOfferStatusPtrOutput
	ToSaaSOfferStatusPtrOutputWithContext(context.Context) SaaSOfferStatusPtrOutput
}

type saaSOfferStatusPtr string

func SaaSOfferStatusPtr(v string) SaaSOfferStatusPtrInput {
	return (*saaSOfferStatusPtr)(&v)
}

func (*saaSOfferStatusPtr) ElementType() reflect.Type {
	return saaSOfferStatusPtrType
}

func (in *saaSOfferStatusPtr) ToSaaSOfferStatusPtrOutput() SaaSOfferStatusPtrOutput {
	return pulumi.ToOutput(in).(SaaSOfferStatusPtrOutput)
}

func (in *saaSOfferStatusPtr) ToSaaSOfferStatusPtrOutputWithContext(ctx context.Context) SaaSOfferStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SaaSOfferStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthTypeOutput{})
	pulumi.RegisterOutputType(AuthTypePtrOutput{})
	pulumi.RegisterOutputType(ConnectorClassOutput{})
	pulumi.RegisterOutputType(ConnectorClassPtrOutput{})
	pulumi.RegisterOutputType(ConnectorStatusOutput{})
	pulumi.RegisterOutputType(ConnectorStatusPtrOutput{})
	pulumi.RegisterOutputType(ConnectorTypeOutput{})
	pulumi.RegisterOutputType(ConnectorTypePtrOutput{})
	pulumi.RegisterOutputType(DataFormatTypeOutput{})
	pulumi.RegisterOutputType(DataFormatTypePtrOutput{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackagePtrOutput{})
	pulumi.RegisterOutputType(SaaSOfferStatusOutput{})
	pulumi.RegisterOutputType(SaaSOfferStatusPtrOutput{})
}
