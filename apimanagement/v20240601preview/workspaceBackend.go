// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240601preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Backend details.
type WorkspaceBackend struct {
	pulumi.CustomResourceState

	// Backend Circuit Breaker Configuration
	CircuitBreaker BackendCircuitBreakerResponsePtrOutput `pulumi:"circuitBreaker"`
	// Backend Credentials Contract Properties
	Credentials BackendCredentialsContractResponsePtrOutput `pulumi:"credentials"`
	// Backend Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the resource
	Name pulumi.StringOutput                        `pulumi:"name"`
	Pool BackendBaseParametersResponsePoolPtrOutput `pulumi:"pool"`
	// Backend Properties contract
	Properties BackendPropertiesResponseOutput `pulumi:"properties"`
	// Backend communication protocol.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Backend gateway Contract Properties
	Proxy BackendProxyContractResponsePtrOutput `pulumi:"proxy"`
	// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
	ResourceId pulumi.StringPtrOutput `pulumi:"resourceId"`
	// Backend Title.
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// Backend TLS Properties
	Tls BackendTlsPropertiesResponsePtrOutput `pulumi:"tls"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Runtime Url of the Backend.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewWorkspaceBackend registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceBackend(ctx *pulumi.Context,
	name string, args *WorkspaceBackendArgs, opts ...pulumi.ResourceOption) (*WorkspaceBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.Tls != nil {
		args.Tls = args.Tls.ToBackendTlsPropertiesPtrOutput().ApplyT(func(v *BackendTlsProperties) *BackendTlsProperties { return v.Defaults() }).(BackendTlsPropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement:WorkspaceBackend"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230901preview:WorkspaceBackend"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20240501:WorkspaceBackend"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WorkspaceBackend
	err := ctx.RegisterResource("azure-native:apimanagement/v20240601preview:WorkspaceBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceBackend gets an existing WorkspaceBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceBackendState, opts ...pulumi.ResourceOption) (*WorkspaceBackend, error) {
	var resource WorkspaceBackend
	err := ctx.ReadResource("azure-native:apimanagement/v20240601preview:WorkspaceBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceBackend resources.
type workspaceBackendState struct {
}

type WorkspaceBackendState struct {
}

func (WorkspaceBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceBackendState)(nil)).Elem()
}

type workspaceBackendArgs struct {
	// Identifier of the Backend entity. Must be unique in the current API Management service instance.
	BackendId *string `pulumi:"backendId"`
	// Backend Circuit Breaker Configuration
	CircuitBreaker *BackendCircuitBreaker `pulumi:"circuitBreaker"`
	// Backend Credentials Contract Properties
	Credentials *BackendCredentialsContract `pulumi:"credentials"`
	// Backend Description.
	Description *string                    `pulumi:"description"`
	Pool        *BackendBaseParametersPool `pulumi:"pool"`
	// Backend Properties contract
	Properties *BackendProperties `pulumi:"properties"`
	// Backend communication protocol.
	Protocol string `pulumi:"protocol"`
	// Backend gateway Contract Properties
	Proxy *BackendProxyContract `pulumi:"proxy"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
	ResourceId *string `pulumi:"resourceId"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Backend Title.
	Title *string `pulumi:"title"`
	// Backend TLS Properties
	Tls *BackendTlsProperties `pulumi:"tls"`
	// Type of the backend. A backend can be either Single or Pool.
	Type *string `pulumi:"type"`
	// Runtime Url of the Backend.
	Url string `pulumi:"url"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceBackend resource.
type WorkspaceBackendArgs struct {
	// Identifier of the Backend entity. Must be unique in the current API Management service instance.
	BackendId pulumi.StringPtrInput
	// Backend Circuit Breaker Configuration
	CircuitBreaker BackendCircuitBreakerPtrInput
	// Backend Credentials Contract Properties
	Credentials BackendCredentialsContractPtrInput
	// Backend Description.
	Description pulumi.StringPtrInput
	Pool        BackendBaseParametersPoolPtrInput
	// Backend Properties contract
	Properties BackendPropertiesPtrInput
	// Backend communication protocol.
	Protocol pulumi.StringInput
	// Backend gateway Contract Properties
	Proxy BackendProxyContractPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
	ResourceId pulumi.StringPtrInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// Backend Title.
	Title pulumi.StringPtrInput
	// Backend TLS Properties
	Tls BackendTlsPropertiesPtrInput
	// Type of the backend. A backend can be either Single or Pool.
	Type pulumi.StringPtrInput
	// Runtime Url of the Backend.
	Url pulumi.StringInput
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceBackendArgs)(nil)).Elem()
}

type WorkspaceBackendInput interface {
	pulumi.Input

	ToWorkspaceBackendOutput() WorkspaceBackendOutput
	ToWorkspaceBackendOutputWithContext(ctx context.Context) WorkspaceBackendOutput
}

func (*WorkspaceBackend) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceBackend)(nil)).Elem()
}

func (i *WorkspaceBackend) ToWorkspaceBackendOutput() WorkspaceBackendOutput {
	return i.ToWorkspaceBackendOutputWithContext(context.Background())
}

func (i *WorkspaceBackend) ToWorkspaceBackendOutputWithContext(ctx context.Context) WorkspaceBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceBackendOutput)
}

type WorkspaceBackendOutput struct{ *pulumi.OutputState }

func (WorkspaceBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceBackend)(nil)).Elem()
}

func (o WorkspaceBackendOutput) ToWorkspaceBackendOutput() WorkspaceBackendOutput {
	return o
}

func (o WorkspaceBackendOutput) ToWorkspaceBackendOutputWithContext(ctx context.Context) WorkspaceBackendOutput {
	return o
}

// Backend Circuit Breaker Configuration
func (o WorkspaceBackendOutput) CircuitBreaker() BackendCircuitBreakerResponsePtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) BackendCircuitBreakerResponsePtrOutput { return v.CircuitBreaker }).(BackendCircuitBreakerResponsePtrOutput)
}

// Backend Credentials Contract Properties
func (o WorkspaceBackendOutput) Credentials() BackendCredentialsContractResponsePtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) BackendCredentialsContractResponsePtrOutput { return v.Credentials }).(BackendCredentialsContractResponsePtrOutput)
}

// Backend Description.
func (o WorkspaceBackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o WorkspaceBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceBackend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WorkspaceBackendOutput) Pool() BackendBaseParametersResponsePoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) BackendBaseParametersResponsePoolPtrOutput { return v.Pool }).(BackendBaseParametersResponsePoolPtrOutput)
}

// Backend Properties contract
func (o WorkspaceBackendOutput) Properties() BackendPropertiesResponseOutput {
	return o.ApplyT(func(v *WorkspaceBackend) BackendPropertiesResponseOutput { return v.Properties }).(BackendPropertiesResponseOutput)
}

// Backend communication protocol.
func (o WorkspaceBackendOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceBackend) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Backend gateway Contract Properties
func (o WorkspaceBackendOutput) Proxy() BackendProxyContractResponsePtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) BackendProxyContractResponsePtrOutput { return v.Proxy }).(BackendProxyContractResponsePtrOutput)
}

// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
func (o WorkspaceBackendOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) pulumi.StringPtrOutput { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Backend Title.
func (o WorkspaceBackendOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// Backend TLS Properties
func (o WorkspaceBackendOutput) Tls() BackendTlsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *WorkspaceBackend) BackendTlsPropertiesResponsePtrOutput { return v.Tls }).(BackendTlsPropertiesResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceBackendOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceBackend) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Runtime Url of the Backend.
func (o WorkspaceBackendOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceBackend) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceBackendOutput{})
}
