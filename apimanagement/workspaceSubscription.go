// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Subscription details.
// Azure REST API version: 2022-09-01-preview.
type WorkspaceSubscription struct {
	pulumi.CustomResourceState

	// Determines whether tracing is enabled
	AllowTracing pulumi.BoolPtrOutput `pulumi:"allowTracing"`
	// Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// The name of the subscription, or null if the subscription has no name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	ExpirationDate pulumi.StringPtrOutput `pulumi:"expirationDate"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	NotificationDate pulumi.StringPtrOutput `pulumi:"notificationDate"`
	// The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.
	OwnerId pulumi.StringPtrOutput `pulumi:"ownerId"`
	// Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
	PrimaryKey pulumi.StringPtrOutput `pulumi:"primaryKey"`
	// Scope like /products/{productId} or /apis or /apis/{apiId}.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
	SecondaryKey pulumi.StringPtrOutput `pulumi:"secondaryKey"`
	// Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	StartDate pulumi.StringPtrOutput `pulumi:"startDate"`
	// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
	State pulumi.StringOutput `pulumi:"state"`
	// Optional subscription comment added by an administrator when the state is changed to the 'rejected'.
	StateComment pulumi.StringPtrOutput `pulumi:"stateComment"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkspaceSubscription registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceSubscription(ctx *pulumi.Context,
	name string, args *WorkspaceSubscriptionArgs, opts ...pulumi.ResourceOption) (*WorkspaceSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement/v20220901preview:WorkspaceSubscription"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230301preview:WorkspaceSubscription"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WorkspaceSubscription
	err := ctx.RegisterResource("azure-native:apimanagement:WorkspaceSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceSubscription gets an existing WorkspaceSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceSubscriptionState, opts ...pulumi.ResourceOption) (*WorkspaceSubscription, error) {
	var resource WorkspaceSubscription
	err := ctx.ReadResource("azure-native:apimanagement:WorkspaceSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceSubscription resources.
type workspaceSubscriptionState struct {
}

type WorkspaceSubscriptionState struct {
}

func (WorkspaceSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceSubscriptionState)(nil)).Elem()
}

type workspaceSubscriptionArgs struct {
	// Determines whether tracing can be enabled
	AllowTracing *bool `pulumi:"allowTracing"`
	// Determines the type of application which send the create user request. Default is legacy publisher portal.
	AppType *string `pulumi:"appType"`
	// Subscription name.
	DisplayName string `pulumi:"displayName"`
	// Notify change in Subscription State.
	//  - If false, do not send any email notification for change of state of subscription
	//  - If true, send email notification of change of state of subscription
	Notify *bool `pulumi:"notify"`
	// User (user id path) for whom subscription is being created in form /users/{userId}
	OwnerId *string `pulumi:"ownerId"`
	// Primary subscription key. If not specified during request key will be generated automatically.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Scope like /products/{productId} or /apis or /apis/{apiId}.
	Scope string `pulumi:"scope"`
	// Secondary subscription key. If not specified during request key will be generated automatically.
	SecondaryKey *string `pulumi:"secondaryKey"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Subscription entity Identifier. The entity represents the association between a user and a product in API Management.
	Sid *string `pulumi:"sid"`
	// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
	State *SubscriptionStateEnum `pulumi:"state"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceSubscription resource.
type WorkspaceSubscriptionArgs struct {
	// Determines whether tracing can be enabled
	AllowTracing pulumi.BoolPtrInput
	// Determines the type of application which send the create user request. Default is legacy publisher portal.
	AppType pulumi.StringPtrInput
	// Subscription name.
	DisplayName pulumi.StringInput
	// Notify change in Subscription State.
	//  - If false, do not send any email notification for change of state of subscription
	//  - If true, send email notification of change of state of subscription
	Notify pulumi.BoolPtrInput
	// User (user id path) for whom subscription is being created in form /users/{userId}
	OwnerId pulumi.StringPtrInput
	// Primary subscription key. If not specified during request key will be generated automatically.
	PrimaryKey pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Scope like /products/{productId} or /apis or /apis/{apiId}.
	Scope pulumi.StringInput
	// Secondary subscription key. If not specified during request key will be generated automatically.
	SecondaryKey pulumi.StringPtrInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// Subscription entity Identifier. The entity represents the association between a user and a product in API Management.
	Sid pulumi.StringPtrInput
	// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
	State SubscriptionStateEnumPtrInput
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceSubscriptionArgs)(nil)).Elem()
}

type WorkspaceSubscriptionInput interface {
	pulumi.Input

	ToWorkspaceSubscriptionOutput() WorkspaceSubscriptionOutput
	ToWorkspaceSubscriptionOutputWithContext(ctx context.Context) WorkspaceSubscriptionOutput
}

func (*WorkspaceSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceSubscription)(nil)).Elem()
}

func (i *WorkspaceSubscription) ToWorkspaceSubscriptionOutput() WorkspaceSubscriptionOutput {
	return i.ToWorkspaceSubscriptionOutputWithContext(context.Background())
}

func (i *WorkspaceSubscription) ToWorkspaceSubscriptionOutputWithContext(ctx context.Context) WorkspaceSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceSubscriptionOutput)
}

type WorkspaceSubscriptionOutput struct{ *pulumi.OutputState }

func (WorkspaceSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceSubscription)(nil)).Elem()
}

func (o WorkspaceSubscriptionOutput) ToWorkspaceSubscriptionOutput() WorkspaceSubscriptionOutput {
	return o
}

func (o WorkspaceSubscriptionOutput) ToWorkspaceSubscriptionOutputWithContext(ctx context.Context) WorkspaceSubscriptionOutput {
	return o
}

// Determines whether tracing is enabled
func (o WorkspaceSubscriptionOutput) AllowTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.BoolPtrOutput { return v.AllowTracing }).(pulumi.BoolPtrOutput)
}

// Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o WorkspaceSubscriptionOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// The name of the subscription, or null if the subscription has no name.
func (o WorkspaceSubscriptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o WorkspaceSubscriptionOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

// Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o WorkspaceSubscriptionOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o WorkspaceSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o WorkspaceSubscriptionOutput) NotificationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.NotificationDate }).(pulumi.StringPtrOutput)
}

// The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.
func (o WorkspaceSubscriptionOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
func (o WorkspaceSubscriptionOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// Scope like /products/{productId} or /apis or /apis/{apiId}.
func (o WorkspaceSubscriptionOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
func (o WorkspaceSubscriptionOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

// Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o WorkspaceSubscriptionOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
func (o WorkspaceSubscriptionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Optional subscription comment added by an administrator when the state is changed to the 'rejected'.
func (o WorkspaceSubscriptionOutput) StateComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringPtrOutput { return v.StateComment }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceSubscriptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceSubscription) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceSubscriptionOutput{})
}
