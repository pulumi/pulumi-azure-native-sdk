// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Markdown documentation details.
type Documentation struct {
	pulumi.CustomResourceState

	// Markdown documentation content.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// documentation title.
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDocumentation registers a new resource with the given unique name, arguments, and options.
func NewDocumentation(ctx *pulumi.Context,
	name string, args *DocumentationArgs, opts ...pulumi.ResourceOption) (*Documentation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource Documentation
	err := ctx.RegisterResource("azure-native:apimanagement/v20220801:Documentation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentation gets an existing Documentation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentationState, opts ...pulumi.ResourceOption) (*Documentation, error) {
	var resource Documentation
	err := ctx.ReadResource("azure-native:apimanagement/v20220801:Documentation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Documentation resources.
type documentationState struct {
}

type DocumentationState struct {
}

func (DocumentationState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentationState)(nil)).Elem()
}

type documentationArgs struct {
	// Markdown documentation content.
	Content *string `pulumi:"content"`
	// Documentation identifier. Must be unique in the current API Management service instance.
	DocumentationId *string `pulumi:"documentationId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// documentation title.
	Title *string `pulumi:"title"`
}

// The set of arguments for constructing a Documentation resource.
type DocumentationArgs struct {
	// Markdown documentation content.
	Content pulumi.StringPtrInput
	// Documentation identifier. Must be unique in the current API Management service instance.
	DocumentationId pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// documentation title.
	Title pulumi.StringPtrInput
}

func (DocumentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentationArgs)(nil)).Elem()
}

type DocumentationInput interface {
	pulumi.Input

	ToDocumentationOutput() DocumentationOutput
	ToDocumentationOutputWithContext(ctx context.Context) DocumentationOutput
}

func (*Documentation) ElementType() reflect.Type {
	return reflect.TypeOf((**Documentation)(nil)).Elem()
}

func (i *Documentation) ToDocumentationOutput() DocumentationOutput {
	return i.ToDocumentationOutputWithContext(context.Background())
}

func (i *Documentation) ToDocumentationOutputWithContext(ctx context.Context) DocumentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentationOutput)
}

type DocumentationOutput struct{ *pulumi.OutputState }

func (DocumentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Documentation)(nil)).Elem()
}

func (o DocumentationOutput) ToDocumentationOutput() DocumentationOutput {
	return o
}

func (o DocumentationOutput) ToDocumentationOutputWithContext(ctx context.Context) DocumentationOutput {
	return o
}

// Markdown documentation content.
func (o DocumentationOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Documentation) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o DocumentationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Documentation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// documentation title.
func (o DocumentationOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Documentation) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DocumentationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Documentation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DocumentationOutput{})
}
