// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Authorization header information.
type BackendAuthorizationHeaderCredentials struct {
	// Authentication Parameter value.
	Parameter string `pulumi:"parameter"`
	// Authentication Scheme name.
	Scheme string `pulumi:"scheme"`
}

// BackendAuthorizationHeaderCredentialsInput is an input type that accepts BackendAuthorizationHeaderCredentialsArgs and BackendAuthorizationHeaderCredentialsOutput values.
// You can construct a concrete instance of `BackendAuthorizationHeaderCredentialsInput` via:
//
//	BackendAuthorizationHeaderCredentialsArgs{...}
type BackendAuthorizationHeaderCredentialsInput interface {
	pulumi.Input

	ToBackendAuthorizationHeaderCredentialsOutput() BackendAuthorizationHeaderCredentialsOutput
	ToBackendAuthorizationHeaderCredentialsOutputWithContext(context.Context) BackendAuthorizationHeaderCredentialsOutput
}

// Authorization header information.
type BackendAuthorizationHeaderCredentialsArgs struct {
	// Authentication Parameter value.
	Parameter pulumi.StringInput `pulumi:"parameter"`
	// Authentication Scheme name.
	Scheme pulumi.StringInput `pulumi:"scheme"`
}

func (BackendAuthorizationHeaderCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendAuthorizationHeaderCredentials)(nil)).Elem()
}

func (i BackendAuthorizationHeaderCredentialsArgs) ToBackendAuthorizationHeaderCredentialsOutput() BackendAuthorizationHeaderCredentialsOutput {
	return i.ToBackendAuthorizationHeaderCredentialsOutputWithContext(context.Background())
}

func (i BackendAuthorizationHeaderCredentialsArgs) ToBackendAuthorizationHeaderCredentialsOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAuthorizationHeaderCredentialsOutput)
}

func (i BackendAuthorizationHeaderCredentialsArgs) ToBackendAuthorizationHeaderCredentialsPtrOutput() BackendAuthorizationHeaderCredentialsPtrOutput {
	return i.ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(context.Background())
}

func (i BackendAuthorizationHeaderCredentialsArgs) ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAuthorizationHeaderCredentialsOutput).ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(ctx)
}

// BackendAuthorizationHeaderCredentialsPtrInput is an input type that accepts BackendAuthorizationHeaderCredentialsArgs, BackendAuthorizationHeaderCredentialsPtr and BackendAuthorizationHeaderCredentialsPtrOutput values.
// You can construct a concrete instance of `BackendAuthorizationHeaderCredentialsPtrInput` via:
//
//	        BackendAuthorizationHeaderCredentialsArgs{...}
//
//	or:
//
//	        nil
type BackendAuthorizationHeaderCredentialsPtrInput interface {
	pulumi.Input

	ToBackendAuthorizationHeaderCredentialsPtrOutput() BackendAuthorizationHeaderCredentialsPtrOutput
	ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(context.Context) BackendAuthorizationHeaderCredentialsPtrOutput
}

type backendAuthorizationHeaderCredentialsPtrType BackendAuthorizationHeaderCredentialsArgs

func BackendAuthorizationHeaderCredentialsPtr(v *BackendAuthorizationHeaderCredentialsArgs) BackendAuthorizationHeaderCredentialsPtrInput {
	return (*backendAuthorizationHeaderCredentialsPtrType)(v)
}

func (*backendAuthorizationHeaderCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendAuthorizationHeaderCredentials)(nil)).Elem()
}

func (i *backendAuthorizationHeaderCredentialsPtrType) ToBackendAuthorizationHeaderCredentialsPtrOutput() BackendAuthorizationHeaderCredentialsPtrOutput {
	return i.ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(context.Background())
}

func (i *backendAuthorizationHeaderCredentialsPtrType) ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAuthorizationHeaderCredentialsPtrOutput)
}

// Authorization header information.
type BackendAuthorizationHeaderCredentialsOutput struct{ *pulumi.OutputState }

func (BackendAuthorizationHeaderCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendAuthorizationHeaderCredentials)(nil)).Elem()
}

func (o BackendAuthorizationHeaderCredentialsOutput) ToBackendAuthorizationHeaderCredentialsOutput() BackendAuthorizationHeaderCredentialsOutput {
	return o
}

func (o BackendAuthorizationHeaderCredentialsOutput) ToBackendAuthorizationHeaderCredentialsOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsOutput {
	return o
}

func (o BackendAuthorizationHeaderCredentialsOutput) ToBackendAuthorizationHeaderCredentialsPtrOutput() BackendAuthorizationHeaderCredentialsPtrOutput {
	return o.ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(context.Background())
}

func (o BackendAuthorizationHeaderCredentialsOutput) ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendAuthorizationHeaderCredentials) *BackendAuthorizationHeaderCredentials {
		return &v
	}).(BackendAuthorizationHeaderCredentialsPtrOutput)
}

// Authentication Parameter value.
func (o BackendAuthorizationHeaderCredentialsOutput) Parameter() pulumi.StringOutput {
	return o.ApplyT(func(v BackendAuthorizationHeaderCredentials) string { return v.Parameter }).(pulumi.StringOutput)
}

// Authentication Scheme name.
func (o BackendAuthorizationHeaderCredentialsOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v BackendAuthorizationHeaderCredentials) string { return v.Scheme }).(pulumi.StringOutput)
}

type BackendAuthorizationHeaderCredentialsPtrOutput struct{ *pulumi.OutputState }

func (BackendAuthorizationHeaderCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendAuthorizationHeaderCredentials)(nil)).Elem()
}

func (o BackendAuthorizationHeaderCredentialsPtrOutput) ToBackendAuthorizationHeaderCredentialsPtrOutput() BackendAuthorizationHeaderCredentialsPtrOutput {
	return o
}

func (o BackendAuthorizationHeaderCredentialsPtrOutput) ToBackendAuthorizationHeaderCredentialsPtrOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsPtrOutput {
	return o
}

func (o BackendAuthorizationHeaderCredentialsPtrOutput) Elem() BackendAuthorizationHeaderCredentialsOutput {
	return o.ApplyT(func(v *BackendAuthorizationHeaderCredentials) BackendAuthorizationHeaderCredentials {
		if v != nil {
			return *v
		}
		var ret BackendAuthorizationHeaderCredentials
		return ret
	}).(BackendAuthorizationHeaderCredentialsOutput)
}

// Authentication Parameter value.
func (o BackendAuthorizationHeaderCredentialsPtrOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthorizationHeaderCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Parameter
	}).(pulumi.StringPtrOutput)
}

// Authentication Scheme name.
func (o BackendAuthorizationHeaderCredentialsPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthorizationHeaderCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Authorization header information.
type BackendAuthorizationHeaderCredentialsResponse struct {
	// Authentication Parameter value.
	Parameter string `pulumi:"parameter"`
	// Authentication Scheme name.
	Scheme string `pulumi:"scheme"`
}

// Authorization header information.
type BackendAuthorizationHeaderCredentialsResponseOutput struct{ *pulumi.OutputState }

func (BackendAuthorizationHeaderCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendAuthorizationHeaderCredentialsResponse)(nil)).Elem()
}

func (o BackendAuthorizationHeaderCredentialsResponseOutput) ToBackendAuthorizationHeaderCredentialsResponseOutput() BackendAuthorizationHeaderCredentialsResponseOutput {
	return o
}

func (o BackendAuthorizationHeaderCredentialsResponseOutput) ToBackendAuthorizationHeaderCredentialsResponseOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsResponseOutput {
	return o
}

// Authentication Parameter value.
func (o BackendAuthorizationHeaderCredentialsResponseOutput) Parameter() pulumi.StringOutput {
	return o.ApplyT(func(v BackendAuthorizationHeaderCredentialsResponse) string { return v.Parameter }).(pulumi.StringOutput)
}

// Authentication Scheme name.
func (o BackendAuthorizationHeaderCredentialsResponseOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v BackendAuthorizationHeaderCredentialsResponse) string { return v.Scheme }).(pulumi.StringOutput)
}

type BackendAuthorizationHeaderCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendAuthorizationHeaderCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendAuthorizationHeaderCredentialsResponse)(nil)).Elem()
}

func (o BackendAuthorizationHeaderCredentialsResponsePtrOutput) ToBackendAuthorizationHeaderCredentialsResponsePtrOutput() BackendAuthorizationHeaderCredentialsResponsePtrOutput {
	return o
}

func (o BackendAuthorizationHeaderCredentialsResponsePtrOutput) ToBackendAuthorizationHeaderCredentialsResponsePtrOutputWithContext(ctx context.Context) BackendAuthorizationHeaderCredentialsResponsePtrOutput {
	return o
}

func (o BackendAuthorizationHeaderCredentialsResponsePtrOutput) Elem() BackendAuthorizationHeaderCredentialsResponseOutput {
	return o.ApplyT(func(v *BackendAuthorizationHeaderCredentialsResponse) BackendAuthorizationHeaderCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret BackendAuthorizationHeaderCredentialsResponse
		return ret
	}).(BackendAuthorizationHeaderCredentialsResponseOutput)
}

// Authentication Parameter value.
func (o BackendAuthorizationHeaderCredentialsResponsePtrOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthorizationHeaderCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Parameter
	}).(pulumi.StringPtrOutput)
}

// Authentication Scheme name.
func (o BackendAuthorizationHeaderCredentialsResponsePtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAuthorizationHeaderCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Details of the Credentials used to connect to Backend.
type BackendCredentialsContract struct {
	// Authorization header authentication
	Authorization *BackendAuthorizationHeaderCredentials `pulumi:"authorization"`
	// List of Client Certificate Thumbprint.
	Certificate []string `pulumi:"certificate"`
	// Header Parameter description.
	Header map[string][]string `pulumi:"header"`
	// Query Parameter description.
	Query map[string][]string `pulumi:"query"`
}

// BackendCredentialsContractInput is an input type that accepts BackendCredentialsContractArgs and BackendCredentialsContractOutput values.
// You can construct a concrete instance of `BackendCredentialsContractInput` via:
//
//	BackendCredentialsContractArgs{...}
type BackendCredentialsContractInput interface {
	pulumi.Input

	ToBackendCredentialsContractOutput() BackendCredentialsContractOutput
	ToBackendCredentialsContractOutputWithContext(context.Context) BackendCredentialsContractOutput
}

// Details of the Credentials used to connect to Backend.
type BackendCredentialsContractArgs struct {
	// Authorization header authentication
	Authorization BackendAuthorizationHeaderCredentialsPtrInput `pulumi:"authorization"`
	// List of Client Certificate Thumbprint.
	Certificate pulumi.StringArrayInput `pulumi:"certificate"`
	// Header Parameter description.
	Header pulumi.StringArrayMapInput `pulumi:"header"`
	// Query Parameter description.
	Query pulumi.StringArrayMapInput `pulumi:"query"`
}

func (BackendCredentialsContractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendCredentialsContract)(nil)).Elem()
}

func (i BackendCredentialsContractArgs) ToBackendCredentialsContractOutput() BackendCredentialsContractOutput {
	return i.ToBackendCredentialsContractOutputWithContext(context.Background())
}

func (i BackendCredentialsContractArgs) ToBackendCredentialsContractOutputWithContext(ctx context.Context) BackendCredentialsContractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendCredentialsContractOutput)
}

func (i BackendCredentialsContractArgs) ToBackendCredentialsContractPtrOutput() BackendCredentialsContractPtrOutput {
	return i.ToBackendCredentialsContractPtrOutputWithContext(context.Background())
}

func (i BackendCredentialsContractArgs) ToBackendCredentialsContractPtrOutputWithContext(ctx context.Context) BackendCredentialsContractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendCredentialsContractOutput).ToBackendCredentialsContractPtrOutputWithContext(ctx)
}

// BackendCredentialsContractPtrInput is an input type that accepts BackendCredentialsContractArgs, BackendCredentialsContractPtr and BackendCredentialsContractPtrOutput values.
// You can construct a concrete instance of `BackendCredentialsContractPtrInput` via:
//
//	        BackendCredentialsContractArgs{...}
//
//	or:
//
//	        nil
type BackendCredentialsContractPtrInput interface {
	pulumi.Input

	ToBackendCredentialsContractPtrOutput() BackendCredentialsContractPtrOutput
	ToBackendCredentialsContractPtrOutputWithContext(context.Context) BackendCredentialsContractPtrOutput
}

type backendCredentialsContractPtrType BackendCredentialsContractArgs

func BackendCredentialsContractPtr(v *BackendCredentialsContractArgs) BackendCredentialsContractPtrInput {
	return (*backendCredentialsContractPtrType)(v)
}

func (*backendCredentialsContractPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendCredentialsContract)(nil)).Elem()
}

func (i *backendCredentialsContractPtrType) ToBackendCredentialsContractPtrOutput() BackendCredentialsContractPtrOutput {
	return i.ToBackendCredentialsContractPtrOutputWithContext(context.Background())
}

func (i *backendCredentialsContractPtrType) ToBackendCredentialsContractPtrOutputWithContext(ctx context.Context) BackendCredentialsContractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendCredentialsContractPtrOutput)
}

// Details of the Credentials used to connect to Backend.
type BackendCredentialsContractOutput struct{ *pulumi.OutputState }

func (BackendCredentialsContractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendCredentialsContract)(nil)).Elem()
}

func (o BackendCredentialsContractOutput) ToBackendCredentialsContractOutput() BackendCredentialsContractOutput {
	return o
}

func (o BackendCredentialsContractOutput) ToBackendCredentialsContractOutputWithContext(ctx context.Context) BackendCredentialsContractOutput {
	return o
}

func (o BackendCredentialsContractOutput) ToBackendCredentialsContractPtrOutput() BackendCredentialsContractPtrOutput {
	return o.ToBackendCredentialsContractPtrOutputWithContext(context.Background())
}

func (o BackendCredentialsContractOutput) ToBackendCredentialsContractPtrOutputWithContext(ctx context.Context) BackendCredentialsContractPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendCredentialsContract) *BackendCredentialsContract {
		return &v
	}).(BackendCredentialsContractPtrOutput)
}

// Authorization header authentication
func (o BackendCredentialsContractOutput) Authorization() BackendAuthorizationHeaderCredentialsPtrOutput {
	return o.ApplyT(func(v BackendCredentialsContract) *BackendAuthorizationHeaderCredentials { return v.Authorization }).(BackendAuthorizationHeaderCredentialsPtrOutput)
}

// List of Client Certificate Thumbprint.
func (o BackendCredentialsContractOutput) Certificate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendCredentialsContract) []string { return v.Certificate }).(pulumi.StringArrayOutput)
}

// Header Parameter description.
func (o BackendCredentialsContractOutput) Header() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v BackendCredentialsContract) map[string][]string { return v.Header }).(pulumi.StringArrayMapOutput)
}

// Query Parameter description.
func (o BackendCredentialsContractOutput) Query() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v BackendCredentialsContract) map[string][]string { return v.Query }).(pulumi.StringArrayMapOutput)
}

type BackendCredentialsContractPtrOutput struct{ *pulumi.OutputState }

func (BackendCredentialsContractPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendCredentialsContract)(nil)).Elem()
}

func (o BackendCredentialsContractPtrOutput) ToBackendCredentialsContractPtrOutput() BackendCredentialsContractPtrOutput {
	return o
}

func (o BackendCredentialsContractPtrOutput) ToBackendCredentialsContractPtrOutputWithContext(ctx context.Context) BackendCredentialsContractPtrOutput {
	return o
}

func (o BackendCredentialsContractPtrOutput) Elem() BackendCredentialsContractOutput {
	return o.ApplyT(func(v *BackendCredentialsContract) BackendCredentialsContract {
		if v != nil {
			return *v
		}
		var ret BackendCredentialsContract
		return ret
	}).(BackendCredentialsContractOutput)
}

// Authorization header authentication
func (o BackendCredentialsContractPtrOutput) Authorization() BackendAuthorizationHeaderCredentialsPtrOutput {
	return o.ApplyT(func(v *BackendCredentialsContract) *BackendAuthorizationHeaderCredentials {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(BackendAuthorizationHeaderCredentialsPtrOutput)
}

// List of Client Certificate Thumbprint.
func (o BackendCredentialsContractPtrOutput) Certificate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendCredentialsContract) []string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringArrayOutput)
}

// Header Parameter description.
func (o BackendCredentialsContractPtrOutput) Header() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *BackendCredentialsContract) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Header
	}).(pulumi.StringArrayMapOutput)
}

// Query Parameter description.
func (o BackendCredentialsContractPtrOutput) Query() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *BackendCredentialsContract) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringArrayMapOutput)
}

// Details of the Credentials used to connect to Backend.
type BackendCredentialsContractResponse struct {
	// Authorization header authentication
	Authorization *BackendAuthorizationHeaderCredentialsResponse `pulumi:"authorization"`
	// List of Client Certificate Thumbprint.
	Certificate []string `pulumi:"certificate"`
	// Header Parameter description.
	Header map[string][]string `pulumi:"header"`
	// Query Parameter description.
	Query map[string][]string `pulumi:"query"`
}

// Details of the Credentials used to connect to Backend.
type BackendCredentialsContractResponseOutput struct{ *pulumi.OutputState }

func (BackendCredentialsContractResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendCredentialsContractResponse)(nil)).Elem()
}

func (o BackendCredentialsContractResponseOutput) ToBackendCredentialsContractResponseOutput() BackendCredentialsContractResponseOutput {
	return o
}

func (o BackendCredentialsContractResponseOutput) ToBackendCredentialsContractResponseOutputWithContext(ctx context.Context) BackendCredentialsContractResponseOutput {
	return o
}

// Authorization header authentication
func (o BackendCredentialsContractResponseOutput) Authorization() BackendAuthorizationHeaderCredentialsResponsePtrOutput {
	return o.ApplyT(func(v BackendCredentialsContractResponse) *BackendAuthorizationHeaderCredentialsResponse {
		return v.Authorization
	}).(BackendAuthorizationHeaderCredentialsResponsePtrOutput)
}

// List of Client Certificate Thumbprint.
func (o BackendCredentialsContractResponseOutput) Certificate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendCredentialsContractResponse) []string { return v.Certificate }).(pulumi.StringArrayOutput)
}

// Header Parameter description.
func (o BackendCredentialsContractResponseOutput) Header() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v BackendCredentialsContractResponse) map[string][]string { return v.Header }).(pulumi.StringArrayMapOutput)
}

// Query Parameter description.
func (o BackendCredentialsContractResponseOutput) Query() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v BackendCredentialsContractResponse) map[string][]string { return v.Query }).(pulumi.StringArrayMapOutput)
}

type BackendCredentialsContractResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendCredentialsContractResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendCredentialsContractResponse)(nil)).Elem()
}

func (o BackendCredentialsContractResponsePtrOutput) ToBackendCredentialsContractResponsePtrOutput() BackendCredentialsContractResponsePtrOutput {
	return o
}

func (o BackendCredentialsContractResponsePtrOutput) ToBackendCredentialsContractResponsePtrOutputWithContext(ctx context.Context) BackendCredentialsContractResponsePtrOutput {
	return o
}

func (o BackendCredentialsContractResponsePtrOutput) Elem() BackendCredentialsContractResponseOutput {
	return o.ApplyT(func(v *BackendCredentialsContractResponse) BackendCredentialsContractResponse {
		if v != nil {
			return *v
		}
		var ret BackendCredentialsContractResponse
		return ret
	}).(BackendCredentialsContractResponseOutput)
}

// Authorization header authentication
func (o BackendCredentialsContractResponsePtrOutput) Authorization() BackendAuthorizationHeaderCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *BackendCredentialsContractResponse) *BackendAuthorizationHeaderCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(BackendAuthorizationHeaderCredentialsResponsePtrOutput)
}

// List of Client Certificate Thumbprint.
func (o BackendCredentialsContractResponsePtrOutput) Certificate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendCredentialsContractResponse) []string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringArrayOutput)
}

// Header Parameter description.
func (o BackendCredentialsContractResponsePtrOutput) Header() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *BackendCredentialsContractResponse) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Header
	}).(pulumi.StringArrayMapOutput)
}

// Query Parameter description.
func (o BackendCredentialsContractResponsePtrOutput) Query() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *BackendCredentialsContractResponse) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringArrayMapOutput)
}

// Properties specific to the Backend Type.
type BackendProperties struct {
	// Backend Service Fabric Cluster Properties
	ServiceFabricCluster *BackendServiceFabricClusterProperties `pulumi:"serviceFabricCluster"`
}

// BackendPropertiesInput is an input type that accepts BackendPropertiesArgs and BackendPropertiesOutput values.
// You can construct a concrete instance of `BackendPropertiesInput` via:
//
//	BackendPropertiesArgs{...}
type BackendPropertiesInput interface {
	pulumi.Input

	ToBackendPropertiesOutput() BackendPropertiesOutput
	ToBackendPropertiesOutputWithContext(context.Context) BackendPropertiesOutput
}

// Properties specific to the Backend Type.
type BackendPropertiesArgs struct {
	// Backend Service Fabric Cluster Properties
	ServiceFabricCluster BackendServiceFabricClusterPropertiesPtrInput `pulumi:"serviceFabricCluster"`
}

func (BackendPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendProperties)(nil)).Elem()
}

func (i BackendPropertiesArgs) ToBackendPropertiesOutput() BackendPropertiesOutput {
	return i.ToBackendPropertiesOutputWithContext(context.Background())
}

func (i BackendPropertiesArgs) ToBackendPropertiesOutputWithContext(ctx context.Context) BackendPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPropertiesOutput)
}

func (i BackendPropertiesArgs) ToBackendPropertiesPtrOutput() BackendPropertiesPtrOutput {
	return i.ToBackendPropertiesPtrOutputWithContext(context.Background())
}

func (i BackendPropertiesArgs) ToBackendPropertiesPtrOutputWithContext(ctx context.Context) BackendPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPropertiesOutput).ToBackendPropertiesPtrOutputWithContext(ctx)
}

// BackendPropertiesPtrInput is an input type that accepts BackendPropertiesArgs, BackendPropertiesPtr and BackendPropertiesPtrOutput values.
// You can construct a concrete instance of `BackendPropertiesPtrInput` via:
//
//	        BackendPropertiesArgs{...}
//
//	or:
//
//	        nil
type BackendPropertiesPtrInput interface {
	pulumi.Input

	ToBackendPropertiesPtrOutput() BackendPropertiesPtrOutput
	ToBackendPropertiesPtrOutputWithContext(context.Context) BackendPropertiesPtrOutput
}

type backendPropertiesPtrType BackendPropertiesArgs

func BackendPropertiesPtr(v *BackendPropertiesArgs) BackendPropertiesPtrInput {
	return (*backendPropertiesPtrType)(v)
}

func (*backendPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendProperties)(nil)).Elem()
}

func (i *backendPropertiesPtrType) ToBackendPropertiesPtrOutput() BackendPropertiesPtrOutput {
	return i.ToBackendPropertiesPtrOutputWithContext(context.Background())
}

func (i *backendPropertiesPtrType) ToBackendPropertiesPtrOutputWithContext(ctx context.Context) BackendPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPropertiesPtrOutput)
}

// Properties specific to the Backend Type.
type BackendPropertiesOutput struct{ *pulumi.OutputState }

func (BackendPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendProperties)(nil)).Elem()
}

func (o BackendPropertiesOutput) ToBackendPropertiesOutput() BackendPropertiesOutput {
	return o
}

func (o BackendPropertiesOutput) ToBackendPropertiesOutputWithContext(ctx context.Context) BackendPropertiesOutput {
	return o
}

func (o BackendPropertiesOutput) ToBackendPropertiesPtrOutput() BackendPropertiesPtrOutput {
	return o.ToBackendPropertiesPtrOutputWithContext(context.Background())
}

func (o BackendPropertiesOutput) ToBackendPropertiesPtrOutputWithContext(ctx context.Context) BackendPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendProperties) *BackendProperties {
		return &v
	}).(BackendPropertiesPtrOutput)
}

// Backend Service Fabric Cluster Properties
func (o BackendPropertiesOutput) ServiceFabricCluster() BackendServiceFabricClusterPropertiesPtrOutput {
	return o.ApplyT(func(v BackendProperties) *BackendServiceFabricClusterProperties { return v.ServiceFabricCluster }).(BackendServiceFabricClusterPropertiesPtrOutput)
}

type BackendPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BackendPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendProperties)(nil)).Elem()
}

func (o BackendPropertiesPtrOutput) ToBackendPropertiesPtrOutput() BackendPropertiesPtrOutput {
	return o
}

func (o BackendPropertiesPtrOutput) ToBackendPropertiesPtrOutputWithContext(ctx context.Context) BackendPropertiesPtrOutput {
	return o
}

func (o BackendPropertiesPtrOutput) Elem() BackendPropertiesOutput {
	return o.ApplyT(func(v *BackendProperties) BackendProperties {
		if v != nil {
			return *v
		}
		var ret BackendProperties
		return ret
	}).(BackendPropertiesOutput)
}

// Backend Service Fabric Cluster Properties
func (o BackendPropertiesPtrOutput) ServiceFabricCluster() BackendServiceFabricClusterPropertiesPtrOutput {
	return o.ApplyT(func(v *BackendProperties) *BackendServiceFabricClusterProperties {
		if v == nil {
			return nil
		}
		return v.ServiceFabricCluster
	}).(BackendServiceFabricClusterPropertiesPtrOutput)
}

// Properties specific to the Backend Type.
type BackendPropertiesResponse struct {
	// Backend Service Fabric Cluster Properties
	ServiceFabricCluster *BackendServiceFabricClusterPropertiesResponse `pulumi:"serviceFabricCluster"`
}

// Properties specific to the Backend Type.
type BackendPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BackendPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPropertiesResponse)(nil)).Elem()
}

func (o BackendPropertiesResponseOutput) ToBackendPropertiesResponseOutput() BackendPropertiesResponseOutput {
	return o
}

func (o BackendPropertiesResponseOutput) ToBackendPropertiesResponseOutputWithContext(ctx context.Context) BackendPropertiesResponseOutput {
	return o
}

// Backend Service Fabric Cluster Properties
func (o BackendPropertiesResponseOutput) ServiceFabricCluster() BackendServiceFabricClusterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BackendPropertiesResponse) *BackendServiceFabricClusterPropertiesResponse {
		return v.ServiceFabricCluster
	}).(BackendServiceFabricClusterPropertiesResponsePtrOutput)
}

// Details of the Backend WebProxy Server to use in the Request to Backend.
type BackendProxyContract struct {
	// Password to connect to the WebProxy Server
	Password *string `pulumi:"password"`
	// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
	Url string `pulumi:"url"`
	// Username to connect to the WebProxy server
	Username *string `pulumi:"username"`
}

// BackendProxyContractInput is an input type that accepts BackendProxyContractArgs and BackendProxyContractOutput values.
// You can construct a concrete instance of `BackendProxyContractInput` via:
//
//	BackendProxyContractArgs{...}
type BackendProxyContractInput interface {
	pulumi.Input

	ToBackendProxyContractOutput() BackendProxyContractOutput
	ToBackendProxyContractOutputWithContext(context.Context) BackendProxyContractOutput
}

// Details of the Backend WebProxy Server to use in the Request to Backend.
type BackendProxyContractArgs struct {
	// Password to connect to the WebProxy Server
	Password pulumi.StringPtrInput `pulumi:"password"`
	// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
	Url pulumi.StringInput `pulumi:"url"`
	// Username to connect to the WebProxy server
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (BackendProxyContractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendProxyContract)(nil)).Elem()
}

func (i BackendProxyContractArgs) ToBackendProxyContractOutput() BackendProxyContractOutput {
	return i.ToBackendProxyContractOutputWithContext(context.Background())
}

func (i BackendProxyContractArgs) ToBackendProxyContractOutputWithContext(ctx context.Context) BackendProxyContractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendProxyContractOutput)
}

func (i BackendProxyContractArgs) ToBackendProxyContractPtrOutput() BackendProxyContractPtrOutput {
	return i.ToBackendProxyContractPtrOutputWithContext(context.Background())
}

func (i BackendProxyContractArgs) ToBackendProxyContractPtrOutputWithContext(ctx context.Context) BackendProxyContractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendProxyContractOutput).ToBackendProxyContractPtrOutputWithContext(ctx)
}

// BackendProxyContractPtrInput is an input type that accepts BackendProxyContractArgs, BackendProxyContractPtr and BackendProxyContractPtrOutput values.
// You can construct a concrete instance of `BackendProxyContractPtrInput` via:
//
//	        BackendProxyContractArgs{...}
//
//	or:
//
//	        nil
type BackendProxyContractPtrInput interface {
	pulumi.Input

	ToBackendProxyContractPtrOutput() BackendProxyContractPtrOutput
	ToBackendProxyContractPtrOutputWithContext(context.Context) BackendProxyContractPtrOutput
}

type backendProxyContractPtrType BackendProxyContractArgs

func BackendProxyContractPtr(v *BackendProxyContractArgs) BackendProxyContractPtrInput {
	return (*backendProxyContractPtrType)(v)
}

func (*backendProxyContractPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendProxyContract)(nil)).Elem()
}

func (i *backendProxyContractPtrType) ToBackendProxyContractPtrOutput() BackendProxyContractPtrOutput {
	return i.ToBackendProxyContractPtrOutputWithContext(context.Background())
}

func (i *backendProxyContractPtrType) ToBackendProxyContractPtrOutputWithContext(ctx context.Context) BackendProxyContractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendProxyContractPtrOutput)
}

// Details of the Backend WebProxy Server to use in the Request to Backend.
type BackendProxyContractOutput struct{ *pulumi.OutputState }

func (BackendProxyContractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendProxyContract)(nil)).Elem()
}

func (o BackendProxyContractOutput) ToBackendProxyContractOutput() BackendProxyContractOutput {
	return o
}

func (o BackendProxyContractOutput) ToBackendProxyContractOutputWithContext(ctx context.Context) BackendProxyContractOutput {
	return o
}

func (o BackendProxyContractOutput) ToBackendProxyContractPtrOutput() BackendProxyContractPtrOutput {
	return o.ToBackendProxyContractPtrOutputWithContext(context.Background())
}

func (o BackendProxyContractOutput) ToBackendProxyContractPtrOutputWithContext(ctx context.Context) BackendProxyContractPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendProxyContract) *BackendProxyContract {
		return &v
	}).(BackendProxyContractPtrOutput)
}

// Password to connect to the WebProxy Server
func (o BackendProxyContractOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendProxyContract) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
func (o BackendProxyContractOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v BackendProxyContract) string { return v.Url }).(pulumi.StringOutput)
}

// Username to connect to the WebProxy server
func (o BackendProxyContractOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendProxyContract) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type BackendProxyContractPtrOutput struct{ *pulumi.OutputState }

func (BackendProxyContractPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendProxyContract)(nil)).Elem()
}

func (o BackendProxyContractPtrOutput) ToBackendProxyContractPtrOutput() BackendProxyContractPtrOutput {
	return o
}

func (o BackendProxyContractPtrOutput) ToBackendProxyContractPtrOutputWithContext(ctx context.Context) BackendProxyContractPtrOutput {
	return o
}

func (o BackendProxyContractPtrOutput) Elem() BackendProxyContractOutput {
	return o.ApplyT(func(v *BackendProxyContract) BackendProxyContract {
		if v != nil {
			return *v
		}
		var ret BackendProxyContract
		return ret
	}).(BackendProxyContractOutput)
}

// Password to connect to the WebProxy Server
func (o BackendProxyContractPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendProxyContract) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
func (o BackendProxyContractPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendProxyContract) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Username to connect to the WebProxy server
func (o BackendProxyContractPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendProxyContract) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Details of the Backend WebProxy Server to use in the Request to Backend.
type BackendProxyContractResponse struct {
	// Password to connect to the WebProxy Server
	Password *string `pulumi:"password"`
	// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
	Url string `pulumi:"url"`
	// Username to connect to the WebProxy server
	Username *string `pulumi:"username"`
}

// Details of the Backend WebProxy Server to use in the Request to Backend.
type BackendProxyContractResponseOutput struct{ *pulumi.OutputState }

func (BackendProxyContractResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendProxyContractResponse)(nil)).Elem()
}

func (o BackendProxyContractResponseOutput) ToBackendProxyContractResponseOutput() BackendProxyContractResponseOutput {
	return o
}

func (o BackendProxyContractResponseOutput) ToBackendProxyContractResponseOutputWithContext(ctx context.Context) BackendProxyContractResponseOutput {
	return o
}

// Password to connect to the WebProxy Server
func (o BackendProxyContractResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendProxyContractResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
func (o BackendProxyContractResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v BackendProxyContractResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Username to connect to the WebProxy server
func (o BackendProxyContractResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendProxyContractResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type BackendProxyContractResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendProxyContractResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendProxyContractResponse)(nil)).Elem()
}

func (o BackendProxyContractResponsePtrOutput) ToBackendProxyContractResponsePtrOutput() BackendProxyContractResponsePtrOutput {
	return o
}

func (o BackendProxyContractResponsePtrOutput) ToBackendProxyContractResponsePtrOutputWithContext(ctx context.Context) BackendProxyContractResponsePtrOutput {
	return o
}

func (o BackendProxyContractResponsePtrOutput) Elem() BackendProxyContractResponseOutput {
	return o.ApplyT(func(v *BackendProxyContractResponse) BackendProxyContractResponse {
		if v != nil {
			return *v
		}
		var ret BackendProxyContractResponse
		return ret
	}).(BackendProxyContractResponseOutput)
}

// Password to connect to the WebProxy Server
func (o BackendProxyContractResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendProxyContractResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
func (o BackendProxyContractResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendProxyContractResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Username to connect to the WebProxy server
func (o BackendProxyContractResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendProxyContractResponse) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Properties of the Service Fabric Type Backend.
type BackendServiceFabricClusterProperties struct {
	// The client certificate thumbprint for the management endpoint.
	ClientCertificatethumbprint string `pulumi:"clientCertificatethumbprint"`
	// The cluster management endpoint.
	ManagementEndpoints []string `pulumi:"managementEndpoints"`
	// Maximum number of retries while attempting resolve the partition.
	MaxPartitionResolutionRetries *int `pulumi:"maxPartitionResolutionRetries"`
	// Thumbprints of certificates cluster management service uses for tls communication
	ServerCertificateThumbprints []string `pulumi:"serverCertificateThumbprints"`
	// Server X509 Certificate Names Collection
	ServerX509Names []X509CertificateName `pulumi:"serverX509Names"`
}

// BackendServiceFabricClusterPropertiesInput is an input type that accepts BackendServiceFabricClusterPropertiesArgs and BackendServiceFabricClusterPropertiesOutput values.
// You can construct a concrete instance of `BackendServiceFabricClusterPropertiesInput` via:
//
//	BackendServiceFabricClusterPropertiesArgs{...}
type BackendServiceFabricClusterPropertiesInput interface {
	pulumi.Input

	ToBackendServiceFabricClusterPropertiesOutput() BackendServiceFabricClusterPropertiesOutput
	ToBackendServiceFabricClusterPropertiesOutputWithContext(context.Context) BackendServiceFabricClusterPropertiesOutput
}

// Properties of the Service Fabric Type Backend.
type BackendServiceFabricClusterPropertiesArgs struct {
	// The client certificate thumbprint for the management endpoint.
	ClientCertificatethumbprint pulumi.StringInput `pulumi:"clientCertificatethumbprint"`
	// The cluster management endpoint.
	ManagementEndpoints pulumi.StringArrayInput `pulumi:"managementEndpoints"`
	// Maximum number of retries while attempting resolve the partition.
	MaxPartitionResolutionRetries pulumi.IntPtrInput `pulumi:"maxPartitionResolutionRetries"`
	// Thumbprints of certificates cluster management service uses for tls communication
	ServerCertificateThumbprints pulumi.StringArrayInput `pulumi:"serverCertificateThumbprints"`
	// Server X509 Certificate Names Collection
	ServerX509Names X509CertificateNameArrayInput `pulumi:"serverX509Names"`
}

func (BackendServiceFabricClusterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceFabricClusterProperties)(nil)).Elem()
}

func (i BackendServiceFabricClusterPropertiesArgs) ToBackendServiceFabricClusterPropertiesOutput() BackendServiceFabricClusterPropertiesOutput {
	return i.ToBackendServiceFabricClusterPropertiesOutputWithContext(context.Background())
}

func (i BackendServiceFabricClusterPropertiesArgs) ToBackendServiceFabricClusterPropertiesOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFabricClusterPropertiesOutput)
}

func (i BackendServiceFabricClusterPropertiesArgs) ToBackendServiceFabricClusterPropertiesPtrOutput() BackendServiceFabricClusterPropertiesPtrOutput {
	return i.ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i BackendServiceFabricClusterPropertiesArgs) ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFabricClusterPropertiesOutput).ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(ctx)
}

// BackendServiceFabricClusterPropertiesPtrInput is an input type that accepts BackendServiceFabricClusterPropertiesArgs, BackendServiceFabricClusterPropertiesPtr and BackendServiceFabricClusterPropertiesPtrOutput values.
// You can construct a concrete instance of `BackendServiceFabricClusterPropertiesPtrInput` via:
//
//	        BackendServiceFabricClusterPropertiesArgs{...}
//
//	or:
//
//	        nil
type BackendServiceFabricClusterPropertiesPtrInput interface {
	pulumi.Input

	ToBackendServiceFabricClusterPropertiesPtrOutput() BackendServiceFabricClusterPropertiesPtrOutput
	ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(context.Context) BackendServiceFabricClusterPropertiesPtrOutput
}

type backendServiceFabricClusterPropertiesPtrType BackendServiceFabricClusterPropertiesArgs

func BackendServiceFabricClusterPropertiesPtr(v *BackendServiceFabricClusterPropertiesArgs) BackendServiceFabricClusterPropertiesPtrInput {
	return (*backendServiceFabricClusterPropertiesPtrType)(v)
}

func (*backendServiceFabricClusterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceFabricClusterProperties)(nil)).Elem()
}

func (i *backendServiceFabricClusterPropertiesPtrType) ToBackendServiceFabricClusterPropertiesPtrOutput() BackendServiceFabricClusterPropertiesPtrOutput {
	return i.ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i *backendServiceFabricClusterPropertiesPtrType) ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFabricClusterPropertiesPtrOutput)
}

// Properties of the Service Fabric Type Backend.
type BackendServiceFabricClusterPropertiesOutput struct{ *pulumi.OutputState }

func (BackendServiceFabricClusterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceFabricClusterProperties)(nil)).Elem()
}

func (o BackendServiceFabricClusterPropertiesOutput) ToBackendServiceFabricClusterPropertiesOutput() BackendServiceFabricClusterPropertiesOutput {
	return o
}

func (o BackendServiceFabricClusterPropertiesOutput) ToBackendServiceFabricClusterPropertiesOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesOutput {
	return o
}

func (o BackendServiceFabricClusterPropertiesOutput) ToBackendServiceFabricClusterPropertiesPtrOutput() BackendServiceFabricClusterPropertiesPtrOutput {
	return o.ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(context.Background())
}

func (o BackendServiceFabricClusterPropertiesOutput) ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendServiceFabricClusterProperties) *BackendServiceFabricClusterProperties {
		return &v
	}).(BackendServiceFabricClusterPropertiesPtrOutput)
}

// The client certificate thumbprint for the management endpoint.
func (o BackendServiceFabricClusterPropertiesOutput) ClientCertificatethumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterProperties) string { return v.ClientCertificatethumbprint }).(pulumi.StringOutput)
}

// The cluster management endpoint.
func (o BackendServiceFabricClusterPropertiesOutput) ManagementEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterProperties) []string { return v.ManagementEndpoints }).(pulumi.StringArrayOutput)
}

// Maximum number of retries while attempting resolve the partition.
func (o BackendServiceFabricClusterPropertiesOutput) MaxPartitionResolutionRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterProperties) *int { return v.MaxPartitionResolutionRetries }).(pulumi.IntPtrOutput)
}

// Thumbprints of certificates cluster management service uses for tls communication
func (o BackendServiceFabricClusterPropertiesOutput) ServerCertificateThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterProperties) []string { return v.ServerCertificateThumbprints }).(pulumi.StringArrayOutput)
}

// Server X509 Certificate Names Collection
func (o BackendServiceFabricClusterPropertiesOutput) ServerX509Names() X509CertificateNameArrayOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterProperties) []X509CertificateName { return v.ServerX509Names }).(X509CertificateNameArrayOutput)
}

type BackendServiceFabricClusterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceFabricClusterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceFabricClusterProperties)(nil)).Elem()
}

func (o BackendServiceFabricClusterPropertiesPtrOutput) ToBackendServiceFabricClusterPropertiesPtrOutput() BackendServiceFabricClusterPropertiesPtrOutput {
	return o
}

func (o BackendServiceFabricClusterPropertiesPtrOutput) ToBackendServiceFabricClusterPropertiesPtrOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesPtrOutput {
	return o
}

func (o BackendServiceFabricClusterPropertiesPtrOutput) Elem() BackendServiceFabricClusterPropertiesOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterProperties) BackendServiceFabricClusterProperties {
		if v != nil {
			return *v
		}
		var ret BackendServiceFabricClusterProperties
		return ret
	}).(BackendServiceFabricClusterPropertiesOutput)
}

// The client certificate thumbprint for the management endpoint.
func (o BackendServiceFabricClusterPropertiesPtrOutput) ClientCertificatethumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertificatethumbprint
	}).(pulumi.StringPtrOutput)
}

// The cluster management endpoint.
func (o BackendServiceFabricClusterPropertiesPtrOutput) ManagementEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterProperties) []string {
		if v == nil {
			return nil
		}
		return v.ManagementEndpoints
	}).(pulumi.StringArrayOutput)
}

// Maximum number of retries while attempting resolve the partition.
func (o BackendServiceFabricClusterPropertiesPtrOutput) MaxPartitionResolutionRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxPartitionResolutionRetries
	}).(pulumi.IntPtrOutput)
}

// Thumbprints of certificates cluster management service uses for tls communication
func (o BackendServiceFabricClusterPropertiesPtrOutput) ServerCertificateThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterProperties) []string {
		if v == nil {
			return nil
		}
		return v.ServerCertificateThumbprints
	}).(pulumi.StringArrayOutput)
}

// Server X509 Certificate Names Collection
func (o BackendServiceFabricClusterPropertiesPtrOutput) ServerX509Names() X509CertificateNameArrayOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterProperties) []X509CertificateName {
		if v == nil {
			return nil
		}
		return v.ServerX509Names
	}).(X509CertificateNameArrayOutput)
}

// Properties of the Service Fabric Type Backend.
type BackendServiceFabricClusterPropertiesResponse struct {
	// The client certificate thumbprint for the management endpoint.
	ClientCertificatethumbprint string `pulumi:"clientCertificatethumbprint"`
	// The cluster management endpoint.
	ManagementEndpoints []string `pulumi:"managementEndpoints"`
	// Maximum number of retries while attempting resolve the partition.
	MaxPartitionResolutionRetries *int `pulumi:"maxPartitionResolutionRetries"`
	// Thumbprints of certificates cluster management service uses for tls communication
	ServerCertificateThumbprints []string `pulumi:"serverCertificateThumbprints"`
	// Server X509 Certificate Names Collection
	ServerX509Names []X509CertificateNameResponse `pulumi:"serverX509Names"`
}

// Properties of the Service Fabric Type Backend.
type BackendServiceFabricClusterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BackendServiceFabricClusterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceFabricClusterPropertiesResponse)(nil)).Elem()
}

func (o BackendServiceFabricClusterPropertiesResponseOutput) ToBackendServiceFabricClusterPropertiesResponseOutput() BackendServiceFabricClusterPropertiesResponseOutput {
	return o
}

func (o BackendServiceFabricClusterPropertiesResponseOutput) ToBackendServiceFabricClusterPropertiesResponseOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesResponseOutput {
	return o
}

// The client certificate thumbprint for the management endpoint.
func (o BackendServiceFabricClusterPropertiesResponseOutput) ClientCertificatethumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterPropertiesResponse) string { return v.ClientCertificatethumbprint }).(pulumi.StringOutput)
}

// The cluster management endpoint.
func (o BackendServiceFabricClusterPropertiesResponseOutput) ManagementEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterPropertiesResponse) []string { return v.ManagementEndpoints }).(pulumi.StringArrayOutput)
}

// Maximum number of retries while attempting resolve the partition.
func (o BackendServiceFabricClusterPropertiesResponseOutput) MaxPartitionResolutionRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterPropertiesResponse) *int { return v.MaxPartitionResolutionRetries }).(pulumi.IntPtrOutput)
}

// Thumbprints of certificates cluster management service uses for tls communication
func (o BackendServiceFabricClusterPropertiesResponseOutput) ServerCertificateThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterPropertiesResponse) []string { return v.ServerCertificateThumbprints }).(pulumi.StringArrayOutput)
}

// Server X509 Certificate Names Collection
func (o BackendServiceFabricClusterPropertiesResponseOutput) ServerX509Names() X509CertificateNameResponseArrayOutput {
	return o.ApplyT(func(v BackendServiceFabricClusterPropertiesResponse) []X509CertificateNameResponse {
		return v.ServerX509Names
	}).(X509CertificateNameResponseArrayOutput)
}

type BackendServiceFabricClusterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendServiceFabricClusterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceFabricClusterPropertiesResponse)(nil)).Elem()
}

func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) ToBackendServiceFabricClusterPropertiesResponsePtrOutput() BackendServiceFabricClusterPropertiesResponsePtrOutput {
	return o
}

func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) ToBackendServiceFabricClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) BackendServiceFabricClusterPropertiesResponsePtrOutput {
	return o
}

func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) Elem() BackendServiceFabricClusterPropertiesResponseOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterPropertiesResponse) BackendServiceFabricClusterPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret BackendServiceFabricClusterPropertiesResponse
		return ret
	}).(BackendServiceFabricClusterPropertiesResponseOutput)
}

// The client certificate thumbprint for the management endpoint.
func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) ClientCertificatethumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertificatethumbprint
	}).(pulumi.StringPtrOutput)
}

// The cluster management endpoint.
func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) ManagementEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ManagementEndpoints
	}).(pulumi.StringArrayOutput)
}

// Maximum number of retries while attempting resolve the partition.
func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) MaxPartitionResolutionRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPartitionResolutionRetries
	}).(pulumi.IntPtrOutput)
}

// Thumbprints of certificates cluster management service uses for tls communication
func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) ServerCertificateThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ServerCertificateThumbprints
	}).(pulumi.StringArrayOutput)
}

// Server X509 Certificate Names Collection
func (o BackendServiceFabricClusterPropertiesResponsePtrOutput) ServerX509Names() X509CertificateNameResponseArrayOutput {
	return o.ApplyT(func(v *BackendServiceFabricClusterPropertiesResponse) []X509CertificateNameResponse {
		if v == nil {
			return nil
		}
		return v.ServerX509Names
	}).(X509CertificateNameResponseArrayOutput)
}

// Properties controlling TLS Certificate Validation.
type BackendTlsProperties struct {
	// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
	ValidateCertificateChain *bool `pulumi:"validateCertificateChain"`
	// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
	ValidateCertificateName *bool `pulumi:"validateCertificateName"`
}

// Defaults sets the appropriate defaults for BackendTlsProperties
func (val *BackendTlsProperties) Defaults() *BackendTlsProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ValidateCertificateChain == nil {
		validateCertificateChain_ := true
		tmp.ValidateCertificateChain = &validateCertificateChain_
	}
	if tmp.ValidateCertificateName == nil {
		validateCertificateName_ := true
		tmp.ValidateCertificateName = &validateCertificateName_
	}
	return &tmp
}

// BackendTlsPropertiesInput is an input type that accepts BackendTlsPropertiesArgs and BackendTlsPropertiesOutput values.
// You can construct a concrete instance of `BackendTlsPropertiesInput` via:
//
//	BackendTlsPropertiesArgs{...}
type BackendTlsPropertiesInput interface {
	pulumi.Input

	ToBackendTlsPropertiesOutput() BackendTlsPropertiesOutput
	ToBackendTlsPropertiesOutputWithContext(context.Context) BackendTlsPropertiesOutput
}

// Properties controlling TLS Certificate Validation.
type BackendTlsPropertiesArgs struct {
	// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
	ValidateCertificateChain pulumi.BoolPtrInput `pulumi:"validateCertificateChain"`
	// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
	ValidateCertificateName pulumi.BoolPtrInput `pulumi:"validateCertificateName"`
}

// Defaults sets the appropriate defaults for BackendTlsPropertiesArgs
func (val *BackendTlsPropertiesArgs) Defaults() *BackendTlsPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ValidateCertificateChain == nil {
		tmp.ValidateCertificateChain = pulumi.BoolPtr(true)
	}
	if tmp.ValidateCertificateName == nil {
		tmp.ValidateCertificateName = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (BackendTlsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendTlsProperties)(nil)).Elem()
}

func (i BackendTlsPropertiesArgs) ToBackendTlsPropertiesOutput() BackendTlsPropertiesOutput {
	return i.ToBackendTlsPropertiesOutputWithContext(context.Background())
}

func (i BackendTlsPropertiesArgs) ToBackendTlsPropertiesOutputWithContext(ctx context.Context) BackendTlsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTlsPropertiesOutput)
}

func (i BackendTlsPropertiesArgs) ToBackendTlsPropertiesPtrOutput() BackendTlsPropertiesPtrOutput {
	return i.ToBackendTlsPropertiesPtrOutputWithContext(context.Background())
}

func (i BackendTlsPropertiesArgs) ToBackendTlsPropertiesPtrOutputWithContext(ctx context.Context) BackendTlsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTlsPropertiesOutput).ToBackendTlsPropertiesPtrOutputWithContext(ctx)
}

// BackendTlsPropertiesPtrInput is an input type that accepts BackendTlsPropertiesArgs, BackendTlsPropertiesPtr and BackendTlsPropertiesPtrOutput values.
// You can construct a concrete instance of `BackendTlsPropertiesPtrInput` via:
//
//	        BackendTlsPropertiesArgs{...}
//
//	or:
//
//	        nil
type BackendTlsPropertiesPtrInput interface {
	pulumi.Input

	ToBackendTlsPropertiesPtrOutput() BackendTlsPropertiesPtrOutput
	ToBackendTlsPropertiesPtrOutputWithContext(context.Context) BackendTlsPropertiesPtrOutput
}

type backendTlsPropertiesPtrType BackendTlsPropertiesArgs

func BackendTlsPropertiesPtr(v *BackendTlsPropertiesArgs) BackendTlsPropertiesPtrInput {
	return (*backendTlsPropertiesPtrType)(v)
}

func (*backendTlsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTlsProperties)(nil)).Elem()
}

func (i *backendTlsPropertiesPtrType) ToBackendTlsPropertiesPtrOutput() BackendTlsPropertiesPtrOutput {
	return i.ToBackendTlsPropertiesPtrOutputWithContext(context.Background())
}

func (i *backendTlsPropertiesPtrType) ToBackendTlsPropertiesPtrOutputWithContext(ctx context.Context) BackendTlsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTlsPropertiesPtrOutput)
}

// Properties controlling TLS Certificate Validation.
type BackendTlsPropertiesOutput struct{ *pulumi.OutputState }

func (BackendTlsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendTlsProperties)(nil)).Elem()
}

func (o BackendTlsPropertiesOutput) ToBackendTlsPropertiesOutput() BackendTlsPropertiesOutput {
	return o
}

func (o BackendTlsPropertiesOutput) ToBackendTlsPropertiesOutputWithContext(ctx context.Context) BackendTlsPropertiesOutput {
	return o
}

func (o BackendTlsPropertiesOutput) ToBackendTlsPropertiesPtrOutput() BackendTlsPropertiesPtrOutput {
	return o.ToBackendTlsPropertiesPtrOutputWithContext(context.Background())
}

func (o BackendTlsPropertiesOutput) ToBackendTlsPropertiesPtrOutputWithContext(ctx context.Context) BackendTlsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendTlsProperties) *BackendTlsProperties {
		return &v
	}).(BackendTlsPropertiesPtrOutput)
}

// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesOutput) ValidateCertificateChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendTlsProperties) *bool { return v.ValidateCertificateChain }).(pulumi.BoolPtrOutput)
}

// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesOutput) ValidateCertificateName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendTlsProperties) *bool { return v.ValidateCertificateName }).(pulumi.BoolPtrOutput)
}

type BackendTlsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BackendTlsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTlsProperties)(nil)).Elem()
}

func (o BackendTlsPropertiesPtrOutput) ToBackendTlsPropertiesPtrOutput() BackendTlsPropertiesPtrOutput {
	return o
}

func (o BackendTlsPropertiesPtrOutput) ToBackendTlsPropertiesPtrOutputWithContext(ctx context.Context) BackendTlsPropertiesPtrOutput {
	return o
}

func (o BackendTlsPropertiesPtrOutput) Elem() BackendTlsPropertiesOutput {
	return o.ApplyT(func(v *BackendTlsProperties) BackendTlsProperties {
		if v != nil {
			return *v
		}
		var ret BackendTlsProperties
		return ret
	}).(BackendTlsPropertiesOutput)
}

// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesPtrOutput) ValidateCertificateChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendTlsProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateCertificateChain
	}).(pulumi.BoolPtrOutput)
}

// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesPtrOutput) ValidateCertificateName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendTlsProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateCertificateName
	}).(pulumi.BoolPtrOutput)
}

// Properties controlling TLS Certificate Validation.
type BackendTlsPropertiesResponse struct {
	// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
	ValidateCertificateChain *bool `pulumi:"validateCertificateChain"`
	// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
	ValidateCertificateName *bool `pulumi:"validateCertificateName"`
}

// Defaults sets the appropriate defaults for BackendTlsPropertiesResponse
func (val *BackendTlsPropertiesResponse) Defaults() *BackendTlsPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ValidateCertificateChain == nil {
		validateCertificateChain_ := true
		tmp.ValidateCertificateChain = &validateCertificateChain_
	}
	if tmp.ValidateCertificateName == nil {
		validateCertificateName_ := true
		tmp.ValidateCertificateName = &validateCertificateName_
	}
	return &tmp
}

// Properties controlling TLS Certificate Validation.
type BackendTlsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BackendTlsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendTlsPropertiesResponse)(nil)).Elem()
}

func (o BackendTlsPropertiesResponseOutput) ToBackendTlsPropertiesResponseOutput() BackendTlsPropertiesResponseOutput {
	return o
}

func (o BackendTlsPropertiesResponseOutput) ToBackendTlsPropertiesResponseOutputWithContext(ctx context.Context) BackendTlsPropertiesResponseOutput {
	return o
}

// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesResponseOutput) ValidateCertificateChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendTlsPropertiesResponse) *bool { return v.ValidateCertificateChain }).(pulumi.BoolPtrOutput)
}

// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesResponseOutput) ValidateCertificateName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendTlsPropertiesResponse) *bool { return v.ValidateCertificateName }).(pulumi.BoolPtrOutput)
}

type BackendTlsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendTlsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTlsPropertiesResponse)(nil)).Elem()
}

func (o BackendTlsPropertiesResponsePtrOutput) ToBackendTlsPropertiesResponsePtrOutput() BackendTlsPropertiesResponsePtrOutput {
	return o
}

func (o BackendTlsPropertiesResponsePtrOutput) ToBackendTlsPropertiesResponsePtrOutputWithContext(ctx context.Context) BackendTlsPropertiesResponsePtrOutput {
	return o
}

func (o BackendTlsPropertiesResponsePtrOutput) Elem() BackendTlsPropertiesResponseOutput {
	return o.ApplyT(func(v *BackendTlsPropertiesResponse) BackendTlsPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret BackendTlsPropertiesResponse
		return ret
	}).(BackendTlsPropertiesResponseOutput)
}

// Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesResponsePtrOutput) ValidateCertificateChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendTlsPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateCertificateChain
	}).(pulumi.BoolPtrOutput)
}

// Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
func (o BackendTlsPropertiesResponsePtrOutput) ValidateCertificateName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendTlsPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateCertificateName
	}).(pulumi.BoolPtrOutput)
}

// Group contract Properties.
type GroupContractPropertiesResponse struct {
	// true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
	BuiltIn bool `pulumi:"builtIn"`
	// Group description. Can contain HTML formatting tags.
	Description *string `pulumi:"description"`
	// Group name.
	DisplayName string `pulumi:"displayName"`
	// For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null.
	ExternalId *string `pulumi:"externalId"`
	// Group type.
	Type *string `pulumi:"type"`
}

// Group contract Properties.
type GroupContractPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GroupContractPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupContractPropertiesResponse)(nil)).Elem()
}

func (o GroupContractPropertiesResponseOutput) ToGroupContractPropertiesResponseOutput() GroupContractPropertiesResponseOutput {
	return o
}

func (o GroupContractPropertiesResponseOutput) ToGroupContractPropertiesResponseOutputWithContext(ctx context.Context) GroupContractPropertiesResponseOutput {
	return o
}

// true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
func (o GroupContractPropertiesResponseOutput) BuiltIn() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupContractPropertiesResponse) bool { return v.BuiltIn }).(pulumi.BoolOutput)
}

// Group description. Can contain HTML formatting tags.
func (o GroupContractPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupContractPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Group name.
func (o GroupContractPropertiesResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GroupContractPropertiesResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null.
func (o GroupContractPropertiesResponseOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupContractPropertiesResponse) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// Group type.
func (o GroupContractPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupContractPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GroupContractPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (GroupContractPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupContractPropertiesResponse)(nil)).Elem()
}

func (o GroupContractPropertiesResponseArrayOutput) ToGroupContractPropertiesResponseArrayOutput() GroupContractPropertiesResponseArrayOutput {
	return o
}

func (o GroupContractPropertiesResponseArrayOutput) ToGroupContractPropertiesResponseArrayOutputWithContext(ctx context.Context) GroupContractPropertiesResponseArrayOutput {
	return o
}

func (o GroupContractPropertiesResponseArrayOutput) Index(i pulumi.IntInput) GroupContractPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupContractPropertiesResponse {
		return vs[0].([]GroupContractPropertiesResponse)[vs[1].(int)]
	}).(GroupContractPropertiesResponseOutput)
}

// User identity details.
type UserIdentityContract struct {
	// Identifier value within provider.
	Id *string `pulumi:"id"`
	// Identity provider name.
	Provider *string `pulumi:"provider"`
}

// UserIdentityContractInput is an input type that accepts UserIdentityContractArgs and UserIdentityContractOutput values.
// You can construct a concrete instance of `UserIdentityContractInput` via:
//
//	UserIdentityContractArgs{...}
type UserIdentityContractInput interface {
	pulumi.Input

	ToUserIdentityContractOutput() UserIdentityContractOutput
	ToUserIdentityContractOutputWithContext(context.Context) UserIdentityContractOutput
}

// User identity details.
type UserIdentityContractArgs struct {
	// Identifier value within provider.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Identity provider name.
	Provider pulumi.StringPtrInput `pulumi:"provider"`
}

func (UserIdentityContractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityContract)(nil)).Elem()
}

func (i UserIdentityContractArgs) ToUserIdentityContractOutput() UserIdentityContractOutput {
	return i.ToUserIdentityContractOutputWithContext(context.Background())
}

func (i UserIdentityContractArgs) ToUserIdentityContractOutputWithContext(ctx context.Context) UserIdentityContractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityContractOutput)
}

// UserIdentityContractArrayInput is an input type that accepts UserIdentityContractArray and UserIdentityContractArrayOutput values.
// You can construct a concrete instance of `UserIdentityContractArrayInput` via:
//
//	UserIdentityContractArray{ UserIdentityContractArgs{...} }
type UserIdentityContractArrayInput interface {
	pulumi.Input

	ToUserIdentityContractArrayOutput() UserIdentityContractArrayOutput
	ToUserIdentityContractArrayOutputWithContext(context.Context) UserIdentityContractArrayOutput
}

type UserIdentityContractArray []UserIdentityContractInput

func (UserIdentityContractArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserIdentityContract)(nil)).Elem()
}

func (i UserIdentityContractArray) ToUserIdentityContractArrayOutput() UserIdentityContractArrayOutput {
	return i.ToUserIdentityContractArrayOutputWithContext(context.Background())
}

func (i UserIdentityContractArray) ToUserIdentityContractArrayOutputWithContext(ctx context.Context) UserIdentityContractArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityContractArrayOutput)
}

// User identity details.
type UserIdentityContractOutput struct{ *pulumi.OutputState }

func (UserIdentityContractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityContract)(nil)).Elem()
}

func (o UserIdentityContractOutput) ToUserIdentityContractOutput() UserIdentityContractOutput {
	return o
}

func (o UserIdentityContractOutput) ToUserIdentityContractOutputWithContext(ctx context.Context) UserIdentityContractOutput {
	return o
}

// Identifier value within provider.
func (o UserIdentityContractOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityContract) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Identity provider name.
func (o UserIdentityContractOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityContract) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

type UserIdentityContractArrayOutput struct{ *pulumi.OutputState }

func (UserIdentityContractArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserIdentityContract)(nil)).Elem()
}

func (o UserIdentityContractArrayOutput) ToUserIdentityContractArrayOutput() UserIdentityContractArrayOutput {
	return o
}

func (o UserIdentityContractArrayOutput) ToUserIdentityContractArrayOutputWithContext(ctx context.Context) UserIdentityContractArrayOutput {
	return o
}

func (o UserIdentityContractArrayOutput) Index(i pulumi.IntInput) UserIdentityContractOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserIdentityContract {
		return vs[0].([]UserIdentityContract)[vs[1].(int)]
	}).(UserIdentityContractOutput)
}

// User identity details.
type UserIdentityContractResponse struct {
	// Identifier value within provider.
	Id *string `pulumi:"id"`
	// Identity provider name.
	Provider *string `pulumi:"provider"`
}

// User identity details.
type UserIdentityContractResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityContractResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityContractResponse)(nil)).Elem()
}

func (o UserIdentityContractResponseOutput) ToUserIdentityContractResponseOutput() UserIdentityContractResponseOutput {
	return o
}

func (o UserIdentityContractResponseOutput) ToUserIdentityContractResponseOutputWithContext(ctx context.Context) UserIdentityContractResponseOutput {
	return o
}

// Identifier value within provider.
func (o UserIdentityContractResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityContractResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Identity provider name.
func (o UserIdentityContractResponseOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityContractResponse) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

type UserIdentityContractResponseArrayOutput struct{ *pulumi.OutputState }

func (UserIdentityContractResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserIdentityContractResponse)(nil)).Elem()
}

func (o UserIdentityContractResponseArrayOutput) ToUserIdentityContractResponseArrayOutput() UserIdentityContractResponseArrayOutput {
	return o
}

func (o UserIdentityContractResponseArrayOutput) ToUserIdentityContractResponseArrayOutputWithContext(ctx context.Context) UserIdentityContractResponseArrayOutput {
	return o
}

func (o UserIdentityContractResponseArrayOutput) Index(i pulumi.IntInput) UserIdentityContractResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserIdentityContractResponse {
		return vs[0].([]UserIdentityContractResponse)[vs[1].(int)]
	}).(UserIdentityContractResponseOutput)
}

// Properties of server X509Names.
type X509CertificateName struct {
	// Thumbprint for the Issuer of the Certificate.
	IssuerCertificateThumbprint *string `pulumi:"issuerCertificateThumbprint"`
	// Common Name of the Certificate.
	Name *string `pulumi:"name"`
}

// X509CertificateNameInput is an input type that accepts X509CertificateNameArgs and X509CertificateNameOutput values.
// You can construct a concrete instance of `X509CertificateNameInput` via:
//
//	X509CertificateNameArgs{...}
type X509CertificateNameInput interface {
	pulumi.Input

	ToX509CertificateNameOutput() X509CertificateNameOutput
	ToX509CertificateNameOutputWithContext(context.Context) X509CertificateNameOutput
}

// Properties of server X509Names.
type X509CertificateNameArgs struct {
	// Thumbprint for the Issuer of the Certificate.
	IssuerCertificateThumbprint pulumi.StringPtrInput `pulumi:"issuerCertificateThumbprint"`
	// Common Name of the Certificate.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (X509CertificateNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509CertificateName)(nil)).Elem()
}

func (i X509CertificateNameArgs) ToX509CertificateNameOutput() X509CertificateNameOutput {
	return i.ToX509CertificateNameOutputWithContext(context.Background())
}

func (i X509CertificateNameArgs) ToX509CertificateNameOutputWithContext(ctx context.Context) X509CertificateNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CertificateNameOutput)
}

// X509CertificateNameArrayInput is an input type that accepts X509CertificateNameArray and X509CertificateNameArrayOutput values.
// You can construct a concrete instance of `X509CertificateNameArrayInput` via:
//
//	X509CertificateNameArray{ X509CertificateNameArgs{...} }
type X509CertificateNameArrayInput interface {
	pulumi.Input

	ToX509CertificateNameArrayOutput() X509CertificateNameArrayOutput
	ToX509CertificateNameArrayOutputWithContext(context.Context) X509CertificateNameArrayOutput
}

type X509CertificateNameArray []X509CertificateNameInput

func (X509CertificateNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509CertificateName)(nil)).Elem()
}

func (i X509CertificateNameArray) ToX509CertificateNameArrayOutput() X509CertificateNameArrayOutput {
	return i.ToX509CertificateNameArrayOutputWithContext(context.Background())
}

func (i X509CertificateNameArray) ToX509CertificateNameArrayOutputWithContext(ctx context.Context) X509CertificateNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CertificateNameArrayOutput)
}

// Properties of server X509Names.
type X509CertificateNameOutput struct{ *pulumi.OutputState }

func (X509CertificateNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509CertificateName)(nil)).Elem()
}

func (o X509CertificateNameOutput) ToX509CertificateNameOutput() X509CertificateNameOutput {
	return o
}

func (o X509CertificateNameOutput) ToX509CertificateNameOutputWithContext(ctx context.Context) X509CertificateNameOutput {
	return o
}

// Thumbprint for the Issuer of the Certificate.
func (o X509CertificateNameOutput) IssuerCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X509CertificateName) *string { return v.IssuerCertificateThumbprint }).(pulumi.StringPtrOutput)
}

// Common Name of the Certificate.
func (o X509CertificateNameOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X509CertificateName) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type X509CertificateNameArrayOutput struct{ *pulumi.OutputState }

func (X509CertificateNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509CertificateName)(nil)).Elem()
}

func (o X509CertificateNameArrayOutput) ToX509CertificateNameArrayOutput() X509CertificateNameArrayOutput {
	return o
}

func (o X509CertificateNameArrayOutput) ToX509CertificateNameArrayOutputWithContext(ctx context.Context) X509CertificateNameArrayOutput {
	return o
}

func (o X509CertificateNameArrayOutput) Index(i pulumi.IntInput) X509CertificateNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X509CertificateName {
		return vs[0].([]X509CertificateName)[vs[1].(int)]
	}).(X509CertificateNameOutput)
}

// Properties of server X509Names.
type X509CertificateNameResponse struct {
	// Thumbprint for the Issuer of the Certificate.
	IssuerCertificateThumbprint *string `pulumi:"issuerCertificateThumbprint"`
	// Common Name of the Certificate.
	Name *string `pulumi:"name"`
}

// Properties of server X509Names.
type X509CertificateNameResponseOutput struct{ *pulumi.OutputState }

func (X509CertificateNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509CertificateNameResponse)(nil)).Elem()
}

func (o X509CertificateNameResponseOutput) ToX509CertificateNameResponseOutput() X509CertificateNameResponseOutput {
	return o
}

func (o X509CertificateNameResponseOutput) ToX509CertificateNameResponseOutputWithContext(ctx context.Context) X509CertificateNameResponseOutput {
	return o
}

// Thumbprint for the Issuer of the Certificate.
func (o X509CertificateNameResponseOutput) IssuerCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X509CertificateNameResponse) *string { return v.IssuerCertificateThumbprint }).(pulumi.StringPtrOutput)
}

// Common Name of the Certificate.
func (o X509CertificateNameResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X509CertificateNameResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type X509CertificateNameResponseArrayOutput struct{ *pulumi.OutputState }

func (X509CertificateNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509CertificateNameResponse)(nil)).Elem()
}

func (o X509CertificateNameResponseArrayOutput) ToX509CertificateNameResponseArrayOutput() X509CertificateNameResponseArrayOutput {
	return o
}

func (o X509CertificateNameResponseArrayOutput) ToX509CertificateNameResponseArrayOutputWithContext(ctx context.Context) X509CertificateNameResponseArrayOutput {
	return o
}

func (o X509CertificateNameResponseArrayOutput) Index(i pulumi.IntInput) X509CertificateNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X509CertificateNameResponse {
		return vs[0].([]X509CertificateNameResponse)[vs[1].(int)]
	}).(X509CertificateNameResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BackendAuthorizationHeaderCredentialsOutput{})
	pulumi.RegisterOutputType(BackendAuthorizationHeaderCredentialsPtrOutput{})
	pulumi.RegisterOutputType(BackendAuthorizationHeaderCredentialsResponseOutput{})
	pulumi.RegisterOutputType(BackendAuthorizationHeaderCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendCredentialsContractOutput{})
	pulumi.RegisterOutputType(BackendCredentialsContractPtrOutput{})
	pulumi.RegisterOutputType(BackendCredentialsContractResponseOutput{})
	pulumi.RegisterOutputType(BackendCredentialsContractResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendPropertiesOutput{})
	pulumi.RegisterOutputType(BackendPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BackendPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BackendProxyContractOutput{})
	pulumi.RegisterOutputType(BackendProxyContractPtrOutput{})
	pulumi.RegisterOutputType(BackendProxyContractResponseOutput{})
	pulumi.RegisterOutputType(BackendProxyContractResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendServiceFabricClusterPropertiesOutput{})
	pulumi.RegisterOutputType(BackendServiceFabricClusterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceFabricClusterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BackendServiceFabricClusterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendTlsPropertiesOutput{})
	pulumi.RegisterOutputType(BackendTlsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BackendTlsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BackendTlsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(GroupContractPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GroupContractPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(UserIdentityContractOutput{})
	pulumi.RegisterOutputType(UserIdentityContractArrayOutput{})
	pulumi.RegisterOutputType(UserIdentityContractResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityContractResponseArrayOutput{})
	pulumi.RegisterOutputType(X509CertificateNameOutput{})
	pulumi.RegisterOutputType(X509CertificateNameArrayOutput{})
	pulumi.RegisterOutputType(X509CertificateNameResponseOutput{})
	pulumi.RegisterOutputType(X509CertificateNameResponseArrayOutput{})
}
