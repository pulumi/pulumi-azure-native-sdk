// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Backend communication protocol.
type BackendProtocol string

const (
	// The Backend is a RESTful service.
	BackendProtocolHttp = BackendProtocol("http")
	// The Backend is a SOAP service.
	BackendProtocolSoap = BackendProtocol("soap")
)

// Determines the type of confirmation e-mail that will be sent to the newly created user.
type Confirmation string

const (
	// Send an e-mail to the user confirming they have successfully signed up.
	ConfirmationSignup = Confirmation("signup")
	// Send an e-mail inviting the user to sign-up and complete registration.
	ConfirmationInvite = Confirmation("invite")
)

// Logger type.
type LoggerType string

const (
	// Azure Event Hub as log destination.
	LoggerTypeAzureEventHub = LoggerType("azureEventHub")
	// Azure Application Insights as log destination.
	LoggerTypeApplicationInsights = LoggerType("applicationInsights")
)

// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
type SubscriptionStateEnum string

const (
	SubscriptionStateEnumSuspended = SubscriptionStateEnum("suspended")
	SubscriptionStateEnumActive    = SubscriptionStateEnum("active")
	SubscriptionStateEnumExpired   = SubscriptionStateEnum("expired")
	SubscriptionStateEnumSubmitted = SubscriptionStateEnum("submitted")
	SubscriptionStateEnumRejected  = SubscriptionStateEnum("rejected")
	SubscriptionStateEnumCancelled = SubscriptionStateEnum("cancelled")
)

func (SubscriptionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return pulumi.ToOutput(e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return e.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return SubscriptionStateEnum(e).ToSubscriptionStateEnumOutputWithContext(ctx).ToSubscriptionStateEnumPtrOutputWithContext(ctx)
}

func (e SubscriptionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubscriptionStateEnumOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionStateEnum) *SubscriptionStateEnum {
		return &v
	}).(SubscriptionStateEnumPtrOutput)
}

func (o SubscriptionStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubscriptionStateEnumPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) Elem() SubscriptionStateEnumOutput {
	return o.ApplyT(func(v *SubscriptionStateEnum) SubscriptionStateEnum {
		if v != nil {
			return *v
		}
		var ret SubscriptionStateEnum
		return ret
	}).(SubscriptionStateEnumOutput)
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubscriptionStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubscriptionStateEnumInput is an input type that accepts SubscriptionStateEnumArgs and SubscriptionStateEnumOutput values.
// You can construct a concrete instance of `SubscriptionStateEnumInput` via:
//
//	SubscriptionStateEnumArgs{...}
type SubscriptionStateEnumInput interface {
	pulumi.Input

	ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput
	ToSubscriptionStateEnumOutputWithContext(context.Context) SubscriptionStateEnumOutput
}

var subscriptionStateEnumPtrType = reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()

type SubscriptionStateEnumPtrInput interface {
	pulumi.Input

	ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput
	ToSubscriptionStateEnumPtrOutputWithContext(context.Context) SubscriptionStateEnumPtrOutput
}

type subscriptionStateEnumPtr string

func SubscriptionStateEnumPtr(v string) SubscriptionStateEnumPtrInput {
	return (*subscriptionStateEnumPtr)(&v)
}

func (*subscriptionStateEnumPtr) ElementType() reflect.Type {
	return subscriptionStateEnumPtrType
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutput(in).(SubscriptionStateEnumPtrOutput)
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubscriptionStateEnumPtrOutput)
}

// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
type UserStateEnum string

const (
	// User state is active.
	UserStateEnumActive = UserStateEnum("active")
	// User is blocked. Blocked users cannot authenticate at developer portal or call API.
	UserStateEnumBlocked = UserStateEnum("blocked")
	// User account is pending. Requires identity confirmation before it can be made active.
	UserStateEnumPending = UserStateEnum("pending")
	// User account is closed. All identities and related entities are removed.
	UserStateEnumDeleted = UserStateEnum("deleted")
)

func init() {
	pulumi.RegisterOutputType(SubscriptionStateEnumOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumPtrOutput{})
}
