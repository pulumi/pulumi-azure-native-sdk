// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Backend communication protocol.
type BackendProtocol string

const (
	// The Backend is a RESTful service.
	BackendProtocolHttp = BackendProtocol("http")
	// The Backend is a SOAP service.
	BackendProtocolSoap = BackendProtocol("soap")
)

func (BackendProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendProtocol)(nil)).Elem()
}

func (e BackendProtocol) ToBackendProtocolOutput() BackendProtocolOutput {
	return pulumi.ToOutput(e).(BackendProtocolOutput)
}

func (e BackendProtocol) ToBackendProtocolOutputWithContext(ctx context.Context) BackendProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BackendProtocolOutput)
}

func (e BackendProtocol) ToBackendProtocolPtrOutput() BackendProtocolPtrOutput {
	return e.ToBackendProtocolPtrOutputWithContext(context.Background())
}

func (e BackendProtocol) ToBackendProtocolPtrOutputWithContext(ctx context.Context) BackendProtocolPtrOutput {
	return BackendProtocol(e).ToBackendProtocolOutputWithContext(ctx).ToBackendProtocolPtrOutputWithContext(ctx)
}

func (e BackendProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BackendProtocolOutput struct{ *pulumi.OutputState }

func (BackendProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendProtocol)(nil)).Elem()
}

func (o BackendProtocolOutput) ToBackendProtocolOutput() BackendProtocolOutput {
	return o
}

func (o BackendProtocolOutput) ToBackendProtocolOutputWithContext(ctx context.Context) BackendProtocolOutput {
	return o
}

func (o BackendProtocolOutput) ToBackendProtocolPtrOutput() BackendProtocolPtrOutput {
	return o.ToBackendProtocolPtrOutputWithContext(context.Background())
}

func (o BackendProtocolOutput) ToBackendProtocolPtrOutputWithContext(ctx context.Context) BackendProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendProtocol) *BackendProtocol {
		return &v
	}).(BackendProtocolPtrOutput)
}

func (o BackendProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BackendProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackendProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BackendProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackendProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackendProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BackendProtocolPtrOutput struct{ *pulumi.OutputState }

func (BackendProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendProtocol)(nil)).Elem()
}

func (o BackendProtocolPtrOutput) ToBackendProtocolPtrOutput() BackendProtocolPtrOutput {
	return o
}

func (o BackendProtocolPtrOutput) ToBackendProtocolPtrOutputWithContext(ctx context.Context) BackendProtocolPtrOutput {
	return o
}

func (o BackendProtocolPtrOutput) Elem() BackendProtocolOutput {
	return o.ApplyT(func(v *BackendProtocol) BackendProtocol {
		if v != nil {
			return *v
		}
		var ret BackendProtocol
		return ret
	}).(BackendProtocolOutput)
}

func (o BackendProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackendProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BackendProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BackendProtocolInput is an input type that accepts values of the BackendProtocol enum
// A concrete instance of `BackendProtocolInput` can be one of the following:
//
//	BackendProtocolHttp
//	BackendProtocolSoap
type BackendProtocolInput interface {
	pulumi.Input

	ToBackendProtocolOutput() BackendProtocolOutput
	ToBackendProtocolOutputWithContext(context.Context) BackendProtocolOutput
}

var backendProtocolPtrType = reflect.TypeOf((**BackendProtocol)(nil)).Elem()

type BackendProtocolPtrInput interface {
	pulumi.Input

	ToBackendProtocolPtrOutput() BackendProtocolPtrOutput
	ToBackendProtocolPtrOutputWithContext(context.Context) BackendProtocolPtrOutput
}

type backendProtocolPtr string

func BackendProtocolPtr(v string) BackendProtocolPtrInput {
	return (*backendProtocolPtr)(&v)
}

func (*backendProtocolPtr) ElementType() reflect.Type {
	return backendProtocolPtrType
}

func (in *backendProtocolPtr) ToBackendProtocolPtrOutput() BackendProtocolPtrOutput {
	return pulumi.ToOutput(in).(BackendProtocolPtrOutput)
}

func (in *backendProtocolPtr) ToBackendProtocolPtrOutputWithContext(ctx context.Context) BackendProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BackendProtocolPtrOutput)
}

func (in *backendProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*BackendProtocol] {
	return pulumix.Output[*BackendProtocol]{
		OutputState: in.ToBackendProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// Determines the type of confirmation e-mail that will be sent to the newly created user.
type Confirmation string

const (
	// Send an e-mail to the user confirming they have successfully signed up.
	ConfirmationSignup = Confirmation("signup")
	// Send an e-mail inviting the user to sign-up and complete registration.
	ConfirmationInvite = Confirmation("invite")
)

func (Confirmation) ElementType() reflect.Type {
	return reflect.TypeOf((*Confirmation)(nil)).Elem()
}

func (e Confirmation) ToConfirmationOutput() ConfirmationOutput {
	return pulumi.ToOutput(e).(ConfirmationOutput)
}

func (e Confirmation) ToConfirmationOutputWithContext(ctx context.Context) ConfirmationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConfirmationOutput)
}

func (e Confirmation) ToConfirmationPtrOutput() ConfirmationPtrOutput {
	return e.ToConfirmationPtrOutputWithContext(context.Background())
}

func (e Confirmation) ToConfirmationPtrOutputWithContext(ctx context.Context) ConfirmationPtrOutput {
	return Confirmation(e).ToConfirmationOutputWithContext(ctx).ToConfirmationPtrOutputWithContext(ctx)
}

func (e Confirmation) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Confirmation) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Confirmation) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Confirmation) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConfirmationOutput struct{ *pulumi.OutputState }

func (ConfirmationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Confirmation)(nil)).Elem()
}

func (o ConfirmationOutput) ToConfirmationOutput() ConfirmationOutput {
	return o
}

func (o ConfirmationOutput) ToConfirmationOutputWithContext(ctx context.Context) ConfirmationOutput {
	return o
}

func (o ConfirmationOutput) ToConfirmationPtrOutput() ConfirmationPtrOutput {
	return o.ToConfirmationPtrOutputWithContext(context.Background())
}

func (o ConfirmationOutput) ToConfirmationPtrOutputWithContext(ctx context.Context) ConfirmationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Confirmation) *Confirmation {
		return &v
	}).(ConfirmationPtrOutput)
}

func (o ConfirmationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConfirmationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Confirmation) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConfirmationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConfirmationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Confirmation) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConfirmationPtrOutput struct{ *pulumi.OutputState }

func (ConfirmationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Confirmation)(nil)).Elem()
}

func (o ConfirmationPtrOutput) ToConfirmationPtrOutput() ConfirmationPtrOutput {
	return o
}

func (o ConfirmationPtrOutput) ToConfirmationPtrOutputWithContext(ctx context.Context) ConfirmationPtrOutput {
	return o
}

func (o ConfirmationPtrOutput) Elem() ConfirmationOutput {
	return o.ApplyT(func(v *Confirmation) Confirmation {
		if v != nil {
			return *v
		}
		var ret Confirmation
		return ret
	}).(ConfirmationOutput)
}

func (o ConfirmationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConfirmationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Confirmation) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConfirmationInput is an input type that accepts values of the Confirmation enum
// A concrete instance of `ConfirmationInput` can be one of the following:
//
//	ConfirmationSignup
//	ConfirmationInvite
type ConfirmationInput interface {
	pulumi.Input

	ToConfirmationOutput() ConfirmationOutput
	ToConfirmationOutputWithContext(context.Context) ConfirmationOutput
}

var confirmationPtrType = reflect.TypeOf((**Confirmation)(nil)).Elem()

type ConfirmationPtrInput interface {
	pulumi.Input

	ToConfirmationPtrOutput() ConfirmationPtrOutput
	ToConfirmationPtrOutputWithContext(context.Context) ConfirmationPtrOutput
}

type confirmationPtr string

func ConfirmationPtr(v string) ConfirmationPtrInput {
	return (*confirmationPtr)(&v)
}

func (*confirmationPtr) ElementType() reflect.Type {
	return confirmationPtrType
}

func (in *confirmationPtr) ToConfirmationPtrOutput() ConfirmationPtrOutput {
	return pulumi.ToOutput(in).(ConfirmationPtrOutput)
}

func (in *confirmationPtr) ToConfirmationPtrOutputWithContext(ctx context.Context) ConfirmationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConfirmationPtrOutput)
}

func (in *confirmationPtr) ToOutput(ctx context.Context) pulumix.Output[*Confirmation] {
	return pulumix.Output[*Confirmation]{
		OutputState: in.ToConfirmationPtrOutputWithContext(ctx).OutputState,
	}
}

// Logger type.
type LoggerType string

const (
	// Azure Event Hub as log destination.
	LoggerTypeAzureEventHub = LoggerType("azureEventHub")
	// Azure Application Insights as log destination.
	LoggerTypeApplicationInsights = LoggerType("applicationInsights")
)

func (LoggerType) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggerType)(nil)).Elem()
}

func (e LoggerType) ToLoggerTypeOutput() LoggerTypeOutput {
	return pulumi.ToOutput(e).(LoggerTypeOutput)
}

func (e LoggerType) ToLoggerTypeOutputWithContext(ctx context.Context) LoggerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LoggerTypeOutput)
}

func (e LoggerType) ToLoggerTypePtrOutput() LoggerTypePtrOutput {
	return e.ToLoggerTypePtrOutputWithContext(context.Background())
}

func (e LoggerType) ToLoggerTypePtrOutputWithContext(ctx context.Context) LoggerTypePtrOutput {
	return LoggerType(e).ToLoggerTypeOutputWithContext(ctx).ToLoggerTypePtrOutputWithContext(ctx)
}

func (e LoggerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoggerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoggerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LoggerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LoggerTypeOutput struct{ *pulumi.OutputState }

func (LoggerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggerType)(nil)).Elem()
}

func (o LoggerTypeOutput) ToLoggerTypeOutput() LoggerTypeOutput {
	return o
}

func (o LoggerTypeOutput) ToLoggerTypeOutputWithContext(ctx context.Context) LoggerTypeOutput {
	return o
}

func (o LoggerTypeOutput) ToLoggerTypePtrOutput() LoggerTypePtrOutput {
	return o.ToLoggerTypePtrOutputWithContext(context.Background())
}

func (o LoggerTypeOutput) ToLoggerTypePtrOutputWithContext(ctx context.Context) LoggerTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggerType) *LoggerType {
		return &v
	}).(LoggerTypePtrOutput)
}

func (o LoggerTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LoggerTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoggerType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LoggerTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggerTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoggerType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LoggerTypePtrOutput struct{ *pulumi.OutputState }

func (LoggerTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggerType)(nil)).Elem()
}

func (o LoggerTypePtrOutput) ToLoggerTypePtrOutput() LoggerTypePtrOutput {
	return o
}

func (o LoggerTypePtrOutput) ToLoggerTypePtrOutputWithContext(ctx context.Context) LoggerTypePtrOutput {
	return o
}

func (o LoggerTypePtrOutput) Elem() LoggerTypeOutput {
	return o.ApplyT(func(v *LoggerType) LoggerType {
		if v != nil {
			return *v
		}
		var ret LoggerType
		return ret
	}).(LoggerTypeOutput)
}

func (o LoggerTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggerTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LoggerType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LoggerTypeInput is an input type that accepts values of the LoggerType enum
// A concrete instance of `LoggerTypeInput` can be one of the following:
//
//	LoggerTypeAzureEventHub
//	LoggerTypeApplicationInsights
type LoggerTypeInput interface {
	pulumi.Input

	ToLoggerTypeOutput() LoggerTypeOutput
	ToLoggerTypeOutputWithContext(context.Context) LoggerTypeOutput
}

var loggerTypePtrType = reflect.TypeOf((**LoggerType)(nil)).Elem()

type LoggerTypePtrInput interface {
	pulumi.Input

	ToLoggerTypePtrOutput() LoggerTypePtrOutput
	ToLoggerTypePtrOutputWithContext(context.Context) LoggerTypePtrOutput
}

type loggerTypePtr string

func LoggerTypePtr(v string) LoggerTypePtrInput {
	return (*loggerTypePtr)(&v)
}

func (*loggerTypePtr) ElementType() reflect.Type {
	return loggerTypePtrType
}

func (in *loggerTypePtr) ToLoggerTypePtrOutput() LoggerTypePtrOutput {
	return pulumi.ToOutput(in).(LoggerTypePtrOutput)
}

func (in *loggerTypePtr) ToLoggerTypePtrOutputWithContext(ctx context.Context) LoggerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LoggerTypePtrOutput)
}

func (in *loggerTypePtr) ToOutput(ctx context.Context) pulumix.Output[*LoggerType] {
	return pulumix.Output[*LoggerType]{
		OutputState: in.ToLoggerTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
type SubscriptionStateEnum string

const (
	SubscriptionStateEnumSuspended = SubscriptionStateEnum("suspended")
	SubscriptionStateEnumActive    = SubscriptionStateEnum("active")
	SubscriptionStateEnumExpired   = SubscriptionStateEnum("expired")
	SubscriptionStateEnumSubmitted = SubscriptionStateEnum("submitted")
	SubscriptionStateEnumRejected  = SubscriptionStateEnum("rejected")
	SubscriptionStateEnumCancelled = SubscriptionStateEnum("cancelled")
)

func (SubscriptionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return pulumi.ToOutput(e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return e.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return SubscriptionStateEnum(e).ToSubscriptionStateEnumOutputWithContext(ctx).ToSubscriptionStateEnumPtrOutputWithContext(ctx)
}

func (e SubscriptionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubscriptionStateEnumOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionStateEnum) *SubscriptionStateEnum {
		return &v
	}).(SubscriptionStateEnumPtrOutput)
}

func (o SubscriptionStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubscriptionStateEnumPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) Elem() SubscriptionStateEnumOutput {
	return o.ApplyT(func(v *SubscriptionStateEnum) SubscriptionStateEnum {
		if v != nil {
			return *v
		}
		var ret SubscriptionStateEnum
		return ret
	}).(SubscriptionStateEnumOutput)
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubscriptionStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubscriptionStateEnumInput is an input type that accepts values of the SubscriptionStateEnum enum
// A concrete instance of `SubscriptionStateEnumInput` can be one of the following:
//
//	SubscriptionStateEnumSuspended
//	SubscriptionStateEnumActive
//	SubscriptionStateEnumExpired
//	SubscriptionStateEnumSubmitted
//	SubscriptionStateEnumRejected
//	SubscriptionStateEnumCancelled
type SubscriptionStateEnumInput interface {
	pulumi.Input

	ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput
	ToSubscriptionStateEnumOutputWithContext(context.Context) SubscriptionStateEnumOutput
}

var subscriptionStateEnumPtrType = reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()

type SubscriptionStateEnumPtrInput interface {
	pulumi.Input

	ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput
	ToSubscriptionStateEnumPtrOutputWithContext(context.Context) SubscriptionStateEnumPtrOutput
}

type subscriptionStateEnumPtr string

func SubscriptionStateEnumPtr(v string) SubscriptionStateEnumPtrInput {
	return (*subscriptionStateEnumPtr)(&v)
}

func (*subscriptionStateEnumPtr) ElementType() reflect.Type {
	return subscriptionStateEnumPtrType
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutput(in).(SubscriptionStateEnumPtrOutput)
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubscriptionStateEnumPtrOutput)
}

func (in *subscriptionStateEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionStateEnum] {
	return pulumix.Output[*SubscriptionStateEnum]{
		OutputState: in.ToSubscriptionStateEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
type UserStateEnum string

const (
	// User state is active.
	UserStateEnumActive = UserStateEnum("active")
	// User is blocked. Blocked users cannot authenticate at developer portal or call API.
	UserStateEnumBlocked = UserStateEnum("blocked")
	// User account is pending. Requires identity confirmation before it can be made active.
	UserStateEnumPending = UserStateEnum("pending")
	// User account is closed. All identities and related entities are removed.
	UserStateEnumDeleted = UserStateEnum("deleted")
)

func (UserStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*UserStateEnum)(nil)).Elem()
}

func (e UserStateEnum) ToUserStateEnumOutput() UserStateEnumOutput {
	return pulumi.ToOutput(e).(UserStateEnumOutput)
}

func (e UserStateEnum) ToUserStateEnumOutputWithContext(ctx context.Context) UserStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UserStateEnumOutput)
}

func (e UserStateEnum) ToUserStateEnumPtrOutput() UserStateEnumPtrOutput {
	return e.ToUserStateEnumPtrOutputWithContext(context.Background())
}

func (e UserStateEnum) ToUserStateEnumPtrOutputWithContext(ctx context.Context) UserStateEnumPtrOutput {
	return UserStateEnum(e).ToUserStateEnumOutputWithContext(ctx).ToUserStateEnumPtrOutputWithContext(ctx)
}

func (e UserStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UserStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UserStateEnumOutput struct{ *pulumi.OutputState }

func (UserStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserStateEnum)(nil)).Elem()
}

func (o UserStateEnumOutput) ToUserStateEnumOutput() UserStateEnumOutput {
	return o
}

func (o UserStateEnumOutput) ToUserStateEnumOutputWithContext(ctx context.Context) UserStateEnumOutput {
	return o
}

func (o UserStateEnumOutput) ToUserStateEnumPtrOutput() UserStateEnumPtrOutput {
	return o.ToUserStateEnumPtrOutputWithContext(context.Background())
}

func (o UserStateEnumOutput) ToUserStateEnumPtrOutputWithContext(ctx context.Context) UserStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserStateEnum) *UserStateEnum {
		return &v
	}).(UserStateEnumPtrOutput)
}

func (o UserStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UserStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UserStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UserStateEnumPtrOutput struct{ *pulumi.OutputState }

func (UserStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserStateEnum)(nil)).Elem()
}

func (o UserStateEnumPtrOutput) ToUserStateEnumPtrOutput() UserStateEnumPtrOutput {
	return o
}

func (o UserStateEnumPtrOutput) ToUserStateEnumPtrOutputWithContext(ctx context.Context) UserStateEnumPtrOutput {
	return o
}

func (o UserStateEnumPtrOutput) Elem() UserStateEnumOutput {
	return o.ApplyT(func(v *UserStateEnum) UserStateEnum {
		if v != nil {
			return *v
		}
		var ret UserStateEnum
		return ret
	}).(UserStateEnumOutput)
}

func (o UserStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UserStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UserStateEnumInput is an input type that accepts values of the UserStateEnum enum
// A concrete instance of `UserStateEnumInput` can be one of the following:
//
//	UserStateEnumActive
//	UserStateEnumBlocked
//	UserStateEnumPending
//	UserStateEnumDeleted
type UserStateEnumInput interface {
	pulumi.Input

	ToUserStateEnumOutput() UserStateEnumOutput
	ToUserStateEnumOutputWithContext(context.Context) UserStateEnumOutput
}

var userStateEnumPtrType = reflect.TypeOf((**UserStateEnum)(nil)).Elem()

type UserStateEnumPtrInput interface {
	pulumi.Input

	ToUserStateEnumPtrOutput() UserStateEnumPtrOutput
	ToUserStateEnumPtrOutputWithContext(context.Context) UserStateEnumPtrOutput
}

type userStateEnumPtr string

func UserStateEnumPtr(v string) UserStateEnumPtrInput {
	return (*userStateEnumPtr)(&v)
}

func (*userStateEnumPtr) ElementType() reflect.Type {
	return userStateEnumPtrType
}

func (in *userStateEnumPtr) ToUserStateEnumPtrOutput() UserStateEnumPtrOutput {
	return pulumi.ToOutput(in).(UserStateEnumPtrOutput)
}

func (in *userStateEnumPtr) ToUserStateEnumPtrOutputWithContext(ctx context.Context) UserStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UserStateEnumPtrOutput)
}

func (in *userStateEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*UserStateEnum] {
	return pulumix.Output[*UserStateEnum]{
		OutputState: in.ToUserStateEnumPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(BackendProtocolOutput{})
	pulumi.RegisterOutputType(BackendProtocolPtrOutput{})
	pulumi.RegisterOutputType(ConfirmationOutput{})
	pulumi.RegisterOutputType(ConfirmationPtrOutput{})
	pulumi.RegisterOutputType(LoggerTypeOutput{})
	pulumi.RegisterOutputType(LoggerTypePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumPtrOutput{})
	pulumi.RegisterOutputType(UserStateEnumOutput{})
	pulumi.RegisterOutputType(UserStateEnumPtrOutput{})
}
