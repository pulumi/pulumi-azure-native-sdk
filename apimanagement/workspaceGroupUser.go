// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// User details.
// Azure REST API version: 2022-09-01-preview.
//
// Other available API versions: 2023-03-01-preview.
type WorkspaceGroupUser struct {
	pulumi.CustomResourceState

	// Email address.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// First name.
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// Collection of groups user is part of.
	Groups GroupContractPropertiesResponseArrayOutput `pulumi:"groups"`
	// Collection of user identities.
	Identities UserIdentityContractResponseArrayOutput `pulumi:"identities"`
	// Last name.
	LastName pulumi.StringPtrOutput `pulumi:"lastName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional note about a user set by the administrator.
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	RegistrationDate pulumi.StringPtrOutput `pulumi:"registrationDate"`
	// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkspaceGroupUser registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceGroupUser(ctx *pulumi.Context,
	name string, args *WorkspaceGroupUserArgs, opts ...pulumi.ResourceOption) (*WorkspaceGroupUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement/v20220901preview:WorkspaceGroupUser"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230301preview:WorkspaceGroupUser"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WorkspaceGroupUser
	err := ctx.RegisterResource("azure-native:apimanagement:WorkspaceGroupUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceGroupUser gets an existing WorkspaceGroupUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceGroupUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceGroupUserState, opts ...pulumi.ResourceOption) (*WorkspaceGroupUser, error) {
	var resource WorkspaceGroupUser
	err := ctx.ReadResource("azure-native:apimanagement:WorkspaceGroupUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceGroupUser resources.
type workspaceGroupUserState struct {
}

type WorkspaceGroupUserState struct {
}

func (WorkspaceGroupUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceGroupUserState)(nil)).Elem()
}

type workspaceGroupUserArgs struct {
	// Group identifier. Must be unique in the current API Management service instance.
	GroupId string `pulumi:"groupId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// User identifier. Must be unique in the current API Management service instance.
	UserId *string `pulumi:"userId"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceGroupUser resource.
type WorkspaceGroupUserArgs struct {
	// Group identifier. Must be unique in the current API Management service instance.
	GroupId pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// User identifier. Must be unique in the current API Management service instance.
	UserId pulumi.StringPtrInput
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceGroupUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceGroupUserArgs)(nil)).Elem()
}

type WorkspaceGroupUserInput interface {
	pulumi.Input

	ToWorkspaceGroupUserOutput() WorkspaceGroupUserOutput
	ToWorkspaceGroupUserOutputWithContext(ctx context.Context) WorkspaceGroupUserOutput
}

func (*WorkspaceGroupUser) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceGroupUser)(nil)).Elem()
}

func (i *WorkspaceGroupUser) ToWorkspaceGroupUserOutput() WorkspaceGroupUserOutput {
	return i.ToWorkspaceGroupUserOutputWithContext(context.Background())
}

func (i *WorkspaceGroupUser) ToWorkspaceGroupUserOutputWithContext(ctx context.Context) WorkspaceGroupUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceGroupUserOutput)
}

func (i *WorkspaceGroupUser) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceGroupUser] {
	return pulumix.Output[*WorkspaceGroupUser]{
		OutputState: i.ToWorkspaceGroupUserOutputWithContext(ctx).OutputState,
	}
}

type WorkspaceGroupUserOutput struct{ *pulumi.OutputState }

func (WorkspaceGroupUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceGroupUser)(nil)).Elem()
}

func (o WorkspaceGroupUserOutput) ToWorkspaceGroupUserOutput() WorkspaceGroupUserOutput {
	return o
}

func (o WorkspaceGroupUserOutput) ToWorkspaceGroupUserOutputWithContext(ctx context.Context) WorkspaceGroupUserOutput {
	return o
}

func (o WorkspaceGroupUserOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceGroupUser] {
	return pulumix.Output[*WorkspaceGroupUser]{
		OutputState: o.OutputState,
	}
}

// Email address.
func (o WorkspaceGroupUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// First name.
func (o WorkspaceGroupUserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Collection of groups user is part of.
func (o WorkspaceGroupUserOutput) Groups() GroupContractPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) GroupContractPropertiesResponseArrayOutput { return v.Groups }).(GroupContractPropertiesResponseArrayOutput)
}

// Collection of user identities.
func (o WorkspaceGroupUserOutput) Identities() UserIdentityContractResponseArrayOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) UserIdentityContractResponseArrayOutput { return v.Identities }).(UserIdentityContractResponseArrayOutput)
}

// Last name.
func (o WorkspaceGroupUserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o WorkspaceGroupUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional note about a user set by the administrator.
func (o WorkspaceGroupUserOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o WorkspaceGroupUserOutput) RegistrationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringPtrOutput { return v.RegistrationDate }).(pulumi.StringPtrOutput)
}

// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
func (o WorkspaceGroupUserOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceGroupUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceGroupUser) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceGroupUserOutput{})
}
