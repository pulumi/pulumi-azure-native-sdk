// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Certificate details.
type WorkspaceCertificate struct {
	pulumi.CustomResourceState

	// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// KeyVault location details of the certificate.
	KeyVault KeyVaultContractPropertiesResponsePtrOutput `pulumi:"keyVault"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Subject attribute of the certificate.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// Thumbprint of the certificate.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkspaceCertificate registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceCertificate(ctx *pulumi.Context,
	name string, args *WorkspaceCertificateArgs, opts ...pulumi.ResourceOption) (*WorkspaceCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement/v20240501:WorkspaceCertificate"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20240601preview:WorkspaceCertificate"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement:WorkspaceCertificate"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WorkspaceCertificate
	err := ctx.RegisterResource("azure-native:apimanagement/v20230901preview:WorkspaceCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceCertificate gets an existing WorkspaceCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceCertificateState, opts ...pulumi.ResourceOption) (*WorkspaceCertificate, error) {
	var resource WorkspaceCertificate
	err := ctx.ReadResource("azure-native:apimanagement/v20230901preview:WorkspaceCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceCertificate resources.
type workspaceCertificateState struct {
}

type WorkspaceCertificateState struct {
}

func (WorkspaceCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceCertificateState)(nil)).Elem()
}

type workspaceCertificateArgs struct {
	// Identifier of the certificate entity. Must be unique in the current API Management service instance.
	CertificateId *string `pulumi:"certificateId"`
	// Base 64 encoded certificate using the application/x-pkcs12 representation.
	Data *string `pulumi:"data"`
	// KeyVault location details of the certificate.
	KeyVault *KeyVaultContractCreateProperties `pulumi:"keyVault"`
	// Password for the Certificate
	Password *string `pulumi:"password"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceCertificate resource.
type WorkspaceCertificateArgs struct {
	// Identifier of the certificate entity. Must be unique in the current API Management service instance.
	CertificateId pulumi.StringPtrInput
	// Base 64 encoded certificate using the application/x-pkcs12 representation.
	Data pulumi.StringPtrInput
	// KeyVault location details of the certificate.
	KeyVault KeyVaultContractCreatePropertiesPtrInput
	// Password for the Certificate
	Password pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceCertificateArgs)(nil)).Elem()
}

type WorkspaceCertificateInput interface {
	pulumi.Input

	ToWorkspaceCertificateOutput() WorkspaceCertificateOutput
	ToWorkspaceCertificateOutputWithContext(ctx context.Context) WorkspaceCertificateOutput
}

func (*WorkspaceCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceCertificate)(nil)).Elem()
}

func (i *WorkspaceCertificate) ToWorkspaceCertificateOutput() WorkspaceCertificateOutput {
	return i.ToWorkspaceCertificateOutputWithContext(context.Background())
}

func (i *WorkspaceCertificate) ToWorkspaceCertificateOutputWithContext(ctx context.Context) WorkspaceCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceCertificateOutput)
}

type WorkspaceCertificateOutput struct{ *pulumi.OutputState }

func (WorkspaceCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceCertificate)(nil)).Elem()
}

func (o WorkspaceCertificateOutput) ToWorkspaceCertificateOutput() WorkspaceCertificateOutput {
	return o
}

func (o WorkspaceCertificateOutput) ToWorkspaceCertificateOutputWithContext(ctx context.Context) WorkspaceCertificateOutput {
	return o
}

// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o WorkspaceCertificateOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCertificate) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// KeyVault location details of the certificate.
func (o WorkspaceCertificateOutput) KeyVault() KeyVaultContractPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *WorkspaceCertificate) KeyVaultContractPropertiesResponsePtrOutput { return v.KeyVault }).(KeyVaultContractPropertiesResponsePtrOutput)
}

// The name of the resource
func (o WorkspaceCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Subject attribute of the certificate.
func (o WorkspaceCertificateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCertificate) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// Thumbprint of the certificate.
func (o WorkspaceCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCertificate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceCertificateOutput{})
}
