// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Logger details.
type WorkspaceLogger struct {
	pulumi.CustomResourceState

	// The name and SendRule connection string of the event hub for azureEventHub logger.
	// Instrumentation key for applicationInsights logger.
	Credentials pulumi.StringMapOutput `pulumi:"credentials"`
	// Logger description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether records are buffered in the logger before publishing. Default is assumed to be true.
	IsBuffered pulumi.BoolPtrOutput `pulumi:"isBuffered"`
	// Logger type.
	LoggerType pulumi.StringOutput `pulumi:"loggerType"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
	ResourceId pulumi.StringPtrOutput `pulumi:"resourceId"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkspaceLogger registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceLogger(ctx *pulumi.Context,
	name string, args *WorkspaceLoggerArgs, opts ...pulumi.ResourceOption) (*WorkspaceLogger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoggerType == nil {
		return nil, errors.New("invalid value for required argument 'LoggerType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement/v20240501:WorkspaceLogger"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20240601preview:WorkspaceLogger"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement:WorkspaceLogger"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WorkspaceLogger
	err := ctx.RegisterResource("azure-native:apimanagement/v20230901preview:WorkspaceLogger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceLogger gets an existing WorkspaceLogger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceLoggerState, opts ...pulumi.ResourceOption) (*WorkspaceLogger, error) {
	var resource WorkspaceLogger
	err := ctx.ReadResource("azure-native:apimanagement/v20230901preview:WorkspaceLogger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceLogger resources.
type workspaceLoggerState struct {
}

type WorkspaceLoggerState struct {
}

func (WorkspaceLoggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceLoggerState)(nil)).Elem()
}

type workspaceLoggerArgs struct {
	// The name and SendRule connection string of the event hub for azureEventHub logger.
	// Instrumentation key for applicationInsights logger.
	Credentials map[string]string `pulumi:"credentials"`
	// Logger description.
	Description *string `pulumi:"description"`
	// Whether records are buffered in the logger before publishing. Default is assumed to be true.
	IsBuffered *bool `pulumi:"isBuffered"`
	// Logger identifier. Must be unique in the API Management service instance.
	LoggerId *string `pulumi:"loggerId"`
	// Logger type.
	LoggerType string `pulumi:"loggerType"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
	ResourceId *string `pulumi:"resourceId"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceLogger resource.
type WorkspaceLoggerArgs struct {
	// The name and SendRule connection string of the event hub for azureEventHub logger.
	// Instrumentation key for applicationInsights logger.
	Credentials pulumi.StringMapInput
	// Logger description.
	Description pulumi.StringPtrInput
	// Whether records are buffered in the logger before publishing. Default is assumed to be true.
	IsBuffered pulumi.BoolPtrInput
	// Logger identifier. Must be unique in the API Management service instance.
	LoggerId pulumi.StringPtrInput
	// Logger type.
	LoggerType pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
	ResourceId pulumi.StringPtrInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceLoggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceLoggerArgs)(nil)).Elem()
}

type WorkspaceLoggerInput interface {
	pulumi.Input

	ToWorkspaceLoggerOutput() WorkspaceLoggerOutput
	ToWorkspaceLoggerOutputWithContext(ctx context.Context) WorkspaceLoggerOutput
}

func (*WorkspaceLogger) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceLogger)(nil)).Elem()
}

func (i *WorkspaceLogger) ToWorkspaceLoggerOutput() WorkspaceLoggerOutput {
	return i.ToWorkspaceLoggerOutputWithContext(context.Background())
}

func (i *WorkspaceLogger) ToWorkspaceLoggerOutputWithContext(ctx context.Context) WorkspaceLoggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceLoggerOutput)
}

type WorkspaceLoggerOutput struct{ *pulumi.OutputState }

func (WorkspaceLoggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceLogger)(nil)).Elem()
}

func (o WorkspaceLoggerOutput) ToWorkspaceLoggerOutput() WorkspaceLoggerOutput {
	return o
}

func (o WorkspaceLoggerOutput) ToWorkspaceLoggerOutputWithContext(ctx context.Context) WorkspaceLoggerOutput {
	return o
}

// The name and SendRule connection string of the event hub for azureEventHub logger.
// Instrumentation key for applicationInsights logger.
func (o WorkspaceLoggerOutput) Credentials() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkspaceLogger) pulumi.StringMapOutput { return v.Credentials }).(pulumi.StringMapOutput)
}

// Logger description.
func (o WorkspaceLoggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceLogger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether records are buffered in the logger before publishing. Default is assumed to be true.
func (o WorkspaceLoggerOutput) IsBuffered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceLogger) pulumi.BoolPtrOutput { return v.IsBuffered }).(pulumi.BoolPtrOutput)
}

// Logger type.
func (o WorkspaceLoggerOutput) LoggerType() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceLogger) pulumi.StringOutput { return v.LoggerType }).(pulumi.StringOutput)
}

// The name of the resource
func (o WorkspaceLoggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceLogger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
func (o WorkspaceLoggerOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceLogger) pulumi.StringPtrOutput { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceLoggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceLogger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceLoggerOutput{})
}
