// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy restriction contract details.
// Azure REST API version: 2023-05-01-preview.
type PolicyRestriction struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Indicates if base policy should be enforced for the policy document.
	RequireBase pulumi.StringPtrOutput `pulumi:"requireBase"`
	// Path to the policy document.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPolicyRestriction registers a new resource with the given unique name, arguments, and options.
func NewPolicyRestriction(ctx *pulumi.Context,
	name string, args *PolicyRestrictionArgs, opts ...pulumi.ResourceOption) (*PolicyRestriction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.RequireBase == nil {
		args.RequireBase = pulumi.StringPtr("false")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement/v20230501preview:PolicyRestriction"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PolicyRestriction
	err := ctx.RegisterResource("azure-native:apimanagement:PolicyRestriction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyRestriction gets an existing PolicyRestriction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyRestriction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyRestrictionState, opts ...pulumi.ResourceOption) (*PolicyRestriction, error) {
	var resource PolicyRestriction
	err := ctx.ReadResource("azure-native:apimanagement:PolicyRestriction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyRestriction resources.
type policyRestrictionState struct {
}

type PolicyRestrictionState struct {
}

func (PolicyRestrictionState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyRestrictionState)(nil)).Elem()
}

type policyRestrictionArgs struct {
	// Policy restrictions after an entity level
	PolicyRestrictionId *string `pulumi:"policyRestrictionId"`
	// Indicates if base policy should be enforced for the policy document.
	RequireBase *string `pulumi:"requireBase"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Path to the policy document.
	Scope *string `pulumi:"scope"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a PolicyRestriction resource.
type PolicyRestrictionArgs struct {
	// Policy restrictions after an entity level
	PolicyRestrictionId pulumi.StringPtrInput
	// Indicates if base policy should be enforced for the policy document.
	RequireBase pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Path to the policy document.
	Scope pulumi.StringPtrInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
}

func (PolicyRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyRestrictionArgs)(nil)).Elem()
}

type PolicyRestrictionInput interface {
	pulumi.Input

	ToPolicyRestrictionOutput() PolicyRestrictionOutput
	ToPolicyRestrictionOutputWithContext(ctx context.Context) PolicyRestrictionOutput
}

func (*PolicyRestriction) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRestriction)(nil)).Elem()
}

func (i *PolicyRestriction) ToPolicyRestrictionOutput() PolicyRestrictionOutput {
	return i.ToPolicyRestrictionOutputWithContext(context.Background())
}

func (i *PolicyRestriction) ToPolicyRestrictionOutputWithContext(ctx context.Context) PolicyRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRestrictionOutput)
}

type PolicyRestrictionOutput struct{ *pulumi.OutputState }

func (PolicyRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRestriction)(nil)).Elem()
}

func (o PolicyRestrictionOutput) ToPolicyRestrictionOutput() PolicyRestrictionOutput {
	return o
}

func (o PolicyRestrictionOutput) ToPolicyRestrictionOutputWithContext(ctx context.Context) PolicyRestrictionOutput {
	return o
}

// The name of the resource
func (o PolicyRestrictionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyRestriction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates if base policy should be enforced for the policy document.
func (o PolicyRestrictionOutput) RequireBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyRestriction) pulumi.StringPtrOutput { return v.RequireBase }).(pulumi.StringPtrOutput)
}

// Path to the policy document.
func (o PolicyRestrictionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyRestriction) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PolicyRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyRestriction) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PolicyRestrictionOutput{})
}
