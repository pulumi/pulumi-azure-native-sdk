// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Product details.
type WorkspaceProduct struct {
	pulumi.CustomResourceState

	// whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
	ApprovalRequired pulumi.BoolPtrOutput `pulumi:"approvalRequired"`
	// Product description. May include HTML formatting tags.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Product name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
	SubscriptionRequired pulumi.BoolPtrOutput `pulumi:"subscriptionRequired"`
	// Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
	SubscriptionsLimit pulumi.IntPtrOutput `pulumi:"subscriptionsLimit"`
	// Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
	Terms pulumi.StringPtrOutput `pulumi:"terms"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkspaceProduct registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceProduct(ctx *pulumi.Context,
	name string, args *WorkspaceProductArgs, opts ...pulumi.ResourceOption) (*WorkspaceProduct, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement:WorkspaceProduct"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230301preview:WorkspaceProduct"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WorkspaceProduct
	err := ctx.RegisterResource("azure-native:apimanagement/v20220901preview:WorkspaceProduct", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceProduct gets an existing WorkspaceProduct resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceProductState, opts ...pulumi.ResourceOption) (*WorkspaceProduct, error) {
	var resource WorkspaceProduct
	err := ctx.ReadResource("azure-native:apimanagement/v20220901preview:WorkspaceProduct", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceProduct resources.
type workspaceProductState struct {
}

type WorkspaceProductState struct {
}

func (WorkspaceProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProductState)(nil)).Elem()
}

type workspaceProductArgs struct {
	// whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
	ApprovalRequired *bool `pulumi:"approvalRequired"`
	// Product description. May include HTML formatting tags.
	Description *string `pulumi:"description"`
	// Product name.
	DisplayName string `pulumi:"displayName"`
	// Product identifier. Must be unique in the current API Management service instance.
	ProductId *string `pulumi:"productId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
	State *ProductStateEnum `pulumi:"state"`
	// Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
	SubscriptionRequired *bool `pulumi:"subscriptionRequired"`
	// Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
	SubscriptionsLimit *int `pulumi:"subscriptionsLimit"`
	// Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
	Terms *string `pulumi:"terms"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceProduct resource.
type WorkspaceProductArgs struct {
	// whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
	ApprovalRequired pulumi.BoolPtrInput
	// Product description. May include HTML formatting tags.
	Description pulumi.StringPtrInput
	// Product name.
	DisplayName pulumi.StringInput
	// Product identifier. Must be unique in the current API Management service instance.
	ProductId pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
	State ProductStateEnumPtrInput
	// Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
	SubscriptionRequired pulumi.BoolPtrInput
	// Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
	SubscriptionsLimit pulumi.IntPtrInput
	// Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
	Terms pulumi.StringPtrInput
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProductArgs)(nil)).Elem()
}

type WorkspaceProductInput interface {
	pulumi.Input

	ToWorkspaceProductOutput() WorkspaceProductOutput
	ToWorkspaceProductOutputWithContext(ctx context.Context) WorkspaceProductOutput
}

func (*WorkspaceProduct) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceProduct)(nil)).Elem()
}

func (i *WorkspaceProduct) ToWorkspaceProductOutput() WorkspaceProductOutput {
	return i.ToWorkspaceProductOutputWithContext(context.Background())
}

func (i *WorkspaceProduct) ToWorkspaceProductOutputWithContext(ctx context.Context) WorkspaceProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceProductOutput)
}

func (i *WorkspaceProduct) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceProduct] {
	return pulumix.Output[*WorkspaceProduct]{
		OutputState: i.ToWorkspaceProductOutputWithContext(ctx).OutputState,
	}
}

type WorkspaceProductOutput struct{ *pulumi.OutputState }

func (WorkspaceProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceProduct)(nil)).Elem()
}

func (o WorkspaceProductOutput) ToWorkspaceProductOutput() WorkspaceProductOutput {
	return o
}

func (o WorkspaceProductOutput) ToWorkspaceProductOutputWithContext(ctx context.Context) WorkspaceProductOutput {
	return o
}

func (o WorkspaceProductOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceProduct] {
	return pulumix.Output[*WorkspaceProduct]{
		OutputState: o.OutputState,
	}
}

// whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
func (o WorkspaceProductOutput) ApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.BoolPtrOutput { return v.ApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Product description. May include HTML formatting tags.
func (o WorkspaceProductOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Product name.
func (o WorkspaceProductOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The name of the resource
func (o WorkspaceProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
func (o WorkspaceProductOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
func (o WorkspaceProductOutput) SubscriptionRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.BoolPtrOutput { return v.SubscriptionRequired }).(pulumi.BoolPtrOutput)
}

// Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
func (o WorkspaceProductOutput) SubscriptionsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.IntPtrOutput { return v.SubscriptionsLimit }).(pulumi.IntPtrOutput)
}

// Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
func (o WorkspaceProductOutput) Terms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.StringPtrOutput { return v.Terms }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceProductOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProduct) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceProductOutput{})
}
