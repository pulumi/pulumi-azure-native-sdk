// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Wiki properties
type ApiWiki struct {
	pulumi.CustomResourceState

	// Collection wiki documents included into this wiki.
	Documents WikiDocumentationContractResponseArrayOutput `pulumi:"documents"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApiWiki registers a new resource with the given unique name, arguments, and options.
func NewApiWiki(ctx *pulumi.Context,
	name string, args *ApiWikiArgs, opts ...pulumi.ResourceOption) (*ApiWiki, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement:ApiWiki"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20220801:ApiWiki"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230301preview:ApiWiki"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230501preview:ApiWiki"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ApiWiki
	err := ctx.RegisterResource("azure-native:apimanagement/v20220901preview:ApiWiki", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiWiki gets an existing ApiWiki resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiWiki(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiWikiState, opts ...pulumi.ResourceOption) (*ApiWiki, error) {
	var resource ApiWiki
	err := ctx.ReadResource("azure-native:apimanagement/v20220901preview:ApiWiki", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiWiki resources.
type apiWikiState struct {
}

type ApiWikiState struct {
}

func (ApiWikiState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiWikiState)(nil)).Elem()
}

type apiWikiArgs struct {
	// API identifier. Must be unique in the current API Management service instance.
	ApiId string `pulumi:"apiId"`
	// Collection wiki documents included into this wiki.
	Documents []WikiDocumentationContract `pulumi:"documents"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ApiWiki resource.
type ApiWikiArgs struct {
	// API identifier. Must be unique in the current API Management service instance.
	ApiId pulumi.StringInput
	// Collection wiki documents included into this wiki.
	Documents WikiDocumentationContractArrayInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
}

func (ApiWikiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiWikiArgs)(nil)).Elem()
}

type ApiWikiInput interface {
	pulumi.Input

	ToApiWikiOutput() ApiWikiOutput
	ToApiWikiOutputWithContext(ctx context.Context) ApiWikiOutput
}

func (*ApiWiki) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiWiki)(nil)).Elem()
}

func (i *ApiWiki) ToApiWikiOutput() ApiWikiOutput {
	return i.ToApiWikiOutputWithContext(context.Background())
}

func (i *ApiWiki) ToApiWikiOutputWithContext(ctx context.Context) ApiWikiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWikiOutput)
}

type ApiWikiOutput struct{ *pulumi.OutputState }

func (ApiWikiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiWiki)(nil)).Elem()
}

func (o ApiWikiOutput) ToApiWikiOutput() ApiWikiOutput {
	return o
}

func (o ApiWikiOutput) ToApiWikiOutputWithContext(ctx context.Context) ApiWikiOutput {
	return o
}

// Collection wiki documents included into this wiki.
func (o ApiWikiOutput) Documents() WikiDocumentationContractResponseArrayOutput {
	return o.ApplyT(func(v *ApiWiki) WikiDocumentationContractResponseArrayOutput { return v.Documents }).(WikiDocumentationContractResponseArrayOutput)
}

// The name of the resource
func (o ApiWikiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiWiki) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ApiWikiOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiWiki) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ApiWikiOutput{})
}
