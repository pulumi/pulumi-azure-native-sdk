// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy Contract details.
type WorkspaceProductPolicy struct {
	pulumi.CustomResourceState

	// Format of the policyContent.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Contents of the Policy as defined by the format.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewWorkspaceProductPolicy registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceProductPolicy(ctx *pulumi.Context,
	name string, args *WorkspaceProductPolicyArgs, opts ...pulumi.ResourceOption) (*WorkspaceProductPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.Format == nil {
		args.Format = pulumi.StringPtr("xml")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apimanagement:WorkspaceProductPolicy"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230301preview:WorkspaceProductPolicy"),
		},
		{
			Type: pulumi.String("azure-native:apimanagement/v20230501preview:WorkspaceProductPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WorkspaceProductPolicy
	err := ctx.RegisterResource("azure-native:apimanagement/v20220901preview:WorkspaceProductPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceProductPolicy gets an existing WorkspaceProductPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceProductPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceProductPolicyState, opts ...pulumi.ResourceOption) (*WorkspaceProductPolicy, error) {
	var resource WorkspaceProductPolicy
	err := ctx.ReadResource("azure-native:apimanagement/v20220901preview:WorkspaceProductPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceProductPolicy resources.
type workspaceProductPolicyState struct {
}

type WorkspaceProductPolicyState struct {
}

func (WorkspaceProductPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProductPolicyState)(nil)).Elem()
}

type workspaceProductPolicyArgs struct {
	// Format of the policyContent.
	Format *string `pulumi:"format"`
	// The identifier of the Policy.
	PolicyId *string `pulumi:"policyId"`
	// Product identifier. Must be unique in the current API Management service instance.
	ProductId string `pulumi:"productId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Contents of the Policy as defined by the format.
	Value string `pulumi:"value"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceProductPolicy resource.
type WorkspaceProductPolicyArgs struct {
	// Format of the policyContent.
	Format pulumi.StringPtrInput
	// The identifier of the Policy.
	PolicyId pulumi.StringPtrInput
	// Product identifier. Must be unique in the current API Management service instance.
	ProductId pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// Contents of the Policy as defined by the format.
	Value pulumi.StringInput
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput
}

func (WorkspaceProductPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProductPolicyArgs)(nil)).Elem()
}

type WorkspaceProductPolicyInput interface {
	pulumi.Input

	ToWorkspaceProductPolicyOutput() WorkspaceProductPolicyOutput
	ToWorkspaceProductPolicyOutputWithContext(ctx context.Context) WorkspaceProductPolicyOutput
}

func (*WorkspaceProductPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceProductPolicy)(nil)).Elem()
}

func (i *WorkspaceProductPolicy) ToWorkspaceProductPolicyOutput() WorkspaceProductPolicyOutput {
	return i.ToWorkspaceProductPolicyOutputWithContext(context.Background())
}

func (i *WorkspaceProductPolicy) ToWorkspaceProductPolicyOutputWithContext(ctx context.Context) WorkspaceProductPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceProductPolicyOutput)
}

type WorkspaceProductPolicyOutput struct{ *pulumi.OutputState }

func (WorkspaceProductPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceProductPolicy)(nil)).Elem()
}

func (o WorkspaceProductPolicyOutput) ToWorkspaceProductPolicyOutput() WorkspaceProductPolicyOutput {
	return o
}

func (o WorkspaceProductPolicyOutput) ToWorkspaceProductPolicyOutputWithContext(ctx context.Context) WorkspaceProductPolicyOutput {
	return o
}

// Format of the policyContent.
func (o WorkspaceProductPolicyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceProductPolicy) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o WorkspaceProductPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProductPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceProductPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProductPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Contents of the Policy as defined by the format.
func (o WorkspaceProductPolicyOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProductPolicy) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceProductPolicyOutput{})
}
