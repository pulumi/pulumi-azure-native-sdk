// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the details of the certificate specified by its identifier.
func LookupWorkspaceCertificate(ctx *pulumi.Context, args *LookupWorkspaceCertificateArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceCertificateResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceCertificateResult
	err := ctx.Invoke("azure-native:apimanagement/v20240501:getWorkspaceCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkspaceCertificateArgs struct {
	// Identifier of the certificate entity. Must be unique in the current API Management service instance.
	CertificateId string `pulumi:"certificateId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// Certificate details.
type LookupWorkspaceCertificateResult struct {
	// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
	ExpirationDate string `pulumi:"expirationDate"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// KeyVault location details of the certificate.
	KeyVault *KeyVaultContractPropertiesResponse `pulumi:"keyVault"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Subject attribute of the certificate.
	Subject string `pulumi:"subject"`
	// Thumbprint of the certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupWorkspaceCertificateOutput(ctx *pulumi.Context, args LookupWorkspaceCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkspaceCertificateResult, error) {
			args := v.(LookupWorkspaceCertificateArgs)
			r, err := LookupWorkspaceCertificate(ctx, &args, opts...)
			var s LookupWorkspaceCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkspaceCertificateResultOutput)
}

type LookupWorkspaceCertificateOutputArgs struct {
	// Identifier of the certificate entity. Must be unique in the current API Management service instance.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (LookupWorkspaceCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceCertificateArgs)(nil)).Elem()
}

// Certificate details.
type LookupWorkspaceCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceCertificateResult)(nil)).Elem()
}

func (o LookupWorkspaceCertificateResultOutput) ToLookupWorkspaceCertificateResultOutput() LookupWorkspaceCertificateResultOutput {
	return o
}

func (o LookupWorkspaceCertificateResultOutput) ToLookupWorkspaceCertificateResultOutputWithContext(ctx context.Context) LookupWorkspaceCertificateResultOutput {
	return o
}

// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
func (o LookupWorkspaceCertificateResultOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceCertificateResult) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupWorkspaceCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// KeyVault location details of the certificate.
func (o LookupWorkspaceCertificateResultOutput) KeyVault() KeyVaultContractPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupWorkspaceCertificateResult) *KeyVaultContractPropertiesResponse { return v.KeyVault }).(KeyVaultContractPropertiesResponsePtrOutput)
}

// The name of the resource
func (o LookupWorkspaceCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Subject attribute of the certificate.
func (o LookupWorkspaceCertificateResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceCertificateResult) string { return v.Subject }).(pulumi.StringOutput)
}

// Thumbprint of the certificate.
func (o LookupWorkspaceCertificateResultOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceCertificateResult) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupWorkspaceCertificateResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceCertificateResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkspaceCertificateResultOutput{})
}
