// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the details of the logger specified by its identifier.
func LookupWorkspaceLogger(ctx *pulumi.Context, args *LookupWorkspaceLoggerArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceLoggerResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceLoggerResult
	err := ctx.Invoke("azure-native:apimanagement/v20240501:getWorkspaceLogger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkspaceLoggerArgs struct {
	// Logger identifier. Must be unique in the API Management service instance.
	LoggerId string `pulumi:"loggerId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId string `pulumi:"workspaceId"`
}

// Logger details.
type LookupWorkspaceLoggerResult struct {
	// The name and SendRule connection string of the event hub for azureEventHub logger.
	// Instrumentation key for applicationInsights logger.
	Credentials map[string]string `pulumi:"credentials"`
	// Logger description.
	Description *string `pulumi:"description"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Whether records are buffered in the logger before publishing. Default is assumed to be true.
	IsBuffered *bool `pulumi:"isBuffered"`
	// Logger type.
	LoggerType string `pulumi:"loggerType"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
	ResourceId *string `pulumi:"resourceId"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupWorkspaceLoggerOutput(ctx *pulumi.Context, args LookupWorkspaceLoggerOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceLoggerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWorkspaceLoggerResultOutput, error) {
			args := v.(LookupWorkspaceLoggerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:apimanagement/v20240501:getWorkspaceLogger", args, LookupWorkspaceLoggerResultOutput{}, options).(LookupWorkspaceLoggerResultOutput), nil
		}).(LookupWorkspaceLoggerResultOutput)
}

type LookupWorkspaceLoggerOutputArgs struct {
	// Logger identifier. Must be unique in the API Management service instance.
	LoggerId pulumi.StringInput `pulumi:"loggerId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Workspace identifier. Must be unique in the current API Management service instance.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (LookupWorkspaceLoggerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceLoggerArgs)(nil)).Elem()
}

// Logger details.
type LookupWorkspaceLoggerResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceLoggerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceLoggerResult)(nil)).Elem()
}

func (o LookupWorkspaceLoggerResultOutput) ToLookupWorkspaceLoggerResultOutput() LookupWorkspaceLoggerResultOutput {
	return o
}

func (o LookupWorkspaceLoggerResultOutput) ToLookupWorkspaceLoggerResultOutputWithContext(ctx context.Context) LookupWorkspaceLoggerResultOutput {
	return o
}

// The name and SendRule connection string of the event hub for azureEventHub logger.
// Instrumentation key for applicationInsights logger.
func (o LookupWorkspaceLoggerResultOutput) Credentials() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) map[string]string { return v.Credentials }).(pulumi.StringMapOutput)
}

// Logger description.
func (o LookupWorkspaceLoggerResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupWorkspaceLoggerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether records are buffered in the logger before publishing. Default is assumed to be true.
func (o LookupWorkspaceLoggerResultOutput) IsBuffered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) *bool { return v.IsBuffered }).(pulumi.BoolPtrOutput)
}

// Logger type.
func (o LookupWorkspaceLoggerResultOutput) LoggerType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) string { return v.LoggerType }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupWorkspaceLoggerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
func (o LookupWorkspaceLoggerResultOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupWorkspaceLoggerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceLoggerResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkspaceLoggerResultOutput{})
}
