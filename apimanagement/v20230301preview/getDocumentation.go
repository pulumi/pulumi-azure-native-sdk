// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets the details of the Documentation specified by its identifier.
func LookupDocumentation(ctx *pulumi.Context, args *LookupDocumentationArgs, opts ...pulumi.InvokeOption) (*LookupDocumentationResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupDocumentationResult
	err := ctx.Invoke("azure-native:apimanagement/v20230301preview:getDocumentation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDocumentationArgs struct {
	// Documentation identifier. Must be unique in the current API Management service instance.
	DocumentationId string `pulumi:"documentationId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// Markdown documentation details.
type LookupDocumentationResult struct {
	// Markdown documentation content.
	Content *string `pulumi:"content"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// documentation title.
	Title *string `pulumi:"title"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupDocumentationOutput(ctx *pulumi.Context, args LookupDocumentationOutputArgs, opts ...pulumi.InvokeOption) LookupDocumentationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDocumentationResult, error) {
			args := v.(LookupDocumentationArgs)
			r, err := LookupDocumentation(ctx, &args, opts...)
			var s LookupDocumentationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDocumentationResultOutput)
}

type LookupDocumentationOutputArgs struct {
	// Documentation identifier. Must be unique in the current API Management service instance.
	DocumentationId pulumi.StringInput `pulumi:"documentationId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupDocumentationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentationArgs)(nil)).Elem()
}

// Markdown documentation details.
type LookupDocumentationResultOutput struct{ *pulumi.OutputState }

func (LookupDocumentationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentationResult)(nil)).Elem()
}

func (o LookupDocumentationResultOutput) ToLookupDocumentationResultOutput() LookupDocumentationResultOutput {
	return o
}

func (o LookupDocumentationResultOutput) ToLookupDocumentationResultOutputWithContext(ctx context.Context) LookupDocumentationResultOutput {
	return o
}

func (o LookupDocumentationResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDocumentationResult] {
	return pulumix.Output[LookupDocumentationResult]{
		OutputState: o.OutputState,
	}
}

// Markdown documentation content.
func (o LookupDocumentationResultOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDocumentationResult) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupDocumentationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupDocumentationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentationResult) string { return v.Name }).(pulumi.StringOutput)
}

// documentation title.
func (o LookupDocumentationResultOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDocumentationResult) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupDocumentationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentationResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDocumentationResultOutput{})
}
