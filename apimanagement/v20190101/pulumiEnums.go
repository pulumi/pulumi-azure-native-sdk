// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies for what type of messages sampling settings should not apply.
type AlwaysLog string

const (
	// Always log all erroneous request regardless of sampling settings.
	AlwaysLogAllErrors = AlwaysLog("allErrors")
)

// Sets correlation protocol to use for Application Insights diagnostics.
type HttpCorrelationProtocol string

const (
	// Do not read and inject correlation headers.
	HttpCorrelationProtocolNone = HttpCorrelationProtocol("None")
	// Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
	HttpCorrelationProtocolLegacy = HttpCorrelationProtocol("Legacy")
	// Inject Trace Context headers. See https://w3c.github.io/trace-context.
	HttpCorrelationProtocolW3C = HttpCorrelationProtocol("W3C")
)

// Identity Provider Type identifier.
type IdentityProviderType string

const (
	// Facebook as Identity provider.
	IdentityProviderTypeFacebook = IdentityProviderType("facebook")
	// Google as Identity provider.
	IdentityProviderTypeGoogle = IdentityProviderType("google")
	// Microsoft Live as Identity provider.
	IdentityProviderTypeMicrosoft = IdentityProviderType("microsoft")
	// Twitter as Identity provider.
	IdentityProviderTypeTwitter = IdentityProviderType("twitter")
	// Azure Active Directory as Identity provider.
	IdentityProviderTypeAad = IdentityProviderType("aad")
	// Azure Active Directory B2C as Identity provider.
	IdentityProviderTypeAadB2C = IdentityProviderType("aadB2C")
)

// Sampling type.
type SamplingType string

const (
	// Fixed-rate sampling.
	SamplingTypeFixed = SamplingType("fixed")
)

// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
type SubscriptionStateEnum string

const (
	SubscriptionStateEnumSuspended = SubscriptionStateEnum("suspended")
	SubscriptionStateEnumActive    = SubscriptionStateEnum("active")
	SubscriptionStateEnumExpired   = SubscriptionStateEnum("expired")
	SubscriptionStateEnumSubmitted = SubscriptionStateEnum("submitted")
	SubscriptionStateEnumRejected  = SubscriptionStateEnum("rejected")
	SubscriptionStateEnumCancelled = SubscriptionStateEnum("cancelled")
)

func (SubscriptionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return pulumi.ToOutput(e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return e.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return SubscriptionStateEnum(e).ToSubscriptionStateEnumOutputWithContext(ctx).ToSubscriptionStateEnumPtrOutputWithContext(ctx)
}

func (e SubscriptionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubscriptionStateEnumOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionStateEnum) *SubscriptionStateEnum {
		return &v
	}).(SubscriptionStateEnumPtrOutput)
}

func (o SubscriptionStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubscriptionStateEnumPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) Elem() SubscriptionStateEnumOutput {
	return o.ApplyT(func(v *SubscriptionStateEnum) SubscriptionStateEnum {
		if v != nil {
			return *v
		}
		var ret SubscriptionStateEnum
		return ret
	}).(SubscriptionStateEnumOutput)
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubscriptionStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubscriptionStateEnumInput is an input type that accepts SubscriptionStateEnumArgs and SubscriptionStateEnumOutput values.
// You can construct a concrete instance of `SubscriptionStateEnumInput` via:
//
//	SubscriptionStateEnumArgs{...}
type SubscriptionStateEnumInput interface {
	pulumi.Input

	ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput
	ToSubscriptionStateEnumOutputWithContext(context.Context) SubscriptionStateEnumOutput
}

var subscriptionStateEnumPtrType = reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()

type SubscriptionStateEnumPtrInput interface {
	pulumi.Input

	ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput
	ToSubscriptionStateEnumPtrOutputWithContext(context.Context) SubscriptionStateEnumPtrOutput
}

type subscriptionStateEnumPtr string

func SubscriptionStateEnumPtr(v string) SubscriptionStateEnumPtrInput {
	return (*subscriptionStateEnumPtr)(&v)
}

func (*subscriptionStateEnumPtr) ElementType() reflect.Type {
	return subscriptionStateEnumPtrType
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutput(in).(SubscriptionStateEnumPtrOutput)
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubscriptionStateEnumPtrOutput)
}

// The verbosity level applied to traces emitted by trace policies.
type Verbosity string

const (
	// All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
	VerbosityVerbose = Verbosity("verbose")
	// Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
	VerbosityInformation = Verbosity("information")
	// Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
	VerbosityError = Verbosity("error")
)

func init() {
	pulumi.RegisterOutputType(SubscriptionStateEnumOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumPtrOutput{})
}
