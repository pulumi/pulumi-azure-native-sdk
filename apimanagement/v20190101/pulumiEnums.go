// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Specifies for what type of messages sampling settings should not apply.
type AlwaysLog string

const (
	// Always log all erroneous request regardless of sampling settings.
	AlwaysLogAllErrors = AlwaysLog("allErrors")
)

func (AlwaysLog) ElementType() reflect.Type {
	return reflect.TypeOf((*AlwaysLog)(nil)).Elem()
}

func (e AlwaysLog) ToAlwaysLogOutput() AlwaysLogOutput {
	return pulumi.ToOutput(e).(AlwaysLogOutput)
}

func (e AlwaysLog) ToAlwaysLogOutputWithContext(ctx context.Context) AlwaysLogOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AlwaysLogOutput)
}

func (e AlwaysLog) ToAlwaysLogPtrOutput() AlwaysLogPtrOutput {
	return e.ToAlwaysLogPtrOutputWithContext(context.Background())
}

func (e AlwaysLog) ToAlwaysLogPtrOutputWithContext(ctx context.Context) AlwaysLogPtrOutput {
	return AlwaysLog(e).ToAlwaysLogOutputWithContext(ctx).ToAlwaysLogPtrOutputWithContext(ctx)
}

func (e AlwaysLog) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlwaysLog) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlwaysLog) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AlwaysLog) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AlwaysLogOutput struct{ *pulumi.OutputState }

func (AlwaysLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlwaysLog)(nil)).Elem()
}

func (o AlwaysLogOutput) ToAlwaysLogOutput() AlwaysLogOutput {
	return o
}

func (o AlwaysLogOutput) ToAlwaysLogOutputWithContext(ctx context.Context) AlwaysLogOutput {
	return o
}

func (o AlwaysLogOutput) ToAlwaysLogPtrOutput() AlwaysLogPtrOutput {
	return o.ToAlwaysLogPtrOutputWithContext(context.Background())
}

func (o AlwaysLogOutput) ToAlwaysLogPtrOutputWithContext(ctx context.Context) AlwaysLogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlwaysLog) *AlwaysLog {
		return &v
	}).(AlwaysLogPtrOutput)
}

func (o AlwaysLogOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AlwaysLogOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlwaysLog) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AlwaysLogOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlwaysLogOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlwaysLog) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AlwaysLogPtrOutput struct{ *pulumi.OutputState }

func (AlwaysLogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlwaysLog)(nil)).Elem()
}

func (o AlwaysLogPtrOutput) ToAlwaysLogPtrOutput() AlwaysLogPtrOutput {
	return o
}

func (o AlwaysLogPtrOutput) ToAlwaysLogPtrOutputWithContext(ctx context.Context) AlwaysLogPtrOutput {
	return o
}

func (o AlwaysLogPtrOutput) Elem() AlwaysLogOutput {
	return o.ApplyT(func(v *AlwaysLog) AlwaysLog {
		if v != nil {
			return *v
		}
		var ret AlwaysLog
		return ret
	}).(AlwaysLogOutput)
}

func (o AlwaysLogPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlwaysLogPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AlwaysLog) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AlwaysLogInput is an input type that accepts values of the AlwaysLog enum
// A concrete instance of `AlwaysLogInput` can be one of the following:
//
//	AlwaysLogAllErrors
type AlwaysLogInput interface {
	pulumi.Input

	ToAlwaysLogOutput() AlwaysLogOutput
	ToAlwaysLogOutputWithContext(context.Context) AlwaysLogOutput
}

var alwaysLogPtrType = reflect.TypeOf((**AlwaysLog)(nil)).Elem()

type AlwaysLogPtrInput interface {
	pulumi.Input

	ToAlwaysLogPtrOutput() AlwaysLogPtrOutput
	ToAlwaysLogPtrOutputWithContext(context.Context) AlwaysLogPtrOutput
}

type alwaysLogPtr string

func AlwaysLogPtr(v string) AlwaysLogPtrInput {
	return (*alwaysLogPtr)(&v)
}

func (*alwaysLogPtr) ElementType() reflect.Type {
	return alwaysLogPtrType
}

func (in *alwaysLogPtr) ToAlwaysLogPtrOutput() AlwaysLogPtrOutput {
	return pulumi.ToOutput(in).(AlwaysLogPtrOutput)
}

func (in *alwaysLogPtr) ToAlwaysLogPtrOutputWithContext(ctx context.Context) AlwaysLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AlwaysLogPtrOutput)
}

func (in *alwaysLogPtr) ToOutput(ctx context.Context) pulumix.Output[*AlwaysLog] {
	return pulumix.Output[*AlwaysLog]{
		OutputState: in.ToAlwaysLogPtrOutputWithContext(ctx).OutputState,
	}
}

// Sets correlation protocol to use for Application Insights diagnostics.
type HttpCorrelationProtocol string

const (
	// Do not read and inject correlation headers.
	HttpCorrelationProtocolNone = HttpCorrelationProtocol("None")
	// Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
	HttpCorrelationProtocolLegacy = HttpCorrelationProtocol("Legacy")
	// Inject Trace Context headers. See https://w3c.github.io/trace-context.
	HttpCorrelationProtocolW3C = HttpCorrelationProtocol("W3C")
)

func (HttpCorrelationProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpCorrelationProtocol)(nil)).Elem()
}

func (e HttpCorrelationProtocol) ToHttpCorrelationProtocolOutput() HttpCorrelationProtocolOutput {
	return pulumi.ToOutput(e).(HttpCorrelationProtocolOutput)
}

func (e HttpCorrelationProtocol) ToHttpCorrelationProtocolOutputWithContext(ctx context.Context) HttpCorrelationProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HttpCorrelationProtocolOutput)
}

func (e HttpCorrelationProtocol) ToHttpCorrelationProtocolPtrOutput() HttpCorrelationProtocolPtrOutput {
	return e.ToHttpCorrelationProtocolPtrOutputWithContext(context.Background())
}

func (e HttpCorrelationProtocol) ToHttpCorrelationProtocolPtrOutputWithContext(ctx context.Context) HttpCorrelationProtocolPtrOutput {
	return HttpCorrelationProtocol(e).ToHttpCorrelationProtocolOutputWithContext(ctx).ToHttpCorrelationProtocolPtrOutputWithContext(ctx)
}

func (e HttpCorrelationProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCorrelationProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCorrelationProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpCorrelationProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HttpCorrelationProtocolOutput struct{ *pulumi.OutputState }

func (HttpCorrelationProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpCorrelationProtocol)(nil)).Elem()
}

func (o HttpCorrelationProtocolOutput) ToHttpCorrelationProtocolOutput() HttpCorrelationProtocolOutput {
	return o
}

func (o HttpCorrelationProtocolOutput) ToHttpCorrelationProtocolOutputWithContext(ctx context.Context) HttpCorrelationProtocolOutput {
	return o
}

func (o HttpCorrelationProtocolOutput) ToHttpCorrelationProtocolPtrOutput() HttpCorrelationProtocolPtrOutput {
	return o.ToHttpCorrelationProtocolPtrOutputWithContext(context.Background())
}

func (o HttpCorrelationProtocolOutput) ToHttpCorrelationProtocolPtrOutputWithContext(ctx context.Context) HttpCorrelationProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpCorrelationProtocol) *HttpCorrelationProtocol {
		return &v
	}).(HttpCorrelationProtocolPtrOutput)
}

func (o HttpCorrelationProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HttpCorrelationProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpCorrelationProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HttpCorrelationProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpCorrelationProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpCorrelationProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HttpCorrelationProtocolPtrOutput struct{ *pulumi.OutputState }

func (HttpCorrelationProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpCorrelationProtocol)(nil)).Elem()
}

func (o HttpCorrelationProtocolPtrOutput) ToHttpCorrelationProtocolPtrOutput() HttpCorrelationProtocolPtrOutput {
	return o
}

func (o HttpCorrelationProtocolPtrOutput) ToHttpCorrelationProtocolPtrOutputWithContext(ctx context.Context) HttpCorrelationProtocolPtrOutput {
	return o
}

func (o HttpCorrelationProtocolPtrOutput) Elem() HttpCorrelationProtocolOutput {
	return o.ApplyT(func(v *HttpCorrelationProtocol) HttpCorrelationProtocol {
		if v != nil {
			return *v
		}
		var ret HttpCorrelationProtocol
		return ret
	}).(HttpCorrelationProtocolOutput)
}

func (o HttpCorrelationProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpCorrelationProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HttpCorrelationProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HttpCorrelationProtocolInput is an input type that accepts values of the HttpCorrelationProtocol enum
// A concrete instance of `HttpCorrelationProtocolInput` can be one of the following:
//
//	HttpCorrelationProtocolNone
//	HttpCorrelationProtocolLegacy
//	HttpCorrelationProtocolW3C
type HttpCorrelationProtocolInput interface {
	pulumi.Input

	ToHttpCorrelationProtocolOutput() HttpCorrelationProtocolOutput
	ToHttpCorrelationProtocolOutputWithContext(context.Context) HttpCorrelationProtocolOutput
}

var httpCorrelationProtocolPtrType = reflect.TypeOf((**HttpCorrelationProtocol)(nil)).Elem()

type HttpCorrelationProtocolPtrInput interface {
	pulumi.Input

	ToHttpCorrelationProtocolPtrOutput() HttpCorrelationProtocolPtrOutput
	ToHttpCorrelationProtocolPtrOutputWithContext(context.Context) HttpCorrelationProtocolPtrOutput
}

type httpCorrelationProtocolPtr string

func HttpCorrelationProtocolPtr(v string) HttpCorrelationProtocolPtrInput {
	return (*httpCorrelationProtocolPtr)(&v)
}

func (*httpCorrelationProtocolPtr) ElementType() reflect.Type {
	return httpCorrelationProtocolPtrType
}

func (in *httpCorrelationProtocolPtr) ToHttpCorrelationProtocolPtrOutput() HttpCorrelationProtocolPtrOutput {
	return pulumi.ToOutput(in).(HttpCorrelationProtocolPtrOutput)
}

func (in *httpCorrelationProtocolPtr) ToHttpCorrelationProtocolPtrOutputWithContext(ctx context.Context) HttpCorrelationProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HttpCorrelationProtocolPtrOutput)
}

func (in *httpCorrelationProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*HttpCorrelationProtocol] {
	return pulumix.Output[*HttpCorrelationProtocol]{
		OutputState: in.ToHttpCorrelationProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// Identity Provider Type identifier.
type IdentityProviderType string

const (
	// Facebook as Identity provider.
	IdentityProviderTypeFacebook = IdentityProviderType("facebook")
	// Google as Identity provider.
	IdentityProviderTypeGoogle = IdentityProviderType("google")
	// Microsoft Live as Identity provider.
	IdentityProviderTypeMicrosoft = IdentityProviderType("microsoft")
	// Twitter as Identity provider.
	IdentityProviderTypeTwitter = IdentityProviderType("twitter")
	// Azure Active Directory as Identity provider.
	IdentityProviderTypeAad = IdentityProviderType("aad")
	// Azure Active Directory B2C as Identity provider.
	IdentityProviderTypeAadB2C = IdentityProviderType("aadB2C")
)

func (IdentityProviderType) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderType)(nil)).Elem()
}

func (e IdentityProviderType) ToIdentityProviderTypeOutput() IdentityProviderTypeOutput {
	return pulumi.ToOutput(e).(IdentityProviderTypeOutput)
}

func (e IdentityProviderType) ToIdentityProviderTypeOutputWithContext(ctx context.Context) IdentityProviderTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IdentityProviderTypeOutput)
}

func (e IdentityProviderType) ToIdentityProviderTypePtrOutput() IdentityProviderTypePtrOutput {
	return e.ToIdentityProviderTypePtrOutputWithContext(context.Background())
}

func (e IdentityProviderType) ToIdentityProviderTypePtrOutputWithContext(ctx context.Context) IdentityProviderTypePtrOutput {
	return IdentityProviderType(e).ToIdentityProviderTypeOutputWithContext(ctx).ToIdentityProviderTypePtrOutputWithContext(ctx)
}

func (e IdentityProviderType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityProviderType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityProviderType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IdentityProviderType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IdentityProviderTypeOutput struct{ *pulumi.OutputState }

func (IdentityProviderTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderType)(nil)).Elem()
}

func (o IdentityProviderTypeOutput) ToIdentityProviderTypeOutput() IdentityProviderTypeOutput {
	return o
}

func (o IdentityProviderTypeOutput) ToIdentityProviderTypeOutputWithContext(ctx context.Context) IdentityProviderTypeOutput {
	return o
}

func (o IdentityProviderTypeOutput) ToIdentityProviderTypePtrOutput() IdentityProviderTypePtrOutput {
	return o.ToIdentityProviderTypePtrOutputWithContext(context.Background())
}

func (o IdentityProviderTypeOutput) ToIdentityProviderTypePtrOutputWithContext(ctx context.Context) IdentityProviderTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProviderType) *IdentityProviderType {
		return &v
	}).(IdentityProviderTypePtrOutput)
}

func (o IdentityProviderTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IdentityProviderTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityProviderType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IdentityProviderTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityProviderTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityProviderType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IdentityProviderTypePtrOutput struct{ *pulumi.OutputState }

func (IdentityProviderTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderType)(nil)).Elem()
}

func (o IdentityProviderTypePtrOutput) ToIdentityProviderTypePtrOutput() IdentityProviderTypePtrOutput {
	return o
}

func (o IdentityProviderTypePtrOutput) ToIdentityProviderTypePtrOutputWithContext(ctx context.Context) IdentityProviderTypePtrOutput {
	return o
}

func (o IdentityProviderTypePtrOutput) Elem() IdentityProviderTypeOutput {
	return o.ApplyT(func(v *IdentityProviderType) IdentityProviderType {
		if v != nil {
			return *v
		}
		var ret IdentityProviderType
		return ret
	}).(IdentityProviderTypeOutput)
}

func (o IdentityProviderTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityProviderTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IdentityProviderType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IdentityProviderTypeInput is an input type that accepts values of the IdentityProviderType enum
// A concrete instance of `IdentityProviderTypeInput` can be one of the following:
//
//	IdentityProviderTypeFacebook
//	IdentityProviderTypeGoogle
//	IdentityProviderTypeMicrosoft
//	IdentityProviderTypeTwitter
//	IdentityProviderTypeAad
//	IdentityProviderTypeAadB2C
type IdentityProviderTypeInput interface {
	pulumi.Input

	ToIdentityProviderTypeOutput() IdentityProviderTypeOutput
	ToIdentityProviderTypeOutputWithContext(context.Context) IdentityProviderTypeOutput
}

var identityProviderTypePtrType = reflect.TypeOf((**IdentityProviderType)(nil)).Elem()

type IdentityProviderTypePtrInput interface {
	pulumi.Input

	ToIdentityProviderTypePtrOutput() IdentityProviderTypePtrOutput
	ToIdentityProviderTypePtrOutputWithContext(context.Context) IdentityProviderTypePtrOutput
}

type identityProviderTypePtr string

func IdentityProviderTypePtr(v string) IdentityProviderTypePtrInput {
	return (*identityProviderTypePtr)(&v)
}

func (*identityProviderTypePtr) ElementType() reflect.Type {
	return identityProviderTypePtrType
}

func (in *identityProviderTypePtr) ToIdentityProviderTypePtrOutput() IdentityProviderTypePtrOutput {
	return pulumi.ToOutput(in).(IdentityProviderTypePtrOutput)
}

func (in *identityProviderTypePtr) ToIdentityProviderTypePtrOutputWithContext(ctx context.Context) IdentityProviderTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IdentityProviderTypePtrOutput)
}

func (in *identityProviderTypePtr) ToOutput(ctx context.Context) pulumix.Output[*IdentityProviderType] {
	return pulumix.Output[*IdentityProviderType]{
		OutputState: in.ToIdentityProviderTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Sampling type.
type SamplingType string

const (
	// Fixed-rate sampling.
	SamplingTypeFixed = SamplingType("fixed")
)

func (SamplingType) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingType)(nil)).Elem()
}

func (e SamplingType) ToSamplingTypeOutput() SamplingTypeOutput {
	return pulumi.ToOutput(e).(SamplingTypeOutput)
}

func (e SamplingType) ToSamplingTypeOutputWithContext(ctx context.Context) SamplingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SamplingTypeOutput)
}

func (e SamplingType) ToSamplingTypePtrOutput() SamplingTypePtrOutput {
	return e.ToSamplingTypePtrOutputWithContext(context.Background())
}

func (e SamplingType) ToSamplingTypePtrOutputWithContext(ctx context.Context) SamplingTypePtrOutput {
	return SamplingType(e).ToSamplingTypeOutputWithContext(ctx).ToSamplingTypePtrOutputWithContext(ctx)
}

func (e SamplingType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SamplingType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SamplingType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SamplingType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SamplingTypeOutput struct{ *pulumi.OutputState }

func (SamplingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingType)(nil)).Elem()
}

func (o SamplingTypeOutput) ToSamplingTypeOutput() SamplingTypeOutput {
	return o
}

func (o SamplingTypeOutput) ToSamplingTypeOutputWithContext(ctx context.Context) SamplingTypeOutput {
	return o
}

func (o SamplingTypeOutput) ToSamplingTypePtrOutput() SamplingTypePtrOutput {
	return o.ToSamplingTypePtrOutputWithContext(context.Background())
}

func (o SamplingTypeOutput) ToSamplingTypePtrOutputWithContext(ctx context.Context) SamplingTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingType) *SamplingType {
		return &v
	}).(SamplingTypePtrOutput)
}

func (o SamplingTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SamplingTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SamplingType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SamplingTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SamplingTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SamplingType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SamplingTypePtrOutput struct{ *pulumi.OutputState }

func (SamplingTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingType)(nil)).Elem()
}

func (o SamplingTypePtrOutput) ToSamplingTypePtrOutput() SamplingTypePtrOutput {
	return o
}

func (o SamplingTypePtrOutput) ToSamplingTypePtrOutputWithContext(ctx context.Context) SamplingTypePtrOutput {
	return o
}

func (o SamplingTypePtrOutput) Elem() SamplingTypeOutput {
	return o.ApplyT(func(v *SamplingType) SamplingType {
		if v != nil {
			return *v
		}
		var ret SamplingType
		return ret
	}).(SamplingTypeOutput)
}

func (o SamplingTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SamplingTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SamplingType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SamplingTypeInput is an input type that accepts values of the SamplingType enum
// A concrete instance of `SamplingTypeInput` can be one of the following:
//
//	SamplingTypeFixed
type SamplingTypeInput interface {
	pulumi.Input

	ToSamplingTypeOutput() SamplingTypeOutput
	ToSamplingTypeOutputWithContext(context.Context) SamplingTypeOutput
}

var samplingTypePtrType = reflect.TypeOf((**SamplingType)(nil)).Elem()

type SamplingTypePtrInput interface {
	pulumi.Input

	ToSamplingTypePtrOutput() SamplingTypePtrOutput
	ToSamplingTypePtrOutputWithContext(context.Context) SamplingTypePtrOutput
}

type samplingTypePtr string

func SamplingTypePtr(v string) SamplingTypePtrInput {
	return (*samplingTypePtr)(&v)
}

func (*samplingTypePtr) ElementType() reflect.Type {
	return samplingTypePtrType
}

func (in *samplingTypePtr) ToSamplingTypePtrOutput() SamplingTypePtrOutput {
	return pulumi.ToOutput(in).(SamplingTypePtrOutput)
}

func (in *samplingTypePtr) ToSamplingTypePtrOutputWithContext(ctx context.Context) SamplingTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SamplingTypePtrOutput)
}

func (in *samplingTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SamplingType] {
	return pulumix.Output[*SamplingType]{
		OutputState: in.ToSamplingTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
type SubscriptionStateEnum string

const (
	SubscriptionStateEnumSuspended = SubscriptionStateEnum("suspended")
	SubscriptionStateEnumActive    = SubscriptionStateEnum("active")
	SubscriptionStateEnumExpired   = SubscriptionStateEnum("expired")
	SubscriptionStateEnumSubmitted = SubscriptionStateEnum("submitted")
	SubscriptionStateEnumRejected  = SubscriptionStateEnum("rejected")
	SubscriptionStateEnumCancelled = SubscriptionStateEnum("cancelled")
)

func (SubscriptionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return pulumi.ToOutput(e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubscriptionStateEnumOutput)
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return e.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return SubscriptionStateEnum(e).ToSubscriptionStateEnumOutputWithContext(ctx).ToSubscriptionStateEnumPtrOutputWithContext(ctx)
}

func (e SubscriptionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubscriptionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubscriptionStateEnumOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumOutputWithContext(ctx context.Context) SubscriptionStateEnumOutput {
	return o
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o.ToSubscriptionStateEnumPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionStateEnum) *SubscriptionStateEnum {
		return &v
	}).(SubscriptionStateEnumPtrOutput)
}

func (o SubscriptionStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubscriptionStateEnumPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return o
}

func (o SubscriptionStateEnumPtrOutput) Elem() SubscriptionStateEnumOutput {
	return o.ApplyT(func(v *SubscriptionStateEnum) SubscriptionStateEnum {
		if v != nil {
			return *v
		}
		var ret SubscriptionStateEnum
		return ret
	}).(SubscriptionStateEnumOutput)
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubscriptionStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubscriptionStateEnumInput is an input type that accepts values of the SubscriptionStateEnum enum
// A concrete instance of `SubscriptionStateEnumInput` can be one of the following:
//
//	SubscriptionStateEnumSuspended
//	SubscriptionStateEnumActive
//	SubscriptionStateEnumExpired
//	SubscriptionStateEnumSubmitted
//	SubscriptionStateEnumRejected
//	SubscriptionStateEnumCancelled
type SubscriptionStateEnumInput interface {
	pulumi.Input

	ToSubscriptionStateEnumOutput() SubscriptionStateEnumOutput
	ToSubscriptionStateEnumOutputWithContext(context.Context) SubscriptionStateEnumOutput
}

var subscriptionStateEnumPtrType = reflect.TypeOf((**SubscriptionStateEnum)(nil)).Elem()

type SubscriptionStateEnumPtrInput interface {
	pulumi.Input

	ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput
	ToSubscriptionStateEnumPtrOutputWithContext(context.Context) SubscriptionStateEnumPtrOutput
}

type subscriptionStateEnumPtr string

func SubscriptionStateEnumPtr(v string) SubscriptionStateEnumPtrInput {
	return (*subscriptionStateEnumPtr)(&v)
}

func (*subscriptionStateEnumPtr) ElementType() reflect.Type {
	return subscriptionStateEnumPtrType
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutput() SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutput(in).(SubscriptionStateEnumPtrOutput)
}

func (in *subscriptionStateEnumPtr) ToSubscriptionStateEnumPtrOutputWithContext(ctx context.Context) SubscriptionStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubscriptionStateEnumPtrOutput)
}

func (in *subscriptionStateEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionStateEnum] {
	return pulumix.Output[*SubscriptionStateEnum]{
		OutputState: in.ToSubscriptionStateEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// The verbosity level applied to traces emitted by trace policies.
type Verbosity string

const (
	// All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
	VerbosityVerbose = Verbosity("verbose")
	// Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
	VerbosityInformation = Verbosity("information")
	// Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
	VerbosityError = Verbosity("error")
)

func (Verbosity) ElementType() reflect.Type {
	return reflect.TypeOf((*Verbosity)(nil)).Elem()
}

func (e Verbosity) ToVerbosityOutput() VerbosityOutput {
	return pulumi.ToOutput(e).(VerbosityOutput)
}

func (e Verbosity) ToVerbosityOutputWithContext(ctx context.Context) VerbosityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VerbosityOutput)
}

func (e Verbosity) ToVerbosityPtrOutput() VerbosityPtrOutput {
	return e.ToVerbosityPtrOutputWithContext(context.Background())
}

func (e Verbosity) ToVerbosityPtrOutputWithContext(ctx context.Context) VerbosityPtrOutput {
	return Verbosity(e).ToVerbosityOutputWithContext(ctx).ToVerbosityPtrOutputWithContext(ctx)
}

func (e Verbosity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Verbosity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Verbosity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Verbosity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VerbosityOutput struct{ *pulumi.OutputState }

func (VerbosityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Verbosity)(nil)).Elem()
}

func (o VerbosityOutput) ToVerbosityOutput() VerbosityOutput {
	return o
}

func (o VerbosityOutput) ToVerbosityOutputWithContext(ctx context.Context) VerbosityOutput {
	return o
}

func (o VerbosityOutput) ToVerbosityPtrOutput() VerbosityPtrOutput {
	return o.ToVerbosityPtrOutputWithContext(context.Background())
}

func (o VerbosityOutput) ToVerbosityPtrOutputWithContext(ctx context.Context) VerbosityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Verbosity) *Verbosity {
		return &v
	}).(VerbosityPtrOutput)
}

func (o VerbosityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VerbosityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Verbosity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VerbosityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VerbosityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Verbosity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VerbosityPtrOutput struct{ *pulumi.OutputState }

func (VerbosityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Verbosity)(nil)).Elem()
}

func (o VerbosityPtrOutput) ToVerbosityPtrOutput() VerbosityPtrOutput {
	return o
}

func (o VerbosityPtrOutput) ToVerbosityPtrOutputWithContext(ctx context.Context) VerbosityPtrOutput {
	return o
}

func (o VerbosityPtrOutput) Elem() VerbosityOutput {
	return o.ApplyT(func(v *Verbosity) Verbosity {
		if v != nil {
			return *v
		}
		var ret Verbosity
		return ret
	}).(VerbosityOutput)
}

func (o VerbosityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VerbosityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Verbosity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VerbosityInput is an input type that accepts values of the Verbosity enum
// A concrete instance of `VerbosityInput` can be one of the following:
//
//	VerbosityVerbose
//	VerbosityInformation
//	VerbosityError
type VerbosityInput interface {
	pulumi.Input

	ToVerbosityOutput() VerbosityOutput
	ToVerbosityOutputWithContext(context.Context) VerbosityOutput
}

var verbosityPtrType = reflect.TypeOf((**Verbosity)(nil)).Elem()

type VerbosityPtrInput interface {
	pulumi.Input

	ToVerbosityPtrOutput() VerbosityPtrOutput
	ToVerbosityPtrOutputWithContext(context.Context) VerbosityPtrOutput
}

type verbosityPtr string

func VerbosityPtr(v string) VerbosityPtrInput {
	return (*verbosityPtr)(&v)
}

func (*verbosityPtr) ElementType() reflect.Type {
	return verbosityPtrType
}

func (in *verbosityPtr) ToVerbosityPtrOutput() VerbosityPtrOutput {
	return pulumi.ToOutput(in).(VerbosityPtrOutput)
}

func (in *verbosityPtr) ToVerbosityPtrOutputWithContext(ctx context.Context) VerbosityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VerbosityPtrOutput)
}

func (in *verbosityPtr) ToOutput(ctx context.Context) pulumix.Output[*Verbosity] {
	return pulumix.Output[*Verbosity]{
		OutputState: in.ToVerbosityPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AlwaysLogOutput{})
	pulumi.RegisterOutputType(AlwaysLogPtrOutput{})
	pulumi.RegisterOutputType(HttpCorrelationProtocolOutput{})
	pulumi.RegisterOutputType(HttpCorrelationProtocolPtrOutput{})
	pulumi.RegisterOutputType(IdentityProviderTypeOutput{})
	pulumi.RegisterOutputType(IdentityProviderTypePtrOutput{})
	pulumi.RegisterOutputType(SamplingTypeOutput{})
	pulumi.RegisterOutputType(SamplingTypePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumOutput{})
	pulumi.RegisterOutputType(SubscriptionStateEnumPtrOutput{})
	pulumi.RegisterOutputType(VerbosityOutput{})
	pulumi.RegisterOutputType(VerbosityPtrOutput{})
}
