// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the policy restriction of the Api Management service.
func LookupPolicyRestriction(ctx *pulumi.Context, args *LookupPolicyRestrictionArgs, opts ...pulumi.InvokeOption) (*LookupPolicyRestrictionResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyRestrictionResult
	err := ctx.Invoke("azure-native:apimanagement/v20230501preview:getPolicyRestriction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupPolicyRestrictionArgs struct {
	// Policy restrictions after an entity level
	PolicyRestrictionId string `pulumi:"policyRestrictionId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
}

// Policy restriction contract details.
type LookupPolicyRestrictionResult struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Indicates if base policy should be enforced for the policy document.
	RequireBase *string `pulumi:"requireBase"`
	// Path to the policy document.
	Scope *string `pulumi:"scope"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupPolicyRestrictionResult
func (val *LookupPolicyRestrictionResult) Defaults() *LookupPolicyRestrictionResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RequireBase == nil {
		requireBase_ := "false"
		tmp.RequireBase = &requireBase_
	}
	return &tmp
}

func LookupPolicyRestrictionOutput(ctx *pulumi.Context, args LookupPolicyRestrictionOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyRestrictionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyRestrictionResult, error) {
			args := v.(LookupPolicyRestrictionArgs)
			r, err := LookupPolicyRestriction(ctx, &args, opts...)
			var s LookupPolicyRestrictionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyRestrictionResultOutput)
}

type LookupPolicyRestrictionOutputArgs struct {
	// Policy restrictions after an entity level
	PolicyRestrictionId pulumi.StringInput `pulumi:"policyRestrictionId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupPolicyRestrictionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyRestrictionArgs)(nil)).Elem()
}

// Policy restriction contract details.
type LookupPolicyRestrictionResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyRestrictionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyRestrictionResult)(nil)).Elem()
}

func (o LookupPolicyRestrictionResultOutput) ToLookupPolicyRestrictionResultOutput() LookupPolicyRestrictionResultOutput {
	return o
}

func (o LookupPolicyRestrictionResultOutput) ToLookupPolicyRestrictionResultOutputWithContext(ctx context.Context) LookupPolicyRestrictionResultOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupPolicyRestrictionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyRestrictionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupPolicyRestrictionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyRestrictionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates if base policy should be enforced for the policy document.
func (o LookupPolicyRestrictionResultOutput) RequireBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyRestrictionResult) *string { return v.RequireBase }).(pulumi.StringPtrOutput)
}

// Path to the policy document.
func (o LookupPolicyRestrictionResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyRestrictionResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupPolicyRestrictionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyRestrictionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyRestrictionResultOutput{})
}
