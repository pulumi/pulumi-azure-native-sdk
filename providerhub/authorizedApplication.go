// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package providerhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uses Azure REST API version 2024-09-01.
type AuthorizedApplication struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name       pulumi.StringOutput                           `pulumi:"name"`
	Properties AuthorizedApplicationPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAuthorizedApplication registers a new resource with the given unique name, arguments, and options.
func NewAuthorizedApplication(ctx *pulumi.Context,
	name string, args *AuthorizedApplicationArgs, opts ...pulumi.ResourceOption) (*AuthorizedApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ProviderNamespace'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:providerhub/v20240901:AuthorizedApplication"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AuthorizedApplication
	err := ctx.RegisterResource("azure-native:providerhub:AuthorizedApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizedApplication gets an existing AuthorizedApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizedApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizedApplicationState, opts ...pulumi.ResourceOption) (*AuthorizedApplication, error) {
	var resource AuthorizedApplication
	err := ctx.ReadResource("azure-native:providerhub:AuthorizedApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizedApplication resources.
type authorizedApplicationState struct {
}

type AuthorizedApplicationState struct {
}

func (AuthorizedApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizedApplicationState)(nil)).Elem()
}

type authorizedApplicationArgs struct {
	// The application ID.
	ApplicationId *string                          `pulumi:"applicationId"`
	Properties    *AuthorizedApplicationProperties `pulumi:"properties"`
	// The name of the resource provider hosted within ProviderHub.
	ProviderNamespace string `pulumi:"providerNamespace"`
}

// The set of arguments for constructing a AuthorizedApplication resource.
type AuthorizedApplicationArgs struct {
	// The application ID.
	ApplicationId pulumi.StringPtrInput
	Properties    AuthorizedApplicationPropertiesPtrInput
	// The name of the resource provider hosted within ProviderHub.
	ProviderNamespace pulumi.StringInput
}

func (AuthorizedApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizedApplicationArgs)(nil)).Elem()
}

type AuthorizedApplicationInput interface {
	pulumi.Input

	ToAuthorizedApplicationOutput() AuthorizedApplicationOutput
	ToAuthorizedApplicationOutputWithContext(ctx context.Context) AuthorizedApplicationOutput
}

func (*AuthorizedApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizedApplication)(nil)).Elem()
}

func (i *AuthorizedApplication) ToAuthorizedApplicationOutput() AuthorizedApplicationOutput {
	return i.ToAuthorizedApplicationOutputWithContext(context.Background())
}

func (i *AuthorizedApplication) ToAuthorizedApplicationOutputWithContext(ctx context.Context) AuthorizedApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizedApplicationOutput)
}

type AuthorizedApplicationOutput struct{ *pulumi.OutputState }

func (AuthorizedApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizedApplication)(nil)).Elem()
}

func (o AuthorizedApplicationOutput) ToAuthorizedApplicationOutput() AuthorizedApplicationOutput {
	return o
}

func (o AuthorizedApplicationOutput) ToAuthorizedApplicationOutputWithContext(ctx context.Context) AuthorizedApplicationOutput {
	return o
}

// The Azure API version of the resource.
func (o AuthorizedApplicationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedApplication) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o AuthorizedApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AuthorizedApplicationOutput) Properties() AuthorizedApplicationPropertiesResponseOutput {
	return o.ApplyT(func(v *AuthorizedApplication) AuthorizedApplicationPropertiesResponseOutput { return v.Properties }).(AuthorizedApplicationPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o AuthorizedApplicationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *AuthorizedApplication) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o AuthorizedApplicationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedApplication) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorizedApplicationOutput{})
}
