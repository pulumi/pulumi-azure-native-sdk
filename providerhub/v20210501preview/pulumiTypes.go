// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Properties of an Operation.
type OperationsDefinition struct {
	ActionType *string `pulumi:"actionType"`
	// Display information of the operation.
	Display OperationsDefinitionDisplay `pulumi:"display"`
	// Indicates whether the operation applies to data-plane.
	IsDataAction *bool `pulumi:"isDataAction"`
	// Name of the operation.
	Name       string      `pulumi:"name"`
	Origin     *string     `pulumi:"origin"`
	Properties interface{} `pulumi:"properties"`
}

// OperationsDefinitionInput is an input type that accepts OperationsDefinitionArgs and OperationsDefinitionOutput values.
// You can construct a concrete instance of `OperationsDefinitionInput` via:
//
//	OperationsDefinitionArgs{...}
type OperationsDefinitionInput interface {
	pulumi.Input

	ToOperationsDefinitionOutput() OperationsDefinitionOutput
	ToOperationsDefinitionOutputWithContext(context.Context) OperationsDefinitionOutput
}

// Properties of an Operation.
type OperationsDefinitionArgs struct {
	ActionType pulumi.StringPtrInput `pulumi:"actionType"`
	// Display information of the operation.
	Display OperationsDefinitionDisplayInput `pulumi:"display"`
	// Indicates whether the operation applies to data-plane.
	IsDataAction pulumi.BoolPtrInput `pulumi:"isDataAction"`
	// Name of the operation.
	Name       pulumi.StringInput    `pulumi:"name"`
	Origin     pulumi.StringPtrInput `pulumi:"origin"`
	Properties pulumi.Input          `pulumi:"properties"`
}

func (OperationsDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationsDefinition)(nil)).Elem()
}

func (i OperationsDefinitionArgs) ToOperationsDefinitionOutput() OperationsDefinitionOutput {
	return i.ToOperationsDefinitionOutputWithContext(context.Background())
}

func (i OperationsDefinitionArgs) ToOperationsDefinitionOutputWithContext(ctx context.Context) OperationsDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationsDefinitionOutput)
}

func (i OperationsDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[OperationsDefinition] {
	return pulumix.Output[OperationsDefinition]{
		OutputState: i.ToOperationsDefinitionOutputWithContext(ctx).OutputState,
	}
}

// OperationsDefinitionArrayInput is an input type that accepts OperationsDefinitionArray and OperationsDefinitionArrayOutput values.
// You can construct a concrete instance of `OperationsDefinitionArrayInput` via:
//
//	OperationsDefinitionArray{ OperationsDefinitionArgs{...} }
type OperationsDefinitionArrayInput interface {
	pulumi.Input

	ToOperationsDefinitionArrayOutput() OperationsDefinitionArrayOutput
	ToOperationsDefinitionArrayOutputWithContext(context.Context) OperationsDefinitionArrayOutput
}

type OperationsDefinitionArray []OperationsDefinitionInput

func (OperationsDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperationsDefinition)(nil)).Elem()
}

func (i OperationsDefinitionArray) ToOperationsDefinitionArrayOutput() OperationsDefinitionArrayOutput {
	return i.ToOperationsDefinitionArrayOutputWithContext(context.Background())
}

func (i OperationsDefinitionArray) ToOperationsDefinitionArrayOutputWithContext(ctx context.Context) OperationsDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationsDefinitionArrayOutput)
}

func (i OperationsDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]OperationsDefinition] {
	return pulumix.Output[[]OperationsDefinition]{
		OutputState: i.ToOperationsDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

// Properties of an Operation.
type OperationsDefinitionOutput struct{ *pulumi.OutputState }

func (OperationsDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationsDefinition)(nil)).Elem()
}

func (o OperationsDefinitionOutput) ToOperationsDefinitionOutput() OperationsDefinitionOutput {
	return o
}

func (o OperationsDefinitionOutput) ToOperationsDefinitionOutputWithContext(ctx context.Context) OperationsDefinitionOutput {
	return o
}

func (o OperationsDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[OperationsDefinition] {
	return pulumix.Output[OperationsDefinition]{
		OutputState: o.OutputState,
	}
}

func (o OperationsDefinitionOutput) ActionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationsDefinition) *string { return v.ActionType }).(pulumi.StringPtrOutput)
}

// Display information of the operation.
func (o OperationsDefinitionOutput) Display() OperationsDefinitionDisplayOutput {
	return o.ApplyT(func(v OperationsDefinition) OperationsDefinitionDisplay { return v.Display }).(OperationsDefinitionDisplayOutput)
}

// Indicates whether the operation applies to data-plane.
func (o OperationsDefinitionOutput) IsDataAction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperationsDefinition) *bool { return v.IsDataAction }).(pulumi.BoolPtrOutput)
}

// Name of the operation.
func (o OperationsDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinition) string { return v.Name }).(pulumi.StringOutput)
}

func (o OperationsDefinitionOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationsDefinition) *string { return v.Origin }).(pulumi.StringPtrOutput)
}

func (o OperationsDefinitionOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v OperationsDefinition) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

type OperationsDefinitionArrayOutput struct{ *pulumi.OutputState }

func (OperationsDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperationsDefinition)(nil)).Elem()
}

func (o OperationsDefinitionArrayOutput) ToOperationsDefinitionArrayOutput() OperationsDefinitionArrayOutput {
	return o
}

func (o OperationsDefinitionArrayOutput) ToOperationsDefinitionArrayOutputWithContext(ctx context.Context) OperationsDefinitionArrayOutput {
	return o
}

func (o OperationsDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OperationsDefinition] {
	return pulumix.Output[[]OperationsDefinition]{
		OutputState: o.OutputState,
	}
}

func (o OperationsDefinitionArrayOutput) Index(i pulumi.IntInput) OperationsDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperationsDefinition {
		return vs[0].([]OperationsDefinition)[vs[1].(int)]
	}).(OperationsDefinitionOutput)
}

// Display information of the operation.
type OperationsDefinitionDisplay struct {
	Description string `pulumi:"description"`
	Operation   string `pulumi:"operation"`
	Provider    string `pulumi:"provider"`
	Resource    string `pulumi:"resource"`
}

// OperationsDefinitionDisplayInput is an input type that accepts OperationsDefinitionDisplayArgs and OperationsDefinitionDisplayOutput values.
// You can construct a concrete instance of `OperationsDefinitionDisplayInput` via:
//
//	OperationsDefinitionDisplayArgs{...}
type OperationsDefinitionDisplayInput interface {
	pulumi.Input

	ToOperationsDefinitionDisplayOutput() OperationsDefinitionDisplayOutput
	ToOperationsDefinitionDisplayOutputWithContext(context.Context) OperationsDefinitionDisplayOutput
}

// Display information of the operation.
type OperationsDefinitionDisplayArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Operation   pulumi.StringInput `pulumi:"operation"`
	Provider    pulumi.StringInput `pulumi:"provider"`
	Resource    pulumi.StringInput `pulumi:"resource"`
}

func (OperationsDefinitionDisplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationsDefinitionDisplay)(nil)).Elem()
}

func (i OperationsDefinitionDisplayArgs) ToOperationsDefinitionDisplayOutput() OperationsDefinitionDisplayOutput {
	return i.ToOperationsDefinitionDisplayOutputWithContext(context.Background())
}

func (i OperationsDefinitionDisplayArgs) ToOperationsDefinitionDisplayOutputWithContext(ctx context.Context) OperationsDefinitionDisplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationsDefinitionDisplayOutput)
}

func (i OperationsDefinitionDisplayArgs) ToOutput(ctx context.Context) pulumix.Output[OperationsDefinitionDisplay] {
	return pulumix.Output[OperationsDefinitionDisplay]{
		OutputState: i.ToOperationsDefinitionDisplayOutputWithContext(ctx).OutputState,
	}
}

// Display information of the operation.
type OperationsDefinitionDisplayOutput struct{ *pulumi.OutputState }

func (OperationsDefinitionDisplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationsDefinitionDisplay)(nil)).Elem()
}

func (o OperationsDefinitionDisplayOutput) ToOperationsDefinitionDisplayOutput() OperationsDefinitionDisplayOutput {
	return o
}

func (o OperationsDefinitionDisplayOutput) ToOperationsDefinitionDisplayOutputWithContext(ctx context.Context) OperationsDefinitionDisplayOutput {
	return o
}

func (o OperationsDefinitionDisplayOutput) ToOutput(ctx context.Context) pulumix.Output[OperationsDefinitionDisplay] {
	return pulumix.Output[OperationsDefinitionDisplay]{
		OutputState: o.OutputState,
	}
}

func (o OperationsDefinitionDisplayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionDisplay) string { return v.Description }).(pulumi.StringOutput)
}

func (o OperationsDefinitionDisplayOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionDisplay) string { return v.Operation }).(pulumi.StringOutput)
}

func (o OperationsDefinitionDisplayOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionDisplay) string { return v.Provider }).(pulumi.StringOutput)
}

func (o OperationsDefinitionDisplayOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionDisplay) string { return v.Resource }).(pulumi.StringOutput)
}

// Display information of the operation.
type OperationsDefinitionResponseDisplay struct {
	Description string `pulumi:"description"`
	Operation   string `pulumi:"operation"`
	Provider    string `pulumi:"provider"`
	Resource    string `pulumi:"resource"`
}

// Display information of the operation.
type OperationsDefinitionResponseDisplayOutput struct{ *pulumi.OutputState }

func (OperationsDefinitionResponseDisplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationsDefinitionResponseDisplay)(nil)).Elem()
}

func (o OperationsDefinitionResponseDisplayOutput) ToOperationsDefinitionResponseDisplayOutput() OperationsDefinitionResponseDisplayOutput {
	return o
}

func (o OperationsDefinitionResponseDisplayOutput) ToOperationsDefinitionResponseDisplayOutputWithContext(ctx context.Context) OperationsDefinitionResponseDisplayOutput {
	return o
}

func (o OperationsDefinitionResponseDisplayOutput) ToOutput(ctx context.Context) pulumix.Output[OperationsDefinitionResponseDisplay] {
	return pulumix.Output[OperationsDefinitionResponseDisplay]{
		OutputState: o.OutputState,
	}
}

func (o OperationsDefinitionResponseDisplayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionResponseDisplay) string { return v.Description }).(pulumi.StringOutput)
}

func (o OperationsDefinitionResponseDisplayOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionResponseDisplay) string { return v.Operation }).(pulumi.StringOutput)
}

func (o OperationsDefinitionResponseDisplayOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionResponseDisplay) string { return v.Provider }).(pulumi.StringOutput)
}

func (o OperationsDefinitionResponseDisplayOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v OperationsDefinitionResponseDisplay) string { return v.Resource }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(OperationsDefinitionOutput{})
	pulumi.RegisterOutputType(OperationsDefinitionArrayOutput{})
	pulumi.RegisterOutputType(OperationsDefinitionDisplayOutput{})
	pulumi.RegisterOutputType(OperationsDefinitionResponseDisplayOutput{})
}
