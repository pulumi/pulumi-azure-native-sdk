// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Memory profile of broker.
type BrokerMemoryProfile string

const (
	// Tiny memory profile.
	BrokerMemoryProfileTiny = BrokerMemoryProfile("tiny")
	// Low memory profile.
	BrokerMemoryProfileLow = BrokerMemoryProfile("low")
	// Medium memory profile.
	BrokerMemoryProfileMedium = BrokerMemoryProfile("medium")
	// High memory profile.
	BrokerMemoryProfileHigh = BrokerMemoryProfile("high")
)

func (BrokerMemoryProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMemoryProfile)(nil)).Elem()
}

func (e BrokerMemoryProfile) ToBrokerMemoryProfileOutput() BrokerMemoryProfileOutput {
	return pulumi.ToOutput(e).(BrokerMemoryProfileOutput)
}

func (e BrokerMemoryProfile) ToBrokerMemoryProfileOutputWithContext(ctx context.Context) BrokerMemoryProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BrokerMemoryProfileOutput)
}

func (e BrokerMemoryProfile) ToBrokerMemoryProfilePtrOutput() BrokerMemoryProfilePtrOutput {
	return e.ToBrokerMemoryProfilePtrOutputWithContext(context.Background())
}

func (e BrokerMemoryProfile) ToBrokerMemoryProfilePtrOutputWithContext(ctx context.Context) BrokerMemoryProfilePtrOutput {
	return BrokerMemoryProfile(e).ToBrokerMemoryProfileOutputWithContext(ctx).ToBrokerMemoryProfilePtrOutputWithContext(ctx)
}

func (e BrokerMemoryProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BrokerMemoryProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BrokerMemoryProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BrokerMemoryProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BrokerMemoryProfileOutput struct{ *pulumi.OutputState }

func (BrokerMemoryProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMemoryProfile)(nil)).Elem()
}

func (o BrokerMemoryProfileOutput) ToBrokerMemoryProfileOutput() BrokerMemoryProfileOutput {
	return o
}

func (o BrokerMemoryProfileOutput) ToBrokerMemoryProfileOutputWithContext(ctx context.Context) BrokerMemoryProfileOutput {
	return o
}

func (o BrokerMemoryProfileOutput) ToBrokerMemoryProfilePtrOutput() BrokerMemoryProfilePtrOutput {
	return o.ToBrokerMemoryProfilePtrOutputWithContext(context.Background())
}

func (o BrokerMemoryProfileOutput) ToBrokerMemoryProfilePtrOutputWithContext(ctx context.Context) BrokerMemoryProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerMemoryProfile) *BrokerMemoryProfile {
		return &v
	}).(BrokerMemoryProfilePtrOutput)
}

func (o BrokerMemoryProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BrokerMemoryProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BrokerMemoryProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BrokerMemoryProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BrokerMemoryProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BrokerMemoryProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BrokerMemoryProfilePtrOutput struct{ *pulumi.OutputState }

func (BrokerMemoryProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMemoryProfile)(nil)).Elem()
}

func (o BrokerMemoryProfilePtrOutput) ToBrokerMemoryProfilePtrOutput() BrokerMemoryProfilePtrOutput {
	return o
}

func (o BrokerMemoryProfilePtrOutput) ToBrokerMemoryProfilePtrOutputWithContext(ctx context.Context) BrokerMemoryProfilePtrOutput {
	return o
}

func (o BrokerMemoryProfilePtrOutput) Elem() BrokerMemoryProfileOutput {
	return o.ApplyT(func(v *BrokerMemoryProfile) BrokerMemoryProfile {
		if v != nil {
			return *v
		}
		var ret BrokerMemoryProfile
		return ret
	}).(BrokerMemoryProfileOutput)
}

func (o BrokerMemoryProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BrokerMemoryProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BrokerMemoryProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BrokerMemoryProfileInput is an input type that accepts values of the BrokerMemoryProfile enum
// A concrete instance of `BrokerMemoryProfileInput` can be one of the following:
//
//	BrokerMemoryProfileTiny
//	BrokerMemoryProfileLow
//	BrokerMemoryProfileMedium
//	BrokerMemoryProfileHigh
type BrokerMemoryProfileInput interface {
	pulumi.Input

	ToBrokerMemoryProfileOutput() BrokerMemoryProfileOutput
	ToBrokerMemoryProfileOutputWithContext(context.Context) BrokerMemoryProfileOutput
}

var brokerMemoryProfilePtrType = reflect.TypeOf((**BrokerMemoryProfile)(nil)).Elem()

type BrokerMemoryProfilePtrInput interface {
	pulumi.Input

	ToBrokerMemoryProfilePtrOutput() BrokerMemoryProfilePtrOutput
	ToBrokerMemoryProfilePtrOutputWithContext(context.Context) BrokerMemoryProfilePtrOutput
}

type brokerMemoryProfilePtr string

func BrokerMemoryProfilePtr(v string) BrokerMemoryProfilePtrInput {
	return (*brokerMemoryProfilePtr)(&v)
}

func (*brokerMemoryProfilePtr) ElementType() reflect.Type {
	return brokerMemoryProfilePtrType
}

func (in *brokerMemoryProfilePtr) ToBrokerMemoryProfilePtrOutput() BrokerMemoryProfilePtrOutput {
	return pulumi.ToOutput(in).(BrokerMemoryProfilePtrOutput)
}

func (in *brokerMemoryProfilePtr) ToBrokerMemoryProfilePtrOutputWithContext(ctx context.Context) BrokerMemoryProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BrokerMemoryProfilePtrOutput)
}

// DataLake database format to use.
type DataLakeDatabaseFormat string

const (
	// Delta format.
	DataLakeDatabaseFormatDelta = DataLakeDatabaseFormat("delta")
	// Parquet format.
	DataLakeDatabaseFormatParquet = DataLakeDatabaseFormat("parquet")
)

func (DataLakeDatabaseFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeDatabaseFormat)(nil)).Elem()
}

func (e DataLakeDatabaseFormat) ToDataLakeDatabaseFormatOutput() DataLakeDatabaseFormatOutput {
	return pulumi.ToOutput(e).(DataLakeDatabaseFormatOutput)
}

func (e DataLakeDatabaseFormat) ToDataLakeDatabaseFormatOutputWithContext(ctx context.Context) DataLakeDatabaseFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataLakeDatabaseFormatOutput)
}

func (e DataLakeDatabaseFormat) ToDataLakeDatabaseFormatPtrOutput() DataLakeDatabaseFormatPtrOutput {
	return e.ToDataLakeDatabaseFormatPtrOutputWithContext(context.Background())
}

func (e DataLakeDatabaseFormat) ToDataLakeDatabaseFormatPtrOutputWithContext(ctx context.Context) DataLakeDatabaseFormatPtrOutput {
	return DataLakeDatabaseFormat(e).ToDataLakeDatabaseFormatOutputWithContext(ctx).ToDataLakeDatabaseFormatPtrOutputWithContext(ctx)
}

func (e DataLakeDatabaseFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataLakeDatabaseFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataLakeDatabaseFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataLakeDatabaseFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataLakeDatabaseFormatOutput struct{ *pulumi.OutputState }

func (DataLakeDatabaseFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeDatabaseFormat)(nil)).Elem()
}

func (o DataLakeDatabaseFormatOutput) ToDataLakeDatabaseFormatOutput() DataLakeDatabaseFormatOutput {
	return o
}

func (o DataLakeDatabaseFormatOutput) ToDataLakeDatabaseFormatOutputWithContext(ctx context.Context) DataLakeDatabaseFormatOutput {
	return o
}

func (o DataLakeDatabaseFormatOutput) ToDataLakeDatabaseFormatPtrOutput() DataLakeDatabaseFormatPtrOutput {
	return o.ToDataLakeDatabaseFormatPtrOutputWithContext(context.Background())
}

func (o DataLakeDatabaseFormatOutput) ToDataLakeDatabaseFormatPtrOutputWithContext(ctx context.Context) DataLakeDatabaseFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeDatabaseFormat) *DataLakeDatabaseFormat {
		return &v
	}).(DataLakeDatabaseFormatPtrOutput)
}

func (o DataLakeDatabaseFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataLakeDatabaseFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataLakeDatabaseFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataLakeDatabaseFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataLakeDatabaseFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataLakeDatabaseFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataLakeDatabaseFormatPtrOutput struct{ *pulumi.OutputState }

func (DataLakeDatabaseFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeDatabaseFormat)(nil)).Elem()
}

func (o DataLakeDatabaseFormatPtrOutput) ToDataLakeDatabaseFormatPtrOutput() DataLakeDatabaseFormatPtrOutput {
	return o
}

func (o DataLakeDatabaseFormatPtrOutput) ToDataLakeDatabaseFormatPtrOutputWithContext(ctx context.Context) DataLakeDatabaseFormatPtrOutput {
	return o
}

func (o DataLakeDatabaseFormatPtrOutput) Elem() DataLakeDatabaseFormatOutput {
	return o.ApplyT(func(v *DataLakeDatabaseFormat) DataLakeDatabaseFormat {
		if v != nil {
			return *v
		}
		var ret DataLakeDatabaseFormat
		return ret
	}).(DataLakeDatabaseFormatOutput)
}

func (o DataLakeDatabaseFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataLakeDatabaseFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataLakeDatabaseFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataLakeDatabaseFormatInput is an input type that accepts values of the DataLakeDatabaseFormat enum
// A concrete instance of `DataLakeDatabaseFormatInput` can be one of the following:
//
//	DataLakeDatabaseFormatDelta
//	DataLakeDatabaseFormatParquet
type DataLakeDatabaseFormatInput interface {
	pulumi.Input

	ToDataLakeDatabaseFormatOutput() DataLakeDatabaseFormatOutput
	ToDataLakeDatabaseFormatOutputWithContext(context.Context) DataLakeDatabaseFormatOutput
}

var dataLakeDatabaseFormatPtrType = reflect.TypeOf((**DataLakeDatabaseFormat)(nil)).Elem()

type DataLakeDatabaseFormatPtrInput interface {
	pulumi.Input

	ToDataLakeDatabaseFormatPtrOutput() DataLakeDatabaseFormatPtrOutput
	ToDataLakeDatabaseFormatPtrOutputWithContext(context.Context) DataLakeDatabaseFormatPtrOutput
}

type dataLakeDatabaseFormatPtr string

func DataLakeDatabaseFormatPtr(v string) DataLakeDatabaseFormatPtrInput {
	return (*dataLakeDatabaseFormatPtr)(&v)
}

func (*dataLakeDatabaseFormatPtr) ElementType() reflect.Type {
	return dataLakeDatabaseFormatPtrType
}

func (in *dataLakeDatabaseFormatPtr) ToDataLakeDatabaseFormatPtrOutput() DataLakeDatabaseFormatPtrOutput {
	return pulumi.ToOutput(in).(DataLakeDatabaseFormatPtrOutput)
}

func (in *dataLakeDatabaseFormatPtr) ToDataLakeDatabaseFormatPtrOutputWithContext(ctx context.Context) DataLakeDatabaseFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataLakeDatabaseFormatPtrOutput)
}

// Delta table format supported.
type DeltaTableFormatEnum string

const (
	// Bool format
	DeltaTableFormatEnumBoolean = DeltaTableFormatEnum("boolean")
	// Signed integer 8
	DeltaTableFormatEnumInt8 = DeltaTableFormatEnum("int8")
	// Signed integer 16
	DeltaTableFormatEnumInt16 = DeltaTableFormatEnum("int16")
	// Signed integer 32
	DeltaTableFormatEnumInt32 = DeltaTableFormatEnum("int32")
	// Unsigned integer 8
	DeltaTableFormatEnumUInt8 = DeltaTableFormatEnum("uInt8")
	// Unsigned integer 16
	DeltaTableFormatEnumUInt16 = DeltaTableFormatEnum("uInt16")
	// Unsigned integer 32
	DeltaTableFormatEnumUInt32 = DeltaTableFormatEnum("uInt32")
	// Unsigned integer 64
	DeltaTableFormatEnumUInt64 = DeltaTableFormatEnum("uInt64")
	// Float 16
	DeltaTableFormatEnumFloat16 = DeltaTableFormatEnum("float16")
	// Float 32
	DeltaTableFormatEnumFloat32 = DeltaTableFormatEnum("float32")
	// Float 64
	DeltaTableFormatEnumFloat64 = DeltaTableFormatEnum("float64")
	// Date 32
	DeltaTableFormatEnumDate32 = DeltaTableFormatEnum("date32")
	// Date 64
	DeltaTableFormatEnumDate64 = DeltaTableFormatEnum("date64")
	// Binary data
	DeltaTableFormatEnumBinary = DeltaTableFormatEnum("binary")
	// UTF8 format
	DeltaTableFormatEnumUtf8 = DeltaTableFormatEnum("utf8")
)

func (DeltaTableFormatEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTableFormatEnum)(nil)).Elem()
}

func (e DeltaTableFormatEnum) ToDeltaTableFormatEnumOutput() DeltaTableFormatEnumOutput {
	return pulumi.ToOutput(e).(DeltaTableFormatEnumOutput)
}

func (e DeltaTableFormatEnum) ToDeltaTableFormatEnumOutputWithContext(ctx context.Context) DeltaTableFormatEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeltaTableFormatEnumOutput)
}

func (e DeltaTableFormatEnum) ToDeltaTableFormatEnumPtrOutput() DeltaTableFormatEnumPtrOutput {
	return e.ToDeltaTableFormatEnumPtrOutputWithContext(context.Background())
}

func (e DeltaTableFormatEnum) ToDeltaTableFormatEnumPtrOutputWithContext(ctx context.Context) DeltaTableFormatEnumPtrOutput {
	return DeltaTableFormatEnum(e).ToDeltaTableFormatEnumOutputWithContext(ctx).ToDeltaTableFormatEnumPtrOutputWithContext(ctx)
}

func (e DeltaTableFormatEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeltaTableFormatEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeltaTableFormatEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeltaTableFormatEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeltaTableFormatEnumOutput struct{ *pulumi.OutputState }

func (DeltaTableFormatEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTableFormatEnum)(nil)).Elem()
}

func (o DeltaTableFormatEnumOutput) ToDeltaTableFormatEnumOutput() DeltaTableFormatEnumOutput {
	return o
}

func (o DeltaTableFormatEnumOutput) ToDeltaTableFormatEnumOutputWithContext(ctx context.Context) DeltaTableFormatEnumOutput {
	return o
}

func (o DeltaTableFormatEnumOutput) ToDeltaTableFormatEnumPtrOutput() DeltaTableFormatEnumPtrOutput {
	return o.ToDeltaTableFormatEnumPtrOutputWithContext(context.Background())
}

func (o DeltaTableFormatEnumOutput) ToDeltaTableFormatEnumPtrOutputWithContext(ctx context.Context) DeltaTableFormatEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeltaTableFormatEnum) *DeltaTableFormatEnum {
		return &v
	}).(DeltaTableFormatEnumPtrOutput)
}

func (o DeltaTableFormatEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeltaTableFormatEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeltaTableFormatEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeltaTableFormatEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeltaTableFormatEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeltaTableFormatEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeltaTableFormatEnumPtrOutput struct{ *pulumi.OutputState }

func (DeltaTableFormatEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeltaTableFormatEnum)(nil)).Elem()
}

func (o DeltaTableFormatEnumPtrOutput) ToDeltaTableFormatEnumPtrOutput() DeltaTableFormatEnumPtrOutput {
	return o
}

func (o DeltaTableFormatEnumPtrOutput) ToDeltaTableFormatEnumPtrOutputWithContext(ctx context.Context) DeltaTableFormatEnumPtrOutput {
	return o
}

func (o DeltaTableFormatEnumPtrOutput) Elem() DeltaTableFormatEnumOutput {
	return o.ApplyT(func(v *DeltaTableFormatEnum) DeltaTableFormatEnum {
		if v != nil {
			return *v
		}
		var ret DeltaTableFormatEnum
		return ret
	}).(DeltaTableFormatEnumOutput)
}

func (o DeltaTableFormatEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeltaTableFormatEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeltaTableFormatEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DeltaTableFormatEnumInput is an input type that accepts values of the DeltaTableFormatEnum enum
// A concrete instance of `DeltaTableFormatEnumInput` can be one of the following:
//
//	DeltaTableFormatEnumBoolean
//	DeltaTableFormatEnumInt8
//	DeltaTableFormatEnumInt16
//	DeltaTableFormatEnumInt32
//	DeltaTableFormatEnumUInt8
//	DeltaTableFormatEnumUInt16
//	DeltaTableFormatEnumUInt32
//	DeltaTableFormatEnumUInt64
//	DeltaTableFormatEnumFloat16
//	DeltaTableFormatEnumFloat32
//	DeltaTableFormatEnumFloat64
//	DeltaTableFormatEnumDate32
//	DeltaTableFormatEnumDate64
//	DeltaTableFormatEnumBinary
//	DeltaTableFormatEnumUtf8
type DeltaTableFormatEnumInput interface {
	pulumi.Input

	ToDeltaTableFormatEnumOutput() DeltaTableFormatEnumOutput
	ToDeltaTableFormatEnumOutputWithContext(context.Context) DeltaTableFormatEnumOutput
}

var deltaTableFormatEnumPtrType = reflect.TypeOf((**DeltaTableFormatEnum)(nil)).Elem()

type DeltaTableFormatEnumPtrInput interface {
	pulumi.Input

	ToDeltaTableFormatEnumPtrOutput() DeltaTableFormatEnumPtrOutput
	ToDeltaTableFormatEnumPtrOutputWithContext(context.Context) DeltaTableFormatEnumPtrOutput
}

type deltaTableFormatEnumPtr string

func DeltaTableFormatEnumPtr(v string) DeltaTableFormatEnumPtrInput {
	return (*deltaTableFormatEnumPtr)(&v)
}

func (*deltaTableFormatEnumPtr) ElementType() reflect.Type {
	return deltaTableFormatEnumPtrType
}

func (in *deltaTableFormatEnumPtr) ToDeltaTableFormatEnumPtrOutput() DeltaTableFormatEnumPtrOutput {
	return pulumi.ToOutput(in).(DeltaTableFormatEnumPtrOutput)
}

func (in *deltaTableFormatEnumPtr) ToDeltaTableFormatEnumPtrOutputWithContext(ctx context.Context) DeltaTableFormatEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeltaTableFormatEnumPtrOutput)
}

// Type of ExtendedLocation.
type ExtendedLocationType string

const (
	// CustomLocation type
	ExtendedLocationTypeCustomLocation = ExtendedLocationType("CustomLocation")
)

func (ExtendedLocationType) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationType)(nil)).Elem()
}

func (e ExtendedLocationType) ToExtendedLocationTypeOutput() ExtendedLocationTypeOutput {
	return pulumi.ToOutput(e).(ExtendedLocationTypeOutput)
}

func (e ExtendedLocationType) ToExtendedLocationTypeOutputWithContext(ctx context.Context) ExtendedLocationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExtendedLocationTypeOutput)
}

func (e ExtendedLocationType) ToExtendedLocationTypePtrOutput() ExtendedLocationTypePtrOutput {
	return e.ToExtendedLocationTypePtrOutputWithContext(context.Background())
}

func (e ExtendedLocationType) ToExtendedLocationTypePtrOutputWithContext(ctx context.Context) ExtendedLocationTypePtrOutput {
	return ExtendedLocationType(e).ToExtendedLocationTypeOutputWithContext(ctx).ToExtendedLocationTypePtrOutputWithContext(ctx)
}

func (e ExtendedLocationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExtendedLocationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExtendedLocationTypeOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationType)(nil)).Elem()
}

func (o ExtendedLocationTypeOutput) ToExtendedLocationTypeOutput() ExtendedLocationTypeOutput {
	return o
}

func (o ExtendedLocationTypeOutput) ToExtendedLocationTypeOutputWithContext(ctx context.Context) ExtendedLocationTypeOutput {
	return o
}

func (o ExtendedLocationTypeOutput) ToExtendedLocationTypePtrOutput() ExtendedLocationTypePtrOutput {
	return o.ToExtendedLocationTypePtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypeOutput) ToExtendedLocationTypePtrOutputWithContext(ctx context.Context) ExtendedLocationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocationType) *ExtendedLocationType {
		return &v
	}).(ExtendedLocationTypePtrOutput)
}

func (o ExtendedLocationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExtendedLocationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExtendedLocationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExtendedLocationTypePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationType)(nil)).Elem()
}

func (o ExtendedLocationTypePtrOutput) ToExtendedLocationTypePtrOutput() ExtendedLocationTypePtrOutput {
	return o
}

func (o ExtendedLocationTypePtrOutput) ToExtendedLocationTypePtrOutputWithContext(ctx context.Context) ExtendedLocationTypePtrOutput {
	return o
}

func (o ExtendedLocationTypePtrOutput) Elem() ExtendedLocationTypeOutput {
	return o.ApplyT(func(v *ExtendedLocationType) ExtendedLocationType {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationType
		return ret
	}).(ExtendedLocationTypeOutput)
}

func (o ExtendedLocationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExtendedLocationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExtendedLocationTypeInput is an input type that accepts values of the ExtendedLocationType enum
// A concrete instance of `ExtendedLocationTypeInput` can be one of the following:
//
//	ExtendedLocationTypeCustomLocation
type ExtendedLocationTypeInput interface {
	pulumi.Input

	ToExtendedLocationTypeOutput() ExtendedLocationTypeOutput
	ToExtendedLocationTypeOutputWithContext(context.Context) ExtendedLocationTypeOutput
}

var extendedLocationTypePtrType = reflect.TypeOf((**ExtendedLocationType)(nil)).Elem()

type ExtendedLocationTypePtrInput interface {
	pulumi.Input

	ToExtendedLocationTypePtrOutput() ExtendedLocationTypePtrOutput
	ToExtendedLocationTypePtrOutputWithContext(context.Context) ExtendedLocationTypePtrOutput
}

type extendedLocationTypePtr string

func ExtendedLocationTypePtr(v string) ExtendedLocationTypePtrInput {
	return (*extendedLocationTypePtr)(&v)
}

func (*extendedLocationTypePtr) ElementType() reflect.Type {
	return extendedLocationTypePtrType
}

func (in *extendedLocationTypePtr) ToExtendedLocationTypePtrOutput() ExtendedLocationTypePtrOutput {
	return pulumi.ToOutput(in).(ExtendedLocationTypePtrOutput)
}

func (in *extendedLocationTypePtr) ToExtendedLocationTypePtrOutputWithContext(ctx context.Context) ExtendedLocationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExtendedLocationTypePtrOutput)
}

// Fabric path type to use.
type FabricPathType string

const (
	// Fabric path type is Files.
	FabricPathTypeFiles = FabricPathType("files")
	// Fabric path type is Tables.
	FabricPathTypeTables = FabricPathType("tables")
)

func (FabricPathType) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricPathType)(nil)).Elem()
}

func (e FabricPathType) ToFabricPathTypeOutput() FabricPathTypeOutput {
	return pulumi.ToOutput(e).(FabricPathTypeOutput)
}

func (e FabricPathType) ToFabricPathTypeOutputWithContext(ctx context.Context) FabricPathTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FabricPathTypeOutput)
}

func (e FabricPathType) ToFabricPathTypePtrOutput() FabricPathTypePtrOutput {
	return e.ToFabricPathTypePtrOutputWithContext(context.Background())
}

func (e FabricPathType) ToFabricPathTypePtrOutputWithContext(ctx context.Context) FabricPathTypePtrOutput {
	return FabricPathType(e).ToFabricPathTypeOutputWithContext(ctx).ToFabricPathTypePtrOutputWithContext(ctx)
}

func (e FabricPathType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FabricPathType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FabricPathType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FabricPathType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FabricPathTypeOutput struct{ *pulumi.OutputState }

func (FabricPathTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricPathType)(nil)).Elem()
}

func (o FabricPathTypeOutput) ToFabricPathTypeOutput() FabricPathTypeOutput {
	return o
}

func (o FabricPathTypeOutput) ToFabricPathTypeOutputWithContext(ctx context.Context) FabricPathTypeOutput {
	return o
}

func (o FabricPathTypeOutput) ToFabricPathTypePtrOutput() FabricPathTypePtrOutput {
	return o.ToFabricPathTypePtrOutputWithContext(context.Background())
}

func (o FabricPathTypeOutput) ToFabricPathTypePtrOutputWithContext(ctx context.Context) FabricPathTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FabricPathType) *FabricPathType {
		return &v
	}).(FabricPathTypePtrOutput)
}

func (o FabricPathTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FabricPathTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FabricPathType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FabricPathTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FabricPathTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FabricPathType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FabricPathTypePtrOutput struct{ *pulumi.OutputState }

func (FabricPathTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricPathType)(nil)).Elem()
}

func (o FabricPathTypePtrOutput) ToFabricPathTypePtrOutput() FabricPathTypePtrOutput {
	return o
}

func (o FabricPathTypePtrOutput) ToFabricPathTypePtrOutputWithContext(ctx context.Context) FabricPathTypePtrOutput {
	return o
}

func (o FabricPathTypePtrOutput) Elem() FabricPathTypeOutput {
	return o.ApplyT(func(v *FabricPathType) FabricPathType {
		if v != nil {
			return *v
		}
		var ret FabricPathType
		return ret
	}).(FabricPathTypeOutput)
}

func (o FabricPathTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FabricPathTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FabricPathType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FabricPathTypeInput is an input type that accepts values of the FabricPathType enum
// A concrete instance of `FabricPathTypeInput` can be one of the following:
//
//	FabricPathTypeFiles
//	FabricPathTypeTables
type FabricPathTypeInput interface {
	pulumi.Input

	ToFabricPathTypeOutput() FabricPathTypeOutput
	ToFabricPathTypeOutputWithContext(context.Context) FabricPathTypeOutput
}

var fabricPathTypePtrType = reflect.TypeOf((**FabricPathType)(nil)).Elem()

type FabricPathTypePtrInput interface {
	pulumi.Input

	ToFabricPathTypePtrOutput() FabricPathTypePtrOutput
	ToFabricPathTypePtrOutputWithContext(context.Context) FabricPathTypePtrOutput
}

type fabricPathTypePtr string

func FabricPathTypePtr(v string) FabricPathTypePtrInput {
	return (*fabricPathTypePtr)(&v)
}

func (*fabricPathTypePtr) ElementType() reflect.Type {
	return fabricPathTypePtrType
}

func (in *fabricPathTypePtr) ToFabricPathTypePtrOutput() FabricPathTypePtrOutput {
	return pulumi.ToOutput(in).(FabricPathTypePtrOutput)
}

func (in *fabricPathTypePtr) ToFabricPathTypePtrOutputWithContext(ctx context.Context) FabricPathTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FabricPathTypePtrOutput)
}

// The kafka acks to use.
type KafkaAcks string

const (
	// Kafka acks zero.
	KafkaAcksZero = KafkaAcks("zero")
	// Kafka acks one.
	KafkaAcksOne = KafkaAcks("one")
	// Kafka acks all.
	KafkaAcksAll = KafkaAcks("all")
)

func (KafkaAcks) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaAcks)(nil)).Elem()
}

func (e KafkaAcks) ToKafkaAcksOutput() KafkaAcksOutput {
	return pulumi.ToOutput(e).(KafkaAcksOutput)
}

func (e KafkaAcks) ToKafkaAcksOutputWithContext(ctx context.Context) KafkaAcksOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KafkaAcksOutput)
}

func (e KafkaAcks) ToKafkaAcksPtrOutput() KafkaAcksPtrOutput {
	return e.ToKafkaAcksPtrOutputWithContext(context.Background())
}

func (e KafkaAcks) ToKafkaAcksPtrOutputWithContext(ctx context.Context) KafkaAcksPtrOutput {
	return KafkaAcks(e).ToKafkaAcksOutputWithContext(ctx).ToKafkaAcksPtrOutputWithContext(ctx)
}

func (e KafkaAcks) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaAcks) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaAcks) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KafkaAcks) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KafkaAcksOutput struct{ *pulumi.OutputState }

func (KafkaAcksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaAcks)(nil)).Elem()
}

func (o KafkaAcksOutput) ToKafkaAcksOutput() KafkaAcksOutput {
	return o
}

func (o KafkaAcksOutput) ToKafkaAcksOutputWithContext(ctx context.Context) KafkaAcksOutput {
	return o
}

func (o KafkaAcksOutput) ToKafkaAcksPtrOutput() KafkaAcksPtrOutput {
	return o.ToKafkaAcksPtrOutputWithContext(context.Background())
}

func (o KafkaAcksOutput) ToKafkaAcksPtrOutputWithContext(ctx context.Context) KafkaAcksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaAcks) *KafkaAcks {
		return &v
	}).(KafkaAcksPtrOutput)
}

func (o KafkaAcksOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KafkaAcksOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaAcks) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KafkaAcksOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaAcksOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaAcks) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KafkaAcksPtrOutput struct{ *pulumi.OutputState }

func (KafkaAcksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAcks)(nil)).Elem()
}

func (o KafkaAcksPtrOutput) ToKafkaAcksPtrOutput() KafkaAcksPtrOutput {
	return o
}

func (o KafkaAcksPtrOutput) ToKafkaAcksPtrOutputWithContext(ctx context.Context) KafkaAcksPtrOutput {
	return o
}

func (o KafkaAcksPtrOutput) Elem() KafkaAcksOutput {
	return o.ApplyT(func(v *KafkaAcks) KafkaAcks {
		if v != nil {
			return *v
		}
		var ret KafkaAcks
		return ret
	}).(KafkaAcksOutput)
}

func (o KafkaAcksPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaAcksPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KafkaAcks) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KafkaAcksInput is an input type that accepts values of the KafkaAcks enum
// A concrete instance of `KafkaAcksInput` can be one of the following:
//
//	KafkaAcksZero
//	KafkaAcksOne
//	KafkaAcksAll
type KafkaAcksInput interface {
	pulumi.Input

	ToKafkaAcksOutput() KafkaAcksOutput
	ToKafkaAcksOutputWithContext(context.Context) KafkaAcksOutput
}

var kafkaAcksPtrType = reflect.TypeOf((**KafkaAcks)(nil)).Elem()

type KafkaAcksPtrInput interface {
	pulumi.Input

	ToKafkaAcksPtrOutput() KafkaAcksPtrOutput
	ToKafkaAcksPtrOutputWithContext(context.Context) KafkaAcksPtrOutput
}

type kafkaAcksPtr string

func KafkaAcksPtr(v string) KafkaAcksPtrInput {
	return (*kafkaAcksPtr)(&v)
}

func (*kafkaAcksPtr) ElementType() reflect.Type {
	return kafkaAcksPtrType
}

func (in *kafkaAcksPtr) ToKafkaAcksPtrOutput() KafkaAcksPtrOutput {
	return pulumi.ToOutput(in).(KafkaAcksPtrOutput)
}

func (in *kafkaAcksPtr) ToKafkaAcksPtrOutputWithContext(ctx context.Context) KafkaAcksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KafkaAcksPtrOutput)
}

// The compression to use for kafka messages.
type KafkaMessageCompressionType string

const (
	// No Kafka message compression.
	KafkaMessageCompressionTypeNone = KafkaMessageCompressionType("none")
	// Gzip Kafka message compression.
	KafkaMessageCompressionTypeGzip = KafkaMessageCompressionType("gzip")
	// Snappy Kafka message compression.
	KafkaMessageCompressionTypeSnappy = KafkaMessageCompressionType("snappy")
	// Lz4 Kafka message compression.
	KafkaMessageCompressionTypeLz4 = KafkaMessageCompressionType("lz4")
)

func (KafkaMessageCompressionType) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMessageCompressionType)(nil)).Elem()
}

func (e KafkaMessageCompressionType) ToKafkaMessageCompressionTypeOutput() KafkaMessageCompressionTypeOutput {
	return pulumi.ToOutput(e).(KafkaMessageCompressionTypeOutput)
}

func (e KafkaMessageCompressionType) ToKafkaMessageCompressionTypeOutputWithContext(ctx context.Context) KafkaMessageCompressionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KafkaMessageCompressionTypeOutput)
}

func (e KafkaMessageCompressionType) ToKafkaMessageCompressionTypePtrOutput() KafkaMessageCompressionTypePtrOutput {
	return e.ToKafkaMessageCompressionTypePtrOutputWithContext(context.Background())
}

func (e KafkaMessageCompressionType) ToKafkaMessageCompressionTypePtrOutputWithContext(ctx context.Context) KafkaMessageCompressionTypePtrOutput {
	return KafkaMessageCompressionType(e).ToKafkaMessageCompressionTypeOutputWithContext(ctx).ToKafkaMessageCompressionTypePtrOutputWithContext(ctx)
}

func (e KafkaMessageCompressionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaMessageCompressionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaMessageCompressionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KafkaMessageCompressionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KafkaMessageCompressionTypeOutput struct{ *pulumi.OutputState }

func (KafkaMessageCompressionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaMessageCompressionType)(nil)).Elem()
}

func (o KafkaMessageCompressionTypeOutput) ToKafkaMessageCompressionTypeOutput() KafkaMessageCompressionTypeOutput {
	return o
}

func (o KafkaMessageCompressionTypeOutput) ToKafkaMessageCompressionTypeOutputWithContext(ctx context.Context) KafkaMessageCompressionTypeOutput {
	return o
}

func (o KafkaMessageCompressionTypeOutput) ToKafkaMessageCompressionTypePtrOutput() KafkaMessageCompressionTypePtrOutput {
	return o.ToKafkaMessageCompressionTypePtrOutputWithContext(context.Background())
}

func (o KafkaMessageCompressionTypeOutput) ToKafkaMessageCompressionTypePtrOutputWithContext(ctx context.Context) KafkaMessageCompressionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaMessageCompressionType) *KafkaMessageCompressionType {
		return &v
	}).(KafkaMessageCompressionTypePtrOutput)
}

func (o KafkaMessageCompressionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KafkaMessageCompressionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaMessageCompressionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KafkaMessageCompressionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaMessageCompressionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaMessageCompressionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KafkaMessageCompressionTypePtrOutput struct{ *pulumi.OutputState }

func (KafkaMessageCompressionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMessageCompressionType)(nil)).Elem()
}

func (o KafkaMessageCompressionTypePtrOutput) ToKafkaMessageCompressionTypePtrOutput() KafkaMessageCompressionTypePtrOutput {
	return o
}

func (o KafkaMessageCompressionTypePtrOutput) ToKafkaMessageCompressionTypePtrOutputWithContext(ctx context.Context) KafkaMessageCompressionTypePtrOutput {
	return o
}

func (o KafkaMessageCompressionTypePtrOutput) Elem() KafkaMessageCompressionTypeOutput {
	return o.ApplyT(func(v *KafkaMessageCompressionType) KafkaMessageCompressionType {
		if v != nil {
			return *v
		}
		var ret KafkaMessageCompressionType
		return ret
	}).(KafkaMessageCompressionTypeOutput)
}

func (o KafkaMessageCompressionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaMessageCompressionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KafkaMessageCompressionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KafkaMessageCompressionTypeInput is an input type that accepts values of the KafkaMessageCompressionType enum
// A concrete instance of `KafkaMessageCompressionTypeInput` can be one of the following:
//
//	KafkaMessageCompressionTypeNone
//	KafkaMessageCompressionTypeGzip
//	KafkaMessageCompressionTypeSnappy
//	KafkaMessageCompressionTypeLz4
type KafkaMessageCompressionTypeInput interface {
	pulumi.Input

	ToKafkaMessageCompressionTypeOutput() KafkaMessageCompressionTypeOutput
	ToKafkaMessageCompressionTypeOutputWithContext(context.Context) KafkaMessageCompressionTypeOutput
}

var kafkaMessageCompressionTypePtrType = reflect.TypeOf((**KafkaMessageCompressionType)(nil)).Elem()

type KafkaMessageCompressionTypePtrInput interface {
	pulumi.Input

	ToKafkaMessageCompressionTypePtrOutput() KafkaMessageCompressionTypePtrOutput
	ToKafkaMessageCompressionTypePtrOutputWithContext(context.Context) KafkaMessageCompressionTypePtrOutput
}

type kafkaMessageCompressionTypePtr string

func KafkaMessageCompressionTypePtr(v string) KafkaMessageCompressionTypePtrInput {
	return (*kafkaMessageCompressionTypePtr)(&v)
}

func (*kafkaMessageCompressionTypePtr) ElementType() reflect.Type {
	return kafkaMessageCompressionTypePtrType
}

func (in *kafkaMessageCompressionTypePtr) ToKafkaMessageCompressionTypePtrOutput() KafkaMessageCompressionTypePtrOutput {
	return pulumi.ToOutput(in).(KafkaMessageCompressionTypePtrOutput)
}

func (in *kafkaMessageCompressionTypePtr) ToKafkaMessageCompressionTypePtrOutputWithContext(ctx context.Context) KafkaMessageCompressionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KafkaMessageCompressionTypePtrOutput)
}

// The partition strategy to use for Kafka.
type KafkaPartitionStrategy string

const (
	// Default partition strategy.
	KafkaPartitionStrategyDefault = KafkaPartitionStrategy("default")
	// Static partition strategy.
	KafkaPartitionStrategyStatic = KafkaPartitionStrategy("static")
	// Topic partition strategy.
	KafkaPartitionStrategyTopic = KafkaPartitionStrategy("topic")
	// Property partition strategy.
	KafkaPartitionStrategyProperty = KafkaPartitionStrategy("property")
)

func (KafkaPartitionStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaPartitionStrategy)(nil)).Elem()
}

func (e KafkaPartitionStrategy) ToKafkaPartitionStrategyOutput() KafkaPartitionStrategyOutput {
	return pulumi.ToOutput(e).(KafkaPartitionStrategyOutput)
}

func (e KafkaPartitionStrategy) ToKafkaPartitionStrategyOutputWithContext(ctx context.Context) KafkaPartitionStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KafkaPartitionStrategyOutput)
}

func (e KafkaPartitionStrategy) ToKafkaPartitionStrategyPtrOutput() KafkaPartitionStrategyPtrOutput {
	return e.ToKafkaPartitionStrategyPtrOutputWithContext(context.Background())
}

func (e KafkaPartitionStrategy) ToKafkaPartitionStrategyPtrOutputWithContext(ctx context.Context) KafkaPartitionStrategyPtrOutput {
	return KafkaPartitionStrategy(e).ToKafkaPartitionStrategyOutputWithContext(ctx).ToKafkaPartitionStrategyPtrOutputWithContext(ctx)
}

func (e KafkaPartitionStrategy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaPartitionStrategy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaPartitionStrategy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KafkaPartitionStrategy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KafkaPartitionStrategyOutput struct{ *pulumi.OutputState }

func (KafkaPartitionStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaPartitionStrategy)(nil)).Elem()
}

func (o KafkaPartitionStrategyOutput) ToKafkaPartitionStrategyOutput() KafkaPartitionStrategyOutput {
	return o
}

func (o KafkaPartitionStrategyOutput) ToKafkaPartitionStrategyOutputWithContext(ctx context.Context) KafkaPartitionStrategyOutput {
	return o
}

func (o KafkaPartitionStrategyOutput) ToKafkaPartitionStrategyPtrOutput() KafkaPartitionStrategyPtrOutput {
	return o.ToKafkaPartitionStrategyPtrOutputWithContext(context.Background())
}

func (o KafkaPartitionStrategyOutput) ToKafkaPartitionStrategyPtrOutputWithContext(ctx context.Context) KafkaPartitionStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaPartitionStrategy) *KafkaPartitionStrategy {
		return &v
	}).(KafkaPartitionStrategyPtrOutput)
}

func (o KafkaPartitionStrategyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KafkaPartitionStrategyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaPartitionStrategy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KafkaPartitionStrategyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaPartitionStrategyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaPartitionStrategy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KafkaPartitionStrategyPtrOutput struct{ *pulumi.OutputState }

func (KafkaPartitionStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaPartitionStrategy)(nil)).Elem()
}

func (o KafkaPartitionStrategyPtrOutput) ToKafkaPartitionStrategyPtrOutput() KafkaPartitionStrategyPtrOutput {
	return o
}

func (o KafkaPartitionStrategyPtrOutput) ToKafkaPartitionStrategyPtrOutputWithContext(ctx context.Context) KafkaPartitionStrategyPtrOutput {
	return o
}

func (o KafkaPartitionStrategyPtrOutput) Elem() KafkaPartitionStrategyOutput {
	return o.ApplyT(func(v *KafkaPartitionStrategy) KafkaPartitionStrategy {
		if v != nil {
			return *v
		}
		var ret KafkaPartitionStrategy
		return ret
	}).(KafkaPartitionStrategyOutput)
}

func (o KafkaPartitionStrategyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaPartitionStrategyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KafkaPartitionStrategy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KafkaPartitionStrategyInput is an input type that accepts values of the KafkaPartitionStrategy enum
// A concrete instance of `KafkaPartitionStrategyInput` can be one of the following:
//
//	KafkaPartitionStrategyDefault
//	KafkaPartitionStrategyStatic
//	KafkaPartitionStrategyTopic
//	KafkaPartitionStrategyProperty
type KafkaPartitionStrategyInput interface {
	pulumi.Input

	ToKafkaPartitionStrategyOutput() KafkaPartitionStrategyOutput
	ToKafkaPartitionStrategyOutputWithContext(context.Context) KafkaPartitionStrategyOutput
}

var kafkaPartitionStrategyPtrType = reflect.TypeOf((**KafkaPartitionStrategy)(nil)).Elem()

type KafkaPartitionStrategyPtrInput interface {
	pulumi.Input

	ToKafkaPartitionStrategyPtrOutput() KafkaPartitionStrategyPtrOutput
	ToKafkaPartitionStrategyPtrOutputWithContext(context.Context) KafkaPartitionStrategyPtrOutput
}

type kafkaPartitionStrategyPtr string

func KafkaPartitionStrategyPtr(v string) KafkaPartitionStrategyPtrInput {
	return (*kafkaPartitionStrategyPtr)(&v)
}

func (*kafkaPartitionStrategyPtr) ElementType() reflect.Type {
	return kafkaPartitionStrategyPtrType
}

func (in *kafkaPartitionStrategyPtr) ToKafkaPartitionStrategyPtrOutput() KafkaPartitionStrategyPtrOutput {
	return pulumi.ToOutput(in).(KafkaPartitionStrategyPtrOutput)
}

func (in *kafkaPartitionStrategyPtr) ToKafkaPartitionStrategyPtrOutputWithContext(ctx context.Context) KafkaPartitionStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KafkaPartitionStrategyPtrOutput)
}

// Sasl Mechanism for remote broker authentication.
type KafkaSaslType string

const (
	// Sasl Plain authentication.
	KafkaSaslTypePlain = KafkaSaslType("plain")
	// Sasl ScramSha256 authentication.
	KafkaSaslTypeScramSha256 = KafkaSaslType("scramSha256")
	// Sasl ScramSha512 authentication.
	KafkaSaslTypeScramSha512 = KafkaSaslType("scramSha512")
)

func (KafkaSaslType) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaSaslType)(nil)).Elem()
}

func (e KafkaSaslType) ToKafkaSaslTypeOutput() KafkaSaslTypeOutput {
	return pulumi.ToOutput(e).(KafkaSaslTypeOutput)
}

func (e KafkaSaslType) ToKafkaSaslTypeOutputWithContext(ctx context.Context) KafkaSaslTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KafkaSaslTypeOutput)
}

func (e KafkaSaslType) ToKafkaSaslTypePtrOutput() KafkaSaslTypePtrOutput {
	return e.ToKafkaSaslTypePtrOutputWithContext(context.Background())
}

func (e KafkaSaslType) ToKafkaSaslTypePtrOutputWithContext(ctx context.Context) KafkaSaslTypePtrOutput {
	return KafkaSaslType(e).ToKafkaSaslTypeOutputWithContext(ctx).ToKafkaSaslTypePtrOutputWithContext(ctx)
}

func (e KafkaSaslType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaSaslType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KafkaSaslType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KafkaSaslType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KafkaSaslTypeOutput struct{ *pulumi.OutputState }

func (KafkaSaslTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaSaslType)(nil)).Elem()
}

func (o KafkaSaslTypeOutput) ToKafkaSaslTypeOutput() KafkaSaslTypeOutput {
	return o
}

func (o KafkaSaslTypeOutput) ToKafkaSaslTypeOutputWithContext(ctx context.Context) KafkaSaslTypeOutput {
	return o
}

func (o KafkaSaslTypeOutput) ToKafkaSaslTypePtrOutput() KafkaSaslTypePtrOutput {
	return o.ToKafkaSaslTypePtrOutputWithContext(context.Background())
}

func (o KafkaSaslTypeOutput) ToKafkaSaslTypePtrOutputWithContext(ctx context.Context) KafkaSaslTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaSaslType) *KafkaSaslType {
		return &v
	}).(KafkaSaslTypePtrOutput)
}

func (o KafkaSaslTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KafkaSaslTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaSaslType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KafkaSaslTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaSaslTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KafkaSaslType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KafkaSaslTypePtrOutput struct{ *pulumi.OutputState }

func (KafkaSaslTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSaslType)(nil)).Elem()
}

func (o KafkaSaslTypePtrOutput) ToKafkaSaslTypePtrOutput() KafkaSaslTypePtrOutput {
	return o
}

func (o KafkaSaslTypePtrOutput) ToKafkaSaslTypePtrOutputWithContext(ctx context.Context) KafkaSaslTypePtrOutput {
	return o
}

func (o KafkaSaslTypePtrOutput) Elem() KafkaSaslTypeOutput {
	return o.ApplyT(func(v *KafkaSaslType) KafkaSaslType {
		if v != nil {
			return *v
		}
		var ret KafkaSaslType
		return ret
	}).(KafkaSaslTypeOutput)
}

func (o KafkaSaslTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KafkaSaslTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KafkaSaslType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KafkaSaslTypeInput is an input type that accepts values of the KafkaSaslType enum
// A concrete instance of `KafkaSaslTypeInput` can be one of the following:
//
//	KafkaSaslTypePlain
//	KafkaSaslTypeScramSha256
//	KafkaSaslTypeScramSha512
type KafkaSaslTypeInput interface {
	pulumi.Input

	ToKafkaSaslTypeOutput() KafkaSaslTypeOutput
	ToKafkaSaslTypeOutputWithContext(context.Context) KafkaSaslTypeOutput
}

var kafkaSaslTypePtrType = reflect.TypeOf((**KafkaSaslType)(nil)).Elem()

type KafkaSaslTypePtrInput interface {
	pulumi.Input

	ToKafkaSaslTypePtrOutput() KafkaSaslTypePtrOutput
	ToKafkaSaslTypePtrOutputWithContext(context.Context) KafkaSaslTypePtrOutput
}

type kafkaSaslTypePtr string

func KafkaSaslTypePtr(v string) KafkaSaslTypePtrInput {
	return (*kafkaSaslTypePtr)(&v)
}

func (*kafkaSaslTypePtr) ElementType() reflect.Type {
	return kafkaSaslTypePtrType
}

func (in *kafkaSaslTypePtr) ToKafkaSaslTypePtrOutput() KafkaSaslTypePtrOutput {
	return pulumi.ToOutput(in).(KafkaSaslTypePtrOutput)
}

func (in *kafkaSaslTypePtr) ToKafkaSaslTypePtrOutputWithContext(ctx context.Context) KafkaSaslTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KafkaSaslTypePtrOutput)
}

// Protocol for remote connection.
type MqttBridgeRemoteBrokerProtocol string

const (
	// MQTT protocol.
	MqttBridgeRemoteBrokerProtocolMqtt = MqttBridgeRemoteBrokerProtocol("mqtt")
	// MQTT over WebSocket protocol.
	MqttBridgeRemoteBrokerProtocolWebSocket = MqttBridgeRemoteBrokerProtocol("webSocket")
)

func (MqttBridgeRemoteBrokerProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerProtocol)(nil)).Elem()
}

func (e MqttBridgeRemoteBrokerProtocol) ToMqttBridgeRemoteBrokerProtocolOutput() MqttBridgeRemoteBrokerProtocolOutput {
	return pulumi.ToOutput(e).(MqttBridgeRemoteBrokerProtocolOutput)
}

func (e MqttBridgeRemoteBrokerProtocol) ToMqttBridgeRemoteBrokerProtocolOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MqttBridgeRemoteBrokerProtocolOutput)
}

func (e MqttBridgeRemoteBrokerProtocol) ToMqttBridgeRemoteBrokerProtocolPtrOutput() MqttBridgeRemoteBrokerProtocolPtrOutput {
	return e.ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(context.Background())
}

func (e MqttBridgeRemoteBrokerProtocol) ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerProtocolPtrOutput {
	return MqttBridgeRemoteBrokerProtocol(e).ToMqttBridgeRemoteBrokerProtocolOutputWithContext(ctx).ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(ctx)
}

func (e MqttBridgeRemoteBrokerProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttBridgeRemoteBrokerProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttBridgeRemoteBrokerProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MqttBridgeRemoteBrokerProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MqttBridgeRemoteBrokerProtocolOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerProtocol)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToMqttBridgeRemoteBrokerProtocolOutput() MqttBridgeRemoteBrokerProtocolOutput {
	return o
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToMqttBridgeRemoteBrokerProtocolOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerProtocolOutput {
	return o
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToMqttBridgeRemoteBrokerProtocolPtrOutput() MqttBridgeRemoteBrokerProtocolPtrOutput {
	return o.ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MqttBridgeRemoteBrokerProtocol) *MqttBridgeRemoteBrokerProtocol {
		return &v
	}).(MqttBridgeRemoteBrokerProtocolPtrOutput)
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MqttBridgeRemoteBrokerProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRemoteBrokerProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MqttBridgeRemoteBrokerProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MqttBridgeRemoteBrokerProtocolPtrOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRemoteBrokerProtocol)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerProtocolPtrOutput) ToMqttBridgeRemoteBrokerProtocolPtrOutput() MqttBridgeRemoteBrokerProtocolPtrOutput {
	return o
}

func (o MqttBridgeRemoteBrokerProtocolPtrOutput) ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerProtocolPtrOutput {
	return o
}

func (o MqttBridgeRemoteBrokerProtocolPtrOutput) Elem() MqttBridgeRemoteBrokerProtocolOutput {
	return o.ApplyT(func(v *MqttBridgeRemoteBrokerProtocol) MqttBridgeRemoteBrokerProtocol {
		if v != nil {
			return *v
		}
		var ret MqttBridgeRemoteBrokerProtocol
		return ret
	}).(MqttBridgeRemoteBrokerProtocolOutput)
}

func (o MqttBridgeRemoteBrokerProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRemoteBrokerProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MqttBridgeRemoteBrokerProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MqttBridgeRemoteBrokerProtocolInput is an input type that accepts values of the MqttBridgeRemoteBrokerProtocol enum
// A concrete instance of `MqttBridgeRemoteBrokerProtocolInput` can be one of the following:
//
//	MqttBridgeRemoteBrokerProtocolMqtt
//	MqttBridgeRemoteBrokerProtocolWebSocket
type MqttBridgeRemoteBrokerProtocolInput interface {
	pulumi.Input

	ToMqttBridgeRemoteBrokerProtocolOutput() MqttBridgeRemoteBrokerProtocolOutput
	ToMqttBridgeRemoteBrokerProtocolOutputWithContext(context.Context) MqttBridgeRemoteBrokerProtocolOutput
}

var mqttBridgeRemoteBrokerProtocolPtrType = reflect.TypeOf((**MqttBridgeRemoteBrokerProtocol)(nil)).Elem()

type MqttBridgeRemoteBrokerProtocolPtrInput interface {
	pulumi.Input

	ToMqttBridgeRemoteBrokerProtocolPtrOutput() MqttBridgeRemoteBrokerProtocolPtrOutput
	ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(context.Context) MqttBridgeRemoteBrokerProtocolPtrOutput
}

type mqttBridgeRemoteBrokerProtocolPtr string

func MqttBridgeRemoteBrokerProtocolPtr(v string) MqttBridgeRemoteBrokerProtocolPtrInput {
	return (*mqttBridgeRemoteBrokerProtocolPtr)(&v)
}

func (*mqttBridgeRemoteBrokerProtocolPtr) ElementType() reflect.Type {
	return mqttBridgeRemoteBrokerProtocolPtrType
}

func (in *mqttBridgeRemoteBrokerProtocolPtr) ToMqttBridgeRemoteBrokerProtocolPtrOutput() MqttBridgeRemoteBrokerProtocolPtrOutput {
	return pulumi.ToOutput(in).(MqttBridgeRemoteBrokerProtocolPtrOutput)
}

func (in *mqttBridgeRemoteBrokerProtocolPtr) ToMqttBridgeRemoteBrokerProtocolPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MqttBridgeRemoteBrokerProtocolPtrOutput)
}

// Direction of the route.
type MqttBridgeRouteDirection string

const (
	// Remote to Local Broker.
	MqttBridgeRouteDirectionRemoteToLocal = MqttBridgeRouteDirection("remote-to-local")
	// Local to Remote Broker.
	MqttBridgeRouteDirectionLocalToRemote = MqttBridgeRouteDirection("local-to-remote")
)

func (MqttBridgeRouteDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRouteDirection)(nil)).Elem()
}

func (e MqttBridgeRouteDirection) ToMqttBridgeRouteDirectionOutput() MqttBridgeRouteDirectionOutput {
	return pulumi.ToOutput(e).(MqttBridgeRouteDirectionOutput)
}

func (e MqttBridgeRouteDirection) ToMqttBridgeRouteDirectionOutputWithContext(ctx context.Context) MqttBridgeRouteDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MqttBridgeRouteDirectionOutput)
}

func (e MqttBridgeRouteDirection) ToMqttBridgeRouteDirectionPtrOutput() MqttBridgeRouteDirectionPtrOutput {
	return e.ToMqttBridgeRouteDirectionPtrOutputWithContext(context.Background())
}

func (e MqttBridgeRouteDirection) ToMqttBridgeRouteDirectionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteDirectionPtrOutput {
	return MqttBridgeRouteDirection(e).ToMqttBridgeRouteDirectionOutputWithContext(ctx).ToMqttBridgeRouteDirectionPtrOutputWithContext(ctx)
}

func (e MqttBridgeRouteDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttBridgeRouteDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttBridgeRouteDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MqttBridgeRouteDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MqttBridgeRouteDirectionOutput struct{ *pulumi.OutputState }

func (MqttBridgeRouteDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRouteDirection)(nil)).Elem()
}

func (o MqttBridgeRouteDirectionOutput) ToMqttBridgeRouteDirectionOutput() MqttBridgeRouteDirectionOutput {
	return o
}

func (o MqttBridgeRouteDirectionOutput) ToMqttBridgeRouteDirectionOutputWithContext(ctx context.Context) MqttBridgeRouteDirectionOutput {
	return o
}

func (o MqttBridgeRouteDirectionOutput) ToMqttBridgeRouteDirectionPtrOutput() MqttBridgeRouteDirectionPtrOutput {
	return o.ToMqttBridgeRouteDirectionPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRouteDirectionOutput) ToMqttBridgeRouteDirectionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteDirectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MqttBridgeRouteDirection) *MqttBridgeRouteDirection {
		return &v
	}).(MqttBridgeRouteDirectionPtrOutput)
}

func (o MqttBridgeRouteDirectionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MqttBridgeRouteDirectionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MqttBridgeRouteDirection) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MqttBridgeRouteDirectionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRouteDirectionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MqttBridgeRouteDirection) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MqttBridgeRouteDirectionPtrOutput struct{ *pulumi.OutputState }

func (MqttBridgeRouteDirectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRouteDirection)(nil)).Elem()
}

func (o MqttBridgeRouteDirectionPtrOutput) ToMqttBridgeRouteDirectionPtrOutput() MqttBridgeRouteDirectionPtrOutput {
	return o
}

func (o MqttBridgeRouteDirectionPtrOutput) ToMqttBridgeRouteDirectionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteDirectionPtrOutput {
	return o
}

func (o MqttBridgeRouteDirectionPtrOutput) Elem() MqttBridgeRouteDirectionOutput {
	return o.ApplyT(func(v *MqttBridgeRouteDirection) MqttBridgeRouteDirection {
		if v != nil {
			return *v
		}
		var ret MqttBridgeRouteDirection
		return ret
	}).(MqttBridgeRouteDirectionOutput)
}

func (o MqttBridgeRouteDirectionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRouteDirectionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MqttBridgeRouteDirection) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MqttBridgeRouteDirectionInput is an input type that accepts values of the MqttBridgeRouteDirection enum
// A concrete instance of `MqttBridgeRouteDirectionInput` can be one of the following:
//
//	MqttBridgeRouteDirectionRemoteToLocal
//	MqttBridgeRouteDirectionLocalToRemote
type MqttBridgeRouteDirectionInput interface {
	pulumi.Input

	ToMqttBridgeRouteDirectionOutput() MqttBridgeRouteDirectionOutput
	ToMqttBridgeRouteDirectionOutputWithContext(context.Context) MqttBridgeRouteDirectionOutput
}

var mqttBridgeRouteDirectionPtrType = reflect.TypeOf((**MqttBridgeRouteDirection)(nil)).Elem()

type MqttBridgeRouteDirectionPtrInput interface {
	pulumi.Input

	ToMqttBridgeRouteDirectionPtrOutput() MqttBridgeRouteDirectionPtrOutput
	ToMqttBridgeRouteDirectionPtrOutputWithContext(context.Context) MqttBridgeRouteDirectionPtrOutput
}

type mqttBridgeRouteDirectionPtr string

func MqttBridgeRouteDirectionPtr(v string) MqttBridgeRouteDirectionPtrInput {
	return (*mqttBridgeRouteDirectionPtr)(&v)
}

func (*mqttBridgeRouteDirectionPtr) ElementType() reflect.Type {
	return mqttBridgeRouteDirectionPtrType
}

func (in *mqttBridgeRouteDirectionPtr) ToMqttBridgeRouteDirectionPtrOutput() MqttBridgeRouteDirectionPtrOutput {
	return pulumi.ToOutput(in).(MqttBridgeRouteDirectionPtrOutput)
}

func (in *mqttBridgeRouteDirectionPtr) ToMqttBridgeRouteDirectionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteDirectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MqttBridgeRouteDirectionPtrOutput)
}

// The protocol to use for connecting with Brokers.
type MqttProtocol string

const (
	// Mqttv3
	MqttProtocolV3 = MqttProtocol("v3")
	// Mqttv5
	MqttProtocolV5 = MqttProtocol("v5")
)

func (MqttProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttProtocol)(nil)).Elem()
}

func (e MqttProtocol) ToMqttProtocolOutput() MqttProtocolOutput {
	return pulumi.ToOutput(e).(MqttProtocolOutput)
}

func (e MqttProtocol) ToMqttProtocolOutputWithContext(ctx context.Context) MqttProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MqttProtocolOutput)
}

func (e MqttProtocol) ToMqttProtocolPtrOutput() MqttProtocolPtrOutput {
	return e.ToMqttProtocolPtrOutputWithContext(context.Background())
}

func (e MqttProtocol) ToMqttProtocolPtrOutputWithContext(ctx context.Context) MqttProtocolPtrOutput {
	return MqttProtocol(e).ToMqttProtocolOutputWithContext(ctx).ToMqttProtocolPtrOutputWithContext(ctx)
}

func (e MqttProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MqttProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MqttProtocolOutput struct{ *pulumi.OutputState }

func (MqttProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttProtocol)(nil)).Elem()
}

func (o MqttProtocolOutput) ToMqttProtocolOutput() MqttProtocolOutput {
	return o
}

func (o MqttProtocolOutput) ToMqttProtocolOutputWithContext(ctx context.Context) MqttProtocolOutput {
	return o
}

func (o MqttProtocolOutput) ToMqttProtocolPtrOutput() MqttProtocolPtrOutput {
	return o.ToMqttProtocolPtrOutputWithContext(context.Background())
}

func (o MqttProtocolOutput) ToMqttProtocolPtrOutputWithContext(ctx context.Context) MqttProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MqttProtocol) *MqttProtocol {
		return &v
	}).(MqttProtocolPtrOutput)
}

func (o MqttProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MqttProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MqttProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MqttProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MqttProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MqttProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MqttProtocolPtrOutput struct{ *pulumi.OutputState }

func (MqttProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttProtocol)(nil)).Elem()
}

func (o MqttProtocolPtrOutput) ToMqttProtocolPtrOutput() MqttProtocolPtrOutput {
	return o
}

func (o MqttProtocolPtrOutput) ToMqttProtocolPtrOutputWithContext(ctx context.Context) MqttProtocolPtrOutput {
	return o
}

func (o MqttProtocolPtrOutput) Elem() MqttProtocolOutput {
	return o.ApplyT(func(v *MqttProtocol) MqttProtocol {
		if v != nil {
			return *v
		}
		var ret MqttProtocol
		return ret
	}).(MqttProtocolOutput)
}

func (o MqttProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MqttProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MqttProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MqttProtocolInput is an input type that accepts values of the MqttProtocol enum
// A concrete instance of `MqttProtocolInput` can be one of the following:
//
//	MqttProtocolV3
//	MqttProtocolV5
type MqttProtocolInput interface {
	pulumi.Input

	ToMqttProtocolOutput() MqttProtocolOutput
	ToMqttProtocolOutputWithContext(context.Context) MqttProtocolOutput
}

var mqttProtocolPtrType = reflect.TypeOf((**MqttProtocol)(nil)).Elem()

type MqttProtocolPtrInput interface {
	pulumi.Input

	ToMqttProtocolPtrOutput() MqttProtocolPtrOutput
	ToMqttProtocolPtrOutputWithContext(context.Context) MqttProtocolPtrOutput
}

type mqttProtocolPtr string

func MqttProtocolPtr(v string) MqttProtocolPtrInput {
	return (*mqttProtocolPtr)(&v)
}

func (*mqttProtocolPtr) ElementType() reflect.Type {
	return mqttProtocolPtrType
}

func (in *mqttProtocolPtr) ToMqttProtocolPtrOutput() MqttProtocolPtrOutput {
	return pulumi.ToOutput(in).(MqttProtocolPtrOutput)
}

func (in *mqttProtocolPtr) ToMqttProtocolPtrOutputWithContext(ctx context.Context) MqttProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MqttProtocolPtrOutput)
}

// The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
type ResourceInfoDefinitionMethods string

const (
	// Allowed Connecting to Broker
	ResourceInfoDefinitionMethodsConnect = ResourceInfoDefinitionMethods("Connect")
	// Allowed Publishing to Broker
	ResourceInfoDefinitionMethodsPublish = ResourceInfoDefinitionMethods("Publish")
	// Allowed Subscribing to Broker
	ResourceInfoDefinitionMethodsSubscribe = ResourceInfoDefinitionMethods("Subscribe")
)

func (ResourceInfoDefinitionMethods) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceInfoDefinitionMethods)(nil)).Elem()
}

func (e ResourceInfoDefinitionMethods) ToResourceInfoDefinitionMethodsOutput() ResourceInfoDefinitionMethodsOutput {
	return pulumi.ToOutput(e).(ResourceInfoDefinitionMethodsOutput)
}

func (e ResourceInfoDefinitionMethods) ToResourceInfoDefinitionMethodsOutputWithContext(ctx context.Context) ResourceInfoDefinitionMethodsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceInfoDefinitionMethodsOutput)
}

func (e ResourceInfoDefinitionMethods) ToResourceInfoDefinitionMethodsPtrOutput() ResourceInfoDefinitionMethodsPtrOutput {
	return e.ToResourceInfoDefinitionMethodsPtrOutputWithContext(context.Background())
}

func (e ResourceInfoDefinitionMethods) ToResourceInfoDefinitionMethodsPtrOutputWithContext(ctx context.Context) ResourceInfoDefinitionMethodsPtrOutput {
	return ResourceInfoDefinitionMethods(e).ToResourceInfoDefinitionMethodsOutputWithContext(ctx).ToResourceInfoDefinitionMethodsPtrOutputWithContext(ctx)
}

func (e ResourceInfoDefinitionMethods) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceInfoDefinitionMethods) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceInfoDefinitionMethods) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceInfoDefinitionMethods) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceInfoDefinitionMethodsOutput struct{ *pulumi.OutputState }

func (ResourceInfoDefinitionMethodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceInfoDefinitionMethods)(nil)).Elem()
}

func (o ResourceInfoDefinitionMethodsOutput) ToResourceInfoDefinitionMethodsOutput() ResourceInfoDefinitionMethodsOutput {
	return o
}

func (o ResourceInfoDefinitionMethodsOutput) ToResourceInfoDefinitionMethodsOutputWithContext(ctx context.Context) ResourceInfoDefinitionMethodsOutput {
	return o
}

func (o ResourceInfoDefinitionMethodsOutput) ToResourceInfoDefinitionMethodsPtrOutput() ResourceInfoDefinitionMethodsPtrOutput {
	return o.ToResourceInfoDefinitionMethodsPtrOutputWithContext(context.Background())
}

func (o ResourceInfoDefinitionMethodsOutput) ToResourceInfoDefinitionMethodsPtrOutputWithContext(ctx context.Context) ResourceInfoDefinitionMethodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceInfoDefinitionMethods) *ResourceInfoDefinitionMethods {
		return &v
	}).(ResourceInfoDefinitionMethodsPtrOutput)
}

func (o ResourceInfoDefinitionMethodsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceInfoDefinitionMethodsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceInfoDefinitionMethods) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceInfoDefinitionMethodsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceInfoDefinitionMethodsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceInfoDefinitionMethods) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceInfoDefinitionMethodsPtrOutput struct{ *pulumi.OutputState }

func (ResourceInfoDefinitionMethodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceInfoDefinitionMethods)(nil)).Elem()
}

func (o ResourceInfoDefinitionMethodsPtrOutput) ToResourceInfoDefinitionMethodsPtrOutput() ResourceInfoDefinitionMethodsPtrOutput {
	return o
}

func (o ResourceInfoDefinitionMethodsPtrOutput) ToResourceInfoDefinitionMethodsPtrOutputWithContext(ctx context.Context) ResourceInfoDefinitionMethodsPtrOutput {
	return o
}

func (o ResourceInfoDefinitionMethodsPtrOutput) Elem() ResourceInfoDefinitionMethodsOutput {
	return o.ApplyT(func(v *ResourceInfoDefinitionMethods) ResourceInfoDefinitionMethods {
		if v != nil {
			return *v
		}
		var ret ResourceInfoDefinitionMethods
		return ret
	}).(ResourceInfoDefinitionMethodsOutput)
}

func (o ResourceInfoDefinitionMethodsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceInfoDefinitionMethodsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceInfoDefinitionMethods) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceInfoDefinitionMethodsInput is an input type that accepts values of the ResourceInfoDefinitionMethods enum
// A concrete instance of `ResourceInfoDefinitionMethodsInput` can be one of the following:
//
//	ResourceInfoDefinitionMethodsConnect
//	ResourceInfoDefinitionMethodsPublish
//	ResourceInfoDefinitionMethodsSubscribe
type ResourceInfoDefinitionMethodsInput interface {
	pulumi.Input

	ToResourceInfoDefinitionMethodsOutput() ResourceInfoDefinitionMethodsOutput
	ToResourceInfoDefinitionMethodsOutputWithContext(context.Context) ResourceInfoDefinitionMethodsOutput
}

var resourceInfoDefinitionMethodsPtrType = reflect.TypeOf((**ResourceInfoDefinitionMethods)(nil)).Elem()

type ResourceInfoDefinitionMethodsPtrInput interface {
	pulumi.Input

	ToResourceInfoDefinitionMethodsPtrOutput() ResourceInfoDefinitionMethodsPtrOutput
	ToResourceInfoDefinitionMethodsPtrOutputWithContext(context.Context) ResourceInfoDefinitionMethodsPtrOutput
}

type resourceInfoDefinitionMethodsPtr string

func ResourceInfoDefinitionMethodsPtr(v string) ResourceInfoDefinitionMethodsPtrInput {
	return (*resourceInfoDefinitionMethodsPtr)(&v)
}

func (*resourceInfoDefinitionMethodsPtr) ElementType() reflect.Type {
	return resourceInfoDefinitionMethodsPtrType
}

func (in *resourceInfoDefinitionMethodsPtr) ToResourceInfoDefinitionMethodsPtrOutput() ResourceInfoDefinitionMethodsPtrOutput {
	return pulumi.ToOutput(in).(ResourceInfoDefinitionMethodsPtrOutput)
}

func (in *resourceInfoDefinitionMethodsPtr) ToResourceInfoDefinitionMethodsPtrOutputWithContext(ctx context.Context) ResourceInfoDefinitionMethodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceInfoDefinitionMethodsPtrOutput)
}

// The Running Mode of the Broker Deployment.
type RunMode string

const (
	// Automatically provision Frontend and Backend pods.
	RunModeAuto = RunMode("auto")
	// Use Cardinality to set Frontend and Backend pods.
	RunModeDistributed = RunMode("distributed")
)

func (RunMode) ElementType() reflect.Type {
	return reflect.TypeOf((*RunMode)(nil)).Elem()
}

func (e RunMode) ToRunModeOutput() RunModeOutput {
	return pulumi.ToOutput(e).(RunModeOutput)
}

func (e RunMode) ToRunModeOutputWithContext(ctx context.Context) RunModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RunModeOutput)
}

func (e RunMode) ToRunModePtrOutput() RunModePtrOutput {
	return e.ToRunModePtrOutputWithContext(context.Background())
}

func (e RunMode) ToRunModePtrOutputWithContext(ctx context.Context) RunModePtrOutput {
	return RunMode(e).ToRunModeOutputWithContext(ctx).ToRunModePtrOutputWithContext(ctx)
}

func (e RunMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RunMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RunMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RunMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RunModeOutput struct{ *pulumi.OutputState }

func (RunModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunMode)(nil)).Elem()
}

func (o RunModeOutput) ToRunModeOutput() RunModeOutput {
	return o
}

func (o RunModeOutput) ToRunModeOutputWithContext(ctx context.Context) RunModeOutput {
	return o
}

func (o RunModeOutput) ToRunModePtrOutput() RunModePtrOutput {
	return o.ToRunModePtrOutputWithContext(context.Background())
}

func (o RunModeOutput) ToRunModePtrOutputWithContext(ctx context.Context) RunModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunMode) *RunMode {
		return &v
	}).(RunModePtrOutput)
}

func (o RunModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RunModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RunMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RunModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RunModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RunMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RunModePtrOutput struct{ *pulumi.OutputState }

func (RunModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunMode)(nil)).Elem()
}

func (o RunModePtrOutput) ToRunModePtrOutput() RunModePtrOutput {
	return o
}

func (o RunModePtrOutput) ToRunModePtrOutputWithContext(ctx context.Context) RunModePtrOutput {
	return o
}

func (o RunModePtrOutput) Elem() RunModeOutput {
	return o.ApplyT(func(v *RunMode) RunMode {
		if v != nil {
			return *v
		}
		var ret RunMode
		return ret
	}).(RunModeOutput)
}

func (o RunModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RunModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RunMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RunModeInput is an input type that accepts values of the RunMode enum
// A concrete instance of `RunModeInput` can be one of the following:
//
//	RunModeAuto
//	RunModeDistributed
type RunModeInput interface {
	pulumi.Input

	ToRunModeOutput() RunModeOutput
	ToRunModeOutputWithContext(context.Context) RunModeOutput
}

var runModePtrType = reflect.TypeOf((**RunMode)(nil)).Elem()

type RunModePtrInput interface {
	pulumi.Input

	ToRunModePtrOutput() RunModePtrOutput
	ToRunModePtrOutputWithContext(context.Context) RunModePtrOutput
}

type runModePtr string

func RunModePtr(v string) RunModePtrInput {
	return (*runModePtr)(&v)
}

func (*runModePtr) ElementType() reflect.Type {
	return runModePtrType
}

func (in *runModePtr) ToRunModePtrOutput() RunModePtrOutput {
	return pulumi.ToOutput(in).(RunModePtrOutput)
}

func (in *runModePtr) ToRunModePtrOutputWithContext(ctx context.Context) RunModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RunModePtrOutput)
}

// The Kubernetes Service type to deploy for Listener.
type ServiceType string

const (
	// Cluster IP Service.
	ServiceTypeClusterIp = ServiceType("clusterIp")
	// Load Balancer Service.
	ServiceTypeLoadBalancer = ServiceType("loadBalancer")
	// Node Port Service.
	ServiceTypeNodePort = ServiceType("nodePort")
)

func (ServiceType) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (e ServiceType) ToServiceTypeOutput() ServiceTypeOutput {
	return pulumi.ToOutput(e).(ServiceTypeOutput)
}

func (e ServiceType) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ServiceTypeOutput)
}

func (e ServiceType) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return e.ToServiceTypePtrOutputWithContext(context.Background())
}

func (e ServiceType) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return ServiceType(e).ToServiceTypeOutputWithContext(ctx).ToServiceTypePtrOutputWithContext(ctx)
}

func (e ServiceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ServiceTypeOutput struct{ *pulumi.OutputState }

func (ServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (o ServiceTypeOutput) ToServiceTypeOutput() ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return o.ToServiceTypePtrOutputWithContext(context.Background())
}

func (o ServiceTypeOutput) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceType) *ServiceType {
		return &v
	}).(ServiceTypePtrOutput)
}

func (o ServiceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ServiceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ServiceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ServiceTypePtrOutput struct{ *pulumi.OutputState }

func (ServiceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceType)(nil)).Elem()
}

func (o ServiceTypePtrOutput) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return o
}

func (o ServiceTypePtrOutput) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return o
}

func (o ServiceTypePtrOutput) Elem() ServiceTypeOutput {
	return o.ApplyT(func(v *ServiceType) ServiceType {
		if v != nil {
			return *v
		}
		var ret ServiceType
		return ret
	}).(ServiceTypeOutput)
}

func (o ServiceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ServiceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ServiceTypeInput is an input type that accepts values of the ServiceType enum
// A concrete instance of `ServiceTypeInput` can be one of the following:
//
//	ServiceTypeClusterIp
//	ServiceTypeLoadBalancer
//	ServiceTypeNodePort
type ServiceTypeInput interface {
	pulumi.Input

	ToServiceTypeOutput() ServiceTypeOutput
	ToServiceTypeOutputWithContext(context.Context) ServiceTypeOutput
}

var serviceTypePtrType = reflect.TypeOf((**ServiceType)(nil)).Elem()

type ServiceTypePtrInput interface {
	pulumi.Input

	ToServiceTypePtrOutput() ServiceTypePtrOutput
	ToServiceTypePtrOutputWithContext(context.Context) ServiceTypePtrOutput
}

type serviceTypePtr string

func ServiceTypePtr(v string) ServiceTypePtrInput {
	return (*serviceTypePtr)(&v)
}

func (*serviceTypePtr) ElementType() reflect.Type {
	return serviceTypePtrType
}

func (in *serviceTypePtr) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return pulumi.ToOutput(in).(ServiceTypePtrOutput)
}

func (in *serviceTypePtr) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ServiceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BrokerMemoryProfileOutput{})
	pulumi.RegisterOutputType(BrokerMemoryProfilePtrOutput{})
	pulumi.RegisterOutputType(DataLakeDatabaseFormatOutput{})
	pulumi.RegisterOutputType(DataLakeDatabaseFormatPtrOutput{})
	pulumi.RegisterOutputType(DeltaTableFormatEnumOutput{})
	pulumi.RegisterOutputType(DeltaTableFormatEnumPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypeOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypePtrOutput{})
	pulumi.RegisterOutputType(FabricPathTypeOutput{})
	pulumi.RegisterOutputType(FabricPathTypePtrOutput{})
	pulumi.RegisterOutputType(KafkaAcksOutput{})
	pulumi.RegisterOutputType(KafkaAcksPtrOutput{})
	pulumi.RegisterOutputType(KafkaMessageCompressionTypeOutput{})
	pulumi.RegisterOutputType(KafkaMessageCompressionTypePtrOutput{})
	pulumi.RegisterOutputType(KafkaPartitionStrategyOutput{})
	pulumi.RegisterOutputType(KafkaPartitionStrategyPtrOutput{})
	pulumi.RegisterOutputType(KafkaSaslTypeOutput{})
	pulumi.RegisterOutputType(KafkaSaslTypePtrOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerProtocolOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerProtocolPtrOutput{})
	pulumi.RegisterOutputType(MqttBridgeRouteDirectionOutput{})
	pulumi.RegisterOutputType(MqttBridgeRouteDirectionPtrOutput{})
	pulumi.RegisterOutputType(MqttProtocolOutput{})
	pulumi.RegisterOutputType(MqttProtocolPtrOutput{})
	pulumi.RegisterOutputType(ResourceInfoDefinitionMethodsOutput{})
	pulumi.RegisterOutputType(ResourceInfoDefinitionMethodsPtrOutput{})
	pulumi.RegisterOutputType(RunModeOutput{})
	pulumi.RegisterOutputType(RunModePtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeOutput{})
	pulumi.RegisterOutputType(ServiceTypePtrOutput{})
}
