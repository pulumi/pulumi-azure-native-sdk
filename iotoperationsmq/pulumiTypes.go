// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// BasicRules of AuthorizationConfig Polar rules are not supported
type AuthorizationBasicRule struct {
	// This subfield defines the broker resources that the Basic Rule is applied on.
	BrokerResources []ResourceInfoDefinition `pulumi:"brokerResources"`
	// This subfield defines the identities that represent the clients.
	Principals PrincipalDefinition `pulumi:"principals"`
}

// AuthorizationBasicRuleInput is an input type that accepts AuthorizationBasicRuleArgs and AuthorizationBasicRuleOutput values.
// You can construct a concrete instance of `AuthorizationBasicRuleInput` via:
//
//	AuthorizationBasicRuleArgs{...}
type AuthorizationBasicRuleInput interface {
	pulumi.Input

	ToAuthorizationBasicRuleOutput() AuthorizationBasicRuleOutput
	ToAuthorizationBasicRuleOutputWithContext(context.Context) AuthorizationBasicRuleOutput
}

// BasicRules of AuthorizationConfig Polar rules are not supported
type AuthorizationBasicRuleArgs struct {
	// This subfield defines the broker resources that the Basic Rule is applied on.
	BrokerResources ResourceInfoDefinitionArrayInput `pulumi:"brokerResources"`
	// This subfield defines the identities that represent the clients.
	Principals PrincipalDefinitionInput `pulumi:"principals"`
}

func (AuthorizationBasicRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationBasicRule)(nil)).Elem()
}

func (i AuthorizationBasicRuleArgs) ToAuthorizationBasicRuleOutput() AuthorizationBasicRuleOutput {
	return i.ToAuthorizationBasicRuleOutputWithContext(context.Background())
}

func (i AuthorizationBasicRuleArgs) ToAuthorizationBasicRuleOutputWithContext(ctx context.Context) AuthorizationBasicRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationBasicRuleOutput)
}

// AuthorizationBasicRuleArrayInput is an input type that accepts AuthorizationBasicRuleArray and AuthorizationBasicRuleArrayOutput values.
// You can construct a concrete instance of `AuthorizationBasicRuleArrayInput` via:
//
//	AuthorizationBasicRuleArray{ AuthorizationBasicRuleArgs{...} }
type AuthorizationBasicRuleArrayInput interface {
	pulumi.Input

	ToAuthorizationBasicRuleArrayOutput() AuthorizationBasicRuleArrayOutput
	ToAuthorizationBasicRuleArrayOutputWithContext(context.Context) AuthorizationBasicRuleArrayOutput
}

type AuthorizationBasicRuleArray []AuthorizationBasicRuleInput

func (AuthorizationBasicRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationBasicRule)(nil)).Elem()
}

func (i AuthorizationBasicRuleArray) ToAuthorizationBasicRuleArrayOutput() AuthorizationBasicRuleArrayOutput {
	return i.ToAuthorizationBasicRuleArrayOutputWithContext(context.Background())
}

func (i AuthorizationBasicRuleArray) ToAuthorizationBasicRuleArrayOutputWithContext(ctx context.Context) AuthorizationBasicRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationBasicRuleArrayOutput)
}

// BasicRules of AuthorizationConfig Polar rules are not supported
type AuthorizationBasicRuleOutput struct{ *pulumi.OutputState }

func (AuthorizationBasicRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationBasicRule)(nil)).Elem()
}

func (o AuthorizationBasicRuleOutput) ToAuthorizationBasicRuleOutput() AuthorizationBasicRuleOutput {
	return o
}

func (o AuthorizationBasicRuleOutput) ToAuthorizationBasicRuleOutputWithContext(ctx context.Context) AuthorizationBasicRuleOutput {
	return o
}

// This subfield defines the broker resources that the Basic Rule is applied on.
func (o AuthorizationBasicRuleOutput) BrokerResources() ResourceInfoDefinitionArrayOutput {
	return o.ApplyT(func(v AuthorizationBasicRule) []ResourceInfoDefinition { return v.BrokerResources }).(ResourceInfoDefinitionArrayOutput)
}

// This subfield defines the identities that represent the clients.
func (o AuthorizationBasicRuleOutput) Principals() PrincipalDefinitionOutput {
	return o.ApplyT(func(v AuthorizationBasicRule) PrincipalDefinition { return v.Principals }).(PrincipalDefinitionOutput)
}

type AuthorizationBasicRuleArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationBasicRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationBasicRule)(nil)).Elem()
}

func (o AuthorizationBasicRuleArrayOutput) ToAuthorizationBasicRuleArrayOutput() AuthorizationBasicRuleArrayOutput {
	return o
}

func (o AuthorizationBasicRuleArrayOutput) ToAuthorizationBasicRuleArrayOutputWithContext(ctx context.Context) AuthorizationBasicRuleArrayOutput {
	return o
}

func (o AuthorizationBasicRuleArrayOutput) Index(i pulumi.IntInput) AuthorizationBasicRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationBasicRule {
		return vs[0].([]AuthorizationBasicRule)[vs[1].(int)]
	}).(AuthorizationBasicRuleOutput)
}

// BasicRules of AuthorizationConfig Polar rules are not supported
type AuthorizationBasicRuleResponse struct {
	// This subfield defines the broker resources that the Basic Rule is applied on.
	BrokerResources []ResourceInfoDefinitionResponse `pulumi:"brokerResources"`
	// This subfield defines the identities that represent the clients.
	Principals PrincipalDefinitionResponse `pulumi:"principals"`
}

// BasicRules of AuthorizationConfig Polar rules are not supported
type AuthorizationBasicRuleResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationBasicRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationBasicRuleResponse)(nil)).Elem()
}

func (o AuthorizationBasicRuleResponseOutput) ToAuthorizationBasicRuleResponseOutput() AuthorizationBasicRuleResponseOutput {
	return o
}

func (o AuthorizationBasicRuleResponseOutput) ToAuthorizationBasicRuleResponseOutputWithContext(ctx context.Context) AuthorizationBasicRuleResponseOutput {
	return o
}

// This subfield defines the broker resources that the Basic Rule is applied on.
func (o AuthorizationBasicRuleResponseOutput) BrokerResources() ResourceInfoDefinitionResponseArrayOutput {
	return o.ApplyT(func(v AuthorizationBasicRuleResponse) []ResourceInfoDefinitionResponse { return v.BrokerResources }).(ResourceInfoDefinitionResponseArrayOutput)
}

// This subfield defines the identities that represent the clients.
func (o AuthorizationBasicRuleResponseOutput) Principals() PrincipalDefinitionResponseOutput {
	return o.ApplyT(func(v AuthorizationBasicRuleResponse) PrincipalDefinitionResponse { return v.Principals }).(PrincipalDefinitionResponseOutput)
}

type AuthorizationBasicRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationBasicRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationBasicRuleResponse)(nil)).Elem()
}

func (o AuthorizationBasicRuleResponseArrayOutput) ToAuthorizationBasicRuleResponseArrayOutput() AuthorizationBasicRuleResponseArrayOutput {
	return o
}

func (o AuthorizationBasicRuleResponseArrayOutput) ToAuthorizationBasicRuleResponseArrayOutputWithContext(ctx context.Context) AuthorizationBasicRuleResponseArrayOutput {
	return o
}

func (o AuthorizationBasicRuleResponseArrayOutput) Index(i pulumi.IntInput) AuthorizationBasicRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationBasicRuleResponse {
		return vs[0].([]AuthorizationBasicRuleResponse)[vs[1].(int)]
	}).(AuthorizationBasicRuleResponseOutput)
}

// Broker AuthorizationConfig properties
type AuthorizationConfig struct {
	// Enable caching of the authorization rules.
	EnableCache *bool `pulumi:"enableCache"`
	// Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.
	Rules []AuthorizationBasicRule `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for AuthorizationConfig
func (val *AuthorizationConfig) Defaults() *AuthorizationConfig {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableCache == nil {
		enableCache_ := true
		tmp.EnableCache = &enableCache_
	}
	return &tmp
}

// AuthorizationConfigInput is an input type that accepts AuthorizationConfigArgs and AuthorizationConfigOutput values.
// You can construct a concrete instance of `AuthorizationConfigInput` via:
//
//	AuthorizationConfigArgs{...}
type AuthorizationConfigInput interface {
	pulumi.Input

	ToAuthorizationConfigOutput() AuthorizationConfigOutput
	ToAuthorizationConfigOutputWithContext(context.Context) AuthorizationConfigOutput
}

// Broker AuthorizationConfig properties
type AuthorizationConfigArgs struct {
	// Enable caching of the authorization rules.
	EnableCache pulumi.BoolPtrInput `pulumi:"enableCache"`
	// Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.
	Rules AuthorizationBasicRuleArrayInput `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for AuthorizationConfigArgs
func (val *AuthorizationConfigArgs) Defaults() *AuthorizationConfigArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableCache == nil {
		tmp.EnableCache = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (AuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationConfig)(nil)).Elem()
}

func (i AuthorizationConfigArgs) ToAuthorizationConfigOutput() AuthorizationConfigOutput {
	return i.ToAuthorizationConfigOutputWithContext(context.Background())
}

func (i AuthorizationConfigArgs) ToAuthorizationConfigOutputWithContext(ctx context.Context) AuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationConfigOutput)
}

// Broker AuthorizationConfig properties
type AuthorizationConfigOutput struct{ *pulumi.OutputState }

func (AuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationConfig)(nil)).Elem()
}

func (o AuthorizationConfigOutput) ToAuthorizationConfigOutput() AuthorizationConfigOutput {
	return o
}

func (o AuthorizationConfigOutput) ToAuthorizationConfigOutputWithContext(ctx context.Context) AuthorizationConfigOutput {
	return o
}

// Enable caching of the authorization rules.
func (o AuthorizationConfigOutput) EnableCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthorizationConfig) *bool { return v.EnableCache }).(pulumi.BoolPtrOutput)
}

// Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.
func (o AuthorizationConfigOutput) Rules() AuthorizationBasicRuleArrayOutput {
	return o.ApplyT(func(v AuthorizationConfig) []AuthorizationBasicRule { return v.Rules }).(AuthorizationBasicRuleArrayOutput)
}

// Broker AuthorizationConfig properties
type AuthorizationConfigResponse struct {
	// Enable caching of the authorization rules.
	EnableCache *bool `pulumi:"enableCache"`
	// Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.
	Rules []AuthorizationBasicRuleResponse `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for AuthorizationConfigResponse
func (val *AuthorizationConfigResponse) Defaults() *AuthorizationConfigResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableCache == nil {
		enableCache_ := true
		tmp.EnableCache = &enableCache_
	}
	return &tmp
}

// Broker AuthorizationConfig properties
type AuthorizationConfigResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationConfigResponse)(nil)).Elem()
}

func (o AuthorizationConfigResponseOutput) ToAuthorizationConfigResponseOutput() AuthorizationConfigResponseOutput {
	return o
}

func (o AuthorizationConfigResponseOutput) ToAuthorizationConfigResponseOutputWithContext(ctx context.Context) AuthorizationConfigResponseOutput {
	return o
}

// Enable caching of the authorization rules.
func (o AuthorizationConfigResponseOutput) EnableCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthorizationConfigResponse) *bool { return v.EnableCache }).(pulumi.BoolPtrOutput)
}

// Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.
func (o AuthorizationConfigResponseOutput) Rules() AuthorizationBasicRuleResponseArrayOutput {
	return o.ApplyT(func(v AuthorizationConfigResponse) []AuthorizationBasicRuleResponse { return v.Rules }).(AuthorizationBasicRuleResponseArrayOutput)
}

// Automatic TLS server certificate management with cert-manager
type AutomaticCertMethod struct {
	// Lifetime of automatically-managed certificate.
	Duration *string `pulumi:"duration"`
	// cert-manager issuerRef.
	IssuerRef CertManagerIssuerRef `pulumi:"issuerRef"`
	// Cert Manager private key.
	PrivateKey *CertManagerPrivateKey `pulumi:"privateKey"`
	// When to begin renewing automatically-managed certificate.
	RenewBefore *string `pulumi:"renewBefore"`
	// Additional SANs to include in the certificate.
	San *SanForCert `pulumi:"san"`
	// Secret for storing server certificate. Any existing data will be overwritten.
	SecretName *string `pulumi:"secretName"`
	// Certificate K8S namespace. Omit to use default namespace.
	SecretNamespace *string `pulumi:"secretNamespace"`
}

// Defaults sets the appropriate defaults for AutomaticCertMethod
func (val *AutomaticCertMethod) Defaults() *AutomaticCertMethod {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Duration == nil {
		duration_ := "720h"
		tmp.Duration = &duration_
	}
	tmp.IssuerRef = *tmp.IssuerRef.Defaults()

	tmp.PrivateKey = tmp.PrivateKey.Defaults()

	if tmp.RenewBefore == nil {
		renewBefore_ := "240h"
		tmp.RenewBefore = &renewBefore_
	}
	return &tmp
}

// AutomaticCertMethodInput is an input type that accepts AutomaticCertMethodArgs and AutomaticCertMethodOutput values.
// You can construct a concrete instance of `AutomaticCertMethodInput` via:
//
//	AutomaticCertMethodArgs{...}
type AutomaticCertMethodInput interface {
	pulumi.Input

	ToAutomaticCertMethodOutput() AutomaticCertMethodOutput
	ToAutomaticCertMethodOutputWithContext(context.Context) AutomaticCertMethodOutput
}

// Automatic TLS server certificate management with cert-manager
type AutomaticCertMethodArgs struct {
	// Lifetime of automatically-managed certificate.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// cert-manager issuerRef.
	IssuerRef CertManagerIssuerRefInput `pulumi:"issuerRef"`
	// Cert Manager private key.
	PrivateKey CertManagerPrivateKeyPtrInput `pulumi:"privateKey"`
	// When to begin renewing automatically-managed certificate.
	RenewBefore pulumi.StringPtrInput `pulumi:"renewBefore"`
	// Additional SANs to include in the certificate.
	San SanForCertPtrInput `pulumi:"san"`
	// Secret for storing server certificate. Any existing data will be overwritten.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// Certificate K8S namespace. Omit to use default namespace.
	SecretNamespace pulumi.StringPtrInput `pulumi:"secretNamespace"`
}

// Defaults sets the appropriate defaults for AutomaticCertMethodArgs
func (val *AutomaticCertMethodArgs) Defaults() *AutomaticCertMethodArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Duration == nil {
		tmp.Duration = pulumi.StringPtr("720h")
	}

	if tmp.RenewBefore == nil {
		tmp.RenewBefore = pulumi.StringPtr("240h")
	}
	return &tmp
}
func (AutomaticCertMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticCertMethod)(nil)).Elem()
}

func (i AutomaticCertMethodArgs) ToAutomaticCertMethodOutput() AutomaticCertMethodOutput {
	return i.ToAutomaticCertMethodOutputWithContext(context.Background())
}

func (i AutomaticCertMethodArgs) ToAutomaticCertMethodOutputWithContext(ctx context.Context) AutomaticCertMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticCertMethodOutput)
}

func (i AutomaticCertMethodArgs) ToAutomaticCertMethodPtrOutput() AutomaticCertMethodPtrOutput {
	return i.ToAutomaticCertMethodPtrOutputWithContext(context.Background())
}

func (i AutomaticCertMethodArgs) ToAutomaticCertMethodPtrOutputWithContext(ctx context.Context) AutomaticCertMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticCertMethodOutput).ToAutomaticCertMethodPtrOutputWithContext(ctx)
}

// AutomaticCertMethodPtrInput is an input type that accepts AutomaticCertMethodArgs, AutomaticCertMethodPtr and AutomaticCertMethodPtrOutput values.
// You can construct a concrete instance of `AutomaticCertMethodPtrInput` via:
//
//	        AutomaticCertMethodArgs{...}
//
//	or:
//
//	        nil
type AutomaticCertMethodPtrInput interface {
	pulumi.Input

	ToAutomaticCertMethodPtrOutput() AutomaticCertMethodPtrOutput
	ToAutomaticCertMethodPtrOutputWithContext(context.Context) AutomaticCertMethodPtrOutput
}

type automaticCertMethodPtrType AutomaticCertMethodArgs

func AutomaticCertMethodPtr(v *AutomaticCertMethodArgs) AutomaticCertMethodPtrInput {
	return (*automaticCertMethodPtrType)(v)
}

func (*automaticCertMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticCertMethod)(nil)).Elem()
}

func (i *automaticCertMethodPtrType) ToAutomaticCertMethodPtrOutput() AutomaticCertMethodPtrOutput {
	return i.ToAutomaticCertMethodPtrOutputWithContext(context.Background())
}

func (i *automaticCertMethodPtrType) ToAutomaticCertMethodPtrOutputWithContext(ctx context.Context) AutomaticCertMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticCertMethodPtrOutput)
}

// Automatic TLS server certificate management with cert-manager
type AutomaticCertMethodOutput struct{ *pulumi.OutputState }

func (AutomaticCertMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticCertMethod)(nil)).Elem()
}

func (o AutomaticCertMethodOutput) ToAutomaticCertMethodOutput() AutomaticCertMethodOutput {
	return o
}

func (o AutomaticCertMethodOutput) ToAutomaticCertMethodOutputWithContext(ctx context.Context) AutomaticCertMethodOutput {
	return o
}

func (o AutomaticCertMethodOutput) ToAutomaticCertMethodPtrOutput() AutomaticCertMethodPtrOutput {
	return o.ToAutomaticCertMethodPtrOutputWithContext(context.Background())
}

func (o AutomaticCertMethodOutput) ToAutomaticCertMethodPtrOutputWithContext(ctx context.Context) AutomaticCertMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutomaticCertMethod) *AutomaticCertMethod {
		return &v
	}).(AutomaticCertMethodPtrOutput)
}

// Lifetime of automatically-managed certificate.
func (o AutomaticCertMethodOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethod) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// cert-manager issuerRef.
func (o AutomaticCertMethodOutput) IssuerRef() CertManagerIssuerRefOutput {
	return o.ApplyT(func(v AutomaticCertMethod) CertManagerIssuerRef { return v.IssuerRef }).(CertManagerIssuerRefOutput)
}

// Cert Manager private key.
func (o AutomaticCertMethodOutput) PrivateKey() CertManagerPrivateKeyPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethod) *CertManagerPrivateKey { return v.PrivateKey }).(CertManagerPrivateKeyPtrOutput)
}

// When to begin renewing automatically-managed certificate.
func (o AutomaticCertMethodOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethod) *string { return v.RenewBefore }).(pulumi.StringPtrOutput)
}

// Additional SANs to include in the certificate.
func (o AutomaticCertMethodOutput) San() SanForCertPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethod) *SanForCert { return v.San }).(SanForCertPtrOutput)
}

// Secret for storing server certificate. Any existing data will be overwritten.
func (o AutomaticCertMethodOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethod) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// Certificate K8S namespace. Omit to use default namespace.
func (o AutomaticCertMethodOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethod) *string { return v.SecretNamespace }).(pulumi.StringPtrOutput)
}

type AutomaticCertMethodPtrOutput struct{ *pulumi.OutputState }

func (AutomaticCertMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticCertMethod)(nil)).Elem()
}

func (o AutomaticCertMethodPtrOutput) ToAutomaticCertMethodPtrOutput() AutomaticCertMethodPtrOutput {
	return o
}

func (o AutomaticCertMethodPtrOutput) ToAutomaticCertMethodPtrOutputWithContext(ctx context.Context) AutomaticCertMethodPtrOutput {
	return o
}

func (o AutomaticCertMethodPtrOutput) Elem() AutomaticCertMethodOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) AutomaticCertMethod {
		if v != nil {
			return *v
		}
		var ret AutomaticCertMethod
		return ret
	}).(AutomaticCertMethodOutput)
}

// Lifetime of automatically-managed certificate.
func (o AutomaticCertMethodPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// cert-manager issuerRef.
func (o AutomaticCertMethodPtrOutput) IssuerRef() CertManagerIssuerRefPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) *CertManagerIssuerRef {
		if v == nil {
			return nil
		}
		return &v.IssuerRef
	}).(CertManagerIssuerRefPtrOutput)
}

// Cert Manager private key.
func (o AutomaticCertMethodPtrOutput) PrivateKey() CertManagerPrivateKeyPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) *CertManagerPrivateKey {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(CertManagerPrivateKeyPtrOutput)
}

// When to begin renewing automatically-managed certificate.
func (o AutomaticCertMethodPtrOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) *string {
		if v == nil {
			return nil
		}
		return v.RenewBefore
	}).(pulumi.StringPtrOutput)
}

// Additional SANs to include in the certificate.
func (o AutomaticCertMethodPtrOutput) San() SanForCertPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) *SanForCert {
		if v == nil {
			return nil
		}
		return v.San
	}).(SanForCertPtrOutput)
}

// Secret for storing server certificate. Any existing data will be overwritten.
func (o AutomaticCertMethodPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Certificate K8S namespace. Omit to use default namespace.
func (o AutomaticCertMethodPtrOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethod) *string {
		if v == nil {
			return nil
		}
		return v.SecretNamespace
	}).(pulumi.StringPtrOutput)
}

// Automatic TLS server certificate management with cert-manager
type AutomaticCertMethodResponse struct {
	// Lifetime of automatically-managed certificate.
	Duration *string `pulumi:"duration"`
	// cert-manager issuerRef.
	IssuerRef CertManagerIssuerRefResponse `pulumi:"issuerRef"`
	// Cert Manager private key.
	PrivateKey *CertManagerPrivateKeyResponse `pulumi:"privateKey"`
	// When to begin renewing automatically-managed certificate.
	RenewBefore *string `pulumi:"renewBefore"`
	// Additional SANs to include in the certificate.
	San *SanForCertResponse `pulumi:"san"`
	// Secret for storing server certificate. Any existing data will be overwritten.
	SecretName *string `pulumi:"secretName"`
	// Certificate K8S namespace. Omit to use default namespace.
	SecretNamespace *string `pulumi:"secretNamespace"`
}

// Defaults sets the appropriate defaults for AutomaticCertMethodResponse
func (val *AutomaticCertMethodResponse) Defaults() *AutomaticCertMethodResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Duration == nil {
		duration_ := "720h"
		tmp.Duration = &duration_
	}
	tmp.IssuerRef = *tmp.IssuerRef.Defaults()

	tmp.PrivateKey = tmp.PrivateKey.Defaults()

	if tmp.RenewBefore == nil {
		renewBefore_ := "240h"
		tmp.RenewBefore = &renewBefore_
	}
	return &tmp
}

// Automatic TLS server certificate management with cert-manager
type AutomaticCertMethodResponseOutput struct{ *pulumi.OutputState }

func (AutomaticCertMethodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticCertMethodResponse)(nil)).Elem()
}

func (o AutomaticCertMethodResponseOutput) ToAutomaticCertMethodResponseOutput() AutomaticCertMethodResponseOutput {
	return o
}

func (o AutomaticCertMethodResponseOutput) ToAutomaticCertMethodResponseOutputWithContext(ctx context.Context) AutomaticCertMethodResponseOutput {
	return o
}

// Lifetime of automatically-managed certificate.
func (o AutomaticCertMethodResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethodResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// cert-manager issuerRef.
func (o AutomaticCertMethodResponseOutput) IssuerRef() CertManagerIssuerRefResponseOutput {
	return o.ApplyT(func(v AutomaticCertMethodResponse) CertManagerIssuerRefResponse { return v.IssuerRef }).(CertManagerIssuerRefResponseOutput)
}

// Cert Manager private key.
func (o AutomaticCertMethodResponseOutput) PrivateKey() CertManagerPrivateKeyResponsePtrOutput {
	return o.ApplyT(func(v AutomaticCertMethodResponse) *CertManagerPrivateKeyResponse { return v.PrivateKey }).(CertManagerPrivateKeyResponsePtrOutput)
}

// When to begin renewing automatically-managed certificate.
func (o AutomaticCertMethodResponseOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethodResponse) *string { return v.RenewBefore }).(pulumi.StringPtrOutput)
}

// Additional SANs to include in the certificate.
func (o AutomaticCertMethodResponseOutput) San() SanForCertResponsePtrOutput {
	return o.ApplyT(func(v AutomaticCertMethodResponse) *SanForCertResponse { return v.San }).(SanForCertResponsePtrOutput)
}

// Secret for storing server certificate. Any existing data will be overwritten.
func (o AutomaticCertMethodResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethodResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// Certificate K8S namespace. Omit to use default namespace.
func (o AutomaticCertMethodResponseOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticCertMethodResponse) *string { return v.SecretNamespace }).(pulumi.StringPtrOutput)
}

type AutomaticCertMethodResponsePtrOutput struct{ *pulumi.OutputState }

func (AutomaticCertMethodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticCertMethodResponse)(nil)).Elem()
}

func (o AutomaticCertMethodResponsePtrOutput) ToAutomaticCertMethodResponsePtrOutput() AutomaticCertMethodResponsePtrOutput {
	return o
}

func (o AutomaticCertMethodResponsePtrOutput) ToAutomaticCertMethodResponsePtrOutputWithContext(ctx context.Context) AutomaticCertMethodResponsePtrOutput {
	return o
}

func (o AutomaticCertMethodResponsePtrOutput) Elem() AutomaticCertMethodResponseOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) AutomaticCertMethodResponse {
		if v != nil {
			return *v
		}
		var ret AutomaticCertMethodResponse
		return ret
	}).(AutomaticCertMethodResponseOutput)
}

// Lifetime of automatically-managed certificate.
func (o AutomaticCertMethodResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// cert-manager issuerRef.
func (o AutomaticCertMethodResponsePtrOutput) IssuerRef() CertManagerIssuerRefResponsePtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) *CertManagerIssuerRefResponse {
		if v == nil {
			return nil
		}
		return &v.IssuerRef
	}).(CertManagerIssuerRefResponsePtrOutput)
}

// Cert Manager private key.
func (o AutomaticCertMethodResponsePtrOutput) PrivateKey() CertManagerPrivateKeyResponsePtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) *CertManagerPrivateKeyResponse {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(CertManagerPrivateKeyResponsePtrOutput)
}

// When to begin renewing automatically-managed certificate.
func (o AutomaticCertMethodResponsePtrOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.RenewBefore
	}).(pulumi.StringPtrOutput)
}

// Additional SANs to include in the certificate.
func (o AutomaticCertMethodResponsePtrOutput) San() SanForCertResponsePtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) *SanForCertResponse {
		if v == nil {
			return nil
		}
		return v.San
	}).(SanForCertResponsePtrOutput)
}

// Secret for storing server certificate. Any existing data will be overwritten.
func (o AutomaticCertMethodResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Certificate K8S namespace. Omit to use default namespace.
func (o AutomaticCertMethodResponsePtrOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticCertMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretNamespace
	}).(pulumi.StringPtrOutput)
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type BackendChain struct {
	// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
	Partitions int `pulumi:"partitions"`
	// Redundancy Factor is desired numbers of broker instances in one chain.
	RedundancyFactor int `pulumi:"redundancyFactor"`
	// Defines whether disk transfer is enabled or not.
	TemporaryDiskTransferEnabled *bool `pulumi:"temporaryDiskTransferEnabled"`
	// Defines the percentage usage of buffer pool above which disk transfer will start.
	TemporaryDiskTransferHighWatermarkPercent *int `pulumi:"temporaryDiskTransferHighWatermarkPercent"`
	// Defines the percentage usage of buffer pool below which disk transfer will stop.
	TemporaryDiskTransferLowWatermarkPercent *int `pulumi:"temporaryDiskTransferLowWatermarkPercent"`
	// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
	TemporaryMaxBackendMemUsagePercent *int `pulumi:"temporaryMaxBackendMemUsagePercent"`
	// Defines the limits for resources of the backend instances of the MQTT broker.
	TemporaryResourceLimits *TemporaryResourceLimitsConfig `pulumi:"temporaryResourceLimits"`
	// Number of logical backend workers per pod.
	Workers *int `pulumi:"workers"`
}

// Defaults sets the appropriate defaults for BackendChain
func (val *BackendChain) Defaults() *BackendChain {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Workers == nil {
		workers_ := 1
		tmp.Workers = &workers_
	}
	return &tmp
}

// BackendChainInput is an input type that accepts BackendChainArgs and BackendChainOutput values.
// You can construct a concrete instance of `BackendChainInput` via:
//
//	BackendChainArgs{...}
type BackendChainInput interface {
	pulumi.Input

	ToBackendChainOutput() BackendChainOutput
	ToBackendChainOutputWithContext(context.Context) BackendChainOutput
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type BackendChainArgs struct {
	// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
	Partitions pulumi.IntInput `pulumi:"partitions"`
	// Redundancy Factor is desired numbers of broker instances in one chain.
	RedundancyFactor pulumi.IntInput `pulumi:"redundancyFactor"`
	// Defines whether disk transfer is enabled or not.
	TemporaryDiskTransferEnabled pulumi.BoolPtrInput `pulumi:"temporaryDiskTransferEnabled"`
	// Defines the percentage usage of buffer pool above which disk transfer will start.
	TemporaryDiskTransferHighWatermarkPercent pulumi.IntPtrInput `pulumi:"temporaryDiskTransferHighWatermarkPercent"`
	// Defines the percentage usage of buffer pool below which disk transfer will stop.
	TemporaryDiskTransferLowWatermarkPercent pulumi.IntPtrInput `pulumi:"temporaryDiskTransferLowWatermarkPercent"`
	// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
	TemporaryMaxBackendMemUsagePercent pulumi.IntPtrInput `pulumi:"temporaryMaxBackendMemUsagePercent"`
	// Defines the limits for resources of the backend instances of the MQTT broker.
	TemporaryResourceLimits TemporaryResourceLimitsConfigPtrInput `pulumi:"temporaryResourceLimits"`
	// Number of logical backend workers per pod.
	Workers pulumi.IntPtrInput `pulumi:"workers"`
}

// Defaults sets the appropriate defaults for BackendChainArgs
func (val *BackendChainArgs) Defaults() *BackendChainArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Workers == nil {
		tmp.Workers = pulumi.IntPtr(1)
	}
	return &tmp
}
func (BackendChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendChain)(nil)).Elem()
}

func (i BackendChainArgs) ToBackendChainOutput() BackendChainOutput {
	return i.ToBackendChainOutputWithContext(context.Background())
}

func (i BackendChainArgs) ToBackendChainOutputWithContext(ctx context.Context) BackendChainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendChainOutput)
}

func (i BackendChainArgs) ToBackendChainPtrOutput() BackendChainPtrOutput {
	return i.ToBackendChainPtrOutputWithContext(context.Background())
}

func (i BackendChainArgs) ToBackendChainPtrOutputWithContext(ctx context.Context) BackendChainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendChainOutput).ToBackendChainPtrOutputWithContext(ctx)
}

// BackendChainPtrInput is an input type that accepts BackendChainArgs, BackendChainPtr and BackendChainPtrOutput values.
// You can construct a concrete instance of `BackendChainPtrInput` via:
//
//	        BackendChainArgs{...}
//
//	or:
//
//	        nil
type BackendChainPtrInput interface {
	pulumi.Input

	ToBackendChainPtrOutput() BackendChainPtrOutput
	ToBackendChainPtrOutputWithContext(context.Context) BackendChainPtrOutput
}

type backendChainPtrType BackendChainArgs

func BackendChainPtr(v *BackendChainArgs) BackendChainPtrInput {
	return (*backendChainPtrType)(v)
}

func (*backendChainPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendChain)(nil)).Elem()
}

func (i *backendChainPtrType) ToBackendChainPtrOutput() BackendChainPtrOutput {
	return i.ToBackendChainPtrOutputWithContext(context.Background())
}

func (i *backendChainPtrType) ToBackendChainPtrOutputWithContext(ctx context.Context) BackendChainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendChainPtrOutput)
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type BackendChainOutput struct{ *pulumi.OutputState }

func (BackendChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendChain)(nil)).Elem()
}

func (o BackendChainOutput) ToBackendChainOutput() BackendChainOutput {
	return o
}

func (o BackendChainOutput) ToBackendChainOutputWithContext(ctx context.Context) BackendChainOutput {
	return o
}

func (o BackendChainOutput) ToBackendChainPtrOutput() BackendChainPtrOutput {
	return o.ToBackendChainPtrOutputWithContext(context.Background())
}

func (o BackendChainOutput) ToBackendChainPtrOutputWithContext(ctx context.Context) BackendChainPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendChain) *BackendChain {
		return &v
	}).(BackendChainPtrOutput)
}

// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
func (o BackendChainOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v BackendChain) int { return v.Partitions }).(pulumi.IntOutput)
}

// Redundancy Factor is desired numbers of broker instances in one chain.
func (o BackendChainOutput) RedundancyFactor() pulumi.IntOutput {
	return o.ApplyT(func(v BackendChain) int { return v.RedundancyFactor }).(pulumi.IntOutput)
}

// Defines whether disk transfer is enabled or not.
func (o BackendChainOutput) TemporaryDiskTransferEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendChain) *bool { return v.TemporaryDiskTransferEnabled }).(pulumi.BoolPtrOutput)
}

// Defines the percentage usage of buffer pool above which disk transfer will start.
func (o BackendChainOutput) TemporaryDiskTransferHighWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChain) *int { return v.TemporaryDiskTransferHighWatermarkPercent }).(pulumi.IntPtrOutput)
}

// Defines the percentage usage of buffer pool below which disk transfer will stop.
func (o BackendChainOutput) TemporaryDiskTransferLowWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChain) *int { return v.TemporaryDiskTransferLowWatermarkPercent }).(pulumi.IntPtrOutput)
}

// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
func (o BackendChainOutput) TemporaryMaxBackendMemUsagePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChain) *int { return v.TemporaryMaxBackendMemUsagePercent }).(pulumi.IntPtrOutput)
}

// Defines the limits for resources of the backend instances of the MQTT broker.
func (o BackendChainOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigPtrOutput {
	return o.ApplyT(func(v BackendChain) *TemporaryResourceLimitsConfig { return v.TemporaryResourceLimits }).(TemporaryResourceLimitsConfigPtrOutput)
}

// Number of logical backend workers per pod.
func (o BackendChainOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChain) *int { return v.Workers }).(pulumi.IntPtrOutput)
}

type BackendChainPtrOutput struct{ *pulumi.OutputState }

func (BackendChainPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendChain)(nil)).Elem()
}

func (o BackendChainPtrOutput) ToBackendChainPtrOutput() BackendChainPtrOutput {
	return o
}

func (o BackendChainPtrOutput) ToBackendChainPtrOutputWithContext(ctx context.Context) BackendChainPtrOutput {
	return o
}

func (o BackendChainPtrOutput) Elem() BackendChainOutput {
	return o.ApplyT(func(v *BackendChain) BackendChain {
		if v != nil {
			return *v
		}
		var ret BackendChain
		return ret
	}).(BackendChainOutput)
}

// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
func (o BackendChainPtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChain) *int {
		if v == nil {
			return nil
		}
		return &v.Partitions
	}).(pulumi.IntPtrOutput)
}

// Redundancy Factor is desired numbers of broker instances in one chain.
func (o BackendChainPtrOutput) RedundancyFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChain) *int {
		if v == nil {
			return nil
		}
		return &v.RedundancyFactor
	}).(pulumi.IntPtrOutput)
}

// Defines whether disk transfer is enabled or not.
func (o BackendChainPtrOutput) TemporaryDiskTransferEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendChain) *bool {
		if v == nil {
			return nil
		}
		return v.TemporaryDiskTransferEnabled
	}).(pulumi.BoolPtrOutput)
}

// Defines the percentage usage of buffer pool above which disk transfer will start.
func (o BackendChainPtrOutput) TemporaryDiskTransferHighWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChain) *int {
		if v == nil {
			return nil
		}
		return v.TemporaryDiskTransferHighWatermarkPercent
	}).(pulumi.IntPtrOutput)
}

// Defines the percentage usage of buffer pool below which disk transfer will stop.
func (o BackendChainPtrOutput) TemporaryDiskTransferLowWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChain) *int {
		if v == nil {
			return nil
		}
		return v.TemporaryDiskTransferLowWatermarkPercent
	}).(pulumi.IntPtrOutput)
}

// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
func (o BackendChainPtrOutput) TemporaryMaxBackendMemUsagePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChain) *int {
		if v == nil {
			return nil
		}
		return v.TemporaryMaxBackendMemUsagePercent
	}).(pulumi.IntPtrOutput)
}

// Defines the limits for resources of the backend instances of the MQTT broker.
func (o BackendChainPtrOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigPtrOutput {
	return o.ApplyT(func(v *BackendChain) *TemporaryResourceLimitsConfig {
		if v == nil {
			return nil
		}
		return v.TemporaryResourceLimits
	}).(TemporaryResourceLimitsConfigPtrOutput)
}

// Number of logical backend workers per pod.
func (o BackendChainPtrOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChain) *int {
		if v == nil {
			return nil
		}
		return v.Workers
	}).(pulumi.IntPtrOutput)
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type BackendChainResponse struct {
	// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
	Partitions int `pulumi:"partitions"`
	// Redundancy Factor is desired numbers of broker instances in one chain.
	RedundancyFactor int `pulumi:"redundancyFactor"`
	// Defines whether disk transfer is enabled or not.
	TemporaryDiskTransferEnabled *bool `pulumi:"temporaryDiskTransferEnabled"`
	// Defines the percentage usage of buffer pool above which disk transfer will start.
	TemporaryDiskTransferHighWatermarkPercent *int `pulumi:"temporaryDiskTransferHighWatermarkPercent"`
	// Defines the percentage usage of buffer pool below which disk transfer will stop.
	TemporaryDiskTransferLowWatermarkPercent *int `pulumi:"temporaryDiskTransferLowWatermarkPercent"`
	// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
	TemporaryMaxBackendMemUsagePercent *int `pulumi:"temporaryMaxBackendMemUsagePercent"`
	// Defines the limits for resources of the backend instances of the MQTT broker.
	TemporaryResourceLimits *TemporaryResourceLimitsConfigResponse `pulumi:"temporaryResourceLimits"`
	// Number of logical backend workers per pod.
	Workers *int `pulumi:"workers"`
}

// Defaults sets the appropriate defaults for BackendChainResponse
func (val *BackendChainResponse) Defaults() *BackendChainResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Workers == nil {
		workers_ := 1
		tmp.Workers = &workers_
	}
	return &tmp
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type BackendChainResponseOutput struct{ *pulumi.OutputState }

func (BackendChainResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendChainResponse)(nil)).Elem()
}

func (o BackendChainResponseOutput) ToBackendChainResponseOutput() BackendChainResponseOutput {
	return o
}

func (o BackendChainResponseOutput) ToBackendChainResponseOutputWithContext(ctx context.Context) BackendChainResponseOutput {
	return o
}

// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
func (o BackendChainResponseOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v BackendChainResponse) int { return v.Partitions }).(pulumi.IntOutput)
}

// Redundancy Factor is desired numbers of broker instances in one chain.
func (o BackendChainResponseOutput) RedundancyFactor() pulumi.IntOutput {
	return o.ApplyT(func(v BackendChainResponse) int { return v.RedundancyFactor }).(pulumi.IntOutput)
}

// Defines whether disk transfer is enabled or not.
func (o BackendChainResponseOutput) TemporaryDiskTransferEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendChainResponse) *bool { return v.TemporaryDiskTransferEnabled }).(pulumi.BoolPtrOutput)
}

// Defines the percentage usage of buffer pool above which disk transfer will start.
func (o BackendChainResponseOutput) TemporaryDiskTransferHighWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChainResponse) *int { return v.TemporaryDiskTransferHighWatermarkPercent }).(pulumi.IntPtrOutput)
}

// Defines the percentage usage of buffer pool below which disk transfer will stop.
func (o BackendChainResponseOutput) TemporaryDiskTransferLowWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChainResponse) *int { return v.TemporaryDiskTransferLowWatermarkPercent }).(pulumi.IntPtrOutput)
}

// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
func (o BackendChainResponseOutput) TemporaryMaxBackendMemUsagePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChainResponse) *int { return v.TemporaryMaxBackendMemUsagePercent }).(pulumi.IntPtrOutput)
}

// Defines the limits for resources of the backend instances of the MQTT broker.
func (o BackendChainResponseOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigResponsePtrOutput {
	return o.ApplyT(func(v BackendChainResponse) *TemporaryResourceLimitsConfigResponse { return v.TemporaryResourceLimits }).(TemporaryResourceLimitsConfigResponsePtrOutput)
}

// Number of logical backend workers per pod.
func (o BackendChainResponseOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendChainResponse) *int { return v.Workers }).(pulumi.IntPtrOutput)
}

type BackendChainResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendChainResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendChainResponse)(nil)).Elem()
}

func (o BackendChainResponsePtrOutput) ToBackendChainResponsePtrOutput() BackendChainResponsePtrOutput {
	return o
}

func (o BackendChainResponsePtrOutput) ToBackendChainResponsePtrOutputWithContext(ctx context.Context) BackendChainResponsePtrOutput {
	return o
}

func (o BackendChainResponsePtrOutput) Elem() BackendChainResponseOutput {
	return o.ApplyT(func(v *BackendChainResponse) BackendChainResponse {
		if v != nil {
			return *v
		}
		var ret BackendChainResponse
		return ret
	}).(BackendChainResponseOutput)
}

// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
func (o BackendChainResponsePtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Partitions
	}).(pulumi.IntPtrOutput)
}

// Redundancy Factor is desired numbers of broker instances in one chain.
func (o BackendChainResponsePtrOutput) RedundancyFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RedundancyFactor
	}).(pulumi.IntPtrOutput)
}

// Defines whether disk transfer is enabled or not.
func (o BackendChainResponsePtrOutput) TemporaryDiskTransferEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TemporaryDiskTransferEnabled
	}).(pulumi.BoolPtrOutput)
}

// Defines the percentage usage of buffer pool above which disk transfer will start.
func (o BackendChainResponsePtrOutput) TemporaryDiskTransferHighWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *int {
		if v == nil {
			return nil
		}
		return v.TemporaryDiskTransferHighWatermarkPercent
	}).(pulumi.IntPtrOutput)
}

// Defines the percentage usage of buffer pool below which disk transfer will stop.
func (o BackendChainResponsePtrOutput) TemporaryDiskTransferLowWatermarkPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *int {
		if v == nil {
			return nil
		}
		return v.TemporaryDiskTransferLowWatermarkPercent
	}).(pulumi.IntPtrOutput)
}

// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
func (o BackendChainResponsePtrOutput) TemporaryMaxBackendMemUsagePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *int {
		if v == nil {
			return nil
		}
		return v.TemporaryMaxBackendMemUsagePercent
	}).(pulumi.IntPtrOutput)
}

// Defines the limits for resources of the backend instances of the MQTT broker.
func (o BackendChainResponsePtrOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigResponsePtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *TemporaryResourceLimitsConfigResponse {
		if v == nil {
			return nil
		}
		return v.TemporaryResourceLimits
	}).(TemporaryResourceLimitsConfigResponsePtrOutput)
}

// Number of logical backend workers per pod.
func (o BackendChainResponsePtrOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendChainResponse) *int {
		if v == nil {
			return nil
		}
		return v.Workers
	}).(pulumi.IntPtrOutput)
}

// Custom Authentication properties
type BrokerAuthenticatorCustomAuth struct {
	// X509 Custom Auth type details.
	X509 BrokerAuthenticatorCustomAuthX509 `pulumi:"x509"`
}

// BrokerAuthenticatorCustomAuthInput is an input type that accepts BrokerAuthenticatorCustomAuthArgs and BrokerAuthenticatorCustomAuthOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorCustomAuthInput` via:
//
//	BrokerAuthenticatorCustomAuthArgs{...}
type BrokerAuthenticatorCustomAuthInput interface {
	pulumi.Input

	ToBrokerAuthenticatorCustomAuthOutput() BrokerAuthenticatorCustomAuthOutput
	ToBrokerAuthenticatorCustomAuthOutputWithContext(context.Context) BrokerAuthenticatorCustomAuthOutput
}

// Custom Authentication properties
type BrokerAuthenticatorCustomAuthArgs struct {
	// X509 Custom Auth type details.
	X509 BrokerAuthenticatorCustomAuthX509Input `pulumi:"x509"`
}

func (BrokerAuthenticatorCustomAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorCustomAuth)(nil)).Elem()
}

func (i BrokerAuthenticatorCustomAuthArgs) ToBrokerAuthenticatorCustomAuthOutput() BrokerAuthenticatorCustomAuthOutput {
	return i.ToBrokerAuthenticatorCustomAuthOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorCustomAuthArgs) ToBrokerAuthenticatorCustomAuthOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorCustomAuthOutput)
}

func (i BrokerAuthenticatorCustomAuthArgs) ToBrokerAuthenticatorCustomAuthPtrOutput() BrokerAuthenticatorCustomAuthPtrOutput {
	return i.ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorCustomAuthArgs) ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorCustomAuthOutput).ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(ctx)
}

// BrokerAuthenticatorCustomAuthPtrInput is an input type that accepts BrokerAuthenticatorCustomAuthArgs, BrokerAuthenticatorCustomAuthPtr and BrokerAuthenticatorCustomAuthPtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorCustomAuthPtrInput` via:
//
//	        BrokerAuthenticatorCustomAuthArgs{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorCustomAuthPtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorCustomAuthPtrOutput() BrokerAuthenticatorCustomAuthPtrOutput
	ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(context.Context) BrokerAuthenticatorCustomAuthPtrOutput
}

type brokerAuthenticatorCustomAuthPtrType BrokerAuthenticatorCustomAuthArgs

func BrokerAuthenticatorCustomAuthPtr(v *BrokerAuthenticatorCustomAuthArgs) BrokerAuthenticatorCustomAuthPtrInput {
	return (*brokerAuthenticatorCustomAuthPtrType)(v)
}

func (*brokerAuthenticatorCustomAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorCustomAuth)(nil)).Elem()
}

func (i *brokerAuthenticatorCustomAuthPtrType) ToBrokerAuthenticatorCustomAuthPtrOutput() BrokerAuthenticatorCustomAuthPtrOutput {
	return i.ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorCustomAuthPtrType) ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorCustomAuthPtrOutput)
}

// Custom Authentication properties
type BrokerAuthenticatorCustomAuthOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorCustomAuth)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthOutput) ToBrokerAuthenticatorCustomAuthOutput() BrokerAuthenticatorCustomAuthOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthOutput) ToBrokerAuthenticatorCustomAuthOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthOutput) ToBrokerAuthenticatorCustomAuthPtrOutput() BrokerAuthenticatorCustomAuthPtrOutput {
	return o.ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorCustomAuthOutput) ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorCustomAuth) *BrokerAuthenticatorCustomAuth {
		return &v
	}).(BrokerAuthenticatorCustomAuthPtrOutput)
}

// X509 Custom Auth type details.
func (o BrokerAuthenticatorCustomAuthOutput) X509() BrokerAuthenticatorCustomAuthX509Output {
	return o.ApplyT(func(v BrokerAuthenticatorCustomAuth) BrokerAuthenticatorCustomAuthX509 { return v.X509 }).(BrokerAuthenticatorCustomAuthX509Output)
}

type BrokerAuthenticatorCustomAuthPtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorCustomAuth)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthPtrOutput) ToBrokerAuthenticatorCustomAuthPtrOutput() BrokerAuthenticatorCustomAuthPtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthPtrOutput) ToBrokerAuthenticatorCustomAuthPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthPtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthPtrOutput) Elem() BrokerAuthenticatorCustomAuthOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuth) BrokerAuthenticatorCustomAuth {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorCustomAuth
		return ret
	}).(BrokerAuthenticatorCustomAuthOutput)
}

// X509 Custom Auth type details.
func (o BrokerAuthenticatorCustomAuthPtrOutput) X509() BrokerAuthenticatorCustomAuthX509PtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuth) *BrokerAuthenticatorCustomAuthX509 {
		if v == nil {
			return nil
		}
		return &v.X509
	}).(BrokerAuthenticatorCustomAuthX509PtrOutput)
}

// Custom Authentication properties
type BrokerAuthenticatorCustomAuthResponse struct {
	// X509 Custom Auth type details.
	X509 BrokerAuthenticatorCustomAuthX509Response `pulumi:"x509"`
}

// Custom Authentication properties
type BrokerAuthenticatorCustomAuthResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorCustomAuthResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthResponseOutput) ToBrokerAuthenticatorCustomAuthResponseOutput() BrokerAuthenticatorCustomAuthResponseOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthResponseOutput) ToBrokerAuthenticatorCustomAuthResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthResponseOutput {
	return o
}

// X509 Custom Auth type details.
func (o BrokerAuthenticatorCustomAuthResponseOutput) X509() BrokerAuthenticatorCustomAuthX509ResponseOutput {
	return o.ApplyT(func(v BrokerAuthenticatorCustomAuthResponse) BrokerAuthenticatorCustomAuthX509Response { return v.X509 }).(BrokerAuthenticatorCustomAuthX509ResponseOutput)
}

type BrokerAuthenticatorCustomAuthResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorCustomAuthResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthResponsePtrOutput) ToBrokerAuthenticatorCustomAuthResponsePtrOutput() BrokerAuthenticatorCustomAuthResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthResponsePtrOutput) ToBrokerAuthenticatorCustomAuthResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthResponsePtrOutput) Elem() BrokerAuthenticatorCustomAuthResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthResponse) BrokerAuthenticatorCustomAuthResponse {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorCustomAuthResponse
		return ret
	}).(BrokerAuthenticatorCustomAuthResponseOutput)
}

// X509 Custom Auth type details.
func (o BrokerAuthenticatorCustomAuthResponsePtrOutput) X509() BrokerAuthenticatorCustomAuthX509ResponsePtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthResponse) *BrokerAuthenticatorCustomAuthX509Response {
		if v == nil {
			return nil
		}
		return &v.X509
	}).(BrokerAuthenticatorCustomAuthX509ResponsePtrOutput)
}

// X509 Custom Authentication properties. NOTE - Enum only authenticator type supported at a time.
type BrokerAuthenticatorCustomAuthX509 struct {
	// Keyvault X509 secret properties.
	KeyVault *KeyVaultCertificateProperties `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// BrokerAuthenticatorCustomAuthX509Input is an input type that accepts BrokerAuthenticatorCustomAuthX509Args and BrokerAuthenticatorCustomAuthX509Output values.
// You can construct a concrete instance of `BrokerAuthenticatorCustomAuthX509Input` via:
//
//	BrokerAuthenticatorCustomAuthX509Args{...}
type BrokerAuthenticatorCustomAuthX509Input interface {
	pulumi.Input

	ToBrokerAuthenticatorCustomAuthX509Output() BrokerAuthenticatorCustomAuthX509Output
	ToBrokerAuthenticatorCustomAuthX509OutputWithContext(context.Context) BrokerAuthenticatorCustomAuthX509Output
}

// X509 Custom Authentication properties. NOTE - Enum only authenticator type supported at a time.
type BrokerAuthenticatorCustomAuthX509Args struct {
	// Keyvault X509 secret properties.
	KeyVault KeyVaultCertificatePropertiesPtrInput `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (BrokerAuthenticatorCustomAuthX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorCustomAuthX509)(nil)).Elem()
}

func (i BrokerAuthenticatorCustomAuthX509Args) ToBrokerAuthenticatorCustomAuthX509Output() BrokerAuthenticatorCustomAuthX509Output {
	return i.ToBrokerAuthenticatorCustomAuthX509OutputWithContext(context.Background())
}

func (i BrokerAuthenticatorCustomAuthX509Args) ToBrokerAuthenticatorCustomAuthX509OutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorCustomAuthX509Output)
}

func (i BrokerAuthenticatorCustomAuthX509Args) ToBrokerAuthenticatorCustomAuthX509PtrOutput() BrokerAuthenticatorCustomAuthX509PtrOutput {
	return i.ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorCustomAuthX509Args) ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorCustomAuthX509Output).ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(ctx)
}

// BrokerAuthenticatorCustomAuthX509PtrInput is an input type that accepts BrokerAuthenticatorCustomAuthX509Args, BrokerAuthenticatorCustomAuthX509Ptr and BrokerAuthenticatorCustomAuthX509PtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorCustomAuthX509PtrInput` via:
//
//	        BrokerAuthenticatorCustomAuthX509Args{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorCustomAuthX509PtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorCustomAuthX509PtrOutput() BrokerAuthenticatorCustomAuthX509PtrOutput
	ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(context.Context) BrokerAuthenticatorCustomAuthX509PtrOutput
}

type brokerAuthenticatorCustomAuthX509PtrType BrokerAuthenticatorCustomAuthX509Args

func BrokerAuthenticatorCustomAuthX509Ptr(v *BrokerAuthenticatorCustomAuthX509Args) BrokerAuthenticatorCustomAuthX509PtrInput {
	return (*brokerAuthenticatorCustomAuthX509PtrType)(v)
}

func (*brokerAuthenticatorCustomAuthX509PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorCustomAuthX509)(nil)).Elem()
}

func (i *brokerAuthenticatorCustomAuthX509PtrType) ToBrokerAuthenticatorCustomAuthX509PtrOutput() BrokerAuthenticatorCustomAuthX509PtrOutput {
	return i.ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorCustomAuthX509PtrType) ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorCustomAuthX509PtrOutput)
}

// X509 Custom Authentication properties. NOTE - Enum only authenticator type supported at a time.
type BrokerAuthenticatorCustomAuthX509Output struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorCustomAuthX509)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthX509Output) ToBrokerAuthenticatorCustomAuthX509Output() BrokerAuthenticatorCustomAuthX509Output {
	return o
}

func (o BrokerAuthenticatorCustomAuthX509Output) ToBrokerAuthenticatorCustomAuthX509OutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509Output {
	return o
}

func (o BrokerAuthenticatorCustomAuthX509Output) ToBrokerAuthenticatorCustomAuthX509PtrOutput() BrokerAuthenticatorCustomAuthX509PtrOutput {
	return o.ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorCustomAuthX509Output) ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorCustomAuthX509) *BrokerAuthenticatorCustomAuthX509 {
		return &v
	}).(BrokerAuthenticatorCustomAuthX509PtrOutput)
}

// Keyvault X509 secret properties.
func (o BrokerAuthenticatorCustomAuthX509Output) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorCustomAuthX509) *KeyVaultCertificateProperties { return v.KeyVault }).(KeyVaultCertificatePropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o BrokerAuthenticatorCustomAuthX509Output) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorCustomAuthX509) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorCustomAuthX509PtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthX509PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorCustomAuthX509)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthX509PtrOutput) ToBrokerAuthenticatorCustomAuthX509PtrOutput() BrokerAuthenticatorCustomAuthX509PtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthX509PtrOutput) ToBrokerAuthenticatorCustomAuthX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509PtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthX509PtrOutput) Elem() BrokerAuthenticatorCustomAuthX509Output {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthX509) BrokerAuthenticatorCustomAuthX509 {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorCustomAuthX509
		return ret
	}).(BrokerAuthenticatorCustomAuthX509Output)
}

// Keyvault X509 secret properties.
func (o BrokerAuthenticatorCustomAuthX509PtrOutput) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthX509) *KeyVaultCertificateProperties {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o BrokerAuthenticatorCustomAuthX509PtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthX509) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// X509 Custom Authentication properties. NOTE - Enum only authenticator type supported at a time.
type BrokerAuthenticatorCustomAuthX509Response struct {
	// Keyvault X509 secret properties.
	KeyVault *KeyVaultCertificatePropertiesResponse `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// X509 Custom Authentication properties. NOTE - Enum only authenticator type supported at a time.
type BrokerAuthenticatorCustomAuthX509ResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthX509ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorCustomAuthX509Response)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthX509ResponseOutput) ToBrokerAuthenticatorCustomAuthX509ResponseOutput() BrokerAuthenticatorCustomAuthX509ResponseOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthX509ResponseOutput) ToBrokerAuthenticatorCustomAuthX509ResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509ResponseOutput {
	return o
}

// Keyvault X509 secret properties.
func (o BrokerAuthenticatorCustomAuthX509ResponseOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorCustomAuthX509Response) *KeyVaultCertificatePropertiesResponse {
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o BrokerAuthenticatorCustomAuthX509ResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorCustomAuthX509Response) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorCustomAuthX509ResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorCustomAuthX509ResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorCustomAuthX509Response)(nil)).Elem()
}

func (o BrokerAuthenticatorCustomAuthX509ResponsePtrOutput) ToBrokerAuthenticatorCustomAuthX509ResponsePtrOutput() BrokerAuthenticatorCustomAuthX509ResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthX509ResponsePtrOutput) ToBrokerAuthenticatorCustomAuthX509ResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorCustomAuthX509ResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorCustomAuthX509ResponsePtrOutput) Elem() BrokerAuthenticatorCustomAuthX509ResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthX509Response) BrokerAuthenticatorCustomAuthX509Response {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorCustomAuthX509Response
		return ret
	}).(BrokerAuthenticatorCustomAuthX509ResponseOutput)
}

// Keyvault X509 secret properties.
func (o BrokerAuthenticatorCustomAuthX509ResponsePtrOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthX509Response) *KeyVaultCertificatePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o BrokerAuthenticatorCustomAuthX509ResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorCustomAuthX509Response) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Custom method for BrokerAuthentication
type BrokerAuthenticatorMethodCustom struct {
	// Custom Broker Authentication Method.
	Auth *BrokerAuthenticatorCustomAuth `pulumi:"auth"`
	// CA cert config map to use.
	CaCertConfigMap *string `pulumi:"caCertConfigMap"`
	// Endpoint to connect to.
	Endpoint string `pulumi:"endpoint"`
	// Configuration Headers to use.
	Headers map[string]string `pulumi:"headers"`
}

// BrokerAuthenticatorMethodCustomInput is an input type that accepts BrokerAuthenticatorMethodCustomArgs and BrokerAuthenticatorMethodCustomOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodCustomInput` via:
//
//	BrokerAuthenticatorMethodCustomArgs{...}
type BrokerAuthenticatorMethodCustomInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodCustomOutput() BrokerAuthenticatorMethodCustomOutput
	ToBrokerAuthenticatorMethodCustomOutputWithContext(context.Context) BrokerAuthenticatorMethodCustomOutput
}

// Custom method for BrokerAuthentication
type BrokerAuthenticatorMethodCustomArgs struct {
	// Custom Broker Authentication Method.
	Auth BrokerAuthenticatorCustomAuthPtrInput `pulumi:"auth"`
	// CA cert config map to use.
	CaCertConfigMap pulumi.StringPtrInput `pulumi:"caCertConfigMap"`
	// Endpoint to connect to.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Configuration Headers to use.
	Headers pulumi.StringMapInput `pulumi:"headers"`
}

func (BrokerAuthenticatorMethodCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodCustom)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodCustomArgs) ToBrokerAuthenticatorMethodCustomOutput() BrokerAuthenticatorMethodCustomOutput {
	return i.ToBrokerAuthenticatorMethodCustomOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodCustomArgs) ToBrokerAuthenticatorMethodCustomOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodCustomOutput)
}

func (i BrokerAuthenticatorMethodCustomArgs) ToBrokerAuthenticatorMethodCustomPtrOutput() BrokerAuthenticatorMethodCustomPtrOutput {
	return i.ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodCustomArgs) ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodCustomOutput).ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(ctx)
}

// BrokerAuthenticatorMethodCustomPtrInput is an input type that accepts BrokerAuthenticatorMethodCustomArgs, BrokerAuthenticatorMethodCustomPtr and BrokerAuthenticatorMethodCustomPtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodCustomPtrInput` via:
//
//	        BrokerAuthenticatorMethodCustomArgs{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorMethodCustomPtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodCustomPtrOutput() BrokerAuthenticatorMethodCustomPtrOutput
	ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(context.Context) BrokerAuthenticatorMethodCustomPtrOutput
}

type brokerAuthenticatorMethodCustomPtrType BrokerAuthenticatorMethodCustomArgs

func BrokerAuthenticatorMethodCustomPtr(v *BrokerAuthenticatorMethodCustomArgs) BrokerAuthenticatorMethodCustomPtrInput {
	return (*brokerAuthenticatorMethodCustomPtrType)(v)
}

func (*brokerAuthenticatorMethodCustomPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodCustom)(nil)).Elem()
}

func (i *brokerAuthenticatorMethodCustomPtrType) ToBrokerAuthenticatorMethodCustomPtrOutput() BrokerAuthenticatorMethodCustomPtrOutput {
	return i.ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorMethodCustomPtrType) ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodCustomPtrOutput)
}

// Custom method for BrokerAuthentication
type BrokerAuthenticatorMethodCustomOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodCustom)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodCustomOutput) ToBrokerAuthenticatorMethodCustomOutput() BrokerAuthenticatorMethodCustomOutput {
	return o
}

func (o BrokerAuthenticatorMethodCustomOutput) ToBrokerAuthenticatorMethodCustomOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomOutput {
	return o
}

func (o BrokerAuthenticatorMethodCustomOutput) ToBrokerAuthenticatorMethodCustomPtrOutput() BrokerAuthenticatorMethodCustomPtrOutput {
	return o.ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorMethodCustomOutput) ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorMethodCustom) *BrokerAuthenticatorMethodCustom {
		return &v
	}).(BrokerAuthenticatorMethodCustomPtrOutput)
}

// Custom Broker Authentication Method.
func (o BrokerAuthenticatorMethodCustomOutput) Auth() BrokerAuthenticatorCustomAuthPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustom) *BrokerAuthenticatorCustomAuth { return v.Auth }).(BrokerAuthenticatorCustomAuthPtrOutput)
}

// CA cert config map to use.
func (o BrokerAuthenticatorMethodCustomOutput) CaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustom) *string { return v.CaCertConfigMap }).(pulumi.StringPtrOutput)
}

// Endpoint to connect to.
func (o BrokerAuthenticatorMethodCustomOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustom) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Configuration Headers to use.
func (o BrokerAuthenticatorMethodCustomOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustom) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

type BrokerAuthenticatorMethodCustomPtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodCustomPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodCustom)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodCustomPtrOutput) ToBrokerAuthenticatorMethodCustomPtrOutput() BrokerAuthenticatorMethodCustomPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodCustomPtrOutput) ToBrokerAuthenticatorMethodCustomPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodCustomPtrOutput) Elem() BrokerAuthenticatorMethodCustomOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustom) BrokerAuthenticatorMethodCustom {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodCustom
		return ret
	}).(BrokerAuthenticatorMethodCustomOutput)
}

// Custom Broker Authentication Method.
func (o BrokerAuthenticatorMethodCustomPtrOutput) Auth() BrokerAuthenticatorCustomAuthPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustom) *BrokerAuthenticatorCustomAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(BrokerAuthenticatorCustomAuthPtrOutput)
}

// CA cert config map to use.
func (o BrokerAuthenticatorMethodCustomPtrOutput) CaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustom) *string {
		if v == nil {
			return nil
		}
		return v.CaCertConfigMap
	}).(pulumi.StringPtrOutput)
}

// Endpoint to connect to.
func (o BrokerAuthenticatorMethodCustomPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustom) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Configuration Headers to use.
func (o BrokerAuthenticatorMethodCustomPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustom) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Custom method for BrokerAuthentication
type BrokerAuthenticatorMethodCustomResponse struct {
	// Custom Broker Authentication Method.
	Auth *BrokerAuthenticatorCustomAuthResponse `pulumi:"auth"`
	// CA cert config map to use.
	CaCertConfigMap *string `pulumi:"caCertConfigMap"`
	// Endpoint to connect to.
	Endpoint string `pulumi:"endpoint"`
	// Configuration Headers to use.
	Headers map[string]string `pulumi:"headers"`
}

// Custom method for BrokerAuthentication
type BrokerAuthenticatorMethodCustomResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodCustomResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodCustomResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodCustomResponseOutput) ToBrokerAuthenticatorMethodCustomResponseOutput() BrokerAuthenticatorMethodCustomResponseOutput {
	return o
}

func (o BrokerAuthenticatorMethodCustomResponseOutput) ToBrokerAuthenticatorMethodCustomResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomResponseOutput {
	return o
}

// Custom Broker Authentication Method.
func (o BrokerAuthenticatorMethodCustomResponseOutput) Auth() BrokerAuthenticatorCustomAuthResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustomResponse) *BrokerAuthenticatorCustomAuthResponse { return v.Auth }).(BrokerAuthenticatorCustomAuthResponsePtrOutput)
}

// CA cert config map to use.
func (o BrokerAuthenticatorMethodCustomResponseOutput) CaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustomResponse) *string { return v.CaCertConfigMap }).(pulumi.StringPtrOutput)
}

// Endpoint to connect to.
func (o BrokerAuthenticatorMethodCustomResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustomResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Configuration Headers to use.
func (o BrokerAuthenticatorMethodCustomResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodCustomResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

type BrokerAuthenticatorMethodCustomResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodCustomResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodCustomResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodCustomResponsePtrOutput) ToBrokerAuthenticatorMethodCustomResponsePtrOutput() BrokerAuthenticatorMethodCustomResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodCustomResponsePtrOutput) ToBrokerAuthenticatorMethodCustomResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodCustomResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodCustomResponsePtrOutput) Elem() BrokerAuthenticatorMethodCustomResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustomResponse) BrokerAuthenticatorMethodCustomResponse {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodCustomResponse
		return ret
	}).(BrokerAuthenticatorMethodCustomResponseOutput)
}

// Custom Broker Authentication Method.
func (o BrokerAuthenticatorMethodCustomResponsePtrOutput) Auth() BrokerAuthenticatorCustomAuthResponsePtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustomResponse) *BrokerAuthenticatorCustomAuthResponse {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(BrokerAuthenticatorCustomAuthResponsePtrOutput)
}

// CA cert config map to use.
func (o BrokerAuthenticatorMethodCustomResponsePtrOutput) CaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustomResponse) *string {
		if v == nil {
			return nil
		}
		return v.CaCertConfigMap
	}).(pulumi.StringPtrOutput)
}

// Endpoint to connect to.
func (o BrokerAuthenticatorMethodCustomResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustomResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Configuration Headers to use.
func (o BrokerAuthenticatorMethodCustomResponsePtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodCustomResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Service Account Token for BrokerAuthentication
type BrokerAuthenticatorMethodSat struct {
	// List of allowed audience.
	Audiences []string `pulumi:"audiences"`
}

// BrokerAuthenticatorMethodSatInput is an input type that accepts BrokerAuthenticatorMethodSatArgs and BrokerAuthenticatorMethodSatOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodSatInput` via:
//
//	BrokerAuthenticatorMethodSatArgs{...}
type BrokerAuthenticatorMethodSatInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodSatOutput() BrokerAuthenticatorMethodSatOutput
	ToBrokerAuthenticatorMethodSatOutputWithContext(context.Context) BrokerAuthenticatorMethodSatOutput
}

// Service Account Token for BrokerAuthentication
type BrokerAuthenticatorMethodSatArgs struct {
	// List of allowed audience.
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
}

func (BrokerAuthenticatorMethodSatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodSat)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodSatArgs) ToBrokerAuthenticatorMethodSatOutput() BrokerAuthenticatorMethodSatOutput {
	return i.ToBrokerAuthenticatorMethodSatOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodSatArgs) ToBrokerAuthenticatorMethodSatOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodSatOutput)
}

func (i BrokerAuthenticatorMethodSatArgs) ToBrokerAuthenticatorMethodSatPtrOutput() BrokerAuthenticatorMethodSatPtrOutput {
	return i.ToBrokerAuthenticatorMethodSatPtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodSatArgs) ToBrokerAuthenticatorMethodSatPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodSatOutput).ToBrokerAuthenticatorMethodSatPtrOutputWithContext(ctx)
}

// BrokerAuthenticatorMethodSatPtrInput is an input type that accepts BrokerAuthenticatorMethodSatArgs, BrokerAuthenticatorMethodSatPtr and BrokerAuthenticatorMethodSatPtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodSatPtrInput` via:
//
//	        BrokerAuthenticatorMethodSatArgs{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorMethodSatPtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodSatPtrOutput() BrokerAuthenticatorMethodSatPtrOutput
	ToBrokerAuthenticatorMethodSatPtrOutputWithContext(context.Context) BrokerAuthenticatorMethodSatPtrOutput
}

type brokerAuthenticatorMethodSatPtrType BrokerAuthenticatorMethodSatArgs

func BrokerAuthenticatorMethodSatPtr(v *BrokerAuthenticatorMethodSatArgs) BrokerAuthenticatorMethodSatPtrInput {
	return (*brokerAuthenticatorMethodSatPtrType)(v)
}

func (*brokerAuthenticatorMethodSatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodSat)(nil)).Elem()
}

func (i *brokerAuthenticatorMethodSatPtrType) ToBrokerAuthenticatorMethodSatPtrOutput() BrokerAuthenticatorMethodSatPtrOutput {
	return i.ToBrokerAuthenticatorMethodSatPtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorMethodSatPtrType) ToBrokerAuthenticatorMethodSatPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodSatPtrOutput)
}

// Service Account Token for BrokerAuthentication
type BrokerAuthenticatorMethodSatOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodSat)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSatOutput) ToBrokerAuthenticatorMethodSatOutput() BrokerAuthenticatorMethodSatOutput {
	return o
}

func (o BrokerAuthenticatorMethodSatOutput) ToBrokerAuthenticatorMethodSatOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatOutput {
	return o
}

func (o BrokerAuthenticatorMethodSatOutput) ToBrokerAuthenticatorMethodSatPtrOutput() BrokerAuthenticatorMethodSatPtrOutput {
	return o.ToBrokerAuthenticatorMethodSatPtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorMethodSatOutput) ToBrokerAuthenticatorMethodSatPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorMethodSat) *BrokerAuthenticatorMethodSat {
		return &v
	}).(BrokerAuthenticatorMethodSatPtrOutput)
}

// List of allowed audience.
func (o BrokerAuthenticatorMethodSatOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSat) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

type BrokerAuthenticatorMethodSatPtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodSat)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSatPtrOutput) ToBrokerAuthenticatorMethodSatPtrOutput() BrokerAuthenticatorMethodSatPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSatPtrOutput) ToBrokerAuthenticatorMethodSatPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSatPtrOutput) Elem() BrokerAuthenticatorMethodSatOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSat) BrokerAuthenticatorMethodSat {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodSat
		return ret
	}).(BrokerAuthenticatorMethodSatOutput)
}

// List of allowed audience.
func (o BrokerAuthenticatorMethodSatPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSat) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Service Account Token for BrokerAuthentication
type BrokerAuthenticatorMethodSatResponse struct {
	// List of allowed audience.
	Audiences []string `pulumi:"audiences"`
}

// Service Account Token for BrokerAuthentication
type BrokerAuthenticatorMethodSatResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodSatResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSatResponseOutput) ToBrokerAuthenticatorMethodSatResponseOutput() BrokerAuthenticatorMethodSatResponseOutput {
	return o
}

func (o BrokerAuthenticatorMethodSatResponseOutput) ToBrokerAuthenticatorMethodSatResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatResponseOutput {
	return o
}

// List of allowed audience.
func (o BrokerAuthenticatorMethodSatResponseOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSatResponse) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

type BrokerAuthenticatorMethodSatResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodSatResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSatResponsePtrOutput) ToBrokerAuthenticatorMethodSatResponsePtrOutput() BrokerAuthenticatorMethodSatResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSatResponsePtrOutput) ToBrokerAuthenticatorMethodSatResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSatResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSatResponsePtrOutput) Elem() BrokerAuthenticatorMethodSatResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSatResponse) BrokerAuthenticatorMethodSatResponse {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodSatResponse
		return ret
	}).(BrokerAuthenticatorMethodSatResponseOutput)
}

// List of allowed audience.
func (o BrokerAuthenticatorMethodSatResponsePtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSatResponse) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// SVID for BrokerAuthentication
type BrokerAuthenticatorMethodSvid struct {
	// Mounted socket path for spiffe agent.
	AgentSocketPath string `pulumi:"agentSocketPath"`
	// Maximum number of re-tries to fetch identity.
	IdentityMaxRetry *float64 `pulumi:"identityMaxRetry"`
	// Maximum time to wait before fetching identity again.
	IdentityWaitRetryMs *float64 `pulumi:"identityWaitRetryMs"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodSvid
func (val *BrokerAuthenticatorMethodSvid) Defaults() *BrokerAuthenticatorMethodSvid {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IdentityMaxRetry == nil {
		identityMaxRetry_ := 3.0
		tmp.IdentityMaxRetry = &identityMaxRetry_
	}
	if tmp.IdentityWaitRetryMs == nil {
		identityWaitRetryMs_ := 5000.0
		tmp.IdentityWaitRetryMs = &identityWaitRetryMs_
	}
	return &tmp
}

// BrokerAuthenticatorMethodSvidInput is an input type that accepts BrokerAuthenticatorMethodSvidArgs and BrokerAuthenticatorMethodSvidOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodSvidInput` via:
//
//	BrokerAuthenticatorMethodSvidArgs{...}
type BrokerAuthenticatorMethodSvidInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodSvidOutput() BrokerAuthenticatorMethodSvidOutput
	ToBrokerAuthenticatorMethodSvidOutputWithContext(context.Context) BrokerAuthenticatorMethodSvidOutput
}

// SVID for BrokerAuthentication
type BrokerAuthenticatorMethodSvidArgs struct {
	// Mounted socket path for spiffe agent.
	AgentSocketPath pulumi.StringInput `pulumi:"agentSocketPath"`
	// Maximum number of re-tries to fetch identity.
	IdentityMaxRetry pulumi.Float64PtrInput `pulumi:"identityMaxRetry"`
	// Maximum time to wait before fetching identity again.
	IdentityWaitRetryMs pulumi.Float64PtrInput `pulumi:"identityWaitRetryMs"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodSvidArgs
func (val *BrokerAuthenticatorMethodSvidArgs) Defaults() *BrokerAuthenticatorMethodSvidArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IdentityMaxRetry == nil {
		tmp.IdentityMaxRetry = pulumi.Float64Ptr(3.0)
	}
	if tmp.IdentityWaitRetryMs == nil {
		tmp.IdentityWaitRetryMs = pulumi.Float64Ptr(5000.0)
	}
	return &tmp
}
func (BrokerAuthenticatorMethodSvidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodSvid)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodSvidArgs) ToBrokerAuthenticatorMethodSvidOutput() BrokerAuthenticatorMethodSvidOutput {
	return i.ToBrokerAuthenticatorMethodSvidOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodSvidArgs) ToBrokerAuthenticatorMethodSvidOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodSvidOutput)
}

func (i BrokerAuthenticatorMethodSvidArgs) ToBrokerAuthenticatorMethodSvidPtrOutput() BrokerAuthenticatorMethodSvidPtrOutput {
	return i.ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodSvidArgs) ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodSvidOutput).ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(ctx)
}

// BrokerAuthenticatorMethodSvidPtrInput is an input type that accepts BrokerAuthenticatorMethodSvidArgs, BrokerAuthenticatorMethodSvidPtr and BrokerAuthenticatorMethodSvidPtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodSvidPtrInput` via:
//
//	        BrokerAuthenticatorMethodSvidArgs{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorMethodSvidPtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodSvidPtrOutput() BrokerAuthenticatorMethodSvidPtrOutput
	ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(context.Context) BrokerAuthenticatorMethodSvidPtrOutput
}

type brokerAuthenticatorMethodSvidPtrType BrokerAuthenticatorMethodSvidArgs

func BrokerAuthenticatorMethodSvidPtr(v *BrokerAuthenticatorMethodSvidArgs) BrokerAuthenticatorMethodSvidPtrInput {
	return (*brokerAuthenticatorMethodSvidPtrType)(v)
}

func (*brokerAuthenticatorMethodSvidPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodSvid)(nil)).Elem()
}

func (i *brokerAuthenticatorMethodSvidPtrType) ToBrokerAuthenticatorMethodSvidPtrOutput() BrokerAuthenticatorMethodSvidPtrOutput {
	return i.ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorMethodSvidPtrType) ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodSvidPtrOutput)
}

// SVID for BrokerAuthentication
type BrokerAuthenticatorMethodSvidOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSvidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodSvid)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSvidOutput) ToBrokerAuthenticatorMethodSvidOutput() BrokerAuthenticatorMethodSvidOutput {
	return o
}

func (o BrokerAuthenticatorMethodSvidOutput) ToBrokerAuthenticatorMethodSvidOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidOutput {
	return o
}

func (o BrokerAuthenticatorMethodSvidOutput) ToBrokerAuthenticatorMethodSvidPtrOutput() BrokerAuthenticatorMethodSvidPtrOutput {
	return o.ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorMethodSvidOutput) ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorMethodSvid) *BrokerAuthenticatorMethodSvid {
		return &v
	}).(BrokerAuthenticatorMethodSvidPtrOutput)
}

// Mounted socket path for spiffe agent.
func (o BrokerAuthenticatorMethodSvidOutput) AgentSocketPath() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSvid) string { return v.AgentSocketPath }).(pulumi.StringOutput)
}

// Maximum number of re-tries to fetch identity.
func (o BrokerAuthenticatorMethodSvidOutput) IdentityMaxRetry() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSvid) *float64 { return v.IdentityMaxRetry }).(pulumi.Float64PtrOutput)
}

// Maximum time to wait before fetching identity again.
func (o BrokerAuthenticatorMethodSvidOutput) IdentityWaitRetryMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSvid) *float64 { return v.IdentityWaitRetryMs }).(pulumi.Float64PtrOutput)
}

type BrokerAuthenticatorMethodSvidPtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSvidPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodSvid)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSvidPtrOutput) ToBrokerAuthenticatorMethodSvidPtrOutput() BrokerAuthenticatorMethodSvidPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSvidPtrOutput) ToBrokerAuthenticatorMethodSvidPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSvidPtrOutput) Elem() BrokerAuthenticatorMethodSvidOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvid) BrokerAuthenticatorMethodSvid {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodSvid
		return ret
	}).(BrokerAuthenticatorMethodSvidOutput)
}

// Mounted socket path for spiffe agent.
func (o BrokerAuthenticatorMethodSvidPtrOutput) AgentSocketPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvid) *string {
		if v == nil {
			return nil
		}
		return &v.AgentSocketPath
	}).(pulumi.StringPtrOutput)
}

// Maximum number of re-tries to fetch identity.
func (o BrokerAuthenticatorMethodSvidPtrOutput) IdentityMaxRetry() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvid) *float64 {
		if v == nil {
			return nil
		}
		return v.IdentityMaxRetry
	}).(pulumi.Float64PtrOutput)
}

// Maximum time to wait before fetching identity again.
func (o BrokerAuthenticatorMethodSvidPtrOutput) IdentityWaitRetryMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvid) *float64 {
		if v == nil {
			return nil
		}
		return v.IdentityWaitRetryMs
	}).(pulumi.Float64PtrOutput)
}

// SVID for BrokerAuthentication
type BrokerAuthenticatorMethodSvidResponse struct {
	// Mounted socket path for spiffe agent.
	AgentSocketPath string `pulumi:"agentSocketPath"`
	// Maximum number of re-tries to fetch identity.
	IdentityMaxRetry *float64 `pulumi:"identityMaxRetry"`
	// Maximum time to wait before fetching identity again.
	IdentityWaitRetryMs *float64 `pulumi:"identityWaitRetryMs"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodSvidResponse
func (val *BrokerAuthenticatorMethodSvidResponse) Defaults() *BrokerAuthenticatorMethodSvidResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IdentityMaxRetry == nil {
		identityMaxRetry_ := 3.0
		tmp.IdentityMaxRetry = &identityMaxRetry_
	}
	if tmp.IdentityWaitRetryMs == nil {
		identityWaitRetryMs_ := 5000.0
		tmp.IdentityWaitRetryMs = &identityWaitRetryMs_
	}
	return &tmp
}

// SVID for BrokerAuthentication
type BrokerAuthenticatorMethodSvidResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSvidResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodSvidResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSvidResponseOutput) ToBrokerAuthenticatorMethodSvidResponseOutput() BrokerAuthenticatorMethodSvidResponseOutput {
	return o
}

func (o BrokerAuthenticatorMethodSvidResponseOutput) ToBrokerAuthenticatorMethodSvidResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidResponseOutput {
	return o
}

// Mounted socket path for spiffe agent.
func (o BrokerAuthenticatorMethodSvidResponseOutput) AgentSocketPath() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSvidResponse) string { return v.AgentSocketPath }).(pulumi.StringOutput)
}

// Maximum number of re-tries to fetch identity.
func (o BrokerAuthenticatorMethodSvidResponseOutput) IdentityMaxRetry() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSvidResponse) *float64 { return v.IdentityMaxRetry }).(pulumi.Float64PtrOutput)
}

// Maximum time to wait before fetching identity again.
func (o BrokerAuthenticatorMethodSvidResponseOutput) IdentityWaitRetryMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodSvidResponse) *float64 { return v.IdentityWaitRetryMs }).(pulumi.Float64PtrOutput)
}

type BrokerAuthenticatorMethodSvidResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodSvidResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodSvidResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodSvidResponsePtrOutput) ToBrokerAuthenticatorMethodSvidResponsePtrOutput() BrokerAuthenticatorMethodSvidResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSvidResponsePtrOutput) ToBrokerAuthenticatorMethodSvidResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodSvidResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodSvidResponsePtrOutput) Elem() BrokerAuthenticatorMethodSvidResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvidResponse) BrokerAuthenticatorMethodSvidResponse {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodSvidResponse
		return ret
	}).(BrokerAuthenticatorMethodSvidResponseOutput)
}

// Mounted socket path for spiffe agent.
func (o BrokerAuthenticatorMethodSvidResponsePtrOutput) AgentSocketPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvidResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AgentSocketPath
	}).(pulumi.StringPtrOutput)
}

// Maximum number of re-tries to fetch identity.
func (o BrokerAuthenticatorMethodSvidResponsePtrOutput) IdentityMaxRetry() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvidResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.IdentityMaxRetry
	}).(pulumi.Float64PtrOutput)
}

// Maximum time to wait before fetching identity again.
func (o BrokerAuthenticatorMethodSvidResponsePtrOutput) IdentityWaitRetryMs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodSvidResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.IdentityWaitRetryMs
	}).(pulumi.Float64PtrOutput)
}

// UsernamePassword for BrokerAuthentication
type BrokerAuthenticatorMethodUsernamePassword struct {
	// Keyvault username password secret properties.
	KeyVault *KeyVaultSecretProperties `pulumi:"keyVault"`
	// Secret where username and password are stored.
	SecretName *string `pulumi:"secretName"`
}

// BrokerAuthenticatorMethodUsernamePasswordInput is an input type that accepts BrokerAuthenticatorMethodUsernamePasswordArgs and BrokerAuthenticatorMethodUsernamePasswordOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodUsernamePasswordInput` via:
//
//	BrokerAuthenticatorMethodUsernamePasswordArgs{...}
type BrokerAuthenticatorMethodUsernamePasswordInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodUsernamePasswordOutput() BrokerAuthenticatorMethodUsernamePasswordOutput
	ToBrokerAuthenticatorMethodUsernamePasswordOutputWithContext(context.Context) BrokerAuthenticatorMethodUsernamePasswordOutput
}

// UsernamePassword for BrokerAuthentication
type BrokerAuthenticatorMethodUsernamePasswordArgs struct {
	// Keyvault username password secret properties.
	KeyVault KeyVaultSecretPropertiesPtrInput `pulumi:"keyVault"`
	// Secret where username and password are stored.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (BrokerAuthenticatorMethodUsernamePasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodUsernamePassword)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodUsernamePasswordArgs) ToBrokerAuthenticatorMethodUsernamePasswordOutput() BrokerAuthenticatorMethodUsernamePasswordOutput {
	return i.ToBrokerAuthenticatorMethodUsernamePasswordOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodUsernamePasswordArgs) ToBrokerAuthenticatorMethodUsernamePasswordOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodUsernamePasswordOutput)
}

func (i BrokerAuthenticatorMethodUsernamePasswordArgs) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutput() BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return i.ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodUsernamePasswordArgs) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodUsernamePasswordOutput).ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(ctx)
}

// BrokerAuthenticatorMethodUsernamePasswordPtrInput is an input type that accepts BrokerAuthenticatorMethodUsernamePasswordArgs, BrokerAuthenticatorMethodUsernamePasswordPtr and BrokerAuthenticatorMethodUsernamePasswordPtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodUsernamePasswordPtrInput` via:
//
//	        BrokerAuthenticatorMethodUsernamePasswordArgs{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorMethodUsernamePasswordPtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodUsernamePasswordPtrOutput() BrokerAuthenticatorMethodUsernamePasswordPtrOutput
	ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(context.Context) BrokerAuthenticatorMethodUsernamePasswordPtrOutput
}

type brokerAuthenticatorMethodUsernamePasswordPtrType BrokerAuthenticatorMethodUsernamePasswordArgs

func BrokerAuthenticatorMethodUsernamePasswordPtr(v *BrokerAuthenticatorMethodUsernamePasswordArgs) BrokerAuthenticatorMethodUsernamePasswordPtrInput {
	return (*brokerAuthenticatorMethodUsernamePasswordPtrType)(v)
}

func (*brokerAuthenticatorMethodUsernamePasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodUsernamePassword)(nil)).Elem()
}

func (i *brokerAuthenticatorMethodUsernamePasswordPtrType) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutput() BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return i.ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorMethodUsernamePasswordPtrType) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodUsernamePasswordPtrOutput)
}

// UsernamePassword for BrokerAuthentication
type BrokerAuthenticatorMethodUsernamePasswordOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodUsernamePasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodUsernamePassword)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodUsernamePasswordOutput) ToBrokerAuthenticatorMethodUsernamePasswordOutput() BrokerAuthenticatorMethodUsernamePasswordOutput {
	return o
}

func (o BrokerAuthenticatorMethodUsernamePasswordOutput) ToBrokerAuthenticatorMethodUsernamePasswordOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordOutput {
	return o
}

func (o BrokerAuthenticatorMethodUsernamePasswordOutput) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutput() BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return o.ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorMethodUsernamePasswordOutput) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorMethodUsernamePassword) *BrokerAuthenticatorMethodUsernamePassword {
		return &v
	}).(BrokerAuthenticatorMethodUsernamePasswordPtrOutput)
}

// Keyvault username password secret properties.
func (o BrokerAuthenticatorMethodUsernamePasswordOutput) KeyVault() KeyVaultSecretPropertiesPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodUsernamePassword) *KeyVaultSecretProperties { return v.KeyVault }).(KeyVaultSecretPropertiesPtrOutput)
}

// Secret where username and password are stored.
func (o BrokerAuthenticatorMethodUsernamePasswordOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodUsernamePassword) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorMethodUsernamePasswordPtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodUsernamePasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodUsernamePassword)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodUsernamePasswordPtrOutput) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutput() BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodUsernamePasswordPtrOutput) ToBrokerAuthenticatorMethodUsernamePasswordPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodUsernamePasswordPtrOutput) Elem() BrokerAuthenticatorMethodUsernamePasswordOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodUsernamePassword) BrokerAuthenticatorMethodUsernamePassword {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodUsernamePassword
		return ret
	}).(BrokerAuthenticatorMethodUsernamePasswordOutput)
}

// Keyvault username password secret properties.
func (o BrokerAuthenticatorMethodUsernamePasswordPtrOutput) KeyVault() KeyVaultSecretPropertiesPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodUsernamePassword) *KeyVaultSecretProperties {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultSecretPropertiesPtrOutput)
}

// Secret where username and password are stored.
func (o BrokerAuthenticatorMethodUsernamePasswordPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// UsernamePassword for BrokerAuthentication
type BrokerAuthenticatorMethodUsernamePasswordResponse struct {
	// Keyvault username password secret properties.
	KeyVault *KeyVaultSecretPropertiesResponse `pulumi:"keyVault"`
	// Secret where username and password are stored.
	SecretName *string `pulumi:"secretName"`
}

// UsernamePassword for BrokerAuthentication
type BrokerAuthenticatorMethodUsernamePasswordResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodUsernamePasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodUsernamePasswordResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodUsernamePasswordResponseOutput) ToBrokerAuthenticatorMethodUsernamePasswordResponseOutput() BrokerAuthenticatorMethodUsernamePasswordResponseOutput {
	return o
}

func (o BrokerAuthenticatorMethodUsernamePasswordResponseOutput) ToBrokerAuthenticatorMethodUsernamePasswordResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordResponseOutput {
	return o
}

// Keyvault username password secret properties.
func (o BrokerAuthenticatorMethodUsernamePasswordResponseOutput) KeyVault() KeyVaultSecretPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodUsernamePasswordResponse) *KeyVaultSecretPropertiesResponse {
		return v.KeyVault
	}).(KeyVaultSecretPropertiesResponsePtrOutput)
}

// Secret where username and password are stored.
func (o BrokerAuthenticatorMethodUsernamePasswordResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodUsernamePasswordResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodUsernamePasswordResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput) ToBrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput() BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput) ToBrokerAuthenticatorMethodUsernamePasswordResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput) Elem() BrokerAuthenticatorMethodUsernamePasswordResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodUsernamePasswordResponse) BrokerAuthenticatorMethodUsernamePasswordResponse {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodUsernamePasswordResponse
		return ret
	}).(BrokerAuthenticatorMethodUsernamePasswordResponseOutput)
}

// Keyvault username password secret properties.
func (o BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput) KeyVault() KeyVaultSecretPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodUsernamePasswordResponse) *KeyVaultSecretPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultSecretPropertiesResponsePtrOutput)
}

// Secret where username and password are stored.
func (o BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodUsernamePasswordResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// X509 for BrokerAuthentication.
type BrokerAuthenticatorMethodX509 struct {
	// K8S Secret name to mount for username and password.
	Attributes *BrokerAuthenticatorMethodX509Attributes `pulumi:"attributes"`
	// Trusted client ca cert config map.
	TrustedClientCaCertConfigMap *string `pulumi:"trustedClientCaCertConfigMap"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodX509
func (val *BrokerAuthenticatorMethodX509) Defaults() *BrokerAuthenticatorMethodX509 {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TrustedClientCaCertConfigMap == nil {
		trustedClientCaCertConfigMap_ := "client-ca"
		tmp.TrustedClientCaCertConfigMap = &trustedClientCaCertConfigMap_
	}
	return &tmp
}

// BrokerAuthenticatorMethodX509Input is an input type that accepts BrokerAuthenticatorMethodX509Args and BrokerAuthenticatorMethodX509Output values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodX509Input` via:
//
//	BrokerAuthenticatorMethodX509Args{...}
type BrokerAuthenticatorMethodX509Input interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodX509Output() BrokerAuthenticatorMethodX509Output
	ToBrokerAuthenticatorMethodX509OutputWithContext(context.Context) BrokerAuthenticatorMethodX509Output
}

// X509 for BrokerAuthentication.
type BrokerAuthenticatorMethodX509Args struct {
	// K8S Secret name to mount for username and password.
	Attributes BrokerAuthenticatorMethodX509AttributesPtrInput `pulumi:"attributes"`
	// Trusted client ca cert config map.
	TrustedClientCaCertConfigMap pulumi.StringPtrInput `pulumi:"trustedClientCaCertConfigMap"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodX509Args
func (val *BrokerAuthenticatorMethodX509Args) Defaults() *BrokerAuthenticatorMethodX509Args {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TrustedClientCaCertConfigMap == nil {
		tmp.TrustedClientCaCertConfigMap = pulumi.StringPtr("client-ca")
	}
	return &tmp
}
func (BrokerAuthenticatorMethodX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodX509)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodX509Args) ToBrokerAuthenticatorMethodX509Output() BrokerAuthenticatorMethodX509Output {
	return i.ToBrokerAuthenticatorMethodX509OutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodX509Args) ToBrokerAuthenticatorMethodX509OutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodX509Output)
}

func (i BrokerAuthenticatorMethodX509Args) ToBrokerAuthenticatorMethodX509PtrOutput() BrokerAuthenticatorMethodX509PtrOutput {
	return i.ToBrokerAuthenticatorMethodX509PtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodX509Args) ToBrokerAuthenticatorMethodX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodX509Output).ToBrokerAuthenticatorMethodX509PtrOutputWithContext(ctx)
}

// BrokerAuthenticatorMethodX509PtrInput is an input type that accepts BrokerAuthenticatorMethodX509Args, BrokerAuthenticatorMethodX509Ptr and BrokerAuthenticatorMethodX509PtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodX509PtrInput` via:
//
//	        BrokerAuthenticatorMethodX509Args{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorMethodX509PtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodX509PtrOutput() BrokerAuthenticatorMethodX509PtrOutput
	ToBrokerAuthenticatorMethodX509PtrOutputWithContext(context.Context) BrokerAuthenticatorMethodX509PtrOutput
}

type brokerAuthenticatorMethodX509PtrType BrokerAuthenticatorMethodX509Args

func BrokerAuthenticatorMethodX509Ptr(v *BrokerAuthenticatorMethodX509Args) BrokerAuthenticatorMethodX509PtrInput {
	return (*brokerAuthenticatorMethodX509PtrType)(v)
}

func (*brokerAuthenticatorMethodX509PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodX509)(nil)).Elem()
}

func (i *brokerAuthenticatorMethodX509PtrType) ToBrokerAuthenticatorMethodX509PtrOutput() BrokerAuthenticatorMethodX509PtrOutput {
	return i.ToBrokerAuthenticatorMethodX509PtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorMethodX509PtrType) ToBrokerAuthenticatorMethodX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodX509PtrOutput)
}

// X509 for BrokerAuthentication.
type BrokerAuthenticatorMethodX509Output struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodX509)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509Output) ToBrokerAuthenticatorMethodX509Output() BrokerAuthenticatorMethodX509Output {
	return o
}

func (o BrokerAuthenticatorMethodX509Output) ToBrokerAuthenticatorMethodX509OutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509Output {
	return o
}

func (o BrokerAuthenticatorMethodX509Output) ToBrokerAuthenticatorMethodX509PtrOutput() BrokerAuthenticatorMethodX509PtrOutput {
	return o.ToBrokerAuthenticatorMethodX509PtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorMethodX509Output) ToBrokerAuthenticatorMethodX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorMethodX509) *BrokerAuthenticatorMethodX509 {
		return &v
	}).(BrokerAuthenticatorMethodX509PtrOutput)
}

// K8S Secret name to mount for username and password.
func (o BrokerAuthenticatorMethodX509Output) Attributes() BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509) *BrokerAuthenticatorMethodX509Attributes { return v.Attributes }).(BrokerAuthenticatorMethodX509AttributesPtrOutput)
}

// Trusted client ca cert config map.
func (o BrokerAuthenticatorMethodX509Output) TrustedClientCaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509) *string { return v.TrustedClientCaCertConfigMap }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorMethodX509PtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodX509)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509PtrOutput) ToBrokerAuthenticatorMethodX509PtrOutput() BrokerAuthenticatorMethodX509PtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509PtrOutput) ToBrokerAuthenticatorMethodX509PtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509PtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509PtrOutput) Elem() BrokerAuthenticatorMethodX509Output {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509) BrokerAuthenticatorMethodX509 {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodX509
		return ret
	}).(BrokerAuthenticatorMethodX509Output)
}

// K8S Secret name to mount for username and password.
func (o BrokerAuthenticatorMethodX509PtrOutput) Attributes() BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509) *BrokerAuthenticatorMethodX509Attributes {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(BrokerAuthenticatorMethodX509AttributesPtrOutput)
}

// Trusted client ca cert config map.
func (o BrokerAuthenticatorMethodX509PtrOutput) TrustedClientCaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509) *string {
		if v == nil {
			return nil
		}
		return v.TrustedClientCaCertConfigMap
	}).(pulumi.StringPtrOutput)
}

// BrokerAuthenticatorMethodX509Attributes properties. NOTE - Enum only type supported at a time.
type BrokerAuthenticatorMethodX509Attributes struct {
	// Keyvault x509 attributes secret properties.
	KeyVault *KeyVaultSecretProperties `pulumi:"keyVault"`
	// Secret where x509 attributes are stored.
	SecretName *string `pulumi:"secretName"`
}

// BrokerAuthenticatorMethodX509AttributesInput is an input type that accepts BrokerAuthenticatorMethodX509AttributesArgs and BrokerAuthenticatorMethodX509AttributesOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodX509AttributesInput` via:
//
//	BrokerAuthenticatorMethodX509AttributesArgs{...}
type BrokerAuthenticatorMethodX509AttributesInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodX509AttributesOutput() BrokerAuthenticatorMethodX509AttributesOutput
	ToBrokerAuthenticatorMethodX509AttributesOutputWithContext(context.Context) BrokerAuthenticatorMethodX509AttributesOutput
}

// BrokerAuthenticatorMethodX509Attributes properties. NOTE - Enum only type supported at a time.
type BrokerAuthenticatorMethodX509AttributesArgs struct {
	// Keyvault x509 attributes secret properties.
	KeyVault KeyVaultSecretPropertiesPtrInput `pulumi:"keyVault"`
	// Secret where x509 attributes are stored.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (BrokerAuthenticatorMethodX509AttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodX509Attributes)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodX509AttributesArgs) ToBrokerAuthenticatorMethodX509AttributesOutput() BrokerAuthenticatorMethodX509AttributesOutput {
	return i.ToBrokerAuthenticatorMethodX509AttributesOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodX509AttributesArgs) ToBrokerAuthenticatorMethodX509AttributesOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodX509AttributesOutput)
}

func (i BrokerAuthenticatorMethodX509AttributesArgs) ToBrokerAuthenticatorMethodX509AttributesPtrOutput() BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return i.ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodX509AttributesArgs) ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodX509AttributesOutput).ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(ctx)
}

// BrokerAuthenticatorMethodX509AttributesPtrInput is an input type that accepts BrokerAuthenticatorMethodX509AttributesArgs, BrokerAuthenticatorMethodX509AttributesPtr and BrokerAuthenticatorMethodX509AttributesPtrOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodX509AttributesPtrInput` via:
//
//	        BrokerAuthenticatorMethodX509AttributesArgs{...}
//
//	or:
//
//	        nil
type BrokerAuthenticatorMethodX509AttributesPtrInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodX509AttributesPtrOutput() BrokerAuthenticatorMethodX509AttributesPtrOutput
	ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(context.Context) BrokerAuthenticatorMethodX509AttributesPtrOutput
}

type brokerAuthenticatorMethodX509AttributesPtrType BrokerAuthenticatorMethodX509AttributesArgs

func BrokerAuthenticatorMethodX509AttributesPtr(v *BrokerAuthenticatorMethodX509AttributesArgs) BrokerAuthenticatorMethodX509AttributesPtrInput {
	return (*brokerAuthenticatorMethodX509AttributesPtrType)(v)
}

func (*brokerAuthenticatorMethodX509AttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodX509Attributes)(nil)).Elem()
}

func (i *brokerAuthenticatorMethodX509AttributesPtrType) ToBrokerAuthenticatorMethodX509AttributesPtrOutput() BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return i.ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(context.Background())
}

func (i *brokerAuthenticatorMethodX509AttributesPtrType) ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodX509AttributesPtrOutput)
}

// BrokerAuthenticatorMethodX509Attributes properties. NOTE - Enum only type supported at a time.
type BrokerAuthenticatorMethodX509AttributesOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509AttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodX509Attributes)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509AttributesOutput) ToBrokerAuthenticatorMethodX509AttributesOutput() BrokerAuthenticatorMethodX509AttributesOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509AttributesOutput) ToBrokerAuthenticatorMethodX509AttributesOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509AttributesOutput) ToBrokerAuthenticatorMethodX509AttributesPtrOutput() BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return o.ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(context.Background())
}

func (o BrokerAuthenticatorMethodX509AttributesOutput) ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerAuthenticatorMethodX509Attributes) *BrokerAuthenticatorMethodX509Attributes {
		return &v
	}).(BrokerAuthenticatorMethodX509AttributesPtrOutput)
}

// Keyvault x509 attributes secret properties.
func (o BrokerAuthenticatorMethodX509AttributesOutput) KeyVault() KeyVaultSecretPropertiesPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509Attributes) *KeyVaultSecretProperties { return v.KeyVault }).(KeyVaultSecretPropertiesPtrOutput)
}

// Secret where x509 attributes are stored.
func (o BrokerAuthenticatorMethodX509AttributesOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509Attributes) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorMethodX509AttributesPtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509AttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodX509Attributes)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509AttributesPtrOutput) ToBrokerAuthenticatorMethodX509AttributesPtrOutput() BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509AttributesPtrOutput) ToBrokerAuthenticatorMethodX509AttributesPtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesPtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509AttributesPtrOutput) Elem() BrokerAuthenticatorMethodX509AttributesOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509Attributes) BrokerAuthenticatorMethodX509Attributes {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodX509Attributes
		return ret
	}).(BrokerAuthenticatorMethodX509AttributesOutput)
}

// Keyvault x509 attributes secret properties.
func (o BrokerAuthenticatorMethodX509AttributesPtrOutput) KeyVault() KeyVaultSecretPropertiesPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509Attributes) *KeyVaultSecretProperties {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultSecretPropertiesPtrOutput)
}

// Secret where x509 attributes are stored.
func (o BrokerAuthenticatorMethodX509AttributesPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509Attributes) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// BrokerAuthenticatorMethodX509Attributes properties. NOTE - Enum only type supported at a time.
type BrokerAuthenticatorMethodX509AttributesResponse struct {
	// Keyvault x509 attributes secret properties.
	KeyVault *KeyVaultSecretPropertiesResponse `pulumi:"keyVault"`
	// Secret where x509 attributes are stored.
	SecretName *string `pulumi:"secretName"`
}

// BrokerAuthenticatorMethodX509Attributes properties. NOTE - Enum only type supported at a time.
type BrokerAuthenticatorMethodX509AttributesResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509AttributesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodX509AttributesResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509AttributesResponseOutput) ToBrokerAuthenticatorMethodX509AttributesResponseOutput() BrokerAuthenticatorMethodX509AttributesResponseOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509AttributesResponseOutput) ToBrokerAuthenticatorMethodX509AttributesResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesResponseOutput {
	return o
}

// Keyvault x509 attributes secret properties.
func (o BrokerAuthenticatorMethodX509AttributesResponseOutput) KeyVault() KeyVaultSecretPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509AttributesResponse) *KeyVaultSecretPropertiesResponse {
		return v.KeyVault
	}).(KeyVaultSecretPropertiesResponsePtrOutput)
}

// Secret where x509 attributes are stored.
func (o BrokerAuthenticatorMethodX509AttributesResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509AttributesResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorMethodX509AttributesResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509AttributesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodX509AttributesResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509AttributesResponsePtrOutput) ToBrokerAuthenticatorMethodX509AttributesResponsePtrOutput() BrokerAuthenticatorMethodX509AttributesResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509AttributesResponsePtrOutput) ToBrokerAuthenticatorMethodX509AttributesResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509AttributesResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509AttributesResponsePtrOutput) Elem() BrokerAuthenticatorMethodX509AttributesResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509AttributesResponse) BrokerAuthenticatorMethodX509AttributesResponse {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodX509AttributesResponse
		return ret
	}).(BrokerAuthenticatorMethodX509AttributesResponseOutput)
}

// Keyvault x509 attributes secret properties.
func (o BrokerAuthenticatorMethodX509AttributesResponsePtrOutput) KeyVault() KeyVaultSecretPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509AttributesResponse) *KeyVaultSecretPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultSecretPropertiesResponsePtrOutput)
}

// Secret where x509 attributes are stored.
func (o BrokerAuthenticatorMethodX509AttributesResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509AttributesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// X509 for BrokerAuthentication.
type BrokerAuthenticatorMethodX509Response struct {
	// K8S Secret name to mount for username and password.
	Attributes *BrokerAuthenticatorMethodX509AttributesResponse `pulumi:"attributes"`
	// Trusted client ca cert config map.
	TrustedClientCaCertConfigMap *string `pulumi:"trustedClientCaCertConfigMap"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodX509Response
func (val *BrokerAuthenticatorMethodX509Response) Defaults() *BrokerAuthenticatorMethodX509Response {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TrustedClientCaCertConfigMap == nil {
		trustedClientCaCertConfigMap_ := "client-ca"
		tmp.TrustedClientCaCertConfigMap = &trustedClientCaCertConfigMap_
	}
	return &tmp
}

// X509 for BrokerAuthentication.
type BrokerAuthenticatorMethodX509ResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodX509Response)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509ResponseOutput) ToBrokerAuthenticatorMethodX509ResponseOutput() BrokerAuthenticatorMethodX509ResponseOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509ResponseOutput) ToBrokerAuthenticatorMethodX509ResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509ResponseOutput {
	return o
}

// K8S Secret name to mount for username and password.
func (o BrokerAuthenticatorMethodX509ResponseOutput) Attributes() BrokerAuthenticatorMethodX509AttributesResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509Response) *BrokerAuthenticatorMethodX509AttributesResponse {
		return v.Attributes
	}).(BrokerAuthenticatorMethodX509AttributesResponsePtrOutput)
}

// Trusted client ca cert config map.
func (o BrokerAuthenticatorMethodX509ResponseOutput) TrustedClientCaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodX509Response) *string { return v.TrustedClientCaCertConfigMap }).(pulumi.StringPtrOutput)
}

type BrokerAuthenticatorMethodX509ResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodX509ResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthenticatorMethodX509Response)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodX509ResponsePtrOutput) ToBrokerAuthenticatorMethodX509ResponsePtrOutput() BrokerAuthenticatorMethodX509ResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509ResponsePtrOutput) ToBrokerAuthenticatorMethodX509ResponsePtrOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodX509ResponsePtrOutput {
	return o
}

func (o BrokerAuthenticatorMethodX509ResponsePtrOutput) Elem() BrokerAuthenticatorMethodX509ResponseOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509Response) BrokerAuthenticatorMethodX509Response {
		if v != nil {
			return *v
		}
		var ret BrokerAuthenticatorMethodX509Response
		return ret
	}).(BrokerAuthenticatorMethodX509ResponseOutput)
}

// K8S Secret name to mount for username and password.
func (o BrokerAuthenticatorMethodX509ResponsePtrOutput) Attributes() BrokerAuthenticatorMethodX509AttributesResponsePtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509Response) *BrokerAuthenticatorMethodX509AttributesResponse {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(BrokerAuthenticatorMethodX509AttributesResponsePtrOutput)
}

// Trusted client ca cert config map.
func (o BrokerAuthenticatorMethodX509ResponsePtrOutput) TrustedClientCaCertConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerAuthenticatorMethodX509Response) *string {
		if v == nil {
			return nil
		}
		return v.TrustedClientCaCertConfigMap
	}).(pulumi.StringPtrOutput)
}

// Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.
type BrokerAuthenticatorMethods struct {
	// Custom Authentication Method.
	Custom *BrokerAuthenticatorMethodCustom `pulumi:"custom"`
	// Service Account Token Method.
	Sat *BrokerAuthenticatorMethodSat `pulumi:"sat"`
	// Service Account Token Method.
	Svid *BrokerAuthenticatorMethodSvid `pulumi:"svid"`
	// UsernamePassword Method.
	UsernamePassword *BrokerAuthenticatorMethodUsernamePassword `pulumi:"usernamePassword"`
	// X509 Method.
	X509 *BrokerAuthenticatorMethodX509 `pulumi:"x509"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethods
func (val *BrokerAuthenticatorMethods) Defaults() *BrokerAuthenticatorMethods {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Svid = tmp.Svid.Defaults()

	tmp.X509 = tmp.X509.Defaults()

	return &tmp
}

// BrokerAuthenticatorMethodsInput is an input type that accepts BrokerAuthenticatorMethodsArgs and BrokerAuthenticatorMethodsOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodsInput` via:
//
//	BrokerAuthenticatorMethodsArgs{...}
type BrokerAuthenticatorMethodsInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodsOutput() BrokerAuthenticatorMethodsOutput
	ToBrokerAuthenticatorMethodsOutputWithContext(context.Context) BrokerAuthenticatorMethodsOutput
}

// Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.
type BrokerAuthenticatorMethodsArgs struct {
	// Custom Authentication Method.
	Custom BrokerAuthenticatorMethodCustomPtrInput `pulumi:"custom"`
	// Service Account Token Method.
	Sat BrokerAuthenticatorMethodSatPtrInput `pulumi:"sat"`
	// Service Account Token Method.
	Svid BrokerAuthenticatorMethodSvidPtrInput `pulumi:"svid"`
	// UsernamePassword Method.
	UsernamePassword BrokerAuthenticatorMethodUsernamePasswordPtrInput `pulumi:"usernamePassword"`
	// X509 Method.
	X509 BrokerAuthenticatorMethodX509PtrInput `pulumi:"x509"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodsArgs
func (val *BrokerAuthenticatorMethodsArgs) Defaults() *BrokerAuthenticatorMethodsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (BrokerAuthenticatorMethodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethods)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodsArgs) ToBrokerAuthenticatorMethodsOutput() BrokerAuthenticatorMethodsOutput {
	return i.ToBrokerAuthenticatorMethodsOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodsArgs) ToBrokerAuthenticatorMethodsOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodsOutput)
}

// BrokerAuthenticatorMethodsArrayInput is an input type that accepts BrokerAuthenticatorMethodsArray and BrokerAuthenticatorMethodsArrayOutput values.
// You can construct a concrete instance of `BrokerAuthenticatorMethodsArrayInput` via:
//
//	BrokerAuthenticatorMethodsArray{ BrokerAuthenticatorMethodsArgs{...} }
type BrokerAuthenticatorMethodsArrayInput interface {
	pulumi.Input

	ToBrokerAuthenticatorMethodsArrayOutput() BrokerAuthenticatorMethodsArrayOutput
	ToBrokerAuthenticatorMethodsArrayOutputWithContext(context.Context) BrokerAuthenticatorMethodsArrayOutput
}

type BrokerAuthenticatorMethodsArray []BrokerAuthenticatorMethodsInput

func (BrokerAuthenticatorMethodsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerAuthenticatorMethods)(nil)).Elem()
}

func (i BrokerAuthenticatorMethodsArray) ToBrokerAuthenticatorMethodsArrayOutput() BrokerAuthenticatorMethodsArrayOutput {
	return i.ToBrokerAuthenticatorMethodsArrayOutputWithContext(context.Background())
}

func (i BrokerAuthenticatorMethodsArray) ToBrokerAuthenticatorMethodsArrayOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthenticatorMethodsArrayOutput)
}

// Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.
type BrokerAuthenticatorMethodsOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethods)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodsOutput) ToBrokerAuthenticatorMethodsOutput() BrokerAuthenticatorMethodsOutput {
	return o
}

func (o BrokerAuthenticatorMethodsOutput) ToBrokerAuthenticatorMethodsOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodsOutput {
	return o
}

// Custom Authentication Method.
func (o BrokerAuthenticatorMethodsOutput) Custom() BrokerAuthenticatorMethodCustomPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethods) *BrokerAuthenticatorMethodCustom { return v.Custom }).(BrokerAuthenticatorMethodCustomPtrOutput)
}

// Service Account Token Method.
func (o BrokerAuthenticatorMethodsOutput) Sat() BrokerAuthenticatorMethodSatPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethods) *BrokerAuthenticatorMethodSat { return v.Sat }).(BrokerAuthenticatorMethodSatPtrOutput)
}

// Service Account Token Method.
func (o BrokerAuthenticatorMethodsOutput) Svid() BrokerAuthenticatorMethodSvidPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethods) *BrokerAuthenticatorMethodSvid { return v.Svid }).(BrokerAuthenticatorMethodSvidPtrOutput)
}

// UsernamePassword Method.
func (o BrokerAuthenticatorMethodsOutput) UsernamePassword() BrokerAuthenticatorMethodUsernamePasswordPtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethods) *BrokerAuthenticatorMethodUsernamePassword {
		return v.UsernamePassword
	}).(BrokerAuthenticatorMethodUsernamePasswordPtrOutput)
}

// X509 Method.
func (o BrokerAuthenticatorMethodsOutput) X509() BrokerAuthenticatorMethodX509PtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethods) *BrokerAuthenticatorMethodX509 { return v.X509 }).(BrokerAuthenticatorMethodX509PtrOutput)
}

type BrokerAuthenticatorMethodsArrayOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerAuthenticatorMethods)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodsArrayOutput) ToBrokerAuthenticatorMethodsArrayOutput() BrokerAuthenticatorMethodsArrayOutput {
	return o
}

func (o BrokerAuthenticatorMethodsArrayOutput) ToBrokerAuthenticatorMethodsArrayOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodsArrayOutput {
	return o
}

func (o BrokerAuthenticatorMethodsArrayOutput) Index(i pulumi.IntInput) BrokerAuthenticatorMethodsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerAuthenticatorMethods {
		return vs[0].([]BrokerAuthenticatorMethods)[vs[1].(int)]
	}).(BrokerAuthenticatorMethodsOutput)
}

// Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.
type BrokerAuthenticatorMethodsResponse struct {
	// Custom Authentication Method.
	Custom *BrokerAuthenticatorMethodCustomResponse `pulumi:"custom"`
	// Service Account Token Method.
	Sat *BrokerAuthenticatorMethodSatResponse `pulumi:"sat"`
	// Service Account Token Method.
	Svid *BrokerAuthenticatorMethodSvidResponse `pulumi:"svid"`
	// UsernamePassword Method.
	UsernamePassword *BrokerAuthenticatorMethodUsernamePasswordResponse `pulumi:"usernamePassword"`
	// X509 Method.
	X509 *BrokerAuthenticatorMethodX509Response `pulumi:"x509"`
}

// Defaults sets the appropriate defaults for BrokerAuthenticatorMethodsResponse
func (val *BrokerAuthenticatorMethodsResponse) Defaults() *BrokerAuthenticatorMethodsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Svid = tmp.Svid.Defaults()

	tmp.X509 = tmp.X509.Defaults()

	return &tmp
}

// Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.
type BrokerAuthenticatorMethodsResponseOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerAuthenticatorMethodsResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodsResponseOutput) ToBrokerAuthenticatorMethodsResponseOutput() BrokerAuthenticatorMethodsResponseOutput {
	return o
}

func (o BrokerAuthenticatorMethodsResponseOutput) ToBrokerAuthenticatorMethodsResponseOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodsResponseOutput {
	return o
}

// Custom Authentication Method.
func (o BrokerAuthenticatorMethodsResponseOutput) Custom() BrokerAuthenticatorMethodCustomResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodsResponse) *BrokerAuthenticatorMethodCustomResponse { return v.Custom }).(BrokerAuthenticatorMethodCustomResponsePtrOutput)
}

// Service Account Token Method.
func (o BrokerAuthenticatorMethodsResponseOutput) Sat() BrokerAuthenticatorMethodSatResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodsResponse) *BrokerAuthenticatorMethodSatResponse { return v.Sat }).(BrokerAuthenticatorMethodSatResponsePtrOutput)
}

// Service Account Token Method.
func (o BrokerAuthenticatorMethodsResponseOutput) Svid() BrokerAuthenticatorMethodSvidResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodsResponse) *BrokerAuthenticatorMethodSvidResponse { return v.Svid }).(BrokerAuthenticatorMethodSvidResponsePtrOutput)
}

// UsernamePassword Method.
func (o BrokerAuthenticatorMethodsResponseOutput) UsernamePassword() BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodsResponse) *BrokerAuthenticatorMethodUsernamePasswordResponse {
		return v.UsernamePassword
	}).(BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput)
}

// X509 Method.
func (o BrokerAuthenticatorMethodsResponseOutput) X509() BrokerAuthenticatorMethodX509ResponsePtrOutput {
	return o.ApplyT(func(v BrokerAuthenticatorMethodsResponse) *BrokerAuthenticatorMethodX509Response { return v.X509 }).(BrokerAuthenticatorMethodX509ResponsePtrOutput)
}

type BrokerAuthenticatorMethodsResponseArrayOutput struct{ *pulumi.OutputState }

func (BrokerAuthenticatorMethodsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerAuthenticatorMethodsResponse)(nil)).Elem()
}

func (o BrokerAuthenticatorMethodsResponseArrayOutput) ToBrokerAuthenticatorMethodsResponseArrayOutput() BrokerAuthenticatorMethodsResponseArrayOutput {
	return o
}

func (o BrokerAuthenticatorMethodsResponseArrayOutput) ToBrokerAuthenticatorMethodsResponseArrayOutputWithContext(ctx context.Context) BrokerAuthenticatorMethodsResponseArrayOutput {
	return o
}

func (o BrokerAuthenticatorMethodsResponseArrayOutput) Index(i pulumi.IntInput) BrokerAuthenticatorMethodsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerAuthenticatorMethodsResponse {
		return vs[0].([]BrokerAuthenticatorMethodsResponse)[vs[1].(int)]
	}).(BrokerAuthenticatorMethodsResponseOutput)
}

// Diagnostics setting specific to Broker
type BrokerDiagnostics struct {
	// Diagnostic Service endpoint
	DiagnosticServiceEndpoint *string `pulumi:"diagnosticServiceEndpoint"`
	// Knob to enable/disable metrics. Default = true
	EnableMetrics *bool `pulumi:"enableMetrics"`
	// Enable self check on Broker via Probe.
	EnableSelfCheck *bool `pulumi:"enableSelfCheck"`
	// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
	EnableSelfTracing *bool `pulumi:"enableSelfTracing"`
	// Knob to enable/disable entire tracing infrastructure.
	EnableTracing *bool `pulumi:"enableTracing"`
	// Format for the logs generated.
	LogFormat *string `pulumi:"logFormat"`
	// Log level for the Broker.
	LogLevel *string `pulumi:"logLevel"`
	// Maximum time for the CellMap to live.
	MaxCellMapLifetime *float64 `pulumi:"maxCellMapLifetime"`
	// Metric update frequency in seconds.
	MetricUpdateFrequencySeconds *float64 `pulumi:"metricUpdateFrequencySeconds"`
	// Probe Image to run.
	ProbeImage *string `pulumi:"probeImage"`
	// Frequency for the self check to run.
	SelfCheckFrequencySeconds *float64 `pulumi:"selfCheckFrequencySeconds"`
	// Time out period of the self check.
	SelfCheckTimeoutSeconds *float64 `pulumi:"selfCheckTimeoutSeconds"`
	// The frequency at which selfTrace should run.
	SelfTraceFrequencySeconds *float64 `pulumi:"selfTraceFrequencySeconds"`
	// The number of the spans generated by the Tracing.
	SpanChannelCapacity *float64 `pulumi:"spanChannelCapacity"`
}

// Defaults sets the appropriate defaults for BrokerDiagnostics
func (val *BrokerDiagnostics) Defaults() *BrokerDiagnostics {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableMetrics == nil {
		enableMetrics_ := true
		tmp.EnableMetrics = &enableMetrics_
	}
	if tmp.EnableSelfCheck == nil {
		enableSelfCheck_ := true
		tmp.EnableSelfCheck = &enableSelfCheck_
	}
	if tmp.EnableSelfTracing == nil {
		enableSelfTracing_ := true
		tmp.EnableSelfTracing = &enableSelfTracing_
	}
	if tmp.EnableTracing == nil {
		enableTracing_ := true
		tmp.EnableTracing = &enableTracing_
	}
	if tmp.LogFormat == nil {
		logFormat_ := "text"
		tmp.LogFormat = &logFormat_
	}
	if tmp.LogLevel == nil {
		logLevel_ := "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
		tmp.LogLevel = &logLevel_
	}
	if tmp.MaxCellMapLifetime == nil {
		maxCellMapLifetime_ := 60.0
		tmp.MaxCellMapLifetime = &maxCellMapLifetime_
	}
	if tmp.MetricUpdateFrequencySeconds == nil {
		metricUpdateFrequencySeconds_ := 30.0
		tmp.MetricUpdateFrequencySeconds = &metricUpdateFrequencySeconds_
	}
	if tmp.ProbeImage == nil {
		probeImage_ := "sample.azurecr.io/diagnostics-probe:0.5.0"
		tmp.ProbeImage = &probeImage_
	}
	if tmp.SelfCheckFrequencySeconds == nil {
		selfCheckFrequencySeconds_ := 30.0
		tmp.SelfCheckFrequencySeconds = &selfCheckFrequencySeconds_
	}
	if tmp.SelfCheckTimeoutSeconds == nil {
		selfCheckTimeoutSeconds_ := 15.0
		tmp.SelfCheckTimeoutSeconds = &selfCheckTimeoutSeconds_
	}
	if tmp.SelfTraceFrequencySeconds == nil {
		selfTraceFrequencySeconds_ := 30.0
		tmp.SelfTraceFrequencySeconds = &selfTraceFrequencySeconds_
	}
	if tmp.SpanChannelCapacity == nil {
		spanChannelCapacity_ := 1000.0
		tmp.SpanChannelCapacity = &spanChannelCapacity_
	}
	return &tmp
}

// BrokerDiagnosticsInput is an input type that accepts BrokerDiagnosticsArgs and BrokerDiagnosticsOutput values.
// You can construct a concrete instance of `BrokerDiagnosticsInput` via:
//
//	BrokerDiagnosticsArgs{...}
type BrokerDiagnosticsInput interface {
	pulumi.Input

	ToBrokerDiagnosticsOutput() BrokerDiagnosticsOutput
	ToBrokerDiagnosticsOutputWithContext(context.Context) BrokerDiagnosticsOutput
}

// Diagnostics setting specific to Broker
type BrokerDiagnosticsArgs struct {
	// Diagnostic Service endpoint
	DiagnosticServiceEndpoint pulumi.StringPtrInput `pulumi:"diagnosticServiceEndpoint"`
	// Knob to enable/disable metrics. Default = true
	EnableMetrics pulumi.BoolPtrInput `pulumi:"enableMetrics"`
	// Enable self check on Broker via Probe.
	EnableSelfCheck pulumi.BoolPtrInput `pulumi:"enableSelfCheck"`
	// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
	EnableSelfTracing pulumi.BoolPtrInput `pulumi:"enableSelfTracing"`
	// Knob to enable/disable entire tracing infrastructure.
	EnableTracing pulumi.BoolPtrInput `pulumi:"enableTracing"`
	// Format for the logs generated.
	LogFormat pulumi.StringPtrInput `pulumi:"logFormat"`
	// Log level for the Broker.
	LogLevel pulumi.StringPtrInput `pulumi:"logLevel"`
	// Maximum time for the CellMap to live.
	MaxCellMapLifetime pulumi.Float64PtrInput `pulumi:"maxCellMapLifetime"`
	// Metric update frequency in seconds.
	MetricUpdateFrequencySeconds pulumi.Float64PtrInput `pulumi:"metricUpdateFrequencySeconds"`
	// Probe Image to run.
	ProbeImage pulumi.StringPtrInput `pulumi:"probeImage"`
	// Frequency for the self check to run.
	SelfCheckFrequencySeconds pulumi.Float64PtrInput `pulumi:"selfCheckFrequencySeconds"`
	// Time out period of the self check.
	SelfCheckTimeoutSeconds pulumi.Float64PtrInput `pulumi:"selfCheckTimeoutSeconds"`
	// The frequency at which selfTrace should run.
	SelfTraceFrequencySeconds pulumi.Float64PtrInput `pulumi:"selfTraceFrequencySeconds"`
	// The number of the spans generated by the Tracing.
	SpanChannelCapacity pulumi.Float64PtrInput `pulumi:"spanChannelCapacity"`
}

// Defaults sets the appropriate defaults for BrokerDiagnosticsArgs
func (val *BrokerDiagnosticsArgs) Defaults() *BrokerDiagnosticsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableMetrics == nil {
		tmp.EnableMetrics = pulumi.BoolPtr(true)
	}
	if tmp.EnableSelfCheck == nil {
		tmp.EnableSelfCheck = pulumi.BoolPtr(true)
	}
	if tmp.EnableSelfTracing == nil {
		tmp.EnableSelfTracing = pulumi.BoolPtr(true)
	}
	if tmp.EnableTracing == nil {
		tmp.EnableTracing = pulumi.BoolPtr(true)
	}
	if tmp.LogFormat == nil {
		tmp.LogFormat = pulumi.StringPtr("text")
	}
	if tmp.LogLevel == nil {
		tmp.LogLevel = pulumi.StringPtr("info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off")
	}
	if tmp.MaxCellMapLifetime == nil {
		tmp.MaxCellMapLifetime = pulumi.Float64Ptr(60.0)
	}
	if tmp.MetricUpdateFrequencySeconds == nil {
		tmp.MetricUpdateFrequencySeconds = pulumi.Float64Ptr(30.0)
	}
	if tmp.ProbeImage == nil {
		tmp.ProbeImage = pulumi.StringPtr("sample.azurecr.io/diagnostics-probe:0.5.0")
	}
	if tmp.SelfCheckFrequencySeconds == nil {
		tmp.SelfCheckFrequencySeconds = pulumi.Float64Ptr(30.0)
	}
	if tmp.SelfCheckTimeoutSeconds == nil {
		tmp.SelfCheckTimeoutSeconds = pulumi.Float64Ptr(15.0)
	}
	if tmp.SelfTraceFrequencySeconds == nil {
		tmp.SelfTraceFrequencySeconds = pulumi.Float64Ptr(30.0)
	}
	if tmp.SpanChannelCapacity == nil {
		tmp.SpanChannelCapacity = pulumi.Float64Ptr(1000.0)
	}
	return &tmp
}
func (BrokerDiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerDiagnostics)(nil)).Elem()
}

func (i BrokerDiagnosticsArgs) ToBrokerDiagnosticsOutput() BrokerDiagnosticsOutput {
	return i.ToBrokerDiagnosticsOutputWithContext(context.Background())
}

func (i BrokerDiagnosticsArgs) ToBrokerDiagnosticsOutputWithContext(ctx context.Context) BrokerDiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerDiagnosticsOutput)
}

func (i BrokerDiagnosticsArgs) ToBrokerDiagnosticsPtrOutput() BrokerDiagnosticsPtrOutput {
	return i.ToBrokerDiagnosticsPtrOutputWithContext(context.Background())
}

func (i BrokerDiagnosticsArgs) ToBrokerDiagnosticsPtrOutputWithContext(ctx context.Context) BrokerDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerDiagnosticsOutput).ToBrokerDiagnosticsPtrOutputWithContext(ctx)
}

// BrokerDiagnosticsPtrInput is an input type that accepts BrokerDiagnosticsArgs, BrokerDiagnosticsPtr and BrokerDiagnosticsPtrOutput values.
// You can construct a concrete instance of `BrokerDiagnosticsPtrInput` via:
//
//	        BrokerDiagnosticsArgs{...}
//
//	or:
//
//	        nil
type BrokerDiagnosticsPtrInput interface {
	pulumi.Input

	ToBrokerDiagnosticsPtrOutput() BrokerDiagnosticsPtrOutput
	ToBrokerDiagnosticsPtrOutputWithContext(context.Context) BrokerDiagnosticsPtrOutput
}

type brokerDiagnosticsPtrType BrokerDiagnosticsArgs

func BrokerDiagnosticsPtr(v *BrokerDiagnosticsArgs) BrokerDiagnosticsPtrInput {
	return (*brokerDiagnosticsPtrType)(v)
}

func (*brokerDiagnosticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerDiagnostics)(nil)).Elem()
}

func (i *brokerDiagnosticsPtrType) ToBrokerDiagnosticsPtrOutput() BrokerDiagnosticsPtrOutput {
	return i.ToBrokerDiagnosticsPtrOutputWithContext(context.Background())
}

func (i *brokerDiagnosticsPtrType) ToBrokerDiagnosticsPtrOutputWithContext(ctx context.Context) BrokerDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerDiagnosticsPtrOutput)
}

// Diagnostics setting specific to Broker
type BrokerDiagnosticsOutput struct{ *pulumi.OutputState }

func (BrokerDiagnosticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerDiagnostics)(nil)).Elem()
}

func (o BrokerDiagnosticsOutput) ToBrokerDiagnosticsOutput() BrokerDiagnosticsOutput {
	return o
}

func (o BrokerDiagnosticsOutput) ToBrokerDiagnosticsOutputWithContext(ctx context.Context) BrokerDiagnosticsOutput {
	return o
}

func (o BrokerDiagnosticsOutput) ToBrokerDiagnosticsPtrOutput() BrokerDiagnosticsPtrOutput {
	return o.ToBrokerDiagnosticsPtrOutputWithContext(context.Background())
}

func (o BrokerDiagnosticsOutput) ToBrokerDiagnosticsPtrOutputWithContext(ctx context.Context) BrokerDiagnosticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerDiagnostics) *BrokerDiagnostics {
		return &v
	}).(BrokerDiagnosticsPtrOutput)
}

// Diagnostic Service endpoint
func (o BrokerDiagnosticsOutput) DiagnosticServiceEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *string { return v.DiagnosticServiceEndpoint }).(pulumi.StringPtrOutput)
}

// Knob to enable/disable metrics. Default = true
func (o BrokerDiagnosticsOutput) EnableMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *bool { return v.EnableMetrics }).(pulumi.BoolPtrOutput)
}

// Enable self check on Broker via Probe.
func (o BrokerDiagnosticsOutput) EnableSelfCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *bool { return v.EnableSelfCheck }).(pulumi.BoolPtrOutput)
}

// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
func (o BrokerDiagnosticsOutput) EnableSelfTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *bool { return v.EnableSelfTracing }).(pulumi.BoolPtrOutput)
}

// Knob to enable/disable entire tracing infrastructure.
func (o BrokerDiagnosticsOutput) EnableTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *bool { return v.EnableTracing }).(pulumi.BoolPtrOutput)
}

// Format for the logs generated.
func (o BrokerDiagnosticsOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *string { return v.LogFormat }).(pulumi.StringPtrOutput)
}

// Log level for the Broker.
func (o BrokerDiagnosticsOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// Maximum time for the CellMap to live.
func (o BrokerDiagnosticsOutput) MaxCellMapLifetime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *float64 { return v.MaxCellMapLifetime }).(pulumi.Float64PtrOutput)
}

// Metric update frequency in seconds.
func (o BrokerDiagnosticsOutput) MetricUpdateFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *float64 { return v.MetricUpdateFrequencySeconds }).(pulumi.Float64PtrOutput)
}

// Probe Image to run.
func (o BrokerDiagnosticsOutput) ProbeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *string { return v.ProbeImage }).(pulumi.StringPtrOutput)
}

// Frequency for the self check to run.
func (o BrokerDiagnosticsOutput) SelfCheckFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *float64 { return v.SelfCheckFrequencySeconds }).(pulumi.Float64PtrOutput)
}

// Time out period of the self check.
func (o BrokerDiagnosticsOutput) SelfCheckTimeoutSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *float64 { return v.SelfCheckTimeoutSeconds }).(pulumi.Float64PtrOutput)
}

// The frequency at which selfTrace should run.
func (o BrokerDiagnosticsOutput) SelfTraceFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *float64 { return v.SelfTraceFrequencySeconds }).(pulumi.Float64PtrOutput)
}

// The number of the spans generated by the Tracing.
func (o BrokerDiagnosticsOutput) SpanChannelCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnostics) *float64 { return v.SpanChannelCapacity }).(pulumi.Float64PtrOutput)
}

type BrokerDiagnosticsPtrOutput struct{ *pulumi.OutputState }

func (BrokerDiagnosticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerDiagnostics)(nil)).Elem()
}

func (o BrokerDiagnosticsPtrOutput) ToBrokerDiagnosticsPtrOutput() BrokerDiagnosticsPtrOutput {
	return o
}

func (o BrokerDiagnosticsPtrOutput) ToBrokerDiagnosticsPtrOutputWithContext(ctx context.Context) BrokerDiagnosticsPtrOutput {
	return o
}

func (o BrokerDiagnosticsPtrOutput) Elem() BrokerDiagnosticsOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) BrokerDiagnostics {
		if v != nil {
			return *v
		}
		var ret BrokerDiagnostics
		return ret
	}).(BrokerDiagnosticsOutput)
}

// Diagnostic Service endpoint
func (o BrokerDiagnosticsPtrOutput) DiagnosticServiceEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *string {
		if v == nil {
			return nil
		}
		return v.DiagnosticServiceEndpoint
	}).(pulumi.StringPtrOutput)
}

// Knob to enable/disable metrics. Default = true
func (o BrokerDiagnosticsPtrOutput) EnableMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMetrics
	}).(pulumi.BoolPtrOutput)
}

// Enable self check on Broker via Probe.
func (o BrokerDiagnosticsPtrOutput) EnableSelfCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSelfCheck
	}).(pulumi.BoolPtrOutput)
}

// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
func (o BrokerDiagnosticsPtrOutput) EnableSelfTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSelfTracing
	}).(pulumi.BoolPtrOutput)
}

// Knob to enable/disable entire tracing infrastructure.
func (o BrokerDiagnosticsPtrOutput) EnableTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTracing
	}).(pulumi.BoolPtrOutput)
}

// Format for the logs generated.
func (o BrokerDiagnosticsPtrOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *string {
		if v == nil {
			return nil
		}
		return v.LogFormat
	}).(pulumi.StringPtrOutput)
}

// Log level for the Broker.
func (o BrokerDiagnosticsPtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// Maximum time for the CellMap to live.
func (o BrokerDiagnosticsPtrOutput) MaxCellMapLifetime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxCellMapLifetime
	}).(pulumi.Float64PtrOutput)
}

// Metric update frequency in seconds.
func (o BrokerDiagnosticsPtrOutput) MetricUpdateFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *float64 {
		if v == nil {
			return nil
		}
		return v.MetricUpdateFrequencySeconds
	}).(pulumi.Float64PtrOutput)
}

// Probe Image to run.
func (o BrokerDiagnosticsPtrOutput) ProbeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *string {
		if v == nil {
			return nil
		}
		return v.ProbeImage
	}).(pulumi.StringPtrOutput)
}

// Frequency for the self check to run.
func (o BrokerDiagnosticsPtrOutput) SelfCheckFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *float64 {
		if v == nil {
			return nil
		}
		return v.SelfCheckFrequencySeconds
	}).(pulumi.Float64PtrOutput)
}

// Time out period of the self check.
func (o BrokerDiagnosticsPtrOutput) SelfCheckTimeoutSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *float64 {
		if v == nil {
			return nil
		}
		return v.SelfCheckTimeoutSeconds
	}).(pulumi.Float64PtrOutput)
}

// The frequency at which selfTrace should run.
func (o BrokerDiagnosticsPtrOutput) SelfTraceFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *float64 {
		if v == nil {
			return nil
		}
		return v.SelfTraceFrequencySeconds
	}).(pulumi.Float64PtrOutput)
}

// The number of the spans generated by the Tracing.
func (o BrokerDiagnosticsPtrOutput) SpanChannelCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnostics) *float64 {
		if v == nil {
			return nil
		}
		return v.SpanChannelCapacity
	}).(pulumi.Float64PtrOutput)
}

// Diagnostics setting specific to Broker
type BrokerDiagnosticsResponse struct {
	// Diagnostic Service endpoint
	DiagnosticServiceEndpoint *string `pulumi:"diagnosticServiceEndpoint"`
	// Knob to enable/disable metrics. Default = true
	EnableMetrics *bool `pulumi:"enableMetrics"`
	// Enable self check on Broker via Probe.
	EnableSelfCheck *bool `pulumi:"enableSelfCheck"`
	// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
	EnableSelfTracing *bool `pulumi:"enableSelfTracing"`
	// Knob to enable/disable entire tracing infrastructure.
	EnableTracing *bool `pulumi:"enableTracing"`
	// Format for the logs generated.
	LogFormat *string `pulumi:"logFormat"`
	// Log level for the Broker.
	LogLevel *string `pulumi:"logLevel"`
	// Maximum time for the CellMap to live.
	MaxCellMapLifetime *float64 `pulumi:"maxCellMapLifetime"`
	// Metric update frequency in seconds.
	MetricUpdateFrequencySeconds *float64 `pulumi:"metricUpdateFrequencySeconds"`
	// Probe Image to run.
	ProbeImage *string `pulumi:"probeImage"`
	// Frequency for the self check to run.
	SelfCheckFrequencySeconds *float64 `pulumi:"selfCheckFrequencySeconds"`
	// Time out period of the self check.
	SelfCheckTimeoutSeconds *float64 `pulumi:"selfCheckTimeoutSeconds"`
	// The frequency at which selfTrace should run.
	SelfTraceFrequencySeconds *float64 `pulumi:"selfTraceFrequencySeconds"`
	// The number of the spans generated by the Tracing.
	SpanChannelCapacity *float64 `pulumi:"spanChannelCapacity"`
}

// Defaults sets the appropriate defaults for BrokerDiagnosticsResponse
func (val *BrokerDiagnosticsResponse) Defaults() *BrokerDiagnosticsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableMetrics == nil {
		enableMetrics_ := true
		tmp.EnableMetrics = &enableMetrics_
	}
	if tmp.EnableSelfCheck == nil {
		enableSelfCheck_ := true
		tmp.EnableSelfCheck = &enableSelfCheck_
	}
	if tmp.EnableSelfTracing == nil {
		enableSelfTracing_ := true
		tmp.EnableSelfTracing = &enableSelfTracing_
	}
	if tmp.EnableTracing == nil {
		enableTracing_ := true
		tmp.EnableTracing = &enableTracing_
	}
	if tmp.LogFormat == nil {
		logFormat_ := "text"
		tmp.LogFormat = &logFormat_
	}
	if tmp.LogLevel == nil {
		logLevel_ := "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
		tmp.LogLevel = &logLevel_
	}
	if tmp.MaxCellMapLifetime == nil {
		maxCellMapLifetime_ := 60.0
		tmp.MaxCellMapLifetime = &maxCellMapLifetime_
	}
	if tmp.MetricUpdateFrequencySeconds == nil {
		metricUpdateFrequencySeconds_ := 30.0
		tmp.MetricUpdateFrequencySeconds = &metricUpdateFrequencySeconds_
	}
	if tmp.ProbeImage == nil {
		probeImage_ := "sample.azurecr.io/diagnostics-probe:0.5.0"
		tmp.ProbeImage = &probeImage_
	}
	if tmp.SelfCheckFrequencySeconds == nil {
		selfCheckFrequencySeconds_ := 30.0
		tmp.SelfCheckFrequencySeconds = &selfCheckFrequencySeconds_
	}
	if tmp.SelfCheckTimeoutSeconds == nil {
		selfCheckTimeoutSeconds_ := 15.0
		tmp.SelfCheckTimeoutSeconds = &selfCheckTimeoutSeconds_
	}
	if tmp.SelfTraceFrequencySeconds == nil {
		selfTraceFrequencySeconds_ := 30.0
		tmp.SelfTraceFrequencySeconds = &selfTraceFrequencySeconds_
	}
	if tmp.SpanChannelCapacity == nil {
		spanChannelCapacity_ := 1000.0
		tmp.SpanChannelCapacity = &spanChannelCapacity_
	}
	return &tmp
}

// Diagnostics setting specific to Broker
type BrokerDiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (BrokerDiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerDiagnosticsResponse)(nil)).Elem()
}

func (o BrokerDiagnosticsResponseOutput) ToBrokerDiagnosticsResponseOutput() BrokerDiagnosticsResponseOutput {
	return o
}

func (o BrokerDiagnosticsResponseOutput) ToBrokerDiagnosticsResponseOutputWithContext(ctx context.Context) BrokerDiagnosticsResponseOutput {
	return o
}

// Diagnostic Service endpoint
func (o BrokerDiagnosticsResponseOutput) DiagnosticServiceEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *string { return v.DiagnosticServiceEndpoint }).(pulumi.StringPtrOutput)
}

// Knob to enable/disable metrics. Default = true
func (o BrokerDiagnosticsResponseOutput) EnableMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *bool { return v.EnableMetrics }).(pulumi.BoolPtrOutput)
}

// Enable self check on Broker via Probe.
func (o BrokerDiagnosticsResponseOutput) EnableSelfCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *bool { return v.EnableSelfCheck }).(pulumi.BoolPtrOutput)
}

// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
func (o BrokerDiagnosticsResponseOutput) EnableSelfTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *bool { return v.EnableSelfTracing }).(pulumi.BoolPtrOutput)
}

// Knob to enable/disable entire tracing infrastructure.
func (o BrokerDiagnosticsResponseOutput) EnableTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *bool { return v.EnableTracing }).(pulumi.BoolPtrOutput)
}

// Format for the logs generated.
func (o BrokerDiagnosticsResponseOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *string { return v.LogFormat }).(pulumi.StringPtrOutput)
}

// Log level for the Broker.
func (o BrokerDiagnosticsResponseOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// Maximum time for the CellMap to live.
func (o BrokerDiagnosticsResponseOutput) MaxCellMapLifetime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *float64 { return v.MaxCellMapLifetime }).(pulumi.Float64PtrOutput)
}

// Metric update frequency in seconds.
func (o BrokerDiagnosticsResponseOutput) MetricUpdateFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *float64 { return v.MetricUpdateFrequencySeconds }).(pulumi.Float64PtrOutput)
}

// Probe Image to run.
func (o BrokerDiagnosticsResponseOutput) ProbeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *string { return v.ProbeImage }).(pulumi.StringPtrOutput)
}

// Frequency for the self check to run.
func (o BrokerDiagnosticsResponseOutput) SelfCheckFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *float64 { return v.SelfCheckFrequencySeconds }).(pulumi.Float64PtrOutput)
}

// Time out period of the self check.
func (o BrokerDiagnosticsResponseOutput) SelfCheckTimeoutSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *float64 { return v.SelfCheckTimeoutSeconds }).(pulumi.Float64PtrOutput)
}

// The frequency at which selfTrace should run.
func (o BrokerDiagnosticsResponseOutput) SelfTraceFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *float64 { return v.SelfTraceFrequencySeconds }).(pulumi.Float64PtrOutput)
}

// The number of the spans generated by the Tracing.
func (o BrokerDiagnosticsResponseOutput) SpanChannelCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BrokerDiagnosticsResponse) *float64 { return v.SpanChannelCapacity }).(pulumi.Float64PtrOutput)
}

type BrokerDiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (BrokerDiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerDiagnosticsResponse)(nil)).Elem()
}

func (o BrokerDiagnosticsResponsePtrOutput) ToBrokerDiagnosticsResponsePtrOutput() BrokerDiagnosticsResponsePtrOutput {
	return o
}

func (o BrokerDiagnosticsResponsePtrOutput) ToBrokerDiagnosticsResponsePtrOutputWithContext(ctx context.Context) BrokerDiagnosticsResponsePtrOutput {
	return o
}

func (o BrokerDiagnosticsResponsePtrOutput) Elem() BrokerDiagnosticsResponseOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) BrokerDiagnosticsResponse {
		if v != nil {
			return *v
		}
		var ret BrokerDiagnosticsResponse
		return ret
	}).(BrokerDiagnosticsResponseOutput)
}

// Diagnostic Service endpoint
func (o BrokerDiagnosticsResponsePtrOutput) DiagnosticServiceEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiagnosticServiceEndpoint
	}).(pulumi.StringPtrOutput)
}

// Knob to enable/disable metrics. Default = true
func (o BrokerDiagnosticsResponsePtrOutput) EnableMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMetrics
	}).(pulumi.BoolPtrOutput)
}

// Enable self check on Broker via Probe.
func (o BrokerDiagnosticsResponsePtrOutput) EnableSelfCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSelfCheck
	}).(pulumi.BoolPtrOutput)
}

// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
func (o BrokerDiagnosticsResponsePtrOutput) EnableSelfTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSelfTracing
	}).(pulumi.BoolPtrOutput)
}

// Knob to enable/disable entire tracing infrastructure.
func (o BrokerDiagnosticsResponsePtrOutput) EnableTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTracing
	}).(pulumi.BoolPtrOutput)
}

// Format for the logs generated.
func (o BrokerDiagnosticsResponsePtrOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogFormat
	}).(pulumi.StringPtrOutput)
}

// Log level for the Broker.
func (o BrokerDiagnosticsResponsePtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// Maximum time for the CellMap to live.
func (o BrokerDiagnosticsResponsePtrOutput) MaxCellMapLifetime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxCellMapLifetime
	}).(pulumi.Float64PtrOutput)
}

// Metric update frequency in seconds.
func (o BrokerDiagnosticsResponsePtrOutput) MetricUpdateFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MetricUpdateFrequencySeconds
	}).(pulumi.Float64PtrOutput)
}

// Probe Image to run.
func (o BrokerDiagnosticsResponsePtrOutput) ProbeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProbeImage
	}).(pulumi.StringPtrOutput)
}

// Frequency for the self check to run.
func (o BrokerDiagnosticsResponsePtrOutput) SelfCheckFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SelfCheckFrequencySeconds
	}).(pulumi.Float64PtrOutput)
}

// Time out period of the self check.
func (o BrokerDiagnosticsResponsePtrOutput) SelfCheckTimeoutSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SelfCheckTimeoutSeconds
	}).(pulumi.Float64PtrOutput)
}

// The frequency at which selfTrace should run.
func (o BrokerDiagnosticsResponsePtrOutput) SelfTraceFrequencySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SelfTraceFrequencySeconds
	}).(pulumi.Float64PtrOutput)
}

// The number of the spans generated by the Tracing.
func (o BrokerDiagnosticsResponsePtrOutput) SpanChannelCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BrokerDiagnosticsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SpanChannelCapacity
	}).(pulumi.Float64PtrOutput)
}

// Cardinality properties
type Cardinality struct {
	// The backend broker desired properties
	BackendChain BackendChain `pulumi:"backendChain"`
	// The frontend broker desired properties
	Frontend Frontend `pulumi:"frontend"`
}

// Defaults sets the appropriate defaults for Cardinality
func (val *Cardinality) Defaults() *Cardinality {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BackendChain = *tmp.BackendChain.Defaults()

	tmp.Frontend = *tmp.Frontend.Defaults()

	return &tmp
}

// CardinalityInput is an input type that accepts CardinalityArgs and CardinalityOutput values.
// You can construct a concrete instance of `CardinalityInput` via:
//
//	CardinalityArgs{...}
type CardinalityInput interface {
	pulumi.Input

	ToCardinalityOutput() CardinalityOutput
	ToCardinalityOutputWithContext(context.Context) CardinalityOutput
}

// Cardinality properties
type CardinalityArgs struct {
	// The backend broker desired properties
	BackendChain BackendChainInput `pulumi:"backendChain"`
	// The frontend broker desired properties
	Frontend FrontendInput `pulumi:"frontend"`
}

// Defaults sets the appropriate defaults for CardinalityArgs
func (val *CardinalityArgs) Defaults() *CardinalityArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (CardinalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Cardinality)(nil)).Elem()
}

func (i CardinalityArgs) ToCardinalityOutput() CardinalityOutput {
	return i.ToCardinalityOutputWithContext(context.Background())
}

func (i CardinalityArgs) ToCardinalityOutputWithContext(ctx context.Context) CardinalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CardinalityOutput)
}

func (i CardinalityArgs) ToCardinalityPtrOutput() CardinalityPtrOutput {
	return i.ToCardinalityPtrOutputWithContext(context.Background())
}

func (i CardinalityArgs) ToCardinalityPtrOutputWithContext(ctx context.Context) CardinalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CardinalityOutput).ToCardinalityPtrOutputWithContext(ctx)
}

// CardinalityPtrInput is an input type that accepts CardinalityArgs, CardinalityPtr and CardinalityPtrOutput values.
// You can construct a concrete instance of `CardinalityPtrInput` via:
//
//	        CardinalityArgs{...}
//
//	or:
//
//	        nil
type CardinalityPtrInput interface {
	pulumi.Input

	ToCardinalityPtrOutput() CardinalityPtrOutput
	ToCardinalityPtrOutputWithContext(context.Context) CardinalityPtrOutput
}

type cardinalityPtrType CardinalityArgs

func CardinalityPtr(v *CardinalityArgs) CardinalityPtrInput {
	return (*cardinalityPtrType)(v)
}

func (*cardinalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cardinality)(nil)).Elem()
}

func (i *cardinalityPtrType) ToCardinalityPtrOutput() CardinalityPtrOutput {
	return i.ToCardinalityPtrOutputWithContext(context.Background())
}

func (i *cardinalityPtrType) ToCardinalityPtrOutputWithContext(ctx context.Context) CardinalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CardinalityPtrOutput)
}

// Cardinality properties
type CardinalityOutput struct{ *pulumi.OutputState }

func (CardinalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cardinality)(nil)).Elem()
}

func (o CardinalityOutput) ToCardinalityOutput() CardinalityOutput {
	return o
}

func (o CardinalityOutput) ToCardinalityOutputWithContext(ctx context.Context) CardinalityOutput {
	return o
}

func (o CardinalityOutput) ToCardinalityPtrOutput() CardinalityPtrOutput {
	return o.ToCardinalityPtrOutputWithContext(context.Background())
}

func (o CardinalityOutput) ToCardinalityPtrOutputWithContext(ctx context.Context) CardinalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cardinality) *Cardinality {
		return &v
	}).(CardinalityPtrOutput)
}

// The backend broker desired properties
func (o CardinalityOutput) BackendChain() BackendChainOutput {
	return o.ApplyT(func(v Cardinality) BackendChain { return v.BackendChain }).(BackendChainOutput)
}

// The frontend broker desired properties
func (o CardinalityOutput) Frontend() FrontendOutput {
	return o.ApplyT(func(v Cardinality) Frontend { return v.Frontend }).(FrontendOutput)
}

type CardinalityPtrOutput struct{ *pulumi.OutputState }

func (CardinalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cardinality)(nil)).Elem()
}

func (o CardinalityPtrOutput) ToCardinalityPtrOutput() CardinalityPtrOutput {
	return o
}

func (o CardinalityPtrOutput) ToCardinalityPtrOutputWithContext(ctx context.Context) CardinalityPtrOutput {
	return o
}

func (o CardinalityPtrOutput) Elem() CardinalityOutput {
	return o.ApplyT(func(v *Cardinality) Cardinality {
		if v != nil {
			return *v
		}
		var ret Cardinality
		return ret
	}).(CardinalityOutput)
}

// The backend broker desired properties
func (o CardinalityPtrOutput) BackendChain() BackendChainPtrOutput {
	return o.ApplyT(func(v *Cardinality) *BackendChain {
		if v == nil {
			return nil
		}
		return &v.BackendChain
	}).(BackendChainPtrOutput)
}

// The frontend broker desired properties
func (o CardinalityPtrOutput) Frontend() FrontendPtrOutput {
	return o.ApplyT(func(v *Cardinality) *Frontend {
		if v == nil {
			return nil
		}
		return &v.Frontend
	}).(FrontendPtrOutput)
}

// Cardinality properties
type CardinalityResponse struct {
	// The backend broker desired properties
	BackendChain BackendChainResponse `pulumi:"backendChain"`
	// The frontend broker desired properties
	Frontend FrontendResponse `pulumi:"frontend"`
}

// Defaults sets the appropriate defaults for CardinalityResponse
func (val *CardinalityResponse) Defaults() *CardinalityResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BackendChain = *tmp.BackendChain.Defaults()

	tmp.Frontend = *tmp.Frontend.Defaults()

	return &tmp
}

// Cardinality properties
type CardinalityResponseOutput struct{ *pulumi.OutputState }

func (CardinalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CardinalityResponse)(nil)).Elem()
}

func (o CardinalityResponseOutput) ToCardinalityResponseOutput() CardinalityResponseOutput {
	return o
}

func (o CardinalityResponseOutput) ToCardinalityResponseOutputWithContext(ctx context.Context) CardinalityResponseOutput {
	return o
}

// The backend broker desired properties
func (o CardinalityResponseOutput) BackendChain() BackendChainResponseOutput {
	return o.ApplyT(func(v CardinalityResponse) BackendChainResponse { return v.BackendChain }).(BackendChainResponseOutput)
}

// The frontend broker desired properties
func (o CardinalityResponseOutput) Frontend() FrontendResponseOutput {
	return o.ApplyT(func(v CardinalityResponse) FrontendResponse { return v.Frontend }).(FrontendResponseOutput)
}

type CardinalityResponsePtrOutput struct{ *pulumi.OutputState }

func (CardinalityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CardinalityResponse)(nil)).Elem()
}

func (o CardinalityResponsePtrOutput) ToCardinalityResponsePtrOutput() CardinalityResponsePtrOutput {
	return o
}

func (o CardinalityResponsePtrOutput) ToCardinalityResponsePtrOutputWithContext(ctx context.Context) CardinalityResponsePtrOutput {
	return o
}

func (o CardinalityResponsePtrOutput) Elem() CardinalityResponseOutput {
	return o.ApplyT(func(v *CardinalityResponse) CardinalityResponse {
		if v != nil {
			return *v
		}
		var ret CardinalityResponse
		return ret
	}).(CardinalityResponseOutput)
}

// The backend broker desired properties
func (o CardinalityResponsePtrOutput) BackendChain() BackendChainResponsePtrOutput {
	return o.ApplyT(func(v *CardinalityResponse) *BackendChainResponse {
		if v == nil {
			return nil
		}
		return &v.BackendChain
	}).(BackendChainResponsePtrOutput)
}

// The frontend broker desired properties
func (o CardinalityResponsePtrOutput) Frontend() FrontendResponsePtrOutput {
	return o.ApplyT(func(v *CardinalityResponse) *FrontendResponse {
		if v == nil {
			return nil
		}
		return &v.Frontend
	}).(FrontendResponsePtrOutput)
}

// Cert Manager CA Cert properties
type CertManagerCertOptions struct {
	// Duration of CA cert.
	Duration string `pulumi:"duration"`
	// Cert Manager private key.
	PrivateKey CertManagerPrivateKey `pulumi:"privateKey"`
	// Renew before time of CA cert.
	RenewBefore string `pulumi:"renewBefore"`
}

// Defaults sets the appropriate defaults for CertManagerCertOptions
func (val *CertManagerCertOptions) Defaults() *CertManagerCertOptions {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Duration) {
		tmp.Duration = "720h"
	}
	tmp.PrivateKey = *tmp.PrivateKey.Defaults()

	if utilities.IsZero(tmp.RenewBefore) {
		tmp.RenewBefore = "240h"
	}
	return &tmp
}

// CertManagerCertOptionsInput is an input type that accepts CertManagerCertOptionsArgs and CertManagerCertOptionsOutput values.
// You can construct a concrete instance of `CertManagerCertOptionsInput` via:
//
//	CertManagerCertOptionsArgs{...}
type CertManagerCertOptionsInput interface {
	pulumi.Input

	ToCertManagerCertOptionsOutput() CertManagerCertOptionsOutput
	ToCertManagerCertOptionsOutputWithContext(context.Context) CertManagerCertOptionsOutput
}

// Cert Manager CA Cert properties
type CertManagerCertOptionsArgs struct {
	// Duration of CA cert.
	Duration pulumi.StringInput `pulumi:"duration"`
	// Cert Manager private key.
	PrivateKey CertManagerPrivateKeyInput `pulumi:"privateKey"`
	// Renew before time of CA cert.
	RenewBefore pulumi.StringInput `pulumi:"renewBefore"`
}

// Defaults sets the appropriate defaults for CertManagerCertOptionsArgs
func (val *CertManagerCertOptionsArgs) Defaults() *CertManagerCertOptionsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Duration == nil {
		tmp.Duration = pulumi.String("720h")
	}

	if tmp.RenewBefore == nil {
		tmp.RenewBefore = pulumi.String("240h")
	}
	return &tmp
}
func (CertManagerCertOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerCertOptions)(nil)).Elem()
}

func (i CertManagerCertOptionsArgs) ToCertManagerCertOptionsOutput() CertManagerCertOptionsOutput {
	return i.ToCertManagerCertOptionsOutputWithContext(context.Background())
}

func (i CertManagerCertOptionsArgs) ToCertManagerCertOptionsOutputWithContext(ctx context.Context) CertManagerCertOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerCertOptionsOutput)
}

func (i CertManagerCertOptionsArgs) ToCertManagerCertOptionsPtrOutput() CertManagerCertOptionsPtrOutput {
	return i.ToCertManagerCertOptionsPtrOutputWithContext(context.Background())
}

func (i CertManagerCertOptionsArgs) ToCertManagerCertOptionsPtrOutputWithContext(ctx context.Context) CertManagerCertOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerCertOptionsOutput).ToCertManagerCertOptionsPtrOutputWithContext(ctx)
}

// CertManagerCertOptionsPtrInput is an input type that accepts CertManagerCertOptionsArgs, CertManagerCertOptionsPtr and CertManagerCertOptionsPtrOutput values.
// You can construct a concrete instance of `CertManagerCertOptionsPtrInput` via:
//
//	        CertManagerCertOptionsArgs{...}
//
//	or:
//
//	        nil
type CertManagerCertOptionsPtrInput interface {
	pulumi.Input

	ToCertManagerCertOptionsPtrOutput() CertManagerCertOptionsPtrOutput
	ToCertManagerCertOptionsPtrOutputWithContext(context.Context) CertManagerCertOptionsPtrOutput
}

type certManagerCertOptionsPtrType CertManagerCertOptionsArgs

func CertManagerCertOptionsPtr(v *CertManagerCertOptionsArgs) CertManagerCertOptionsPtrInput {
	return (*certManagerCertOptionsPtrType)(v)
}

func (*certManagerCertOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerCertOptions)(nil)).Elem()
}

func (i *certManagerCertOptionsPtrType) ToCertManagerCertOptionsPtrOutput() CertManagerCertOptionsPtrOutput {
	return i.ToCertManagerCertOptionsPtrOutputWithContext(context.Background())
}

func (i *certManagerCertOptionsPtrType) ToCertManagerCertOptionsPtrOutputWithContext(ctx context.Context) CertManagerCertOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerCertOptionsPtrOutput)
}

// Cert Manager CA Cert properties
type CertManagerCertOptionsOutput struct{ *pulumi.OutputState }

func (CertManagerCertOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerCertOptions)(nil)).Elem()
}

func (o CertManagerCertOptionsOutput) ToCertManagerCertOptionsOutput() CertManagerCertOptionsOutput {
	return o
}

func (o CertManagerCertOptionsOutput) ToCertManagerCertOptionsOutputWithContext(ctx context.Context) CertManagerCertOptionsOutput {
	return o
}

func (o CertManagerCertOptionsOutput) ToCertManagerCertOptionsPtrOutput() CertManagerCertOptionsPtrOutput {
	return o.ToCertManagerCertOptionsPtrOutputWithContext(context.Background())
}

func (o CertManagerCertOptionsOutput) ToCertManagerCertOptionsPtrOutputWithContext(ctx context.Context) CertManagerCertOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerCertOptions) *CertManagerCertOptions {
		return &v
	}).(CertManagerCertOptionsPtrOutput)
}

// Duration of CA cert.
func (o CertManagerCertOptionsOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerCertOptions) string { return v.Duration }).(pulumi.StringOutput)
}

// Cert Manager private key.
func (o CertManagerCertOptionsOutput) PrivateKey() CertManagerPrivateKeyOutput {
	return o.ApplyT(func(v CertManagerCertOptions) CertManagerPrivateKey { return v.PrivateKey }).(CertManagerPrivateKeyOutput)
}

// Renew before time of CA cert.
func (o CertManagerCertOptionsOutput) RenewBefore() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerCertOptions) string { return v.RenewBefore }).(pulumi.StringOutput)
}

type CertManagerCertOptionsPtrOutput struct{ *pulumi.OutputState }

func (CertManagerCertOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerCertOptions)(nil)).Elem()
}

func (o CertManagerCertOptionsPtrOutput) ToCertManagerCertOptionsPtrOutput() CertManagerCertOptionsPtrOutput {
	return o
}

func (o CertManagerCertOptionsPtrOutput) ToCertManagerCertOptionsPtrOutputWithContext(ctx context.Context) CertManagerCertOptionsPtrOutput {
	return o
}

func (o CertManagerCertOptionsPtrOutput) Elem() CertManagerCertOptionsOutput {
	return o.ApplyT(func(v *CertManagerCertOptions) CertManagerCertOptions {
		if v != nil {
			return *v
		}
		var ret CertManagerCertOptions
		return ret
	}).(CertManagerCertOptionsOutput)
}

// Duration of CA cert.
func (o CertManagerCertOptionsPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerCertOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Cert Manager private key.
func (o CertManagerCertOptionsPtrOutput) PrivateKey() CertManagerPrivateKeyPtrOutput {
	return o.ApplyT(func(v *CertManagerCertOptions) *CertManagerPrivateKey {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(CertManagerPrivateKeyPtrOutput)
}

// Renew before time of CA cert.
func (o CertManagerCertOptionsPtrOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerCertOptions) *string {
		if v == nil {
			return nil
		}
		return &v.RenewBefore
	}).(pulumi.StringPtrOutput)
}

// Cert Manager CA Cert properties
type CertManagerCertOptionsResponse struct {
	// Duration of CA cert.
	Duration string `pulumi:"duration"`
	// Cert Manager private key.
	PrivateKey CertManagerPrivateKeyResponse `pulumi:"privateKey"`
	// Renew before time of CA cert.
	RenewBefore string `pulumi:"renewBefore"`
}

// Defaults sets the appropriate defaults for CertManagerCertOptionsResponse
func (val *CertManagerCertOptionsResponse) Defaults() *CertManagerCertOptionsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Duration) {
		tmp.Duration = "720h"
	}
	tmp.PrivateKey = *tmp.PrivateKey.Defaults()

	if utilities.IsZero(tmp.RenewBefore) {
		tmp.RenewBefore = "240h"
	}
	return &tmp
}

// Cert Manager CA Cert properties
type CertManagerCertOptionsResponseOutput struct{ *pulumi.OutputState }

func (CertManagerCertOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerCertOptionsResponse)(nil)).Elem()
}

func (o CertManagerCertOptionsResponseOutput) ToCertManagerCertOptionsResponseOutput() CertManagerCertOptionsResponseOutput {
	return o
}

func (o CertManagerCertOptionsResponseOutput) ToCertManagerCertOptionsResponseOutputWithContext(ctx context.Context) CertManagerCertOptionsResponseOutput {
	return o
}

// Duration of CA cert.
func (o CertManagerCertOptionsResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerCertOptionsResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Cert Manager private key.
func (o CertManagerCertOptionsResponseOutput) PrivateKey() CertManagerPrivateKeyResponseOutput {
	return o.ApplyT(func(v CertManagerCertOptionsResponse) CertManagerPrivateKeyResponse { return v.PrivateKey }).(CertManagerPrivateKeyResponseOutput)
}

// Renew before time of CA cert.
func (o CertManagerCertOptionsResponseOutput) RenewBefore() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerCertOptionsResponse) string { return v.RenewBefore }).(pulumi.StringOutput)
}

type CertManagerCertOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (CertManagerCertOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerCertOptionsResponse)(nil)).Elem()
}

func (o CertManagerCertOptionsResponsePtrOutput) ToCertManagerCertOptionsResponsePtrOutput() CertManagerCertOptionsResponsePtrOutput {
	return o
}

func (o CertManagerCertOptionsResponsePtrOutput) ToCertManagerCertOptionsResponsePtrOutputWithContext(ctx context.Context) CertManagerCertOptionsResponsePtrOutput {
	return o
}

func (o CertManagerCertOptionsResponsePtrOutput) Elem() CertManagerCertOptionsResponseOutput {
	return o.ApplyT(func(v *CertManagerCertOptionsResponse) CertManagerCertOptionsResponse {
		if v != nil {
			return *v
		}
		var ret CertManagerCertOptionsResponse
		return ret
	}).(CertManagerCertOptionsResponseOutput)
}

// Duration of CA cert.
func (o CertManagerCertOptionsResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerCertOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Cert Manager private key.
func (o CertManagerCertOptionsResponsePtrOutput) PrivateKey() CertManagerPrivateKeyResponsePtrOutput {
	return o.ApplyT(func(v *CertManagerCertOptionsResponse) *CertManagerPrivateKeyResponse {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(CertManagerPrivateKeyResponsePtrOutput)
}

// Renew before time of CA cert.
func (o CertManagerCertOptionsResponsePtrOutput) RenewBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerCertOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RenewBefore
	}).(pulumi.StringPtrOutput)
}

// Cert-Manager issuerRef properties
type CertManagerIssuerRef struct {
	// group of issuer.
	Group string `pulumi:"group"`
	// kind of issuer (Issuer or ClusterIssuer).
	Kind string `pulumi:"kind"`
	// name of issuer.
	Name string `pulumi:"name"`
}

// Defaults sets the appropriate defaults for CertManagerIssuerRef
func (val *CertManagerIssuerRef) Defaults() *CertManagerIssuerRef {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Group) {
		tmp.Group = "cert-manager.io"
	}
	return &tmp
}

// CertManagerIssuerRefInput is an input type that accepts CertManagerIssuerRefArgs and CertManagerIssuerRefOutput values.
// You can construct a concrete instance of `CertManagerIssuerRefInput` via:
//
//	CertManagerIssuerRefArgs{...}
type CertManagerIssuerRefInput interface {
	pulumi.Input

	ToCertManagerIssuerRefOutput() CertManagerIssuerRefOutput
	ToCertManagerIssuerRefOutputWithContext(context.Context) CertManagerIssuerRefOutput
}

// Cert-Manager issuerRef properties
type CertManagerIssuerRefArgs struct {
	// group of issuer.
	Group pulumi.StringInput `pulumi:"group"`
	// kind of issuer (Issuer or ClusterIssuer).
	Kind pulumi.StringInput `pulumi:"kind"`
	// name of issuer.
	Name pulumi.StringInput `pulumi:"name"`
}

// Defaults sets the appropriate defaults for CertManagerIssuerRefArgs
func (val *CertManagerIssuerRefArgs) Defaults() *CertManagerIssuerRefArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		tmp.Group = pulumi.String("cert-manager.io")
	}
	return &tmp
}
func (CertManagerIssuerRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerIssuerRef)(nil)).Elem()
}

func (i CertManagerIssuerRefArgs) ToCertManagerIssuerRefOutput() CertManagerIssuerRefOutput {
	return i.ToCertManagerIssuerRefOutputWithContext(context.Background())
}

func (i CertManagerIssuerRefArgs) ToCertManagerIssuerRefOutputWithContext(ctx context.Context) CertManagerIssuerRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerIssuerRefOutput)
}

func (i CertManagerIssuerRefArgs) ToCertManagerIssuerRefPtrOutput() CertManagerIssuerRefPtrOutput {
	return i.ToCertManagerIssuerRefPtrOutputWithContext(context.Background())
}

func (i CertManagerIssuerRefArgs) ToCertManagerIssuerRefPtrOutputWithContext(ctx context.Context) CertManagerIssuerRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerIssuerRefOutput).ToCertManagerIssuerRefPtrOutputWithContext(ctx)
}

// CertManagerIssuerRefPtrInput is an input type that accepts CertManagerIssuerRefArgs, CertManagerIssuerRefPtr and CertManagerIssuerRefPtrOutput values.
// You can construct a concrete instance of `CertManagerIssuerRefPtrInput` via:
//
//	        CertManagerIssuerRefArgs{...}
//
//	or:
//
//	        nil
type CertManagerIssuerRefPtrInput interface {
	pulumi.Input

	ToCertManagerIssuerRefPtrOutput() CertManagerIssuerRefPtrOutput
	ToCertManagerIssuerRefPtrOutputWithContext(context.Context) CertManagerIssuerRefPtrOutput
}

type certManagerIssuerRefPtrType CertManagerIssuerRefArgs

func CertManagerIssuerRefPtr(v *CertManagerIssuerRefArgs) CertManagerIssuerRefPtrInput {
	return (*certManagerIssuerRefPtrType)(v)
}

func (*certManagerIssuerRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerIssuerRef)(nil)).Elem()
}

func (i *certManagerIssuerRefPtrType) ToCertManagerIssuerRefPtrOutput() CertManagerIssuerRefPtrOutput {
	return i.ToCertManagerIssuerRefPtrOutputWithContext(context.Background())
}

func (i *certManagerIssuerRefPtrType) ToCertManagerIssuerRefPtrOutputWithContext(ctx context.Context) CertManagerIssuerRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerIssuerRefPtrOutput)
}

// Cert-Manager issuerRef properties
type CertManagerIssuerRefOutput struct{ *pulumi.OutputState }

func (CertManagerIssuerRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerIssuerRef)(nil)).Elem()
}

func (o CertManagerIssuerRefOutput) ToCertManagerIssuerRefOutput() CertManagerIssuerRefOutput {
	return o
}

func (o CertManagerIssuerRefOutput) ToCertManagerIssuerRefOutputWithContext(ctx context.Context) CertManagerIssuerRefOutput {
	return o
}

func (o CertManagerIssuerRefOutput) ToCertManagerIssuerRefPtrOutput() CertManagerIssuerRefPtrOutput {
	return o.ToCertManagerIssuerRefPtrOutputWithContext(context.Background())
}

func (o CertManagerIssuerRefOutput) ToCertManagerIssuerRefPtrOutputWithContext(ctx context.Context) CertManagerIssuerRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerIssuerRef) *CertManagerIssuerRef {
		return &v
	}).(CertManagerIssuerRefPtrOutput)
}

// group of issuer.
func (o CertManagerIssuerRefOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerIssuerRef) string { return v.Group }).(pulumi.StringOutput)
}

// kind of issuer (Issuer or ClusterIssuer).
func (o CertManagerIssuerRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerIssuerRef) string { return v.Kind }).(pulumi.StringOutput)
}

// name of issuer.
func (o CertManagerIssuerRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerIssuerRef) string { return v.Name }).(pulumi.StringOutput)
}

type CertManagerIssuerRefPtrOutput struct{ *pulumi.OutputState }

func (CertManagerIssuerRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerIssuerRef)(nil)).Elem()
}

func (o CertManagerIssuerRefPtrOutput) ToCertManagerIssuerRefPtrOutput() CertManagerIssuerRefPtrOutput {
	return o
}

func (o CertManagerIssuerRefPtrOutput) ToCertManagerIssuerRefPtrOutputWithContext(ctx context.Context) CertManagerIssuerRefPtrOutput {
	return o
}

func (o CertManagerIssuerRefPtrOutput) Elem() CertManagerIssuerRefOutput {
	return o.ApplyT(func(v *CertManagerIssuerRef) CertManagerIssuerRef {
		if v != nil {
			return *v
		}
		var ret CertManagerIssuerRef
		return ret
	}).(CertManagerIssuerRefOutput)
}

// group of issuer.
func (o CertManagerIssuerRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIssuerRef) *string {
		if v == nil {
			return nil
		}
		return &v.Group
	}).(pulumi.StringPtrOutput)
}

// kind of issuer (Issuer or ClusterIssuer).
func (o CertManagerIssuerRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIssuerRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// name of issuer.
func (o CertManagerIssuerRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIssuerRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Cert-Manager issuerRef properties
type CertManagerIssuerRefResponse struct {
	// group of issuer.
	Group string `pulumi:"group"`
	// kind of issuer (Issuer or ClusterIssuer).
	Kind string `pulumi:"kind"`
	// name of issuer.
	Name string `pulumi:"name"`
}

// Defaults sets the appropriate defaults for CertManagerIssuerRefResponse
func (val *CertManagerIssuerRefResponse) Defaults() *CertManagerIssuerRefResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Group) {
		tmp.Group = "cert-manager.io"
	}
	return &tmp
}

// Cert-Manager issuerRef properties
type CertManagerIssuerRefResponseOutput struct{ *pulumi.OutputState }

func (CertManagerIssuerRefResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerIssuerRefResponse)(nil)).Elem()
}

func (o CertManagerIssuerRefResponseOutput) ToCertManagerIssuerRefResponseOutput() CertManagerIssuerRefResponseOutput {
	return o
}

func (o CertManagerIssuerRefResponseOutput) ToCertManagerIssuerRefResponseOutputWithContext(ctx context.Context) CertManagerIssuerRefResponseOutput {
	return o
}

// group of issuer.
func (o CertManagerIssuerRefResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerIssuerRefResponse) string { return v.Group }).(pulumi.StringOutput)
}

// kind of issuer (Issuer or ClusterIssuer).
func (o CertManagerIssuerRefResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerIssuerRefResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// name of issuer.
func (o CertManagerIssuerRefResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerIssuerRefResponse) string { return v.Name }).(pulumi.StringOutput)
}

type CertManagerIssuerRefResponsePtrOutput struct{ *pulumi.OutputState }

func (CertManagerIssuerRefResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerIssuerRefResponse)(nil)).Elem()
}

func (o CertManagerIssuerRefResponsePtrOutput) ToCertManagerIssuerRefResponsePtrOutput() CertManagerIssuerRefResponsePtrOutput {
	return o
}

func (o CertManagerIssuerRefResponsePtrOutput) ToCertManagerIssuerRefResponsePtrOutputWithContext(ctx context.Context) CertManagerIssuerRefResponsePtrOutput {
	return o
}

func (o CertManagerIssuerRefResponsePtrOutput) Elem() CertManagerIssuerRefResponseOutput {
	return o.ApplyT(func(v *CertManagerIssuerRefResponse) CertManagerIssuerRefResponse {
		if v != nil {
			return *v
		}
		var ret CertManagerIssuerRefResponse
		return ret
	}).(CertManagerIssuerRefResponseOutput)
}

// group of issuer.
func (o CertManagerIssuerRefResponsePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIssuerRefResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Group
	}).(pulumi.StringPtrOutput)
}

// kind of issuer (Issuer or ClusterIssuer).
func (o CertManagerIssuerRefResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIssuerRefResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// name of issuer.
func (o CertManagerIssuerRefResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerIssuerRefResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Cert Manager private key properties
type CertManagerPrivateKey struct {
	// algorithm for private key.
	Algorithm string `pulumi:"algorithm"`
	// cert-manager rotationPolicy.
	RotationPolicy string `pulumi:"rotationPolicy"`
	// size of private key.
	Size int `pulumi:"size"`
}

// Defaults sets the appropriate defaults for CertManagerPrivateKey
func (val *CertManagerPrivateKey) Defaults() *CertManagerPrivateKey {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Algorithm) {
		tmp.Algorithm = "ECDSA"
	}
	if utilities.IsZero(tmp.RotationPolicy) {
		tmp.RotationPolicy = "Always"
	}
	if utilities.IsZero(tmp.Size) {
		tmp.Size = 256
	}
	return &tmp
}

// CertManagerPrivateKeyInput is an input type that accepts CertManagerPrivateKeyArgs and CertManagerPrivateKeyOutput values.
// You can construct a concrete instance of `CertManagerPrivateKeyInput` via:
//
//	CertManagerPrivateKeyArgs{...}
type CertManagerPrivateKeyInput interface {
	pulumi.Input

	ToCertManagerPrivateKeyOutput() CertManagerPrivateKeyOutput
	ToCertManagerPrivateKeyOutputWithContext(context.Context) CertManagerPrivateKeyOutput
}

// Cert Manager private key properties
type CertManagerPrivateKeyArgs struct {
	// algorithm for private key.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// cert-manager rotationPolicy.
	RotationPolicy pulumi.StringInput `pulumi:"rotationPolicy"`
	// size of private key.
	Size pulumi.IntInput `pulumi:"size"`
}

// Defaults sets the appropriate defaults for CertManagerPrivateKeyArgs
func (val *CertManagerPrivateKeyArgs) Defaults() *CertManagerPrivateKeyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Algorithm == nil {
		tmp.Algorithm = pulumi.String("ECDSA")
	}
	if tmp.RotationPolicy == nil {
		tmp.RotationPolicy = pulumi.String("Always")
	}
	if tmp.Size == nil {
		tmp.Size = pulumi.Int(256)
	}
	return &tmp
}
func (CertManagerPrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerPrivateKey)(nil)).Elem()
}

func (i CertManagerPrivateKeyArgs) ToCertManagerPrivateKeyOutput() CertManagerPrivateKeyOutput {
	return i.ToCertManagerPrivateKeyOutputWithContext(context.Background())
}

func (i CertManagerPrivateKeyArgs) ToCertManagerPrivateKeyOutputWithContext(ctx context.Context) CertManagerPrivateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrivateKeyOutput)
}

func (i CertManagerPrivateKeyArgs) ToCertManagerPrivateKeyPtrOutput() CertManagerPrivateKeyPtrOutput {
	return i.ToCertManagerPrivateKeyPtrOutputWithContext(context.Background())
}

func (i CertManagerPrivateKeyArgs) ToCertManagerPrivateKeyPtrOutputWithContext(ctx context.Context) CertManagerPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrivateKeyOutput).ToCertManagerPrivateKeyPtrOutputWithContext(ctx)
}

// CertManagerPrivateKeyPtrInput is an input type that accepts CertManagerPrivateKeyArgs, CertManagerPrivateKeyPtr and CertManagerPrivateKeyPtrOutput values.
// You can construct a concrete instance of `CertManagerPrivateKeyPtrInput` via:
//
//	        CertManagerPrivateKeyArgs{...}
//
//	or:
//
//	        nil
type CertManagerPrivateKeyPtrInput interface {
	pulumi.Input

	ToCertManagerPrivateKeyPtrOutput() CertManagerPrivateKeyPtrOutput
	ToCertManagerPrivateKeyPtrOutputWithContext(context.Context) CertManagerPrivateKeyPtrOutput
}

type certManagerPrivateKeyPtrType CertManagerPrivateKeyArgs

func CertManagerPrivateKeyPtr(v *CertManagerPrivateKeyArgs) CertManagerPrivateKeyPtrInput {
	return (*certManagerPrivateKeyPtrType)(v)
}

func (*certManagerPrivateKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerPrivateKey)(nil)).Elem()
}

func (i *certManagerPrivateKeyPtrType) ToCertManagerPrivateKeyPtrOutput() CertManagerPrivateKeyPtrOutput {
	return i.ToCertManagerPrivateKeyPtrOutputWithContext(context.Background())
}

func (i *certManagerPrivateKeyPtrType) ToCertManagerPrivateKeyPtrOutputWithContext(ctx context.Context) CertManagerPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerPrivateKeyPtrOutput)
}

// Cert Manager private key properties
type CertManagerPrivateKeyOutput struct{ *pulumi.OutputState }

func (CertManagerPrivateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerPrivateKey)(nil)).Elem()
}

func (o CertManagerPrivateKeyOutput) ToCertManagerPrivateKeyOutput() CertManagerPrivateKeyOutput {
	return o
}

func (o CertManagerPrivateKeyOutput) ToCertManagerPrivateKeyOutputWithContext(ctx context.Context) CertManagerPrivateKeyOutput {
	return o
}

func (o CertManagerPrivateKeyOutput) ToCertManagerPrivateKeyPtrOutput() CertManagerPrivateKeyPtrOutput {
	return o.ToCertManagerPrivateKeyPtrOutputWithContext(context.Background())
}

func (o CertManagerPrivateKeyOutput) ToCertManagerPrivateKeyPtrOutputWithContext(ctx context.Context) CertManagerPrivateKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertManagerPrivateKey) *CertManagerPrivateKey {
		return &v
	}).(CertManagerPrivateKeyPtrOutput)
}

// algorithm for private key.
func (o CertManagerPrivateKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerPrivateKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// cert-manager rotationPolicy.
func (o CertManagerPrivateKeyOutput) RotationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerPrivateKey) string { return v.RotationPolicy }).(pulumi.StringOutput)
}

// size of private key.
func (o CertManagerPrivateKeyOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v CertManagerPrivateKey) int { return v.Size }).(pulumi.IntOutput)
}

type CertManagerPrivateKeyPtrOutput struct{ *pulumi.OutputState }

func (CertManagerPrivateKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerPrivateKey)(nil)).Elem()
}

func (o CertManagerPrivateKeyPtrOutput) ToCertManagerPrivateKeyPtrOutput() CertManagerPrivateKeyPtrOutput {
	return o
}

func (o CertManagerPrivateKeyPtrOutput) ToCertManagerPrivateKeyPtrOutputWithContext(ctx context.Context) CertManagerPrivateKeyPtrOutput {
	return o
}

func (o CertManagerPrivateKeyPtrOutput) Elem() CertManagerPrivateKeyOutput {
	return o.ApplyT(func(v *CertManagerPrivateKey) CertManagerPrivateKey {
		if v != nil {
			return *v
		}
		var ret CertManagerPrivateKey
		return ret
	}).(CertManagerPrivateKeyOutput)
}

// algorithm for private key.
func (o CertManagerPrivateKeyPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrivateKey) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// cert-manager rotationPolicy.
func (o CertManagerPrivateKeyPtrOutput) RotationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrivateKey) *string {
		if v == nil {
			return nil
		}
		return &v.RotationPolicy
	}).(pulumi.StringPtrOutput)
}

// size of private key.
func (o CertManagerPrivateKeyPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerPrivateKey) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Cert Manager private key properties
type CertManagerPrivateKeyResponse struct {
	// algorithm for private key.
	Algorithm string `pulumi:"algorithm"`
	// cert-manager rotationPolicy.
	RotationPolicy string `pulumi:"rotationPolicy"`
	// size of private key.
	Size int `pulumi:"size"`
}

// Defaults sets the appropriate defaults for CertManagerPrivateKeyResponse
func (val *CertManagerPrivateKeyResponse) Defaults() *CertManagerPrivateKeyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Algorithm) {
		tmp.Algorithm = "ECDSA"
	}
	if utilities.IsZero(tmp.RotationPolicy) {
		tmp.RotationPolicy = "Always"
	}
	if utilities.IsZero(tmp.Size) {
		tmp.Size = 256
	}
	return &tmp
}

// Cert Manager private key properties
type CertManagerPrivateKeyResponseOutput struct{ *pulumi.OutputState }

func (CertManagerPrivateKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertManagerPrivateKeyResponse)(nil)).Elem()
}

func (o CertManagerPrivateKeyResponseOutput) ToCertManagerPrivateKeyResponseOutput() CertManagerPrivateKeyResponseOutput {
	return o
}

func (o CertManagerPrivateKeyResponseOutput) ToCertManagerPrivateKeyResponseOutputWithContext(ctx context.Context) CertManagerPrivateKeyResponseOutput {
	return o
}

// algorithm for private key.
func (o CertManagerPrivateKeyResponseOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerPrivateKeyResponse) string { return v.Algorithm }).(pulumi.StringOutput)
}

// cert-manager rotationPolicy.
func (o CertManagerPrivateKeyResponseOutput) RotationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v CertManagerPrivateKeyResponse) string { return v.RotationPolicy }).(pulumi.StringOutput)
}

// size of private key.
func (o CertManagerPrivateKeyResponseOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v CertManagerPrivateKeyResponse) int { return v.Size }).(pulumi.IntOutput)
}

type CertManagerPrivateKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (CertManagerPrivateKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManagerPrivateKeyResponse)(nil)).Elem()
}

func (o CertManagerPrivateKeyResponsePtrOutput) ToCertManagerPrivateKeyResponsePtrOutput() CertManagerPrivateKeyResponsePtrOutput {
	return o
}

func (o CertManagerPrivateKeyResponsePtrOutput) ToCertManagerPrivateKeyResponsePtrOutputWithContext(ctx context.Context) CertManagerPrivateKeyResponsePtrOutput {
	return o
}

func (o CertManagerPrivateKeyResponsePtrOutput) Elem() CertManagerPrivateKeyResponseOutput {
	return o.ApplyT(func(v *CertManagerPrivateKeyResponse) CertManagerPrivateKeyResponse {
		if v != nil {
			return *v
		}
		var ret CertManagerPrivateKeyResponse
		return ret
	}).(CertManagerPrivateKeyResponseOutput)
}

// algorithm for private key.
func (o CertManagerPrivateKeyResponsePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrivateKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// cert-manager rotationPolicy.
func (o CertManagerPrivateKeyResponsePtrOutput) RotationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertManagerPrivateKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RotationPolicy
	}).(pulumi.StringPtrOutput)
}

// size of private key.
func (o CertManagerPrivateKeyResponsePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertManagerPrivateKeyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Defines the Docker image details
type ContainerImage struct {
	// Image pull policy.
	PullPolicy *string `pulumi:"pullPolicy"`
	// Image pull secrets.
	PullSecrets *string `pulumi:"pullSecrets"`
	// The Docker image name.
	Repository string `pulumi:"repository"`
	// The Docker  image tag.
	Tag string `pulumi:"tag"`
}

// ContainerImageInput is an input type that accepts ContainerImageArgs and ContainerImageOutput values.
// You can construct a concrete instance of `ContainerImageInput` via:
//
//	ContainerImageArgs{...}
type ContainerImageInput interface {
	pulumi.Input

	ToContainerImageOutput() ContainerImageOutput
	ToContainerImageOutputWithContext(context.Context) ContainerImageOutput
}

// Defines the Docker image details
type ContainerImageArgs struct {
	// Image pull policy.
	PullPolicy pulumi.StringPtrInput `pulumi:"pullPolicy"`
	// Image pull secrets.
	PullSecrets pulumi.StringPtrInput `pulumi:"pullSecrets"`
	// The Docker image name.
	Repository pulumi.StringInput `pulumi:"repository"`
	// The Docker  image tag.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (ContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (i ContainerImageArgs) ToContainerImageOutput() ContainerImageOutput {
	return i.ToContainerImageOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput)
}

func (i ContainerImageArgs) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput).ToContainerImagePtrOutputWithContext(ctx)
}

// ContainerImagePtrInput is an input type that accepts ContainerImageArgs, ContainerImagePtr and ContainerImagePtrOutput values.
// You can construct a concrete instance of `ContainerImagePtrInput` via:
//
//	        ContainerImageArgs{...}
//
//	or:
//
//	        nil
type ContainerImagePtrInput interface {
	pulumi.Input

	ToContainerImagePtrOutput() ContainerImagePtrOutput
	ToContainerImagePtrOutputWithContext(context.Context) ContainerImagePtrOutput
}

type containerImagePtrType ContainerImageArgs

func ContainerImagePtr(v *ContainerImageArgs) ContainerImagePtrInput {
	return (*containerImagePtrType)(v)
}

func (*containerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (i *containerImagePtrType) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i *containerImagePtrType) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePtrOutput)
}

// Defines the Docker image details
type ContainerImageOutput struct{ *pulumi.OutputState }

func (ContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (o ContainerImageOutput) ToContainerImageOutput() ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o.ToContainerImagePtrOutputWithContext(context.Background())
}

func (o ContainerImageOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerImage) *ContainerImage {
		return &v
	}).(ContainerImagePtrOutput)
}

// Image pull policy.
func (o ContainerImageOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

// Image pull secrets.
func (o ContainerImageOutput) PullSecrets() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.PullSecrets }).(pulumi.StringPtrOutput)
}

// The Docker image name.
func (o ContainerImageOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImage) string { return v.Repository }).(pulumi.StringOutput)
}

// The Docker  image tag.
func (o ContainerImageOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImage) string { return v.Tag }).(pulumi.StringOutput)
}

type ContainerImagePtrOutput struct{ *pulumi.OutputState }

func (ContainerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) Elem() ContainerImageOutput {
	return o.ApplyT(func(v *ContainerImage) ContainerImage {
		if v != nil {
			return *v
		}
		var ret ContainerImage
		return ret
	}).(ContainerImageOutput)
}

// Image pull policy.
func (o ContainerImagePtrOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.PullPolicy
	}).(pulumi.StringPtrOutput)
}

// Image pull secrets.
func (o ContainerImagePtrOutput) PullSecrets() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.PullSecrets
	}).(pulumi.StringPtrOutput)
}

// The Docker image name.
func (o ContainerImagePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// The Docker  image tag.
func (o ContainerImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// Defines the Docker image details
type ContainerImageResponse struct {
	// Image pull policy.
	PullPolicy *string `pulumi:"pullPolicy"`
	// Image pull secrets.
	PullSecrets *string `pulumi:"pullSecrets"`
	// The Docker image name.
	Repository string `pulumi:"repository"`
	// The Docker  image tag.
	Tag string `pulumi:"tag"`
}

// Defines the Docker image details
type ContainerImageResponseOutput struct{ *pulumi.OutputState }

func (ContainerImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImageResponse)(nil)).Elem()
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutput() ContainerImageResponseOutput {
	return o
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutputWithContext(ctx context.Context) ContainerImageResponseOutput {
	return o
}

// Image pull policy.
func (o ContainerImageResponseOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImageResponse) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

// Image pull secrets.
func (o ContainerImageResponseOutput) PullSecrets() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImageResponse) *string { return v.PullSecrets }).(pulumi.StringPtrOutput)
}

// The Docker image name.
func (o ContainerImageResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// The Docker  image tag.
func (o ContainerImageResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type ContainerImageResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImageResponse)(nil)).Elem()
}

func (o ContainerImageResponsePtrOutput) ToContainerImageResponsePtrOutput() ContainerImageResponsePtrOutput {
	return o
}

func (o ContainerImageResponsePtrOutput) ToContainerImageResponsePtrOutputWithContext(ctx context.Context) ContainerImageResponsePtrOutput {
	return o
}

func (o ContainerImageResponsePtrOutput) Elem() ContainerImageResponseOutput {
	return o.ApplyT(func(v *ContainerImageResponse) ContainerImageResponse {
		if v != nil {
			return *v
		}
		var ret ContainerImageResponse
		return ret
	}).(ContainerImageResponseOutput)
}

// Image pull policy.
func (o ContainerImageResponsePtrOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.PullPolicy
	}).(pulumi.StringPtrOutput)
}

// Image pull secrets.
func (o ContainerImageResponsePtrOutput) PullSecrets() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.PullSecrets
	}).(pulumi.StringPtrOutput)
}

// The Docker image name.
func (o ContainerImageResponsePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// The Docker  image tag.
func (o ContainerImageResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// DataLake connector map route properties
type DataLakeConnectorMap struct {
	// Allowed latency for transferring data.
	AllowedLatencySecs int `pulumi:"allowedLatencySecs"`
	// Client Id to use.
	ClientId string `pulumi:"clientId"`
	// Maximum messages to send per Batch.
	MaxMessagesPerBatch float64 `pulumi:"maxMessagesPerBatch"`
	// Message payload type.
	MessagePayloadType string `pulumi:"messagePayloadType"`
	// Mqtt source topic.
	MqttSourceTopic string `pulumi:"mqttSourceTopic"`
	// Quality of Service.
	Qos *int `pulumi:"qos"`
	// Delta table properties to use.
	Table DeltaTable `pulumi:"table"`
}

// Defaults sets the appropriate defaults for DataLakeConnectorMap
func (val *DataLakeConnectorMap) Defaults() *DataLakeConnectorMap {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// DataLakeConnectorMapInput is an input type that accepts DataLakeConnectorMap and DataLakeConnectorMapOutput values.
// You can construct a concrete instance of `DataLakeConnectorMapInput` via:
//
//	DataLakeConnectorMap{ "key": DataLakeConnectorArgs{...} }
type DataLakeConnectorMapInput interface {
	pulumi.Input

	ToDataLakeConnectorMapOutput() DataLakeConnectorMapOutput
	ToDataLakeConnectorMapOutputWithContext(context.Context) DataLakeConnectorMapOutput
}

// DataLake connector map route properties
type DataLakeConnectorMapArgs struct {
	// Allowed latency for transferring data.
	AllowedLatencySecs pulumi.IntInput `pulumi:"allowedLatencySecs"`
	// Client Id to use.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Maximum messages to send per Batch.
	MaxMessagesPerBatch pulumi.Float64Input `pulumi:"maxMessagesPerBatch"`
	// Message payload type.
	MessagePayloadType pulumi.StringInput `pulumi:"messagePayloadType"`
	// Mqtt source topic.
	MqttSourceTopic pulumi.StringInput `pulumi:"mqttSourceTopic"`
	// Quality of Service.
	Qos pulumi.IntPtrInput `pulumi:"qos"`
	// Delta table properties to use.
	Table DeltaTableInput `pulumi:"table"`
}

// Defaults sets the appropriate defaults for DataLakeConnectorMapArgs
func (val *DataLakeConnectorMapArgs) Defaults() *DataLakeConnectorMapArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		tmp.Qos = pulumi.IntPtr(1)
	}
	return &tmp
}
func (DataLakeConnectorMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeConnectorMap)(nil)).Elem()
}

func (i DataLakeConnectorMapArgs) ToDataLakeConnectorMapOutput() DataLakeConnectorMapOutput {
	return i.ToDataLakeConnectorMapOutputWithContext(context.Background())
}

func (i DataLakeConnectorMapArgs) ToDataLakeConnectorMapOutputWithContext(ctx context.Context) DataLakeConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeConnectorMapOutput)
}

// DataLake connector map route properties
type DataLakeConnectorMapOutput struct{ *pulumi.OutputState }

func (DataLakeConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeConnectorMap)(nil)).Elem()
}

func (o DataLakeConnectorMapOutput) ToDataLakeConnectorMapOutput() DataLakeConnectorMapOutput {
	return o
}

func (o DataLakeConnectorMapOutput) ToDataLakeConnectorMapOutputWithContext(ctx context.Context) DataLakeConnectorMapOutput {
	return o
}

// Allowed latency for transferring data.
func (o DataLakeConnectorMapOutput) AllowedLatencySecs() pulumi.IntOutput {
	return o.ApplyT(func(v DataLakeConnectorMap) int { return v.AllowedLatencySecs }).(pulumi.IntOutput)
}

// Client Id to use.
func (o DataLakeConnectorMapOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeConnectorMap) string { return v.ClientId }).(pulumi.StringOutput)
}

// Maximum messages to send per Batch.
func (o DataLakeConnectorMapOutput) MaxMessagesPerBatch() pulumi.Float64Output {
	return o.ApplyT(func(v DataLakeConnectorMap) float64 { return v.MaxMessagesPerBatch }).(pulumi.Float64Output)
}

// Message payload type.
func (o DataLakeConnectorMapOutput) MessagePayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeConnectorMap) string { return v.MessagePayloadType }).(pulumi.StringOutput)
}

// Mqtt source topic.
func (o DataLakeConnectorMapOutput) MqttSourceTopic() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeConnectorMap) string { return v.MqttSourceTopic }).(pulumi.StringOutput)
}

// Quality of Service.
func (o DataLakeConnectorMapOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataLakeConnectorMap) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

// Delta table properties to use.
func (o DataLakeConnectorMapOutput) Table() DeltaTableOutput {
	return o.ApplyT(func(v DataLakeConnectorMap) DeltaTable { return v.Table }).(DeltaTableOutput)
}

// DataLake connector map route properties
type DataLakeConnectorMapResponse struct {
	// Allowed latency for transferring data.
	AllowedLatencySecs int `pulumi:"allowedLatencySecs"`
	// Client Id to use.
	ClientId string `pulumi:"clientId"`
	// Maximum messages to send per Batch.
	MaxMessagesPerBatch float64 `pulumi:"maxMessagesPerBatch"`
	// Message payload type.
	MessagePayloadType string `pulumi:"messagePayloadType"`
	// Mqtt source topic.
	MqttSourceTopic string `pulumi:"mqttSourceTopic"`
	// Quality of Service.
	Qos *int `pulumi:"qos"`
	// Delta table properties to use.
	Table DeltaTableResponse `pulumi:"table"`
}

// Defaults sets the appropriate defaults for DataLakeConnectorMapResponse
func (val *DataLakeConnectorMapResponse) Defaults() *DataLakeConnectorMapResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// DataLake connector map route properties
type DataLakeConnectorMapResponseOutput struct{ *pulumi.OutputState }

func (DataLakeConnectorMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeConnectorMapResponse)(nil)).Elem()
}

func (o DataLakeConnectorMapResponseOutput) ToDataLakeConnectorMapResponseOutput() DataLakeConnectorMapResponseOutput {
	return o
}

func (o DataLakeConnectorMapResponseOutput) ToDataLakeConnectorMapResponseOutputWithContext(ctx context.Context) DataLakeConnectorMapResponseOutput {
	return o
}

// Allowed latency for transferring data.
func (o DataLakeConnectorMapResponseOutput) AllowedLatencySecs() pulumi.IntOutput {
	return o.ApplyT(func(v DataLakeConnectorMapResponse) int { return v.AllowedLatencySecs }).(pulumi.IntOutput)
}

// Client Id to use.
func (o DataLakeConnectorMapResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeConnectorMapResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Maximum messages to send per Batch.
func (o DataLakeConnectorMapResponseOutput) MaxMessagesPerBatch() pulumi.Float64Output {
	return o.ApplyT(func(v DataLakeConnectorMapResponse) float64 { return v.MaxMessagesPerBatch }).(pulumi.Float64Output)
}

// Message payload type.
func (o DataLakeConnectorMapResponseOutput) MessagePayloadType() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeConnectorMapResponse) string { return v.MessagePayloadType }).(pulumi.StringOutput)
}

// Mqtt source topic.
func (o DataLakeConnectorMapResponseOutput) MqttSourceTopic() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeConnectorMapResponse) string { return v.MqttSourceTopic }).(pulumi.StringOutput)
}

// Quality of Service.
func (o DataLakeConnectorMapResponseOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataLakeConnectorMapResponse) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

// Delta table properties to use.
func (o DataLakeConnectorMapResponseOutput) Table() DeltaTableResponseOutput {
	return o.ApplyT(func(v DataLakeConnectorMapResponse) DeltaTableResponse { return v.Table }).(DeltaTableResponseOutput)
}

// DataLake Fabric Storage details.
type DataLakeFabricStorage struct {
	// DataLake fabric storage authentication details.
	Authentication DataLakeFabricStorageAuthentication `pulumi:"authentication"`
	// DataLake fabric storage endpoint to use.
	Endpoint string `pulumi:"endpoint"`
	// Fabric path type to use.
	FabricPath string `pulumi:"fabricPath"`
	// Fabric one lake Guids.
	Guids *FabricGuids `pulumi:"guids"`
	// Fabric one lake Names.
	Names *FabricNames `pulumi:"names"`
}

// DataLakeFabricStorageInput is an input type that accepts DataLakeFabricStorageArgs and DataLakeFabricStorageOutput values.
// You can construct a concrete instance of `DataLakeFabricStorageInput` via:
//
//	DataLakeFabricStorageArgs{...}
type DataLakeFabricStorageInput interface {
	pulumi.Input

	ToDataLakeFabricStorageOutput() DataLakeFabricStorageOutput
	ToDataLakeFabricStorageOutputWithContext(context.Context) DataLakeFabricStorageOutput
}

// DataLake Fabric Storage details.
type DataLakeFabricStorageArgs struct {
	// DataLake fabric storage authentication details.
	Authentication DataLakeFabricStorageAuthenticationInput `pulumi:"authentication"`
	// DataLake fabric storage endpoint to use.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Fabric path type to use.
	FabricPath pulumi.StringInput `pulumi:"fabricPath"`
	// Fabric one lake Guids.
	Guids FabricGuidsPtrInput `pulumi:"guids"`
	// Fabric one lake Names.
	Names FabricNamesPtrInput `pulumi:"names"`
}

func (DataLakeFabricStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeFabricStorage)(nil)).Elem()
}

func (i DataLakeFabricStorageArgs) ToDataLakeFabricStorageOutput() DataLakeFabricStorageOutput {
	return i.ToDataLakeFabricStorageOutputWithContext(context.Background())
}

func (i DataLakeFabricStorageArgs) ToDataLakeFabricStorageOutputWithContext(ctx context.Context) DataLakeFabricStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeFabricStorageOutput)
}

func (i DataLakeFabricStorageArgs) ToDataLakeFabricStoragePtrOutput() DataLakeFabricStoragePtrOutput {
	return i.ToDataLakeFabricStoragePtrOutputWithContext(context.Background())
}

func (i DataLakeFabricStorageArgs) ToDataLakeFabricStoragePtrOutputWithContext(ctx context.Context) DataLakeFabricStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeFabricStorageOutput).ToDataLakeFabricStoragePtrOutputWithContext(ctx)
}

// DataLakeFabricStoragePtrInput is an input type that accepts DataLakeFabricStorageArgs, DataLakeFabricStoragePtr and DataLakeFabricStoragePtrOutput values.
// You can construct a concrete instance of `DataLakeFabricStoragePtrInput` via:
//
//	        DataLakeFabricStorageArgs{...}
//
//	or:
//
//	        nil
type DataLakeFabricStoragePtrInput interface {
	pulumi.Input

	ToDataLakeFabricStoragePtrOutput() DataLakeFabricStoragePtrOutput
	ToDataLakeFabricStoragePtrOutputWithContext(context.Context) DataLakeFabricStoragePtrOutput
}

type dataLakeFabricStoragePtrType DataLakeFabricStorageArgs

func DataLakeFabricStoragePtr(v *DataLakeFabricStorageArgs) DataLakeFabricStoragePtrInput {
	return (*dataLakeFabricStoragePtrType)(v)
}

func (*dataLakeFabricStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeFabricStorage)(nil)).Elem()
}

func (i *dataLakeFabricStoragePtrType) ToDataLakeFabricStoragePtrOutput() DataLakeFabricStoragePtrOutput {
	return i.ToDataLakeFabricStoragePtrOutputWithContext(context.Background())
}

func (i *dataLakeFabricStoragePtrType) ToDataLakeFabricStoragePtrOutputWithContext(ctx context.Context) DataLakeFabricStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeFabricStoragePtrOutput)
}

// DataLake Fabric Storage details.
type DataLakeFabricStorageOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeFabricStorage)(nil)).Elem()
}

func (o DataLakeFabricStorageOutput) ToDataLakeFabricStorageOutput() DataLakeFabricStorageOutput {
	return o
}

func (o DataLakeFabricStorageOutput) ToDataLakeFabricStorageOutputWithContext(ctx context.Context) DataLakeFabricStorageOutput {
	return o
}

func (o DataLakeFabricStorageOutput) ToDataLakeFabricStoragePtrOutput() DataLakeFabricStoragePtrOutput {
	return o.ToDataLakeFabricStoragePtrOutputWithContext(context.Background())
}

func (o DataLakeFabricStorageOutput) ToDataLakeFabricStoragePtrOutputWithContext(ctx context.Context) DataLakeFabricStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeFabricStorage) *DataLakeFabricStorage {
		return &v
	}).(DataLakeFabricStoragePtrOutput)
}

// DataLake fabric storage authentication details.
func (o DataLakeFabricStorageOutput) Authentication() DataLakeFabricStorageAuthenticationOutput {
	return o.ApplyT(func(v DataLakeFabricStorage) DataLakeFabricStorageAuthentication { return v.Authentication }).(DataLakeFabricStorageAuthenticationOutput)
}

// DataLake fabric storage endpoint to use.
func (o DataLakeFabricStorageOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeFabricStorage) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Fabric path type to use.
func (o DataLakeFabricStorageOutput) FabricPath() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeFabricStorage) string { return v.FabricPath }).(pulumi.StringOutput)
}

// Fabric one lake Guids.
func (o DataLakeFabricStorageOutput) Guids() FabricGuidsPtrOutput {
	return o.ApplyT(func(v DataLakeFabricStorage) *FabricGuids { return v.Guids }).(FabricGuidsPtrOutput)
}

// Fabric one lake Names.
func (o DataLakeFabricStorageOutput) Names() FabricNamesPtrOutput {
	return o.ApplyT(func(v DataLakeFabricStorage) *FabricNames { return v.Names }).(FabricNamesPtrOutput)
}

type DataLakeFabricStoragePtrOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeFabricStorage)(nil)).Elem()
}

func (o DataLakeFabricStoragePtrOutput) ToDataLakeFabricStoragePtrOutput() DataLakeFabricStoragePtrOutput {
	return o
}

func (o DataLakeFabricStoragePtrOutput) ToDataLakeFabricStoragePtrOutputWithContext(ctx context.Context) DataLakeFabricStoragePtrOutput {
	return o
}

func (o DataLakeFabricStoragePtrOutput) Elem() DataLakeFabricStorageOutput {
	return o.ApplyT(func(v *DataLakeFabricStorage) DataLakeFabricStorage {
		if v != nil {
			return *v
		}
		var ret DataLakeFabricStorage
		return ret
	}).(DataLakeFabricStorageOutput)
}

// DataLake fabric storage authentication details.
func (o DataLakeFabricStoragePtrOutput) Authentication() DataLakeFabricStorageAuthenticationPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorage) *DataLakeFabricStorageAuthentication {
		if v == nil {
			return nil
		}
		return &v.Authentication
	}).(DataLakeFabricStorageAuthenticationPtrOutput)
}

// DataLake fabric storage endpoint to use.
func (o DataLakeFabricStoragePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorage) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Fabric path type to use.
func (o DataLakeFabricStoragePtrOutput) FabricPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorage) *string {
		if v == nil {
			return nil
		}
		return &v.FabricPath
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake Guids.
func (o DataLakeFabricStoragePtrOutput) Guids() FabricGuidsPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorage) *FabricGuids {
		if v == nil {
			return nil
		}
		return v.Guids
	}).(FabricGuidsPtrOutput)
}

// Fabric one lake Names.
func (o DataLakeFabricStoragePtrOutput) Names() FabricNamesPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorage) *FabricNames {
		if v == nil {
			return nil
		}
		return v.Names
	}).(FabricNamesPtrOutput)
}

// DataLake Fabric Storage authentication details.
type DataLakeFabricStorageAuthentication struct {
	// Configuration for managed identity authentication.
	SystemAssignedManagedIdentity ManagedIdentityAuthentication `pulumi:"systemAssignedManagedIdentity"`
}

// DataLakeFabricStorageAuthenticationInput is an input type that accepts DataLakeFabricStorageAuthenticationArgs and DataLakeFabricStorageAuthenticationOutput values.
// You can construct a concrete instance of `DataLakeFabricStorageAuthenticationInput` via:
//
//	DataLakeFabricStorageAuthenticationArgs{...}
type DataLakeFabricStorageAuthenticationInput interface {
	pulumi.Input

	ToDataLakeFabricStorageAuthenticationOutput() DataLakeFabricStorageAuthenticationOutput
	ToDataLakeFabricStorageAuthenticationOutputWithContext(context.Context) DataLakeFabricStorageAuthenticationOutput
}

// DataLake Fabric Storage authentication details.
type DataLakeFabricStorageAuthenticationArgs struct {
	// Configuration for managed identity authentication.
	SystemAssignedManagedIdentity ManagedIdentityAuthenticationInput `pulumi:"systemAssignedManagedIdentity"`
}

func (DataLakeFabricStorageAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeFabricStorageAuthentication)(nil)).Elem()
}

func (i DataLakeFabricStorageAuthenticationArgs) ToDataLakeFabricStorageAuthenticationOutput() DataLakeFabricStorageAuthenticationOutput {
	return i.ToDataLakeFabricStorageAuthenticationOutputWithContext(context.Background())
}

func (i DataLakeFabricStorageAuthenticationArgs) ToDataLakeFabricStorageAuthenticationOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeFabricStorageAuthenticationOutput)
}

func (i DataLakeFabricStorageAuthenticationArgs) ToDataLakeFabricStorageAuthenticationPtrOutput() DataLakeFabricStorageAuthenticationPtrOutput {
	return i.ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (i DataLakeFabricStorageAuthenticationArgs) ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeFabricStorageAuthenticationOutput).ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(ctx)
}

// DataLakeFabricStorageAuthenticationPtrInput is an input type that accepts DataLakeFabricStorageAuthenticationArgs, DataLakeFabricStorageAuthenticationPtr and DataLakeFabricStorageAuthenticationPtrOutput values.
// You can construct a concrete instance of `DataLakeFabricStorageAuthenticationPtrInput` via:
//
//	        DataLakeFabricStorageAuthenticationArgs{...}
//
//	or:
//
//	        nil
type DataLakeFabricStorageAuthenticationPtrInput interface {
	pulumi.Input

	ToDataLakeFabricStorageAuthenticationPtrOutput() DataLakeFabricStorageAuthenticationPtrOutput
	ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(context.Context) DataLakeFabricStorageAuthenticationPtrOutput
}

type dataLakeFabricStorageAuthenticationPtrType DataLakeFabricStorageAuthenticationArgs

func DataLakeFabricStorageAuthenticationPtr(v *DataLakeFabricStorageAuthenticationArgs) DataLakeFabricStorageAuthenticationPtrInput {
	return (*dataLakeFabricStorageAuthenticationPtrType)(v)
}

func (*dataLakeFabricStorageAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeFabricStorageAuthentication)(nil)).Elem()
}

func (i *dataLakeFabricStorageAuthenticationPtrType) ToDataLakeFabricStorageAuthenticationPtrOutput() DataLakeFabricStorageAuthenticationPtrOutput {
	return i.ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (i *dataLakeFabricStorageAuthenticationPtrType) ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeFabricStorageAuthenticationPtrOutput)
}

// DataLake Fabric Storage authentication details.
type DataLakeFabricStorageAuthenticationOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStorageAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeFabricStorageAuthentication)(nil)).Elem()
}

func (o DataLakeFabricStorageAuthenticationOutput) ToDataLakeFabricStorageAuthenticationOutput() DataLakeFabricStorageAuthenticationOutput {
	return o
}

func (o DataLakeFabricStorageAuthenticationOutput) ToDataLakeFabricStorageAuthenticationOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationOutput {
	return o
}

func (o DataLakeFabricStorageAuthenticationOutput) ToDataLakeFabricStorageAuthenticationPtrOutput() DataLakeFabricStorageAuthenticationPtrOutput {
	return o.ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (o DataLakeFabricStorageAuthenticationOutput) ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeFabricStorageAuthentication) *DataLakeFabricStorageAuthentication {
		return &v
	}).(DataLakeFabricStorageAuthenticationPtrOutput)
}

// Configuration for managed identity authentication.
func (o DataLakeFabricStorageAuthenticationOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationOutput {
	return o.ApplyT(func(v DataLakeFabricStorageAuthentication) ManagedIdentityAuthentication {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationOutput)
}

type DataLakeFabricStorageAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStorageAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeFabricStorageAuthentication)(nil)).Elem()
}

func (o DataLakeFabricStorageAuthenticationPtrOutput) ToDataLakeFabricStorageAuthenticationPtrOutput() DataLakeFabricStorageAuthenticationPtrOutput {
	return o
}

func (o DataLakeFabricStorageAuthenticationPtrOutput) ToDataLakeFabricStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationPtrOutput {
	return o
}

func (o DataLakeFabricStorageAuthenticationPtrOutput) Elem() DataLakeFabricStorageAuthenticationOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageAuthentication) DataLakeFabricStorageAuthentication {
		if v != nil {
			return *v
		}
		var ret DataLakeFabricStorageAuthentication
		return ret
	}).(DataLakeFabricStorageAuthenticationOutput)
}

// Configuration for managed identity authentication.
func (o DataLakeFabricStorageAuthenticationPtrOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageAuthentication) *ManagedIdentityAuthentication {
		if v == nil {
			return nil
		}
		return &v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationPtrOutput)
}

// DataLake Fabric Storage authentication details.
type DataLakeFabricStorageAuthenticationResponse struct {
	// Configuration for managed identity authentication.
	SystemAssignedManagedIdentity ManagedIdentityAuthenticationResponse `pulumi:"systemAssignedManagedIdentity"`
}

// DataLake Fabric Storage authentication details.
type DataLakeFabricStorageAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStorageAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeFabricStorageAuthenticationResponse)(nil)).Elem()
}

func (o DataLakeFabricStorageAuthenticationResponseOutput) ToDataLakeFabricStorageAuthenticationResponseOutput() DataLakeFabricStorageAuthenticationResponseOutput {
	return o
}

func (o DataLakeFabricStorageAuthenticationResponseOutput) ToDataLakeFabricStorageAuthenticationResponseOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationResponseOutput {
	return o
}

// Configuration for managed identity authentication.
func (o DataLakeFabricStorageAuthenticationResponseOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationResponseOutput {
	return o.ApplyT(func(v DataLakeFabricStorageAuthenticationResponse) ManagedIdentityAuthenticationResponse {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationResponseOutput)
}

type DataLakeFabricStorageAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStorageAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeFabricStorageAuthenticationResponse)(nil)).Elem()
}

func (o DataLakeFabricStorageAuthenticationResponsePtrOutput) ToDataLakeFabricStorageAuthenticationResponsePtrOutput() DataLakeFabricStorageAuthenticationResponsePtrOutput {
	return o
}

func (o DataLakeFabricStorageAuthenticationResponsePtrOutput) ToDataLakeFabricStorageAuthenticationResponsePtrOutputWithContext(ctx context.Context) DataLakeFabricStorageAuthenticationResponsePtrOutput {
	return o
}

func (o DataLakeFabricStorageAuthenticationResponsePtrOutput) Elem() DataLakeFabricStorageAuthenticationResponseOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageAuthenticationResponse) DataLakeFabricStorageAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret DataLakeFabricStorageAuthenticationResponse
		return ret
	}).(DataLakeFabricStorageAuthenticationResponseOutput)
}

// Configuration for managed identity authentication.
func (o DataLakeFabricStorageAuthenticationResponsePtrOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageAuthenticationResponse) *ManagedIdentityAuthenticationResponse {
		if v == nil {
			return nil
		}
		return &v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationResponsePtrOutput)
}

// DataLake Fabric Storage details.
type DataLakeFabricStorageResponse struct {
	// DataLake fabric storage authentication details.
	Authentication DataLakeFabricStorageAuthenticationResponse `pulumi:"authentication"`
	// DataLake fabric storage endpoint to use.
	Endpoint string `pulumi:"endpoint"`
	// Fabric path type to use.
	FabricPath string `pulumi:"fabricPath"`
	// Fabric one lake Guids.
	Guids *FabricGuidsResponse `pulumi:"guids"`
	// Fabric one lake Names.
	Names *FabricNamesResponse `pulumi:"names"`
}

// DataLake Fabric Storage details.
type DataLakeFabricStorageResponseOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStorageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeFabricStorageResponse)(nil)).Elem()
}

func (o DataLakeFabricStorageResponseOutput) ToDataLakeFabricStorageResponseOutput() DataLakeFabricStorageResponseOutput {
	return o
}

func (o DataLakeFabricStorageResponseOutput) ToDataLakeFabricStorageResponseOutputWithContext(ctx context.Context) DataLakeFabricStorageResponseOutput {
	return o
}

// DataLake fabric storage authentication details.
func (o DataLakeFabricStorageResponseOutput) Authentication() DataLakeFabricStorageAuthenticationResponseOutput {
	return o.ApplyT(func(v DataLakeFabricStorageResponse) DataLakeFabricStorageAuthenticationResponse {
		return v.Authentication
	}).(DataLakeFabricStorageAuthenticationResponseOutput)
}

// DataLake fabric storage endpoint to use.
func (o DataLakeFabricStorageResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeFabricStorageResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Fabric path type to use.
func (o DataLakeFabricStorageResponseOutput) FabricPath() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeFabricStorageResponse) string { return v.FabricPath }).(pulumi.StringOutput)
}

// Fabric one lake Guids.
func (o DataLakeFabricStorageResponseOutput) Guids() FabricGuidsResponsePtrOutput {
	return o.ApplyT(func(v DataLakeFabricStorageResponse) *FabricGuidsResponse { return v.Guids }).(FabricGuidsResponsePtrOutput)
}

// Fabric one lake Names.
func (o DataLakeFabricStorageResponseOutput) Names() FabricNamesResponsePtrOutput {
	return o.ApplyT(func(v DataLakeFabricStorageResponse) *FabricNamesResponse { return v.Names }).(FabricNamesResponsePtrOutput)
}

type DataLakeFabricStorageResponsePtrOutput struct{ *pulumi.OutputState }

func (DataLakeFabricStorageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeFabricStorageResponse)(nil)).Elem()
}

func (o DataLakeFabricStorageResponsePtrOutput) ToDataLakeFabricStorageResponsePtrOutput() DataLakeFabricStorageResponsePtrOutput {
	return o
}

func (o DataLakeFabricStorageResponsePtrOutput) ToDataLakeFabricStorageResponsePtrOutputWithContext(ctx context.Context) DataLakeFabricStorageResponsePtrOutput {
	return o
}

func (o DataLakeFabricStorageResponsePtrOutput) Elem() DataLakeFabricStorageResponseOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageResponse) DataLakeFabricStorageResponse {
		if v != nil {
			return *v
		}
		var ret DataLakeFabricStorageResponse
		return ret
	}).(DataLakeFabricStorageResponseOutput)
}

// DataLake fabric storage authentication details.
func (o DataLakeFabricStorageResponsePtrOutput) Authentication() DataLakeFabricStorageAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageResponse) *DataLakeFabricStorageAuthenticationResponse {
		if v == nil {
			return nil
		}
		return &v.Authentication
	}).(DataLakeFabricStorageAuthenticationResponsePtrOutput)
}

// DataLake fabric storage endpoint to use.
func (o DataLakeFabricStorageResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Fabric path type to use.
func (o DataLakeFabricStorageResponsePtrOutput) FabricPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FabricPath
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake Guids.
func (o DataLakeFabricStorageResponsePtrOutput) Guids() FabricGuidsResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageResponse) *FabricGuidsResponse {
		if v == nil {
			return nil
		}
		return v.Guids
	}).(FabricGuidsResponsePtrOutput)
}

// Fabric one lake Names.
func (o DataLakeFabricStorageResponsePtrOutput) Names() FabricNamesResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeFabricStorageResponse) *FabricNamesResponse {
		if v == nil {
			return nil
		}
		return v.Names
	}).(FabricNamesResponsePtrOutput)
}

// DataLake Local Storage details.
type DataLakeLocalStorage struct {
	// Volume name to write to.
	VolumeName string `pulumi:"volumeName"`
}

// DataLakeLocalStorageInput is an input type that accepts DataLakeLocalStorageArgs and DataLakeLocalStorageOutput values.
// You can construct a concrete instance of `DataLakeLocalStorageInput` via:
//
//	DataLakeLocalStorageArgs{...}
type DataLakeLocalStorageInput interface {
	pulumi.Input

	ToDataLakeLocalStorageOutput() DataLakeLocalStorageOutput
	ToDataLakeLocalStorageOutputWithContext(context.Context) DataLakeLocalStorageOutput
}

// DataLake Local Storage details.
type DataLakeLocalStorageArgs struct {
	// Volume name to write to.
	VolumeName pulumi.StringInput `pulumi:"volumeName"`
}

func (DataLakeLocalStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeLocalStorage)(nil)).Elem()
}

func (i DataLakeLocalStorageArgs) ToDataLakeLocalStorageOutput() DataLakeLocalStorageOutput {
	return i.ToDataLakeLocalStorageOutputWithContext(context.Background())
}

func (i DataLakeLocalStorageArgs) ToDataLakeLocalStorageOutputWithContext(ctx context.Context) DataLakeLocalStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeLocalStorageOutput)
}

func (i DataLakeLocalStorageArgs) ToDataLakeLocalStoragePtrOutput() DataLakeLocalStoragePtrOutput {
	return i.ToDataLakeLocalStoragePtrOutputWithContext(context.Background())
}

func (i DataLakeLocalStorageArgs) ToDataLakeLocalStoragePtrOutputWithContext(ctx context.Context) DataLakeLocalStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeLocalStorageOutput).ToDataLakeLocalStoragePtrOutputWithContext(ctx)
}

// DataLakeLocalStoragePtrInput is an input type that accepts DataLakeLocalStorageArgs, DataLakeLocalStoragePtr and DataLakeLocalStoragePtrOutput values.
// You can construct a concrete instance of `DataLakeLocalStoragePtrInput` via:
//
//	        DataLakeLocalStorageArgs{...}
//
//	or:
//
//	        nil
type DataLakeLocalStoragePtrInput interface {
	pulumi.Input

	ToDataLakeLocalStoragePtrOutput() DataLakeLocalStoragePtrOutput
	ToDataLakeLocalStoragePtrOutputWithContext(context.Context) DataLakeLocalStoragePtrOutput
}

type dataLakeLocalStoragePtrType DataLakeLocalStorageArgs

func DataLakeLocalStoragePtr(v *DataLakeLocalStorageArgs) DataLakeLocalStoragePtrInput {
	return (*dataLakeLocalStoragePtrType)(v)
}

func (*dataLakeLocalStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeLocalStorage)(nil)).Elem()
}

func (i *dataLakeLocalStoragePtrType) ToDataLakeLocalStoragePtrOutput() DataLakeLocalStoragePtrOutput {
	return i.ToDataLakeLocalStoragePtrOutputWithContext(context.Background())
}

func (i *dataLakeLocalStoragePtrType) ToDataLakeLocalStoragePtrOutputWithContext(ctx context.Context) DataLakeLocalStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeLocalStoragePtrOutput)
}

// DataLake Local Storage details.
type DataLakeLocalStorageOutput struct{ *pulumi.OutputState }

func (DataLakeLocalStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeLocalStorage)(nil)).Elem()
}

func (o DataLakeLocalStorageOutput) ToDataLakeLocalStorageOutput() DataLakeLocalStorageOutput {
	return o
}

func (o DataLakeLocalStorageOutput) ToDataLakeLocalStorageOutputWithContext(ctx context.Context) DataLakeLocalStorageOutput {
	return o
}

func (o DataLakeLocalStorageOutput) ToDataLakeLocalStoragePtrOutput() DataLakeLocalStoragePtrOutput {
	return o.ToDataLakeLocalStoragePtrOutputWithContext(context.Background())
}

func (o DataLakeLocalStorageOutput) ToDataLakeLocalStoragePtrOutputWithContext(ctx context.Context) DataLakeLocalStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeLocalStorage) *DataLakeLocalStorage {
		return &v
	}).(DataLakeLocalStoragePtrOutput)
}

// Volume name to write to.
func (o DataLakeLocalStorageOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeLocalStorage) string { return v.VolumeName }).(pulumi.StringOutput)
}

type DataLakeLocalStoragePtrOutput struct{ *pulumi.OutputState }

func (DataLakeLocalStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeLocalStorage)(nil)).Elem()
}

func (o DataLakeLocalStoragePtrOutput) ToDataLakeLocalStoragePtrOutput() DataLakeLocalStoragePtrOutput {
	return o
}

func (o DataLakeLocalStoragePtrOutput) ToDataLakeLocalStoragePtrOutputWithContext(ctx context.Context) DataLakeLocalStoragePtrOutput {
	return o
}

func (o DataLakeLocalStoragePtrOutput) Elem() DataLakeLocalStorageOutput {
	return o.ApplyT(func(v *DataLakeLocalStorage) DataLakeLocalStorage {
		if v != nil {
			return *v
		}
		var ret DataLakeLocalStorage
		return ret
	}).(DataLakeLocalStorageOutput)
}

// Volume name to write to.
func (o DataLakeLocalStoragePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeLocalStorage) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// DataLake Local Storage details.
type DataLakeLocalStorageResponse struct {
	// Volume name to write to.
	VolumeName string `pulumi:"volumeName"`
}

// DataLake Local Storage details.
type DataLakeLocalStorageResponseOutput struct{ *pulumi.OutputState }

func (DataLakeLocalStorageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeLocalStorageResponse)(nil)).Elem()
}

func (o DataLakeLocalStorageResponseOutput) ToDataLakeLocalStorageResponseOutput() DataLakeLocalStorageResponseOutput {
	return o
}

func (o DataLakeLocalStorageResponseOutput) ToDataLakeLocalStorageResponseOutputWithContext(ctx context.Context) DataLakeLocalStorageResponseOutput {
	return o
}

// Volume name to write to.
func (o DataLakeLocalStorageResponseOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeLocalStorageResponse) string { return v.VolumeName }).(pulumi.StringOutput)
}

type DataLakeLocalStorageResponsePtrOutput struct{ *pulumi.OutputState }

func (DataLakeLocalStorageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeLocalStorageResponse)(nil)).Elem()
}

func (o DataLakeLocalStorageResponsePtrOutput) ToDataLakeLocalStorageResponsePtrOutput() DataLakeLocalStorageResponsePtrOutput {
	return o
}

func (o DataLakeLocalStorageResponsePtrOutput) ToDataLakeLocalStorageResponsePtrOutputWithContext(ctx context.Context) DataLakeLocalStorageResponsePtrOutput {
	return o
}

func (o DataLakeLocalStorageResponsePtrOutput) Elem() DataLakeLocalStorageResponseOutput {
	return o.ApplyT(func(v *DataLakeLocalStorageResponse) DataLakeLocalStorageResponse {
		if v != nil {
			return *v
		}
		var ret DataLakeLocalStorageResponse
		return ret
	}).(DataLakeLocalStorageResponseOutput)
}

// Volume name to write to.
func (o DataLakeLocalStorageResponsePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeLocalStorageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// DataLake Service Storage details.
type DataLakeServiceStorage struct {
	// DataLake service storage authentication details. NOTE - Enum only one method is supported.
	Authentication DataLakeServiceStorageAuthentication `pulumi:"authentication"`
	// DataLake service storage endpoint to use.
	Endpoint string `pulumi:"endpoint"`
}

// DataLakeServiceStorageInput is an input type that accepts DataLakeServiceStorageArgs and DataLakeServiceStorageOutput values.
// You can construct a concrete instance of `DataLakeServiceStorageInput` via:
//
//	DataLakeServiceStorageArgs{...}
type DataLakeServiceStorageInput interface {
	pulumi.Input

	ToDataLakeServiceStorageOutput() DataLakeServiceStorageOutput
	ToDataLakeServiceStorageOutputWithContext(context.Context) DataLakeServiceStorageOutput
}

// DataLake Service Storage details.
type DataLakeServiceStorageArgs struct {
	// DataLake service storage authentication details. NOTE - Enum only one method is supported.
	Authentication DataLakeServiceStorageAuthenticationInput `pulumi:"authentication"`
	// DataLake service storage endpoint to use.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
}

func (DataLakeServiceStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeServiceStorage)(nil)).Elem()
}

func (i DataLakeServiceStorageArgs) ToDataLakeServiceStorageOutput() DataLakeServiceStorageOutput {
	return i.ToDataLakeServiceStorageOutputWithContext(context.Background())
}

func (i DataLakeServiceStorageArgs) ToDataLakeServiceStorageOutputWithContext(ctx context.Context) DataLakeServiceStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeServiceStorageOutput)
}

func (i DataLakeServiceStorageArgs) ToDataLakeServiceStoragePtrOutput() DataLakeServiceStoragePtrOutput {
	return i.ToDataLakeServiceStoragePtrOutputWithContext(context.Background())
}

func (i DataLakeServiceStorageArgs) ToDataLakeServiceStoragePtrOutputWithContext(ctx context.Context) DataLakeServiceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeServiceStorageOutput).ToDataLakeServiceStoragePtrOutputWithContext(ctx)
}

// DataLakeServiceStoragePtrInput is an input type that accepts DataLakeServiceStorageArgs, DataLakeServiceStoragePtr and DataLakeServiceStoragePtrOutput values.
// You can construct a concrete instance of `DataLakeServiceStoragePtrInput` via:
//
//	        DataLakeServiceStorageArgs{...}
//
//	or:
//
//	        nil
type DataLakeServiceStoragePtrInput interface {
	pulumi.Input

	ToDataLakeServiceStoragePtrOutput() DataLakeServiceStoragePtrOutput
	ToDataLakeServiceStoragePtrOutputWithContext(context.Context) DataLakeServiceStoragePtrOutput
}

type dataLakeServiceStoragePtrType DataLakeServiceStorageArgs

func DataLakeServiceStoragePtr(v *DataLakeServiceStorageArgs) DataLakeServiceStoragePtrInput {
	return (*dataLakeServiceStoragePtrType)(v)
}

func (*dataLakeServiceStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeServiceStorage)(nil)).Elem()
}

func (i *dataLakeServiceStoragePtrType) ToDataLakeServiceStoragePtrOutput() DataLakeServiceStoragePtrOutput {
	return i.ToDataLakeServiceStoragePtrOutputWithContext(context.Background())
}

func (i *dataLakeServiceStoragePtrType) ToDataLakeServiceStoragePtrOutputWithContext(ctx context.Context) DataLakeServiceStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeServiceStoragePtrOutput)
}

// DataLake Service Storage details.
type DataLakeServiceStorageOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeServiceStorage)(nil)).Elem()
}

func (o DataLakeServiceStorageOutput) ToDataLakeServiceStorageOutput() DataLakeServiceStorageOutput {
	return o
}

func (o DataLakeServiceStorageOutput) ToDataLakeServiceStorageOutputWithContext(ctx context.Context) DataLakeServiceStorageOutput {
	return o
}

func (o DataLakeServiceStorageOutput) ToDataLakeServiceStoragePtrOutput() DataLakeServiceStoragePtrOutput {
	return o.ToDataLakeServiceStoragePtrOutputWithContext(context.Background())
}

func (o DataLakeServiceStorageOutput) ToDataLakeServiceStoragePtrOutputWithContext(ctx context.Context) DataLakeServiceStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeServiceStorage) *DataLakeServiceStorage {
		return &v
	}).(DataLakeServiceStoragePtrOutput)
}

// DataLake service storage authentication details. NOTE - Enum only one method is supported.
func (o DataLakeServiceStorageOutput) Authentication() DataLakeServiceStorageAuthenticationOutput {
	return o.ApplyT(func(v DataLakeServiceStorage) DataLakeServiceStorageAuthentication { return v.Authentication }).(DataLakeServiceStorageAuthenticationOutput)
}

// DataLake service storage endpoint to use.
func (o DataLakeServiceStorageOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeServiceStorage) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataLakeServiceStoragePtrOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeServiceStorage)(nil)).Elem()
}

func (o DataLakeServiceStoragePtrOutput) ToDataLakeServiceStoragePtrOutput() DataLakeServiceStoragePtrOutput {
	return o
}

func (o DataLakeServiceStoragePtrOutput) ToDataLakeServiceStoragePtrOutputWithContext(ctx context.Context) DataLakeServiceStoragePtrOutput {
	return o
}

func (o DataLakeServiceStoragePtrOutput) Elem() DataLakeServiceStorageOutput {
	return o.ApplyT(func(v *DataLakeServiceStorage) DataLakeServiceStorage {
		if v != nil {
			return *v
		}
		var ret DataLakeServiceStorage
		return ret
	}).(DataLakeServiceStorageOutput)
}

// DataLake service storage authentication details. NOTE - Enum only one method is supported.
func (o DataLakeServiceStoragePtrOutput) Authentication() DataLakeServiceStorageAuthenticationPtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorage) *DataLakeServiceStorageAuthentication {
		if v == nil {
			return nil
		}
		return &v.Authentication
	}).(DataLakeServiceStorageAuthenticationPtrOutput)
}

// DataLake service storage endpoint to use.
func (o DataLakeServiceStoragePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorage) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// DataLake Service Storage authentication details. NOTE - Enum only one method is supported.
type DataLakeServiceStorageAuthentication struct {
	// Access token secret name.
	AccessTokenSecretName *string `pulumi:"accessTokenSecretName"`
	// Configuration for managed identity authentication.
	SystemAssignedManagedIdentity *ManagedIdentityAuthentication `pulumi:"systemAssignedManagedIdentity"`
}

// DataLakeServiceStorageAuthenticationInput is an input type that accepts DataLakeServiceStorageAuthenticationArgs and DataLakeServiceStorageAuthenticationOutput values.
// You can construct a concrete instance of `DataLakeServiceStorageAuthenticationInput` via:
//
//	DataLakeServiceStorageAuthenticationArgs{...}
type DataLakeServiceStorageAuthenticationInput interface {
	pulumi.Input

	ToDataLakeServiceStorageAuthenticationOutput() DataLakeServiceStorageAuthenticationOutput
	ToDataLakeServiceStorageAuthenticationOutputWithContext(context.Context) DataLakeServiceStorageAuthenticationOutput
}

// DataLake Service Storage authentication details. NOTE - Enum only one method is supported.
type DataLakeServiceStorageAuthenticationArgs struct {
	// Access token secret name.
	AccessTokenSecretName pulumi.StringPtrInput `pulumi:"accessTokenSecretName"`
	// Configuration for managed identity authentication.
	SystemAssignedManagedIdentity ManagedIdentityAuthenticationPtrInput `pulumi:"systemAssignedManagedIdentity"`
}

func (DataLakeServiceStorageAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeServiceStorageAuthentication)(nil)).Elem()
}

func (i DataLakeServiceStorageAuthenticationArgs) ToDataLakeServiceStorageAuthenticationOutput() DataLakeServiceStorageAuthenticationOutput {
	return i.ToDataLakeServiceStorageAuthenticationOutputWithContext(context.Background())
}

func (i DataLakeServiceStorageAuthenticationArgs) ToDataLakeServiceStorageAuthenticationOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeServiceStorageAuthenticationOutput)
}

func (i DataLakeServiceStorageAuthenticationArgs) ToDataLakeServiceStorageAuthenticationPtrOutput() DataLakeServiceStorageAuthenticationPtrOutput {
	return i.ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (i DataLakeServiceStorageAuthenticationArgs) ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeServiceStorageAuthenticationOutput).ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(ctx)
}

// DataLakeServiceStorageAuthenticationPtrInput is an input type that accepts DataLakeServiceStorageAuthenticationArgs, DataLakeServiceStorageAuthenticationPtr and DataLakeServiceStorageAuthenticationPtrOutput values.
// You can construct a concrete instance of `DataLakeServiceStorageAuthenticationPtrInput` via:
//
//	        DataLakeServiceStorageAuthenticationArgs{...}
//
//	or:
//
//	        nil
type DataLakeServiceStorageAuthenticationPtrInput interface {
	pulumi.Input

	ToDataLakeServiceStorageAuthenticationPtrOutput() DataLakeServiceStorageAuthenticationPtrOutput
	ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(context.Context) DataLakeServiceStorageAuthenticationPtrOutput
}

type dataLakeServiceStorageAuthenticationPtrType DataLakeServiceStorageAuthenticationArgs

func DataLakeServiceStorageAuthenticationPtr(v *DataLakeServiceStorageAuthenticationArgs) DataLakeServiceStorageAuthenticationPtrInput {
	return (*dataLakeServiceStorageAuthenticationPtrType)(v)
}

func (*dataLakeServiceStorageAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeServiceStorageAuthentication)(nil)).Elem()
}

func (i *dataLakeServiceStorageAuthenticationPtrType) ToDataLakeServiceStorageAuthenticationPtrOutput() DataLakeServiceStorageAuthenticationPtrOutput {
	return i.ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (i *dataLakeServiceStorageAuthenticationPtrType) ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeServiceStorageAuthenticationPtrOutput)
}

// DataLake Service Storage authentication details. NOTE - Enum only one method is supported.
type DataLakeServiceStorageAuthenticationOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStorageAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeServiceStorageAuthentication)(nil)).Elem()
}

func (o DataLakeServiceStorageAuthenticationOutput) ToDataLakeServiceStorageAuthenticationOutput() DataLakeServiceStorageAuthenticationOutput {
	return o
}

func (o DataLakeServiceStorageAuthenticationOutput) ToDataLakeServiceStorageAuthenticationOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationOutput {
	return o
}

func (o DataLakeServiceStorageAuthenticationOutput) ToDataLakeServiceStorageAuthenticationPtrOutput() DataLakeServiceStorageAuthenticationPtrOutput {
	return o.ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(context.Background())
}

func (o DataLakeServiceStorageAuthenticationOutput) ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeServiceStorageAuthentication) *DataLakeServiceStorageAuthentication {
		return &v
	}).(DataLakeServiceStorageAuthenticationPtrOutput)
}

// Access token secret name.
func (o DataLakeServiceStorageAuthenticationOutput) AccessTokenSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeServiceStorageAuthentication) *string { return v.AccessTokenSecretName }).(pulumi.StringPtrOutput)
}

// Configuration for managed identity authentication.
func (o DataLakeServiceStorageAuthenticationOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationPtrOutput {
	return o.ApplyT(func(v DataLakeServiceStorageAuthentication) *ManagedIdentityAuthentication {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationPtrOutput)
}

type DataLakeServiceStorageAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStorageAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeServiceStorageAuthentication)(nil)).Elem()
}

func (o DataLakeServiceStorageAuthenticationPtrOutput) ToDataLakeServiceStorageAuthenticationPtrOutput() DataLakeServiceStorageAuthenticationPtrOutput {
	return o
}

func (o DataLakeServiceStorageAuthenticationPtrOutput) ToDataLakeServiceStorageAuthenticationPtrOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationPtrOutput {
	return o
}

func (o DataLakeServiceStorageAuthenticationPtrOutput) Elem() DataLakeServiceStorageAuthenticationOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageAuthentication) DataLakeServiceStorageAuthentication {
		if v != nil {
			return *v
		}
		var ret DataLakeServiceStorageAuthentication
		return ret
	}).(DataLakeServiceStorageAuthenticationOutput)
}

// Access token secret name.
func (o DataLakeServiceStorageAuthenticationPtrOutput) AccessTokenSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AccessTokenSecretName
	}).(pulumi.StringPtrOutput)
}

// Configuration for managed identity authentication.
func (o DataLakeServiceStorageAuthenticationPtrOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationPtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageAuthentication) *ManagedIdentityAuthentication {
		if v == nil {
			return nil
		}
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationPtrOutput)
}

// DataLake Service Storage authentication details. NOTE - Enum only one method is supported.
type DataLakeServiceStorageAuthenticationResponse struct {
	// Access token secret name.
	AccessTokenSecretName *string `pulumi:"accessTokenSecretName"`
	// Configuration for managed identity authentication.
	SystemAssignedManagedIdentity *ManagedIdentityAuthenticationResponse `pulumi:"systemAssignedManagedIdentity"`
}

// DataLake Service Storage authentication details. NOTE - Enum only one method is supported.
type DataLakeServiceStorageAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStorageAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeServiceStorageAuthenticationResponse)(nil)).Elem()
}

func (o DataLakeServiceStorageAuthenticationResponseOutput) ToDataLakeServiceStorageAuthenticationResponseOutput() DataLakeServiceStorageAuthenticationResponseOutput {
	return o
}

func (o DataLakeServiceStorageAuthenticationResponseOutput) ToDataLakeServiceStorageAuthenticationResponseOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationResponseOutput {
	return o
}

// Access token secret name.
func (o DataLakeServiceStorageAuthenticationResponseOutput) AccessTokenSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeServiceStorageAuthenticationResponse) *string { return v.AccessTokenSecretName }).(pulumi.StringPtrOutput)
}

// Configuration for managed identity authentication.
func (o DataLakeServiceStorageAuthenticationResponseOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v DataLakeServiceStorageAuthenticationResponse) *ManagedIdentityAuthenticationResponse {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationResponsePtrOutput)
}

type DataLakeServiceStorageAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStorageAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeServiceStorageAuthenticationResponse)(nil)).Elem()
}

func (o DataLakeServiceStorageAuthenticationResponsePtrOutput) ToDataLakeServiceStorageAuthenticationResponsePtrOutput() DataLakeServiceStorageAuthenticationResponsePtrOutput {
	return o
}

func (o DataLakeServiceStorageAuthenticationResponsePtrOutput) ToDataLakeServiceStorageAuthenticationResponsePtrOutputWithContext(ctx context.Context) DataLakeServiceStorageAuthenticationResponsePtrOutput {
	return o
}

func (o DataLakeServiceStorageAuthenticationResponsePtrOutput) Elem() DataLakeServiceStorageAuthenticationResponseOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageAuthenticationResponse) DataLakeServiceStorageAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret DataLakeServiceStorageAuthenticationResponse
		return ret
	}).(DataLakeServiceStorageAuthenticationResponseOutput)
}

// Access token secret name.
func (o DataLakeServiceStorageAuthenticationResponsePtrOutput) AccessTokenSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessTokenSecretName
	}).(pulumi.StringPtrOutput)
}

// Configuration for managed identity authentication.
func (o DataLakeServiceStorageAuthenticationResponsePtrOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageAuthenticationResponse) *ManagedIdentityAuthenticationResponse {
		if v == nil {
			return nil
		}
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationResponsePtrOutput)
}

// DataLake Service Storage details.
type DataLakeServiceStorageResponse struct {
	// DataLake service storage authentication details. NOTE - Enum only one method is supported.
	Authentication DataLakeServiceStorageAuthenticationResponse `pulumi:"authentication"`
	// DataLake service storage endpoint to use.
	Endpoint string `pulumi:"endpoint"`
}

// DataLake Service Storage details.
type DataLakeServiceStorageResponseOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStorageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeServiceStorageResponse)(nil)).Elem()
}

func (o DataLakeServiceStorageResponseOutput) ToDataLakeServiceStorageResponseOutput() DataLakeServiceStorageResponseOutput {
	return o
}

func (o DataLakeServiceStorageResponseOutput) ToDataLakeServiceStorageResponseOutputWithContext(ctx context.Context) DataLakeServiceStorageResponseOutput {
	return o
}

// DataLake service storage authentication details. NOTE - Enum only one method is supported.
func (o DataLakeServiceStorageResponseOutput) Authentication() DataLakeServiceStorageAuthenticationResponseOutput {
	return o.ApplyT(func(v DataLakeServiceStorageResponse) DataLakeServiceStorageAuthenticationResponse {
		return v.Authentication
	}).(DataLakeServiceStorageAuthenticationResponseOutput)
}

// DataLake service storage endpoint to use.
func (o DataLakeServiceStorageResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeServiceStorageResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataLakeServiceStorageResponsePtrOutput struct{ *pulumi.OutputState }

func (DataLakeServiceStorageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeServiceStorageResponse)(nil)).Elem()
}

func (o DataLakeServiceStorageResponsePtrOutput) ToDataLakeServiceStorageResponsePtrOutput() DataLakeServiceStorageResponsePtrOutput {
	return o
}

func (o DataLakeServiceStorageResponsePtrOutput) ToDataLakeServiceStorageResponsePtrOutputWithContext(ctx context.Context) DataLakeServiceStorageResponsePtrOutput {
	return o
}

func (o DataLakeServiceStorageResponsePtrOutput) Elem() DataLakeServiceStorageResponseOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageResponse) DataLakeServiceStorageResponse {
		if v != nil {
			return *v
		}
		var ret DataLakeServiceStorageResponse
		return ret
	}).(DataLakeServiceStorageResponseOutput)
}

// DataLake service storage authentication details. NOTE - Enum only one method is supported.
func (o DataLakeServiceStorageResponsePtrOutput) Authentication() DataLakeServiceStorageAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageResponse) *DataLakeServiceStorageAuthenticationResponse {
		if v == nil {
			return nil
		}
		return &v.Authentication
	}).(DataLakeServiceStorageAuthenticationResponsePtrOutput)
}

// DataLake service storage endpoint to use.
func (o DataLakeServiceStorageResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeServiceStorageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Target storage for the DataLake. NOTE - Enum only storage is supported at a time.
type DataLakeTargetStorage struct {
	// DataLake service storage details.
	DatalakeStorage *DataLakeServiceStorage `pulumi:"datalakeStorage"`
	// Fabric one lake storage details.
	FabricOneLake *DataLakeFabricStorage `pulumi:"fabricOneLake"`
	// Local storage details.
	LocalStorage *DataLakeLocalStorage `pulumi:"localStorage"`
}

// DataLakeTargetStorageInput is an input type that accepts DataLakeTargetStorageArgs and DataLakeTargetStorageOutput values.
// You can construct a concrete instance of `DataLakeTargetStorageInput` via:
//
//	DataLakeTargetStorageArgs{...}
type DataLakeTargetStorageInput interface {
	pulumi.Input

	ToDataLakeTargetStorageOutput() DataLakeTargetStorageOutput
	ToDataLakeTargetStorageOutputWithContext(context.Context) DataLakeTargetStorageOutput
}

// Target storage for the DataLake. NOTE - Enum only storage is supported at a time.
type DataLakeTargetStorageArgs struct {
	// DataLake service storage details.
	DatalakeStorage DataLakeServiceStoragePtrInput `pulumi:"datalakeStorage"`
	// Fabric one lake storage details.
	FabricOneLake DataLakeFabricStoragePtrInput `pulumi:"fabricOneLake"`
	// Local storage details.
	LocalStorage DataLakeLocalStoragePtrInput `pulumi:"localStorage"`
}

func (DataLakeTargetStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeTargetStorage)(nil)).Elem()
}

func (i DataLakeTargetStorageArgs) ToDataLakeTargetStorageOutput() DataLakeTargetStorageOutput {
	return i.ToDataLakeTargetStorageOutputWithContext(context.Background())
}

func (i DataLakeTargetStorageArgs) ToDataLakeTargetStorageOutputWithContext(ctx context.Context) DataLakeTargetStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeTargetStorageOutput)
}

// Target storage for the DataLake. NOTE - Enum only storage is supported at a time.
type DataLakeTargetStorageOutput struct{ *pulumi.OutputState }

func (DataLakeTargetStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeTargetStorage)(nil)).Elem()
}

func (o DataLakeTargetStorageOutput) ToDataLakeTargetStorageOutput() DataLakeTargetStorageOutput {
	return o
}

func (o DataLakeTargetStorageOutput) ToDataLakeTargetStorageOutputWithContext(ctx context.Context) DataLakeTargetStorageOutput {
	return o
}

// DataLake service storage details.
func (o DataLakeTargetStorageOutput) DatalakeStorage() DataLakeServiceStoragePtrOutput {
	return o.ApplyT(func(v DataLakeTargetStorage) *DataLakeServiceStorage { return v.DatalakeStorage }).(DataLakeServiceStoragePtrOutput)
}

// Fabric one lake storage details.
func (o DataLakeTargetStorageOutput) FabricOneLake() DataLakeFabricStoragePtrOutput {
	return o.ApplyT(func(v DataLakeTargetStorage) *DataLakeFabricStorage { return v.FabricOneLake }).(DataLakeFabricStoragePtrOutput)
}

// Local storage details.
func (o DataLakeTargetStorageOutput) LocalStorage() DataLakeLocalStoragePtrOutput {
	return o.ApplyT(func(v DataLakeTargetStorage) *DataLakeLocalStorage { return v.LocalStorage }).(DataLakeLocalStoragePtrOutput)
}

// Target storage for the DataLake. NOTE - Enum only storage is supported at a time.
type DataLakeTargetStorageResponse struct {
	// DataLake service storage details.
	DatalakeStorage *DataLakeServiceStorageResponse `pulumi:"datalakeStorage"`
	// Fabric one lake storage details.
	FabricOneLake *DataLakeFabricStorageResponse `pulumi:"fabricOneLake"`
	// Local storage details.
	LocalStorage *DataLakeLocalStorageResponse `pulumi:"localStorage"`
}

// Target storage for the DataLake. NOTE - Enum only storage is supported at a time.
type DataLakeTargetStorageResponseOutput struct{ *pulumi.OutputState }

func (DataLakeTargetStorageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeTargetStorageResponse)(nil)).Elem()
}

func (o DataLakeTargetStorageResponseOutput) ToDataLakeTargetStorageResponseOutput() DataLakeTargetStorageResponseOutput {
	return o
}

func (o DataLakeTargetStorageResponseOutput) ToDataLakeTargetStorageResponseOutputWithContext(ctx context.Context) DataLakeTargetStorageResponseOutput {
	return o
}

// DataLake service storage details.
func (o DataLakeTargetStorageResponseOutput) DatalakeStorage() DataLakeServiceStorageResponsePtrOutput {
	return o.ApplyT(func(v DataLakeTargetStorageResponse) *DataLakeServiceStorageResponse { return v.DatalakeStorage }).(DataLakeServiceStorageResponsePtrOutput)
}

// Fabric one lake storage details.
func (o DataLakeTargetStorageResponseOutput) FabricOneLake() DataLakeFabricStorageResponsePtrOutput {
	return o.ApplyT(func(v DataLakeTargetStorageResponse) *DataLakeFabricStorageResponse { return v.FabricOneLake }).(DataLakeFabricStorageResponsePtrOutput)
}

// Local storage details.
func (o DataLakeTargetStorageResponseOutput) LocalStorage() DataLakeLocalStorageResponsePtrOutput {
	return o.ApplyT(func(v DataLakeTargetStorageResponse) *DataLakeLocalStorageResponse { return v.LocalStorage }).(DataLakeLocalStorageResponsePtrOutput)
}

// Delta table properties
type DeltaTable struct {
	// Schema list supported.
	Schema []DeltaTableSchema `pulumi:"schema"`
	// Delta table name.
	TableName string `pulumi:"tableName"`
	// Delta table path.
	TablePath *string `pulumi:"tablePath"`
}

// DeltaTableInput is an input type that accepts DeltaTableArgs and DeltaTableOutput values.
// You can construct a concrete instance of `DeltaTableInput` via:
//
//	DeltaTableArgs{...}
type DeltaTableInput interface {
	pulumi.Input

	ToDeltaTableOutput() DeltaTableOutput
	ToDeltaTableOutputWithContext(context.Context) DeltaTableOutput
}

// Delta table properties
type DeltaTableArgs struct {
	// Schema list supported.
	Schema DeltaTableSchemaArrayInput `pulumi:"schema"`
	// Delta table name.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// Delta table path.
	TablePath pulumi.StringPtrInput `pulumi:"tablePath"`
}

func (DeltaTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTable)(nil)).Elem()
}

func (i DeltaTableArgs) ToDeltaTableOutput() DeltaTableOutput {
	return i.ToDeltaTableOutputWithContext(context.Background())
}

func (i DeltaTableArgs) ToDeltaTableOutputWithContext(ctx context.Context) DeltaTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeltaTableOutput)
}

// Delta table properties
type DeltaTableOutput struct{ *pulumi.OutputState }

func (DeltaTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTable)(nil)).Elem()
}

func (o DeltaTableOutput) ToDeltaTableOutput() DeltaTableOutput {
	return o
}

func (o DeltaTableOutput) ToDeltaTableOutputWithContext(ctx context.Context) DeltaTableOutput {
	return o
}

// Schema list supported.
func (o DeltaTableOutput) Schema() DeltaTableSchemaArrayOutput {
	return o.ApplyT(func(v DeltaTable) []DeltaTableSchema { return v.Schema }).(DeltaTableSchemaArrayOutput)
}

// Delta table name.
func (o DeltaTableOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTable) string { return v.TableName }).(pulumi.StringOutput)
}

// Delta table path.
func (o DeltaTableOutput) TablePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeltaTable) *string { return v.TablePath }).(pulumi.StringPtrOutput)
}

// Delta table properties
type DeltaTableResponse struct {
	// Schema list supported.
	Schema []DeltaTableSchemaResponse `pulumi:"schema"`
	// Delta table name.
	TableName string `pulumi:"tableName"`
	// Delta table path.
	TablePath *string `pulumi:"tablePath"`
}

// Delta table properties
type DeltaTableResponseOutput struct{ *pulumi.OutputState }

func (DeltaTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTableResponse)(nil)).Elem()
}

func (o DeltaTableResponseOutput) ToDeltaTableResponseOutput() DeltaTableResponseOutput {
	return o
}

func (o DeltaTableResponseOutput) ToDeltaTableResponseOutputWithContext(ctx context.Context) DeltaTableResponseOutput {
	return o
}

// Schema list supported.
func (o DeltaTableResponseOutput) Schema() DeltaTableSchemaResponseArrayOutput {
	return o.ApplyT(func(v DeltaTableResponse) []DeltaTableSchemaResponse { return v.Schema }).(DeltaTableSchemaResponseArrayOutput)
}

// Delta table name.
func (o DeltaTableResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTableResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Delta table path.
func (o DeltaTableResponseOutput) TablePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeltaTableResponse) *string { return v.TablePath }).(pulumi.StringPtrOutput)
}

// Delta table schema properties
type DeltaTableSchema struct {
	// Delta table format supported.
	Format string `pulumi:"format"`
	// Delta table schema mapping.
	Mapping string `pulumi:"mapping"`
	// Delta table schema name.
	Name string `pulumi:"name"`
	// Delta table schema optional.
	Optional bool `pulumi:"optional"`
}

// DeltaTableSchemaInput is an input type that accepts DeltaTableSchemaArgs and DeltaTableSchemaOutput values.
// You can construct a concrete instance of `DeltaTableSchemaInput` via:
//
//	DeltaTableSchemaArgs{...}
type DeltaTableSchemaInput interface {
	pulumi.Input

	ToDeltaTableSchemaOutput() DeltaTableSchemaOutput
	ToDeltaTableSchemaOutputWithContext(context.Context) DeltaTableSchemaOutput
}

// Delta table schema properties
type DeltaTableSchemaArgs struct {
	// Delta table format supported.
	Format pulumi.StringInput `pulumi:"format"`
	// Delta table schema mapping.
	Mapping pulumi.StringInput `pulumi:"mapping"`
	// Delta table schema name.
	Name pulumi.StringInput `pulumi:"name"`
	// Delta table schema optional.
	Optional pulumi.BoolInput `pulumi:"optional"`
}

func (DeltaTableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTableSchema)(nil)).Elem()
}

func (i DeltaTableSchemaArgs) ToDeltaTableSchemaOutput() DeltaTableSchemaOutput {
	return i.ToDeltaTableSchemaOutputWithContext(context.Background())
}

func (i DeltaTableSchemaArgs) ToDeltaTableSchemaOutputWithContext(ctx context.Context) DeltaTableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeltaTableSchemaOutput)
}

// DeltaTableSchemaArrayInput is an input type that accepts DeltaTableSchemaArray and DeltaTableSchemaArrayOutput values.
// You can construct a concrete instance of `DeltaTableSchemaArrayInput` via:
//
//	DeltaTableSchemaArray{ DeltaTableSchemaArgs{...} }
type DeltaTableSchemaArrayInput interface {
	pulumi.Input

	ToDeltaTableSchemaArrayOutput() DeltaTableSchemaArrayOutput
	ToDeltaTableSchemaArrayOutputWithContext(context.Context) DeltaTableSchemaArrayOutput
}

type DeltaTableSchemaArray []DeltaTableSchemaInput

func (DeltaTableSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeltaTableSchema)(nil)).Elem()
}

func (i DeltaTableSchemaArray) ToDeltaTableSchemaArrayOutput() DeltaTableSchemaArrayOutput {
	return i.ToDeltaTableSchemaArrayOutputWithContext(context.Background())
}

func (i DeltaTableSchemaArray) ToDeltaTableSchemaArrayOutputWithContext(ctx context.Context) DeltaTableSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeltaTableSchemaArrayOutput)
}

// Delta table schema properties
type DeltaTableSchemaOutput struct{ *pulumi.OutputState }

func (DeltaTableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTableSchema)(nil)).Elem()
}

func (o DeltaTableSchemaOutput) ToDeltaTableSchemaOutput() DeltaTableSchemaOutput {
	return o
}

func (o DeltaTableSchemaOutput) ToDeltaTableSchemaOutputWithContext(ctx context.Context) DeltaTableSchemaOutput {
	return o
}

// Delta table format supported.
func (o DeltaTableSchemaOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTableSchema) string { return v.Format }).(pulumi.StringOutput)
}

// Delta table schema mapping.
func (o DeltaTableSchemaOutput) Mapping() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTableSchema) string { return v.Mapping }).(pulumi.StringOutput)
}

// Delta table schema name.
func (o DeltaTableSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTableSchema) string { return v.Name }).(pulumi.StringOutput)
}

// Delta table schema optional.
func (o DeltaTableSchemaOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v DeltaTableSchema) bool { return v.Optional }).(pulumi.BoolOutput)
}

type DeltaTableSchemaArrayOutput struct{ *pulumi.OutputState }

func (DeltaTableSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeltaTableSchema)(nil)).Elem()
}

func (o DeltaTableSchemaArrayOutput) ToDeltaTableSchemaArrayOutput() DeltaTableSchemaArrayOutput {
	return o
}

func (o DeltaTableSchemaArrayOutput) ToDeltaTableSchemaArrayOutputWithContext(ctx context.Context) DeltaTableSchemaArrayOutput {
	return o
}

func (o DeltaTableSchemaArrayOutput) Index(i pulumi.IntInput) DeltaTableSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeltaTableSchema {
		return vs[0].([]DeltaTableSchema)[vs[1].(int)]
	}).(DeltaTableSchemaOutput)
}

// Delta table schema properties
type DeltaTableSchemaResponse struct {
	// Delta table format supported.
	Format string `pulumi:"format"`
	// Delta table schema mapping.
	Mapping string `pulumi:"mapping"`
	// Delta table schema name.
	Name string `pulumi:"name"`
	// Delta table schema optional.
	Optional bool `pulumi:"optional"`
}

// Delta table schema properties
type DeltaTableSchemaResponseOutput struct{ *pulumi.OutputState }

func (DeltaTableSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeltaTableSchemaResponse)(nil)).Elem()
}

func (o DeltaTableSchemaResponseOutput) ToDeltaTableSchemaResponseOutput() DeltaTableSchemaResponseOutput {
	return o
}

func (o DeltaTableSchemaResponseOutput) ToDeltaTableSchemaResponseOutputWithContext(ctx context.Context) DeltaTableSchemaResponseOutput {
	return o
}

// Delta table format supported.
func (o DeltaTableSchemaResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTableSchemaResponse) string { return v.Format }).(pulumi.StringOutput)
}

// Delta table schema mapping.
func (o DeltaTableSchemaResponseOutput) Mapping() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTableSchemaResponse) string { return v.Mapping }).(pulumi.StringOutput)
}

// Delta table schema name.
func (o DeltaTableSchemaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeltaTableSchemaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Delta table schema optional.
func (o DeltaTableSchemaResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v DeltaTableSchemaResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

type DeltaTableSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (DeltaTableSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeltaTableSchemaResponse)(nil)).Elem()
}

func (o DeltaTableSchemaResponseArrayOutput) ToDeltaTableSchemaResponseArrayOutput() DeltaTableSchemaResponseArrayOutput {
	return o
}

func (o DeltaTableSchemaResponseArrayOutput) ToDeltaTableSchemaResponseArrayOutputWithContext(ctx context.Context) DeltaTableSchemaResponseArrayOutput {
	return o
}

func (o DeltaTableSchemaResponseArrayOutput) Index(i pulumi.IntInput) DeltaTableSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeltaTableSchemaResponse {
		return vs[0].([]DeltaTableSchemaResponse)[vs[1].(int)]
	}).(DeltaTableSchemaResponseOutput)
}

// DiskBackedMessageBufferSettings properties
type DiskBackedMessageBufferSettings struct {
	// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
	EphemeralVolumeClaimSpec *VolumeClaimSpec `pulumi:"ephemeralVolumeClaimSpec"`
	// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
	MaxSize string `pulumi:"maxSize"`
	// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
	PersistentVolumeClaimSpec *VolumeClaimSpec `pulumi:"persistentVolumeClaimSpec"`
}

// DiskBackedMessageBufferSettingsInput is an input type that accepts DiskBackedMessageBufferSettingsArgs and DiskBackedMessageBufferSettingsOutput values.
// You can construct a concrete instance of `DiskBackedMessageBufferSettingsInput` via:
//
//	DiskBackedMessageBufferSettingsArgs{...}
type DiskBackedMessageBufferSettingsInput interface {
	pulumi.Input

	ToDiskBackedMessageBufferSettingsOutput() DiskBackedMessageBufferSettingsOutput
	ToDiskBackedMessageBufferSettingsOutputWithContext(context.Context) DiskBackedMessageBufferSettingsOutput
}

// DiskBackedMessageBufferSettings properties
type DiskBackedMessageBufferSettingsArgs struct {
	// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
	EphemeralVolumeClaimSpec VolumeClaimSpecPtrInput `pulumi:"ephemeralVolumeClaimSpec"`
	// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
	MaxSize pulumi.StringInput `pulumi:"maxSize"`
	// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
	PersistentVolumeClaimSpec VolumeClaimSpecPtrInput `pulumi:"persistentVolumeClaimSpec"`
}

func (DiskBackedMessageBufferSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskBackedMessageBufferSettings)(nil)).Elem()
}

func (i DiskBackedMessageBufferSettingsArgs) ToDiskBackedMessageBufferSettingsOutput() DiskBackedMessageBufferSettingsOutput {
	return i.ToDiskBackedMessageBufferSettingsOutputWithContext(context.Background())
}

func (i DiskBackedMessageBufferSettingsArgs) ToDiskBackedMessageBufferSettingsOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskBackedMessageBufferSettingsOutput)
}

func (i DiskBackedMessageBufferSettingsArgs) ToDiskBackedMessageBufferSettingsPtrOutput() DiskBackedMessageBufferSettingsPtrOutput {
	return i.ToDiskBackedMessageBufferSettingsPtrOutputWithContext(context.Background())
}

func (i DiskBackedMessageBufferSettingsArgs) ToDiskBackedMessageBufferSettingsPtrOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskBackedMessageBufferSettingsOutput).ToDiskBackedMessageBufferSettingsPtrOutputWithContext(ctx)
}

// DiskBackedMessageBufferSettingsPtrInput is an input type that accepts DiskBackedMessageBufferSettingsArgs, DiskBackedMessageBufferSettingsPtr and DiskBackedMessageBufferSettingsPtrOutput values.
// You can construct a concrete instance of `DiskBackedMessageBufferSettingsPtrInput` via:
//
//	        DiskBackedMessageBufferSettingsArgs{...}
//
//	or:
//
//	        nil
type DiskBackedMessageBufferSettingsPtrInput interface {
	pulumi.Input

	ToDiskBackedMessageBufferSettingsPtrOutput() DiskBackedMessageBufferSettingsPtrOutput
	ToDiskBackedMessageBufferSettingsPtrOutputWithContext(context.Context) DiskBackedMessageBufferSettingsPtrOutput
}

type diskBackedMessageBufferSettingsPtrType DiskBackedMessageBufferSettingsArgs

func DiskBackedMessageBufferSettingsPtr(v *DiskBackedMessageBufferSettingsArgs) DiskBackedMessageBufferSettingsPtrInput {
	return (*diskBackedMessageBufferSettingsPtrType)(v)
}

func (*diskBackedMessageBufferSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskBackedMessageBufferSettings)(nil)).Elem()
}

func (i *diskBackedMessageBufferSettingsPtrType) ToDiskBackedMessageBufferSettingsPtrOutput() DiskBackedMessageBufferSettingsPtrOutput {
	return i.ToDiskBackedMessageBufferSettingsPtrOutputWithContext(context.Background())
}

func (i *diskBackedMessageBufferSettingsPtrType) ToDiskBackedMessageBufferSettingsPtrOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskBackedMessageBufferSettingsPtrOutput)
}

// DiskBackedMessageBufferSettings properties
type DiskBackedMessageBufferSettingsOutput struct{ *pulumi.OutputState }

func (DiskBackedMessageBufferSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskBackedMessageBufferSettings)(nil)).Elem()
}

func (o DiskBackedMessageBufferSettingsOutput) ToDiskBackedMessageBufferSettingsOutput() DiskBackedMessageBufferSettingsOutput {
	return o
}

func (o DiskBackedMessageBufferSettingsOutput) ToDiskBackedMessageBufferSettingsOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsOutput {
	return o
}

func (o DiskBackedMessageBufferSettingsOutput) ToDiskBackedMessageBufferSettingsPtrOutput() DiskBackedMessageBufferSettingsPtrOutput {
	return o.ToDiskBackedMessageBufferSettingsPtrOutputWithContext(context.Background())
}

func (o DiskBackedMessageBufferSettingsOutput) ToDiskBackedMessageBufferSettingsPtrOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskBackedMessageBufferSettings) *DiskBackedMessageBufferSettings {
		return &v
	}).(DiskBackedMessageBufferSettingsPtrOutput)
}

// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
func (o DiskBackedMessageBufferSettingsOutput) EphemeralVolumeClaimSpec() VolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v DiskBackedMessageBufferSettings) *VolumeClaimSpec { return v.EphemeralVolumeClaimSpec }).(VolumeClaimSpecPtrOutput)
}

// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
func (o DiskBackedMessageBufferSettingsOutput) MaxSize() pulumi.StringOutput {
	return o.ApplyT(func(v DiskBackedMessageBufferSettings) string { return v.MaxSize }).(pulumi.StringOutput)
}

// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
func (o DiskBackedMessageBufferSettingsOutput) PersistentVolumeClaimSpec() VolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v DiskBackedMessageBufferSettings) *VolumeClaimSpec { return v.PersistentVolumeClaimSpec }).(VolumeClaimSpecPtrOutput)
}

type DiskBackedMessageBufferSettingsPtrOutput struct{ *pulumi.OutputState }

func (DiskBackedMessageBufferSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskBackedMessageBufferSettings)(nil)).Elem()
}

func (o DiskBackedMessageBufferSettingsPtrOutput) ToDiskBackedMessageBufferSettingsPtrOutput() DiskBackedMessageBufferSettingsPtrOutput {
	return o
}

func (o DiskBackedMessageBufferSettingsPtrOutput) ToDiskBackedMessageBufferSettingsPtrOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsPtrOutput {
	return o
}

func (o DiskBackedMessageBufferSettingsPtrOutput) Elem() DiskBackedMessageBufferSettingsOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettings) DiskBackedMessageBufferSettings {
		if v != nil {
			return *v
		}
		var ret DiskBackedMessageBufferSettings
		return ret
	}).(DiskBackedMessageBufferSettingsOutput)
}

// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
func (o DiskBackedMessageBufferSettingsPtrOutput) EphemeralVolumeClaimSpec() VolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettings) *VolumeClaimSpec {
		if v == nil {
			return nil
		}
		return v.EphemeralVolumeClaimSpec
	}).(VolumeClaimSpecPtrOutput)
}

// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
func (o DiskBackedMessageBufferSettingsPtrOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettings) *string {
		if v == nil {
			return nil
		}
		return &v.MaxSize
	}).(pulumi.StringPtrOutput)
}

// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
func (o DiskBackedMessageBufferSettingsPtrOutput) PersistentVolumeClaimSpec() VolumeClaimSpecPtrOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettings) *VolumeClaimSpec {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeClaimSpec
	}).(VolumeClaimSpecPtrOutput)
}

// DiskBackedMessageBufferSettings properties
type DiskBackedMessageBufferSettingsResponse struct {
	// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
	EphemeralVolumeClaimSpec *VolumeClaimSpecResponse `pulumi:"ephemeralVolumeClaimSpec"`
	// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
	MaxSize string `pulumi:"maxSize"`
	// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
	PersistentVolumeClaimSpec *VolumeClaimSpecResponse `pulumi:"persistentVolumeClaimSpec"`
}

// DiskBackedMessageBufferSettings properties
type DiskBackedMessageBufferSettingsResponseOutput struct{ *pulumi.OutputState }

func (DiskBackedMessageBufferSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskBackedMessageBufferSettingsResponse)(nil)).Elem()
}

func (o DiskBackedMessageBufferSettingsResponseOutput) ToDiskBackedMessageBufferSettingsResponseOutput() DiskBackedMessageBufferSettingsResponseOutput {
	return o
}

func (o DiskBackedMessageBufferSettingsResponseOutput) ToDiskBackedMessageBufferSettingsResponseOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsResponseOutput {
	return o
}

// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
func (o DiskBackedMessageBufferSettingsResponseOutput) EphemeralVolumeClaimSpec() VolumeClaimSpecResponsePtrOutput {
	return o.ApplyT(func(v DiskBackedMessageBufferSettingsResponse) *VolumeClaimSpecResponse {
		return v.EphemeralVolumeClaimSpec
	}).(VolumeClaimSpecResponsePtrOutput)
}

// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
func (o DiskBackedMessageBufferSettingsResponseOutput) MaxSize() pulumi.StringOutput {
	return o.ApplyT(func(v DiskBackedMessageBufferSettingsResponse) string { return v.MaxSize }).(pulumi.StringOutput)
}

// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
func (o DiskBackedMessageBufferSettingsResponseOutput) PersistentVolumeClaimSpec() VolumeClaimSpecResponsePtrOutput {
	return o.ApplyT(func(v DiskBackedMessageBufferSettingsResponse) *VolumeClaimSpecResponse {
		return v.PersistentVolumeClaimSpec
	}).(VolumeClaimSpecResponsePtrOutput)
}

type DiskBackedMessageBufferSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskBackedMessageBufferSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskBackedMessageBufferSettingsResponse)(nil)).Elem()
}

func (o DiskBackedMessageBufferSettingsResponsePtrOutput) ToDiskBackedMessageBufferSettingsResponsePtrOutput() DiskBackedMessageBufferSettingsResponsePtrOutput {
	return o
}

func (o DiskBackedMessageBufferSettingsResponsePtrOutput) ToDiskBackedMessageBufferSettingsResponsePtrOutputWithContext(ctx context.Context) DiskBackedMessageBufferSettingsResponsePtrOutput {
	return o
}

func (o DiskBackedMessageBufferSettingsResponsePtrOutput) Elem() DiskBackedMessageBufferSettingsResponseOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettingsResponse) DiskBackedMessageBufferSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DiskBackedMessageBufferSettingsResponse
		return ret
	}).(DiskBackedMessageBufferSettingsResponseOutput)
}

// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
func (o DiskBackedMessageBufferSettingsResponsePtrOutput) EphemeralVolumeClaimSpec() VolumeClaimSpecResponsePtrOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettingsResponse) *VolumeClaimSpecResponse {
		if v == nil {
			return nil
		}
		return v.EphemeralVolumeClaimSpec
	}).(VolumeClaimSpecResponsePtrOutput)
}

// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
func (o DiskBackedMessageBufferSettingsResponsePtrOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MaxSize
	}).(pulumi.StringPtrOutput)
}

// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
func (o DiskBackedMessageBufferSettingsResponsePtrOutput) PersistentVolumeClaimSpec() VolumeClaimSpecResponsePtrOutput {
	return o.ApplyT(func(v *DiskBackedMessageBufferSettingsResponse) *VolumeClaimSpecResponse {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeClaimSpec
	}).(VolumeClaimSpecResponsePtrOutput)
}

// ExtendedLocation properties
type ExtendedLocationProperty struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// Type of ExtendedLocation.
	Type string `pulumi:"type"`
}

// ExtendedLocationPropertyInput is an input type that accepts ExtendedLocationPropertyArgs and ExtendedLocationPropertyOutput values.
// You can construct a concrete instance of `ExtendedLocationPropertyInput` via:
//
//	ExtendedLocationPropertyArgs{...}
type ExtendedLocationPropertyInput interface {
	pulumi.Input

	ToExtendedLocationPropertyOutput() ExtendedLocationPropertyOutput
	ToExtendedLocationPropertyOutputWithContext(context.Context) ExtendedLocationPropertyOutput
}

// ExtendedLocation properties
type ExtendedLocationPropertyArgs struct {
	// The name of the extended location.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of ExtendedLocation.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationProperty)(nil)).Elem()
}

func (i ExtendedLocationPropertyArgs) ToExtendedLocationPropertyOutput() ExtendedLocationPropertyOutput {
	return i.ToExtendedLocationPropertyOutputWithContext(context.Background())
}

func (i ExtendedLocationPropertyArgs) ToExtendedLocationPropertyOutputWithContext(ctx context.Context) ExtendedLocationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPropertyOutput)
}

// ExtendedLocation properties
type ExtendedLocationPropertyOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationProperty)(nil)).Elem()
}

func (o ExtendedLocationPropertyOutput) ToExtendedLocationPropertyOutput() ExtendedLocationPropertyOutput {
	return o
}

func (o ExtendedLocationPropertyOutput) ToExtendedLocationPropertyOutputWithContext(ctx context.Context) ExtendedLocationPropertyOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationProperty) string { return v.Name }).(pulumi.StringOutput)
}

// Type of ExtendedLocation.
func (o ExtendedLocationPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationProperty) string { return v.Type }).(pulumi.StringOutput)
}

// ExtendedLocation properties
type ExtendedLocationPropertyResponse struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// Type of ExtendedLocation.
	Type string `pulumi:"type"`
}

// ExtendedLocation properties
type ExtendedLocationPropertyResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationPropertyResponse)(nil)).Elem()
}

func (o ExtendedLocationPropertyResponseOutput) ToExtendedLocationPropertyResponseOutput() ExtendedLocationPropertyResponseOutput {
	return o
}

func (o ExtendedLocationPropertyResponseOutput) ToExtendedLocationPropertyResponseOutputWithContext(ctx context.Context) ExtendedLocationPropertyResponseOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationPropertyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationPropertyResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of ExtendedLocation.
func (o ExtendedLocationPropertyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationPropertyResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Fabric one lake guids.
type FabricGuids struct {
	// Fabric one lake house guid.
	LakehouseGuid string `pulumi:"lakehouseGuid"`
	// Fabric one lake workspace guid.
	WorkspaceGuid string `pulumi:"workspaceGuid"`
}

// FabricGuidsInput is an input type that accepts FabricGuidsArgs and FabricGuidsOutput values.
// You can construct a concrete instance of `FabricGuidsInput` via:
//
//	FabricGuidsArgs{...}
type FabricGuidsInput interface {
	pulumi.Input

	ToFabricGuidsOutput() FabricGuidsOutput
	ToFabricGuidsOutputWithContext(context.Context) FabricGuidsOutput
}

// Fabric one lake guids.
type FabricGuidsArgs struct {
	// Fabric one lake house guid.
	LakehouseGuid pulumi.StringInput `pulumi:"lakehouseGuid"`
	// Fabric one lake workspace guid.
	WorkspaceGuid pulumi.StringInput `pulumi:"workspaceGuid"`
}

func (FabricGuidsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricGuids)(nil)).Elem()
}

func (i FabricGuidsArgs) ToFabricGuidsOutput() FabricGuidsOutput {
	return i.ToFabricGuidsOutputWithContext(context.Background())
}

func (i FabricGuidsArgs) ToFabricGuidsOutputWithContext(ctx context.Context) FabricGuidsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricGuidsOutput)
}

func (i FabricGuidsArgs) ToFabricGuidsPtrOutput() FabricGuidsPtrOutput {
	return i.ToFabricGuidsPtrOutputWithContext(context.Background())
}

func (i FabricGuidsArgs) ToFabricGuidsPtrOutputWithContext(ctx context.Context) FabricGuidsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricGuidsOutput).ToFabricGuidsPtrOutputWithContext(ctx)
}

// FabricGuidsPtrInput is an input type that accepts FabricGuidsArgs, FabricGuidsPtr and FabricGuidsPtrOutput values.
// You can construct a concrete instance of `FabricGuidsPtrInput` via:
//
//	        FabricGuidsArgs{...}
//
//	or:
//
//	        nil
type FabricGuidsPtrInput interface {
	pulumi.Input

	ToFabricGuidsPtrOutput() FabricGuidsPtrOutput
	ToFabricGuidsPtrOutputWithContext(context.Context) FabricGuidsPtrOutput
}

type fabricGuidsPtrType FabricGuidsArgs

func FabricGuidsPtr(v *FabricGuidsArgs) FabricGuidsPtrInput {
	return (*fabricGuidsPtrType)(v)
}

func (*fabricGuidsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricGuids)(nil)).Elem()
}

func (i *fabricGuidsPtrType) ToFabricGuidsPtrOutput() FabricGuidsPtrOutput {
	return i.ToFabricGuidsPtrOutputWithContext(context.Background())
}

func (i *fabricGuidsPtrType) ToFabricGuidsPtrOutputWithContext(ctx context.Context) FabricGuidsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricGuidsPtrOutput)
}

// Fabric one lake guids.
type FabricGuidsOutput struct{ *pulumi.OutputState }

func (FabricGuidsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricGuids)(nil)).Elem()
}

func (o FabricGuidsOutput) ToFabricGuidsOutput() FabricGuidsOutput {
	return o
}

func (o FabricGuidsOutput) ToFabricGuidsOutputWithContext(ctx context.Context) FabricGuidsOutput {
	return o
}

func (o FabricGuidsOutput) ToFabricGuidsPtrOutput() FabricGuidsPtrOutput {
	return o.ToFabricGuidsPtrOutputWithContext(context.Background())
}

func (o FabricGuidsOutput) ToFabricGuidsPtrOutputWithContext(ctx context.Context) FabricGuidsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FabricGuids) *FabricGuids {
		return &v
	}).(FabricGuidsPtrOutput)
}

// Fabric one lake house guid.
func (o FabricGuidsOutput) LakehouseGuid() pulumi.StringOutput {
	return o.ApplyT(func(v FabricGuids) string { return v.LakehouseGuid }).(pulumi.StringOutput)
}

// Fabric one lake workspace guid.
func (o FabricGuidsOutput) WorkspaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v FabricGuids) string { return v.WorkspaceGuid }).(pulumi.StringOutput)
}

type FabricGuidsPtrOutput struct{ *pulumi.OutputState }

func (FabricGuidsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricGuids)(nil)).Elem()
}

func (o FabricGuidsPtrOutput) ToFabricGuidsPtrOutput() FabricGuidsPtrOutput {
	return o
}

func (o FabricGuidsPtrOutput) ToFabricGuidsPtrOutputWithContext(ctx context.Context) FabricGuidsPtrOutput {
	return o
}

func (o FabricGuidsPtrOutput) Elem() FabricGuidsOutput {
	return o.ApplyT(func(v *FabricGuids) FabricGuids {
		if v != nil {
			return *v
		}
		var ret FabricGuids
		return ret
	}).(FabricGuidsOutput)
}

// Fabric one lake house guid.
func (o FabricGuidsPtrOutput) LakehouseGuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricGuids) *string {
		if v == nil {
			return nil
		}
		return &v.LakehouseGuid
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake workspace guid.
func (o FabricGuidsPtrOutput) WorkspaceGuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricGuids) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceGuid
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake guids.
type FabricGuidsResponse struct {
	// Fabric one lake house guid.
	LakehouseGuid string `pulumi:"lakehouseGuid"`
	// Fabric one lake workspace guid.
	WorkspaceGuid string `pulumi:"workspaceGuid"`
}

// Fabric one lake guids.
type FabricGuidsResponseOutput struct{ *pulumi.OutputState }

func (FabricGuidsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricGuidsResponse)(nil)).Elem()
}

func (o FabricGuidsResponseOutput) ToFabricGuidsResponseOutput() FabricGuidsResponseOutput {
	return o
}

func (o FabricGuidsResponseOutput) ToFabricGuidsResponseOutputWithContext(ctx context.Context) FabricGuidsResponseOutput {
	return o
}

// Fabric one lake house guid.
func (o FabricGuidsResponseOutput) LakehouseGuid() pulumi.StringOutput {
	return o.ApplyT(func(v FabricGuidsResponse) string { return v.LakehouseGuid }).(pulumi.StringOutput)
}

// Fabric one lake workspace guid.
func (o FabricGuidsResponseOutput) WorkspaceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v FabricGuidsResponse) string { return v.WorkspaceGuid }).(pulumi.StringOutput)
}

type FabricGuidsResponsePtrOutput struct{ *pulumi.OutputState }

func (FabricGuidsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricGuidsResponse)(nil)).Elem()
}

func (o FabricGuidsResponsePtrOutput) ToFabricGuidsResponsePtrOutput() FabricGuidsResponsePtrOutput {
	return o
}

func (o FabricGuidsResponsePtrOutput) ToFabricGuidsResponsePtrOutputWithContext(ctx context.Context) FabricGuidsResponsePtrOutput {
	return o
}

func (o FabricGuidsResponsePtrOutput) Elem() FabricGuidsResponseOutput {
	return o.ApplyT(func(v *FabricGuidsResponse) FabricGuidsResponse {
		if v != nil {
			return *v
		}
		var ret FabricGuidsResponse
		return ret
	}).(FabricGuidsResponseOutput)
}

// Fabric one lake house guid.
func (o FabricGuidsResponsePtrOutput) LakehouseGuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricGuidsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LakehouseGuid
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake workspace guid.
func (o FabricGuidsResponsePtrOutput) WorkspaceGuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricGuidsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceGuid
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake names.
type FabricNames struct {
	// Fabric one lake house name.
	LakehouseName string `pulumi:"lakehouseName"`
	// Fabric one lake workspace name.
	WorkspaceName string `pulumi:"workspaceName"`
}

// FabricNamesInput is an input type that accepts FabricNamesArgs and FabricNamesOutput values.
// You can construct a concrete instance of `FabricNamesInput` via:
//
//	FabricNamesArgs{...}
type FabricNamesInput interface {
	pulumi.Input

	ToFabricNamesOutput() FabricNamesOutput
	ToFabricNamesOutputWithContext(context.Context) FabricNamesOutput
}

// Fabric one lake names.
type FabricNamesArgs struct {
	// Fabric one lake house name.
	LakehouseName pulumi.StringInput `pulumi:"lakehouseName"`
	// Fabric one lake workspace name.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
}

func (FabricNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricNames)(nil)).Elem()
}

func (i FabricNamesArgs) ToFabricNamesOutput() FabricNamesOutput {
	return i.ToFabricNamesOutputWithContext(context.Background())
}

func (i FabricNamesArgs) ToFabricNamesOutputWithContext(ctx context.Context) FabricNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricNamesOutput)
}

func (i FabricNamesArgs) ToFabricNamesPtrOutput() FabricNamesPtrOutput {
	return i.ToFabricNamesPtrOutputWithContext(context.Background())
}

func (i FabricNamesArgs) ToFabricNamesPtrOutputWithContext(ctx context.Context) FabricNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricNamesOutput).ToFabricNamesPtrOutputWithContext(ctx)
}

// FabricNamesPtrInput is an input type that accepts FabricNamesArgs, FabricNamesPtr and FabricNamesPtrOutput values.
// You can construct a concrete instance of `FabricNamesPtrInput` via:
//
//	        FabricNamesArgs{...}
//
//	or:
//
//	        nil
type FabricNamesPtrInput interface {
	pulumi.Input

	ToFabricNamesPtrOutput() FabricNamesPtrOutput
	ToFabricNamesPtrOutputWithContext(context.Context) FabricNamesPtrOutput
}

type fabricNamesPtrType FabricNamesArgs

func FabricNamesPtr(v *FabricNamesArgs) FabricNamesPtrInput {
	return (*fabricNamesPtrType)(v)
}

func (*fabricNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricNames)(nil)).Elem()
}

func (i *fabricNamesPtrType) ToFabricNamesPtrOutput() FabricNamesPtrOutput {
	return i.ToFabricNamesPtrOutputWithContext(context.Background())
}

func (i *fabricNamesPtrType) ToFabricNamesPtrOutputWithContext(ctx context.Context) FabricNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricNamesPtrOutput)
}

// Fabric one lake names.
type FabricNamesOutput struct{ *pulumi.OutputState }

func (FabricNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricNames)(nil)).Elem()
}

func (o FabricNamesOutput) ToFabricNamesOutput() FabricNamesOutput {
	return o
}

func (o FabricNamesOutput) ToFabricNamesOutputWithContext(ctx context.Context) FabricNamesOutput {
	return o
}

func (o FabricNamesOutput) ToFabricNamesPtrOutput() FabricNamesPtrOutput {
	return o.ToFabricNamesPtrOutputWithContext(context.Background())
}

func (o FabricNamesOutput) ToFabricNamesPtrOutputWithContext(ctx context.Context) FabricNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FabricNames) *FabricNames {
		return &v
	}).(FabricNamesPtrOutput)
}

// Fabric one lake house name.
func (o FabricNamesOutput) LakehouseName() pulumi.StringOutput {
	return o.ApplyT(func(v FabricNames) string { return v.LakehouseName }).(pulumi.StringOutput)
}

// Fabric one lake workspace name.
func (o FabricNamesOutput) WorkspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v FabricNames) string { return v.WorkspaceName }).(pulumi.StringOutput)
}

type FabricNamesPtrOutput struct{ *pulumi.OutputState }

func (FabricNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricNames)(nil)).Elem()
}

func (o FabricNamesPtrOutput) ToFabricNamesPtrOutput() FabricNamesPtrOutput {
	return o
}

func (o FabricNamesPtrOutput) ToFabricNamesPtrOutputWithContext(ctx context.Context) FabricNamesPtrOutput {
	return o
}

func (o FabricNamesPtrOutput) Elem() FabricNamesOutput {
	return o.ApplyT(func(v *FabricNames) FabricNames {
		if v != nil {
			return *v
		}
		var ret FabricNames
		return ret
	}).(FabricNamesOutput)
}

// Fabric one lake house name.
func (o FabricNamesPtrOutput) LakehouseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricNames) *string {
		if v == nil {
			return nil
		}
		return &v.LakehouseName
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake workspace name.
func (o FabricNamesPtrOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricNames) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceName
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake names.
type FabricNamesResponse struct {
	// Fabric one lake house name.
	LakehouseName string `pulumi:"lakehouseName"`
	// Fabric one lake workspace name.
	WorkspaceName string `pulumi:"workspaceName"`
}

// Fabric one lake names.
type FabricNamesResponseOutput struct{ *pulumi.OutputState }

func (FabricNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricNamesResponse)(nil)).Elem()
}

func (o FabricNamesResponseOutput) ToFabricNamesResponseOutput() FabricNamesResponseOutput {
	return o
}

func (o FabricNamesResponseOutput) ToFabricNamesResponseOutputWithContext(ctx context.Context) FabricNamesResponseOutput {
	return o
}

// Fabric one lake house name.
func (o FabricNamesResponseOutput) LakehouseName() pulumi.StringOutput {
	return o.ApplyT(func(v FabricNamesResponse) string { return v.LakehouseName }).(pulumi.StringOutput)
}

// Fabric one lake workspace name.
func (o FabricNamesResponseOutput) WorkspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v FabricNamesResponse) string { return v.WorkspaceName }).(pulumi.StringOutput)
}

type FabricNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (FabricNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricNamesResponse)(nil)).Elem()
}

func (o FabricNamesResponsePtrOutput) ToFabricNamesResponsePtrOutput() FabricNamesResponsePtrOutput {
	return o
}

func (o FabricNamesResponsePtrOutput) ToFabricNamesResponsePtrOutputWithContext(ctx context.Context) FabricNamesResponsePtrOutput {
	return o
}

func (o FabricNamesResponsePtrOutput) Elem() FabricNamesResponseOutput {
	return o.ApplyT(func(v *FabricNamesResponse) FabricNamesResponse {
		if v != nil {
			return *v
		}
		var ret FabricNamesResponse
		return ret
	}).(FabricNamesResponseOutput)
}

// Fabric one lake house name.
func (o FabricNamesResponsePtrOutput) LakehouseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricNamesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LakehouseName
	}).(pulumi.StringPtrOutput)
}

// Fabric one lake workspace name.
func (o FabricNamesResponsePtrOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricNamesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceName
	}).(pulumi.StringPtrOutput)
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type Frontend struct {
	// Replicas is desired number of frontend replicas of the given distributed MQTT broker.
	Replicas int `pulumi:"replicas"`
	// Defines the limits for resources of the frontend instances of the MQTT broker.
	TemporaryResourceLimits *TemporaryResourceLimitsConfig `pulumi:"temporaryResourceLimits"`
	// Number of logical frontend workers per pod.
	Workers *int `pulumi:"workers"`
}

// Defaults sets the appropriate defaults for Frontend
func (val *Frontend) Defaults() *Frontend {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Workers == nil {
		workers_ := 2
		tmp.Workers = &workers_
	}
	return &tmp
}

// FrontendInput is an input type that accepts FrontendArgs and FrontendOutput values.
// You can construct a concrete instance of `FrontendInput` via:
//
//	FrontendArgs{...}
type FrontendInput interface {
	pulumi.Input

	ToFrontendOutput() FrontendOutput
	ToFrontendOutputWithContext(context.Context) FrontendOutput
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type FrontendArgs struct {
	// Replicas is desired number of frontend replicas of the given distributed MQTT broker.
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// Defines the limits for resources of the frontend instances of the MQTT broker.
	TemporaryResourceLimits TemporaryResourceLimitsConfigPtrInput `pulumi:"temporaryResourceLimits"`
	// Number of logical frontend workers per pod.
	Workers pulumi.IntPtrInput `pulumi:"workers"`
}

// Defaults sets the appropriate defaults for FrontendArgs
func (val *FrontendArgs) Defaults() *FrontendArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Workers == nil {
		tmp.Workers = pulumi.IntPtr(2)
	}
	return &tmp
}
func (FrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Frontend)(nil)).Elem()
}

func (i FrontendArgs) ToFrontendOutput() FrontendOutput {
	return i.ToFrontendOutputWithContext(context.Background())
}

func (i FrontendArgs) ToFrontendOutputWithContext(ctx context.Context) FrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendOutput)
}

func (i FrontendArgs) ToFrontendPtrOutput() FrontendPtrOutput {
	return i.ToFrontendPtrOutputWithContext(context.Background())
}

func (i FrontendArgs) ToFrontendPtrOutputWithContext(ctx context.Context) FrontendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendOutput).ToFrontendPtrOutputWithContext(ctx)
}

// FrontendPtrInput is an input type that accepts FrontendArgs, FrontendPtr and FrontendPtrOutput values.
// You can construct a concrete instance of `FrontendPtrInput` via:
//
//	        FrontendArgs{...}
//
//	or:
//
//	        nil
type FrontendPtrInput interface {
	pulumi.Input

	ToFrontendPtrOutput() FrontendPtrOutput
	ToFrontendPtrOutputWithContext(context.Context) FrontendPtrOutput
}

type frontendPtrType FrontendArgs

func FrontendPtr(v *FrontendArgs) FrontendPtrInput {
	return (*frontendPtrType)(v)
}

func (*frontendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Frontend)(nil)).Elem()
}

func (i *frontendPtrType) ToFrontendPtrOutput() FrontendPtrOutput {
	return i.ToFrontendPtrOutputWithContext(context.Background())
}

func (i *frontendPtrType) ToFrontendPtrOutputWithContext(ctx context.Context) FrontendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendPtrOutput)
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type FrontendOutput struct{ *pulumi.OutputState }

func (FrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Frontend)(nil)).Elem()
}

func (o FrontendOutput) ToFrontendOutput() FrontendOutput {
	return o
}

func (o FrontendOutput) ToFrontendOutputWithContext(ctx context.Context) FrontendOutput {
	return o
}

func (o FrontendOutput) ToFrontendPtrOutput() FrontendPtrOutput {
	return o.ToFrontendPtrOutputWithContext(context.Background())
}

func (o FrontendOutput) ToFrontendPtrOutputWithContext(ctx context.Context) FrontendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Frontend) *Frontend {
		return &v
	}).(FrontendPtrOutput)
}

// Replicas is desired number of frontend replicas of the given distributed MQTT broker.
func (o FrontendOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v Frontend) int { return v.Replicas }).(pulumi.IntOutput)
}

// Defines the limits for resources of the frontend instances of the MQTT broker.
func (o FrontendOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigPtrOutput {
	return o.ApplyT(func(v Frontend) *TemporaryResourceLimitsConfig { return v.TemporaryResourceLimits }).(TemporaryResourceLimitsConfigPtrOutput)
}

// Number of logical frontend workers per pod.
func (o FrontendOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Frontend) *int { return v.Workers }).(pulumi.IntPtrOutput)
}

type FrontendPtrOutput struct{ *pulumi.OutputState }

func (FrontendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Frontend)(nil)).Elem()
}

func (o FrontendPtrOutput) ToFrontendPtrOutput() FrontendPtrOutput {
	return o
}

func (o FrontendPtrOutput) ToFrontendPtrOutputWithContext(ctx context.Context) FrontendPtrOutput {
	return o
}

func (o FrontendPtrOutput) Elem() FrontendOutput {
	return o.ApplyT(func(v *Frontend) Frontend {
		if v != nil {
			return *v
		}
		var ret Frontend
		return ret
	}).(FrontendOutput)
}

// Replicas is desired number of frontend replicas of the given distributed MQTT broker.
func (o FrontendPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Frontend) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defines the limits for resources of the frontend instances of the MQTT broker.
func (o FrontendPtrOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigPtrOutput {
	return o.ApplyT(func(v *Frontend) *TemporaryResourceLimitsConfig {
		if v == nil {
			return nil
		}
		return v.TemporaryResourceLimits
	}).(TemporaryResourceLimitsConfigPtrOutput)
}

// Number of logical frontend workers per pod.
func (o FrontendPtrOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Frontend) *int {
		if v == nil {
			return nil
		}
		return v.Workers
	}).(pulumi.IntPtrOutput)
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type FrontendResponse struct {
	// Replicas is desired number of frontend replicas of the given distributed MQTT broker.
	Replicas int `pulumi:"replicas"`
	// Defines the limits for resources of the frontend instances of the MQTT broker.
	TemporaryResourceLimits *TemporaryResourceLimitsConfigResponse `pulumi:"temporaryResourceLimits"`
	// Number of logical frontend workers per pod.
	Workers *int `pulumi:"workers"`
}

// Defaults sets the appropriate defaults for FrontendResponse
func (val *FrontendResponse) Defaults() *FrontendResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Workers == nil {
		workers_ := 2
		tmp.Workers = &workers_
	}
	return &tmp
}

// Desired properties of the Frontend Instances of the DMQTT Broker
type FrontendResponseOutput struct{ *pulumi.OutputState }

func (FrontendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendResponse)(nil)).Elem()
}

func (o FrontendResponseOutput) ToFrontendResponseOutput() FrontendResponseOutput {
	return o
}

func (o FrontendResponseOutput) ToFrontendResponseOutputWithContext(ctx context.Context) FrontendResponseOutput {
	return o
}

// Replicas is desired number of frontend replicas of the given distributed MQTT broker.
func (o FrontendResponseOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v FrontendResponse) int { return v.Replicas }).(pulumi.IntOutput)
}

// Defines the limits for resources of the frontend instances of the MQTT broker.
func (o FrontendResponseOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigResponsePtrOutput {
	return o.ApplyT(func(v FrontendResponse) *TemporaryResourceLimitsConfigResponse { return v.TemporaryResourceLimits }).(TemporaryResourceLimitsConfigResponsePtrOutput)
}

// Number of logical frontend workers per pod.
func (o FrontendResponseOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontendResponse) *int { return v.Workers }).(pulumi.IntPtrOutput)
}

type FrontendResponsePtrOutput struct{ *pulumi.OutputState }

func (FrontendResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendResponse)(nil)).Elem()
}

func (o FrontendResponsePtrOutput) ToFrontendResponsePtrOutput() FrontendResponsePtrOutput {
	return o
}

func (o FrontendResponsePtrOutput) ToFrontendResponsePtrOutputWithContext(ctx context.Context) FrontendResponsePtrOutput {
	return o
}

func (o FrontendResponsePtrOutput) Elem() FrontendResponseOutput {
	return o.ApplyT(func(v *FrontendResponse) FrontendResponse {
		if v != nil {
			return *v
		}
		var ret FrontendResponse
		return ret
	}).(FrontendResponseOutput)
}

// Replicas is desired number of frontend replicas of the given distributed MQTT broker.
func (o FrontendResponsePtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FrontendResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Defines the limits for resources of the frontend instances of the MQTT broker.
func (o FrontendResponsePtrOutput) TemporaryResourceLimits() TemporaryResourceLimitsConfigResponsePtrOutput {
	return o.ApplyT(func(v *FrontendResponse) *TemporaryResourceLimitsConfigResponse {
		if v == nil {
			return nil
		}
		return v.TemporaryResourceLimits
	}).(TemporaryResourceLimitsConfigResponsePtrOutput)
}

// Number of logical frontend workers per pod.
func (o FrontendResponsePtrOutput) Workers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FrontendResponse) *int {
		if v == nil {
			return nil
		}
		return v.Workers
	}).(pulumi.IntPtrOutput)
}

// Kafka RemoteBrokerConnection Authentication methods
type KafkaRemoteBrokerAuthenticationProperties struct {
	// The type of authentication to use for Kafka remote broker.
	AuthType *KafkaRemoteBrokerAuthenticationTypes `pulumi:"authType"`
	// If authentication is enabled for Kafka remote broker.
	Enabled bool `pulumi:"enabled"`
}

// KafkaRemoteBrokerAuthenticationPropertiesInput is an input type that accepts KafkaRemoteBrokerAuthenticationPropertiesArgs and KafkaRemoteBrokerAuthenticationPropertiesOutput values.
// You can construct a concrete instance of `KafkaRemoteBrokerAuthenticationPropertiesInput` via:
//
//	KafkaRemoteBrokerAuthenticationPropertiesArgs{...}
type KafkaRemoteBrokerAuthenticationPropertiesInput interface {
	pulumi.Input

	ToKafkaRemoteBrokerAuthenticationPropertiesOutput() KafkaRemoteBrokerAuthenticationPropertiesOutput
	ToKafkaRemoteBrokerAuthenticationPropertiesOutputWithContext(context.Context) KafkaRemoteBrokerAuthenticationPropertiesOutput
}

// Kafka RemoteBrokerConnection Authentication methods
type KafkaRemoteBrokerAuthenticationPropertiesArgs struct {
	// The type of authentication to use for Kafka remote broker.
	AuthType KafkaRemoteBrokerAuthenticationTypesPtrInput `pulumi:"authType"`
	// If authentication is enabled for Kafka remote broker.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (KafkaRemoteBrokerAuthenticationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerAuthenticationProperties)(nil)).Elem()
}

func (i KafkaRemoteBrokerAuthenticationPropertiesArgs) ToKafkaRemoteBrokerAuthenticationPropertiesOutput() KafkaRemoteBrokerAuthenticationPropertiesOutput {
	return i.ToKafkaRemoteBrokerAuthenticationPropertiesOutputWithContext(context.Background())
}

func (i KafkaRemoteBrokerAuthenticationPropertiesArgs) ToKafkaRemoteBrokerAuthenticationPropertiesOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRemoteBrokerAuthenticationPropertiesOutput)
}

// Kafka RemoteBrokerConnection Authentication methods
type KafkaRemoteBrokerAuthenticationPropertiesOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerAuthenticationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerAuthenticationProperties)(nil)).Elem()
}

func (o KafkaRemoteBrokerAuthenticationPropertiesOutput) ToKafkaRemoteBrokerAuthenticationPropertiesOutput() KafkaRemoteBrokerAuthenticationPropertiesOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationPropertiesOutput) ToKafkaRemoteBrokerAuthenticationPropertiesOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationPropertiesOutput {
	return o
}

// The type of authentication to use for Kafka remote broker.
func (o KafkaRemoteBrokerAuthenticationPropertiesOutput) AuthType() KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationProperties) *KafkaRemoteBrokerAuthenticationTypes {
		return v.AuthType
	}).(KafkaRemoteBrokerAuthenticationTypesPtrOutput)
}

// If authentication is enabled for Kafka remote broker.
func (o KafkaRemoteBrokerAuthenticationPropertiesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationProperties) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Kafka RemoteBrokerConnection Authentication methods
type KafkaRemoteBrokerAuthenticationPropertiesResponse struct {
	// The type of authentication to use for Kafka remote broker.
	AuthType *KafkaRemoteBrokerAuthenticationTypesResponse `pulumi:"authType"`
	// If authentication is enabled for Kafka remote broker.
	Enabled bool `pulumi:"enabled"`
}

// Kafka RemoteBrokerConnection Authentication methods
type KafkaRemoteBrokerAuthenticationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerAuthenticationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerAuthenticationPropertiesResponse)(nil)).Elem()
}

func (o KafkaRemoteBrokerAuthenticationPropertiesResponseOutput) ToKafkaRemoteBrokerAuthenticationPropertiesResponseOutput() KafkaRemoteBrokerAuthenticationPropertiesResponseOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationPropertiesResponseOutput) ToKafkaRemoteBrokerAuthenticationPropertiesResponseOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationPropertiesResponseOutput {
	return o
}

// The type of authentication to use for Kafka remote broker.
func (o KafkaRemoteBrokerAuthenticationPropertiesResponseOutput) AuthType() KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationPropertiesResponse) *KafkaRemoteBrokerAuthenticationTypesResponse {
		return v.AuthType
	}).(KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput)
}

// If authentication is enabled for Kafka remote broker.
func (o KafkaRemoteBrokerAuthenticationPropertiesResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationPropertiesResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.
type KafkaRemoteBrokerAuthenticationTypes struct {
	// Sasl remote broker authentication method.
	Sasl *SaslRemoteBrokerBasicAuthentication `pulumi:"sasl"`
	// Managed identity remote broker authentication method.
	SystemAssignedManagedIdentity *ManagedIdentityAuthentication `pulumi:"systemAssignedManagedIdentity"`
	// X509 remote broker authentication method.
	X509 *KafkaX509Authentication `pulumi:"x509"`
}

// KafkaRemoteBrokerAuthenticationTypesInput is an input type that accepts KafkaRemoteBrokerAuthenticationTypesArgs and KafkaRemoteBrokerAuthenticationTypesOutput values.
// You can construct a concrete instance of `KafkaRemoteBrokerAuthenticationTypesInput` via:
//
//	KafkaRemoteBrokerAuthenticationTypesArgs{...}
type KafkaRemoteBrokerAuthenticationTypesInput interface {
	pulumi.Input

	ToKafkaRemoteBrokerAuthenticationTypesOutput() KafkaRemoteBrokerAuthenticationTypesOutput
	ToKafkaRemoteBrokerAuthenticationTypesOutputWithContext(context.Context) KafkaRemoteBrokerAuthenticationTypesOutput
}

// Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.
type KafkaRemoteBrokerAuthenticationTypesArgs struct {
	// Sasl remote broker authentication method.
	Sasl SaslRemoteBrokerBasicAuthenticationPtrInput `pulumi:"sasl"`
	// Managed identity remote broker authentication method.
	SystemAssignedManagedIdentity ManagedIdentityAuthenticationPtrInput `pulumi:"systemAssignedManagedIdentity"`
	// X509 remote broker authentication method.
	X509 KafkaX509AuthenticationPtrInput `pulumi:"x509"`
}

func (KafkaRemoteBrokerAuthenticationTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerAuthenticationTypes)(nil)).Elem()
}

func (i KafkaRemoteBrokerAuthenticationTypesArgs) ToKafkaRemoteBrokerAuthenticationTypesOutput() KafkaRemoteBrokerAuthenticationTypesOutput {
	return i.ToKafkaRemoteBrokerAuthenticationTypesOutputWithContext(context.Background())
}

func (i KafkaRemoteBrokerAuthenticationTypesArgs) ToKafkaRemoteBrokerAuthenticationTypesOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRemoteBrokerAuthenticationTypesOutput)
}

func (i KafkaRemoteBrokerAuthenticationTypesArgs) ToKafkaRemoteBrokerAuthenticationTypesPtrOutput() KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return i.ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(context.Background())
}

func (i KafkaRemoteBrokerAuthenticationTypesArgs) ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRemoteBrokerAuthenticationTypesOutput).ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(ctx)
}

// KafkaRemoteBrokerAuthenticationTypesPtrInput is an input type that accepts KafkaRemoteBrokerAuthenticationTypesArgs, KafkaRemoteBrokerAuthenticationTypesPtr and KafkaRemoteBrokerAuthenticationTypesPtrOutput values.
// You can construct a concrete instance of `KafkaRemoteBrokerAuthenticationTypesPtrInput` via:
//
//	        KafkaRemoteBrokerAuthenticationTypesArgs{...}
//
//	or:
//
//	        nil
type KafkaRemoteBrokerAuthenticationTypesPtrInput interface {
	pulumi.Input

	ToKafkaRemoteBrokerAuthenticationTypesPtrOutput() KafkaRemoteBrokerAuthenticationTypesPtrOutput
	ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(context.Context) KafkaRemoteBrokerAuthenticationTypesPtrOutput
}

type kafkaRemoteBrokerAuthenticationTypesPtrType KafkaRemoteBrokerAuthenticationTypesArgs

func KafkaRemoteBrokerAuthenticationTypesPtr(v *KafkaRemoteBrokerAuthenticationTypesArgs) KafkaRemoteBrokerAuthenticationTypesPtrInput {
	return (*kafkaRemoteBrokerAuthenticationTypesPtrType)(v)
}

func (*kafkaRemoteBrokerAuthenticationTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRemoteBrokerAuthenticationTypes)(nil)).Elem()
}

func (i *kafkaRemoteBrokerAuthenticationTypesPtrType) ToKafkaRemoteBrokerAuthenticationTypesPtrOutput() KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return i.ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(context.Background())
}

func (i *kafkaRemoteBrokerAuthenticationTypesPtrType) ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRemoteBrokerAuthenticationTypesPtrOutput)
}

// Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.
type KafkaRemoteBrokerAuthenticationTypesOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerAuthenticationTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerAuthenticationTypes)(nil)).Elem()
}

func (o KafkaRemoteBrokerAuthenticationTypesOutput) ToKafkaRemoteBrokerAuthenticationTypesOutput() KafkaRemoteBrokerAuthenticationTypesOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationTypesOutput) ToKafkaRemoteBrokerAuthenticationTypesOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationTypesOutput) ToKafkaRemoteBrokerAuthenticationTypesPtrOutput() KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return o.ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(context.Background())
}

func (o KafkaRemoteBrokerAuthenticationTypesOutput) ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaRemoteBrokerAuthenticationTypes) *KafkaRemoteBrokerAuthenticationTypes {
		return &v
	}).(KafkaRemoteBrokerAuthenticationTypesPtrOutput)
}

// Sasl remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesOutput) Sasl() SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationTypes) *SaslRemoteBrokerBasicAuthentication { return v.Sasl }).(SaslRemoteBrokerBasicAuthenticationPtrOutput)
}

// Managed identity remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationPtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationTypes) *ManagedIdentityAuthentication {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationPtrOutput)
}

// X509 remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesOutput) X509() KafkaX509AuthenticationPtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationTypes) *KafkaX509Authentication { return v.X509 }).(KafkaX509AuthenticationPtrOutput)
}

type KafkaRemoteBrokerAuthenticationTypesPtrOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerAuthenticationTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRemoteBrokerAuthenticationTypes)(nil)).Elem()
}

func (o KafkaRemoteBrokerAuthenticationTypesPtrOutput) ToKafkaRemoteBrokerAuthenticationTypesPtrOutput() KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationTypesPtrOutput) ToKafkaRemoteBrokerAuthenticationTypesPtrOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesPtrOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationTypesPtrOutput) Elem() KafkaRemoteBrokerAuthenticationTypesOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypes) KafkaRemoteBrokerAuthenticationTypes {
		if v != nil {
			return *v
		}
		var ret KafkaRemoteBrokerAuthenticationTypes
		return ret
	}).(KafkaRemoteBrokerAuthenticationTypesOutput)
}

// Sasl remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesPtrOutput) Sasl() SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypes) *SaslRemoteBrokerBasicAuthentication {
		if v == nil {
			return nil
		}
		return v.Sasl
	}).(SaslRemoteBrokerBasicAuthenticationPtrOutput)
}

// Managed identity remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesPtrOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationPtrOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypes) *ManagedIdentityAuthentication {
		if v == nil {
			return nil
		}
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationPtrOutput)
}

// X509 remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesPtrOutput) X509() KafkaX509AuthenticationPtrOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypes) *KafkaX509Authentication {
		if v == nil {
			return nil
		}
		return v.X509
	}).(KafkaX509AuthenticationPtrOutput)
}

// Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.
type KafkaRemoteBrokerAuthenticationTypesResponse struct {
	// Sasl remote broker authentication method.
	Sasl *SaslRemoteBrokerBasicAuthenticationResponse `pulumi:"sasl"`
	// Managed identity remote broker authentication method.
	SystemAssignedManagedIdentity *ManagedIdentityAuthenticationResponse `pulumi:"systemAssignedManagedIdentity"`
	// X509 remote broker authentication method.
	X509 *KafkaX509AuthenticationResponse `pulumi:"x509"`
}

// Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.
type KafkaRemoteBrokerAuthenticationTypesResponseOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerAuthenticationTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerAuthenticationTypesResponse)(nil)).Elem()
}

func (o KafkaRemoteBrokerAuthenticationTypesResponseOutput) ToKafkaRemoteBrokerAuthenticationTypesResponseOutput() KafkaRemoteBrokerAuthenticationTypesResponseOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationTypesResponseOutput) ToKafkaRemoteBrokerAuthenticationTypesResponseOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesResponseOutput {
	return o
}

// Sasl remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesResponseOutput) Sasl() SaslRemoteBrokerBasicAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationTypesResponse) *SaslRemoteBrokerBasicAuthenticationResponse {
		return v.Sasl
	}).(SaslRemoteBrokerBasicAuthenticationResponsePtrOutput)
}

// Managed identity remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesResponseOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationTypesResponse) *ManagedIdentityAuthenticationResponse {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationResponsePtrOutput)
}

// X509 remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesResponseOutput) X509() KafkaX509AuthenticationResponsePtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerAuthenticationTypesResponse) *KafkaX509AuthenticationResponse { return v.X509 }).(KafkaX509AuthenticationResponsePtrOutput)
}

type KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRemoteBrokerAuthenticationTypesResponse)(nil)).Elem()
}

func (o KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput) ToKafkaRemoteBrokerAuthenticationTypesResponsePtrOutput() KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput) ToKafkaRemoteBrokerAuthenticationTypesResponsePtrOutputWithContext(ctx context.Context) KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput {
	return o
}

func (o KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput) Elem() KafkaRemoteBrokerAuthenticationTypesResponseOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypesResponse) KafkaRemoteBrokerAuthenticationTypesResponse {
		if v != nil {
			return *v
		}
		var ret KafkaRemoteBrokerAuthenticationTypesResponse
		return ret
	}).(KafkaRemoteBrokerAuthenticationTypesResponseOutput)
}

// Sasl remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput) Sasl() SaslRemoteBrokerBasicAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypesResponse) *SaslRemoteBrokerBasicAuthenticationResponse {
		if v == nil {
			return nil
		}
		return v.Sasl
	}).(SaslRemoteBrokerBasicAuthenticationResponsePtrOutput)
}

// Managed identity remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypesResponse) *ManagedIdentityAuthenticationResponse {
		if v == nil {
			return nil
		}
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationResponsePtrOutput)
}

// X509 remote broker authentication method.
func (o KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput) X509() KafkaX509AuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *KafkaRemoteBrokerAuthenticationTypesResponse) *KafkaX509AuthenticationResponse {
		if v == nil {
			return nil
		}
		return v.X509
	}).(KafkaX509AuthenticationResponsePtrOutput)
}

// Kafka RemoteBrokerConnectionSpec details
type KafkaRemoteBrokerConnectionSpec struct {
	// The remote broker authentication methods.
	Authentication KafkaRemoteBrokerAuthenticationProperties `pulumi:"authentication"`
	// The endpoint of remote broker to connect to.
	Endpoint string `pulumi:"endpoint"`
	// TLS details for Remote broker Connection.
	Tls KafkaRemoteBrokerConnectionTls `pulumi:"tls"`
}

// KafkaRemoteBrokerConnectionSpecInput is an input type that accepts KafkaRemoteBrokerConnectionSpecArgs and KafkaRemoteBrokerConnectionSpecOutput values.
// You can construct a concrete instance of `KafkaRemoteBrokerConnectionSpecInput` via:
//
//	KafkaRemoteBrokerConnectionSpecArgs{...}
type KafkaRemoteBrokerConnectionSpecInput interface {
	pulumi.Input

	ToKafkaRemoteBrokerConnectionSpecOutput() KafkaRemoteBrokerConnectionSpecOutput
	ToKafkaRemoteBrokerConnectionSpecOutputWithContext(context.Context) KafkaRemoteBrokerConnectionSpecOutput
}

// Kafka RemoteBrokerConnectionSpec details
type KafkaRemoteBrokerConnectionSpecArgs struct {
	// The remote broker authentication methods.
	Authentication KafkaRemoteBrokerAuthenticationPropertiesInput `pulumi:"authentication"`
	// The endpoint of remote broker to connect to.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// TLS details for Remote broker Connection.
	Tls KafkaRemoteBrokerConnectionTlsInput `pulumi:"tls"`
}

func (KafkaRemoteBrokerConnectionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerConnectionSpec)(nil)).Elem()
}

func (i KafkaRemoteBrokerConnectionSpecArgs) ToKafkaRemoteBrokerConnectionSpecOutput() KafkaRemoteBrokerConnectionSpecOutput {
	return i.ToKafkaRemoteBrokerConnectionSpecOutputWithContext(context.Background())
}

func (i KafkaRemoteBrokerConnectionSpecArgs) ToKafkaRemoteBrokerConnectionSpecOutputWithContext(ctx context.Context) KafkaRemoteBrokerConnectionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRemoteBrokerConnectionSpecOutput)
}

// Kafka RemoteBrokerConnectionSpec details
type KafkaRemoteBrokerConnectionSpecOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerConnectionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerConnectionSpec)(nil)).Elem()
}

func (o KafkaRemoteBrokerConnectionSpecOutput) ToKafkaRemoteBrokerConnectionSpecOutput() KafkaRemoteBrokerConnectionSpecOutput {
	return o
}

func (o KafkaRemoteBrokerConnectionSpecOutput) ToKafkaRemoteBrokerConnectionSpecOutputWithContext(ctx context.Context) KafkaRemoteBrokerConnectionSpecOutput {
	return o
}

// The remote broker authentication methods.
func (o KafkaRemoteBrokerConnectionSpecOutput) Authentication() KafkaRemoteBrokerAuthenticationPropertiesOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionSpec) KafkaRemoteBrokerAuthenticationProperties {
		return v.Authentication
	}).(KafkaRemoteBrokerAuthenticationPropertiesOutput)
}

// The endpoint of remote broker to connect to.
func (o KafkaRemoteBrokerConnectionSpecOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionSpec) string { return v.Endpoint }).(pulumi.StringOutput)
}

// TLS details for Remote broker Connection.
func (o KafkaRemoteBrokerConnectionSpecOutput) Tls() KafkaRemoteBrokerConnectionTlsOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionSpec) KafkaRemoteBrokerConnectionTls { return v.Tls }).(KafkaRemoteBrokerConnectionTlsOutput)
}

// Kafka RemoteBrokerConnectionSpec details
type KafkaRemoteBrokerConnectionSpecResponse struct {
	// The remote broker authentication methods.
	Authentication KafkaRemoteBrokerAuthenticationPropertiesResponse `pulumi:"authentication"`
	// The endpoint of remote broker to connect to.
	Endpoint string `pulumi:"endpoint"`
	// TLS details for Remote broker Connection.
	Tls KafkaRemoteBrokerConnectionTlsResponse `pulumi:"tls"`
}

// Kafka RemoteBrokerConnectionSpec details
type KafkaRemoteBrokerConnectionSpecResponseOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerConnectionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerConnectionSpecResponse)(nil)).Elem()
}

func (o KafkaRemoteBrokerConnectionSpecResponseOutput) ToKafkaRemoteBrokerConnectionSpecResponseOutput() KafkaRemoteBrokerConnectionSpecResponseOutput {
	return o
}

func (o KafkaRemoteBrokerConnectionSpecResponseOutput) ToKafkaRemoteBrokerConnectionSpecResponseOutputWithContext(ctx context.Context) KafkaRemoteBrokerConnectionSpecResponseOutput {
	return o
}

// The remote broker authentication methods.
func (o KafkaRemoteBrokerConnectionSpecResponseOutput) Authentication() KafkaRemoteBrokerAuthenticationPropertiesResponseOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionSpecResponse) KafkaRemoteBrokerAuthenticationPropertiesResponse {
		return v.Authentication
	}).(KafkaRemoteBrokerAuthenticationPropertiesResponseOutput)
}

// The endpoint of remote broker to connect to.
func (o KafkaRemoteBrokerConnectionSpecResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionSpecResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// TLS details for Remote broker Connection.
func (o KafkaRemoteBrokerConnectionSpecResponseOutput) Tls() KafkaRemoteBrokerConnectionTlsResponseOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionSpecResponse) KafkaRemoteBrokerConnectionTlsResponse { return v.Tls }).(KafkaRemoteBrokerConnectionTlsResponseOutput)
}

// Kafka RemoteBrokerConnection TLS details
type KafkaRemoteBrokerConnectionTls struct {
	// Tls Enabled on Remote Broker Connection.
	TlsEnabled bool `pulumi:"tlsEnabled"`
	// Trusted CA certificate name for Remote Broker.
	TrustedCaCertificateConfigMap *string `pulumi:"trustedCaCertificateConfigMap"`
}

// KafkaRemoteBrokerConnectionTlsInput is an input type that accepts KafkaRemoteBrokerConnectionTlsArgs and KafkaRemoteBrokerConnectionTlsOutput values.
// You can construct a concrete instance of `KafkaRemoteBrokerConnectionTlsInput` via:
//
//	KafkaRemoteBrokerConnectionTlsArgs{...}
type KafkaRemoteBrokerConnectionTlsInput interface {
	pulumi.Input

	ToKafkaRemoteBrokerConnectionTlsOutput() KafkaRemoteBrokerConnectionTlsOutput
	ToKafkaRemoteBrokerConnectionTlsOutputWithContext(context.Context) KafkaRemoteBrokerConnectionTlsOutput
}

// Kafka RemoteBrokerConnection TLS details
type KafkaRemoteBrokerConnectionTlsArgs struct {
	// Tls Enabled on Remote Broker Connection.
	TlsEnabled pulumi.BoolInput `pulumi:"tlsEnabled"`
	// Trusted CA certificate name for Remote Broker.
	TrustedCaCertificateConfigMap pulumi.StringPtrInput `pulumi:"trustedCaCertificateConfigMap"`
}

func (KafkaRemoteBrokerConnectionTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerConnectionTls)(nil)).Elem()
}

func (i KafkaRemoteBrokerConnectionTlsArgs) ToKafkaRemoteBrokerConnectionTlsOutput() KafkaRemoteBrokerConnectionTlsOutput {
	return i.ToKafkaRemoteBrokerConnectionTlsOutputWithContext(context.Background())
}

func (i KafkaRemoteBrokerConnectionTlsArgs) ToKafkaRemoteBrokerConnectionTlsOutputWithContext(ctx context.Context) KafkaRemoteBrokerConnectionTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRemoteBrokerConnectionTlsOutput)
}

// Kafka RemoteBrokerConnection TLS details
type KafkaRemoteBrokerConnectionTlsOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerConnectionTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerConnectionTls)(nil)).Elem()
}

func (o KafkaRemoteBrokerConnectionTlsOutput) ToKafkaRemoteBrokerConnectionTlsOutput() KafkaRemoteBrokerConnectionTlsOutput {
	return o
}

func (o KafkaRemoteBrokerConnectionTlsOutput) ToKafkaRemoteBrokerConnectionTlsOutputWithContext(ctx context.Context) KafkaRemoteBrokerConnectionTlsOutput {
	return o
}

// Tls Enabled on Remote Broker Connection.
func (o KafkaRemoteBrokerConnectionTlsOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionTls) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

// Trusted CA certificate name for Remote Broker.
func (o KafkaRemoteBrokerConnectionTlsOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionTls) *string { return v.TrustedCaCertificateConfigMap }).(pulumi.StringPtrOutput)
}

// Kafka RemoteBrokerConnection TLS details
type KafkaRemoteBrokerConnectionTlsResponse struct {
	// Tls Enabled on Remote Broker Connection.
	TlsEnabled bool `pulumi:"tlsEnabled"`
	// Trusted CA certificate name for Remote Broker.
	TrustedCaCertificateConfigMap *string `pulumi:"trustedCaCertificateConfigMap"`
}

// Kafka RemoteBrokerConnection TLS details
type KafkaRemoteBrokerConnectionTlsResponseOutput struct{ *pulumi.OutputState }

func (KafkaRemoteBrokerConnectionTlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRemoteBrokerConnectionTlsResponse)(nil)).Elem()
}

func (o KafkaRemoteBrokerConnectionTlsResponseOutput) ToKafkaRemoteBrokerConnectionTlsResponseOutput() KafkaRemoteBrokerConnectionTlsResponseOutput {
	return o
}

func (o KafkaRemoteBrokerConnectionTlsResponseOutput) ToKafkaRemoteBrokerConnectionTlsResponseOutputWithContext(ctx context.Context) KafkaRemoteBrokerConnectionTlsResponseOutput {
	return o
}

// Tls Enabled on Remote Broker Connection.
func (o KafkaRemoteBrokerConnectionTlsResponseOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionTlsResponse) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

// Trusted CA certificate name for Remote Broker.
func (o KafkaRemoteBrokerConnectionTlsResponseOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaRemoteBrokerConnectionTlsResponse) *string { return v.TrustedCaCertificateConfigMap }).(pulumi.StringPtrOutput)
}

// Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.
type KafkaRoutes struct {
	// Kafka to Mqtt route.
	KafkaToMqtt *KafkaToMqttRoutes `pulumi:"kafkaToMqtt"`
	// Mqtt to Kafka route.
	MqttToKafka *MqttToKafkaRoutes `pulumi:"mqttToKafka"`
}

// Defaults sets the appropriate defaults for KafkaRoutes
func (val *KafkaRoutes) Defaults() *KafkaRoutes {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.KafkaToMqtt = tmp.KafkaToMqtt.Defaults()

	tmp.MqttToKafka = tmp.MqttToKafka.Defaults()

	return &tmp
}

// KafkaRoutesInput is an input type that accepts KafkaRoutesArgs and KafkaRoutesOutput values.
// You can construct a concrete instance of `KafkaRoutesInput` via:
//
//	KafkaRoutesArgs{...}
type KafkaRoutesInput interface {
	pulumi.Input

	ToKafkaRoutesOutput() KafkaRoutesOutput
	ToKafkaRoutesOutputWithContext(context.Context) KafkaRoutesOutput
}

// Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.
type KafkaRoutesArgs struct {
	// Kafka to Mqtt route.
	KafkaToMqtt KafkaToMqttRoutesPtrInput `pulumi:"kafkaToMqtt"`
	// Mqtt to Kafka route.
	MqttToKafka MqttToKafkaRoutesPtrInput `pulumi:"mqttToKafka"`
}

// Defaults sets the appropriate defaults for KafkaRoutesArgs
func (val *KafkaRoutesArgs) Defaults() *KafkaRoutesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (KafkaRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRoutes)(nil)).Elem()
}

func (i KafkaRoutesArgs) ToKafkaRoutesOutput() KafkaRoutesOutput {
	return i.ToKafkaRoutesOutputWithContext(context.Background())
}

func (i KafkaRoutesArgs) ToKafkaRoutesOutputWithContext(ctx context.Context) KafkaRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRoutesOutput)
}

// KafkaRoutesArrayInput is an input type that accepts KafkaRoutesArray and KafkaRoutesArrayOutput values.
// You can construct a concrete instance of `KafkaRoutesArrayInput` via:
//
//	KafkaRoutesArray{ KafkaRoutesArgs{...} }
type KafkaRoutesArrayInput interface {
	pulumi.Input

	ToKafkaRoutesArrayOutput() KafkaRoutesArrayOutput
	ToKafkaRoutesArrayOutputWithContext(context.Context) KafkaRoutesArrayOutput
}

type KafkaRoutesArray []KafkaRoutesInput

func (KafkaRoutesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaRoutes)(nil)).Elem()
}

func (i KafkaRoutesArray) ToKafkaRoutesArrayOutput() KafkaRoutesArrayOutput {
	return i.ToKafkaRoutesArrayOutputWithContext(context.Background())
}

func (i KafkaRoutesArray) ToKafkaRoutesArrayOutputWithContext(ctx context.Context) KafkaRoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRoutesArrayOutput)
}

// Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.
type KafkaRoutesOutput struct{ *pulumi.OutputState }

func (KafkaRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRoutes)(nil)).Elem()
}

func (o KafkaRoutesOutput) ToKafkaRoutesOutput() KafkaRoutesOutput {
	return o
}

func (o KafkaRoutesOutput) ToKafkaRoutesOutputWithContext(ctx context.Context) KafkaRoutesOutput {
	return o
}

// Kafka to Mqtt route.
func (o KafkaRoutesOutput) KafkaToMqtt() KafkaToMqttRoutesPtrOutput {
	return o.ApplyT(func(v KafkaRoutes) *KafkaToMqttRoutes { return v.KafkaToMqtt }).(KafkaToMqttRoutesPtrOutput)
}

// Mqtt to Kafka route.
func (o KafkaRoutesOutput) MqttToKafka() MqttToKafkaRoutesPtrOutput {
	return o.ApplyT(func(v KafkaRoutes) *MqttToKafkaRoutes { return v.MqttToKafka }).(MqttToKafkaRoutesPtrOutput)
}

type KafkaRoutesArrayOutput struct{ *pulumi.OutputState }

func (KafkaRoutesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaRoutes)(nil)).Elem()
}

func (o KafkaRoutesArrayOutput) ToKafkaRoutesArrayOutput() KafkaRoutesArrayOutput {
	return o
}

func (o KafkaRoutesArrayOutput) ToKafkaRoutesArrayOutputWithContext(ctx context.Context) KafkaRoutesArrayOutput {
	return o
}

func (o KafkaRoutesArrayOutput) Index(i pulumi.IntInput) KafkaRoutesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaRoutes {
		return vs[0].([]KafkaRoutes)[vs[1].(int)]
	}).(KafkaRoutesOutput)
}

// Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.
type KafkaRoutesResponse struct {
	// Kafka to Mqtt route.
	KafkaToMqtt *KafkaToMqttRoutesResponse `pulumi:"kafkaToMqtt"`
	// Mqtt to Kafka route.
	MqttToKafka *MqttToKafkaRoutesResponse `pulumi:"mqttToKafka"`
}

// Defaults sets the appropriate defaults for KafkaRoutesResponse
func (val *KafkaRoutesResponse) Defaults() *KafkaRoutesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.KafkaToMqtt = tmp.KafkaToMqtt.Defaults()

	tmp.MqttToKafka = tmp.MqttToKafka.Defaults()

	return &tmp
}

// Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.
type KafkaRoutesResponseOutput struct{ *pulumi.OutputState }

func (KafkaRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRoutesResponse)(nil)).Elem()
}

func (o KafkaRoutesResponseOutput) ToKafkaRoutesResponseOutput() KafkaRoutesResponseOutput {
	return o
}

func (o KafkaRoutesResponseOutput) ToKafkaRoutesResponseOutputWithContext(ctx context.Context) KafkaRoutesResponseOutput {
	return o
}

// Kafka to Mqtt route.
func (o KafkaRoutesResponseOutput) KafkaToMqtt() KafkaToMqttRoutesResponsePtrOutput {
	return o.ApplyT(func(v KafkaRoutesResponse) *KafkaToMqttRoutesResponse { return v.KafkaToMqtt }).(KafkaToMqttRoutesResponsePtrOutput)
}

// Mqtt to Kafka route.
func (o KafkaRoutesResponseOutput) MqttToKafka() MqttToKafkaRoutesResponsePtrOutput {
	return o.ApplyT(func(v KafkaRoutesResponse) *MqttToKafkaRoutesResponse { return v.MqttToKafka }).(MqttToKafkaRoutesResponsePtrOutput)
}

type KafkaRoutesResponseArrayOutput struct{ *pulumi.OutputState }

func (KafkaRoutesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaRoutesResponse)(nil)).Elem()
}

func (o KafkaRoutesResponseArrayOutput) ToKafkaRoutesResponseArrayOutput() KafkaRoutesResponseArrayOutput {
	return o
}

func (o KafkaRoutesResponseArrayOutput) ToKafkaRoutesResponseArrayOutputWithContext(ctx context.Context) KafkaRoutesResponseArrayOutput {
	return o
}

func (o KafkaRoutesResponseArrayOutput) Index(i pulumi.IntInput) KafkaRoutesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaRoutesResponse {
		return vs[0].([]KafkaRoutesResponse)[vs[1].(int)]
	}).(KafkaRoutesResponseOutput)
}

// Kafka Shared Subscription properties
type KafkaSharedSubscriptionProperties struct {
	// The minimum number to use in a group for subscription.
	GroupMinimumShareNumber int `pulumi:"groupMinimumShareNumber"`
	// The name of the shared subscription.
	GroupName string `pulumi:"groupName"`
}

// KafkaSharedSubscriptionPropertiesInput is an input type that accepts KafkaSharedSubscriptionPropertiesArgs and KafkaSharedSubscriptionPropertiesOutput values.
// You can construct a concrete instance of `KafkaSharedSubscriptionPropertiesInput` via:
//
//	KafkaSharedSubscriptionPropertiesArgs{...}
type KafkaSharedSubscriptionPropertiesInput interface {
	pulumi.Input

	ToKafkaSharedSubscriptionPropertiesOutput() KafkaSharedSubscriptionPropertiesOutput
	ToKafkaSharedSubscriptionPropertiesOutputWithContext(context.Context) KafkaSharedSubscriptionPropertiesOutput
}

// Kafka Shared Subscription properties
type KafkaSharedSubscriptionPropertiesArgs struct {
	// The minimum number to use in a group for subscription.
	GroupMinimumShareNumber pulumi.IntInput `pulumi:"groupMinimumShareNumber"`
	// The name of the shared subscription.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (KafkaSharedSubscriptionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaSharedSubscriptionProperties)(nil)).Elem()
}

func (i KafkaSharedSubscriptionPropertiesArgs) ToKafkaSharedSubscriptionPropertiesOutput() KafkaSharedSubscriptionPropertiesOutput {
	return i.ToKafkaSharedSubscriptionPropertiesOutputWithContext(context.Background())
}

func (i KafkaSharedSubscriptionPropertiesArgs) ToKafkaSharedSubscriptionPropertiesOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSharedSubscriptionPropertiesOutput)
}

func (i KafkaSharedSubscriptionPropertiesArgs) ToKafkaSharedSubscriptionPropertiesPtrOutput() KafkaSharedSubscriptionPropertiesPtrOutput {
	return i.ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i KafkaSharedSubscriptionPropertiesArgs) ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSharedSubscriptionPropertiesOutput).ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(ctx)
}

// KafkaSharedSubscriptionPropertiesPtrInput is an input type that accepts KafkaSharedSubscriptionPropertiesArgs, KafkaSharedSubscriptionPropertiesPtr and KafkaSharedSubscriptionPropertiesPtrOutput values.
// You can construct a concrete instance of `KafkaSharedSubscriptionPropertiesPtrInput` via:
//
//	        KafkaSharedSubscriptionPropertiesArgs{...}
//
//	or:
//
//	        nil
type KafkaSharedSubscriptionPropertiesPtrInput interface {
	pulumi.Input

	ToKafkaSharedSubscriptionPropertiesPtrOutput() KafkaSharedSubscriptionPropertiesPtrOutput
	ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(context.Context) KafkaSharedSubscriptionPropertiesPtrOutput
}

type kafkaSharedSubscriptionPropertiesPtrType KafkaSharedSubscriptionPropertiesArgs

func KafkaSharedSubscriptionPropertiesPtr(v *KafkaSharedSubscriptionPropertiesArgs) KafkaSharedSubscriptionPropertiesPtrInput {
	return (*kafkaSharedSubscriptionPropertiesPtrType)(v)
}

func (*kafkaSharedSubscriptionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSharedSubscriptionProperties)(nil)).Elem()
}

func (i *kafkaSharedSubscriptionPropertiesPtrType) ToKafkaSharedSubscriptionPropertiesPtrOutput() KafkaSharedSubscriptionPropertiesPtrOutput {
	return i.ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i *kafkaSharedSubscriptionPropertiesPtrType) ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaSharedSubscriptionPropertiesPtrOutput)
}

// Kafka Shared Subscription properties
type KafkaSharedSubscriptionPropertiesOutput struct{ *pulumi.OutputState }

func (KafkaSharedSubscriptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaSharedSubscriptionProperties)(nil)).Elem()
}

func (o KafkaSharedSubscriptionPropertiesOutput) ToKafkaSharedSubscriptionPropertiesOutput() KafkaSharedSubscriptionPropertiesOutput {
	return o
}

func (o KafkaSharedSubscriptionPropertiesOutput) ToKafkaSharedSubscriptionPropertiesOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesOutput {
	return o
}

func (o KafkaSharedSubscriptionPropertiesOutput) ToKafkaSharedSubscriptionPropertiesPtrOutput() KafkaSharedSubscriptionPropertiesPtrOutput {
	return o.ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (o KafkaSharedSubscriptionPropertiesOutput) ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaSharedSubscriptionProperties) *KafkaSharedSubscriptionProperties {
		return &v
	}).(KafkaSharedSubscriptionPropertiesPtrOutput)
}

// The minimum number to use in a group for subscription.
func (o KafkaSharedSubscriptionPropertiesOutput) GroupMinimumShareNumber() pulumi.IntOutput {
	return o.ApplyT(func(v KafkaSharedSubscriptionProperties) int { return v.GroupMinimumShareNumber }).(pulumi.IntOutput)
}

// The name of the shared subscription.
func (o KafkaSharedSubscriptionPropertiesOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaSharedSubscriptionProperties) string { return v.GroupName }).(pulumi.StringOutput)
}

type KafkaSharedSubscriptionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KafkaSharedSubscriptionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSharedSubscriptionProperties)(nil)).Elem()
}

func (o KafkaSharedSubscriptionPropertiesPtrOutput) ToKafkaSharedSubscriptionPropertiesPtrOutput() KafkaSharedSubscriptionPropertiesPtrOutput {
	return o
}

func (o KafkaSharedSubscriptionPropertiesPtrOutput) ToKafkaSharedSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesPtrOutput {
	return o
}

func (o KafkaSharedSubscriptionPropertiesPtrOutput) Elem() KafkaSharedSubscriptionPropertiesOutput {
	return o.ApplyT(func(v *KafkaSharedSubscriptionProperties) KafkaSharedSubscriptionProperties {
		if v != nil {
			return *v
		}
		var ret KafkaSharedSubscriptionProperties
		return ret
	}).(KafkaSharedSubscriptionPropertiesOutput)
}

// The minimum number to use in a group for subscription.
func (o KafkaSharedSubscriptionPropertiesPtrOutput) GroupMinimumShareNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaSharedSubscriptionProperties) *int {
		if v == nil {
			return nil
		}
		return &v.GroupMinimumShareNumber
	}).(pulumi.IntPtrOutput)
}

// The name of the shared subscription.
func (o KafkaSharedSubscriptionPropertiesPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaSharedSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.GroupName
	}).(pulumi.StringPtrOutput)
}

// Kafka Shared Subscription properties
type KafkaSharedSubscriptionPropertiesResponse struct {
	// The minimum number to use in a group for subscription.
	GroupMinimumShareNumber int `pulumi:"groupMinimumShareNumber"`
	// The name of the shared subscription.
	GroupName string `pulumi:"groupName"`
}

// Kafka Shared Subscription properties
type KafkaSharedSubscriptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KafkaSharedSubscriptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaSharedSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o KafkaSharedSubscriptionPropertiesResponseOutput) ToKafkaSharedSubscriptionPropertiesResponseOutput() KafkaSharedSubscriptionPropertiesResponseOutput {
	return o
}

func (o KafkaSharedSubscriptionPropertiesResponseOutput) ToKafkaSharedSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesResponseOutput {
	return o
}

// The minimum number to use in a group for subscription.
func (o KafkaSharedSubscriptionPropertiesResponseOutput) GroupMinimumShareNumber() pulumi.IntOutput {
	return o.ApplyT(func(v KafkaSharedSubscriptionPropertiesResponse) int { return v.GroupMinimumShareNumber }).(pulumi.IntOutput)
}

// The name of the shared subscription.
func (o KafkaSharedSubscriptionPropertiesResponseOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaSharedSubscriptionPropertiesResponse) string { return v.GroupName }).(pulumi.StringOutput)
}

type KafkaSharedSubscriptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaSharedSubscriptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaSharedSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o KafkaSharedSubscriptionPropertiesResponsePtrOutput) ToKafkaSharedSubscriptionPropertiesResponsePtrOutput() KafkaSharedSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o KafkaSharedSubscriptionPropertiesResponsePtrOutput) ToKafkaSharedSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) KafkaSharedSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o KafkaSharedSubscriptionPropertiesResponsePtrOutput) Elem() KafkaSharedSubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v *KafkaSharedSubscriptionPropertiesResponse) KafkaSharedSubscriptionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KafkaSharedSubscriptionPropertiesResponse
		return ret
	}).(KafkaSharedSubscriptionPropertiesResponseOutput)
}

// The minimum number to use in a group for subscription.
func (o KafkaSharedSubscriptionPropertiesResponsePtrOutput) GroupMinimumShareNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaSharedSubscriptionPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.GroupMinimumShareNumber
	}).(pulumi.IntPtrOutput)
}

// The name of the shared subscription.
func (o KafkaSharedSubscriptionPropertiesResponsePtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaSharedSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GroupName
	}).(pulumi.StringPtrOutput)
}

// Kafka to Mqtt route properties
type KafkaToMqttRoutes struct {
	// The consumer group id to use.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The kafka topic to pull from.
	KafkaTopic string `pulumi:"kafkaTopic"`
	// The mqtt topic to publish to.
	MqttTopic string `pulumi:"mqttTopic"`
	// The name of the route.
	Name string `pulumi:"name"`
	// The qos to use for mqtt.
	Qos *int `pulumi:"qos"`
}

// Defaults sets the appropriate defaults for KafkaToMqttRoutes
func (val *KafkaToMqttRoutes) Defaults() *KafkaToMqttRoutes {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// KafkaToMqttRoutesInput is an input type that accepts KafkaToMqttRoutesArgs and KafkaToMqttRoutesOutput values.
// You can construct a concrete instance of `KafkaToMqttRoutesInput` via:
//
//	KafkaToMqttRoutesArgs{...}
type KafkaToMqttRoutesInput interface {
	pulumi.Input

	ToKafkaToMqttRoutesOutput() KafkaToMqttRoutesOutput
	ToKafkaToMqttRoutesOutputWithContext(context.Context) KafkaToMqttRoutesOutput
}

// Kafka to Mqtt route properties
type KafkaToMqttRoutesArgs struct {
	// The consumer group id to use.
	ConsumerGroupId pulumi.StringPtrInput `pulumi:"consumerGroupId"`
	// The kafka topic to pull from.
	KafkaTopic pulumi.StringInput `pulumi:"kafkaTopic"`
	// The mqtt topic to publish to.
	MqttTopic pulumi.StringInput `pulumi:"mqttTopic"`
	// The name of the route.
	Name pulumi.StringInput `pulumi:"name"`
	// The qos to use for mqtt.
	Qos pulumi.IntPtrInput `pulumi:"qos"`
}

// Defaults sets the appropriate defaults for KafkaToMqttRoutesArgs
func (val *KafkaToMqttRoutesArgs) Defaults() *KafkaToMqttRoutesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		tmp.Qos = pulumi.IntPtr(1)
	}
	return &tmp
}
func (KafkaToMqttRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaToMqttRoutes)(nil)).Elem()
}

func (i KafkaToMqttRoutesArgs) ToKafkaToMqttRoutesOutput() KafkaToMqttRoutesOutput {
	return i.ToKafkaToMqttRoutesOutputWithContext(context.Background())
}

func (i KafkaToMqttRoutesArgs) ToKafkaToMqttRoutesOutputWithContext(ctx context.Context) KafkaToMqttRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaToMqttRoutesOutput)
}

func (i KafkaToMqttRoutesArgs) ToKafkaToMqttRoutesPtrOutput() KafkaToMqttRoutesPtrOutput {
	return i.ToKafkaToMqttRoutesPtrOutputWithContext(context.Background())
}

func (i KafkaToMqttRoutesArgs) ToKafkaToMqttRoutesPtrOutputWithContext(ctx context.Context) KafkaToMqttRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaToMqttRoutesOutput).ToKafkaToMqttRoutesPtrOutputWithContext(ctx)
}

// KafkaToMqttRoutesPtrInput is an input type that accepts KafkaToMqttRoutesArgs, KafkaToMqttRoutesPtr and KafkaToMqttRoutesPtrOutput values.
// You can construct a concrete instance of `KafkaToMqttRoutesPtrInput` via:
//
//	        KafkaToMqttRoutesArgs{...}
//
//	or:
//
//	        nil
type KafkaToMqttRoutesPtrInput interface {
	pulumi.Input

	ToKafkaToMqttRoutesPtrOutput() KafkaToMqttRoutesPtrOutput
	ToKafkaToMqttRoutesPtrOutputWithContext(context.Context) KafkaToMqttRoutesPtrOutput
}

type kafkaToMqttRoutesPtrType KafkaToMqttRoutesArgs

func KafkaToMqttRoutesPtr(v *KafkaToMqttRoutesArgs) KafkaToMqttRoutesPtrInput {
	return (*kafkaToMqttRoutesPtrType)(v)
}

func (*kafkaToMqttRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaToMqttRoutes)(nil)).Elem()
}

func (i *kafkaToMqttRoutesPtrType) ToKafkaToMqttRoutesPtrOutput() KafkaToMqttRoutesPtrOutput {
	return i.ToKafkaToMqttRoutesPtrOutputWithContext(context.Background())
}

func (i *kafkaToMqttRoutesPtrType) ToKafkaToMqttRoutesPtrOutputWithContext(ctx context.Context) KafkaToMqttRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaToMqttRoutesPtrOutput)
}

// Kafka to Mqtt route properties
type KafkaToMqttRoutesOutput struct{ *pulumi.OutputState }

func (KafkaToMqttRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaToMqttRoutes)(nil)).Elem()
}

func (o KafkaToMqttRoutesOutput) ToKafkaToMqttRoutesOutput() KafkaToMqttRoutesOutput {
	return o
}

func (o KafkaToMqttRoutesOutput) ToKafkaToMqttRoutesOutputWithContext(ctx context.Context) KafkaToMqttRoutesOutput {
	return o
}

func (o KafkaToMqttRoutesOutput) ToKafkaToMqttRoutesPtrOutput() KafkaToMqttRoutesPtrOutput {
	return o.ToKafkaToMqttRoutesPtrOutputWithContext(context.Background())
}

func (o KafkaToMqttRoutesOutput) ToKafkaToMqttRoutesPtrOutputWithContext(ctx context.Context) KafkaToMqttRoutesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaToMqttRoutes) *KafkaToMqttRoutes {
		return &v
	}).(KafkaToMqttRoutesPtrOutput)
}

// The consumer group id to use.
func (o KafkaToMqttRoutesOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaToMqttRoutes) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

// The kafka topic to pull from.
func (o KafkaToMqttRoutesOutput) KafkaTopic() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaToMqttRoutes) string { return v.KafkaTopic }).(pulumi.StringOutput)
}

// The mqtt topic to publish to.
func (o KafkaToMqttRoutesOutput) MqttTopic() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaToMqttRoutes) string { return v.MqttTopic }).(pulumi.StringOutput)
}

// The name of the route.
func (o KafkaToMqttRoutesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaToMqttRoutes) string { return v.Name }).(pulumi.StringOutput)
}

// The qos to use for mqtt.
func (o KafkaToMqttRoutesOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaToMqttRoutes) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

type KafkaToMqttRoutesPtrOutput struct{ *pulumi.OutputState }

func (KafkaToMqttRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaToMqttRoutes)(nil)).Elem()
}

func (o KafkaToMqttRoutesPtrOutput) ToKafkaToMqttRoutesPtrOutput() KafkaToMqttRoutesPtrOutput {
	return o
}

func (o KafkaToMqttRoutesPtrOutput) ToKafkaToMqttRoutesPtrOutputWithContext(ctx context.Context) KafkaToMqttRoutesPtrOutput {
	return o
}

func (o KafkaToMqttRoutesPtrOutput) Elem() KafkaToMqttRoutesOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutes) KafkaToMqttRoutes {
		if v != nil {
			return *v
		}
		var ret KafkaToMqttRoutes
		return ret
	}).(KafkaToMqttRoutesOutput)
}

// The consumer group id to use.
func (o KafkaToMqttRoutesPtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutes) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

// The kafka topic to pull from.
func (o KafkaToMqttRoutesPtrOutput) KafkaTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutes) *string {
		if v == nil {
			return nil
		}
		return &v.KafkaTopic
	}).(pulumi.StringPtrOutput)
}

// The mqtt topic to publish to.
func (o KafkaToMqttRoutesPtrOutput) MqttTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutes) *string {
		if v == nil {
			return nil
		}
		return &v.MqttTopic
	}).(pulumi.StringPtrOutput)
}

// The name of the route.
func (o KafkaToMqttRoutesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutes) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The qos to use for mqtt.
func (o KafkaToMqttRoutesPtrOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutes) *int {
		if v == nil {
			return nil
		}
		return v.Qos
	}).(pulumi.IntPtrOutput)
}

// Kafka to Mqtt route properties
type KafkaToMqttRoutesResponse struct {
	// The consumer group id to use.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The kafka topic to pull from.
	KafkaTopic string `pulumi:"kafkaTopic"`
	// The mqtt topic to publish to.
	MqttTopic string `pulumi:"mqttTopic"`
	// The name of the route.
	Name string `pulumi:"name"`
	// The qos to use for mqtt.
	Qos *int `pulumi:"qos"`
}

// Defaults sets the appropriate defaults for KafkaToMqttRoutesResponse
func (val *KafkaToMqttRoutesResponse) Defaults() *KafkaToMqttRoutesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// Kafka to Mqtt route properties
type KafkaToMqttRoutesResponseOutput struct{ *pulumi.OutputState }

func (KafkaToMqttRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaToMqttRoutesResponse)(nil)).Elem()
}

func (o KafkaToMqttRoutesResponseOutput) ToKafkaToMqttRoutesResponseOutput() KafkaToMqttRoutesResponseOutput {
	return o
}

func (o KafkaToMqttRoutesResponseOutput) ToKafkaToMqttRoutesResponseOutputWithContext(ctx context.Context) KafkaToMqttRoutesResponseOutput {
	return o
}

// The consumer group id to use.
func (o KafkaToMqttRoutesResponseOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaToMqttRoutesResponse) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

// The kafka topic to pull from.
func (o KafkaToMqttRoutesResponseOutput) KafkaTopic() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaToMqttRoutesResponse) string { return v.KafkaTopic }).(pulumi.StringOutput)
}

// The mqtt topic to publish to.
func (o KafkaToMqttRoutesResponseOutput) MqttTopic() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaToMqttRoutesResponse) string { return v.MqttTopic }).(pulumi.StringOutput)
}

// The name of the route.
func (o KafkaToMqttRoutesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaToMqttRoutesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qos to use for mqtt.
func (o KafkaToMqttRoutesResponseOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaToMqttRoutesResponse) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

type KafkaToMqttRoutesResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaToMqttRoutesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaToMqttRoutesResponse)(nil)).Elem()
}

func (o KafkaToMqttRoutesResponsePtrOutput) ToKafkaToMqttRoutesResponsePtrOutput() KafkaToMqttRoutesResponsePtrOutput {
	return o
}

func (o KafkaToMqttRoutesResponsePtrOutput) ToKafkaToMqttRoutesResponsePtrOutputWithContext(ctx context.Context) KafkaToMqttRoutesResponsePtrOutput {
	return o
}

func (o KafkaToMqttRoutesResponsePtrOutput) Elem() KafkaToMqttRoutesResponseOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutesResponse) KafkaToMqttRoutesResponse {
		if v != nil {
			return *v
		}
		var ret KafkaToMqttRoutesResponse
		return ret
	}).(KafkaToMqttRoutesResponseOutput)
}

// The consumer group id to use.
func (o KafkaToMqttRoutesResponsePtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

// The kafka topic to pull from.
func (o KafkaToMqttRoutesResponsePtrOutput) KafkaTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KafkaTopic
	}).(pulumi.StringPtrOutput)
}

// The mqtt topic to publish to.
func (o KafkaToMqttRoutesResponsePtrOutput) MqttTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MqttTopic
	}).(pulumi.StringPtrOutput)
}

// The name of the route.
func (o KafkaToMqttRoutesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The qos to use for mqtt.
func (o KafkaToMqttRoutesResponsePtrOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaToMqttRoutesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Qos
	}).(pulumi.IntPtrOutput)
}

// Kafka Token KeyVault properties.
type KafkaTokenKeyVaultProperties struct {
	// Username to connect with.
	Username *string `pulumi:"username"`
	// KeyVault properties.
	Vault KeyVaultConnectionProperties `pulumi:"vault"`
	// KeyVault secret details.
	VaultSecret KeyVaultSecretObject `pulumi:"vaultSecret"`
}

// KafkaTokenKeyVaultPropertiesInput is an input type that accepts KafkaTokenKeyVaultPropertiesArgs and KafkaTokenKeyVaultPropertiesOutput values.
// You can construct a concrete instance of `KafkaTokenKeyVaultPropertiesInput` via:
//
//	KafkaTokenKeyVaultPropertiesArgs{...}
type KafkaTokenKeyVaultPropertiesInput interface {
	pulumi.Input

	ToKafkaTokenKeyVaultPropertiesOutput() KafkaTokenKeyVaultPropertiesOutput
	ToKafkaTokenKeyVaultPropertiesOutputWithContext(context.Context) KafkaTokenKeyVaultPropertiesOutput
}

// Kafka Token KeyVault properties.
type KafkaTokenKeyVaultPropertiesArgs struct {
	// Username to connect with.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// KeyVault properties.
	Vault KeyVaultConnectionPropertiesInput `pulumi:"vault"`
	// KeyVault secret details.
	VaultSecret KeyVaultSecretObjectInput `pulumi:"vaultSecret"`
}

func (KafkaTokenKeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTokenKeyVaultProperties)(nil)).Elem()
}

func (i KafkaTokenKeyVaultPropertiesArgs) ToKafkaTokenKeyVaultPropertiesOutput() KafkaTokenKeyVaultPropertiesOutput {
	return i.ToKafkaTokenKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i KafkaTokenKeyVaultPropertiesArgs) ToKafkaTokenKeyVaultPropertiesOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTokenKeyVaultPropertiesOutput)
}

func (i KafkaTokenKeyVaultPropertiesArgs) ToKafkaTokenKeyVaultPropertiesPtrOutput() KafkaTokenKeyVaultPropertiesPtrOutput {
	return i.ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i KafkaTokenKeyVaultPropertiesArgs) ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTokenKeyVaultPropertiesOutput).ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// KafkaTokenKeyVaultPropertiesPtrInput is an input type that accepts KafkaTokenKeyVaultPropertiesArgs, KafkaTokenKeyVaultPropertiesPtr and KafkaTokenKeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `KafkaTokenKeyVaultPropertiesPtrInput` via:
//
//	        KafkaTokenKeyVaultPropertiesArgs{...}
//
//	or:
//
//	        nil
type KafkaTokenKeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToKafkaTokenKeyVaultPropertiesPtrOutput() KafkaTokenKeyVaultPropertiesPtrOutput
	ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(context.Context) KafkaTokenKeyVaultPropertiesPtrOutput
}

type kafkaTokenKeyVaultPropertiesPtrType KafkaTokenKeyVaultPropertiesArgs

func KafkaTokenKeyVaultPropertiesPtr(v *KafkaTokenKeyVaultPropertiesArgs) KafkaTokenKeyVaultPropertiesPtrInput {
	return (*kafkaTokenKeyVaultPropertiesPtrType)(v)
}

func (*kafkaTokenKeyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTokenKeyVaultProperties)(nil)).Elem()
}

func (i *kafkaTokenKeyVaultPropertiesPtrType) ToKafkaTokenKeyVaultPropertiesPtrOutput() KafkaTokenKeyVaultPropertiesPtrOutput {
	return i.ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *kafkaTokenKeyVaultPropertiesPtrType) ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTokenKeyVaultPropertiesPtrOutput)
}

// Kafka Token KeyVault properties.
type KafkaTokenKeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (KafkaTokenKeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTokenKeyVaultProperties)(nil)).Elem()
}

func (o KafkaTokenKeyVaultPropertiesOutput) ToKafkaTokenKeyVaultPropertiesOutput() KafkaTokenKeyVaultPropertiesOutput {
	return o
}

func (o KafkaTokenKeyVaultPropertiesOutput) ToKafkaTokenKeyVaultPropertiesOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesOutput {
	return o
}

func (o KafkaTokenKeyVaultPropertiesOutput) ToKafkaTokenKeyVaultPropertiesPtrOutput() KafkaTokenKeyVaultPropertiesPtrOutput {
	return o.ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o KafkaTokenKeyVaultPropertiesOutput) ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTokenKeyVaultProperties) *KafkaTokenKeyVaultProperties {
		return &v
	}).(KafkaTokenKeyVaultPropertiesPtrOutput)
}

// Username to connect with.
func (o KafkaTokenKeyVaultPropertiesOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTokenKeyVaultProperties) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// KeyVault properties.
func (o KafkaTokenKeyVaultPropertiesOutput) Vault() KeyVaultConnectionPropertiesOutput {
	return o.ApplyT(func(v KafkaTokenKeyVaultProperties) KeyVaultConnectionProperties { return v.Vault }).(KeyVaultConnectionPropertiesOutput)
}

// KeyVault secret details.
func (o KafkaTokenKeyVaultPropertiesOutput) VaultSecret() KeyVaultSecretObjectOutput {
	return o.ApplyT(func(v KafkaTokenKeyVaultProperties) KeyVaultSecretObject { return v.VaultSecret }).(KeyVaultSecretObjectOutput)
}

type KafkaTokenKeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KafkaTokenKeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTokenKeyVaultProperties)(nil)).Elem()
}

func (o KafkaTokenKeyVaultPropertiesPtrOutput) ToKafkaTokenKeyVaultPropertiesPtrOutput() KafkaTokenKeyVaultPropertiesPtrOutput {
	return o
}

func (o KafkaTokenKeyVaultPropertiesPtrOutput) ToKafkaTokenKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesPtrOutput {
	return o
}

func (o KafkaTokenKeyVaultPropertiesPtrOutput) Elem() KafkaTokenKeyVaultPropertiesOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultProperties) KafkaTokenKeyVaultProperties {
		if v != nil {
			return *v
		}
		var ret KafkaTokenKeyVaultProperties
		return ret
	}).(KafkaTokenKeyVaultPropertiesOutput)
}

// Username to connect with.
func (o KafkaTokenKeyVaultPropertiesPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// KeyVault properties.
func (o KafkaTokenKeyVaultPropertiesPtrOutput) Vault() KeyVaultConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultProperties) *KeyVaultConnectionProperties {
		if v == nil {
			return nil
		}
		return &v.Vault
	}).(KeyVaultConnectionPropertiesPtrOutput)
}

// KeyVault secret details.
func (o KafkaTokenKeyVaultPropertiesPtrOutput) VaultSecret() KeyVaultSecretObjectPtrOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultProperties) *KeyVaultSecretObject {
		if v == nil {
			return nil
		}
		return &v.VaultSecret
	}).(KeyVaultSecretObjectPtrOutput)
}

// Kafka Token KeyVault properties.
type KafkaTokenKeyVaultPropertiesResponse struct {
	// Username to connect with.
	Username *string `pulumi:"username"`
	// KeyVault properties.
	Vault KeyVaultConnectionPropertiesResponse `pulumi:"vault"`
	// KeyVault secret details.
	VaultSecret KeyVaultSecretObjectResponse `pulumi:"vaultSecret"`
}

// Kafka Token KeyVault properties.
type KafkaTokenKeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KafkaTokenKeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTokenKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KafkaTokenKeyVaultPropertiesResponseOutput) ToKafkaTokenKeyVaultPropertiesResponseOutput() KafkaTokenKeyVaultPropertiesResponseOutput {
	return o
}

func (o KafkaTokenKeyVaultPropertiesResponseOutput) ToKafkaTokenKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesResponseOutput {
	return o
}

// Username to connect with.
func (o KafkaTokenKeyVaultPropertiesResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTokenKeyVaultPropertiesResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// KeyVault properties.
func (o KafkaTokenKeyVaultPropertiesResponseOutput) Vault() KeyVaultConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v KafkaTokenKeyVaultPropertiesResponse) KeyVaultConnectionPropertiesResponse { return v.Vault }).(KeyVaultConnectionPropertiesResponseOutput)
}

// KeyVault secret details.
func (o KafkaTokenKeyVaultPropertiesResponseOutput) VaultSecret() KeyVaultSecretObjectResponseOutput {
	return o.ApplyT(func(v KafkaTokenKeyVaultPropertiesResponse) KeyVaultSecretObjectResponse { return v.VaultSecret }).(KeyVaultSecretObjectResponseOutput)
}

type KafkaTokenKeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaTokenKeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTokenKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KafkaTokenKeyVaultPropertiesResponsePtrOutput) ToKafkaTokenKeyVaultPropertiesResponsePtrOutput() KafkaTokenKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KafkaTokenKeyVaultPropertiesResponsePtrOutput) ToKafkaTokenKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KafkaTokenKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KafkaTokenKeyVaultPropertiesResponsePtrOutput) Elem() KafkaTokenKeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultPropertiesResponse) KafkaTokenKeyVaultPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KafkaTokenKeyVaultPropertiesResponse
		return ret
	}).(KafkaTokenKeyVaultPropertiesResponseOutput)
}

// Username to connect with.
func (o KafkaTokenKeyVaultPropertiesResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// KeyVault properties.
func (o KafkaTokenKeyVaultPropertiesResponsePtrOutput) Vault() KeyVaultConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultPropertiesResponse) *KeyVaultConnectionPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Vault
	}).(KeyVaultConnectionPropertiesResponsePtrOutput)
}

// KeyVault secret details.
func (o KafkaTokenKeyVaultPropertiesResponsePtrOutput) VaultSecret() KeyVaultSecretObjectResponsePtrOutput {
	return o.ApplyT(func(v *KafkaTokenKeyVaultPropertiesResponse) *KeyVaultSecretObjectResponse {
		if v == nil {
			return nil
		}
		return &v.VaultSecret
	}).(KeyVaultSecretObjectResponsePtrOutput)
}

// Kafka TopicMap Batching properties
type KafkaTopicMapBatching struct {
	// The setting to enable or disable batching.
	Enabled *bool `pulumi:"enabled"`
	// The latency of message batching.
	LatencyMs *int `pulumi:"latencyMs"`
	// The maximum bytes to send in a batch.
	MaxBytes *float64 `pulumi:"maxBytes"`
	// The maximum messages to send in a batch.
	MaxMessages *float64 `pulumi:"maxMessages"`
}

// Defaults sets the appropriate defaults for KafkaTopicMapBatching
func (val *KafkaTopicMapBatching) Defaults() *KafkaTopicMapBatching {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := false
		tmp.Enabled = &enabled_
	}
	if tmp.LatencyMs == nil {
		latencyMs_ := 5
		tmp.LatencyMs = &latencyMs_
	}
	if tmp.MaxBytes == nil {
		maxBytes_ := 1000000.0
		tmp.MaxBytes = &maxBytes_
	}
	if tmp.MaxMessages == nil {
		maxMessages_ := 100000.0
		tmp.MaxMessages = &maxMessages_
	}
	return &tmp
}

// KafkaTopicMapBatchingInput is an input type that accepts KafkaTopicMapBatchingArgs and KafkaTopicMapBatchingOutput values.
// You can construct a concrete instance of `KafkaTopicMapBatchingInput` via:
//
//	KafkaTopicMapBatchingArgs{...}
type KafkaTopicMapBatchingInput interface {
	pulumi.Input

	ToKafkaTopicMapBatchingOutput() KafkaTopicMapBatchingOutput
	ToKafkaTopicMapBatchingOutputWithContext(context.Context) KafkaTopicMapBatchingOutput
}

// Kafka TopicMap Batching properties
type KafkaTopicMapBatchingArgs struct {
	// The setting to enable or disable batching.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The latency of message batching.
	LatencyMs pulumi.IntPtrInput `pulumi:"latencyMs"`
	// The maximum bytes to send in a batch.
	MaxBytes pulumi.Float64PtrInput `pulumi:"maxBytes"`
	// The maximum messages to send in a batch.
	MaxMessages pulumi.Float64PtrInput `pulumi:"maxMessages"`
}

// Defaults sets the appropriate defaults for KafkaTopicMapBatchingArgs
func (val *KafkaTopicMapBatchingArgs) Defaults() *KafkaTopicMapBatchingArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.BoolPtr(false)
	}
	if tmp.LatencyMs == nil {
		tmp.LatencyMs = pulumi.IntPtr(5)
	}
	if tmp.MaxBytes == nil {
		tmp.MaxBytes = pulumi.Float64Ptr(1000000.0)
	}
	if tmp.MaxMessages == nil {
		tmp.MaxMessages = pulumi.Float64Ptr(100000.0)
	}
	return &tmp
}
func (KafkaTopicMapBatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicMapBatching)(nil)).Elem()
}

func (i KafkaTopicMapBatchingArgs) ToKafkaTopicMapBatchingOutput() KafkaTopicMapBatchingOutput {
	return i.ToKafkaTopicMapBatchingOutputWithContext(context.Background())
}

func (i KafkaTopicMapBatchingArgs) ToKafkaTopicMapBatchingOutputWithContext(ctx context.Context) KafkaTopicMapBatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapBatchingOutput)
}

func (i KafkaTopicMapBatchingArgs) ToKafkaTopicMapBatchingPtrOutput() KafkaTopicMapBatchingPtrOutput {
	return i.ToKafkaTopicMapBatchingPtrOutputWithContext(context.Background())
}

func (i KafkaTopicMapBatchingArgs) ToKafkaTopicMapBatchingPtrOutputWithContext(ctx context.Context) KafkaTopicMapBatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapBatchingOutput).ToKafkaTopicMapBatchingPtrOutputWithContext(ctx)
}

// KafkaTopicMapBatchingPtrInput is an input type that accepts KafkaTopicMapBatchingArgs, KafkaTopicMapBatchingPtr and KafkaTopicMapBatchingPtrOutput values.
// You can construct a concrete instance of `KafkaTopicMapBatchingPtrInput` via:
//
//	        KafkaTopicMapBatchingArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicMapBatchingPtrInput interface {
	pulumi.Input

	ToKafkaTopicMapBatchingPtrOutput() KafkaTopicMapBatchingPtrOutput
	ToKafkaTopicMapBatchingPtrOutputWithContext(context.Context) KafkaTopicMapBatchingPtrOutput
}

type kafkaTopicMapBatchingPtrType KafkaTopicMapBatchingArgs

func KafkaTopicMapBatchingPtr(v *KafkaTopicMapBatchingArgs) KafkaTopicMapBatchingPtrInput {
	return (*kafkaTopicMapBatchingPtrType)(v)
}

func (*kafkaTopicMapBatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicMapBatching)(nil)).Elem()
}

func (i *kafkaTopicMapBatchingPtrType) ToKafkaTopicMapBatchingPtrOutput() KafkaTopicMapBatchingPtrOutput {
	return i.ToKafkaTopicMapBatchingPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicMapBatchingPtrType) ToKafkaTopicMapBatchingPtrOutputWithContext(ctx context.Context) KafkaTopicMapBatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapBatchingPtrOutput)
}

// Kafka TopicMap Batching properties
type KafkaTopicMapBatchingOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapBatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicMapBatching)(nil)).Elem()
}

func (o KafkaTopicMapBatchingOutput) ToKafkaTopicMapBatchingOutput() KafkaTopicMapBatchingOutput {
	return o
}

func (o KafkaTopicMapBatchingOutput) ToKafkaTopicMapBatchingOutputWithContext(ctx context.Context) KafkaTopicMapBatchingOutput {
	return o
}

func (o KafkaTopicMapBatchingOutput) ToKafkaTopicMapBatchingPtrOutput() KafkaTopicMapBatchingPtrOutput {
	return o.ToKafkaTopicMapBatchingPtrOutputWithContext(context.Background())
}

func (o KafkaTopicMapBatchingOutput) ToKafkaTopicMapBatchingPtrOutputWithContext(ctx context.Context) KafkaTopicMapBatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicMapBatching) *KafkaTopicMapBatching {
		return &v
	}).(KafkaTopicMapBatchingPtrOutput)
}

// The setting to enable or disable batching.
func (o KafkaTopicMapBatchingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatching) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The latency of message batching.
func (o KafkaTopicMapBatchingOutput) LatencyMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatching) *int { return v.LatencyMs }).(pulumi.IntPtrOutput)
}

// The maximum bytes to send in a batch.
func (o KafkaTopicMapBatchingOutput) MaxBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatching) *float64 { return v.MaxBytes }).(pulumi.Float64PtrOutput)
}

// The maximum messages to send in a batch.
func (o KafkaTopicMapBatchingOutput) MaxMessages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatching) *float64 { return v.MaxMessages }).(pulumi.Float64PtrOutput)
}

type KafkaTopicMapBatchingPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapBatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicMapBatching)(nil)).Elem()
}

func (o KafkaTopicMapBatchingPtrOutput) ToKafkaTopicMapBatchingPtrOutput() KafkaTopicMapBatchingPtrOutput {
	return o
}

func (o KafkaTopicMapBatchingPtrOutput) ToKafkaTopicMapBatchingPtrOutputWithContext(ctx context.Context) KafkaTopicMapBatchingPtrOutput {
	return o
}

func (o KafkaTopicMapBatchingPtrOutput) Elem() KafkaTopicMapBatchingOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatching) KafkaTopicMapBatching {
		if v != nil {
			return *v
		}
		var ret KafkaTopicMapBatching
		return ret
	}).(KafkaTopicMapBatchingOutput)
}

// The setting to enable or disable batching.
func (o KafkaTopicMapBatchingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatching) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The latency of message batching.
func (o KafkaTopicMapBatchingPtrOutput) LatencyMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatching) *int {
		if v == nil {
			return nil
		}
		return v.LatencyMs
	}).(pulumi.IntPtrOutput)
}

// The maximum bytes to send in a batch.
func (o KafkaTopicMapBatchingPtrOutput) MaxBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatching) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBytes
	}).(pulumi.Float64PtrOutput)
}

// The maximum messages to send in a batch.
func (o KafkaTopicMapBatchingPtrOutput) MaxMessages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatching) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxMessages
	}).(pulumi.Float64PtrOutput)
}

// Kafka TopicMap Batching properties
type KafkaTopicMapBatchingResponse struct {
	// The setting to enable or disable batching.
	Enabled *bool `pulumi:"enabled"`
	// The latency of message batching.
	LatencyMs *int `pulumi:"latencyMs"`
	// The maximum bytes to send in a batch.
	MaxBytes *float64 `pulumi:"maxBytes"`
	// The maximum messages to send in a batch.
	MaxMessages *float64 `pulumi:"maxMessages"`
}

// Defaults sets the appropriate defaults for KafkaTopicMapBatchingResponse
func (val *KafkaTopicMapBatchingResponse) Defaults() *KafkaTopicMapBatchingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := false
		tmp.Enabled = &enabled_
	}
	if tmp.LatencyMs == nil {
		latencyMs_ := 5
		tmp.LatencyMs = &latencyMs_
	}
	if tmp.MaxBytes == nil {
		maxBytes_ := 1000000.0
		tmp.MaxBytes = &maxBytes_
	}
	if tmp.MaxMessages == nil {
		maxMessages_ := 100000.0
		tmp.MaxMessages = &maxMessages_
	}
	return &tmp
}

// Kafka TopicMap Batching properties
type KafkaTopicMapBatchingResponseOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapBatchingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicMapBatchingResponse)(nil)).Elem()
}

func (o KafkaTopicMapBatchingResponseOutput) ToKafkaTopicMapBatchingResponseOutput() KafkaTopicMapBatchingResponseOutput {
	return o
}

func (o KafkaTopicMapBatchingResponseOutput) ToKafkaTopicMapBatchingResponseOutputWithContext(ctx context.Context) KafkaTopicMapBatchingResponseOutput {
	return o
}

// The setting to enable or disable batching.
func (o KafkaTopicMapBatchingResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatchingResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The latency of message batching.
func (o KafkaTopicMapBatchingResponseOutput) LatencyMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatchingResponse) *int { return v.LatencyMs }).(pulumi.IntPtrOutput)
}

// The maximum bytes to send in a batch.
func (o KafkaTopicMapBatchingResponseOutput) MaxBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatchingResponse) *float64 { return v.MaxBytes }).(pulumi.Float64PtrOutput)
}

// The maximum messages to send in a batch.
func (o KafkaTopicMapBatchingResponseOutput) MaxMessages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaTopicMapBatchingResponse) *float64 { return v.MaxMessages }).(pulumi.Float64PtrOutput)
}

type KafkaTopicMapBatchingResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapBatchingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicMapBatchingResponse)(nil)).Elem()
}

func (o KafkaTopicMapBatchingResponsePtrOutput) ToKafkaTopicMapBatchingResponsePtrOutput() KafkaTopicMapBatchingResponsePtrOutput {
	return o
}

func (o KafkaTopicMapBatchingResponsePtrOutput) ToKafkaTopicMapBatchingResponsePtrOutputWithContext(ctx context.Context) KafkaTopicMapBatchingResponsePtrOutput {
	return o
}

func (o KafkaTopicMapBatchingResponsePtrOutput) Elem() KafkaTopicMapBatchingResponseOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatchingResponse) KafkaTopicMapBatchingResponse {
		if v != nil {
			return *v
		}
		var ret KafkaTopicMapBatchingResponse
		return ret
	}).(KafkaTopicMapBatchingResponseOutput)
}

// The setting to enable or disable batching.
func (o KafkaTopicMapBatchingResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatchingResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The latency of message batching.
func (o KafkaTopicMapBatchingResponsePtrOutput) LatencyMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatchingResponse) *int {
		if v == nil {
			return nil
		}
		return v.LatencyMs
	}).(pulumi.IntPtrOutput)
}

// The maximum bytes to send in a batch.
func (o KafkaTopicMapBatchingResponsePtrOutput) MaxBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatchingResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBytes
	}).(pulumi.Float64PtrOutput)
}

// The maximum messages to send in a batch.
func (o KafkaTopicMapBatchingResponsePtrOutput) MaxMessages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaTopicMapBatchingResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxMessages
	}).(pulumi.Float64PtrOutput)
}

// Kafka RemoteBrokerConnection X509 Authentication properties.
type KafkaX509Authentication struct {
	// Keyvault X509 secret properties.
	KeyVault *KeyVaultCertificateProperties `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// KafkaX509AuthenticationInput is an input type that accepts KafkaX509AuthenticationArgs and KafkaX509AuthenticationOutput values.
// You can construct a concrete instance of `KafkaX509AuthenticationInput` via:
//
//	KafkaX509AuthenticationArgs{...}
type KafkaX509AuthenticationInput interface {
	pulumi.Input

	ToKafkaX509AuthenticationOutput() KafkaX509AuthenticationOutput
	ToKafkaX509AuthenticationOutputWithContext(context.Context) KafkaX509AuthenticationOutput
}

// Kafka RemoteBrokerConnection X509 Authentication properties.
type KafkaX509AuthenticationArgs struct {
	// Keyvault X509 secret properties.
	KeyVault KeyVaultCertificatePropertiesPtrInput `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (KafkaX509AuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaX509Authentication)(nil)).Elem()
}

func (i KafkaX509AuthenticationArgs) ToKafkaX509AuthenticationOutput() KafkaX509AuthenticationOutput {
	return i.ToKafkaX509AuthenticationOutputWithContext(context.Background())
}

func (i KafkaX509AuthenticationArgs) ToKafkaX509AuthenticationOutputWithContext(ctx context.Context) KafkaX509AuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaX509AuthenticationOutput)
}

func (i KafkaX509AuthenticationArgs) ToKafkaX509AuthenticationPtrOutput() KafkaX509AuthenticationPtrOutput {
	return i.ToKafkaX509AuthenticationPtrOutputWithContext(context.Background())
}

func (i KafkaX509AuthenticationArgs) ToKafkaX509AuthenticationPtrOutputWithContext(ctx context.Context) KafkaX509AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaX509AuthenticationOutput).ToKafkaX509AuthenticationPtrOutputWithContext(ctx)
}

// KafkaX509AuthenticationPtrInput is an input type that accepts KafkaX509AuthenticationArgs, KafkaX509AuthenticationPtr and KafkaX509AuthenticationPtrOutput values.
// You can construct a concrete instance of `KafkaX509AuthenticationPtrInput` via:
//
//	        KafkaX509AuthenticationArgs{...}
//
//	or:
//
//	        nil
type KafkaX509AuthenticationPtrInput interface {
	pulumi.Input

	ToKafkaX509AuthenticationPtrOutput() KafkaX509AuthenticationPtrOutput
	ToKafkaX509AuthenticationPtrOutputWithContext(context.Context) KafkaX509AuthenticationPtrOutput
}

type kafkaX509AuthenticationPtrType KafkaX509AuthenticationArgs

func KafkaX509AuthenticationPtr(v *KafkaX509AuthenticationArgs) KafkaX509AuthenticationPtrInput {
	return (*kafkaX509AuthenticationPtrType)(v)
}

func (*kafkaX509AuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaX509Authentication)(nil)).Elem()
}

func (i *kafkaX509AuthenticationPtrType) ToKafkaX509AuthenticationPtrOutput() KafkaX509AuthenticationPtrOutput {
	return i.ToKafkaX509AuthenticationPtrOutputWithContext(context.Background())
}

func (i *kafkaX509AuthenticationPtrType) ToKafkaX509AuthenticationPtrOutputWithContext(ctx context.Context) KafkaX509AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaX509AuthenticationPtrOutput)
}

// Kafka RemoteBrokerConnection X509 Authentication properties.
type KafkaX509AuthenticationOutput struct{ *pulumi.OutputState }

func (KafkaX509AuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaX509Authentication)(nil)).Elem()
}

func (o KafkaX509AuthenticationOutput) ToKafkaX509AuthenticationOutput() KafkaX509AuthenticationOutput {
	return o
}

func (o KafkaX509AuthenticationOutput) ToKafkaX509AuthenticationOutputWithContext(ctx context.Context) KafkaX509AuthenticationOutput {
	return o
}

func (o KafkaX509AuthenticationOutput) ToKafkaX509AuthenticationPtrOutput() KafkaX509AuthenticationPtrOutput {
	return o.ToKafkaX509AuthenticationPtrOutputWithContext(context.Background())
}

func (o KafkaX509AuthenticationOutput) ToKafkaX509AuthenticationPtrOutputWithContext(ctx context.Context) KafkaX509AuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaX509Authentication) *KafkaX509Authentication {
		return &v
	}).(KafkaX509AuthenticationPtrOutput)
}

// Keyvault X509 secret properties.
func (o KafkaX509AuthenticationOutput) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v KafkaX509Authentication) *KeyVaultCertificateProperties { return v.KeyVault }).(KeyVaultCertificatePropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o KafkaX509AuthenticationOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaX509Authentication) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type KafkaX509AuthenticationPtrOutput struct{ *pulumi.OutputState }

func (KafkaX509AuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaX509Authentication)(nil)).Elem()
}

func (o KafkaX509AuthenticationPtrOutput) ToKafkaX509AuthenticationPtrOutput() KafkaX509AuthenticationPtrOutput {
	return o
}

func (o KafkaX509AuthenticationPtrOutput) ToKafkaX509AuthenticationPtrOutputWithContext(ctx context.Context) KafkaX509AuthenticationPtrOutput {
	return o
}

func (o KafkaX509AuthenticationPtrOutput) Elem() KafkaX509AuthenticationOutput {
	return o.ApplyT(func(v *KafkaX509Authentication) KafkaX509Authentication {
		if v != nil {
			return *v
		}
		var ret KafkaX509Authentication
		return ret
	}).(KafkaX509AuthenticationOutput)
}

// Keyvault X509 secret properties.
func (o KafkaX509AuthenticationPtrOutput) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v *KafkaX509Authentication) *KeyVaultCertificateProperties {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o KafkaX509AuthenticationPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaX509Authentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Kafka RemoteBrokerConnection X509 Authentication properties.
type KafkaX509AuthenticationResponse struct {
	// Keyvault X509 secret properties.
	KeyVault *KeyVaultCertificatePropertiesResponse `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// Kafka RemoteBrokerConnection X509 Authentication properties.
type KafkaX509AuthenticationResponseOutput struct{ *pulumi.OutputState }

func (KafkaX509AuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaX509AuthenticationResponse)(nil)).Elem()
}

func (o KafkaX509AuthenticationResponseOutput) ToKafkaX509AuthenticationResponseOutput() KafkaX509AuthenticationResponseOutput {
	return o
}

func (o KafkaX509AuthenticationResponseOutput) ToKafkaX509AuthenticationResponseOutputWithContext(ctx context.Context) KafkaX509AuthenticationResponseOutput {
	return o
}

// Keyvault X509 secret properties.
func (o KafkaX509AuthenticationResponseOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v KafkaX509AuthenticationResponse) *KeyVaultCertificatePropertiesResponse { return v.KeyVault }).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o KafkaX509AuthenticationResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaX509AuthenticationResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type KafkaX509AuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaX509AuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaX509AuthenticationResponse)(nil)).Elem()
}

func (o KafkaX509AuthenticationResponsePtrOutput) ToKafkaX509AuthenticationResponsePtrOutput() KafkaX509AuthenticationResponsePtrOutput {
	return o
}

func (o KafkaX509AuthenticationResponsePtrOutput) ToKafkaX509AuthenticationResponsePtrOutputWithContext(ctx context.Context) KafkaX509AuthenticationResponsePtrOutput {
	return o
}

func (o KafkaX509AuthenticationResponsePtrOutput) Elem() KafkaX509AuthenticationResponseOutput {
	return o.ApplyT(func(v *KafkaX509AuthenticationResponse) KafkaX509AuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret KafkaX509AuthenticationResponse
		return ret
	}).(KafkaX509AuthenticationResponseOutput)
}

// Keyvault X509 secret properties.
func (o KafkaX509AuthenticationResponsePtrOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *KafkaX509AuthenticationResponse) *KeyVaultCertificatePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o KafkaX509AuthenticationResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaX509AuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// KeyVault certificate properties
type KeyVaultCertificateProperties struct {
	// KeyVault properties.
	Vault KeyVaultConnectionProperties `pulumi:"vault"`
	// KeyVault CA chain secret details.
	VaultCaChainSecret *KeyVaultSecretObject `pulumi:"vaultCaChainSecret"`
	// KeyVault Cert secret details.
	VaultCert KeyVaultSecretObject `pulumi:"vaultCert"`
}

// KeyVaultCertificatePropertiesInput is an input type that accepts KeyVaultCertificatePropertiesArgs and KeyVaultCertificatePropertiesOutput values.
// You can construct a concrete instance of `KeyVaultCertificatePropertiesInput` via:
//
//	KeyVaultCertificatePropertiesArgs{...}
type KeyVaultCertificatePropertiesInput interface {
	pulumi.Input

	ToKeyVaultCertificatePropertiesOutput() KeyVaultCertificatePropertiesOutput
	ToKeyVaultCertificatePropertiesOutputWithContext(context.Context) KeyVaultCertificatePropertiesOutput
}

// KeyVault certificate properties
type KeyVaultCertificatePropertiesArgs struct {
	// KeyVault properties.
	Vault KeyVaultConnectionPropertiesInput `pulumi:"vault"`
	// KeyVault CA chain secret details.
	VaultCaChainSecret KeyVaultSecretObjectPtrInput `pulumi:"vaultCaChainSecret"`
	// KeyVault Cert secret details.
	VaultCert KeyVaultSecretObjectInput `pulumi:"vaultCert"`
}

func (KeyVaultCertificatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateProperties)(nil)).Elem()
}

func (i KeyVaultCertificatePropertiesArgs) ToKeyVaultCertificatePropertiesOutput() KeyVaultCertificatePropertiesOutput {
	return i.ToKeyVaultCertificatePropertiesOutputWithContext(context.Background())
}

func (i KeyVaultCertificatePropertiesArgs) ToKeyVaultCertificatePropertiesOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificatePropertiesOutput)
}

func (i KeyVaultCertificatePropertiesArgs) ToKeyVaultCertificatePropertiesPtrOutput() KeyVaultCertificatePropertiesPtrOutput {
	return i.ToKeyVaultCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultCertificatePropertiesArgs) ToKeyVaultCertificatePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificatePropertiesOutput).ToKeyVaultCertificatePropertiesPtrOutputWithContext(ctx)
}

// KeyVaultCertificatePropertiesPtrInput is an input type that accepts KeyVaultCertificatePropertiesArgs, KeyVaultCertificatePropertiesPtr and KeyVaultCertificatePropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultCertificatePropertiesPtrInput` via:
//
//	        KeyVaultCertificatePropertiesArgs{...}
//
//	or:
//
//	        nil
type KeyVaultCertificatePropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultCertificatePropertiesPtrOutput() KeyVaultCertificatePropertiesPtrOutput
	ToKeyVaultCertificatePropertiesPtrOutputWithContext(context.Context) KeyVaultCertificatePropertiesPtrOutput
}

type keyVaultCertificatePropertiesPtrType KeyVaultCertificatePropertiesArgs

func KeyVaultCertificatePropertiesPtr(v *KeyVaultCertificatePropertiesArgs) KeyVaultCertificatePropertiesPtrInput {
	return (*keyVaultCertificatePropertiesPtrType)(v)
}

func (*keyVaultCertificatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateProperties)(nil)).Elem()
}

func (i *keyVaultCertificatePropertiesPtrType) ToKeyVaultCertificatePropertiesPtrOutput() KeyVaultCertificatePropertiesPtrOutput {
	return i.ToKeyVaultCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultCertificatePropertiesPtrType) ToKeyVaultCertificatePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificatePropertiesPtrOutput)
}

// KeyVault certificate properties
type KeyVaultCertificatePropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateProperties)(nil)).Elem()
}

func (o KeyVaultCertificatePropertiesOutput) ToKeyVaultCertificatePropertiesOutput() KeyVaultCertificatePropertiesOutput {
	return o
}

func (o KeyVaultCertificatePropertiesOutput) ToKeyVaultCertificatePropertiesOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesOutput {
	return o
}

func (o KeyVaultCertificatePropertiesOutput) ToKeyVaultCertificatePropertiesPtrOutput() KeyVaultCertificatePropertiesPtrOutput {
	return o.ToKeyVaultCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultCertificatePropertiesOutput) ToKeyVaultCertificatePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultCertificateProperties) *KeyVaultCertificateProperties {
		return &v
	}).(KeyVaultCertificatePropertiesPtrOutput)
}

// KeyVault properties.
func (o KeyVaultCertificatePropertiesOutput) Vault() KeyVaultConnectionPropertiesOutput {
	return o.ApplyT(func(v KeyVaultCertificateProperties) KeyVaultConnectionProperties { return v.Vault }).(KeyVaultConnectionPropertiesOutput)
}

// KeyVault CA chain secret details.
func (o KeyVaultCertificatePropertiesOutput) VaultCaChainSecret() KeyVaultSecretObjectPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateProperties) *KeyVaultSecretObject { return v.VaultCaChainSecret }).(KeyVaultSecretObjectPtrOutput)
}

// KeyVault Cert secret details.
func (o KeyVaultCertificatePropertiesOutput) VaultCert() KeyVaultSecretObjectOutput {
	return o.ApplyT(func(v KeyVaultCertificateProperties) KeyVaultSecretObject { return v.VaultCert }).(KeyVaultSecretObjectOutput)
}

type KeyVaultCertificatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateProperties)(nil)).Elem()
}

func (o KeyVaultCertificatePropertiesPtrOutput) ToKeyVaultCertificatePropertiesPtrOutput() KeyVaultCertificatePropertiesPtrOutput {
	return o
}

func (o KeyVaultCertificatePropertiesPtrOutput) ToKeyVaultCertificatePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesPtrOutput {
	return o
}

func (o KeyVaultCertificatePropertiesPtrOutput) Elem() KeyVaultCertificatePropertiesOutput {
	return o.ApplyT(func(v *KeyVaultCertificateProperties) KeyVaultCertificateProperties {
		if v != nil {
			return *v
		}
		var ret KeyVaultCertificateProperties
		return ret
	}).(KeyVaultCertificatePropertiesOutput)
}

// KeyVault properties.
func (o KeyVaultCertificatePropertiesPtrOutput) Vault() KeyVaultConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateProperties) *KeyVaultConnectionProperties {
		if v == nil {
			return nil
		}
		return &v.Vault
	}).(KeyVaultConnectionPropertiesPtrOutput)
}

// KeyVault CA chain secret details.
func (o KeyVaultCertificatePropertiesPtrOutput) VaultCaChainSecret() KeyVaultSecretObjectPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateProperties) *KeyVaultSecretObject {
		if v == nil {
			return nil
		}
		return v.VaultCaChainSecret
	}).(KeyVaultSecretObjectPtrOutput)
}

// KeyVault Cert secret details.
func (o KeyVaultCertificatePropertiesPtrOutput) VaultCert() KeyVaultSecretObjectPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateProperties) *KeyVaultSecretObject {
		if v == nil {
			return nil
		}
		return &v.VaultCert
	}).(KeyVaultSecretObjectPtrOutput)
}

// KeyVault certificate properties
type KeyVaultCertificatePropertiesResponse struct {
	// KeyVault properties.
	Vault KeyVaultConnectionPropertiesResponse `pulumi:"vault"`
	// KeyVault CA chain secret details.
	VaultCaChainSecret *KeyVaultSecretObjectResponse `pulumi:"vaultCaChainSecret"`
	// KeyVault Cert secret details.
	VaultCert KeyVaultSecretObjectResponse `pulumi:"vaultCert"`
}

// KeyVault certificate properties
type KeyVaultCertificatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificatePropertiesResponse)(nil)).Elem()
}

func (o KeyVaultCertificatePropertiesResponseOutput) ToKeyVaultCertificatePropertiesResponseOutput() KeyVaultCertificatePropertiesResponseOutput {
	return o
}

func (o KeyVaultCertificatePropertiesResponseOutput) ToKeyVaultCertificatePropertiesResponseOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesResponseOutput {
	return o
}

// KeyVault properties.
func (o KeyVaultCertificatePropertiesResponseOutput) Vault() KeyVaultConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v KeyVaultCertificatePropertiesResponse) KeyVaultConnectionPropertiesResponse { return v.Vault }).(KeyVaultConnectionPropertiesResponseOutput)
}

// KeyVault CA chain secret details.
func (o KeyVaultCertificatePropertiesResponseOutput) VaultCaChainSecret() KeyVaultSecretObjectResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultCertificatePropertiesResponse) *KeyVaultSecretObjectResponse {
		return v.VaultCaChainSecret
	}).(KeyVaultSecretObjectResponsePtrOutput)
}

// KeyVault Cert secret details.
func (o KeyVaultCertificatePropertiesResponseOutput) VaultCert() KeyVaultSecretObjectResponseOutput {
	return o.ApplyT(func(v KeyVaultCertificatePropertiesResponse) KeyVaultSecretObjectResponse { return v.VaultCert }).(KeyVaultSecretObjectResponseOutput)
}

type KeyVaultCertificatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificatePropertiesResponse)(nil)).Elem()
}

func (o KeyVaultCertificatePropertiesResponsePtrOutput) ToKeyVaultCertificatePropertiesResponsePtrOutput() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultCertificatePropertiesResponsePtrOutput) ToKeyVaultCertificatePropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultCertificatePropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultCertificatePropertiesResponsePtrOutput) Elem() KeyVaultCertificatePropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultCertificatePropertiesResponse) KeyVaultCertificatePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultCertificatePropertiesResponse
		return ret
	}).(KeyVaultCertificatePropertiesResponseOutput)
}

// KeyVault properties.
func (o KeyVaultCertificatePropertiesResponsePtrOutput) Vault() KeyVaultConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificatePropertiesResponse) *KeyVaultConnectionPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Vault
	}).(KeyVaultConnectionPropertiesResponsePtrOutput)
}

// KeyVault CA chain secret details.
func (o KeyVaultCertificatePropertiesResponsePtrOutput) VaultCaChainSecret() KeyVaultSecretObjectResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificatePropertiesResponse) *KeyVaultSecretObjectResponse {
		if v == nil {
			return nil
		}
		return v.VaultCaChainSecret
	}).(KeyVaultSecretObjectResponsePtrOutput)
}

// KeyVault Cert secret details.
func (o KeyVaultCertificatePropertiesResponsePtrOutput) VaultCert() KeyVaultSecretObjectResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificatePropertiesResponse) *KeyVaultSecretObjectResponse {
		if v == nil {
			return nil
		}
		return &v.VaultCert
	}).(KeyVaultSecretObjectResponsePtrOutput)
}

// KeyVault properties
type KeyVaultConnectionProperties struct {
	// KeyVault credentials.
	Credentials KeyVaultCredentialsProperties `pulumi:"credentials"`
	// KeyVault directoryId.
	DirectoryId string `pulumi:"directoryId"`
	// KeyVault name.
	Name string `pulumi:"name"`
}

// KeyVaultConnectionPropertiesInput is an input type that accepts KeyVaultConnectionPropertiesArgs and KeyVaultConnectionPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultConnectionPropertiesInput` via:
//
//	KeyVaultConnectionPropertiesArgs{...}
type KeyVaultConnectionPropertiesInput interface {
	pulumi.Input

	ToKeyVaultConnectionPropertiesOutput() KeyVaultConnectionPropertiesOutput
	ToKeyVaultConnectionPropertiesOutputWithContext(context.Context) KeyVaultConnectionPropertiesOutput
}

// KeyVault properties
type KeyVaultConnectionPropertiesArgs struct {
	// KeyVault credentials.
	Credentials KeyVaultCredentialsPropertiesInput `pulumi:"credentials"`
	// KeyVault directoryId.
	DirectoryId pulumi.StringInput `pulumi:"directoryId"`
	// KeyVault name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (KeyVaultConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultConnectionProperties)(nil)).Elem()
}

func (i KeyVaultConnectionPropertiesArgs) ToKeyVaultConnectionPropertiesOutput() KeyVaultConnectionPropertiesOutput {
	return i.ToKeyVaultConnectionPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultConnectionPropertiesArgs) ToKeyVaultConnectionPropertiesOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultConnectionPropertiesOutput)
}

func (i KeyVaultConnectionPropertiesArgs) ToKeyVaultConnectionPropertiesPtrOutput() KeyVaultConnectionPropertiesPtrOutput {
	return i.ToKeyVaultConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultConnectionPropertiesArgs) ToKeyVaultConnectionPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultConnectionPropertiesOutput).ToKeyVaultConnectionPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultConnectionPropertiesPtrInput is an input type that accepts KeyVaultConnectionPropertiesArgs, KeyVaultConnectionPropertiesPtr and KeyVaultConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultConnectionPropertiesPtrInput` via:
//
//	        KeyVaultConnectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type KeyVaultConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultConnectionPropertiesPtrOutput() KeyVaultConnectionPropertiesPtrOutput
	ToKeyVaultConnectionPropertiesPtrOutputWithContext(context.Context) KeyVaultConnectionPropertiesPtrOutput
}

type keyVaultConnectionPropertiesPtrType KeyVaultConnectionPropertiesArgs

func KeyVaultConnectionPropertiesPtr(v *KeyVaultConnectionPropertiesArgs) KeyVaultConnectionPropertiesPtrInput {
	return (*keyVaultConnectionPropertiesPtrType)(v)
}

func (*keyVaultConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultConnectionProperties)(nil)).Elem()
}

func (i *keyVaultConnectionPropertiesPtrType) ToKeyVaultConnectionPropertiesPtrOutput() KeyVaultConnectionPropertiesPtrOutput {
	return i.ToKeyVaultConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultConnectionPropertiesPtrType) ToKeyVaultConnectionPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultConnectionPropertiesPtrOutput)
}

// KeyVault properties
type KeyVaultConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultConnectionProperties)(nil)).Elem()
}

func (o KeyVaultConnectionPropertiesOutput) ToKeyVaultConnectionPropertiesOutput() KeyVaultConnectionPropertiesOutput {
	return o
}

func (o KeyVaultConnectionPropertiesOutput) ToKeyVaultConnectionPropertiesOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesOutput {
	return o
}

func (o KeyVaultConnectionPropertiesOutput) ToKeyVaultConnectionPropertiesPtrOutput() KeyVaultConnectionPropertiesPtrOutput {
	return o.ToKeyVaultConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultConnectionPropertiesOutput) ToKeyVaultConnectionPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultConnectionProperties) *KeyVaultConnectionProperties {
		return &v
	}).(KeyVaultConnectionPropertiesPtrOutput)
}

// KeyVault credentials.
func (o KeyVaultConnectionPropertiesOutput) Credentials() KeyVaultCredentialsPropertiesOutput {
	return o.ApplyT(func(v KeyVaultConnectionProperties) KeyVaultCredentialsProperties { return v.Credentials }).(KeyVaultCredentialsPropertiesOutput)
}

// KeyVault directoryId.
func (o KeyVaultConnectionPropertiesOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultConnectionProperties) string { return v.DirectoryId }).(pulumi.StringOutput)
}

// KeyVault name.
func (o KeyVaultConnectionPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultConnectionProperties) string { return v.Name }).(pulumi.StringOutput)
}

type KeyVaultConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultConnectionProperties)(nil)).Elem()
}

func (o KeyVaultConnectionPropertiesPtrOutput) ToKeyVaultConnectionPropertiesPtrOutput() KeyVaultConnectionPropertiesPtrOutput {
	return o
}

func (o KeyVaultConnectionPropertiesPtrOutput) ToKeyVaultConnectionPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesPtrOutput {
	return o
}

func (o KeyVaultConnectionPropertiesPtrOutput) Elem() KeyVaultConnectionPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultConnectionProperties) KeyVaultConnectionProperties {
		if v != nil {
			return *v
		}
		var ret KeyVaultConnectionProperties
		return ret
	}).(KeyVaultConnectionPropertiesOutput)
}

// KeyVault credentials.
func (o KeyVaultConnectionPropertiesPtrOutput) Credentials() KeyVaultCredentialsPropertiesPtrOutput {
	return o.ApplyT(func(v *KeyVaultConnectionProperties) *KeyVaultCredentialsProperties {
		if v == nil {
			return nil
		}
		return &v.Credentials
	}).(KeyVaultCredentialsPropertiesPtrOutput)
}

// KeyVault directoryId.
func (o KeyVaultConnectionPropertiesPtrOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DirectoryId
	}).(pulumi.StringPtrOutput)
}

// KeyVault name.
func (o KeyVaultConnectionPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// KeyVault properties
type KeyVaultConnectionPropertiesResponse struct {
	// KeyVault credentials.
	Credentials KeyVaultCredentialsPropertiesResponse `pulumi:"credentials"`
	// KeyVault directoryId.
	DirectoryId string `pulumi:"directoryId"`
	// KeyVault name.
	Name string `pulumi:"name"`
}

// KeyVault properties
type KeyVaultConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultConnectionPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultConnectionPropertiesResponseOutput) ToKeyVaultConnectionPropertiesResponseOutput() KeyVaultConnectionPropertiesResponseOutput {
	return o
}

func (o KeyVaultConnectionPropertiesResponseOutput) ToKeyVaultConnectionPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesResponseOutput {
	return o
}

// KeyVault credentials.
func (o KeyVaultConnectionPropertiesResponseOutput) Credentials() KeyVaultCredentialsPropertiesResponseOutput {
	return o.ApplyT(func(v KeyVaultConnectionPropertiesResponse) KeyVaultCredentialsPropertiesResponse {
		return v.Credentials
	}).(KeyVaultCredentialsPropertiesResponseOutput)
}

// KeyVault directoryId.
func (o KeyVaultConnectionPropertiesResponseOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultConnectionPropertiesResponse) string { return v.DirectoryId }).(pulumi.StringOutput)
}

// KeyVault name.
func (o KeyVaultConnectionPropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultConnectionPropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

type KeyVaultConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultConnectionPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultConnectionPropertiesResponsePtrOutput) ToKeyVaultConnectionPropertiesResponsePtrOutput() KeyVaultConnectionPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultConnectionPropertiesResponsePtrOutput) ToKeyVaultConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultConnectionPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultConnectionPropertiesResponsePtrOutput) Elem() KeyVaultConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultConnectionPropertiesResponse) KeyVaultConnectionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultConnectionPropertiesResponse
		return ret
	}).(KeyVaultConnectionPropertiesResponseOutput)
}

// KeyVault credentials.
func (o KeyVaultConnectionPropertiesResponsePtrOutput) Credentials() KeyVaultCredentialsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultConnectionPropertiesResponse) *KeyVaultCredentialsPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Credentials
	}).(KeyVaultCredentialsPropertiesResponsePtrOutput)
}

// KeyVault directoryId.
func (o KeyVaultConnectionPropertiesResponsePtrOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DirectoryId
	}).(pulumi.StringPtrOutput)
}

// KeyVault name.
func (o KeyVaultConnectionPropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// KeyVault credentials properties. NOTE - Future this will be ENUM.
type KeyVaultCredentialsProperties struct {
	// KeyVault service principal local secret name.
	ServicePrincipalLocalSecretName string `pulumi:"servicePrincipalLocalSecretName"`
}

// KeyVaultCredentialsPropertiesInput is an input type that accepts KeyVaultCredentialsPropertiesArgs and KeyVaultCredentialsPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultCredentialsPropertiesInput` via:
//
//	KeyVaultCredentialsPropertiesArgs{...}
type KeyVaultCredentialsPropertiesInput interface {
	pulumi.Input

	ToKeyVaultCredentialsPropertiesOutput() KeyVaultCredentialsPropertiesOutput
	ToKeyVaultCredentialsPropertiesOutputWithContext(context.Context) KeyVaultCredentialsPropertiesOutput
}

// KeyVault credentials properties. NOTE - Future this will be ENUM.
type KeyVaultCredentialsPropertiesArgs struct {
	// KeyVault service principal local secret name.
	ServicePrincipalLocalSecretName pulumi.StringInput `pulumi:"servicePrincipalLocalSecretName"`
}

func (KeyVaultCredentialsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCredentialsProperties)(nil)).Elem()
}

func (i KeyVaultCredentialsPropertiesArgs) ToKeyVaultCredentialsPropertiesOutput() KeyVaultCredentialsPropertiesOutput {
	return i.ToKeyVaultCredentialsPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultCredentialsPropertiesArgs) ToKeyVaultCredentialsPropertiesOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCredentialsPropertiesOutput)
}

func (i KeyVaultCredentialsPropertiesArgs) ToKeyVaultCredentialsPropertiesPtrOutput() KeyVaultCredentialsPropertiesPtrOutput {
	return i.ToKeyVaultCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultCredentialsPropertiesArgs) ToKeyVaultCredentialsPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCredentialsPropertiesOutput).ToKeyVaultCredentialsPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultCredentialsPropertiesPtrInput is an input type that accepts KeyVaultCredentialsPropertiesArgs, KeyVaultCredentialsPropertiesPtr and KeyVaultCredentialsPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultCredentialsPropertiesPtrInput` via:
//
//	        KeyVaultCredentialsPropertiesArgs{...}
//
//	or:
//
//	        nil
type KeyVaultCredentialsPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultCredentialsPropertiesPtrOutput() KeyVaultCredentialsPropertiesPtrOutput
	ToKeyVaultCredentialsPropertiesPtrOutputWithContext(context.Context) KeyVaultCredentialsPropertiesPtrOutput
}

type keyVaultCredentialsPropertiesPtrType KeyVaultCredentialsPropertiesArgs

func KeyVaultCredentialsPropertiesPtr(v *KeyVaultCredentialsPropertiesArgs) KeyVaultCredentialsPropertiesPtrInput {
	return (*keyVaultCredentialsPropertiesPtrType)(v)
}

func (*keyVaultCredentialsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCredentialsProperties)(nil)).Elem()
}

func (i *keyVaultCredentialsPropertiesPtrType) ToKeyVaultCredentialsPropertiesPtrOutput() KeyVaultCredentialsPropertiesPtrOutput {
	return i.ToKeyVaultCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultCredentialsPropertiesPtrType) ToKeyVaultCredentialsPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCredentialsPropertiesPtrOutput)
}

// KeyVault credentials properties. NOTE - Future this will be ENUM.
type KeyVaultCredentialsPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultCredentialsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCredentialsProperties)(nil)).Elem()
}

func (o KeyVaultCredentialsPropertiesOutput) ToKeyVaultCredentialsPropertiesOutput() KeyVaultCredentialsPropertiesOutput {
	return o
}

func (o KeyVaultCredentialsPropertiesOutput) ToKeyVaultCredentialsPropertiesOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesOutput {
	return o
}

func (o KeyVaultCredentialsPropertiesOutput) ToKeyVaultCredentialsPropertiesPtrOutput() KeyVaultCredentialsPropertiesPtrOutput {
	return o.ToKeyVaultCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultCredentialsPropertiesOutput) ToKeyVaultCredentialsPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultCredentialsProperties) *KeyVaultCredentialsProperties {
		return &v
	}).(KeyVaultCredentialsPropertiesPtrOutput)
}

// KeyVault service principal local secret name.
func (o KeyVaultCredentialsPropertiesOutput) ServicePrincipalLocalSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultCredentialsProperties) string { return v.ServicePrincipalLocalSecretName }).(pulumi.StringOutput)
}

type KeyVaultCredentialsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCredentialsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCredentialsProperties)(nil)).Elem()
}

func (o KeyVaultCredentialsPropertiesPtrOutput) ToKeyVaultCredentialsPropertiesPtrOutput() KeyVaultCredentialsPropertiesPtrOutput {
	return o
}

func (o KeyVaultCredentialsPropertiesPtrOutput) ToKeyVaultCredentialsPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesPtrOutput {
	return o
}

func (o KeyVaultCredentialsPropertiesPtrOutput) Elem() KeyVaultCredentialsPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultCredentialsProperties) KeyVaultCredentialsProperties {
		if v != nil {
			return *v
		}
		var ret KeyVaultCredentialsProperties
		return ret
	}).(KeyVaultCredentialsPropertiesOutput)
}

// KeyVault service principal local secret name.
func (o KeyVaultCredentialsPropertiesPtrOutput) ServicePrincipalLocalSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCredentialsProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ServicePrincipalLocalSecretName
	}).(pulumi.StringPtrOutput)
}

// KeyVault credentials properties. NOTE - Future this will be ENUM.
type KeyVaultCredentialsPropertiesResponse struct {
	// KeyVault service principal local secret name.
	ServicePrincipalLocalSecretName string `pulumi:"servicePrincipalLocalSecretName"`
}

// KeyVault credentials properties. NOTE - Future this will be ENUM.
type KeyVaultCredentialsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultCredentialsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCredentialsPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultCredentialsPropertiesResponseOutput) ToKeyVaultCredentialsPropertiesResponseOutput() KeyVaultCredentialsPropertiesResponseOutput {
	return o
}

func (o KeyVaultCredentialsPropertiesResponseOutput) ToKeyVaultCredentialsPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesResponseOutput {
	return o
}

// KeyVault service principal local secret name.
func (o KeyVaultCredentialsPropertiesResponseOutput) ServicePrincipalLocalSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultCredentialsPropertiesResponse) string { return v.ServicePrincipalLocalSecretName }).(pulumi.StringOutput)
}

type KeyVaultCredentialsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCredentialsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCredentialsPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultCredentialsPropertiesResponsePtrOutput) ToKeyVaultCredentialsPropertiesResponsePtrOutput() KeyVaultCredentialsPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultCredentialsPropertiesResponsePtrOutput) ToKeyVaultCredentialsPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultCredentialsPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultCredentialsPropertiesResponsePtrOutput) Elem() KeyVaultCredentialsPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultCredentialsPropertiesResponse) KeyVaultCredentialsPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultCredentialsPropertiesResponse
		return ret
	}).(KeyVaultCredentialsPropertiesResponseOutput)
}

// KeyVault service principal local secret name.
func (o KeyVaultCredentialsPropertiesResponsePtrOutput) ServicePrincipalLocalSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCredentialsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServicePrincipalLocalSecretName
	}).(pulumi.StringPtrOutput)
}

// KeyVault secret object properties
type KeyVaultSecretObject struct {
	// KeyVault secret name.
	Name string `pulumi:"name"`
	// KeyVault secret version.
	Version *string `pulumi:"version"`
}

// KeyVaultSecretObjectInput is an input type that accepts KeyVaultSecretObjectArgs and KeyVaultSecretObjectOutput values.
// You can construct a concrete instance of `KeyVaultSecretObjectInput` via:
//
//	KeyVaultSecretObjectArgs{...}
type KeyVaultSecretObjectInput interface {
	pulumi.Input

	ToKeyVaultSecretObjectOutput() KeyVaultSecretObjectOutput
	ToKeyVaultSecretObjectOutputWithContext(context.Context) KeyVaultSecretObjectOutput
}

// KeyVault secret object properties
type KeyVaultSecretObjectArgs struct {
	// KeyVault secret name.
	Name pulumi.StringInput `pulumi:"name"`
	// KeyVault secret version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KeyVaultSecretObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretObject)(nil)).Elem()
}

func (i KeyVaultSecretObjectArgs) ToKeyVaultSecretObjectOutput() KeyVaultSecretObjectOutput {
	return i.ToKeyVaultSecretObjectOutputWithContext(context.Background())
}

func (i KeyVaultSecretObjectArgs) ToKeyVaultSecretObjectOutputWithContext(ctx context.Context) KeyVaultSecretObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretObjectOutput)
}

func (i KeyVaultSecretObjectArgs) ToKeyVaultSecretObjectPtrOutput() KeyVaultSecretObjectPtrOutput {
	return i.ToKeyVaultSecretObjectPtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretObjectArgs) ToKeyVaultSecretObjectPtrOutputWithContext(ctx context.Context) KeyVaultSecretObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretObjectOutput).ToKeyVaultSecretObjectPtrOutputWithContext(ctx)
}

// KeyVaultSecretObjectPtrInput is an input type that accepts KeyVaultSecretObjectArgs, KeyVaultSecretObjectPtr and KeyVaultSecretObjectPtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretObjectPtrInput` via:
//
//	        KeyVaultSecretObjectArgs{...}
//
//	or:
//
//	        nil
type KeyVaultSecretObjectPtrInput interface {
	pulumi.Input

	ToKeyVaultSecretObjectPtrOutput() KeyVaultSecretObjectPtrOutput
	ToKeyVaultSecretObjectPtrOutputWithContext(context.Context) KeyVaultSecretObjectPtrOutput
}

type keyVaultSecretObjectPtrType KeyVaultSecretObjectArgs

func KeyVaultSecretObjectPtr(v *KeyVaultSecretObjectArgs) KeyVaultSecretObjectPtrInput {
	return (*keyVaultSecretObjectPtrType)(v)
}

func (*keyVaultSecretObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretObject)(nil)).Elem()
}

func (i *keyVaultSecretObjectPtrType) ToKeyVaultSecretObjectPtrOutput() KeyVaultSecretObjectPtrOutput {
	return i.ToKeyVaultSecretObjectPtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretObjectPtrType) ToKeyVaultSecretObjectPtrOutputWithContext(ctx context.Context) KeyVaultSecretObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretObjectPtrOutput)
}

// KeyVault secret object properties
type KeyVaultSecretObjectOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretObject)(nil)).Elem()
}

func (o KeyVaultSecretObjectOutput) ToKeyVaultSecretObjectOutput() KeyVaultSecretObjectOutput {
	return o
}

func (o KeyVaultSecretObjectOutput) ToKeyVaultSecretObjectOutputWithContext(ctx context.Context) KeyVaultSecretObjectOutput {
	return o
}

func (o KeyVaultSecretObjectOutput) ToKeyVaultSecretObjectPtrOutput() KeyVaultSecretObjectPtrOutput {
	return o.ToKeyVaultSecretObjectPtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretObjectOutput) ToKeyVaultSecretObjectPtrOutputWithContext(ctx context.Context) KeyVaultSecretObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultSecretObject) *KeyVaultSecretObject {
		return &v
	}).(KeyVaultSecretObjectPtrOutput)
}

// KeyVault secret name.
func (o KeyVaultSecretObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretObject) string { return v.Name }).(pulumi.StringOutput)
}

// KeyVault secret version.
func (o KeyVaultSecretObjectOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretObject) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KeyVaultSecretObjectPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretObject)(nil)).Elem()
}

func (o KeyVaultSecretObjectPtrOutput) ToKeyVaultSecretObjectPtrOutput() KeyVaultSecretObjectPtrOutput {
	return o
}

func (o KeyVaultSecretObjectPtrOutput) ToKeyVaultSecretObjectPtrOutputWithContext(ctx context.Context) KeyVaultSecretObjectPtrOutput {
	return o
}

func (o KeyVaultSecretObjectPtrOutput) Elem() KeyVaultSecretObjectOutput {
	return o.ApplyT(func(v *KeyVaultSecretObject) KeyVaultSecretObject {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretObject
		return ret
	}).(KeyVaultSecretObjectOutput)
}

// KeyVault secret name.
func (o KeyVaultSecretObjectPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretObject) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// KeyVault secret version.
func (o KeyVaultSecretObjectPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretObject) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// KeyVault secret object properties
type KeyVaultSecretObjectResponse struct {
	// KeyVault secret name.
	Name string `pulumi:"name"`
	// KeyVault secret version.
	Version *string `pulumi:"version"`
}

// KeyVault secret object properties
type KeyVaultSecretObjectResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretObjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretObjectResponse)(nil)).Elem()
}

func (o KeyVaultSecretObjectResponseOutput) ToKeyVaultSecretObjectResponseOutput() KeyVaultSecretObjectResponseOutput {
	return o
}

func (o KeyVaultSecretObjectResponseOutput) ToKeyVaultSecretObjectResponseOutputWithContext(ctx context.Context) KeyVaultSecretObjectResponseOutput {
	return o
}

// KeyVault secret name.
func (o KeyVaultSecretObjectResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretObjectResponse) string { return v.Name }).(pulumi.StringOutput)
}

// KeyVault secret version.
func (o KeyVaultSecretObjectResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretObjectResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KeyVaultSecretObjectResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretObjectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretObjectResponse)(nil)).Elem()
}

func (o KeyVaultSecretObjectResponsePtrOutput) ToKeyVaultSecretObjectResponsePtrOutput() KeyVaultSecretObjectResponsePtrOutput {
	return o
}

func (o KeyVaultSecretObjectResponsePtrOutput) ToKeyVaultSecretObjectResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretObjectResponsePtrOutput {
	return o
}

func (o KeyVaultSecretObjectResponsePtrOutput) Elem() KeyVaultSecretObjectResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretObjectResponse) KeyVaultSecretObjectResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretObjectResponse
		return ret
	}).(KeyVaultSecretObjectResponseOutput)
}

// KeyVault secret name.
func (o KeyVaultSecretObjectResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretObjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// KeyVault secret version.
func (o KeyVaultSecretObjectResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// KeyVault secret properties
type KeyVaultSecretProperties struct {
	// KeyVault properties.
	Vault KeyVaultConnectionProperties `pulumi:"vault"`
	// KeyVault secret details.
	VaultSecret KeyVaultSecretObject `pulumi:"vaultSecret"`
}

// KeyVaultSecretPropertiesInput is an input type that accepts KeyVaultSecretPropertiesArgs and KeyVaultSecretPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultSecretPropertiesInput` via:
//
//	KeyVaultSecretPropertiesArgs{...}
type KeyVaultSecretPropertiesInput interface {
	pulumi.Input

	ToKeyVaultSecretPropertiesOutput() KeyVaultSecretPropertiesOutput
	ToKeyVaultSecretPropertiesOutputWithContext(context.Context) KeyVaultSecretPropertiesOutput
}

// KeyVault secret properties
type KeyVaultSecretPropertiesArgs struct {
	// KeyVault properties.
	Vault KeyVaultConnectionPropertiesInput `pulumi:"vault"`
	// KeyVault secret details.
	VaultSecret KeyVaultSecretObjectInput `pulumi:"vaultSecret"`
}

func (KeyVaultSecretPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretProperties)(nil)).Elem()
}

func (i KeyVaultSecretPropertiesArgs) ToKeyVaultSecretPropertiesOutput() KeyVaultSecretPropertiesOutput {
	return i.ToKeyVaultSecretPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultSecretPropertiesArgs) ToKeyVaultSecretPropertiesOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretPropertiesOutput)
}

func (i KeyVaultSecretPropertiesArgs) ToKeyVaultSecretPropertiesPtrOutput() KeyVaultSecretPropertiesPtrOutput {
	return i.ToKeyVaultSecretPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretPropertiesArgs) ToKeyVaultSecretPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretPropertiesOutput).ToKeyVaultSecretPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultSecretPropertiesPtrInput is an input type that accepts KeyVaultSecretPropertiesArgs, KeyVaultSecretPropertiesPtr and KeyVaultSecretPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretPropertiesPtrInput` via:
//
//	        KeyVaultSecretPropertiesArgs{...}
//
//	or:
//
//	        nil
type KeyVaultSecretPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultSecretPropertiesPtrOutput() KeyVaultSecretPropertiesPtrOutput
	ToKeyVaultSecretPropertiesPtrOutputWithContext(context.Context) KeyVaultSecretPropertiesPtrOutput
}

type keyVaultSecretPropertiesPtrType KeyVaultSecretPropertiesArgs

func KeyVaultSecretPropertiesPtr(v *KeyVaultSecretPropertiesArgs) KeyVaultSecretPropertiesPtrInput {
	return (*keyVaultSecretPropertiesPtrType)(v)
}

func (*keyVaultSecretPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretProperties)(nil)).Elem()
}

func (i *keyVaultSecretPropertiesPtrType) ToKeyVaultSecretPropertiesPtrOutput() KeyVaultSecretPropertiesPtrOutput {
	return i.ToKeyVaultSecretPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretPropertiesPtrType) ToKeyVaultSecretPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretPropertiesPtrOutput)
}

// KeyVault secret properties
type KeyVaultSecretPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretProperties)(nil)).Elem()
}

func (o KeyVaultSecretPropertiesOutput) ToKeyVaultSecretPropertiesOutput() KeyVaultSecretPropertiesOutput {
	return o
}

func (o KeyVaultSecretPropertiesOutput) ToKeyVaultSecretPropertiesOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesOutput {
	return o
}

func (o KeyVaultSecretPropertiesOutput) ToKeyVaultSecretPropertiesPtrOutput() KeyVaultSecretPropertiesPtrOutput {
	return o.ToKeyVaultSecretPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretPropertiesOutput) ToKeyVaultSecretPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultSecretProperties) *KeyVaultSecretProperties {
		return &v
	}).(KeyVaultSecretPropertiesPtrOutput)
}

// KeyVault properties.
func (o KeyVaultSecretPropertiesOutput) Vault() KeyVaultConnectionPropertiesOutput {
	return o.ApplyT(func(v KeyVaultSecretProperties) KeyVaultConnectionProperties { return v.Vault }).(KeyVaultConnectionPropertiesOutput)
}

// KeyVault secret details.
func (o KeyVaultSecretPropertiesOutput) VaultSecret() KeyVaultSecretObjectOutput {
	return o.ApplyT(func(v KeyVaultSecretProperties) KeyVaultSecretObject { return v.VaultSecret }).(KeyVaultSecretObjectOutput)
}

type KeyVaultSecretPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretProperties)(nil)).Elem()
}

func (o KeyVaultSecretPropertiesPtrOutput) ToKeyVaultSecretPropertiesPtrOutput() KeyVaultSecretPropertiesPtrOutput {
	return o
}

func (o KeyVaultSecretPropertiesPtrOutput) ToKeyVaultSecretPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesPtrOutput {
	return o
}

func (o KeyVaultSecretPropertiesPtrOutput) Elem() KeyVaultSecretPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultSecretProperties) KeyVaultSecretProperties {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretProperties
		return ret
	}).(KeyVaultSecretPropertiesOutput)
}

// KeyVault properties.
func (o KeyVaultSecretPropertiesPtrOutput) Vault() KeyVaultConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretProperties) *KeyVaultConnectionProperties {
		if v == nil {
			return nil
		}
		return &v.Vault
	}).(KeyVaultConnectionPropertiesPtrOutput)
}

// KeyVault secret details.
func (o KeyVaultSecretPropertiesPtrOutput) VaultSecret() KeyVaultSecretObjectPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretProperties) *KeyVaultSecretObject {
		if v == nil {
			return nil
		}
		return &v.VaultSecret
	}).(KeyVaultSecretObjectPtrOutput)
}

// KeyVault secret properties
type KeyVaultSecretPropertiesResponse struct {
	// KeyVault properties.
	Vault KeyVaultConnectionPropertiesResponse `pulumi:"vault"`
	// KeyVault secret details.
	VaultSecret KeyVaultSecretObjectResponse `pulumi:"vaultSecret"`
}

// KeyVault secret properties
type KeyVaultSecretPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultSecretPropertiesResponseOutput) ToKeyVaultSecretPropertiesResponseOutput() KeyVaultSecretPropertiesResponseOutput {
	return o
}

func (o KeyVaultSecretPropertiesResponseOutput) ToKeyVaultSecretPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesResponseOutput {
	return o
}

// KeyVault properties.
func (o KeyVaultSecretPropertiesResponseOutput) Vault() KeyVaultConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v KeyVaultSecretPropertiesResponse) KeyVaultConnectionPropertiesResponse { return v.Vault }).(KeyVaultConnectionPropertiesResponseOutput)
}

// KeyVault secret details.
func (o KeyVaultSecretPropertiesResponseOutput) VaultSecret() KeyVaultSecretObjectResponseOutput {
	return o.ApplyT(func(v KeyVaultSecretPropertiesResponse) KeyVaultSecretObjectResponse { return v.VaultSecret }).(KeyVaultSecretObjectResponseOutput)
}

type KeyVaultSecretPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultSecretPropertiesResponsePtrOutput) ToKeyVaultSecretPropertiesResponsePtrOutput() KeyVaultSecretPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultSecretPropertiesResponsePtrOutput) ToKeyVaultSecretPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultSecretPropertiesResponsePtrOutput) Elem() KeyVaultSecretPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretPropertiesResponse) KeyVaultSecretPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretPropertiesResponse
		return ret
	}).(KeyVaultSecretPropertiesResponseOutput)
}

// KeyVault properties.
func (o KeyVaultSecretPropertiesResponsePtrOutput) Vault() KeyVaultConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretPropertiesResponse) *KeyVaultConnectionPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Vault
	}).(KeyVaultConnectionPropertiesResponsePtrOutput)
}

// KeyVault secret details.
func (o KeyVaultSecretPropertiesResponsePtrOutput) VaultSecret() KeyVaultSecretObjectResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretPropertiesResponse) *KeyVaultSecretObjectResponse {
		if v == nil {
			return nil
		}
		return &v.VaultSecret
	}).(KeyVaultSecretObjectResponsePtrOutput)
}

// Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication
type LocalBrokerAuthenticationMethods struct {
	// Kubernetes local broker authentication method.
	Kubernetes LocalBrokerKubernetesAuthentication `pulumi:"kubernetes"`
}

// Defaults sets the appropriate defaults for LocalBrokerAuthenticationMethods
func (val *LocalBrokerAuthenticationMethods) Defaults() *LocalBrokerAuthenticationMethods {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Kubernetes = *tmp.Kubernetes.Defaults()

	return &tmp
}

// LocalBrokerAuthenticationMethodsInput is an input type that accepts LocalBrokerAuthenticationMethodsArgs and LocalBrokerAuthenticationMethodsOutput values.
// You can construct a concrete instance of `LocalBrokerAuthenticationMethodsInput` via:
//
//	LocalBrokerAuthenticationMethodsArgs{...}
type LocalBrokerAuthenticationMethodsInput interface {
	pulumi.Input

	ToLocalBrokerAuthenticationMethodsOutput() LocalBrokerAuthenticationMethodsOutput
	ToLocalBrokerAuthenticationMethodsOutputWithContext(context.Context) LocalBrokerAuthenticationMethodsOutput
}

// Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication
type LocalBrokerAuthenticationMethodsArgs struct {
	// Kubernetes local broker authentication method.
	Kubernetes LocalBrokerKubernetesAuthenticationInput `pulumi:"kubernetes"`
}

// Defaults sets the appropriate defaults for LocalBrokerAuthenticationMethodsArgs
func (val *LocalBrokerAuthenticationMethodsArgs) Defaults() *LocalBrokerAuthenticationMethodsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (LocalBrokerAuthenticationMethodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerAuthenticationMethods)(nil)).Elem()
}

func (i LocalBrokerAuthenticationMethodsArgs) ToLocalBrokerAuthenticationMethodsOutput() LocalBrokerAuthenticationMethodsOutput {
	return i.ToLocalBrokerAuthenticationMethodsOutputWithContext(context.Background())
}

func (i LocalBrokerAuthenticationMethodsArgs) ToLocalBrokerAuthenticationMethodsOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerAuthenticationMethodsOutput)
}

func (i LocalBrokerAuthenticationMethodsArgs) ToLocalBrokerAuthenticationMethodsPtrOutput() LocalBrokerAuthenticationMethodsPtrOutput {
	return i.ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(context.Background())
}

func (i LocalBrokerAuthenticationMethodsArgs) ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerAuthenticationMethodsOutput).ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(ctx)
}

// LocalBrokerAuthenticationMethodsPtrInput is an input type that accepts LocalBrokerAuthenticationMethodsArgs, LocalBrokerAuthenticationMethodsPtr and LocalBrokerAuthenticationMethodsPtrOutput values.
// You can construct a concrete instance of `LocalBrokerAuthenticationMethodsPtrInput` via:
//
//	        LocalBrokerAuthenticationMethodsArgs{...}
//
//	or:
//
//	        nil
type LocalBrokerAuthenticationMethodsPtrInput interface {
	pulumi.Input

	ToLocalBrokerAuthenticationMethodsPtrOutput() LocalBrokerAuthenticationMethodsPtrOutput
	ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(context.Context) LocalBrokerAuthenticationMethodsPtrOutput
}

type localBrokerAuthenticationMethodsPtrType LocalBrokerAuthenticationMethodsArgs

func LocalBrokerAuthenticationMethodsPtr(v *LocalBrokerAuthenticationMethodsArgs) LocalBrokerAuthenticationMethodsPtrInput {
	return (*localBrokerAuthenticationMethodsPtrType)(v)
}

func (*localBrokerAuthenticationMethodsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerAuthenticationMethods)(nil)).Elem()
}

func (i *localBrokerAuthenticationMethodsPtrType) ToLocalBrokerAuthenticationMethodsPtrOutput() LocalBrokerAuthenticationMethodsPtrOutput {
	return i.ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(context.Background())
}

func (i *localBrokerAuthenticationMethodsPtrType) ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerAuthenticationMethodsPtrOutput)
}

// Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication
type LocalBrokerAuthenticationMethodsOutput struct{ *pulumi.OutputState }

func (LocalBrokerAuthenticationMethodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerAuthenticationMethods)(nil)).Elem()
}

func (o LocalBrokerAuthenticationMethodsOutput) ToLocalBrokerAuthenticationMethodsOutput() LocalBrokerAuthenticationMethodsOutput {
	return o
}

func (o LocalBrokerAuthenticationMethodsOutput) ToLocalBrokerAuthenticationMethodsOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsOutput {
	return o
}

func (o LocalBrokerAuthenticationMethodsOutput) ToLocalBrokerAuthenticationMethodsPtrOutput() LocalBrokerAuthenticationMethodsPtrOutput {
	return o.ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(context.Background())
}

func (o LocalBrokerAuthenticationMethodsOutput) ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalBrokerAuthenticationMethods) *LocalBrokerAuthenticationMethods {
		return &v
	}).(LocalBrokerAuthenticationMethodsPtrOutput)
}

// Kubernetes local broker authentication method.
func (o LocalBrokerAuthenticationMethodsOutput) Kubernetes() LocalBrokerKubernetesAuthenticationOutput {
	return o.ApplyT(func(v LocalBrokerAuthenticationMethods) LocalBrokerKubernetesAuthentication { return v.Kubernetes }).(LocalBrokerKubernetesAuthenticationOutput)
}

type LocalBrokerAuthenticationMethodsPtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerAuthenticationMethodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerAuthenticationMethods)(nil)).Elem()
}

func (o LocalBrokerAuthenticationMethodsPtrOutput) ToLocalBrokerAuthenticationMethodsPtrOutput() LocalBrokerAuthenticationMethodsPtrOutput {
	return o
}

func (o LocalBrokerAuthenticationMethodsPtrOutput) ToLocalBrokerAuthenticationMethodsPtrOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsPtrOutput {
	return o
}

func (o LocalBrokerAuthenticationMethodsPtrOutput) Elem() LocalBrokerAuthenticationMethodsOutput {
	return o.ApplyT(func(v *LocalBrokerAuthenticationMethods) LocalBrokerAuthenticationMethods {
		if v != nil {
			return *v
		}
		var ret LocalBrokerAuthenticationMethods
		return ret
	}).(LocalBrokerAuthenticationMethodsOutput)
}

// Kubernetes local broker authentication method.
func (o LocalBrokerAuthenticationMethodsPtrOutput) Kubernetes() LocalBrokerKubernetesAuthenticationPtrOutput {
	return o.ApplyT(func(v *LocalBrokerAuthenticationMethods) *LocalBrokerKubernetesAuthentication {
		if v == nil {
			return nil
		}
		return &v.Kubernetes
	}).(LocalBrokerKubernetesAuthenticationPtrOutput)
}

// Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication
type LocalBrokerAuthenticationMethodsResponse struct {
	// Kubernetes local broker authentication method.
	Kubernetes LocalBrokerKubernetesAuthenticationResponse `pulumi:"kubernetes"`
}

// Defaults sets the appropriate defaults for LocalBrokerAuthenticationMethodsResponse
func (val *LocalBrokerAuthenticationMethodsResponse) Defaults() *LocalBrokerAuthenticationMethodsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Kubernetes = *tmp.Kubernetes.Defaults()

	return &tmp
}

// Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication
type LocalBrokerAuthenticationMethodsResponseOutput struct{ *pulumi.OutputState }

func (LocalBrokerAuthenticationMethodsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerAuthenticationMethodsResponse)(nil)).Elem()
}

func (o LocalBrokerAuthenticationMethodsResponseOutput) ToLocalBrokerAuthenticationMethodsResponseOutput() LocalBrokerAuthenticationMethodsResponseOutput {
	return o
}

func (o LocalBrokerAuthenticationMethodsResponseOutput) ToLocalBrokerAuthenticationMethodsResponseOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsResponseOutput {
	return o
}

// Kubernetes local broker authentication method.
func (o LocalBrokerAuthenticationMethodsResponseOutput) Kubernetes() LocalBrokerKubernetesAuthenticationResponseOutput {
	return o.ApplyT(func(v LocalBrokerAuthenticationMethodsResponse) LocalBrokerKubernetesAuthenticationResponse {
		return v.Kubernetes
	}).(LocalBrokerKubernetesAuthenticationResponseOutput)
}

type LocalBrokerAuthenticationMethodsResponsePtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerAuthenticationMethodsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerAuthenticationMethodsResponse)(nil)).Elem()
}

func (o LocalBrokerAuthenticationMethodsResponsePtrOutput) ToLocalBrokerAuthenticationMethodsResponsePtrOutput() LocalBrokerAuthenticationMethodsResponsePtrOutput {
	return o
}

func (o LocalBrokerAuthenticationMethodsResponsePtrOutput) ToLocalBrokerAuthenticationMethodsResponsePtrOutputWithContext(ctx context.Context) LocalBrokerAuthenticationMethodsResponsePtrOutput {
	return o
}

func (o LocalBrokerAuthenticationMethodsResponsePtrOutput) Elem() LocalBrokerAuthenticationMethodsResponseOutput {
	return o.ApplyT(func(v *LocalBrokerAuthenticationMethodsResponse) LocalBrokerAuthenticationMethodsResponse {
		if v != nil {
			return *v
		}
		var ret LocalBrokerAuthenticationMethodsResponse
		return ret
	}).(LocalBrokerAuthenticationMethodsResponseOutput)
}

// Kubernetes local broker authentication method.
func (o LocalBrokerAuthenticationMethodsResponsePtrOutput) Kubernetes() LocalBrokerKubernetesAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *LocalBrokerAuthenticationMethodsResponse) *LocalBrokerKubernetesAuthenticationResponse {
		if v == nil {
			return nil
		}
		return &v.Kubernetes
	}).(LocalBrokerKubernetesAuthenticationResponsePtrOutput)
}

// Mqtt Local Broker ConnectionSpec details
type LocalBrokerConnectionSpec struct {
	// The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.
	Authentication *LocalBrokerAuthenticationMethods `pulumi:"authentication"`
	// The endpoint of local broker to connect to.
	Endpoint *string `pulumi:"endpoint"`
	// TLS details for Local broker Connection.
	Tls *LocalBrokerConnectionTls `pulumi:"tls"`
}

// Defaults sets the appropriate defaults for LocalBrokerConnectionSpec
func (val *LocalBrokerConnectionSpec) Defaults() *LocalBrokerConnectionSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Authentication = tmp.Authentication.Defaults()

	if tmp.Endpoint == nil {
		endpoint_ := "aio-mq-dmqtt-frontend:1883"
		tmp.Endpoint = &endpoint_
	}
	tmp.Tls = tmp.Tls.Defaults()

	return &tmp
}

// LocalBrokerConnectionSpecInput is an input type that accepts LocalBrokerConnectionSpecArgs and LocalBrokerConnectionSpecOutput values.
// You can construct a concrete instance of `LocalBrokerConnectionSpecInput` via:
//
//	LocalBrokerConnectionSpecArgs{...}
type LocalBrokerConnectionSpecInput interface {
	pulumi.Input

	ToLocalBrokerConnectionSpecOutput() LocalBrokerConnectionSpecOutput
	ToLocalBrokerConnectionSpecOutputWithContext(context.Context) LocalBrokerConnectionSpecOutput
}

// Mqtt Local Broker ConnectionSpec details
type LocalBrokerConnectionSpecArgs struct {
	// The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.
	Authentication LocalBrokerAuthenticationMethodsPtrInput `pulumi:"authentication"`
	// The endpoint of local broker to connect to.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// TLS details for Local broker Connection.
	Tls LocalBrokerConnectionTlsPtrInput `pulumi:"tls"`
}

// Defaults sets the appropriate defaults for LocalBrokerConnectionSpecArgs
func (val *LocalBrokerConnectionSpecArgs) Defaults() *LocalBrokerConnectionSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Endpoint == nil {
		tmp.Endpoint = pulumi.StringPtr("aio-mq-dmqtt-frontend:1883")
	}

	return &tmp
}
func (LocalBrokerConnectionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerConnectionSpec)(nil)).Elem()
}

func (i LocalBrokerConnectionSpecArgs) ToLocalBrokerConnectionSpecOutput() LocalBrokerConnectionSpecOutput {
	return i.ToLocalBrokerConnectionSpecOutputWithContext(context.Background())
}

func (i LocalBrokerConnectionSpecArgs) ToLocalBrokerConnectionSpecOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerConnectionSpecOutput)
}

func (i LocalBrokerConnectionSpecArgs) ToLocalBrokerConnectionSpecPtrOutput() LocalBrokerConnectionSpecPtrOutput {
	return i.ToLocalBrokerConnectionSpecPtrOutputWithContext(context.Background())
}

func (i LocalBrokerConnectionSpecArgs) ToLocalBrokerConnectionSpecPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerConnectionSpecOutput).ToLocalBrokerConnectionSpecPtrOutputWithContext(ctx)
}

// LocalBrokerConnectionSpecPtrInput is an input type that accepts LocalBrokerConnectionSpecArgs, LocalBrokerConnectionSpecPtr and LocalBrokerConnectionSpecPtrOutput values.
// You can construct a concrete instance of `LocalBrokerConnectionSpecPtrInput` via:
//
//	        LocalBrokerConnectionSpecArgs{...}
//
//	or:
//
//	        nil
type LocalBrokerConnectionSpecPtrInput interface {
	pulumi.Input

	ToLocalBrokerConnectionSpecPtrOutput() LocalBrokerConnectionSpecPtrOutput
	ToLocalBrokerConnectionSpecPtrOutputWithContext(context.Context) LocalBrokerConnectionSpecPtrOutput
}

type localBrokerConnectionSpecPtrType LocalBrokerConnectionSpecArgs

func LocalBrokerConnectionSpecPtr(v *LocalBrokerConnectionSpecArgs) LocalBrokerConnectionSpecPtrInput {
	return (*localBrokerConnectionSpecPtrType)(v)
}

func (*localBrokerConnectionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerConnectionSpec)(nil)).Elem()
}

func (i *localBrokerConnectionSpecPtrType) ToLocalBrokerConnectionSpecPtrOutput() LocalBrokerConnectionSpecPtrOutput {
	return i.ToLocalBrokerConnectionSpecPtrOutputWithContext(context.Background())
}

func (i *localBrokerConnectionSpecPtrType) ToLocalBrokerConnectionSpecPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerConnectionSpecPtrOutput)
}

// Mqtt Local Broker ConnectionSpec details
type LocalBrokerConnectionSpecOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerConnectionSpec)(nil)).Elem()
}

func (o LocalBrokerConnectionSpecOutput) ToLocalBrokerConnectionSpecOutput() LocalBrokerConnectionSpecOutput {
	return o
}

func (o LocalBrokerConnectionSpecOutput) ToLocalBrokerConnectionSpecOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecOutput {
	return o
}

func (o LocalBrokerConnectionSpecOutput) ToLocalBrokerConnectionSpecPtrOutput() LocalBrokerConnectionSpecPtrOutput {
	return o.ToLocalBrokerConnectionSpecPtrOutputWithContext(context.Background())
}

func (o LocalBrokerConnectionSpecOutput) ToLocalBrokerConnectionSpecPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalBrokerConnectionSpec) *LocalBrokerConnectionSpec {
		return &v
	}).(LocalBrokerConnectionSpecPtrOutput)
}

// The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.
func (o LocalBrokerConnectionSpecOutput) Authentication() LocalBrokerAuthenticationMethodsPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionSpec) *LocalBrokerAuthenticationMethods { return v.Authentication }).(LocalBrokerAuthenticationMethodsPtrOutput)
}

// The endpoint of local broker to connect to.
func (o LocalBrokerConnectionSpecOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionSpec) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// TLS details for Local broker Connection.
func (o LocalBrokerConnectionSpecOutput) Tls() LocalBrokerConnectionTlsPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionSpec) *LocalBrokerConnectionTls { return v.Tls }).(LocalBrokerConnectionTlsPtrOutput)
}

type LocalBrokerConnectionSpecPtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerConnectionSpec)(nil)).Elem()
}

func (o LocalBrokerConnectionSpecPtrOutput) ToLocalBrokerConnectionSpecPtrOutput() LocalBrokerConnectionSpecPtrOutput {
	return o
}

func (o LocalBrokerConnectionSpecPtrOutput) ToLocalBrokerConnectionSpecPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecPtrOutput {
	return o
}

func (o LocalBrokerConnectionSpecPtrOutput) Elem() LocalBrokerConnectionSpecOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpec) LocalBrokerConnectionSpec {
		if v != nil {
			return *v
		}
		var ret LocalBrokerConnectionSpec
		return ret
	}).(LocalBrokerConnectionSpecOutput)
}

// The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.
func (o LocalBrokerConnectionSpecPtrOutput) Authentication() LocalBrokerAuthenticationMethodsPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpec) *LocalBrokerAuthenticationMethods {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(LocalBrokerAuthenticationMethodsPtrOutput)
}

// The endpoint of local broker to connect to.
func (o LocalBrokerConnectionSpecPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpec) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// TLS details for Local broker Connection.
func (o LocalBrokerConnectionSpecPtrOutput) Tls() LocalBrokerConnectionTlsPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpec) *LocalBrokerConnectionTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(LocalBrokerConnectionTlsPtrOutput)
}

// Mqtt Local Broker ConnectionSpec details
type LocalBrokerConnectionSpecResponse struct {
	// The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.
	Authentication *LocalBrokerAuthenticationMethodsResponse `pulumi:"authentication"`
	// The endpoint of local broker to connect to.
	Endpoint *string `pulumi:"endpoint"`
	// TLS details for Local broker Connection.
	Tls *LocalBrokerConnectionTlsResponse `pulumi:"tls"`
}

// Defaults sets the appropriate defaults for LocalBrokerConnectionSpecResponse
func (val *LocalBrokerConnectionSpecResponse) Defaults() *LocalBrokerConnectionSpecResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Authentication = tmp.Authentication.Defaults()

	if tmp.Endpoint == nil {
		endpoint_ := "aio-mq-dmqtt-frontend:1883"
		tmp.Endpoint = &endpoint_
	}
	tmp.Tls = tmp.Tls.Defaults()

	return &tmp
}

// Mqtt Local Broker ConnectionSpec details
type LocalBrokerConnectionSpecResponseOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerConnectionSpecResponse)(nil)).Elem()
}

func (o LocalBrokerConnectionSpecResponseOutput) ToLocalBrokerConnectionSpecResponseOutput() LocalBrokerConnectionSpecResponseOutput {
	return o
}

func (o LocalBrokerConnectionSpecResponseOutput) ToLocalBrokerConnectionSpecResponseOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecResponseOutput {
	return o
}

// The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.
func (o LocalBrokerConnectionSpecResponseOutput) Authentication() LocalBrokerAuthenticationMethodsResponsePtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionSpecResponse) *LocalBrokerAuthenticationMethodsResponse {
		return v.Authentication
	}).(LocalBrokerAuthenticationMethodsResponsePtrOutput)
}

// The endpoint of local broker to connect to.
func (o LocalBrokerConnectionSpecResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionSpecResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// TLS details for Local broker Connection.
func (o LocalBrokerConnectionSpecResponseOutput) Tls() LocalBrokerConnectionTlsResponsePtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionSpecResponse) *LocalBrokerConnectionTlsResponse { return v.Tls }).(LocalBrokerConnectionTlsResponsePtrOutput)
}

type LocalBrokerConnectionSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerConnectionSpecResponse)(nil)).Elem()
}

func (o LocalBrokerConnectionSpecResponsePtrOutput) ToLocalBrokerConnectionSpecResponsePtrOutput() LocalBrokerConnectionSpecResponsePtrOutput {
	return o
}

func (o LocalBrokerConnectionSpecResponsePtrOutput) ToLocalBrokerConnectionSpecResponsePtrOutputWithContext(ctx context.Context) LocalBrokerConnectionSpecResponsePtrOutput {
	return o
}

func (o LocalBrokerConnectionSpecResponsePtrOutput) Elem() LocalBrokerConnectionSpecResponseOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpecResponse) LocalBrokerConnectionSpecResponse {
		if v != nil {
			return *v
		}
		var ret LocalBrokerConnectionSpecResponse
		return ret
	}).(LocalBrokerConnectionSpecResponseOutput)
}

// The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.
func (o LocalBrokerConnectionSpecResponsePtrOutput) Authentication() LocalBrokerAuthenticationMethodsResponsePtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpecResponse) *LocalBrokerAuthenticationMethodsResponse {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(LocalBrokerAuthenticationMethodsResponsePtrOutput)
}

// The endpoint of local broker to connect to.
func (o LocalBrokerConnectionSpecResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// TLS details for Local broker Connection.
func (o LocalBrokerConnectionSpecResponsePtrOutput) Tls() LocalBrokerConnectionTlsResponsePtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionSpecResponse) *LocalBrokerConnectionTlsResponse {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(LocalBrokerConnectionTlsResponsePtrOutput)
}

// Mqtt Local Broker Connection TLS details
type LocalBrokerConnectionTls struct {
	// Tls Enabled on Local Broker Connection.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
	// Trusted CA certificate config map name for Local Broker.
	TrustedCaCertificateConfigMap *string `pulumi:"trustedCaCertificateConfigMap"`
}

// Defaults sets the appropriate defaults for LocalBrokerConnectionTls
func (val *LocalBrokerConnectionTls) Defaults() *LocalBrokerConnectionTls {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TlsEnabled == nil {
		tlsEnabled_ := false
		tmp.TlsEnabled = &tlsEnabled_
	}
	return &tmp
}

// LocalBrokerConnectionTlsInput is an input type that accepts LocalBrokerConnectionTlsArgs and LocalBrokerConnectionTlsOutput values.
// You can construct a concrete instance of `LocalBrokerConnectionTlsInput` via:
//
//	LocalBrokerConnectionTlsArgs{...}
type LocalBrokerConnectionTlsInput interface {
	pulumi.Input

	ToLocalBrokerConnectionTlsOutput() LocalBrokerConnectionTlsOutput
	ToLocalBrokerConnectionTlsOutputWithContext(context.Context) LocalBrokerConnectionTlsOutput
}

// Mqtt Local Broker Connection TLS details
type LocalBrokerConnectionTlsArgs struct {
	// Tls Enabled on Local Broker Connection.
	TlsEnabled pulumi.BoolPtrInput `pulumi:"tlsEnabled"`
	// Trusted CA certificate config map name for Local Broker.
	TrustedCaCertificateConfigMap pulumi.StringPtrInput `pulumi:"trustedCaCertificateConfigMap"`
}

// Defaults sets the appropriate defaults for LocalBrokerConnectionTlsArgs
func (val *LocalBrokerConnectionTlsArgs) Defaults() *LocalBrokerConnectionTlsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TlsEnabled == nil {
		tmp.TlsEnabled = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (LocalBrokerConnectionTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerConnectionTls)(nil)).Elem()
}

func (i LocalBrokerConnectionTlsArgs) ToLocalBrokerConnectionTlsOutput() LocalBrokerConnectionTlsOutput {
	return i.ToLocalBrokerConnectionTlsOutputWithContext(context.Background())
}

func (i LocalBrokerConnectionTlsArgs) ToLocalBrokerConnectionTlsOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerConnectionTlsOutput)
}

func (i LocalBrokerConnectionTlsArgs) ToLocalBrokerConnectionTlsPtrOutput() LocalBrokerConnectionTlsPtrOutput {
	return i.ToLocalBrokerConnectionTlsPtrOutputWithContext(context.Background())
}

func (i LocalBrokerConnectionTlsArgs) ToLocalBrokerConnectionTlsPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerConnectionTlsOutput).ToLocalBrokerConnectionTlsPtrOutputWithContext(ctx)
}

// LocalBrokerConnectionTlsPtrInput is an input type that accepts LocalBrokerConnectionTlsArgs, LocalBrokerConnectionTlsPtr and LocalBrokerConnectionTlsPtrOutput values.
// You can construct a concrete instance of `LocalBrokerConnectionTlsPtrInput` via:
//
//	        LocalBrokerConnectionTlsArgs{...}
//
//	or:
//
//	        nil
type LocalBrokerConnectionTlsPtrInput interface {
	pulumi.Input

	ToLocalBrokerConnectionTlsPtrOutput() LocalBrokerConnectionTlsPtrOutput
	ToLocalBrokerConnectionTlsPtrOutputWithContext(context.Context) LocalBrokerConnectionTlsPtrOutput
}

type localBrokerConnectionTlsPtrType LocalBrokerConnectionTlsArgs

func LocalBrokerConnectionTlsPtr(v *LocalBrokerConnectionTlsArgs) LocalBrokerConnectionTlsPtrInput {
	return (*localBrokerConnectionTlsPtrType)(v)
}

func (*localBrokerConnectionTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerConnectionTls)(nil)).Elem()
}

func (i *localBrokerConnectionTlsPtrType) ToLocalBrokerConnectionTlsPtrOutput() LocalBrokerConnectionTlsPtrOutput {
	return i.ToLocalBrokerConnectionTlsPtrOutputWithContext(context.Background())
}

func (i *localBrokerConnectionTlsPtrType) ToLocalBrokerConnectionTlsPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerConnectionTlsPtrOutput)
}

// Mqtt Local Broker Connection TLS details
type LocalBrokerConnectionTlsOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerConnectionTls)(nil)).Elem()
}

func (o LocalBrokerConnectionTlsOutput) ToLocalBrokerConnectionTlsOutput() LocalBrokerConnectionTlsOutput {
	return o
}

func (o LocalBrokerConnectionTlsOutput) ToLocalBrokerConnectionTlsOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsOutput {
	return o
}

func (o LocalBrokerConnectionTlsOutput) ToLocalBrokerConnectionTlsPtrOutput() LocalBrokerConnectionTlsPtrOutput {
	return o.ToLocalBrokerConnectionTlsPtrOutputWithContext(context.Background())
}

func (o LocalBrokerConnectionTlsOutput) ToLocalBrokerConnectionTlsPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalBrokerConnectionTls) *LocalBrokerConnectionTls {
		return &v
	}).(LocalBrokerConnectionTlsPtrOutput)
}

// Tls Enabled on Local Broker Connection.
func (o LocalBrokerConnectionTlsOutput) TlsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionTls) *bool { return v.TlsEnabled }).(pulumi.BoolPtrOutput)
}

// Trusted CA certificate config map name for Local Broker.
func (o LocalBrokerConnectionTlsOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionTls) *string { return v.TrustedCaCertificateConfigMap }).(pulumi.StringPtrOutput)
}

type LocalBrokerConnectionTlsPtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerConnectionTls)(nil)).Elem()
}

func (o LocalBrokerConnectionTlsPtrOutput) ToLocalBrokerConnectionTlsPtrOutput() LocalBrokerConnectionTlsPtrOutput {
	return o
}

func (o LocalBrokerConnectionTlsPtrOutput) ToLocalBrokerConnectionTlsPtrOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsPtrOutput {
	return o
}

func (o LocalBrokerConnectionTlsPtrOutput) Elem() LocalBrokerConnectionTlsOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionTls) LocalBrokerConnectionTls {
		if v != nil {
			return *v
		}
		var ret LocalBrokerConnectionTls
		return ret
	}).(LocalBrokerConnectionTlsOutput)
}

// Tls Enabled on Local Broker Connection.
func (o LocalBrokerConnectionTlsPtrOutput) TlsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionTls) *bool {
		if v == nil {
			return nil
		}
		return v.TlsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Trusted CA certificate config map name for Local Broker.
func (o LocalBrokerConnectionTlsPtrOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionTls) *string {
		if v == nil {
			return nil
		}
		return v.TrustedCaCertificateConfigMap
	}).(pulumi.StringPtrOutput)
}

// Mqtt Local Broker Connection TLS details
type LocalBrokerConnectionTlsResponse struct {
	// Tls Enabled on Local Broker Connection.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
	// Trusted CA certificate config map name for Local Broker.
	TrustedCaCertificateConfigMap *string `pulumi:"trustedCaCertificateConfigMap"`
}

// Defaults sets the appropriate defaults for LocalBrokerConnectionTlsResponse
func (val *LocalBrokerConnectionTlsResponse) Defaults() *LocalBrokerConnectionTlsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TlsEnabled == nil {
		tlsEnabled_ := false
		tmp.TlsEnabled = &tlsEnabled_
	}
	return &tmp
}

// Mqtt Local Broker Connection TLS details
type LocalBrokerConnectionTlsResponseOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionTlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerConnectionTlsResponse)(nil)).Elem()
}

func (o LocalBrokerConnectionTlsResponseOutput) ToLocalBrokerConnectionTlsResponseOutput() LocalBrokerConnectionTlsResponseOutput {
	return o
}

func (o LocalBrokerConnectionTlsResponseOutput) ToLocalBrokerConnectionTlsResponseOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsResponseOutput {
	return o
}

// Tls Enabled on Local Broker Connection.
func (o LocalBrokerConnectionTlsResponseOutput) TlsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionTlsResponse) *bool { return v.TlsEnabled }).(pulumi.BoolPtrOutput)
}

// Trusted CA certificate config map name for Local Broker.
func (o LocalBrokerConnectionTlsResponseOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerConnectionTlsResponse) *string { return v.TrustedCaCertificateConfigMap }).(pulumi.StringPtrOutput)
}

type LocalBrokerConnectionTlsResponsePtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerConnectionTlsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerConnectionTlsResponse)(nil)).Elem()
}

func (o LocalBrokerConnectionTlsResponsePtrOutput) ToLocalBrokerConnectionTlsResponsePtrOutput() LocalBrokerConnectionTlsResponsePtrOutput {
	return o
}

func (o LocalBrokerConnectionTlsResponsePtrOutput) ToLocalBrokerConnectionTlsResponsePtrOutputWithContext(ctx context.Context) LocalBrokerConnectionTlsResponsePtrOutput {
	return o
}

func (o LocalBrokerConnectionTlsResponsePtrOutput) Elem() LocalBrokerConnectionTlsResponseOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionTlsResponse) LocalBrokerConnectionTlsResponse {
		if v != nil {
			return *v
		}
		var ret LocalBrokerConnectionTlsResponse
		return ret
	}).(LocalBrokerConnectionTlsResponseOutput)
}

// Tls Enabled on Local Broker Connection.
func (o LocalBrokerConnectionTlsResponsePtrOutput) TlsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionTlsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TlsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Trusted CA certificate config map name for Local Broker.
func (o LocalBrokerConnectionTlsResponsePtrOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerConnectionTlsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrustedCaCertificateConfigMap
	}).(pulumi.StringPtrOutput)
}

// Local Broker Kubernetes Authentication
type LocalBrokerKubernetesAuthentication struct {
	// Secret Path where SAT is mounted.
	SecretPath *string `pulumi:"secretPath"`
	// Token name where SAT is mounted on secret path.
	ServiceAccountTokenName *string `pulumi:"serviceAccountTokenName"`
}

// Defaults sets the appropriate defaults for LocalBrokerKubernetesAuthentication
func (val *LocalBrokerKubernetesAuthentication) Defaults() *LocalBrokerKubernetesAuthentication {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SecretPath == nil {
		secretPath_ := "/var/run/serviceaccount/localbroker"
		tmp.SecretPath = &secretPath_
	}
	if tmp.ServiceAccountTokenName == nil {
		serviceAccountTokenName_ := "sat"
		tmp.ServiceAccountTokenName = &serviceAccountTokenName_
	}
	return &tmp
}

// LocalBrokerKubernetesAuthenticationInput is an input type that accepts LocalBrokerKubernetesAuthenticationArgs and LocalBrokerKubernetesAuthenticationOutput values.
// You can construct a concrete instance of `LocalBrokerKubernetesAuthenticationInput` via:
//
//	LocalBrokerKubernetesAuthenticationArgs{...}
type LocalBrokerKubernetesAuthenticationInput interface {
	pulumi.Input

	ToLocalBrokerKubernetesAuthenticationOutput() LocalBrokerKubernetesAuthenticationOutput
	ToLocalBrokerKubernetesAuthenticationOutputWithContext(context.Context) LocalBrokerKubernetesAuthenticationOutput
}

// Local Broker Kubernetes Authentication
type LocalBrokerKubernetesAuthenticationArgs struct {
	// Secret Path where SAT is mounted.
	SecretPath pulumi.StringPtrInput `pulumi:"secretPath"`
	// Token name where SAT is mounted on secret path.
	ServiceAccountTokenName pulumi.StringPtrInput `pulumi:"serviceAccountTokenName"`
}

// Defaults sets the appropriate defaults for LocalBrokerKubernetesAuthenticationArgs
func (val *LocalBrokerKubernetesAuthenticationArgs) Defaults() *LocalBrokerKubernetesAuthenticationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SecretPath == nil {
		tmp.SecretPath = pulumi.StringPtr("/var/run/serviceaccount/localbroker")
	}
	if tmp.ServiceAccountTokenName == nil {
		tmp.ServiceAccountTokenName = pulumi.StringPtr("sat")
	}
	return &tmp
}
func (LocalBrokerKubernetesAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerKubernetesAuthentication)(nil)).Elem()
}

func (i LocalBrokerKubernetesAuthenticationArgs) ToLocalBrokerKubernetesAuthenticationOutput() LocalBrokerKubernetesAuthenticationOutput {
	return i.ToLocalBrokerKubernetesAuthenticationOutputWithContext(context.Background())
}

func (i LocalBrokerKubernetesAuthenticationArgs) ToLocalBrokerKubernetesAuthenticationOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerKubernetesAuthenticationOutput)
}

func (i LocalBrokerKubernetesAuthenticationArgs) ToLocalBrokerKubernetesAuthenticationPtrOutput() LocalBrokerKubernetesAuthenticationPtrOutput {
	return i.ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(context.Background())
}

func (i LocalBrokerKubernetesAuthenticationArgs) ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerKubernetesAuthenticationOutput).ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(ctx)
}

// LocalBrokerKubernetesAuthenticationPtrInput is an input type that accepts LocalBrokerKubernetesAuthenticationArgs, LocalBrokerKubernetesAuthenticationPtr and LocalBrokerKubernetesAuthenticationPtrOutput values.
// You can construct a concrete instance of `LocalBrokerKubernetesAuthenticationPtrInput` via:
//
//	        LocalBrokerKubernetesAuthenticationArgs{...}
//
//	or:
//
//	        nil
type LocalBrokerKubernetesAuthenticationPtrInput interface {
	pulumi.Input

	ToLocalBrokerKubernetesAuthenticationPtrOutput() LocalBrokerKubernetesAuthenticationPtrOutput
	ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(context.Context) LocalBrokerKubernetesAuthenticationPtrOutput
}

type localBrokerKubernetesAuthenticationPtrType LocalBrokerKubernetesAuthenticationArgs

func LocalBrokerKubernetesAuthenticationPtr(v *LocalBrokerKubernetesAuthenticationArgs) LocalBrokerKubernetesAuthenticationPtrInput {
	return (*localBrokerKubernetesAuthenticationPtrType)(v)
}

func (*localBrokerKubernetesAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerKubernetesAuthentication)(nil)).Elem()
}

func (i *localBrokerKubernetesAuthenticationPtrType) ToLocalBrokerKubernetesAuthenticationPtrOutput() LocalBrokerKubernetesAuthenticationPtrOutput {
	return i.ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(context.Background())
}

func (i *localBrokerKubernetesAuthenticationPtrType) ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalBrokerKubernetesAuthenticationPtrOutput)
}

// Local Broker Kubernetes Authentication
type LocalBrokerKubernetesAuthenticationOutput struct{ *pulumi.OutputState }

func (LocalBrokerKubernetesAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerKubernetesAuthentication)(nil)).Elem()
}

func (o LocalBrokerKubernetesAuthenticationOutput) ToLocalBrokerKubernetesAuthenticationOutput() LocalBrokerKubernetesAuthenticationOutput {
	return o
}

func (o LocalBrokerKubernetesAuthenticationOutput) ToLocalBrokerKubernetesAuthenticationOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationOutput {
	return o
}

func (o LocalBrokerKubernetesAuthenticationOutput) ToLocalBrokerKubernetesAuthenticationPtrOutput() LocalBrokerKubernetesAuthenticationPtrOutput {
	return o.ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(context.Background())
}

func (o LocalBrokerKubernetesAuthenticationOutput) ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalBrokerKubernetesAuthentication) *LocalBrokerKubernetesAuthentication {
		return &v
	}).(LocalBrokerKubernetesAuthenticationPtrOutput)
}

// Secret Path where SAT is mounted.
func (o LocalBrokerKubernetesAuthenticationOutput) SecretPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerKubernetesAuthentication) *string { return v.SecretPath }).(pulumi.StringPtrOutput)
}

// Token name where SAT is mounted on secret path.
func (o LocalBrokerKubernetesAuthenticationOutput) ServiceAccountTokenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerKubernetesAuthentication) *string { return v.ServiceAccountTokenName }).(pulumi.StringPtrOutput)
}

type LocalBrokerKubernetesAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerKubernetesAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerKubernetesAuthentication)(nil)).Elem()
}

func (o LocalBrokerKubernetesAuthenticationPtrOutput) ToLocalBrokerKubernetesAuthenticationPtrOutput() LocalBrokerKubernetesAuthenticationPtrOutput {
	return o
}

func (o LocalBrokerKubernetesAuthenticationPtrOutput) ToLocalBrokerKubernetesAuthenticationPtrOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationPtrOutput {
	return o
}

func (o LocalBrokerKubernetesAuthenticationPtrOutput) Elem() LocalBrokerKubernetesAuthenticationOutput {
	return o.ApplyT(func(v *LocalBrokerKubernetesAuthentication) LocalBrokerKubernetesAuthentication {
		if v != nil {
			return *v
		}
		var ret LocalBrokerKubernetesAuthentication
		return ret
	}).(LocalBrokerKubernetesAuthenticationOutput)
}

// Secret Path where SAT is mounted.
func (o LocalBrokerKubernetesAuthenticationPtrOutput) SecretPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerKubernetesAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretPath
	}).(pulumi.StringPtrOutput)
}

// Token name where SAT is mounted on secret path.
func (o LocalBrokerKubernetesAuthenticationPtrOutput) ServiceAccountTokenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerKubernetesAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountTokenName
	}).(pulumi.StringPtrOutput)
}

// Local Broker Kubernetes Authentication
type LocalBrokerKubernetesAuthenticationResponse struct {
	// Secret Path where SAT is mounted.
	SecretPath *string `pulumi:"secretPath"`
	// Token name where SAT is mounted on secret path.
	ServiceAccountTokenName *string `pulumi:"serviceAccountTokenName"`
}

// Defaults sets the appropriate defaults for LocalBrokerKubernetesAuthenticationResponse
func (val *LocalBrokerKubernetesAuthenticationResponse) Defaults() *LocalBrokerKubernetesAuthenticationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SecretPath == nil {
		secretPath_ := "/var/run/serviceaccount/localbroker"
		tmp.SecretPath = &secretPath_
	}
	if tmp.ServiceAccountTokenName == nil {
		serviceAccountTokenName_ := "sat"
		tmp.ServiceAccountTokenName = &serviceAccountTokenName_
	}
	return &tmp
}

// Local Broker Kubernetes Authentication
type LocalBrokerKubernetesAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (LocalBrokerKubernetesAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalBrokerKubernetesAuthenticationResponse)(nil)).Elem()
}

func (o LocalBrokerKubernetesAuthenticationResponseOutput) ToLocalBrokerKubernetesAuthenticationResponseOutput() LocalBrokerKubernetesAuthenticationResponseOutput {
	return o
}

func (o LocalBrokerKubernetesAuthenticationResponseOutput) ToLocalBrokerKubernetesAuthenticationResponseOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationResponseOutput {
	return o
}

// Secret Path where SAT is mounted.
func (o LocalBrokerKubernetesAuthenticationResponseOutput) SecretPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerKubernetesAuthenticationResponse) *string { return v.SecretPath }).(pulumi.StringPtrOutput)
}

// Token name where SAT is mounted on secret path.
func (o LocalBrokerKubernetesAuthenticationResponseOutput) ServiceAccountTokenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalBrokerKubernetesAuthenticationResponse) *string { return v.ServiceAccountTokenName }).(pulumi.StringPtrOutput)
}

type LocalBrokerKubernetesAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (LocalBrokerKubernetesAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalBrokerKubernetesAuthenticationResponse)(nil)).Elem()
}

func (o LocalBrokerKubernetesAuthenticationResponsePtrOutput) ToLocalBrokerKubernetesAuthenticationResponsePtrOutput() LocalBrokerKubernetesAuthenticationResponsePtrOutput {
	return o
}

func (o LocalBrokerKubernetesAuthenticationResponsePtrOutput) ToLocalBrokerKubernetesAuthenticationResponsePtrOutputWithContext(ctx context.Context) LocalBrokerKubernetesAuthenticationResponsePtrOutput {
	return o
}

func (o LocalBrokerKubernetesAuthenticationResponsePtrOutput) Elem() LocalBrokerKubernetesAuthenticationResponseOutput {
	return o.ApplyT(func(v *LocalBrokerKubernetesAuthenticationResponse) LocalBrokerKubernetesAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret LocalBrokerKubernetesAuthenticationResponse
		return ret
	}).(LocalBrokerKubernetesAuthenticationResponseOutput)
}

// Secret Path where SAT is mounted.
func (o LocalBrokerKubernetesAuthenticationResponsePtrOutput) SecretPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerKubernetesAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretPath
	}).(pulumi.StringPtrOutput)
}

// Token name where SAT is mounted on secret path.
func (o LocalBrokerKubernetesAuthenticationResponsePtrOutput) ServiceAccountTokenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalBrokerKubernetesAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountTokenName
	}).(pulumi.StringPtrOutput)
}

// Managed identity authentication details.
type ManagedIdentityAuthentication struct {
	// Token audience.
	Audience string `pulumi:"audience"`
	// Arc Extension name.
	ExtensionName *string `pulumi:"extensionName"`
}

// ManagedIdentityAuthenticationInput is an input type that accepts ManagedIdentityAuthenticationArgs and ManagedIdentityAuthenticationOutput values.
// You can construct a concrete instance of `ManagedIdentityAuthenticationInput` via:
//
//	ManagedIdentityAuthenticationArgs{...}
type ManagedIdentityAuthenticationInput interface {
	pulumi.Input

	ToManagedIdentityAuthenticationOutput() ManagedIdentityAuthenticationOutput
	ToManagedIdentityAuthenticationOutputWithContext(context.Context) ManagedIdentityAuthenticationOutput
}

// Managed identity authentication details.
type ManagedIdentityAuthenticationArgs struct {
	// Token audience.
	Audience pulumi.StringInput `pulumi:"audience"`
	// Arc Extension name.
	ExtensionName pulumi.StringPtrInput `pulumi:"extensionName"`
}

func (ManagedIdentityAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthentication)(nil)).Elem()
}

func (i ManagedIdentityAuthenticationArgs) ToManagedIdentityAuthenticationOutput() ManagedIdentityAuthenticationOutput {
	return i.ToManagedIdentityAuthenticationOutputWithContext(context.Background())
}

func (i ManagedIdentityAuthenticationArgs) ToManagedIdentityAuthenticationOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthenticationOutput)
}

func (i ManagedIdentityAuthenticationArgs) ToManagedIdentityAuthenticationPtrOutput() ManagedIdentityAuthenticationPtrOutput {
	return i.ToManagedIdentityAuthenticationPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityAuthenticationArgs) ToManagedIdentityAuthenticationPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthenticationOutput).ToManagedIdentityAuthenticationPtrOutputWithContext(ctx)
}

// ManagedIdentityAuthenticationPtrInput is an input type that accepts ManagedIdentityAuthenticationArgs, ManagedIdentityAuthenticationPtr and ManagedIdentityAuthenticationPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityAuthenticationPtrInput` via:
//
//	        ManagedIdentityAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityAuthenticationPtrInput interface {
	pulumi.Input

	ToManagedIdentityAuthenticationPtrOutput() ManagedIdentityAuthenticationPtrOutput
	ToManagedIdentityAuthenticationPtrOutputWithContext(context.Context) ManagedIdentityAuthenticationPtrOutput
}

type managedIdentityAuthenticationPtrType ManagedIdentityAuthenticationArgs

func ManagedIdentityAuthenticationPtr(v *ManagedIdentityAuthenticationArgs) ManagedIdentityAuthenticationPtrInput {
	return (*managedIdentityAuthenticationPtrType)(v)
}

func (*managedIdentityAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityAuthentication)(nil)).Elem()
}

func (i *managedIdentityAuthenticationPtrType) ToManagedIdentityAuthenticationPtrOutput() ManagedIdentityAuthenticationPtrOutput {
	return i.ToManagedIdentityAuthenticationPtrOutputWithContext(context.Background())
}

func (i *managedIdentityAuthenticationPtrType) ToManagedIdentityAuthenticationPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthenticationPtrOutput)
}

// Managed identity authentication details.
type ManagedIdentityAuthenticationOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthentication)(nil)).Elem()
}

func (o ManagedIdentityAuthenticationOutput) ToManagedIdentityAuthenticationOutput() ManagedIdentityAuthenticationOutput {
	return o
}

func (o ManagedIdentityAuthenticationOutput) ToManagedIdentityAuthenticationOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationOutput {
	return o
}

func (o ManagedIdentityAuthenticationOutput) ToManagedIdentityAuthenticationPtrOutput() ManagedIdentityAuthenticationPtrOutput {
	return o.ToManagedIdentityAuthenticationPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityAuthenticationOutput) ToManagedIdentityAuthenticationPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentityAuthentication) *ManagedIdentityAuthentication {
		return &v
	}).(ManagedIdentityAuthenticationPtrOutput)
}

// Token audience.
func (o ManagedIdentityAuthenticationOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthentication) string { return v.Audience }).(pulumi.StringOutput)
}

// Arc Extension name.
func (o ManagedIdentityAuthenticationOutput) ExtensionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthentication) *string { return v.ExtensionName }).(pulumi.StringPtrOutput)
}

type ManagedIdentityAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityAuthentication)(nil)).Elem()
}

func (o ManagedIdentityAuthenticationPtrOutput) ToManagedIdentityAuthenticationPtrOutput() ManagedIdentityAuthenticationPtrOutput {
	return o
}

func (o ManagedIdentityAuthenticationPtrOutput) ToManagedIdentityAuthenticationPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationPtrOutput {
	return o
}

func (o ManagedIdentityAuthenticationPtrOutput) Elem() ManagedIdentityAuthenticationOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthentication) ManagedIdentityAuthentication {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityAuthentication
		return ret
	}).(ManagedIdentityAuthenticationOutput)
}

// Token audience.
func (o ManagedIdentityAuthenticationPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Audience
	}).(pulumi.StringPtrOutput)
}

// Arc Extension name.
func (o ManagedIdentityAuthenticationPtrOutput) ExtensionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionName
	}).(pulumi.StringPtrOutput)
}

// Managed identity authentication details.
type ManagedIdentityAuthenticationResponse struct {
	// Token audience.
	Audience string `pulumi:"audience"`
	// Arc Extension name.
	ExtensionName *string `pulumi:"extensionName"`
}

// Managed identity authentication details.
type ManagedIdentityAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthenticationResponse)(nil)).Elem()
}

func (o ManagedIdentityAuthenticationResponseOutput) ToManagedIdentityAuthenticationResponseOutput() ManagedIdentityAuthenticationResponseOutput {
	return o
}

func (o ManagedIdentityAuthenticationResponseOutput) ToManagedIdentityAuthenticationResponseOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationResponseOutput {
	return o
}

// Token audience.
func (o ManagedIdentityAuthenticationResponseOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationResponse) string { return v.Audience }).(pulumi.StringOutput)
}

// Arc Extension name.
func (o ManagedIdentityAuthenticationResponseOutput) ExtensionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationResponse) *string { return v.ExtensionName }).(pulumi.StringPtrOutput)
}

type ManagedIdentityAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityAuthenticationResponse)(nil)).Elem()
}

func (o ManagedIdentityAuthenticationResponsePtrOutput) ToManagedIdentityAuthenticationResponsePtrOutput() ManagedIdentityAuthenticationResponsePtrOutput {
	return o
}

func (o ManagedIdentityAuthenticationResponsePtrOutput) ToManagedIdentityAuthenticationResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationResponsePtrOutput {
	return o
}

func (o ManagedIdentityAuthenticationResponsePtrOutput) Elem() ManagedIdentityAuthenticationResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthenticationResponse) ManagedIdentityAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityAuthenticationResponse
		return ret
	}).(ManagedIdentityAuthenticationResponseOutput)
}

// Token audience.
func (o ManagedIdentityAuthenticationResponsePtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Audience
	}).(pulumi.StringPtrOutput)
}

// Arc Extension name.
func (o ManagedIdentityAuthenticationResponsePtrOutput) ExtensionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionName
	}).(pulumi.StringPtrOutput)
}

// Manual TLS server certificate management through a defined secret
type ManualCertMethod struct {
	// secret containing TLS cert.
	SecretName string `pulumi:"secretName"`
	// namespace of secret; omit to use default namespace.
	SecretNamespace *string `pulumi:"secretNamespace"`
}

// ManualCertMethodInput is an input type that accepts ManualCertMethodArgs and ManualCertMethodOutput values.
// You can construct a concrete instance of `ManualCertMethodInput` via:
//
//	ManualCertMethodArgs{...}
type ManualCertMethodInput interface {
	pulumi.Input

	ToManualCertMethodOutput() ManualCertMethodOutput
	ToManualCertMethodOutputWithContext(context.Context) ManualCertMethodOutput
}

// Manual TLS server certificate management through a defined secret
type ManualCertMethodArgs struct {
	// secret containing TLS cert.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// namespace of secret; omit to use default namespace.
	SecretNamespace pulumi.StringPtrInput `pulumi:"secretNamespace"`
}

func (ManualCertMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualCertMethod)(nil)).Elem()
}

func (i ManualCertMethodArgs) ToManualCertMethodOutput() ManualCertMethodOutput {
	return i.ToManualCertMethodOutputWithContext(context.Background())
}

func (i ManualCertMethodArgs) ToManualCertMethodOutputWithContext(ctx context.Context) ManualCertMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualCertMethodOutput)
}

func (i ManualCertMethodArgs) ToManualCertMethodPtrOutput() ManualCertMethodPtrOutput {
	return i.ToManualCertMethodPtrOutputWithContext(context.Background())
}

func (i ManualCertMethodArgs) ToManualCertMethodPtrOutputWithContext(ctx context.Context) ManualCertMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualCertMethodOutput).ToManualCertMethodPtrOutputWithContext(ctx)
}

// ManualCertMethodPtrInput is an input type that accepts ManualCertMethodArgs, ManualCertMethodPtr and ManualCertMethodPtrOutput values.
// You can construct a concrete instance of `ManualCertMethodPtrInput` via:
//
//	        ManualCertMethodArgs{...}
//
//	or:
//
//	        nil
type ManualCertMethodPtrInput interface {
	pulumi.Input

	ToManualCertMethodPtrOutput() ManualCertMethodPtrOutput
	ToManualCertMethodPtrOutputWithContext(context.Context) ManualCertMethodPtrOutput
}

type manualCertMethodPtrType ManualCertMethodArgs

func ManualCertMethodPtr(v *ManualCertMethodArgs) ManualCertMethodPtrInput {
	return (*manualCertMethodPtrType)(v)
}

func (*manualCertMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualCertMethod)(nil)).Elem()
}

func (i *manualCertMethodPtrType) ToManualCertMethodPtrOutput() ManualCertMethodPtrOutput {
	return i.ToManualCertMethodPtrOutputWithContext(context.Background())
}

func (i *manualCertMethodPtrType) ToManualCertMethodPtrOutputWithContext(ctx context.Context) ManualCertMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManualCertMethodPtrOutput)
}

// Manual TLS server certificate management through a defined secret
type ManualCertMethodOutput struct{ *pulumi.OutputState }

func (ManualCertMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualCertMethod)(nil)).Elem()
}

func (o ManualCertMethodOutput) ToManualCertMethodOutput() ManualCertMethodOutput {
	return o
}

func (o ManualCertMethodOutput) ToManualCertMethodOutputWithContext(ctx context.Context) ManualCertMethodOutput {
	return o
}

func (o ManualCertMethodOutput) ToManualCertMethodPtrOutput() ManualCertMethodPtrOutput {
	return o.ToManualCertMethodPtrOutputWithContext(context.Background())
}

func (o ManualCertMethodOutput) ToManualCertMethodPtrOutputWithContext(ctx context.Context) ManualCertMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManualCertMethod) *ManualCertMethod {
		return &v
	}).(ManualCertMethodPtrOutput)
}

// secret containing TLS cert.
func (o ManualCertMethodOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v ManualCertMethod) string { return v.SecretName }).(pulumi.StringOutput)
}

// namespace of secret; omit to use default namespace.
func (o ManualCertMethodOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManualCertMethod) *string { return v.SecretNamespace }).(pulumi.StringPtrOutput)
}

type ManualCertMethodPtrOutput struct{ *pulumi.OutputState }

func (ManualCertMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualCertMethod)(nil)).Elem()
}

func (o ManualCertMethodPtrOutput) ToManualCertMethodPtrOutput() ManualCertMethodPtrOutput {
	return o
}

func (o ManualCertMethodPtrOutput) ToManualCertMethodPtrOutputWithContext(ctx context.Context) ManualCertMethodPtrOutput {
	return o
}

func (o ManualCertMethodPtrOutput) Elem() ManualCertMethodOutput {
	return o.ApplyT(func(v *ManualCertMethod) ManualCertMethod {
		if v != nil {
			return *v
		}
		var ret ManualCertMethod
		return ret
	}).(ManualCertMethodOutput)
}

// secret containing TLS cert.
func (o ManualCertMethodPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualCertMethod) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// namespace of secret; omit to use default namespace.
func (o ManualCertMethodPtrOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualCertMethod) *string {
		if v == nil {
			return nil
		}
		return v.SecretNamespace
	}).(pulumi.StringPtrOutput)
}

// Manual TLS server certificate management through a defined secret
type ManualCertMethodResponse struct {
	// secret containing TLS cert.
	SecretName string `pulumi:"secretName"`
	// namespace of secret; omit to use default namespace.
	SecretNamespace *string `pulumi:"secretNamespace"`
}

// Manual TLS server certificate management through a defined secret
type ManualCertMethodResponseOutput struct{ *pulumi.OutputState }

func (ManualCertMethodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManualCertMethodResponse)(nil)).Elem()
}

func (o ManualCertMethodResponseOutput) ToManualCertMethodResponseOutput() ManualCertMethodResponseOutput {
	return o
}

func (o ManualCertMethodResponseOutput) ToManualCertMethodResponseOutputWithContext(ctx context.Context) ManualCertMethodResponseOutput {
	return o
}

// secret containing TLS cert.
func (o ManualCertMethodResponseOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v ManualCertMethodResponse) string { return v.SecretName }).(pulumi.StringOutput)
}

// namespace of secret; omit to use default namespace.
func (o ManualCertMethodResponseOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManualCertMethodResponse) *string { return v.SecretNamespace }).(pulumi.StringPtrOutput)
}

type ManualCertMethodResponsePtrOutput struct{ *pulumi.OutputState }

func (ManualCertMethodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManualCertMethodResponse)(nil)).Elem()
}

func (o ManualCertMethodResponsePtrOutput) ToManualCertMethodResponsePtrOutput() ManualCertMethodResponsePtrOutput {
	return o
}

func (o ManualCertMethodResponsePtrOutput) ToManualCertMethodResponsePtrOutputWithContext(ctx context.Context) ManualCertMethodResponsePtrOutput {
	return o
}

func (o ManualCertMethodResponsePtrOutput) Elem() ManualCertMethodResponseOutput {
	return o.ApplyT(func(v *ManualCertMethodResponse) ManualCertMethodResponse {
		if v != nil {
			return *v
		}
		var ret ManualCertMethodResponse
		return ret
	}).(ManualCertMethodResponseOutput)
}

// secret containing TLS cert.
func (o ManualCertMethodResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualCertMethodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// namespace of secret; omit to use default namespace.
func (o ManualCertMethodResponsePtrOutput) SecretNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManualCertMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretNamespace
	}).(pulumi.StringPtrOutput)
}

// MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.
type MqttBridgeRemoteBrokerAuthenticationMethods struct {
	// Managed identity remote broker authentication method.
	SystemAssignedManagedIdentity *ManagedIdentityAuthentication `pulumi:"systemAssignedManagedIdentity"`
	// X509 remote broker authentication method.
	X509 *MqttBridgeRemoteBrokerX509Authentication `pulumi:"x509"`
}

// MqttBridgeRemoteBrokerAuthenticationMethodsInput is an input type that accepts MqttBridgeRemoteBrokerAuthenticationMethodsArgs and MqttBridgeRemoteBrokerAuthenticationMethodsOutput values.
// You can construct a concrete instance of `MqttBridgeRemoteBrokerAuthenticationMethodsInput` via:
//
//	MqttBridgeRemoteBrokerAuthenticationMethodsArgs{...}
type MqttBridgeRemoteBrokerAuthenticationMethodsInput interface {
	pulumi.Input

	ToMqttBridgeRemoteBrokerAuthenticationMethodsOutput() MqttBridgeRemoteBrokerAuthenticationMethodsOutput
	ToMqttBridgeRemoteBrokerAuthenticationMethodsOutputWithContext(context.Context) MqttBridgeRemoteBrokerAuthenticationMethodsOutput
}

// MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.
type MqttBridgeRemoteBrokerAuthenticationMethodsArgs struct {
	// Managed identity remote broker authentication method.
	SystemAssignedManagedIdentity ManagedIdentityAuthenticationPtrInput `pulumi:"systemAssignedManagedIdentity"`
	// X509 remote broker authentication method.
	X509 MqttBridgeRemoteBrokerX509AuthenticationPtrInput `pulumi:"x509"`
}

func (MqttBridgeRemoteBrokerAuthenticationMethodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerAuthenticationMethods)(nil)).Elem()
}

func (i MqttBridgeRemoteBrokerAuthenticationMethodsArgs) ToMqttBridgeRemoteBrokerAuthenticationMethodsOutput() MqttBridgeRemoteBrokerAuthenticationMethodsOutput {
	return i.ToMqttBridgeRemoteBrokerAuthenticationMethodsOutputWithContext(context.Background())
}

func (i MqttBridgeRemoteBrokerAuthenticationMethodsArgs) ToMqttBridgeRemoteBrokerAuthenticationMethodsOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerAuthenticationMethodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRemoteBrokerAuthenticationMethodsOutput)
}

// MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.
type MqttBridgeRemoteBrokerAuthenticationMethodsOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerAuthenticationMethodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerAuthenticationMethods)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerAuthenticationMethodsOutput) ToMqttBridgeRemoteBrokerAuthenticationMethodsOutput() MqttBridgeRemoteBrokerAuthenticationMethodsOutput {
	return o
}

func (o MqttBridgeRemoteBrokerAuthenticationMethodsOutput) ToMqttBridgeRemoteBrokerAuthenticationMethodsOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerAuthenticationMethodsOutput {
	return o
}

// Managed identity remote broker authentication method.
func (o MqttBridgeRemoteBrokerAuthenticationMethodsOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerAuthenticationMethods) *ManagedIdentityAuthentication {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationPtrOutput)
}

// X509 remote broker authentication method.
func (o MqttBridgeRemoteBrokerAuthenticationMethodsOutput) X509() MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerAuthenticationMethods) *MqttBridgeRemoteBrokerX509Authentication {
		return v.X509
	}).(MqttBridgeRemoteBrokerX509AuthenticationPtrOutput)
}

// MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.
type MqttBridgeRemoteBrokerAuthenticationMethodsResponse struct {
	// Managed identity remote broker authentication method.
	SystemAssignedManagedIdentity *ManagedIdentityAuthenticationResponse `pulumi:"systemAssignedManagedIdentity"`
	// X509 remote broker authentication method.
	X509 *MqttBridgeRemoteBrokerX509AuthenticationResponse `pulumi:"x509"`
}

// MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.
type MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerAuthenticationMethodsResponse)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput) ToMqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput() MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput {
	return o
}

func (o MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput) ToMqttBridgeRemoteBrokerAuthenticationMethodsResponseOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput {
	return o
}

// Managed identity remote broker authentication method.
func (o MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput) SystemAssignedManagedIdentity() ManagedIdentityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerAuthenticationMethodsResponse) *ManagedIdentityAuthenticationResponse {
		return v.SystemAssignedManagedIdentity
	}).(ManagedIdentityAuthenticationResponsePtrOutput)
}

// X509 remote broker authentication method.
func (o MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput) X509() MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerAuthenticationMethodsResponse) *MqttBridgeRemoteBrokerX509AuthenticationResponse {
		return v.X509
	}).(MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput)
}

// MqttBridge RemoteBrokerConnectionSpec details
type MqttBridgeRemoteBrokerConnectionSpec struct {
	// The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.
	Authentication MqttBridgeRemoteBrokerAuthenticationMethods `pulumi:"authentication"`
	// The endpoint of remote broker to connect to.
	Endpoint string `pulumi:"endpoint"`
	// Protocol for remote connection.
	Protocol *string `pulumi:"protocol"`
	// TLS details for Remote broker Connection.
	Tls MqttBridgeRemoteBrokerConnectionTls `pulumi:"tls"`
}

// Defaults sets the appropriate defaults for MqttBridgeRemoteBrokerConnectionSpec
func (val *MqttBridgeRemoteBrokerConnectionSpec) Defaults() *MqttBridgeRemoteBrokerConnectionSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "mqtt"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// MqttBridgeRemoteBrokerConnectionSpecInput is an input type that accepts MqttBridgeRemoteBrokerConnectionSpecArgs and MqttBridgeRemoteBrokerConnectionSpecOutput values.
// You can construct a concrete instance of `MqttBridgeRemoteBrokerConnectionSpecInput` via:
//
//	MqttBridgeRemoteBrokerConnectionSpecArgs{...}
type MqttBridgeRemoteBrokerConnectionSpecInput interface {
	pulumi.Input

	ToMqttBridgeRemoteBrokerConnectionSpecOutput() MqttBridgeRemoteBrokerConnectionSpecOutput
	ToMqttBridgeRemoteBrokerConnectionSpecOutputWithContext(context.Context) MqttBridgeRemoteBrokerConnectionSpecOutput
}

// MqttBridge RemoteBrokerConnectionSpec details
type MqttBridgeRemoteBrokerConnectionSpecArgs struct {
	// The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.
	Authentication MqttBridgeRemoteBrokerAuthenticationMethodsInput `pulumi:"authentication"`
	// The endpoint of remote broker to connect to.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Protocol for remote connection.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// TLS details for Remote broker Connection.
	Tls MqttBridgeRemoteBrokerConnectionTlsInput `pulumi:"tls"`
}

// Defaults sets the appropriate defaults for MqttBridgeRemoteBrokerConnectionSpecArgs
func (val *MqttBridgeRemoteBrokerConnectionSpecArgs) Defaults() *MqttBridgeRemoteBrokerConnectionSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("mqtt")
	}
	return &tmp
}
func (MqttBridgeRemoteBrokerConnectionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerConnectionSpec)(nil)).Elem()
}

func (i MqttBridgeRemoteBrokerConnectionSpecArgs) ToMqttBridgeRemoteBrokerConnectionSpecOutput() MqttBridgeRemoteBrokerConnectionSpecOutput {
	return i.ToMqttBridgeRemoteBrokerConnectionSpecOutputWithContext(context.Background())
}

func (i MqttBridgeRemoteBrokerConnectionSpecArgs) ToMqttBridgeRemoteBrokerConnectionSpecOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerConnectionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRemoteBrokerConnectionSpecOutput)
}

// MqttBridge RemoteBrokerConnectionSpec details
type MqttBridgeRemoteBrokerConnectionSpecOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerConnectionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerConnectionSpec)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerConnectionSpecOutput) ToMqttBridgeRemoteBrokerConnectionSpecOutput() MqttBridgeRemoteBrokerConnectionSpecOutput {
	return o
}

func (o MqttBridgeRemoteBrokerConnectionSpecOutput) ToMqttBridgeRemoteBrokerConnectionSpecOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerConnectionSpecOutput {
	return o
}

// The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.
func (o MqttBridgeRemoteBrokerConnectionSpecOutput) Authentication() MqttBridgeRemoteBrokerAuthenticationMethodsOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpec) MqttBridgeRemoteBrokerAuthenticationMethods {
		return v.Authentication
	}).(MqttBridgeRemoteBrokerAuthenticationMethodsOutput)
}

// The endpoint of remote broker to connect to.
func (o MqttBridgeRemoteBrokerConnectionSpecOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpec) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Protocol for remote connection.
func (o MqttBridgeRemoteBrokerConnectionSpecOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpec) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// TLS details for Remote broker Connection.
func (o MqttBridgeRemoteBrokerConnectionSpecOutput) Tls() MqttBridgeRemoteBrokerConnectionTlsOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpec) MqttBridgeRemoteBrokerConnectionTls { return v.Tls }).(MqttBridgeRemoteBrokerConnectionTlsOutput)
}

// MqttBridge RemoteBrokerConnectionSpec details
type MqttBridgeRemoteBrokerConnectionSpecResponse struct {
	// The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.
	Authentication MqttBridgeRemoteBrokerAuthenticationMethodsResponse `pulumi:"authentication"`
	// The endpoint of remote broker to connect to.
	Endpoint string `pulumi:"endpoint"`
	// Protocol for remote connection.
	Protocol *string `pulumi:"protocol"`
	// TLS details for Remote broker Connection.
	Tls MqttBridgeRemoteBrokerConnectionTlsResponse `pulumi:"tls"`
}

// Defaults sets the appropriate defaults for MqttBridgeRemoteBrokerConnectionSpecResponse
func (val *MqttBridgeRemoteBrokerConnectionSpecResponse) Defaults() *MqttBridgeRemoteBrokerConnectionSpecResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "mqtt"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// MqttBridge RemoteBrokerConnectionSpec details
type MqttBridgeRemoteBrokerConnectionSpecResponseOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerConnectionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerConnectionSpecResponse)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerConnectionSpecResponseOutput) ToMqttBridgeRemoteBrokerConnectionSpecResponseOutput() MqttBridgeRemoteBrokerConnectionSpecResponseOutput {
	return o
}

func (o MqttBridgeRemoteBrokerConnectionSpecResponseOutput) ToMqttBridgeRemoteBrokerConnectionSpecResponseOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerConnectionSpecResponseOutput {
	return o
}

// The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.
func (o MqttBridgeRemoteBrokerConnectionSpecResponseOutput) Authentication() MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpecResponse) MqttBridgeRemoteBrokerAuthenticationMethodsResponse {
		return v.Authentication
	}).(MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput)
}

// The endpoint of remote broker to connect to.
func (o MqttBridgeRemoteBrokerConnectionSpecResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpecResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Protocol for remote connection.
func (o MqttBridgeRemoteBrokerConnectionSpecResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpecResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// TLS details for Remote broker Connection.
func (o MqttBridgeRemoteBrokerConnectionSpecResponseOutput) Tls() MqttBridgeRemoteBrokerConnectionTlsResponseOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionSpecResponse) MqttBridgeRemoteBrokerConnectionTlsResponse {
		return v.Tls
	}).(MqttBridgeRemoteBrokerConnectionTlsResponseOutput)
}

// MqttBridge RemoteBrokerConnection TLS details
type MqttBridgeRemoteBrokerConnectionTls struct {
	// Tls Enabled on Remote Broker Connection.
	TlsEnabled bool `pulumi:"tlsEnabled"`
	// Trusted CA certificate name for Remote Broker.
	TrustedCaCertificateConfigMap *string `pulumi:"trustedCaCertificateConfigMap"`
}

// MqttBridgeRemoteBrokerConnectionTlsInput is an input type that accepts MqttBridgeRemoteBrokerConnectionTlsArgs and MqttBridgeRemoteBrokerConnectionTlsOutput values.
// You can construct a concrete instance of `MqttBridgeRemoteBrokerConnectionTlsInput` via:
//
//	MqttBridgeRemoteBrokerConnectionTlsArgs{...}
type MqttBridgeRemoteBrokerConnectionTlsInput interface {
	pulumi.Input

	ToMqttBridgeRemoteBrokerConnectionTlsOutput() MqttBridgeRemoteBrokerConnectionTlsOutput
	ToMqttBridgeRemoteBrokerConnectionTlsOutputWithContext(context.Context) MqttBridgeRemoteBrokerConnectionTlsOutput
}

// MqttBridge RemoteBrokerConnection TLS details
type MqttBridgeRemoteBrokerConnectionTlsArgs struct {
	// Tls Enabled on Remote Broker Connection.
	TlsEnabled pulumi.BoolInput `pulumi:"tlsEnabled"`
	// Trusted CA certificate name for Remote Broker.
	TrustedCaCertificateConfigMap pulumi.StringPtrInput `pulumi:"trustedCaCertificateConfigMap"`
}

func (MqttBridgeRemoteBrokerConnectionTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerConnectionTls)(nil)).Elem()
}

func (i MqttBridgeRemoteBrokerConnectionTlsArgs) ToMqttBridgeRemoteBrokerConnectionTlsOutput() MqttBridgeRemoteBrokerConnectionTlsOutput {
	return i.ToMqttBridgeRemoteBrokerConnectionTlsOutputWithContext(context.Background())
}

func (i MqttBridgeRemoteBrokerConnectionTlsArgs) ToMqttBridgeRemoteBrokerConnectionTlsOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerConnectionTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRemoteBrokerConnectionTlsOutput)
}

// MqttBridge RemoteBrokerConnection TLS details
type MqttBridgeRemoteBrokerConnectionTlsOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerConnectionTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerConnectionTls)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerConnectionTlsOutput) ToMqttBridgeRemoteBrokerConnectionTlsOutput() MqttBridgeRemoteBrokerConnectionTlsOutput {
	return o
}

func (o MqttBridgeRemoteBrokerConnectionTlsOutput) ToMqttBridgeRemoteBrokerConnectionTlsOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerConnectionTlsOutput {
	return o
}

// Tls Enabled on Remote Broker Connection.
func (o MqttBridgeRemoteBrokerConnectionTlsOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionTls) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

// Trusted CA certificate name for Remote Broker.
func (o MqttBridgeRemoteBrokerConnectionTlsOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionTls) *string { return v.TrustedCaCertificateConfigMap }).(pulumi.StringPtrOutput)
}

// MqttBridge RemoteBrokerConnection TLS details
type MqttBridgeRemoteBrokerConnectionTlsResponse struct {
	// Tls Enabled on Remote Broker Connection.
	TlsEnabled bool `pulumi:"tlsEnabled"`
	// Trusted CA certificate name for Remote Broker.
	TrustedCaCertificateConfigMap *string `pulumi:"trustedCaCertificateConfigMap"`
}

// MqttBridge RemoteBrokerConnection TLS details
type MqttBridgeRemoteBrokerConnectionTlsResponseOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerConnectionTlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerConnectionTlsResponse)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerConnectionTlsResponseOutput) ToMqttBridgeRemoteBrokerConnectionTlsResponseOutput() MqttBridgeRemoteBrokerConnectionTlsResponseOutput {
	return o
}

func (o MqttBridgeRemoteBrokerConnectionTlsResponseOutput) ToMqttBridgeRemoteBrokerConnectionTlsResponseOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerConnectionTlsResponseOutput {
	return o
}

// Tls Enabled on Remote Broker Connection.
func (o MqttBridgeRemoteBrokerConnectionTlsResponseOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionTlsResponse) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

// Trusted CA certificate name for Remote Broker.
func (o MqttBridgeRemoteBrokerConnectionTlsResponseOutput) TrustedCaCertificateConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerConnectionTlsResponse) *string { return v.TrustedCaCertificateConfigMap }).(pulumi.StringPtrOutput)
}

// MqttBridge RemoteBroker X509 Authentication properties.
type MqttBridgeRemoteBrokerX509Authentication struct {
	// Keyvault X509 secret properties.
	KeyVault *KeyVaultCertificateProperties `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// MqttBridgeRemoteBrokerX509AuthenticationInput is an input type that accepts MqttBridgeRemoteBrokerX509AuthenticationArgs and MqttBridgeRemoteBrokerX509AuthenticationOutput values.
// You can construct a concrete instance of `MqttBridgeRemoteBrokerX509AuthenticationInput` via:
//
//	MqttBridgeRemoteBrokerX509AuthenticationArgs{...}
type MqttBridgeRemoteBrokerX509AuthenticationInput interface {
	pulumi.Input

	ToMqttBridgeRemoteBrokerX509AuthenticationOutput() MqttBridgeRemoteBrokerX509AuthenticationOutput
	ToMqttBridgeRemoteBrokerX509AuthenticationOutputWithContext(context.Context) MqttBridgeRemoteBrokerX509AuthenticationOutput
}

// MqttBridge RemoteBroker X509 Authentication properties.
type MqttBridgeRemoteBrokerX509AuthenticationArgs struct {
	// Keyvault X509 secret properties.
	KeyVault KeyVaultCertificatePropertiesPtrInput `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (MqttBridgeRemoteBrokerX509AuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerX509Authentication)(nil)).Elem()
}

func (i MqttBridgeRemoteBrokerX509AuthenticationArgs) ToMqttBridgeRemoteBrokerX509AuthenticationOutput() MqttBridgeRemoteBrokerX509AuthenticationOutput {
	return i.ToMqttBridgeRemoteBrokerX509AuthenticationOutputWithContext(context.Background())
}

func (i MqttBridgeRemoteBrokerX509AuthenticationArgs) ToMqttBridgeRemoteBrokerX509AuthenticationOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRemoteBrokerX509AuthenticationOutput)
}

func (i MqttBridgeRemoteBrokerX509AuthenticationArgs) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutput() MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return i.ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(context.Background())
}

func (i MqttBridgeRemoteBrokerX509AuthenticationArgs) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRemoteBrokerX509AuthenticationOutput).ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(ctx)
}

// MqttBridgeRemoteBrokerX509AuthenticationPtrInput is an input type that accepts MqttBridgeRemoteBrokerX509AuthenticationArgs, MqttBridgeRemoteBrokerX509AuthenticationPtr and MqttBridgeRemoteBrokerX509AuthenticationPtrOutput values.
// You can construct a concrete instance of `MqttBridgeRemoteBrokerX509AuthenticationPtrInput` via:
//
//	        MqttBridgeRemoteBrokerX509AuthenticationArgs{...}
//
//	or:
//
//	        nil
type MqttBridgeRemoteBrokerX509AuthenticationPtrInput interface {
	pulumi.Input

	ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutput() MqttBridgeRemoteBrokerX509AuthenticationPtrOutput
	ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(context.Context) MqttBridgeRemoteBrokerX509AuthenticationPtrOutput
}

type mqttBridgeRemoteBrokerX509AuthenticationPtrType MqttBridgeRemoteBrokerX509AuthenticationArgs

func MqttBridgeRemoteBrokerX509AuthenticationPtr(v *MqttBridgeRemoteBrokerX509AuthenticationArgs) MqttBridgeRemoteBrokerX509AuthenticationPtrInput {
	return (*mqttBridgeRemoteBrokerX509AuthenticationPtrType)(v)
}

func (*mqttBridgeRemoteBrokerX509AuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRemoteBrokerX509Authentication)(nil)).Elem()
}

func (i *mqttBridgeRemoteBrokerX509AuthenticationPtrType) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutput() MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return i.ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(context.Background())
}

func (i *mqttBridgeRemoteBrokerX509AuthenticationPtrType) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRemoteBrokerX509AuthenticationPtrOutput)
}

// MqttBridge RemoteBroker X509 Authentication properties.
type MqttBridgeRemoteBrokerX509AuthenticationOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerX509AuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerX509Authentication)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerX509AuthenticationOutput) ToMqttBridgeRemoteBrokerX509AuthenticationOutput() MqttBridgeRemoteBrokerX509AuthenticationOutput {
	return o
}

func (o MqttBridgeRemoteBrokerX509AuthenticationOutput) ToMqttBridgeRemoteBrokerX509AuthenticationOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationOutput {
	return o
}

func (o MqttBridgeRemoteBrokerX509AuthenticationOutput) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutput() MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return o.ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRemoteBrokerX509AuthenticationOutput) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MqttBridgeRemoteBrokerX509Authentication) *MqttBridgeRemoteBrokerX509Authentication {
		return &v
	}).(MqttBridgeRemoteBrokerX509AuthenticationPtrOutput)
}

// Keyvault X509 secret properties.
func (o MqttBridgeRemoteBrokerX509AuthenticationOutput) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerX509Authentication) *KeyVaultCertificateProperties { return v.KeyVault }).(KeyVaultCertificatePropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o MqttBridgeRemoteBrokerX509AuthenticationOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerX509Authentication) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type MqttBridgeRemoteBrokerX509AuthenticationPtrOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerX509AuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRemoteBrokerX509Authentication)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerX509AuthenticationPtrOutput) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutput() MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return o
}

func (o MqttBridgeRemoteBrokerX509AuthenticationPtrOutput) ToMqttBridgeRemoteBrokerX509AuthenticationPtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationPtrOutput {
	return o
}

func (o MqttBridgeRemoteBrokerX509AuthenticationPtrOutput) Elem() MqttBridgeRemoteBrokerX509AuthenticationOutput {
	return o.ApplyT(func(v *MqttBridgeRemoteBrokerX509Authentication) MqttBridgeRemoteBrokerX509Authentication {
		if v != nil {
			return *v
		}
		var ret MqttBridgeRemoteBrokerX509Authentication
		return ret
	}).(MqttBridgeRemoteBrokerX509AuthenticationOutput)
}

// Keyvault X509 secret properties.
func (o MqttBridgeRemoteBrokerX509AuthenticationPtrOutput) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v *MqttBridgeRemoteBrokerX509Authentication) *KeyVaultCertificateProperties {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o MqttBridgeRemoteBrokerX509AuthenticationPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttBridgeRemoteBrokerX509Authentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// MqttBridge RemoteBroker X509 Authentication properties.
type MqttBridgeRemoteBrokerX509AuthenticationResponse struct {
	// Keyvault X509 secret properties.
	KeyVault *KeyVaultCertificatePropertiesResponse `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// MqttBridge RemoteBroker X509 Authentication properties.
type MqttBridgeRemoteBrokerX509AuthenticationResponseOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerX509AuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRemoteBrokerX509AuthenticationResponse)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerX509AuthenticationResponseOutput) ToMqttBridgeRemoteBrokerX509AuthenticationResponseOutput() MqttBridgeRemoteBrokerX509AuthenticationResponseOutput {
	return o
}

func (o MqttBridgeRemoteBrokerX509AuthenticationResponseOutput) ToMqttBridgeRemoteBrokerX509AuthenticationResponseOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationResponseOutput {
	return o
}

// Keyvault X509 secret properties.
func (o MqttBridgeRemoteBrokerX509AuthenticationResponseOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerX509AuthenticationResponse) *KeyVaultCertificatePropertiesResponse {
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o MqttBridgeRemoteBrokerX509AuthenticationResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRemoteBrokerX509AuthenticationResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRemoteBrokerX509AuthenticationResponse)(nil)).Elem()
}

func (o MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput) ToMqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput() MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput {
	return o
}

func (o MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput) ToMqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutputWithContext(ctx context.Context) MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput {
	return o
}

func (o MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput) Elem() MqttBridgeRemoteBrokerX509AuthenticationResponseOutput {
	return o.ApplyT(func(v *MqttBridgeRemoteBrokerX509AuthenticationResponse) MqttBridgeRemoteBrokerX509AuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret MqttBridgeRemoteBrokerX509AuthenticationResponse
		return ret
	}).(MqttBridgeRemoteBrokerX509AuthenticationResponseOutput)
}

// Keyvault X509 secret properties.
func (o MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *MqttBridgeRemoteBrokerX509AuthenticationResponse) *KeyVaultCertificatePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttBridgeRemoteBrokerX509AuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// MqttBridgeRoute Shared subscription properties
type MqttBridgeRouteSharedSubscription struct {
	// The group shared subscription minimum share number.
	GroupMinimumShareNumber int `pulumi:"groupMinimumShareNumber"`
	// The group name for Shared subscription.
	GroupName string `pulumi:"groupName"`
}

// MqttBridgeRouteSharedSubscriptionInput is an input type that accepts MqttBridgeRouteSharedSubscriptionArgs and MqttBridgeRouteSharedSubscriptionOutput values.
// You can construct a concrete instance of `MqttBridgeRouteSharedSubscriptionInput` via:
//
//	MqttBridgeRouteSharedSubscriptionArgs{...}
type MqttBridgeRouteSharedSubscriptionInput interface {
	pulumi.Input

	ToMqttBridgeRouteSharedSubscriptionOutput() MqttBridgeRouteSharedSubscriptionOutput
	ToMqttBridgeRouteSharedSubscriptionOutputWithContext(context.Context) MqttBridgeRouteSharedSubscriptionOutput
}

// MqttBridgeRoute Shared subscription properties
type MqttBridgeRouteSharedSubscriptionArgs struct {
	// The group shared subscription minimum share number.
	GroupMinimumShareNumber pulumi.IntInput `pulumi:"groupMinimumShareNumber"`
	// The group name for Shared subscription.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (MqttBridgeRouteSharedSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRouteSharedSubscription)(nil)).Elem()
}

func (i MqttBridgeRouteSharedSubscriptionArgs) ToMqttBridgeRouteSharedSubscriptionOutput() MqttBridgeRouteSharedSubscriptionOutput {
	return i.ToMqttBridgeRouteSharedSubscriptionOutputWithContext(context.Background())
}

func (i MqttBridgeRouteSharedSubscriptionArgs) ToMqttBridgeRouteSharedSubscriptionOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRouteSharedSubscriptionOutput)
}

func (i MqttBridgeRouteSharedSubscriptionArgs) ToMqttBridgeRouteSharedSubscriptionPtrOutput() MqttBridgeRouteSharedSubscriptionPtrOutput {
	return i.ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(context.Background())
}

func (i MqttBridgeRouteSharedSubscriptionArgs) ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRouteSharedSubscriptionOutput).ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(ctx)
}

// MqttBridgeRouteSharedSubscriptionPtrInput is an input type that accepts MqttBridgeRouteSharedSubscriptionArgs, MqttBridgeRouteSharedSubscriptionPtr and MqttBridgeRouteSharedSubscriptionPtrOutput values.
// You can construct a concrete instance of `MqttBridgeRouteSharedSubscriptionPtrInput` via:
//
//	        MqttBridgeRouteSharedSubscriptionArgs{...}
//
//	or:
//
//	        nil
type MqttBridgeRouteSharedSubscriptionPtrInput interface {
	pulumi.Input

	ToMqttBridgeRouteSharedSubscriptionPtrOutput() MqttBridgeRouteSharedSubscriptionPtrOutput
	ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(context.Context) MqttBridgeRouteSharedSubscriptionPtrOutput
}

type mqttBridgeRouteSharedSubscriptionPtrType MqttBridgeRouteSharedSubscriptionArgs

func MqttBridgeRouteSharedSubscriptionPtr(v *MqttBridgeRouteSharedSubscriptionArgs) MqttBridgeRouteSharedSubscriptionPtrInput {
	return (*mqttBridgeRouteSharedSubscriptionPtrType)(v)
}

func (*mqttBridgeRouteSharedSubscriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRouteSharedSubscription)(nil)).Elem()
}

func (i *mqttBridgeRouteSharedSubscriptionPtrType) ToMqttBridgeRouteSharedSubscriptionPtrOutput() MqttBridgeRouteSharedSubscriptionPtrOutput {
	return i.ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(context.Background())
}

func (i *mqttBridgeRouteSharedSubscriptionPtrType) ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRouteSharedSubscriptionPtrOutput)
}

// MqttBridgeRoute Shared subscription properties
type MqttBridgeRouteSharedSubscriptionOutput struct{ *pulumi.OutputState }

func (MqttBridgeRouteSharedSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRouteSharedSubscription)(nil)).Elem()
}

func (o MqttBridgeRouteSharedSubscriptionOutput) ToMqttBridgeRouteSharedSubscriptionOutput() MqttBridgeRouteSharedSubscriptionOutput {
	return o
}

func (o MqttBridgeRouteSharedSubscriptionOutput) ToMqttBridgeRouteSharedSubscriptionOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionOutput {
	return o
}

func (o MqttBridgeRouteSharedSubscriptionOutput) ToMqttBridgeRouteSharedSubscriptionPtrOutput() MqttBridgeRouteSharedSubscriptionPtrOutput {
	return o.ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(context.Background())
}

func (o MqttBridgeRouteSharedSubscriptionOutput) ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MqttBridgeRouteSharedSubscription) *MqttBridgeRouteSharedSubscription {
		return &v
	}).(MqttBridgeRouteSharedSubscriptionPtrOutput)
}

// The group shared subscription minimum share number.
func (o MqttBridgeRouteSharedSubscriptionOutput) GroupMinimumShareNumber() pulumi.IntOutput {
	return o.ApplyT(func(v MqttBridgeRouteSharedSubscription) int { return v.GroupMinimumShareNumber }).(pulumi.IntOutput)
}

// The group name for Shared subscription.
func (o MqttBridgeRouteSharedSubscriptionOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRouteSharedSubscription) string { return v.GroupName }).(pulumi.StringOutput)
}

type MqttBridgeRouteSharedSubscriptionPtrOutput struct{ *pulumi.OutputState }

func (MqttBridgeRouteSharedSubscriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRouteSharedSubscription)(nil)).Elem()
}

func (o MqttBridgeRouteSharedSubscriptionPtrOutput) ToMqttBridgeRouteSharedSubscriptionPtrOutput() MqttBridgeRouteSharedSubscriptionPtrOutput {
	return o
}

func (o MqttBridgeRouteSharedSubscriptionPtrOutput) ToMqttBridgeRouteSharedSubscriptionPtrOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionPtrOutput {
	return o
}

func (o MqttBridgeRouteSharedSubscriptionPtrOutput) Elem() MqttBridgeRouteSharedSubscriptionOutput {
	return o.ApplyT(func(v *MqttBridgeRouteSharedSubscription) MqttBridgeRouteSharedSubscription {
		if v != nil {
			return *v
		}
		var ret MqttBridgeRouteSharedSubscription
		return ret
	}).(MqttBridgeRouteSharedSubscriptionOutput)
}

// The group shared subscription minimum share number.
func (o MqttBridgeRouteSharedSubscriptionPtrOutput) GroupMinimumShareNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MqttBridgeRouteSharedSubscription) *int {
		if v == nil {
			return nil
		}
		return &v.GroupMinimumShareNumber
	}).(pulumi.IntPtrOutput)
}

// The group name for Shared subscription.
func (o MqttBridgeRouteSharedSubscriptionPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttBridgeRouteSharedSubscription) *string {
		if v == nil {
			return nil
		}
		return &v.GroupName
	}).(pulumi.StringPtrOutput)
}

// MqttBridgeRoute Shared subscription properties
type MqttBridgeRouteSharedSubscriptionResponse struct {
	// The group shared subscription minimum share number.
	GroupMinimumShareNumber int `pulumi:"groupMinimumShareNumber"`
	// The group name for Shared subscription.
	GroupName string `pulumi:"groupName"`
}

// MqttBridgeRoute Shared subscription properties
type MqttBridgeRouteSharedSubscriptionResponseOutput struct{ *pulumi.OutputState }

func (MqttBridgeRouteSharedSubscriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRouteSharedSubscriptionResponse)(nil)).Elem()
}

func (o MqttBridgeRouteSharedSubscriptionResponseOutput) ToMqttBridgeRouteSharedSubscriptionResponseOutput() MqttBridgeRouteSharedSubscriptionResponseOutput {
	return o
}

func (o MqttBridgeRouteSharedSubscriptionResponseOutput) ToMqttBridgeRouteSharedSubscriptionResponseOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionResponseOutput {
	return o
}

// The group shared subscription minimum share number.
func (o MqttBridgeRouteSharedSubscriptionResponseOutput) GroupMinimumShareNumber() pulumi.IntOutput {
	return o.ApplyT(func(v MqttBridgeRouteSharedSubscriptionResponse) int { return v.GroupMinimumShareNumber }).(pulumi.IntOutput)
}

// The group name for Shared subscription.
func (o MqttBridgeRouteSharedSubscriptionResponseOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRouteSharedSubscriptionResponse) string { return v.GroupName }).(pulumi.StringOutput)
}

type MqttBridgeRouteSharedSubscriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (MqttBridgeRouteSharedSubscriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttBridgeRouteSharedSubscriptionResponse)(nil)).Elem()
}

func (o MqttBridgeRouteSharedSubscriptionResponsePtrOutput) ToMqttBridgeRouteSharedSubscriptionResponsePtrOutput() MqttBridgeRouteSharedSubscriptionResponsePtrOutput {
	return o
}

func (o MqttBridgeRouteSharedSubscriptionResponsePtrOutput) ToMqttBridgeRouteSharedSubscriptionResponsePtrOutputWithContext(ctx context.Context) MqttBridgeRouteSharedSubscriptionResponsePtrOutput {
	return o
}

func (o MqttBridgeRouteSharedSubscriptionResponsePtrOutput) Elem() MqttBridgeRouteSharedSubscriptionResponseOutput {
	return o.ApplyT(func(v *MqttBridgeRouteSharedSubscriptionResponse) MqttBridgeRouteSharedSubscriptionResponse {
		if v != nil {
			return *v
		}
		var ret MqttBridgeRouteSharedSubscriptionResponse
		return ret
	}).(MqttBridgeRouteSharedSubscriptionResponseOutput)
}

// The group shared subscription minimum share number.
func (o MqttBridgeRouteSharedSubscriptionResponsePtrOutput) GroupMinimumShareNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MqttBridgeRouteSharedSubscriptionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.GroupMinimumShareNumber
	}).(pulumi.IntPtrOutput)
}

// The group name for Shared subscription.
func (o MqttBridgeRouteSharedSubscriptionResponsePtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttBridgeRouteSharedSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GroupName
	}).(pulumi.StringPtrOutput)
}

// MqttBridgeTopicMap route properties
type MqttBridgeRoutes struct {
	// Direction of the route.
	Direction string `pulumi:"direction"`
	// Name of the route.
	Name string `pulumi:"name"`
	// Qos for MQTT connection.
	Qos *int `pulumi:"qos"`
	// Shared subscription topic details.
	SharedSubscription *MqttBridgeRouteSharedSubscription `pulumi:"sharedSubscription"`
	// Source topic of the route.
	Source string `pulumi:"source"`
	// Target topic of the route. Ignore if same as source
	Target *string `pulumi:"target"`
}

// Defaults sets the appropriate defaults for MqttBridgeRoutes
func (val *MqttBridgeRoutes) Defaults() *MqttBridgeRoutes {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// MqttBridgeRoutesInput is an input type that accepts MqttBridgeRoutesArgs and MqttBridgeRoutesOutput values.
// You can construct a concrete instance of `MqttBridgeRoutesInput` via:
//
//	MqttBridgeRoutesArgs{...}
type MqttBridgeRoutesInput interface {
	pulumi.Input

	ToMqttBridgeRoutesOutput() MqttBridgeRoutesOutput
	ToMqttBridgeRoutesOutputWithContext(context.Context) MqttBridgeRoutesOutput
}

// MqttBridgeTopicMap route properties
type MqttBridgeRoutesArgs struct {
	// Direction of the route.
	Direction pulumi.StringInput `pulumi:"direction"`
	// Name of the route.
	Name pulumi.StringInput `pulumi:"name"`
	// Qos for MQTT connection.
	Qos pulumi.IntPtrInput `pulumi:"qos"`
	// Shared subscription topic details.
	SharedSubscription MqttBridgeRouteSharedSubscriptionPtrInput `pulumi:"sharedSubscription"`
	// Source topic of the route.
	Source pulumi.StringInput `pulumi:"source"`
	// Target topic of the route. Ignore if same as source
	Target pulumi.StringPtrInput `pulumi:"target"`
}

// Defaults sets the appropriate defaults for MqttBridgeRoutesArgs
func (val *MqttBridgeRoutesArgs) Defaults() *MqttBridgeRoutesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		tmp.Qos = pulumi.IntPtr(1)
	}
	return &tmp
}
func (MqttBridgeRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRoutes)(nil)).Elem()
}

func (i MqttBridgeRoutesArgs) ToMqttBridgeRoutesOutput() MqttBridgeRoutesOutput {
	return i.ToMqttBridgeRoutesOutputWithContext(context.Background())
}

func (i MqttBridgeRoutesArgs) ToMqttBridgeRoutesOutputWithContext(ctx context.Context) MqttBridgeRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRoutesOutput)
}

// MqttBridgeRoutesArrayInput is an input type that accepts MqttBridgeRoutesArray and MqttBridgeRoutesArrayOutput values.
// You can construct a concrete instance of `MqttBridgeRoutesArrayInput` via:
//
//	MqttBridgeRoutesArray{ MqttBridgeRoutesArgs{...} }
type MqttBridgeRoutesArrayInput interface {
	pulumi.Input

	ToMqttBridgeRoutesArrayOutput() MqttBridgeRoutesArrayOutput
	ToMqttBridgeRoutesArrayOutputWithContext(context.Context) MqttBridgeRoutesArrayOutput
}

type MqttBridgeRoutesArray []MqttBridgeRoutesInput

func (MqttBridgeRoutesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MqttBridgeRoutes)(nil)).Elem()
}

func (i MqttBridgeRoutesArray) ToMqttBridgeRoutesArrayOutput() MqttBridgeRoutesArrayOutput {
	return i.ToMqttBridgeRoutesArrayOutputWithContext(context.Background())
}

func (i MqttBridgeRoutesArray) ToMqttBridgeRoutesArrayOutputWithContext(ctx context.Context) MqttBridgeRoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttBridgeRoutesArrayOutput)
}

// MqttBridgeTopicMap route properties
type MqttBridgeRoutesOutput struct{ *pulumi.OutputState }

func (MqttBridgeRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRoutes)(nil)).Elem()
}

func (o MqttBridgeRoutesOutput) ToMqttBridgeRoutesOutput() MqttBridgeRoutesOutput {
	return o
}

func (o MqttBridgeRoutesOutput) ToMqttBridgeRoutesOutputWithContext(ctx context.Context) MqttBridgeRoutesOutput {
	return o
}

// Direction of the route.
func (o MqttBridgeRoutesOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRoutes) string { return v.Direction }).(pulumi.StringOutput)
}

// Name of the route.
func (o MqttBridgeRoutesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRoutes) string { return v.Name }).(pulumi.StringOutput)
}

// Qos for MQTT connection.
func (o MqttBridgeRoutesOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MqttBridgeRoutes) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

// Shared subscription topic details.
func (o MqttBridgeRoutesOutput) SharedSubscription() MqttBridgeRouteSharedSubscriptionPtrOutput {
	return o.ApplyT(func(v MqttBridgeRoutes) *MqttBridgeRouteSharedSubscription { return v.SharedSubscription }).(MqttBridgeRouteSharedSubscriptionPtrOutput)
}

// Source topic of the route.
func (o MqttBridgeRoutesOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRoutes) string { return v.Source }).(pulumi.StringOutput)
}

// Target topic of the route. Ignore if same as source
func (o MqttBridgeRoutesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRoutes) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type MqttBridgeRoutesArrayOutput struct{ *pulumi.OutputState }

func (MqttBridgeRoutesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MqttBridgeRoutes)(nil)).Elem()
}

func (o MqttBridgeRoutesArrayOutput) ToMqttBridgeRoutesArrayOutput() MqttBridgeRoutesArrayOutput {
	return o
}

func (o MqttBridgeRoutesArrayOutput) ToMqttBridgeRoutesArrayOutputWithContext(ctx context.Context) MqttBridgeRoutesArrayOutput {
	return o
}

func (o MqttBridgeRoutesArrayOutput) Index(i pulumi.IntInput) MqttBridgeRoutesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MqttBridgeRoutes {
		return vs[0].([]MqttBridgeRoutes)[vs[1].(int)]
	}).(MqttBridgeRoutesOutput)
}

// MqttBridgeTopicMap route properties
type MqttBridgeRoutesResponse struct {
	// Direction of the route.
	Direction string `pulumi:"direction"`
	// Name of the route.
	Name string `pulumi:"name"`
	// Qos for MQTT connection.
	Qos *int `pulumi:"qos"`
	// Shared subscription topic details.
	SharedSubscription *MqttBridgeRouteSharedSubscriptionResponse `pulumi:"sharedSubscription"`
	// Source topic of the route.
	Source string `pulumi:"source"`
	// Target topic of the route. Ignore if same as source
	Target *string `pulumi:"target"`
}

// Defaults sets the appropriate defaults for MqttBridgeRoutesResponse
func (val *MqttBridgeRoutesResponse) Defaults() *MqttBridgeRoutesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// MqttBridgeTopicMap route properties
type MqttBridgeRoutesResponseOutput struct{ *pulumi.OutputState }

func (MqttBridgeRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttBridgeRoutesResponse)(nil)).Elem()
}

func (o MqttBridgeRoutesResponseOutput) ToMqttBridgeRoutesResponseOutput() MqttBridgeRoutesResponseOutput {
	return o
}

func (o MqttBridgeRoutesResponseOutput) ToMqttBridgeRoutesResponseOutputWithContext(ctx context.Context) MqttBridgeRoutesResponseOutput {
	return o
}

// Direction of the route.
func (o MqttBridgeRoutesResponseOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRoutesResponse) string { return v.Direction }).(pulumi.StringOutput)
}

// Name of the route.
func (o MqttBridgeRoutesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRoutesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Qos for MQTT connection.
func (o MqttBridgeRoutesResponseOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MqttBridgeRoutesResponse) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

// Shared subscription topic details.
func (o MqttBridgeRoutesResponseOutput) SharedSubscription() MqttBridgeRouteSharedSubscriptionResponsePtrOutput {
	return o.ApplyT(func(v MqttBridgeRoutesResponse) *MqttBridgeRouteSharedSubscriptionResponse {
		return v.SharedSubscription
	}).(MqttBridgeRouteSharedSubscriptionResponsePtrOutput)
}

// Source topic of the route.
func (o MqttBridgeRoutesResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v MqttBridgeRoutesResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Target topic of the route. Ignore if same as source
func (o MqttBridgeRoutesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MqttBridgeRoutesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type MqttBridgeRoutesResponseArrayOutput struct{ *pulumi.OutputState }

func (MqttBridgeRoutesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MqttBridgeRoutesResponse)(nil)).Elem()
}

func (o MqttBridgeRoutesResponseArrayOutput) ToMqttBridgeRoutesResponseArrayOutput() MqttBridgeRoutesResponseArrayOutput {
	return o
}

func (o MqttBridgeRoutesResponseArrayOutput) ToMqttBridgeRoutesResponseArrayOutputWithContext(ctx context.Context) MqttBridgeRoutesResponseArrayOutput {
	return o
}

func (o MqttBridgeRoutesResponseArrayOutput) Index(i pulumi.IntInput) MqttBridgeRoutesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MqttBridgeRoutesResponse {
		return vs[0].([]MqttBridgeRoutesResponse)[vs[1].(int)]
	}).(MqttBridgeRoutesResponseOutput)
}

// Mqtt to Kafka route properties
type MqttToKafkaRoutes struct {
	// The kafka acks to use.
	KafkaAcks string `pulumi:"kafkaAcks"`
	// The kafka topic to publish to.
	KafkaTopic string `pulumi:"kafkaTopic"`
	// The mqtt topic to pull from.
	MqttTopic string `pulumi:"mqttTopic"`
	// The name of the route.
	Name string `pulumi:"name"`
	// The qos to use for mqtt.
	Qos *int `pulumi:"qos"`
	// The properties for shared subscription.
	SharedSubscription *KafkaSharedSubscriptionProperties `pulumi:"sharedSubscription"`
}

// Defaults sets the appropriate defaults for MqttToKafkaRoutes
func (val *MqttToKafkaRoutes) Defaults() *MqttToKafkaRoutes {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// MqttToKafkaRoutesInput is an input type that accepts MqttToKafkaRoutesArgs and MqttToKafkaRoutesOutput values.
// You can construct a concrete instance of `MqttToKafkaRoutesInput` via:
//
//	MqttToKafkaRoutesArgs{...}
type MqttToKafkaRoutesInput interface {
	pulumi.Input

	ToMqttToKafkaRoutesOutput() MqttToKafkaRoutesOutput
	ToMqttToKafkaRoutesOutputWithContext(context.Context) MqttToKafkaRoutesOutput
}

// Mqtt to Kafka route properties
type MqttToKafkaRoutesArgs struct {
	// The kafka acks to use.
	KafkaAcks pulumi.StringInput `pulumi:"kafkaAcks"`
	// The kafka topic to publish to.
	KafkaTopic pulumi.StringInput `pulumi:"kafkaTopic"`
	// The mqtt topic to pull from.
	MqttTopic pulumi.StringInput `pulumi:"mqttTopic"`
	// The name of the route.
	Name pulumi.StringInput `pulumi:"name"`
	// The qos to use for mqtt.
	Qos pulumi.IntPtrInput `pulumi:"qos"`
	// The properties for shared subscription.
	SharedSubscription KafkaSharedSubscriptionPropertiesPtrInput `pulumi:"sharedSubscription"`
}

// Defaults sets the appropriate defaults for MqttToKafkaRoutesArgs
func (val *MqttToKafkaRoutesArgs) Defaults() *MqttToKafkaRoutesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		tmp.Qos = pulumi.IntPtr(1)
	}
	return &tmp
}
func (MqttToKafkaRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttToKafkaRoutes)(nil)).Elem()
}

func (i MqttToKafkaRoutesArgs) ToMqttToKafkaRoutesOutput() MqttToKafkaRoutesOutput {
	return i.ToMqttToKafkaRoutesOutputWithContext(context.Background())
}

func (i MqttToKafkaRoutesArgs) ToMqttToKafkaRoutesOutputWithContext(ctx context.Context) MqttToKafkaRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttToKafkaRoutesOutput)
}

func (i MqttToKafkaRoutesArgs) ToMqttToKafkaRoutesPtrOutput() MqttToKafkaRoutesPtrOutput {
	return i.ToMqttToKafkaRoutesPtrOutputWithContext(context.Background())
}

func (i MqttToKafkaRoutesArgs) ToMqttToKafkaRoutesPtrOutputWithContext(ctx context.Context) MqttToKafkaRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttToKafkaRoutesOutput).ToMqttToKafkaRoutesPtrOutputWithContext(ctx)
}

// MqttToKafkaRoutesPtrInput is an input type that accepts MqttToKafkaRoutesArgs, MqttToKafkaRoutesPtr and MqttToKafkaRoutesPtrOutput values.
// You can construct a concrete instance of `MqttToKafkaRoutesPtrInput` via:
//
//	        MqttToKafkaRoutesArgs{...}
//
//	or:
//
//	        nil
type MqttToKafkaRoutesPtrInput interface {
	pulumi.Input

	ToMqttToKafkaRoutesPtrOutput() MqttToKafkaRoutesPtrOutput
	ToMqttToKafkaRoutesPtrOutputWithContext(context.Context) MqttToKafkaRoutesPtrOutput
}

type mqttToKafkaRoutesPtrType MqttToKafkaRoutesArgs

func MqttToKafkaRoutesPtr(v *MqttToKafkaRoutesArgs) MqttToKafkaRoutesPtrInput {
	return (*mqttToKafkaRoutesPtrType)(v)
}

func (*mqttToKafkaRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttToKafkaRoutes)(nil)).Elem()
}

func (i *mqttToKafkaRoutesPtrType) ToMqttToKafkaRoutesPtrOutput() MqttToKafkaRoutesPtrOutput {
	return i.ToMqttToKafkaRoutesPtrOutputWithContext(context.Background())
}

func (i *mqttToKafkaRoutesPtrType) ToMqttToKafkaRoutesPtrOutputWithContext(ctx context.Context) MqttToKafkaRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttToKafkaRoutesPtrOutput)
}

// Mqtt to Kafka route properties
type MqttToKafkaRoutesOutput struct{ *pulumi.OutputState }

func (MqttToKafkaRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttToKafkaRoutes)(nil)).Elem()
}

func (o MqttToKafkaRoutesOutput) ToMqttToKafkaRoutesOutput() MqttToKafkaRoutesOutput {
	return o
}

func (o MqttToKafkaRoutesOutput) ToMqttToKafkaRoutesOutputWithContext(ctx context.Context) MqttToKafkaRoutesOutput {
	return o
}

func (o MqttToKafkaRoutesOutput) ToMqttToKafkaRoutesPtrOutput() MqttToKafkaRoutesPtrOutput {
	return o.ToMqttToKafkaRoutesPtrOutputWithContext(context.Background())
}

func (o MqttToKafkaRoutesOutput) ToMqttToKafkaRoutesPtrOutputWithContext(ctx context.Context) MqttToKafkaRoutesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MqttToKafkaRoutes) *MqttToKafkaRoutes {
		return &v
	}).(MqttToKafkaRoutesPtrOutput)
}

// The kafka acks to use.
func (o MqttToKafkaRoutesOutput) KafkaAcks() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutes) string { return v.KafkaAcks }).(pulumi.StringOutput)
}

// The kafka topic to publish to.
func (o MqttToKafkaRoutesOutput) KafkaTopic() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutes) string { return v.KafkaTopic }).(pulumi.StringOutput)
}

// The mqtt topic to pull from.
func (o MqttToKafkaRoutesOutput) MqttTopic() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutes) string { return v.MqttTopic }).(pulumi.StringOutput)
}

// The name of the route.
func (o MqttToKafkaRoutesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutes) string { return v.Name }).(pulumi.StringOutput)
}

// The qos to use for mqtt.
func (o MqttToKafkaRoutesOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MqttToKafkaRoutes) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

// The properties for shared subscription.
func (o MqttToKafkaRoutesOutput) SharedSubscription() KafkaSharedSubscriptionPropertiesPtrOutput {
	return o.ApplyT(func(v MqttToKafkaRoutes) *KafkaSharedSubscriptionProperties { return v.SharedSubscription }).(KafkaSharedSubscriptionPropertiesPtrOutput)
}

type MqttToKafkaRoutesPtrOutput struct{ *pulumi.OutputState }

func (MqttToKafkaRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttToKafkaRoutes)(nil)).Elem()
}

func (o MqttToKafkaRoutesPtrOutput) ToMqttToKafkaRoutesPtrOutput() MqttToKafkaRoutesPtrOutput {
	return o
}

func (o MqttToKafkaRoutesPtrOutput) ToMqttToKafkaRoutesPtrOutputWithContext(ctx context.Context) MqttToKafkaRoutesPtrOutput {
	return o
}

func (o MqttToKafkaRoutesPtrOutput) Elem() MqttToKafkaRoutesOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutes) MqttToKafkaRoutes {
		if v != nil {
			return *v
		}
		var ret MqttToKafkaRoutes
		return ret
	}).(MqttToKafkaRoutesOutput)
}

// The kafka acks to use.
func (o MqttToKafkaRoutesPtrOutput) KafkaAcks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutes) *string {
		if v == nil {
			return nil
		}
		return &v.KafkaAcks
	}).(pulumi.StringPtrOutput)
}

// The kafka topic to publish to.
func (o MqttToKafkaRoutesPtrOutput) KafkaTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutes) *string {
		if v == nil {
			return nil
		}
		return &v.KafkaTopic
	}).(pulumi.StringPtrOutput)
}

// The mqtt topic to pull from.
func (o MqttToKafkaRoutesPtrOutput) MqttTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutes) *string {
		if v == nil {
			return nil
		}
		return &v.MqttTopic
	}).(pulumi.StringPtrOutput)
}

// The name of the route.
func (o MqttToKafkaRoutesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutes) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The qos to use for mqtt.
func (o MqttToKafkaRoutesPtrOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutes) *int {
		if v == nil {
			return nil
		}
		return v.Qos
	}).(pulumi.IntPtrOutput)
}

// The properties for shared subscription.
func (o MqttToKafkaRoutesPtrOutput) SharedSubscription() KafkaSharedSubscriptionPropertiesPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutes) *KafkaSharedSubscriptionProperties {
		if v == nil {
			return nil
		}
		return v.SharedSubscription
	}).(KafkaSharedSubscriptionPropertiesPtrOutput)
}

// Mqtt to Kafka route properties
type MqttToKafkaRoutesResponse struct {
	// The kafka acks to use.
	KafkaAcks string `pulumi:"kafkaAcks"`
	// The kafka topic to publish to.
	KafkaTopic string `pulumi:"kafkaTopic"`
	// The mqtt topic to pull from.
	MqttTopic string `pulumi:"mqttTopic"`
	// The name of the route.
	Name string `pulumi:"name"`
	// The qos to use for mqtt.
	Qos *int `pulumi:"qos"`
	// The properties for shared subscription.
	SharedSubscription *KafkaSharedSubscriptionPropertiesResponse `pulumi:"sharedSubscription"`
}

// Defaults sets the appropriate defaults for MqttToKafkaRoutesResponse
func (val *MqttToKafkaRoutesResponse) Defaults() *MqttToKafkaRoutesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Qos == nil {
		qos_ := 1
		tmp.Qos = &qos_
	}
	return &tmp
}

// Mqtt to Kafka route properties
type MqttToKafkaRoutesResponseOutput struct{ *pulumi.OutputState }

func (MqttToKafkaRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttToKafkaRoutesResponse)(nil)).Elem()
}

func (o MqttToKafkaRoutesResponseOutput) ToMqttToKafkaRoutesResponseOutput() MqttToKafkaRoutesResponseOutput {
	return o
}

func (o MqttToKafkaRoutesResponseOutput) ToMqttToKafkaRoutesResponseOutputWithContext(ctx context.Context) MqttToKafkaRoutesResponseOutput {
	return o
}

// The kafka acks to use.
func (o MqttToKafkaRoutesResponseOutput) KafkaAcks() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutesResponse) string { return v.KafkaAcks }).(pulumi.StringOutput)
}

// The kafka topic to publish to.
func (o MqttToKafkaRoutesResponseOutput) KafkaTopic() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutesResponse) string { return v.KafkaTopic }).(pulumi.StringOutput)
}

// The mqtt topic to pull from.
func (o MqttToKafkaRoutesResponseOutput) MqttTopic() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutesResponse) string { return v.MqttTopic }).(pulumi.StringOutput)
}

// The name of the route.
func (o MqttToKafkaRoutesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MqttToKafkaRoutesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qos to use for mqtt.
func (o MqttToKafkaRoutesResponseOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MqttToKafkaRoutesResponse) *int { return v.Qos }).(pulumi.IntPtrOutput)
}

// The properties for shared subscription.
func (o MqttToKafkaRoutesResponseOutput) SharedSubscription() KafkaSharedSubscriptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MqttToKafkaRoutesResponse) *KafkaSharedSubscriptionPropertiesResponse {
		return v.SharedSubscription
	}).(KafkaSharedSubscriptionPropertiesResponsePtrOutput)
}

type MqttToKafkaRoutesResponsePtrOutput struct{ *pulumi.OutputState }

func (MqttToKafkaRoutesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttToKafkaRoutesResponse)(nil)).Elem()
}

func (o MqttToKafkaRoutesResponsePtrOutput) ToMqttToKafkaRoutesResponsePtrOutput() MqttToKafkaRoutesResponsePtrOutput {
	return o
}

func (o MqttToKafkaRoutesResponsePtrOutput) ToMqttToKafkaRoutesResponsePtrOutputWithContext(ctx context.Context) MqttToKafkaRoutesResponsePtrOutput {
	return o
}

func (o MqttToKafkaRoutesResponsePtrOutput) Elem() MqttToKafkaRoutesResponseOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutesResponse) MqttToKafkaRoutesResponse {
		if v != nil {
			return *v
		}
		var ret MqttToKafkaRoutesResponse
		return ret
	}).(MqttToKafkaRoutesResponseOutput)
}

// The kafka acks to use.
func (o MqttToKafkaRoutesResponsePtrOutput) KafkaAcks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KafkaAcks
	}).(pulumi.StringPtrOutput)
}

// The kafka topic to publish to.
func (o MqttToKafkaRoutesResponsePtrOutput) KafkaTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KafkaTopic
	}).(pulumi.StringPtrOutput)
}

// The mqtt topic to pull from.
func (o MqttToKafkaRoutesResponsePtrOutput) MqttTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MqttTopic
	}).(pulumi.StringPtrOutput)
}

// The name of the route.
func (o MqttToKafkaRoutesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The qos to use for mqtt.
func (o MqttToKafkaRoutesResponsePtrOutput) Qos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Qos
	}).(pulumi.IntPtrOutput)
}

// The properties for shared subscription.
func (o MqttToKafkaRoutesResponsePtrOutput) SharedSubscription() KafkaSharedSubscriptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *MqttToKafkaRoutesResponse) *KafkaSharedSubscriptionPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.SharedSubscription
	}).(KafkaSharedSubscriptionPropertiesResponsePtrOutput)
}

// Defines the Node Tolerations details
type NodeTolerations struct {
	// Toleration effect.
	Effect string `pulumi:"effect"`
	// Toleration key.
	Key string `pulumi:"key"`
	// Toleration operator like 'Exists', 'Equal' etc.
	Operator string `pulumi:"operator"`
	// Toleration Value.
	Value string `pulumi:"value"`
}

// NodeTolerationsInput is an input type that accepts NodeTolerationsArgs and NodeTolerationsOutput values.
// You can construct a concrete instance of `NodeTolerationsInput` via:
//
//	NodeTolerationsArgs{...}
type NodeTolerationsInput interface {
	pulumi.Input

	ToNodeTolerationsOutput() NodeTolerationsOutput
	ToNodeTolerationsOutputWithContext(context.Context) NodeTolerationsOutput
}

// Defines the Node Tolerations details
type NodeTolerationsArgs struct {
	// Toleration effect.
	Effect pulumi.StringInput `pulumi:"effect"`
	// Toleration key.
	Key pulumi.StringInput `pulumi:"key"`
	// Toleration operator like 'Exists', 'Equal' etc.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Toleration Value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NodeTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTolerations)(nil)).Elem()
}

func (i NodeTolerationsArgs) ToNodeTolerationsOutput() NodeTolerationsOutput {
	return i.ToNodeTolerationsOutputWithContext(context.Background())
}

func (i NodeTolerationsArgs) ToNodeTolerationsOutputWithContext(ctx context.Context) NodeTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTolerationsOutput)
}

func (i NodeTolerationsArgs) ToNodeTolerationsPtrOutput() NodeTolerationsPtrOutput {
	return i.ToNodeTolerationsPtrOutputWithContext(context.Background())
}

func (i NodeTolerationsArgs) ToNodeTolerationsPtrOutputWithContext(ctx context.Context) NodeTolerationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTolerationsOutput).ToNodeTolerationsPtrOutputWithContext(ctx)
}

// NodeTolerationsPtrInput is an input type that accepts NodeTolerationsArgs, NodeTolerationsPtr and NodeTolerationsPtrOutput values.
// You can construct a concrete instance of `NodeTolerationsPtrInput` via:
//
//	        NodeTolerationsArgs{...}
//
//	or:
//
//	        nil
type NodeTolerationsPtrInput interface {
	pulumi.Input

	ToNodeTolerationsPtrOutput() NodeTolerationsPtrOutput
	ToNodeTolerationsPtrOutputWithContext(context.Context) NodeTolerationsPtrOutput
}

type nodeTolerationsPtrType NodeTolerationsArgs

func NodeTolerationsPtr(v *NodeTolerationsArgs) NodeTolerationsPtrInput {
	return (*nodeTolerationsPtrType)(v)
}

func (*nodeTolerationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTolerations)(nil)).Elem()
}

func (i *nodeTolerationsPtrType) ToNodeTolerationsPtrOutput() NodeTolerationsPtrOutput {
	return i.ToNodeTolerationsPtrOutputWithContext(context.Background())
}

func (i *nodeTolerationsPtrType) ToNodeTolerationsPtrOutputWithContext(ctx context.Context) NodeTolerationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTolerationsPtrOutput)
}

// Defines the Node Tolerations details
type NodeTolerationsOutput struct{ *pulumi.OutputState }

func (NodeTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTolerations)(nil)).Elem()
}

func (o NodeTolerationsOutput) ToNodeTolerationsOutput() NodeTolerationsOutput {
	return o
}

func (o NodeTolerationsOutput) ToNodeTolerationsOutputWithContext(ctx context.Context) NodeTolerationsOutput {
	return o
}

func (o NodeTolerationsOutput) ToNodeTolerationsPtrOutput() NodeTolerationsPtrOutput {
	return o.ToNodeTolerationsPtrOutputWithContext(context.Background())
}

func (o NodeTolerationsOutput) ToNodeTolerationsPtrOutputWithContext(ctx context.Context) NodeTolerationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeTolerations) *NodeTolerations {
		return &v
	}).(NodeTolerationsPtrOutput)
}

// Toleration effect.
func (o NodeTolerationsOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerations) string { return v.Effect }).(pulumi.StringOutput)
}

// Toleration key.
func (o NodeTolerationsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerations) string { return v.Key }).(pulumi.StringOutput)
}

// Toleration operator like 'Exists', 'Equal' etc.
func (o NodeTolerationsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerations) string { return v.Operator }).(pulumi.StringOutput)
}

// Toleration Value.
func (o NodeTolerationsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerations) string { return v.Value }).(pulumi.StringOutput)
}

type NodeTolerationsPtrOutput struct{ *pulumi.OutputState }

func (NodeTolerationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTolerations)(nil)).Elem()
}

func (o NodeTolerationsPtrOutput) ToNodeTolerationsPtrOutput() NodeTolerationsPtrOutput {
	return o
}

func (o NodeTolerationsPtrOutput) ToNodeTolerationsPtrOutputWithContext(ctx context.Context) NodeTolerationsPtrOutput {
	return o
}

func (o NodeTolerationsPtrOutput) Elem() NodeTolerationsOutput {
	return o.ApplyT(func(v *NodeTolerations) NodeTolerations {
		if v != nil {
			return *v
		}
		var ret NodeTolerations
		return ret
	}).(NodeTolerationsOutput)
}

// Toleration effect.
func (o NodeTolerationsPtrOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerations) *string {
		if v == nil {
			return nil
		}
		return &v.Effect
	}).(pulumi.StringPtrOutput)
}

// Toleration key.
func (o NodeTolerationsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerations) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Toleration operator like 'Exists', 'Equal' etc.
func (o NodeTolerationsPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerations) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Toleration Value.
func (o NodeTolerationsPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerations) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Defines the Node Tolerations details
type NodeTolerationsResponse struct {
	// Toleration effect.
	Effect string `pulumi:"effect"`
	// Toleration key.
	Key string `pulumi:"key"`
	// Toleration operator like 'Exists', 'Equal' etc.
	Operator string `pulumi:"operator"`
	// Toleration Value.
	Value string `pulumi:"value"`
}

// Defines the Node Tolerations details
type NodeTolerationsResponseOutput struct{ *pulumi.OutputState }

func (NodeTolerationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTolerationsResponse)(nil)).Elem()
}

func (o NodeTolerationsResponseOutput) ToNodeTolerationsResponseOutput() NodeTolerationsResponseOutput {
	return o
}

func (o NodeTolerationsResponseOutput) ToNodeTolerationsResponseOutputWithContext(ctx context.Context) NodeTolerationsResponseOutput {
	return o
}

// Toleration effect.
func (o NodeTolerationsResponseOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerationsResponse) string { return v.Effect }).(pulumi.StringOutput)
}

// Toleration key.
func (o NodeTolerationsResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerationsResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Toleration operator like 'Exists', 'Equal' etc.
func (o NodeTolerationsResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerationsResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Toleration Value.
func (o NodeTolerationsResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTolerationsResponse) string { return v.Value }).(pulumi.StringOutput)
}

type NodeTolerationsResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeTolerationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTolerationsResponse)(nil)).Elem()
}

func (o NodeTolerationsResponsePtrOutput) ToNodeTolerationsResponsePtrOutput() NodeTolerationsResponsePtrOutput {
	return o
}

func (o NodeTolerationsResponsePtrOutput) ToNodeTolerationsResponsePtrOutputWithContext(ctx context.Context) NodeTolerationsResponsePtrOutput {
	return o
}

func (o NodeTolerationsResponsePtrOutput) Elem() NodeTolerationsResponseOutput {
	return o.ApplyT(func(v *NodeTolerationsResponse) NodeTolerationsResponse {
		if v != nil {
			return *v
		}
		var ret NodeTolerationsResponse
		return ret
	}).(NodeTolerationsResponseOutput)
}

// Toleration effect.
func (o NodeTolerationsResponsePtrOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Effect
	}).(pulumi.StringPtrOutput)
}

// Toleration key.
func (o NodeTolerationsResponsePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Toleration operator like 'Exists', 'Equal' etc.
func (o NodeTolerationsResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Toleration Value.
func (o NodeTolerationsResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTolerationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// PrincipalDefinition properties of Basic Rule
type PrincipalDefinition struct {
	// A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.
	Attributes []map[string]string `pulumi:"attributes"`
	// A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.
	Clientids []string `pulumi:"clientids"`
	// A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.
	Usernames []string `pulumi:"usernames"`
}

// PrincipalDefinitionInput is an input type that accepts PrincipalDefinitionArgs and PrincipalDefinitionOutput values.
// You can construct a concrete instance of `PrincipalDefinitionInput` via:
//
//	PrincipalDefinitionArgs{...}
type PrincipalDefinitionInput interface {
	pulumi.Input

	ToPrincipalDefinitionOutput() PrincipalDefinitionOutput
	ToPrincipalDefinitionOutputWithContext(context.Context) PrincipalDefinitionOutput
}

// PrincipalDefinition properties of Basic Rule
type PrincipalDefinitionArgs struct {
	// A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.
	Attributes pulumi.StringMapArrayInput `pulumi:"attributes"`
	// A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.
	Clientids pulumi.StringArrayInput `pulumi:"clientids"`
	// A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.
	Usernames pulumi.StringArrayInput `pulumi:"usernames"`
}

func (PrincipalDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalDefinition)(nil)).Elem()
}

func (i PrincipalDefinitionArgs) ToPrincipalDefinitionOutput() PrincipalDefinitionOutput {
	return i.ToPrincipalDefinitionOutputWithContext(context.Background())
}

func (i PrincipalDefinitionArgs) ToPrincipalDefinitionOutputWithContext(ctx context.Context) PrincipalDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalDefinitionOutput)
}

// PrincipalDefinition properties of Basic Rule
type PrincipalDefinitionOutput struct{ *pulumi.OutputState }

func (PrincipalDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalDefinition)(nil)).Elem()
}

func (o PrincipalDefinitionOutput) ToPrincipalDefinitionOutput() PrincipalDefinitionOutput {
	return o
}

func (o PrincipalDefinitionOutput) ToPrincipalDefinitionOutputWithContext(ctx context.Context) PrincipalDefinitionOutput {
	return o
}

// A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.
func (o PrincipalDefinitionOutput) Attributes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v PrincipalDefinition) []map[string]string { return v.Attributes }).(pulumi.StringMapArrayOutput)
}

// A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.
func (o PrincipalDefinitionOutput) Clientids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrincipalDefinition) []string { return v.Clientids }).(pulumi.StringArrayOutput)
}

// A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.
func (o PrincipalDefinitionOutput) Usernames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrincipalDefinition) []string { return v.Usernames }).(pulumi.StringArrayOutput)
}

// PrincipalDefinition properties of Basic Rule
type PrincipalDefinitionResponse struct {
	// A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.
	Attributes []map[string]string `pulumi:"attributes"`
	// A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.
	Clientids []string `pulumi:"clientids"`
	// A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.
	Usernames []string `pulumi:"usernames"`
}

// PrincipalDefinition properties of Basic Rule
type PrincipalDefinitionResponseOutput struct{ *pulumi.OutputState }

func (PrincipalDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalDefinitionResponse)(nil)).Elem()
}

func (o PrincipalDefinitionResponseOutput) ToPrincipalDefinitionResponseOutput() PrincipalDefinitionResponseOutput {
	return o
}

func (o PrincipalDefinitionResponseOutput) ToPrincipalDefinitionResponseOutputWithContext(ctx context.Context) PrincipalDefinitionResponseOutput {
	return o
}

// A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.
func (o PrincipalDefinitionResponseOutput) Attributes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v PrincipalDefinitionResponse) []map[string]string { return v.Attributes }).(pulumi.StringMapArrayOutput)
}

// A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.
func (o PrincipalDefinitionResponseOutput) Clientids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrincipalDefinitionResponse) []string { return v.Clientids }).(pulumi.StringArrayOutput)
}

// A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.
func (o PrincipalDefinitionResponseOutput) Usernames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrincipalDefinitionResponse) []string { return v.Usernames }).(pulumi.StringArrayOutput)
}

// ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.
type ResourceInfoDefinition struct {
	// The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
	Method string `pulumi:"method"`
	// A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
	Topics []string `pulumi:"topics"`
}

// ResourceInfoDefinitionInput is an input type that accepts ResourceInfoDefinitionArgs and ResourceInfoDefinitionOutput values.
// You can construct a concrete instance of `ResourceInfoDefinitionInput` via:
//
//	ResourceInfoDefinitionArgs{...}
type ResourceInfoDefinitionInput interface {
	pulumi.Input

	ToResourceInfoDefinitionOutput() ResourceInfoDefinitionOutput
	ToResourceInfoDefinitionOutputWithContext(context.Context) ResourceInfoDefinitionOutput
}

// ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.
type ResourceInfoDefinitionArgs struct {
	// The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
	Method pulumi.StringInput `pulumi:"method"`
	// A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
}

func (ResourceInfoDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceInfoDefinition)(nil)).Elem()
}

func (i ResourceInfoDefinitionArgs) ToResourceInfoDefinitionOutput() ResourceInfoDefinitionOutput {
	return i.ToResourceInfoDefinitionOutputWithContext(context.Background())
}

func (i ResourceInfoDefinitionArgs) ToResourceInfoDefinitionOutputWithContext(ctx context.Context) ResourceInfoDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceInfoDefinitionOutput)
}

// ResourceInfoDefinitionArrayInput is an input type that accepts ResourceInfoDefinitionArray and ResourceInfoDefinitionArrayOutput values.
// You can construct a concrete instance of `ResourceInfoDefinitionArrayInput` via:
//
//	ResourceInfoDefinitionArray{ ResourceInfoDefinitionArgs{...} }
type ResourceInfoDefinitionArrayInput interface {
	pulumi.Input

	ToResourceInfoDefinitionArrayOutput() ResourceInfoDefinitionArrayOutput
	ToResourceInfoDefinitionArrayOutputWithContext(context.Context) ResourceInfoDefinitionArrayOutput
}

type ResourceInfoDefinitionArray []ResourceInfoDefinitionInput

func (ResourceInfoDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceInfoDefinition)(nil)).Elem()
}

func (i ResourceInfoDefinitionArray) ToResourceInfoDefinitionArrayOutput() ResourceInfoDefinitionArrayOutput {
	return i.ToResourceInfoDefinitionArrayOutputWithContext(context.Background())
}

func (i ResourceInfoDefinitionArray) ToResourceInfoDefinitionArrayOutputWithContext(ctx context.Context) ResourceInfoDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceInfoDefinitionArrayOutput)
}

// ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.
type ResourceInfoDefinitionOutput struct{ *pulumi.OutputState }

func (ResourceInfoDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceInfoDefinition)(nil)).Elem()
}

func (o ResourceInfoDefinitionOutput) ToResourceInfoDefinitionOutput() ResourceInfoDefinitionOutput {
	return o
}

func (o ResourceInfoDefinitionOutput) ToResourceInfoDefinitionOutputWithContext(ctx context.Context) ResourceInfoDefinitionOutput {
	return o
}

// The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
func (o ResourceInfoDefinitionOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceInfoDefinition) string { return v.Method }).(pulumi.StringOutput)
}

// A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
func (o ResourceInfoDefinitionOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceInfoDefinition) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type ResourceInfoDefinitionArrayOutput struct{ *pulumi.OutputState }

func (ResourceInfoDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceInfoDefinition)(nil)).Elem()
}

func (o ResourceInfoDefinitionArrayOutput) ToResourceInfoDefinitionArrayOutput() ResourceInfoDefinitionArrayOutput {
	return o
}

func (o ResourceInfoDefinitionArrayOutput) ToResourceInfoDefinitionArrayOutputWithContext(ctx context.Context) ResourceInfoDefinitionArrayOutput {
	return o
}

func (o ResourceInfoDefinitionArrayOutput) Index(i pulumi.IntInput) ResourceInfoDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceInfoDefinition {
		return vs[0].([]ResourceInfoDefinition)[vs[1].(int)]
	}).(ResourceInfoDefinitionOutput)
}

// ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.
type ResourceInfoDefinitionResponse struct {
	// The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
	Method string `pulumi:"method"`
	// A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
	Topics []string `pulumi:"topics"`
}

// ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.
type ResourceInfoDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ResourceInfoDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceInfoDefinitionResponse)(nil)).Elem()
}

func (o ResourceInfoDefinitionResponseOutput) ToResourceInfoDefinitionResponseOutput() ResourceInfoDefinitionResponseOutput {
	return o
}

func (o ResourceInfoDefinitionResponseOutput) ToResourceInfoDefinitionResponseOutputWithContext(ctx context.Context) ResourceInfoDefinitionResponseOutput {
	return o
}

// The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.
func (o ResourceInfoDefinitionResponseOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceInfoDefinitionResponse) string { return v.Method }).(pulumi.StringOutput)
}

// A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.
func (o ResourceInfoDefinitionResponseOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceInfoDefinitionResponse) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

type ResourceInfoDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceInfoDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceInfoDefinitionResponse)(nil)).Elem()
}

func (o ResourceInfoDefinitionResponseArrayOutput) ToResourceInfoDefinitionResponseArrayOutput() ResourceInfoDefinitionResponseArrayOutput {
	return o
}

func (o ResourceInfoDefinitionResponseArrayOutput) ToResourceInfoDefinitionResponseArrayOutputWithContext(ctx context.Context) ResourceInfoDefinitionResponseArrayOutput {
	return o
}

func (o ResourceInfoDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ResourceInfoDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceInfoDefinitionResponse {
		return vs[0].([]ResourceInfoDefinitionResponse)[vs[1].(int)]
	}).(ResourceInfoDefinitionResponseOutput)
}

// SANs for certificate.
type SanForCert struct {
	// DNS SANs.
	Dns []string `pulumi:"dns"`
	// IP address SANs.
	Ip []string `pulumi:"ip"`
}

// SanForCertInput is an input type that accepts SanForCertArgs and SanForCertOutput values.
// You can construct a concrete instance of `SanForCertInput` via:
//
//	SanForCertArgs{...}
type SanForCertInput interface {
	pulumi.Input

	ToSanForCertOutput() SanForCertOutput
	ToSanForCertOutputWithContext(context.Context) SanForCertOutput
}

// SANs for certificate.
type SanForCertArgs struct {
	// DNS SANs.
	Dns pulumi.StringArrayInput `pulumi:"dns"`
	// IP address SANs.
	Ip pulumi.StringArrayInput `pulumi:"ip"`
}

func (SanForCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SanForCert)(nil)).Elem()
}

func (i SanForCertArgs) ToSanForCertOutput() SanForCertOutput {
	return i.ToSanForCertOutputWithContext(context.Background())
}

func (i SanForCertArgs) ToSanForCertOutputWithContext(ctx context.Context) SanForCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SanForCertOutput)
}

func (i SanForCertArgs) ToSanForCertPtrOutput() SanForCertPtrOutput {
	return i.ToSanForCertPtrOutputWithContext(context.Background())
}

func (i SanForCertArgs) ToSanForCertPtrOutputWithContext(ctx context.Context) SanForCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SanForCertOutput).ToSanForCertPtrOutputWithContext(ctx)
}

// SanForCertPtrInput is an input type that accepts SanForCertArgs, SanForCertPtr and SanForCertPtrOutput values.
// You can construct a concrete instance of `SanForCertPtrInput` via:
//
//	        SanForCertArgs{...}
//
//	or:
//
//	        nil
type SanForCertPtrInput interface {
	pulumi.Input

	ToSanForCertPtrOutput() SanForCertPtrOutput
	ToSanForCertPtrOutputWithContext(context.Context) SanForCertPtrOutput
}

type sanForCertPtrType SanForCertArgs

func SanForCertPtr(v *SanForCertArgs) SanForCertPtrInput {
	return (*sanForCertPtrType)(v)
}

func (*sanForCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SanForCert)(nil)).Elem()
}

func (i *sanForCertPtrType) ToSanForCertPtrOutput() SanForCertPtrOutput {
	return i.ToSanForCertPtrOutputWithContext(context.Background())
}

func (i *sanForCertPtrType) ToSanForCertPtrOutputWithContext(ctx context.Context) SanForCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SanForCertPtrOutput)
}

// SANs for certificate.
type SanForCertOutput struct{ *pulumi.OutputState }

func (SanForCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SanForCert)(nil)).Elem()
}

func (o SanForCertOutput) ToSanForCertOutput() SanForCertOutput {
	return o
}

func (o SanForCertOutput) ToSanForCertOutputWithContext(ctx context.Context) SanForCertOutput {
	return o
}

func (o SanForCertOutput) ToSanForCertPtrOutput() SanForCertPtrOutput {
	return o.ToSanForCertPtrOutputWithContext(context.Background())
}

func (o SanForCertOutput) ToSanForCertPtrOutputWithContext(ctx context.Context) SanForCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SanForCert) *SanForCert {
		return &v
	}).(SanForCertPtrOutput)
}

// DNS SANs.
func (o SanForCertOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SanForCert) []string { return v.Dns }).(pulumi.StringArrayOutput)
}

// IP address SANs.
func (o SanForCertOutput) Ip() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SanForCert) []string { return v.Ip }).(pulumi.StringArrayOutput)
}

type SanForCertPtrOutput struct{ *pulumi.OutputState }

func (SanForCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SanForCert)(nil)).Elem()
}

func (o SanForCertPtrOutput) ToSanForCertPtrOutput() SanForCertPtrOutput {
	return o
}

func (o SanForCertPtrOutput) ToSanForCertPtrOutputWithContext(ctx context.Context) SanForCertPtrOutput {
	return o
}

func (o SanForCertPtrOutput) Elem() SanForCertOutput {
	return o.ApplyT(func(v *SanForCert) SanForCert {
		if v != nil {
			return *v
		}
		var ret SanForCert
		return ret
	}).(SanForCertOutput)
}

// DNS SANs.
func (o SanForCertPtrOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SanForCert) []string {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(pulumi.StringArrayOutput)
}

// IP address SANs.
func (o SanForCertPtrOutput) Ip() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SanForCert) []string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringArrayOutput)
}

// SANs for certificate.
type SanForCertResponse struct {
	// DNS SANs.
	Dns []string `pulumi:"dns"`
	// IP address SANs.
	Ip []string `pulumi:"ip"`
}

// SANs for certificate.
type SanForCertResponseOutput struct{ *pulumi.OutputState }

func (SanForCertResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SanForCertResponse)(nil)).Elem()
}

func (o SanForCertResponseOutput) ToSanForCertResponseOutput() SanForCertResponseOutput {
	return o
}

func (o SanForCertResponseOutput) ToSanForCertResponseOutputWithContext(ctx context.Context) SanForCertResponseOutput {
	return o
}

// DNS SANs.
func (o SanForCertResponseOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SanForCertResponse) []string { return v.Dns }).(pulumi.StringArrayOutput)
}

// IP address SANs.
func (o SanForCertResponseOutput) Ip() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SanForCertResponse) []string { return v.Ip }).(pulumi.StringArrayOutput)
}

type SanForCertResponsePtrOutput struct{ *pulumi.OutputState }

func (SanForCertResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SanForCertResponse)(nil)).Elem()
}

func (o SanForCertResponsePtrOutput) ToSanForCertResponsePtrOutput() SanForCertResponsePtrOutput {
	return o
}

func (o SanForCertResponsePtrOutput) ToSanForCertResponsePtrOutputWithContext(ctx context.Context) SanForCertResponsePtrOutput {
	return o
}

func (o SanForCertResponsePtrOutput) Elem() SanForCertResponseOutput {
	return o.ApplyT(func(v *SanForCertResponse) SanForCertResponse {
		if v != nil {
			return *v
		}
		var ret SanForCertResponse
		return ret
	}).(SanForCertResponseOutput)
}

// DNS SANs.
func (o SanForCertResponsePtrOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SanForCertResponse) []string {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(pulumi.StringArrayOutput)
}

// IP address SANs.
func (o SanForCertResponsePtrOutput) Ip() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SanForCertResponse) []string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringArrayOutput)
}

// Kafka RemoteBrokerConnection Sasl Authentication properties.
type SaslRemoteBrokerBasicAuthentication struct {
	// Sasl Mechanism for remote broker authentication.
	SaslType string `pulumi:"saslType"`
	// Sasl token for remote broker authentication.
	Token SaslRemoteBrokerBasicAuthenticationToken `pulumi:"token"`
}

// SaslRemoteBrokerBasicAuthenticationInput is an input type that accepts SaslRemoteBrokerBasicAuthenticationArgs and SaslRemoteBrokerBasicAuthenticationOutput values.
// You can construct a concrete instance of `SaslRemoteBrokerBasicAuthenticationInput` via:
//
//	SaslRemoteBrokerBasicAuthenticationArgs{...}
type SaslRemoteBrokerBasicAuthenticationInput interface {
	pulumi.Input

	ToSaslRemoteBrokerBasicAuthenticationOutput() SaslRemoteBrokerBasicAuthenticationOutput
	ToSaslRemoteBrokerBasicAuthenticationOutputWithContext(context.Context) SaslRemoteBrokerBasicAuthenticationOutput
}

// Kafka RemoteBrokerConnection Sasl Authentication properties.
type SaslRemoteBrokerBasicAuthenticationArgs struct {
	// Sasl Mechanism for remote broker authentication.
	SaslType pulumi.StringInput `pulumi:"saslType"`
	// Sasl token for remote broker authentication.
	Token SaslRemoteBrokerBasicAuthenticationTokenInput `pulumi:"token"`
}

func (SaslRemoteBrokerBasicAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslRemoteBrokerBasicAuthentication)(nil)).Elem()
}

func (i SaslRemoteBrokerBasicAuthenticationArgs) ToSaslRemoteBrokerBasicAuthenticationOutput() SaslRemoteBrokerBasicAuthenticationOutput {
	return i.ToSaslRemoteBrokerBasicAuthenticationOutputWithContext(context.Background())
}

func (i SaslRemoteBrokerBasicAuthenticationArgs) ToSaslRemoteBrokerBasicAuthenticationOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslRemoteBrokerBasicAuthenticationOutput)
}

func (i SaslRemoteBrokerBasicAuthenticationArgs) ToSaslRemoteBrokerBasicAuthenticationPtrOutput() SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return i.ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(context.Background())
}

func (i SaslRemoteBrokerBasicAuthenticationArgs) ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslRemoteBrokerBasicAuthenticationOutput).ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(ctx)
}

// SaslRemoteBrokerBasicAuthenticationPtrInput is an input type that accepts SaslRemoteBrokerBasicAuthenticationArgs, SaslRemoteBrokerBasicAuthenticationPtr and SaslRemoteBrokerBasicAuthenticationPtrOutput values.
// You can construct a concrete instance of `SaslRemoteBrokerBasicAuthenticationPtrInput` via:
//
//	        SaslRemoteBrokerBasicAuthenticationArgs{...}
//
//	or:
//
//	        nil
type SaslRemoteBrokerBasicAuthenticationPtrInput interface {
	pulumi.Input

	ToSaslRemoteBrokerBasicAuthenticationPtrOutput() SaslRemoteBrokerBasicAuthenticationPtrOutput
	ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(context.Context) SaslRemoteBrokerBasicAuthenticationPtrOutput
}

type saslRemoteBrokerBasicAuthenticationPtrType SaslRemoteBrokerBasicAuthenticationArgs

func SaslRemoteBrokerBasicAuthenticationPtr(v *SaslRemoteBrokerBasicAuthenticationArgs) SaslRemoteBrokerBasicAuthenticationPtrInput {
	return (*saslRemoteBrokerBasicAuthenticationPtrType)(v)
}

func (*saslRemoteBrokerBasicAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslRemoteBrokerBasicAuthentication)(nil)).Elem()
}

func (i *saslRemoteBrokerBasicAuthenticationPtrType) ToSaslRemoteBrokerBasicAuthenticationPtrOutput() SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return i.ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(context.Background())
}

func (i *saslRemoteBrokerBasicAuthenticationPtrType) ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslRemoteBrokerBasicAuthenticationPtrOutput)
}

// Kafka RemoteBrokerConnection Sasl Authentication properties.
type SaslRemoteBrokerBasicAuthenticationOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslRemoteBrokerBasicAuthentication)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationOutput) ToSaslRemoteBrokerBasicAuthenticationOutput() SaslRemoteBrokerBasicAuthenticationOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationOutput) ToSaslRemoteBrokerBasicAuthenticationOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationOutput) ToSaslRemoteBrokerBasicAuthenticationPtrOutput() SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return o.ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(context.Background())
}

func (o SaslRemoteBrokerBasicAuthenticationOutput) ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SaslRemoteBrokerBasicAuthentication) *SaslRemoteBrokerBasicAuthentication {
		return &v
	}).(SaslRemoteBrokerBasicAuthenticationPtrOutput)
}

// Sasl Mechanism for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationOutput) SaslType() pulumi.StringOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthentication) string { return v.SaslType }).(pulumi.StringOutput)
}

// Sasl token for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationOutput) Token() SaslRemoteBrokerBasicAuthenticationTokenOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthentication) SaslRemoteBrokerBasicAuthenticationToken { return v.Token }).(SaslRemoteBrokerBasicAuthenticationTokenOutput)
}

type SaslRemoteBrokerBasicAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslRemoteBrokerBasicAuthentication)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationPtrOutput) ToSaslRemoteBrokerBasicAuthenticationPtrOutput() SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationPtrOutput) ToSaslRemoteBrokerBasicAuthenticationPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationPtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationPtrOutput) Elem() SaslRemoteBrokerBasicAuthenticationOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthentication) SaslRemoteBrokerBasicAuthentication {
		if v != nil {
			return *v
		}
		var ret SaslRemoteBrokerBasicAuthentication
		return ret
	}).(SaslRemoteBrokerBasicAuthenticationOutput)
}

// Sasl Mechanism for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationPtrOutput) SaslType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.SaslType
	}).(pulumi.StringPtrOutput)
}

// Sasl token for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationPtrOutput) Token() SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthentication) *SaslRemoteBrokerBasicAuthenticationToken {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(SaslRemoteBrokerBasicAuthenticationTokenPtrOutput)
}

// Kafka RemoteBrokerConnection Sasl Authentication properties.
type SaslRemoteBrokerBasicAuthenticationResponse struct {
	// Sasl Mechanism for remote broker authentication.
	SaslType string `pulumi:"saslType"`
	// Sasl token for remote broker authentication.
	Token SaslRemoteBrokerBasicAuthenticationTokenResponse `pulumi:"token"`
}

// Kafka RemoteBrokerConnection Sasl Authentication properties.
type SaslRemoteBrokerBasicAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslRemoteBrokerBasicAuthenticationResponse)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationResponseOutput) ToSaslRemoteBrokerBasicAuthenticationResponseOutput() SaslRemoteBrokerBasicAuthenticationResponseOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationResponseOutput) ToSaslRemoteBrokerBasicAuthenticationResponseOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationResponseOutput {
	return o
}

// Sasl Mechanism for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationResponseOutput) SaslType() pulumi.StringOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthenticationResponse) string { return v.SaslType }).(pulumi.StringOutput)
}

// Sasl token for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationResponseOutput) Token() SaslRemoteBrokerBasicAuthenticationTokenResponseOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthenticationResponse) SaslRemoteBrokerBasicAuthenticationTokenResponse {
		return v.Token
	}).(SaslRemoteBrokerBasicAuthenticationTokenResponseOutput)
}

type SaslRemoteBrokerBasicAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslRemoteBrokerBasicAuthenticationResponse)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationResponsePtrOutput) ToSaslRemoteBrokerBasicAuthenticationResponsePtrOutput() SaslRemoteBrokerBasicAuthenticationResponsePtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationResponsePtrOutput) ToSaslRemoteBrokerBasicAuthenticationResponsePtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationResponsePtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationResponsePtrOutput) Elem() SaslRemoteBrokerBasicAuthenticationResponseOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationResponse) SaslRemoteBrokerBasicAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret SaslRemoteBrokerBasicAuthenticationResponse
		return ret
	}).(SaslRemoteBrokerBasicAuthenticationResponseOutput)
}

// Sasl Mechanism for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationResponsePtrOutput) SaslType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SaslType
	}).(pulumi.StringPtrOutput)
}

// Sasl token for remote broker authentication.
func (o SaslRemoteBrokerBasicAuthenticationResponsePtrOutput) Token() SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationResponse) *SaslRemoteBrokerBasicAuthenticationTokenResponse {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput)
}

// Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.
type SaslRemoteBrokerBasicAuthenticationToken struct {
	// Keyvault token keyvault secret properties.
	KeyVault *KafkaTokenKeyVaultProperties `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// SaslRemoteBrokerBasicAuthenticationTokenInput is an input type that accepts SaslRemoteBrokerBasicAuthenticationTokenArgs and SaslRemoteBrokerBasicAuthenticationTokenOutput values.
// You can construct a concrete instance of `SaslRemoteBrokerBasicAuthenticationTokenInput` via:
//
//	SaslRemoteBrokerBasicAuthenticationTokenArgs{...}
type SaslRemoteBrokerBasicAuthenticationTokenInput interface {
	pulumi.Input

	ToSaslRemoteBrokerBasicAuthenticationTokenOutput() SaslRemoteBrokerBasicAuthenticationTokenOutput
	ToSaslRemoteBrokerBasicAuthenticationTokenOutputWithContext(context.Context) SaslRemoteBrokerBasicAuthenticationTokenOutput
}

// Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.
type SaslRemoteBrokerBasicAuthenticationTokenArgs struct {
	// Keyvault token keyvault secret properties.
	KeyVault KafkaTokenKeyVaultPropertiesPtrInput `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (SaslRemoteBrokerBasicAuthenticationTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslRemoteBrokerBasicAuthenticationToken)(nil)).Elem()
}

func (i SaslRemoteBrokerBasicAuthenticationTokenArgs) ToSaslRemoteBrokerBasicAuthenticationTokenOutput() SaslRemoteBrokerBasicAuthenticationTokenOutput {
	return i.ToSaslRemoteBrokerBasicAuthenticationTokenOutputWithContext(context.Background())
}

func (i SaslRemoteBrokerBasicAuthenticationTokenArgs) ToSaslRemoteBrokerBasicAuthenticationTokenOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslRemoteBrokerBasicAuthenticationTokenOutput)
}

func (i SaslRemoteBrokerBasicAuthenticationTokenArgs) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutput() SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return i.ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(context.Background())
}

func (i SaslRemoteBrokerBasicAuthenticationTokenArgs) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslRemoteBrokerBasicAuthenticationTokenOutput).ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(ctx)
}

// SaslRemoteBrokerBasicAuthenticationTokenPtrInput is an input type that accepts SaslRemoteBrokerBasicAuthenticationTokenArgs, SaslRemoteBrokerBasicAuthenticationTokenPtr and SaslRemoteBrokerBasicAuthenticationTokenPtrOutput values.
// You can construct a concrete instance of `SaslRemoteBrokerBasicAuthenticationTokenPtrInput` via:
//
//	        SaslRemoteBrokerBasicAuthenticationTokenArgs{...}
//
//	or:
//
//	        nil
type SaslRemoteBrokerBasicAuthenticationTokenPtrInput interface {
	pulumi.Input

	ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutput() SaslRemoteBrokerBasicAuthenticationTokenPtrOutput
	ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(context.Context) SaslRemoteBrokerBasicAuthenticationTokenPtrOutput
}

type saslRemoteBrokerBasicAuthenticationTokenPtrType SaslRemoteBrokerBasicAuthenticationTokenArgs

func SaslRemoteBrokerBasicAuthenticationTokenPtr(v *SaslRemoteBrokerBasicAuthenticationTokenArgs) SaslRemoteBrokerBasicAuthenticationTokenPtrInput {
	return (*saslRemoteBrokerBasicAuthenticationTokenPtrType)(v)
}

func (*saslRemoteBrokerBasicAuthenticationTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslRemoteBrokerBasicAuthenticationToken)(nil)).Elem()
}

func (i *saslRemoteBrokerBasicAuthenticationTokenPtrType) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutput() SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return i.ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(context.Background())
}

func (i *saslRemoteBrokerBasicAuthenticationTokenPtrType) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslRemoteBrokerBasicAuthenticationTokenPtrOutput)
}

// Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.
type SaslRemoteBrokerBasicAuthenticationTokenOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslRemoteBrokerBasicAuthenticationToken)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationTokenOutput) ToSaslRemoteBrokerBasicAuthenticationTokenOutput() SaslRemoteBrokerBasicAuthenticationTokenOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationTokenOutput) ToSaslRemoteBrokerBasicAuthenticationTokenOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationTokenOutput) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutput() SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return o.ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(context.Background())
}

func (o SaslRemoteBrokerBasicAuthenticationTokenOutput) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SaslRemoteBrokerBasicAuthenticationToken) *SaslRemoteBrokerBasicAuthenticationToken {
		return &v
	}).(SaslRemoteBrokerBasicAuthenticationTokenPtrOutput)
}

// Keyvault token keyvault secret properties.
func (o SaslRemoteBrokerBasicAuthenticationTokenOutput) KeyVault() KafkaTokenKeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthenticationToken) *KafkaTokenKeyVaultProperties { return v.KeyVault }).(KafkaTokenKeyVaultPropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o SaslRemoteBrokerBasicAuthenticationTokenOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthenticationToken) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type SaslRemoteBrokerBasicAuthenticationTokenPtrOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslRemoteBrokerBasicAuthenticationToken)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationTokenPtrOutput) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutput() SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationTokenPtrOutput) ToSaslRemoteBrokerBasicAuthenticationTokenPtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenPtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationTokenPtrOutput) Elem() SaslRemoteBrokerBasicAuthenticationTokenOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationToken) SaslRemoteBrokerBasicAuthenticationToken {
		if v != nil {
			return *v
		}
		var ret SaslRemoteBrokerBasicAuthenticationToken
		return ret
	}).(SaslRemoteBrokerBasicAuthenticationTokenOutput)
}

// Keyvault token keyvault secret properties.
func (o SaslRemoteBrokerBasicAuthenticationTokenPtrOutput) KeyVault() KafkaTokenKeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationToken) *KafkaTokenKeyVaultProperties {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KafkaTokenKeyVaultPropertiesPtrOutput)
}

// Secret where cert details are stored.
func (o SaslRemoteBrokerBasicAuthenticationTokenPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationToken) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.
type SaslRemoteBrokerBasicAuthenticationTokenResponse struct {
	// Keyvault token keyvault secret properties.
	KeyVault *KafkaTokenKeyVaultPropertiesResponse `pulumi:"keyVault"`
	// Secret where cert details are stored.
	SecretName *string `pulumi:"secretName"`
}

// Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.
type SaslRemoteBrokerBasicAuthenticationTokenResponseOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslRemoteBrokerBasicAuthenticationTokenResponse)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationTokenResponseOutput) ToSaslRemoteBrokerBasicAuthenticationTokenResponseOutput() SaslRemoteBrokerBasicAuthenticationTokenResponseOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationTokenResponseOutput) ToSaslRemoteBrokerBasicAuthenticationTokenResponseOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenResponseOutput {
	return o
}

// Keyvault token keyvault secret properties.
func (o SaslRemoteBrokerBasicAuthenticationTokenResponseOutput) KeyVault() KafkaTokenKeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthenticationTokenResponse) *KafkaTokenKeyVaultPropertiesResponse {
		return v.KeyVault
	}).(KafkaTokenKeyVaultPropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o SaslRemoteBrokerBasicAuthenticationTokenResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SaslRemoteBrokerBasicAuthenticationTokenResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslRemoteBrokerBasicAuthenticationTokenResponse)(nil)).Elem()
}

func (o SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput) ToSaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput() SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput) ToSaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutputWithContext(ctx context.Context) SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput {
	return o
}

func (o SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput) Elem() SaslRemoteBrokerBasicAuthenticationTokenResponseOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationTokenResponse) SaslRemoteBrokerBasicAuthenticationTokenResponse {
		if v != nil {
			return *v
		}
		var ret SaslRemoteBrokerBasicAuthenticationTokenResponse
		return ret
	}).(SaslRemoteBrokerBasicAuthenticationTokenResponseOutput)
}

// Keyvault token keyvault secret properties.
func (o SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput) KeyVault() KafkaTokenKeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationTokenResponse) *KafkaTokenKeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KafkaTokenKeyVaultPropertiesResponsePtrOutput)
}

// Secret where cert details are stored.
func (o SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaslRemoteBrokerBasicAuthenticationTokenResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Internal knobs of Resource Limits for FE and BE
type TemporaryResourceLimitsConfig struct {
	// Maximum number of messages a client can have inflight.
	MaxInflightMessages int `pulumi:"maxInflightMessages"`
	// Maximum number of patch inflight per node.
	MaxInflightPatches int `pulumi:"maxInflightPatches"`
	// Maximum number of patch a client can have in flight.
	MaxInflightPatchesPerClient int `pulumi:"maxInflightPatchesPerClient"`
	// Maximum message expiry interval, in seconds.
	MaxMessageExpirySecs *float64 `pulumi:"maxMessageExpirySecs"`
	// Maximum receive for external clients.
	MaxQueuedMessages float64 `pulumi:"maxQueuedMessages"`
	// Maximum receive QoS0 for external clients.
	MaxQueuedQos0Messages float64 `pulumi:"maxQueuedQos0Messages"`
	// Maximum session expiry interval, in seconds.
	MaxSessionExpirySecs float64 `pulumi:"maxSessionExpirySecs"`
}

// TemporaryResourceLimitsConfigInput is an input type that accepts TemporaryResourceLimitsConfigArgs and TemporaryResourceLimitsConfigOutput values.
// You can construct a concrete instance of `TemporaryResourceLimitsConfigInput` via:
//
//	TemporaryResourceLimitsConfigArgs{...}
type TemporaryResourceLimitsConfigInput interface {
	pulumi.Input

	ToTemporaryResourceLimitsConfigOutput() TemporaryResourceLimitsConfigOutput
	ToTemporaryResourceLimitsConfigOutputWithContext(context.Context) TemporaryResourceLimitsConfigOutput
}

// Internal knobs of Resource Limits for FE and BE
type TemporaryResourceLimitsConfigArgs struct {
	// Maximum number of messages a client can have inflight.
	MaxInflightMessages pulumi.IntInput `pulumi:"maxInflightMessages"`
	// Maximum number of patch inflight per node.
	MaxInflightPatches pulumi.IntInput `pulumi:"maxInflightPatches"`
	// Maximum number of patch a client can have in flight.
	MaxInflightPatchesPerClient pulumi.IntInput `pulumi:"maxInflightPatchesPerClient"`
	// Maximum message expiry interval, in seconds.
	MaxMessageExpirySecs pulumi.Float64PtrInput `pulumi:"maxMessageExpirySecs"`
	// Maximum receive for external clients.
	MaxQueuedMessages pulumi.Float64Input `pulumi:"maxQueuedMessages"`
	// Maximum receive QoS0 for external clients.
	MaxQueuedQos0Messages pulumi.Float64Input `pulumi:"maxQueuedQos0Messages"`
	// Maximum session expiry interval, in seconds.
	MaxSessionExpirySecs pulumi.Float64Input `pulumi:"maxSessionExpirySecs"`
}

func (TemporaryResourceLimitsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemporaryResourceLimitsConfig)(nil)).Elem()
}

func (i TemporaryResourceLimitsConfigArgs) ToTemporaryResourceLimitsConfigOutput() TemporaryResourceLimitsConfigOutput {
	return i.ToTemporaryResourceLimitsConfigOutputWithContext(context.Background())
}

func (i TemporaryResourceLimitsConfigArgs) ToTemporaryResourceLimitsConfigOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemporaryResourceLimitsConfigOutput)
}

func (i TemporaryResourceLimitsConfigArgs) ToTemporaryResourceLimitsConfigPtrOutput() TemporaryResourceLimitsConfigPtrOutput {
	return i.ToTemporaryResourceLimitsConfigPtrOutputWithContext(context.Background())
}

func (i TemporaryResourceLimitsConfigArgs) ToTemporaryResourceLimitsConfigPtrOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemporaryResourceLimitsConfigOutput).ToTemporaryResourceLimitsConfigPtrOutputWithContext(ctx)
}

// TemporaryResourceLimitsConfigPtrInput is an input type that accepts TemporaryResourceLimitsConfigArgs, TemporaryResourceLimitsConfigPtr and TemporaryResourceLimitsConfigPtrOutput values.
// You can construct a concrete instance of `TemporaryResourceLimitsConfigPtrInput` via:
//
//	        TemporaryResourceLimitsConfigArgs{...}
//
//	or:
//
//	        nil
type TemporaryResourceLimitsConfigPtrInput interface {
	pulumi.Input

	ToTemporaryResourceLimitsConfigPtrOutput() TemporaryResourceLimitsConfigPtrOutput
	ToTemporaryResourceLimitsConfigPtrOutputWithContext(context.Context) TemporaryResourceLimitsConfigPtrOutput
}

type temporaryResourceLimitsConfigPtrType TemporaryResourceLimitsConfigArgs

func TemporaryResourceLimitsConfigPtr(v *TemporaryResourceLimitsConfigArgs) TemporaryResourceLimitsConfigPtrInput {
	return (*temporaryResourceLimitsConfigPtrType)(v)
}

func (*temporaryResourceLimitsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemporaryResourceLimitsConfig)(nil)).Elem()
}

func (i *temporaryResourceLimitsConfigPtrType) ToTemporaryResourceLimitsConfigPtrOutput() TemporaryResourceLimitsConfigPtrOutput {
	return i.ToTemporaryResourceLimitsConfigPtrOutputWithContext(context.Background())
}

func (i *temporaryResourceLimitsConfigPtrType) ToTemporaryResourceLimitsConfigPtrOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemporaryResourceLimitsConfigPtrOutput)
}

// Internal knobs of Resource Limits for FE and BE
type TemporaryResourceLimitsConfigOutput struct{ *pulumi.OutputState }

func (TemporaryResourceLimitsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemporaryResourceLimitsConfig)(nil)).Elem()
}

func (o TemporaryResourceLimitsConfigOutput) ToTemporaryResourceLimitsConfigOutput() TemporaryResourceLimitsConfigOutput {
	return o
}

func (o TemporaryResourceLimitsConfigOutput) ToTemporaryResourceLimitsConfigOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigOutput {
	return o
}

func (o TemporaryResourceLimitsConfigOutput) ToTemporaryResourceLimitsConfigPtrOutput() TemporaryResourceLimitsConfigPtrOutput {
	return o.ToTemporaryResourceLimitsConfigPtrOutputWithContext(context.Background())
}

func (o TemporaryResourceLimitsConfigOutput) ToTemporaryResourceLimitsConfigPtrOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemporaryResourceLimitsConfig) *TemporaryResourceLimitsConfig {
		return &v
	}).(TemporaryResourceLimitsConfigPtrOutput)
}

// Maximum number of messages a client can have inflight.
func (o TemporaryResourceLimitsConfigOutput) MaxInflightMessages() pulumi.IntOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfig) int { return v.MaxInflightMessages }).(pulumi.IntOutput)
}

// Maximum number of patch inflight per node.
func (o TemporaryResourceLimitsConfigOutput) MaxInflightPatches() pulumi.IntOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfig) int { return v.MaxInflightPatches }).(pulumi.IntOutput)
}

// Maximum number of patch a client can have in flight.
func (o TemporaryResourceLimitsConfigOutput) MaxInflightPatchesPerClient() pulumi.IntOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfig) int { return v.MaxInflightPatchesPerClient }).(pulumi.IntOutput)
}

// Maximum message expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigOutput) MaxMessageExpirySecs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfig) *float64 { return v.MaxMessageExpirySecs }).(pulumi.Float64PtrOutput)
}

// Maximum receive for external clients.
func (o TemporaryResourceLimitsConfigOutput) MaxQueuedMessages() pulumi.Float64Output {
	return o.ApplyT(func(v TemporaryResourceLimitsConfig) float64 { return v.MaxQueuedMessages }).(pulumi.Float64Output)
}

// Maximum receive QoS0 for external clients.
func (o TemporaryResourceLimitsConfigOutput) MaxQueuedQos0Messages() pulumi.Float64Output {
	return o.ApplyT(func(v TemporaryResourceLimitsConfig) float64 { return v.MaxQueuedQos0Messages }).(pulumi.Float64Output)
}

// Maximum session expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigOutput) MaxSessionExpirySecs() pulumi.Float64Output {
	return o.ApplyT(func(v TemporaryResourceLimitsConfig) float64 { return v.MaxSessionExpirySecs }).(pulumi.Float64Output)
}

type TemporaryResourceLimitsConfigPtrOutput struct{ *pulumi.OutputState }

func (TemporaryResourceLimitsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemporaryResourceLimitsConfig)(nil)).Elem()
}

func (o TemporaryResourceLimitsConfigPtrOutput) ToTemporaryResourceLimitsConfigPtrOutput() TemporaryResourceLimitsConfigPtrOutput {
	return o
}

func (o TemporaryResourceLimitsConfigPtrOutput) ToTemporaryResourceLimitsConfigPtrOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigPtrOutput {
	return o
}

func (o TemporaryResourceLimitsConfigPtrOutput) Elem() TemporaryResourceLimitsConfigOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) TemporaryResourceLimitsConfig {
		if v != nil {
			return *v
		}
		var ret TemporaryResourceLimitsConfig
		return ret
	}).(TemporaryResourceLimitsConfigOutput)
}

// Maximum number of messages a client can have inflight.
func (o TemporaryResourceLimitsConfigPtrOutput) MaxInflightMessages() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MaxInflightMessages
	}).(pulumi.IntPtrOutput)
}

// Maximum number of patch inflight per node.
func (o TemporaryResourceLimitsConfigPtrOutput) MaxInflightPatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MaxInflightPatches
	}).(pulumi.IntPtrOutput)
}

// Maximum number of patch a client can have in flight.
func (o TemporaryResourceLimitsConfigPtrOutput) MaxInflightPatchesPerClient() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MaxInflightPatchesPerClient
	}).(pulumi.IntPtrOutput)
}

// Maximum message expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigPtrOutput) MaxMessageExpirySecs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxMessageExpirySecs
	}).(pulumi.Float64PtrOutput)
}

// Maximum receive for external clients.
func (o TemporaryResourceLimitsConfigPtrOutput) MaxQueuedMessages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxQueuedMessages
	}).(pulumi.Float64PtrOutput)
}

// Maximum receive QoS0 for external clients.
func (o TemporaryResourceLimitsConfigPtrOutput) MaxQueuedQos0Messages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxQueuedQos0Messages
	}).(pulumi.Float64PtrOutput)
}

// Maximum session expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigPtrOutput) MaxSessionExpirySecs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfig) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxSessionExpirySecs
	}).(pulumi.Float64PtrOutput)
}

// Internal knobs of Resource Limits for FE and BE
type TemporaryResourceLimitsConfigResponse struct {
	// Maximum number of messages a client can have inflight.
	MaxInflightMessages int `pulumi:"maxInflightMessages"`
	// Maximum number of patch inflight per node.
	MaxInflightPatches int `pulumi:"maxInflightPatches"`
	// Maximum number of patch a client can have in flight.
	MaxInflightPatchesPerClient int `pulumi:"maxInflightPatchesPerClient"`
	// Maximum message expiry interval, in seconds.
	MaxMessageExpirySecs *float64 `pulumi:"maxMessageExpirySecs"`
	// Maximum receive for external clients.
	MaxQueuedMessages float64 `pulumi:"maxQueuedMessages"`
	// Maximum receive QoS0 for external clients.
	MaxQueuedQos0Messages float64 `pulumi:"maxQueuedQos0Messages"`
	// Maximum session expiry interval, in seconds.
	MaxSessionExpirySecs float64 `pulumi:"maxSessionExpirySecs"`
}

// Internal knobs of Resource Limits for FE and BE
type TemporaryResourceLimitsConfigResponseOutput struct{ *pulumi.OutputState }

func (TemporaryResourceLimitsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemporaryResourceLimitsConfigResponse)(nil)).Elem()
}

func (o TemporaryResourceLimitsConfigResponseOutput) ToTemporaryResourceLimitsConfigResponseOutput() TemporaryResourceLimitsConfigResponseOutput {
	return o
}

func (o TemporaryResourceLimitsConfigResponseOutput) ToTemporaryResourceLimitsConfigResponseOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigResponseOutput {
	return o
}

// Maximum number of messages a client can have inflight.
func (o TemporaryResourceLimitsConfigResponseOutput) MaxInflightMessages() pulumi.IntOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfigResponse) int { return v.MaxInflightMessages }).(pulumi.IntOutput)
}

// Maximum number of patch inflight per node.
func (o TemporaryResourceLimitsConfigResponseOutput) MaxInflightPatches() pulumi.IntOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfigResponse) int { return v.MaxInflightPatches }).(pulumi.IntOutput)
}

// Maximum number of patch a client can have in flight.
func (o TemporaryResourceLimitsConfigResponseOutput) MaxInflightPatchesPerClient() pulumi.IntOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfigResponse) int { return v.MaxInflightPatchesPerClient }).(pulumi.IntOutput)
}

// Maximum message expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigResponseOutput) MaxMessageExpirySecs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemporaryResourceLimitsConfigResponse) *float64 { return v.MaxMessageExpirySecs }).(pulumi.Float64PtrOutput)
}

// Maximum receive for external clients.
func (o TemporaryResourceLimitsConfigResponseOutput) MaxQueuedMessages() pulumi.Float64Output {
	return o.ApplyT(func(v TemporaryResourceLimitsConfigResponse) float64 { return v.MaxQueuedMessages }).(pulumi.Float64Output)
}

// Maximum receive QoS0 for external clients.
func (o TemporaryResourceLimitsConfigResponseOutput) MaxQueuedQos0Messages() pulumi.Float64Output {
	return o.ApplyT(func(v TemporaryResourceLimitsConfigResponse) float64 { return v.MaxQueuedQos0Messages }).(pulumi.Float64Output)
}

// Maximum session expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigResponseOutput) MaxSessionExpirySecs() pulumi.Float64Output {
	return o.ApplyT(func(v TemporaryResourceLimitsConfigResponse) float64 { return v.MaxSessionExpirySecs }).(pulumi.Float64Output)
}

type TemporaryResourceLimitsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (TemporaryResourceLimitsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemporaryResourceLimitsConfigResponse)(nil)).Elem()
}

func (o TemporaryResourceLimitsConfigResponsePtrOutput) ToTemporaryResourceLimitsConfigResponsePtrOutput() TemporaryResourceLimitsConfigResponsePtrOutput {
	return o
}

func (o TemporaryResourceLimitsConfigResponsePtrOutput) ToTemporaryResourceLimitsConfigResponsePtrOutputWithContext(ctx context.Context) TemporaryResourceLimitsConfigResponsePtrOutput {
	return o
}

func (o TemporaryResourceLimitsConfigResponsePtrOutput) Elem() TemporaryResourceLimitsConfigResponseOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) TemporaryResourceLimitsConfigResponse {
		if v != nil {
			return *v
		}
		var ret TemporaryResourceLimitsConfigResponse
		return ret
	}).(TemporaryResourceLimitsConfigResponseOutput)
}

// Maximum number of messages a client can have inflight.
func (o TemporaryResourceLimitsConfigResponsePtrOutput) MaxInflightMessages() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxInflightMessages
	}).(pulumi.IntPtrOutput)
}

// Maximum number of patch inflight per node.
func (o TemporaryResourceLimitsConfigResponsePtrOutput) MaxInflightPatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxInflightPatches
	}).(pulumi.IntPtrOutput)
}

// Maximum number of patch a client can have in flight.
func (o TemporaryResourceLimitsConfigResponsePtrOutput) MaxInflightPatchesPerClient() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxInflightPatchesPerClient
	}).(pulumi.IntPtrOutput)
}

// Maximum message expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigResponsePtrOutput) MaxMessageExpirySecs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxMessageExpirySecs
	}).(pulumi.Float64PtrOutput)
}

// Maximum receive for external clients.
func (o TemporaryResourceLimitsConfigResponsePtrOutput) MaxQueuedMessages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxQueuedMessages
	}).(pulumi.Float64PtrOutput)
}

// Maximum receive QoS0 for external clients.
func (o TemporaryResourceLimitsConfigResponsePtrOutput) MaxQueuedQos0Messages() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxQueuedQos0Messages
	}).(pulumi.Float64PtrOutput)
}

// Maximum session expiry interval, in seconds.
func (o TemporaryResourceLimitsConfigResponsePtrOutput) MaxSessionExpirySecs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemporaryResourceLimitsConfigResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxSessionExpirySecs
	}).(pulumi.Float64PtrOutput)
}

// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
type TlsCertMethod struct {
	// Option 1 - Automatic TLS server certificate management with cert-manager.
	Automatic *AutomaticCertMethod `pulumi:"automatic"`
	// Option 3 - TLS server certificate retrieved from Key Vault..
	KeyVault *KeyVaultCertificateProperties `pulumi:"keyVault"`
	// Option 2 - Manual TLS server certificate management through a defined secret.
	Manual *ManualCertMethod `pulumi:"manual"`
}

// Defaults sets the appropriate defaults for TlsCertMethod
func (val *TlsCertMethod) Defaults() *TlsCertMethod {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Automatic = tmp.Automatic.Defaults()

	return &tmp
}

// TlsCertMethodInput is an input type that accepts TlsCertMethodArgs and TlsCertMethodOutput values.
// You can construct a concrete instance of `TlsCertMethodInput` via:
//
//	TlsCertMethodArgs{...}
type TlsCertMethodInput interface {
	pulumi.Input

	ToTlsCertMethodOutput() TlsCertMethodOutput
	ToTlsCertMethodOutputWithContext(context.Context) TlsCertMethodOutput
}

// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
type TlsCertMethodArgs struct {
	// Option 1 - Automatic TLS server certificate management with cert-manager.
	Automatic AutomaticCertMethodPtrInput `pulumi:"automatic"`
	// Option 3 - TLS server certificate retrieved from Key Vault..
	KeyVault KeyVaultCertificatePropertiesPtrInput `pulumi:"keyVault"`
	// Option 2 - Manual TLS server certificate management through a defined secret.
	Manual ManualCertMethodPtrInput `pulumi:"manual"`
}

// Defaults sets the appropriate defaults for TlsCertMethodArgs
func (val *TlsCertMethodArgs) Defaults() *TlsCertMethodArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TlsCertMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertMethod)(nil)).Elem()
}

func (i TlsCertMethodArgs) ToTlsCertMethodOutput() TlsCertMethodOutput {
	return i.ToTlsCertMethodOutputWithContext(context.Background())
}

func (i TlsCertMethodArgs) ToTlsCertMethodOutputWithContext(ctx context.Context) TlsCertMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertMethodOutput)
}

func (i TlsCertMethodArgs) ToTlsCertMethodPtrOutput() TlsCertMethodPtrOutput {
	return i.ToTlsCertMethodPtrOutputWithContext(context.Background())
}

func (i TlsCertMethodArgs) ToTlsCertMethodPtrOutputWithContext(ctx context.Context) TlsCertMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertMethodOutput).ToTlsCertMethodPtrOutputWithContext(ctx)
}

// TlsCertMethodPtrInput is an input type that accepts TlsCertMethodArgs, TlsCertMethodPtr and TlsCertMethodPtrOutput values.
// You can construct a concrete instance of `TlsCertMethodPtrInput` via:
//
//	        TlsCertMethodArgs{...}
//
//	or:
//
//	        nil
type TlsCertMethodPtrInput interface {
	pulumi.Input

	ToTlsCertMethodPtrOutput() TlsCertMethodPtrOutput
	ToTlsCertMethodPtrOutputWithContext(context.Context) TlsCertMethodPtrOutput
}

type tlsCertMethodPtrType TlsCertMethodArgs

func TlsCertMethodPtr(v *TlsCertMethodArgs) TlsCertMethodPtrInput {
	return (*tlsCertMethodPtrType)(v)
}

func (*tlsCertMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertMethod)(nil)).Elem()
}

func (i *tlsCertMethodPtrType) ToTlsCertMethodPtrOutput() TlsCertMethodPtrOutput {
	return i.ToTlsCertMethodPtrOutputWithContext(context.Background())
}

func (i *tlsCertMethodPtrType) ToTlsCertMethodPtrOutputWithContext(ctx context.Context) TlsCertMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertMethodPtrOutput)
}

// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
type TlsCertMethodOutput struct{ *pulumi.OutputState }

func (TlsCertMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertMethod)(nil)).Elem()
}

func (o TlsCertMethodOutput) ToTlsCertMethodOutput() TlsCertMethodOutput {
	return o
}

func (o TlsCertMethodOutput) ToTlsCertMethodOutputWithContext(ctx context.Context) TlsCertMethodOutput {
	return o
}

func (o TlsCertMethodOutput) ToTlsCertMethodPtrOutput() TlsCertMethodPtrOutput {
	return o.ToTlsCertMethodPtrOutputWithContext(context.Background())
}

func (o TlsCertMethodOutput) ToTlsCertMethodPtrOutputWithContext(ctx context.Context) TlsCertMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TlsCertMethod) *TlsCertMethod {
		return &v
	}).(TlsCertMethodPtrOutput)
}

// Option 1 - Automatic TLS server certificate management with cert-manager.
func (o TlsCertMethodOutput) Automatic() AutomaticCertMethodPtrOutput {
	return o.ApplyT(func(v TlsCertMethod) *AutomaticCertMethod { return v.Automatic }).(AutomaticCertMethodPtrOutput)
}

// Option 3 - TLS server certificate retrieved from Key Vault..
func (o TlsCertMethodOutput) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v TlsCertMethod) *KeyVaultCertificateProperties { return v.KeyVault }).(KeyVaultCertificatePropertiesPtrOutput)
}

// Option 2 - Manual TLS server certificate management through a defined secret.
func (o TlsCertMethodOutput) Manual() ManualCertMethodPtrOutput {
	return o.ApplyT(func(v TlsCertMethod) *ManualCertMethod { return v.Manual }).(ManualCertMethodPtrOutput)
}

type TlsCertMethodPtrOutput struct{ *pulumi.OutputState }

func (TlsCertMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertMethod)(nil)).Elem()
}

func (o TlsCertMethodPtrOutput) ToTlsCertMethodPtrOutput() TlsCertMethodPtrOutput {
	return o
}

func (o TlsCertMethodPtrOutput) ToTlsCertMethodPtrOutputWithContext(ctx context.Context) TlsCertMethodPtrOutput {
	return o
}

func (o TlsCertMethodPtrOutput) Elem() TlsCertMethodOutput {
	return o.ApplyT(func(v *TlsCertMethod) TlsCertMethod {
		if v != nil {
			return *v
		}
		var ret TlsCertMethod
		return ret
	}).(TlsCertMethodOutput)
}

// Option 1 - Automatic TLS server certificate management with cert-manager.
func (o TlsCertMethodPtrOutput) Automatic() AutomaticCertMethodPtrOutput {
	return o.ApplyT(func(v *TlsCertMethod) *AutomaticCertMethod {
		if v == nil {
			return nil
		}
		return v.Automatic
	}).(AutomaticCertMethodPtrOutput)
}

// Option 3 - TLS server certificate retrieved from Key Vault..
func (o TlsCertMethodPtrOutput) KeyVault() KeyVaultCertificatePropertiesPtrOutput {
	return o.ApplyT(func(v *TlsCertMethod) *KeyVaultCertificateProperties {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesPtrOutput)
}

// Option 2 - Manual TLS server certificate management through a defined secret.
func (o TlsCertMethodPtrOutput) Manual() ManualCertMethodPtrOutput {
	return o.ApplyT(func(v *TlsCertMethod) *ManualCertMethod {
		if v == nil {
			return nil
		}
		return v.Manual
	}).(ManualCertMethodPtrOutput)
}

// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
type TlsCertMethodResponse struct {
	// Option 1 - Automatic TLS server certificate management with cert-manager.
	Automatic *AutomaticCertMethodResponse `pulumi:"automatic"`
	// Option 3 - TLS server certificate retrieved from Key Vault..
	KeyVault *KeyVaultCertificatePropertiesResponse `pulumi:"keyVault"`
	// Option 2 - Manual TLS server certificate management through a defined secret.
	Manual *ManualCertMethodResponse `pulumi:"manual"`
}

// Defaults sets the appropriate defaults for TlsCertMethodResponse
func (val *TlsCertMethodResponse) Defaults() *TlsCertMethodResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Automatic = tmp.Automatic.Defaults()

	return &tmp
}

// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
type TlsCertMethodResponseOutput struct{ *pulumi.OutputState }

func (TlsCertMethodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertMethodResponse)(nil)).Elem()
}

func (o TlsCertMethodResponseOutput) ToTlsCertMethodResponseOutput() TlsCertMethodResponseOutput {
	return o
}

func (o TlsCertMethodResponseOutput) ToTlsCertMethodResponseOutputWithContext(ctx context.Context) TlsCertMethodResponseOutput {
	return o
}

// Option 1 - Automatic TLS server certificate management with cert-manager.
func (o TlsCertMethodResponseOutput) Automatic() AutomaticCertMethodResponsePtrOutput {
	return o.ApplyT(func(v TlsCertMethodResponse) *AutomaticCertMethodResponse { return v.Automatic }).(AutomaticCertMethodResponsePtrOutput)
}

// Option 3 - TLS server certificate retrieved from Key Vault..
func (o TlsCertMethodResponseOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v TlsCertMethodResponse) *KeyVaultCertificatePropertiesResponse { return v.KeyVault }).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Option 2 - Manual TLS server certificate management through a defined secret.
func (o TlsCertMethodResponseOutput) Manual() ManualCertMethodResponsePtrOutput {
	return o.ApplyT(func(v TlsCertMethodResponse) *ManualCertMethodResponse { return v.Manual }).(ManualCertMethodResponsePtrOutput)
}

type TlsCertMethodResponsePtrOutput struct{ *pulumi.OutputState }

func (TlsCertMethodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertMethodResponse)(nil)).Elem()
}

func (o TlsCertMethodResponsePtrOutput) ToTlsCertMethodResponsePtrOutput() TlsCertMethodResponsePtrOutput {
	return o
}

func (o TlsCertMethodResponsePtrOutput) ToTlsCertMethodResponsePtrOutputWithContext(ctx context.Context) TlsCertMethodResponsePtrOutput {
	return o
}

func (o TlsCertMethodResponsePtrOutput) Elem() TlsCertMethodResponseOutput {
	return o.ApplyT(func(v *TlsCertMethodResponse) TlsCertMethodResponse {
		if v != nil {
			return *v
		}
		var ret TlsCertMethodResponse
		return ret
	}).(TlsCertMethodResponseOutput)
}

// Option 1 - Automatic TLS server certificate management with cert-manager.
func (o TlsCertMethodResponsePtrOutput) Automatic() AutomaticCertMethodResponsePtrOutput {
	return o.ApplyT(func(v *TlsCertMethodResponse) *AutomaticCertMethodResponse {
		if v == nil {
			return nil
		}
		return v.Automatic
	}).(AutomaticCertMethodResponsePtrOutput)
}

// Option 3 - TLS server certificate retrieved from Key Vault..
func (o TlsCertMethodResponsePtrOutput) KeyVault() KeyVaultCertificatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *TlsCertMethodResponse) *KeyVaultCertificatePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultCertificatePropertiesResponsePtrOutput)
}

// Option 2 - Manual TLS server certificate management through a defined secret.
func (o TlsCertMethodResponsePtrOutput) Manual() ManualCertMethodResponsePtrOutput {
	return o.ApplyT(func(v *TlsCertMethodResponse) *ManualCertMethodResponse {
		if v == nil {
			return nil
		}
		return v.Manual
	}).(ManualCertMethodResponsePtrOutput)
}

// VolumeClaimDataSource properties
type VolumeClaimDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// VolumeClaimDataSourceInput is an input type that accepts VolumeClaimDataSourceArgs and VolumeClaimDataSourceOutput values.
// You can construct a concrete instance of `VolumeClaimDataSourceInput` via:
//
//	VolumeClaimDataSourceArgs{...}
type VolumeClaimDataSourceInput interface {
	pulumi.Input

	ToVolumeClaimDataSourceOutput() VolumeClaimDataSourceOutput
	ToVolumeClaimDataSourceOutputWithContext(context.Context) VolumeClaimDataSourceOutput
}

// VolumeClaimDataSource properties
type VolumeClaimDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (VolumeClaimDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimDataSource)(nil)).Elem()
}

func (i VolumeClaimDataSourceArgs) ToVolumeClaimDataSourceOutput() VolumeClaimDataSourceOutput {
	return i.ToVolumeClaimDataSourceOutputWithContext(context.Background())
}

func (i VolumeClaimDataSourceArgs) ToVolumeClaimDataSourceOutputWithContext(ctx context.Context) VolumeClaimDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimDataSourceOutput)
}

func (i VolumeClaimDataSourceArgs) ToVolumeClaimDataSourcePtrOutput() VolumeClaimDataSourcePtrOutput {
	return i.ToVolumeClaimDataSourcePtrOutputWithContext(context.Background())
}

func (i VolumeClaimDataSourceArgs) ToVolumeClaimDataSourcePtrOutputWithContext(ctx context.Context) VolumeClaimDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimDataSourceOutput).ToVolumeClaimDataSourcePtrOutputWithContext(ctx)
}

// VolumeClaimDataSourcePtrInput is an input type that accepts VolumeClaimDataSourceArgs, VolumeClaimDataSourcePtr and VolumeClaimDataSourcePtrOutput values.
// You can construct a concrete instance of `VolumeClaimDataSourcePtrInput` via:
//
//	        VolumeClaimDataSourceArgs{...}
//
//	or:
//
//	        nil
type VolumeClaimDataSourcePtrInput interface {
	pulumi.Input

	ToVolumeClaimDataSourcePtrOutput() VolumeClaimDataSourcePtrOutput
	ToVolumeClaimDataSourcePtrOutputWithContext(context.Context) VolumeClaimDataSourcePtrOutput
}

type volumeClaimDataSourcePtrType VolumeClaimDataSourceArgs

func VolumeClaimDataSourcePtr(v *VolumeClaimDataSourceArgs) VolumeClaimDataSourcePtrInput {
	return (*volumeClaimDataSourcePtrType)(v)
}

func (*volumeClaimDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimDataSource)(nil)).Elem()
}

func (i *volumeClaimDataSourcePtrType) ToVolumeClaimDataSourcePtrOutput() VolumeClaimDataSourcePtrOutput {
	return i.ToVolumeClaimDataSourcePtrOutputWithContext(context.Background())
}

func (i *volumeClaimDataSourcePtrType) ToVolumeClaimDataSourcePtrOutputWithContext(ctx context.Context) VolumeClaimDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimDataSourcePtrOutput)
}

// VolumeClaimDataSource properties
type VolumeClaimDataSourceOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimDataSource)(nil)).Elem()
}

func (o VolumeClaimDataSourceOutput) ToVolumeClaimDataSourceOutput() VolumeClaimDataSourceOutput {
	return o
}

func (o VolumeClaimDataSourceOutput) ToVolumeClaimDataSourceOutputWithContext(ctx context.Context) VolumeClaimDataSourceOutput {
	return o
}

func (o VolumeClaimDataSourceOutput) ToVolumeClaimDataSourcePtrOutput() VolumeClaimDataSourcePtrOutput {
	return o.ToVolumeClaimDataSourcePtrOutputWithContext(context.Background())
}

func (o VolumeClaimDataSourceOutput) ToVolumeClaimDataSourcePtrOutputWithContext(ctx context.Context) VolumeClaimDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeClaimDataSource) *VolumeClaimDataSource {
		return &v
	}).(VolumeClaimDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSource) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSource) string { return v.Name }).(pulumi.StringOutput)
}

type VolumeClaimDataSourcePtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimDataSource)(nil)).Elem()
}

func (o VolumeClaimDataSourcePtrOutput) ToVolumeClaimDataSourcePtrOutput() VolumeClaimDataSourcePtrOutput {
	return o
}

func (o VolumeClaimDataSourcePtrOutput) ToVolumeClaimDataSourcePtrOutputWithContext(ctx context.Context) VolumeClaimDataSourcePtrOutput {
	return o
}

func (o VolumeClaimDataSourcePtrOutput) Elem() VolumeClaimDataSourceOutput {
	return o.ApplyT(func(v *VolumeClaimDataSource) VolumeClaimDataSource {
		if v != nil {
			return *v
		}
		var ret VolumeClaimDataSource
		return ret
	}).(VolumeClaimDataSourceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimDataSourceRef properties
type VolumeClaimDataSourceRef struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// VolumeClaimDataSourceRefInput is an input type that accepts VolumeClaimDataSourceRefArgs and VolumeClaimDataSourceRefOutput values.
// You can construct a concrete instance of `VolumeClaimDataSourceRefInput` via:
//
//	VolumeClaimDataSourceRefArgs{...}
type VolumeClaimDataSourceRefInput interface {
	pulumi.Input

	ToVolumeClaimDataSourceRefOutput() VolumeClaimDataSourceRefOutput
	ToVolumeClaimDataSourceRefOutputWithContext(context.Context) VolumeClaimDataSourceRefOutput
}

// VolumeClaimDataSourceRef properties
type VolumeClaimDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (VolumeClaimDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimDataSourceRef)(nil)).Elem()
}

func (i VolumeClaimDataSourceRefArgs) ToVolumeClaimDataSourceRefOutput() VolumeClaimDataSourceRefOutput {
	return i.ToVolumeClaimDataSourceRefOutputWithContext(context.Background())
}

func (i VolumeClaimDataSourceRefArgs) ToVolumeClaimDataSourceRefOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimDataSourceRefOutput)
}

func (i VolumeClaimDataSourceRefArgs) ToVolumeClaimDataSourceRefPtrOutput() VolumeClaimDataSourceRefPtrOutput {
	return i.ToVolumeClaimDataSourceRefPtrOutputWithContext(context.Background())
}

func (i VolumeClaimDataSourceRefArgs) ToVolumeClaimDataSourceRefPtrOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimDataSourceRefOutput).ToVolumeClaimDataSourceRefPtrOutputWithContext(ctx)
}

// VolumeClaimDataSourceRefPtrInput is an input type that accepts VolumeClaimDataSourceRefArgs, VolumeClaimDataSourceRefPtr and VolumeClaimDataSourceRefPtrOutput values.
// You can construct a concrete instance of `VolumeClaimDataSourceRefPtrInput` via:
//
//	        VolumeClaimDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type VolumeClaimDataSourceRefPtrInput interface {
	pulumi.Input

	ToVolumeClaimDataSourceRefPtrOutput() VolumeClaimDataSourceRefPtrOutput
	ToVolumeClaimDataSourceRefPtrOutputWithContext(context.Context) VolumeClaimDataSourceRefPtrOutput
}

type volumeClaimDataSourceRefPtrType VolumeClaimDataSourceRefArgs

func VolumeClaimDataSourceRefPtr(v *VolumeClaimDataSourceRefArgs) VolumeClaimDataSourceRefPtrInput {
	return (*volumeClaimDataSourceRefPtrType)(v)
}

func (*volumeClaimDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimDataSourceRef)(nil)).Elem()
}

func (i *volumeClaimDataSourceRefPtrType) ToVolumeClaimDataSourceRefPtrOutput() VolumeClaimDataSourceRefPtrOutput {
	return i.ToVolumeClaimDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *volumeClaimDataSourceRefPtrType) ToVolumeClaimDataSourceRefPtrOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimDataSourceRefPtrOutput)
}

// VolumeClaimDataSourceRef properties
type VolumeClaimDataSourceRefOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimDataSourceRef)(nil)).Elem()
}

func (o VolumeClaimDataSourceRefOutput) ToVolumeClaimDataSourceRefOutput() VolumeClaimDataSourceRefOutput {
	return o
}

func (o VolumeClaimDataSourceRefOutput) ToVolumeClaimDataSourceRefOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefOutput {
	return o
}

func (o VolumeClaimDataSourceRefOutput) ToVolumeClaimDataSourceRefPtrOutput() VolumeClaimDataSourceRefPtrOutput {
	return o.ToVolumeClaimDataSourceRefPtrOutputWithContext(context.Background())
}

func (o VolumeClaimDataSourceRefOutput) ToVolumeClaimDataSourceRefPtrOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeClaimDataSourceRef) *VolumeClaimDataSourceRef {
		return &v
	}).(VolumeClaimDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourceRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourceRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceRef) string { return v.Name }).(pulumi.StringOutput)
}

type VolumeClaimDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimDataSourceRef)(nil)).Elem()
}

func (o VolumeClaimDataSourceRefPtrOutput) ToVolumeClaimDataSourceRefPtrOutput() VolumeClaimDataSourceRefPtrOutput {
	return o
}

func (o VolumeClaimDataSourceRefPtrOutput) ToVolumeClaimDataSourceRefPtrOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefPtrOutput {
	return o
}

func (o VolumeClaimDataSourceRefPtrOutput) Elem() VolumeClaimDataSourceRefOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRef) VolumeClaimDataSourceRef {
		if v != nil {
			return *v
		}
		var ret VolumeClaimDataSourceRef
		return ret
	}).(VolumeClaimDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimDataSourceRef properties
type VolumeClaimDataSourceRefResponse struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// VolumeClaimDataSourceRef properties
type VolumeClaimDataSourceRefResponseOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourceRefResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimDataSourceRefResponse)(nil)).Elem()
}

func (o VolumeClaimDataSourceRefResponseOutput) ToVolumeClaimDataSourceRefResponseOutput() VolumeClaimDataSourceRefResponseOutput {
	return o
}

func (o VolumeClaimDataSourceRefResponseOutput) ToVolumeClaimDataSourceRefResponseOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefResponseOutput {
	return o
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourceRefResponseOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceRefResponse) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourceRefResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceRefResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourceRefResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceRefResponse) string { return v.Name }).(pulumi.StringOutput)
}

type VolumeClaimDataSourceRefResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourceRefResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimDataSourceRefResponse)(nil)).Elem()
}

func (o VolumeClaimDataSourceRefResponsePtrOutput) ToVolumeClaimDataSourceRefResponsePtrOutput() VolumeClaimDataSourceRefResponsePtrOutput {
	return o
}

func (o VolumeClaimDataSourceRefResponsePtrOutput) ToVolumeClaimDataSourceRefResponsePtrOutputWithContext(ctx context.Context) VolumeClaimDataSourceRefResponsePtrOutput {
	return o
}

func (o VolumeClaimDataSourceRefResponsePtrOutput) Elem() VolumeClaimDataSourceRefResponseOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRefResponse) VolumeClaimDataSourceRefResponse {
		if v != nil {
			return *v
		}
		var ret VolumeClaimDataSourceRefResponse
		return ret
	}).(VolumeClaimDataSourceRefResponseOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourceRefResponsePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRefResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourceRefResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRefResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourceRefResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceRefResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimDataSource properties
type VolumeClaimDataSourceResponse struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// VolumeClaimDataSource properties
type VolumeClaimDataSourceResponseOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimDataSourceResponse)(nil)).Elem()
}

func (o VolumeClaimDataSourceResponseOutput) ToVolumeClaimDataSourceResponseOutput() VolumeClaimDataSourceResponseOutput {
	return o
}

func (o VolumeClaimDataSourceResponseOutput) ToVolumeClaimDataSourceResponseOutputWithContext(ctx context.Context) VolumeClaimDataSourceResponseOutput {
	return o
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourceResponseOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceResponse) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimDataSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

type VolumeClaimDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimDataSourceResponse)(nil)).Elem()
}

func (o VolumeClaimDataSourceResponsePtrOutput) ToVolumeClaimDataSourceResponsePtrOutput() VolumeClaimDataSourceResponsePtrOutput {
	return o
}

func (o VolumeClaimDataSourceResponsePtrOutput) ToVolumeClaimDataSourceResponsePtrOutputWithContext(ctx context.Context) VolumeClaimDataSourceResponsePtrOutput {
	return o
}

func (o VolumeClaimDataSourceResponsePtrOutput) Elem() VolumeClaimDataSourceResponseOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceResponse) VolumeClaimDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret VolumeClaimDataSourceResponse
		return ret
	}).(VolumeClaimDataSourceResponseOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o VolumeClaimDataSourceResponsePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o VolumeClaimDataSourceResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o VolumeClaimDataSourceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimResourceRequirements properties
type VolumeClaimResourceRequirements struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]string `pulumi:"requests"`
}

// VolumeClaimResourceRequirementsInput is an input type that accepts VolumeClaimResourceRequirementsArgs and VolumeClaimResourceRequirementsOutput values.
// You can construct a concrete instance of `VolumeClaimResourceRequirementsInput` via:
//
//	VolumeClaimResourceRequirementsArgs{...}
type VolumeClaimResourceRequirementsInput interface {
	pulumi.Input

	ToVolumeClaimResourceRequirementsOutput() VolumeClaimResourceRequirementsOutput
	ToVolumeClaimResourceRequirementsOutputWithContext(context.Context) VolumeClaimResourceRequirementsOutput
}

// VolumeClaimResourceRequirements properties
type VolumeClaimResourceRequirementsArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (VolumeClaimResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimResourceRequirements)(nil)).Elem()
}

func (i VolumeClaimResourceRequirementsArgs) ToVolumeClaimResourceRequirementsOutput() VolumeClaimResourceRequirementsOutput {
	return i.ToVolumeClaimResourceRequirementsOutputWithContext(context.Background())
}

func (i VolumeClaimResourceRequirementsArgs) ToVolumeClaimResourceRequirementsOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimResourceRequirementsOutput)
}

func (i VolumeClaimResourceRequirementsArgs) ToVolumeClaimResourceRequirementsPtrOutput() VolumeClaimResourceRequirementsPtrOutput {
	return i.ToVolumeClaimResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i VolumeClaimResourceRequirementsArgs) ToVolumeClaimResourceRequirementsPtrOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimResourceRequirementsOutput).ToVolumeClaimResourceRequirementsPtrOutputWithContext(ctx)
}

// VolumeClaimResourceRequirementsPtrInput is an input type that accepts VolumeClaimResourceRequirementsArgs, VolumeClaimResourceRequirementsPtr and VolumeClaimResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `VolumeClaimResourceRequirementsPtrInput` via:
//
//	        VolumeClaimResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type VolumeClaimResourceRequirementsPtrInput interface {
	pulumi.Input

	ToVolumeClaimResourceRequirementsPtrOutput() VolumeClaimResourceRequirementsPtrOutput
	ToVolumeClaimResourceRequirementsPtrOutputWithContext(context.Context) VolumeClaimResourceRequirementsPtrOutput
}

type volumeClaimResourceRequirementsPtrType VolumeClaimResourceRequirementsArgs

func VolumeClaimResourceRequirementsPtr(v *VolumeClaimResourceRequirementsArgs) VolumeClaimResourceRequirementsPtrInput {
	return (*volumeClaimResourceRequirementsPtrType)(v)
}

func (*volumeClaimResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimResourceRequirements)(nil)).Elem()
}

func (i *volumeClaimResourceRequirementsPtrType) ToVolumeClaimResourceRequirementsPtrOutput() VolumeClaimResourceRequirementsPtrOutput {
	return i.ToVolumeClaimResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *volumeClaimResourceRequirementsPtrType) ToVolumeClaimResourceRequirementsPtrOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimResourceRequirementsPtrOutput)
}

// VolumeClaimResourceRequirements properties
type VolumeClaimResourceRequirementsOutput struct{ *pulumi.OutputState }

func (VolumeClaimResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimResourceRequirements)(nil)).Elem()
}

func (o VolumeClaimResourceRequirementsOutput) ToVolumeClaimResourceRequirementsOutput() VolumeClaimResourceRequirementsOutput {
	return o
}

func (o VolumeClaimResourceRequirementsOutput) ToVolumeClaimResourceRequirementsOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsOutput {
	return o
}

func (o VolumeClaimResourceRequirementsOutput) ToVolumeClaimResourceRequirementsPtrOutput() VolumeClaimResourceRequirementsPtrOutput {
	return o.ToVolumeClaimResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o VolumeClaimResourceRequirementsOutput) ToVolumeClaimResourceRequirementsPtrOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeClaimResourceRequirements) *VolumeClaimResourceRequirements {
		return &v
	}).(VolumeClaimResourceRequirementsPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeClaimResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeClaimResourceRequirements) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type VolumeClaimResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimResourceRequirements)(nil)).Elem()
}

func (o VolumeClaimResourceRequirementsPtrOutput) ToVolumeClaimResourceRequirementsPtrOutput() VolumeClaimResourceRequirementsPtrOutput {
	return o
}

func (o VolumeClaimResourceRequirementsPtrOutput) ToVolumeClaimResourceRequirementsPtrOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsPtrOutput {
	return o
}

func (o VolumeClaimResourceRequirementsPtrOutput) Elem() VolumeClaimResourceRequirementsOutput {
	return o.ApplyT(func(v *VolumeClaimResourceRequirements) VolumeClaimResourceRequirements {
		if v != nil {
			return *v
		}
		var ret VolumeClaimResourceRequirements
		return ret
	}).(VolumeClaimResourceRequirementsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeClaimResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeClaimResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// VolumeClaimResourceRequirements properties
type VolumeClaimResourceRequirementsResponse struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]string `pulumi:"requests"`
}

// VolumeClaimResourceRequirements properties
type VolumeClaimResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (VolumeClaimResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimResourceRequirementsResponse)(nil)).Elem()
}

func (o VolumeClaimResourceRequirementsResponseOutput) ToVolumeClaimResourceRequirementsResponseOutput() VolumeClaimResourceRequirementsResponseOutput {
	return o
}

func (o VolumeClaimResourceRequirementsResponseOutput) ToVolumeClaimResourceRequirementsResponseOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsResponseOutput {
	return o
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsResponseOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeClaimResourceRequirementsResponse) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsResponseOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeClaimResourceRequirementsResponse) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type VolumeClaimResourceRequirementsResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimResourceRequirementsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimResourceRequirementsResponse)(nil)).Elem()
}

func (o VolumeClaimResourceRequirementsResponsePtrOutput) ToVolumeClaimResourceRequirementsResponsePtrOutput() VolumeClaimResourceRequirementsResponsePtrOutput {
	return o
}

func (o VolumeClaimResourceRequirementsResponsePtrOutput) ToVolumeClaimResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) VolumeClaimResourceRequirementsResponsePtrOutput {
	return o
}

func (o VolumeClaimResourceRequirementsResponsePtrOutput) Elem() VolumeClaimResourceRequirementsResponseOutput {
	return o.ApplyT(func(v *VolumeClaimResourceRequirementsResponse) VolumeClaimResourceRequirementsResponse {
		if v != nil {
			return *v
		}
		var ret VolumeClaimResourceRequirementsResponse
		return ret
	}).(VolumeClaimResourceRequirementsResponseOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsResponsePtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeClaimResourceRequirementsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o VolumeClaimResourceRequirementsResponsePtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeClaimResourceRequirementsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// VolumeClaimSpec properties
type VolumeClaimSpec struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
	DataSource *VolumeClaimDataSource `pulumi:"dataSource"`
	// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
	DataSourceRef *VolumeClaimDataSourceRef `pulumi:"dataSourceRef"`
	// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *VolumeClaimResourceRequirements `pulumi:"resources"`
	// A label query over volumes to consider for binding.
	Selector *VolumeClaimSpecSelector `pulumi:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
	VolumeMode *string `pulumi:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// VolumeClaimSpecInput is an input type that accepts VolumeClaimSpecArgs and VolumeClaimSpecOutput values.
// You can construct a concrete instance of `VolumeClaimSpecInput` via:
//
//	VolumeClaimSpecArgs{...}
type VolumeClaimSpecInput interface {
	pulumi.Input

	ToVolumeClaimSpecOutput() VolumeClaimSpecOutput
	ToVolumeClaimSpecOutputWithContext(context.Context) VolumeClaimSpecOutput
}

// VolumeClaimSpec properties
type VolumeClaimSpecArgs struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
	DataSource VolumeClaimDataSourcePtrInput `pulumi:"dataSource"`
	// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
	DataSourceRef VolumeClaimDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources VolumeClaimResourceRequirementsPtrInput `pulumi:"resources"`
	// A label query over volumes to consider for binding.
	Selector VolumeClaimSpecSelectorPtrInput `pulumi:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (VolumeClaimSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpec)(nil)).Elem()
}

func (i VolumeClaimSpecArgs) ToVolumeClaimSpecOutput() VolumeClaimSpecOutput {
	return i.ToVolumeClaimSpecOutputWithContext(context.Background())
}

func (i VolumeClaimSpecArgs) ToVolumeClaimSpecOutputWithContext(ctx context.Context) VolumeClaimSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecOutput)
}

func (i VolumeClaimSpecArgs) ToVolumeClaimSpecPtrOutput() VolumeClaimSpecPtrOutput {
	return i.ToVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (i VolumeClaimSpecArgs) ToVolumeClaimSpecPtrOutputWithContext(ctx context.Context) VolumeClaimSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecOutput).ToVolumeClaimSpecPtrOutputWithContext(ctx)
}

// VolumeClaimSpecPtrInput is an input type that accepts VolumeClaimSpecArgs, VolumeClaimSpecPtr and VolumeClaimSpecPtrOutput values.
// You can construct a concrete instance of `VolumeClaimSpecPtrInput` via:
//
//	        VolumeClaimSpecArgs{...}
//
//	or:
//
//	        nil
type VolumeClaimSpecPtrInput interface {
	pulumi.Input

	ToVolumeClaimSpecPtrOutput() VolumeClaimSpecPtrOutput
	ToVolumeClaimSpecPtrOutputWithContext(context.Context) VolumeClaimSpecPtrOutput
}

type volumeClaimSpecPtrType VolumeClaimSpecArgs

func VolumeClaimSpecPtr(v *VolumeClaimSpecArgs) VolumeClaimSpecPtrInput {
	return (*volumeClaimSpecPtrType)(v)
}

func (*volumeClaimSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimSpec)(nil)).Elem()
}

func (i *volumeClaimSpecPtrType) ToVolumeClaimSpecPtrOutput() VolumeClaimSpecPtrOutput {
	return i.ToVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (i *volumeClaimSpecPtrType) ToVolumeClaimSpecPtrOutputWithContext(ctx context.Context) VolumeClaimSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecPtrOutput)
}

// VolumeClaimSpec properties
type VolumeClaimSpecOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpec)(nil)).Elem()
}

func (o VolumeClaimSpecOutput) ToVolumeClaimSpecOutput() VolumeClaimSpecOutput {
	return o
}

func (o VolumeClaimSpecOutput) ToVolumeClaimSpecOutputWithContext(ctx context.Context) VolumeClaimSpecOutput {
	return o
}

func (o VolumeClaimSpecOutput) ToVolumeClaimSpecPtrOutput() VolumeClaimSpecPtrOutput {
	return o.ToVolumeClaimSpecPtrOutputWithContext(context.Background())
}

func (o VolumeClaimSpecOutput) ToVolumeClaimSpecPtrOutputWithContext(ctx context.Context) VolumeClaimSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeClaimSpec) *VolumeClaimSpec {
		return &v
	}).(VolumeClaimSpecPtrOutput)
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o VolumeClaimSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeClaimSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
func (o VolumeClaimSpecOutput) DataSource() VolumeClaimDataSourcePtrOutput {
	return o.ApplyT(func(v VolumeClaimSpec) *VolumeClaimDataSource { return v.DataSource }).(VolumeClaimDataSourcePtrOutput)
}

// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
func (o VolumeClaimSpecOutput) DataSourceRef() VolumeClaimDataSourceRefPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpec) *VolumeClaimDataSourceRef { return v.DataSourceRef }).(VolumeClaimDataSourceRefPtrOutput)
}

// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o VolumeClaimSpecOutput) Resources() VolumeClaimResourceRequirementsPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpec) *VolumeClaimResourceRequirements { return v.Resources }).(VolumeClaimResourceRequirementsPtrOutput)
}

// A label query over volumes to consider for binding.
func (o VolumeClaimSpecOutput) Selector() VolumeClaimSpecSelectorPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpec) *VolumeClaimSpecSelector { return v.Selector }).(VolumeClaimSpecSelectorPtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o VolumeClaimSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
func (o VolumeClaimSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o VolumeClaimSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type VolumeClaimSpecPtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimSpec)(nil)).Elem()
}

func (o VolumeClaimSpecPtrOutput) ToVolumeClaimSpecPtrOutput() VolumeClaimSpecPtrOutput {
	return o
}

func (o VolumeClaimSpecPtrOutput) ToVolumeClaimSpecPtrOutputWithContext(ctx context.Context) VolumeClaimSpecPtrOutput {
	return o
}

func (o VolumeClaimSpecPtrOutput) Elem() VolumeClaimSpecOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) VolumeClaimSpec {
		if v != nil {
			return *v
		}
		var ret VolumeClaimSpec
		return ret
	}).(VolumeClaimSpecOutput)
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o VolumeClaimSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
func (o VolumeClaimSpecPtrOutput) DataSource() VolumeClaimDataSourcePtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) *VolumeClaimDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(VolumeClaimDataSourcePtrOutput)
}

// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
func (o VolumeClaimSpecPtrOutput) DataSourceRef() VolumeClaimDataSourceRefPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) *VolumeClaimDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(VolumeClaimDataSourceRefPtrOutput)
}

// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o VolumeClaimSpecPtrOutput) Resources() VolumeClaimResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) *VolumeClaimResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(VolumeClaimResourceRequirementsPtrOutput)
}

// A label query over volumes to consider for binding.
func (o VolumeClaimSpecPtrOutput) Selector() VolumeClaimSpecSelectorPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) *VolumeClaimSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(VolumeClaimSpecSelectorPtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o VolumeClaimSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
func (o VolumeClaimSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o VolumeClaimSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimSpec properties
type VolumeClaimSpecResponse struct {
	// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
	DataSource *VolumeClaimDataSourceResponse `pulumi:"dataSource"`
	// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
	DataSourceRef *VolumeClaimDataSourceRefResponse `pulumi:"dataSourceRef"`
	// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *VolumeClaimResourceRequirementsResponse `pulumi:"resources"`
	// A label query over volumes to consider for binding.
	Selector *VolumeClaimSpecSelectorResponse `pulumi:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
	VolumeMode *string `pulumi:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// VolumeClaimSpec properties
type VolumeClaimSpecResponseOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpecResponse)(nil)).Elem()
}

func (o VolumeClaimSpecResponseOutput) ToVolumeClaimSpecResponseOutput() VolumeClaimSpecResponseOutput {
	return o
}

func (o VolumeClaimSpecResponseOutput) ToVolumeClaimSpecResponseOutputWithContext(ctx context.Context) VolumeClaimSpecResponseOutput {
	return o
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o VolumeClaimSpecResponseOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
func (o VolumeClaimSpecResponseOutput) DataSource() VolumeClaimDataSourceResponsePtrOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) *VolumeClaimDataSourceResponse { return v.DataSource }).(VolumeClaimDataSourceResponsePtrOutput)
}

// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
func (o VolumeClaimSpecResponseOutput) DataSourceRef() VolumeClaimDataSourceRefResponsePtrOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) *VolumeClaimDataSourceRefResponse { return v.DataSourceRef }).(VolumeClaimDataSourceRefResponsePtrOutput)
}

// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o VolumeClaimSpecResponseOutput) Resources() VolumeClaimResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) *VolumeClaimResourceRequirementsResponse { return v.Resources }).(VolumeClaimResourceRequirementsResponsePtrOutput)
}

// A label query over volumes to consider for binding.
func (o VolumeClaimSpecResponseOutput) Selector() VolumeClaimSpecSelectorResponsePtrOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) *VolumeClaimSpecSelectorResponse { return v.Selector }).(VolumeClaimSpecSelectorResponsePtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o VolumeClaimSpecResponseOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
func (o VolumeClaimSpecResponseOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o VolumeClaimSpecResponseOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeClaimSpecResponse) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type VolumeClaimSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimSpecResponse)(nil)).Elem()
}

func (o VolumeClaimSpecResponsePtrOutput) ToVolumeClaimSpecResponsePtrOutput() VolumeClaimSpecResponsePtrOutput {
	return o
}

func (o VolumeClaimSpecResponsePtrOutput) ToVolumeClaimSpecResponsePtrOutputWithContext(ctx context.Context) VolumeClaimSpecResponsePtrOutput {
	return o
}

func (o VolumeClaimSpecResponsePtrOutput) Elem() VolumeClaimSpecResponseOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) VolumeClaimSpecResponse {
		if v != nil {
			return *v
		}
		var ret VolumeClaimSpecResponse
		return ret
	}).(VolumeClaimSpecResponseOutput)
}

// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o VolumeClaimSpecResponsePtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
func (o VolumeClaimSpecResponsePtrOutput) DataSource() VolumeClaimDataSourceResponsePtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) *VolumeClaimDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(VolumeClaimDataSourceResponsePtrOutput)
}

// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
func (o VolumeClaimSpecResponsePtrOutput) DataSourceRef() VolumeClaimDataSourceRefResponsePtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) *VolumeClaimDataSourceRefResponse {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(VolumeClaimDataSourceRefResponsePtrOutput)
}

// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o VolumeClaimSpecResponsePtrOutput) Resources() VolumeClaimResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) *VolumeClaimResourceRequirementsResponse {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(VolumeClaimResourceRequirementsResponsePtrOutput)
}

// A label query over volumes to consider for binding.
func (o VolumeClaimSpecResponsePtrOutput) Selector() VolumeClaimSpecSelectorResponsePtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) *VolumeClaimSpecSelectorResponse {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(VolumeClaimSpecSelectorResponsePtrOutput)
}

// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o VolumeClaimSpecResponsePtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
func (o VolumeClaimSpecResponsePtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// VolumeName is the binding reference to the PersistentVolume backing this claim.
func (o VolumeClaimSpecResponsePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeClaimSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimSpecSelector properties
type VolumeClaimSpecSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []VolumeClaimSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// VolumeClaimSpecSelectorInput is an input type that accepts VolumeClaimSpecSelectorArgs and VolumeClaimSpecSelectorOutput values.
// You can construct a concrete instance of `VolumeClaimSpecSelectorInput` via:
//
//	VolumeClaimSpecSelectorArgs{...}
type VolumeClaimSpecSelectorInput interface {
	pulumi.Input

	ToVolumeClaimSpecSelectorOutput() VolumeClaimSpecSelectorOutput
	ToVolumeClaimSpecSelectorOutputWithContext(context.Context) VolumeClaimSpecSelectorOutput
}

// VolumeClaimSpecSelector properties
type VolumeClaimSpecSelectorArgs struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions VolumeClaimSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (VolumeClaimSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpecSelector)(nil)).Elem()
}

func (i VolumeClaimSpecSelectorArgs) ToVolumeClaimSpecSelectorOutput() VolumeClaimSpecSelectorOutput {
	return i.ToVolumeClaimSpecSelectorOutputWithContext(context.Background())
}

func (i VolumeClaimSpecSelectorArgs) ToVolumeClaimSpecSelectorOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecSelectorOutput)
}

func (i VolumeClaimSpecSelectorArgs) ToVolumeClaimSpecSelectorPtrOutput() VolumeClaimSpecSelectorPtrOutput {
	return i.ToVolumeClaimSpecSelectorPtrOutputWithContext(context.Background())
}

func (i VolumeClaimSpecSelectorArgs) ToVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecSelectorOutput).ToVolumeClaimSpecSelectorPtrOutputWithContext(ctx)
}

// VolumeClaimSpecSelectorPtrInput is an input type that accepts VolumeClaimSpecSelectorArgs, VolumeClaimSpecSelectorPtr and VolumeClaimSpecSelectorPtrOutput values.
// You can construct a concrete instance of `VolumeClaimSpecSelectorPtrInput` via:
//
//	        VolumeClaimSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type VolumeClaimSpecSelectorPtrInput interface {
	pulumi.Input

	ToVolumeClaimSpecSelectorPtrOutput() VolumeClaimSpecSelectorPtrOutput
	ToVolumeClaimSpecSelectorPtrOutputWithContext(context.Context) VolumeClaimSpecSelectorPtrOutput
}

type volumeClaimSpecSelectorPtrType VolumeClaimSpecSelectorArgs

func VolumeClaimSpecSelectorPtr(v *VolumeClaimSpecSelectorArgs) VolumeClaimSpecSelectorPtrInput {
	return (*volumeClaimSpecSelectorPtrType)(v)
}

func (*volumeClaimSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimSpecSelector)(nil)).Elem()
}

func (i *volumeClaimSpecSelectorPtrType) ToVolumeClaimSpecSelectorPtrOutput() VolumeClaimSpecSelectorPtrOutput {
	return i.ToVolumeClaimSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *volumeClaimSpecSelectorPtrType) ToVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecSelectorPtrOutput)
}

// VolumeClaimSpecSelector properties
type VolumeClaimSpecSelectorOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpecSelector)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorOutput) ToVolumeClaimSpecSelectorOutput() VolumeClaimSpecSelectorOutput {
	return o
}

func (o VolumeClaimSpecSelectorOutput) ToVolumeClaimSpecSelectorOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorOutput {
	return o
}

func (o VolumeClaimSpecSelectorOutput) ToVolumeClaimSpecSelectorPtrOutput() VolumeClaimSpecSelectorPtrOutput {
	return o.ToVolumeClaimSpecSelectorPtrOutputWithContext(context.Background())
}

func (o VolumeClaimSpecSelectorOutput) ToVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeClaimSpecSelector) *VolumeClaimSpecSelector {
		return &v
	}).(VolumeClaimSpecSelectorPtrOutput)
}

// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o VolumeClaimSpecSelectorOutput) MatchExpressions() VolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelector) []VolumeClaimSpecSelectorMatchExpressions { return v.MatchExpressions }).(VolumeClaimSpecSelectorMatchExpressionsArrayOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o VolumeClaimSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type VolumeClaimSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimSpecSelector)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorPtrOutput) ToVolumeClaimSpecSelectorPtrOutput() VolumeClaimSpecSelectorPtrOutput {
	return o
}

func (o VolumeClaimSpecSelectorPtrOutput) ToVolumeClaimSpecSelectorPtrOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorPtrOutput {
	return o
}

func (o VolumeClaimSpecSelectorPtrOutput) Elem() VolumeClaimSpecSelectorOutput {
	return o.ApplyT(func(v *VolumeClaimSpecSelector) VolumeClaimSpecSelector {
		if v != nil {
			return *v
		}
		var ret VolumeClaimSpecSelector
		return ret
	}).(VolumeClaimSpecSelectorOutput)
}

// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o VolumeClaimSpecSelectorPtrOutput) MatchExpressions() VolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *VolumeClaimSpecSelector) []VolumeClaimSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(VolumeClaimSpecSelectorMatchExpressionsArrayOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o VolumeClaimSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeClaimSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// VolumeClaimSpecSelectorMatchExpressions properties
type VolumeClaimSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// VolumeClaimSpecSelectorMatchExpressionsInput is an input type that accepts VolumeClaimSpecSelectorMatchExpressionsArgs and VolumeClaimSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `VolumeClaimSpecSelectorMatchExpressionsInput` via:
//
//	VolumeClaimSpecSelectorMatchExpressionsArgs{...}
type VolumeClaimSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToVolumeClaimSpecSelectorMatchExpressionsOutput() VolumeClaimSpecSelectorMatchExpressionsOutput
	ToVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(context.Context) VolumeClaimSpecSelectorMatchExpressionsOutput
}

// VolumeClaimSpecSelectorMatchExpressions properties
type VolumeClaimSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (VolumeClaimSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i VolumeClaimSpecSelectorMatchExpressionsArgs) ToVolumeClaimSpecSelectorMatchExpressionsOutput() VolumeClaimSpecSelectorMatchExpressionsOutput {
	return i.ToVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i VolumeClaimSpecSelectorMatchExpressionsArgs) ToVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecSelectorMatchExpressionsOutput)
}

// VolumeClaimSpecSelectorMatchExpressionsArrayInput is an input type that accepts VolumeClaimSpecSelectorMatchExpressionsArray and VolumeClaimSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `VolumeClaimSpecSelectorMatchExpressionsArrayInput` via:
//
//	VolumeClaimSpecSelectorMatchExpressionsArray{ VolumeClaimSpecSelectorMatchExpressionsArgs{...} }
type VolumeClaimSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToVolumeClaimSpecSelectorMatchExpressionsArrayOutput() VolumeClaimSpecSelectorMatchExpressionsArrayOutput
	ToVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) VolumeClaimSpecSelectorMatchExpressionsArrayOutput
}

type VolumeClaimSpecSelectorMatchExpressionsArray []VolumeClaimSpecSelectorMatchExpressionsInput

func (VolumeClaimSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i VolumeClaimSpecSelectorMatchExpressionsArray) ToVolumeClaimSpecSelectorMatchExpressionsArrayOutput() VolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return i.ToVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i VolumeClaimSpecSelectorMatchExpressionsArray) ToVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeClaimSpecSelectorMatchExpressionsArrayOutput)
}

// VolumeClaimSpecSelectorMatchExpressions properties
type VolumeClaimSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorMatchExpressionsOutput) ToVolumeClaimSpecSelectorMatchExpressionsOutput() VolumeClaimSpecSelectorMatchExpressionsOutput {
	return o
}

func (o VolumeClaimSpecSelectorMatchExpressionsOutput) ToVolumeClaimSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o VolumeClaimSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o VolumeClaimSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o VolumeClaimSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type VolumeClaimSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeClaimSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorMatchExpressionsArrayOutput) ToVolumeClaimSpecSelectorMatchExpressionsArrayOutput() VolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o VolumeClaimSpecSelectorMatchExpressionsArrayOutput) ToVolumeClaimSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o VolumeClaimSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) VolumeClaimSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeClaimSpecSelectorMatchExpressions {
		return vs[0].([]VolumeClaimSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(VolumeClaimSpecSelectorMatchExpressionsOutput)
}

// VolumeClaimSpecSelectorMatchExpressions properties
type VolumeClaimSpecSelectorMatchExpressionsResponse struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// VolumeClaimSpecSelectorMatchExpressions properties
type VolumeClaimSpecSelectorMatchExpressionsResponseOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorMatchExpressionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpecSelectorMatchExpressionsResponse)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorMatchExpressionsResponseOutput) ToVolumeClaimSpecSelectorMatchExpressionsResponseOutput() VolumeClaimSpecSelectorMatchExpressionsResponseOutput {
	return o
}

func (o VolumeClaimSpecSelectorMatchExpressionsResponseOutput) ToVolumeClaimSpecSelectorMatchExpressionsResponseOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorMatchExpressionsResponseOutput {
	return o
}

// key is the label key that the selector applies to.
func (o VolumeClaimSpecSelectorMatchExpressionsResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorMatchExpressionsResponse) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o VolumeClaimSpecSelectorMatchExpressionsResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorMatchExpressionsResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o VolumeClaimSpecSelectorMatchExpressionsResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorMatchExpressionsResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeClaimSpecSelectorMatchExpressionsResponse)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput) ToVolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput() VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput {
	return o
}

func (o VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput) ToVolumeClaimSpecSelectorMatchExpressionsResponseArrayOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput {
	return o
}

func (o VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput) Index(i pulumi.IntInput) VolumeClaimSpecSelectorMatchExpressionsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeClaimSpecSelectorMatchExpressionsResponse {
		return vs[0].([]VolumeClaimSpecSelectorMatchExpressionsResponse)[vs[1].(int)]
	}).(VolumeClaimSpecSelectorMatchExpressionsResponseOutput)
}

// VolumeClaimSpecSelector properties
type VolumeClaimSpecSelectorResponse struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []VolumeClaimSpecSelectorMatchExpressionsResponse `pulumi:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// VolumeClaimSpecSelector properties
type VolumeClaimSpecSelectorResponseOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeClaimSpecSelectorResponse)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorResponseOutput) ToVolumeClaimSpecSelectorResponseOutput() VolumeClaimSpecSelectorResponseOutput {
	return o
}

func (o VolumeClaimSpecSelectorResponseOutput) ToVolumeClaimSpecSelectorResponseOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorResponseOutput {
	return o
}

// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o VolumeClaimSpecSelectorResponseOutput) MatchExpressions() VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorResponse) []VolumeClaimSpecSelectorMatchExpressionsResponse {
		return v.MatchExpressions
	}).(VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o VolumeClaimSpecSelectorResponseOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeClaimSpecSelectorResponse) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type VolumeClaimSpecSelectorResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeClaimSpecSelectorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeClaimSpecSelectorResponse)(nil)).Elem()
}

func (o VolumeClaimSpecSelectorResponsePtrOutput) ToVolumeClaimSpecSelectorResponsePtrOutput() VolumeClaimSpecSelectorResponsePtrOutput {
	return o
}

func (o VolumeClaimSpecSelectorResponsePtrOutput) ToVolumeClaimSpecSelectorResponsePtrOutputWithContext(ctx context.Context) VolumeClaimSpecSelectorResponsePtrOutput {
	return o
}

func (o VolumeClaimSpecSelectorResponsePtrOutput) Elem() VolumeClaimSpecSelectorResponseOutput {
	return o.ApplyT(func(v *VolumeClaimSpecSelectorResponse) VolumeClaimSpecSelectorResponse {
		if v != nil {
			return *v
		}
		var ret VolumeClaimSpecSelectorResponse
		return ret
	}).(VolumeClaimSpecSelectorResponseOutput)
}

// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o VolumeClaimSpecSelectorResponsePtrOutput) MatchExpressions() VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput {
	return o.ApplyT(func(v *VolumeClaimSpecSelectorResponse) []VolumeClaimSpecSelectorMatchExpressionsResponse {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o VolumeClaimSpecSelectorResponsePtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeClaimSpecSelectorResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorizationBasicRuleOutput{})
	pulumi.RegisterOutputType(AuthorizationBasicRuleArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationBasicRuleResponseOutput{})
	pulumi.RegisterOutputType(AuthorizationBasicRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationConfigOutput{})
	pulumi.RegisterOutputType(AuthorizationConfigResponseOutput{})
	pulumi.RegisterOutputType(AutomaticCertMethodOutput{})
	pulumi.RegisterOutputType(AutomaticCertMethodPtrOutput{})
	pulumi.RegisterOutputType(AutomaticCertMethodResponseOutput{})
	pulumi.RegisterOutputType(AutomaticCertMethodResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendChainOutput{})
	pulumi.RegisterOutputType(BackendChainPtrOutput{})
	pulumi.RegisterOutputType(BackendChainResponseOutput{})
	pulumi.RegisterOutputType(BackendChainResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthPtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthX509Output{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthX509PtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthX509ResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorCustomAuthX509ResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodCustomOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodCustomPtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodCustomResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodCustomResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSatOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSatPtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSatResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSatResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSvidOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSvidPtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSvidResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodSvidResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodUsernamePasswordOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodUsernamePasswordPtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodUsernamePasswordResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodUsernamePasswordResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509Output{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509PtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509AttributesOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509AttributesPtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509AttributesResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509AttributesResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509ResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodX509ResponsePtrOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodsOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodsArrayOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodsResponseOutput{})
	pulumi.RegisterOutputType(BrokerAuthenticatorMethodsResponseArrayOutput{})
	pulumi.RegisterOutputType(BrokerDiagnosticsOutput{})
	pulumi.RegisterOutputType(BrokerDiagnosticsPtrOutput{})
	pulumi.RegisterOutputType(BrokerDiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(BrokerDiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(CardinalityOutput{})
	pulumi.RegisterOutputType(CardinalityPtrOutput{})
	pulumi.RegisterOutputType(CardinalityResponseOutput{})
	pulumi.RegisterOutputType(CardinalityResponsePtrOutput{})
	pulumi.RegisterOutputType(CertManagerCertOptionsOutput{})
	pulumi.RegisterOutputType(CertManagerCertOptionsPtrOutput{})
	pulumi.RegisterOutputType(CertManagerCertOptionsResponseOutput{})
	pulumi.RegisterOutputType(CertManagerCertOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(CertManagerIssuerRefOutput{})
	pulumi.RegisterOutputType(CertManagerIssuerRefPtrOutput{})
	pulumi.RegisterOutputType(CertManagerIssuerRefResponseOutput{})
	pulumi.RegisterOutputType(CertManagerIssuerRefResponsePtrOutput{})
	pulumi.RegisterOutputType(CertManagerPrivateKeyOutput{})
	pulumi.RegisterOutputType(CertManagerPrivateKeyPtrOutput{})
	pulumi.RegisterOutputType(CertManagerPrivateKeyResponseOutput{})
	pulumi.RegisterOutputType(CertManagerPrivateKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerImageOutput{})
	pulumi.RegisterOutputType(ContainerImagePtrOutput{})
	pulumi.RegisterOutputType(ContainerImageResponseOutput{})
	pulumi.RegisterOutputType(ContainerImageResponsePtrOutput{})
	pulumi.RegisterOutputType(DataLakeConnectorMapOutput{})
	pulumi.RegisterOutputType(DataLakeConnectorMapResponseOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStorageOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStoragePtrOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStorageAuthenticationOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStorageAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStorageAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStorageAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStorageResponseOutput{})
	pulumi.RegisterOutputType(DataLakeFabricStorageResponsePtrOutput{})
	pulumi.RegisterOutputType(DataLakeLocalStorageOutput{})
	pulumi.RegisterOutputType(DataLakeLocalStoragePtrOutput{})
	pulumi.RegisterOutputType(DataLakeLocalStorageResponseOutput{})
	pulumi.RegisterOutputType(DataLakeLocalStorageResponsePtrOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStorageOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStoragePtrOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStorageAuthenticationOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStorageAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStorageAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStorageAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStorageResponseOutput{})
	pulumi.RegisterOutputType(DataLakeServiceStorageResponsePtrOutput{})
	pulumi.RegisterOutputType(DataLakeTargetStorageOutput{})
	pulumi.RegisterOutputType(DataLakeTargetStorageResponseOutput{})
	pulumi.RegisterOutputType(DeltaTableOutput{})
	pulumi.RegisterOutputType(DeltaTableResponseOutput{})
	pulumi.RegisterOutputType(DeltaTableSchemaOutput{})
	pulumi.RegisterOutputType(DeltaTableSchemaArrayOutput{})
	pulumi.RegisterOutputType(DeltaTableSchemaResponseOutput{})
	pulumi.RegisterOutputType(DeltaTableSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskBackedMessageBufferSettingsOutput{})
	pulumi.RegisterOutputType(DiskBackedMessageBufferSettingsPtrOutput{})
	pulumi.RegisterOutputType(DiskBackedMessageBufferSettingsResponseOutput{})
	pulumi.RegisterOutputType(DiskBackedMessageBufferSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPropertyOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPropertyResponseOutput{})
	pulumi.RegisterOutputType(FabricGuidsOutput{})
	pulumi.RegisterOutputType(FabricGuidsPtrOutput{})
	pulumi.RegisterOutputType(FabricGuidsResponseOutput{})
	pulumi.RegisterOutputType(FabricGuidsResponsePtrOutput{})
	pulumi.RegisterOutputType(FabricNamesOutput{})
	pulumi.RegisterOutputType(FabricNamesPtrOutput{})
	pulumi.RegisterOutputType(FabricNamesResponseOutput{})
	pulumi.RegisterOutputType(FabricNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(FrontendOutput{})
	pulumi.RegisterOutputType(FrontendPtrOutput{})
	pulumi.RegisterOutputType(FrontendResponseOutput{})
	pulumi.RegisterOutputType(FrontendResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerAuthenticationPropertiesOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerAuthenticationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerAuthenticationTypesOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerAuthenticationTypesPtrOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerAuthenticationTypesResponseOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerAuthenticationTypesResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerConnectionSpecOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerConnectionSpecResponseOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerConnectionTlsOutput{})
	pulumi.RegisterOutputType(KafkaRemoteBrokerConnectionTlsResponseOutput{})
	pulumi.RegisterOutputType(KafkaRoutesOutput{})
	pulumi.RegisterOutputType(KafkaRoutesArrayOutput{})
	pulumi.RegisterOutputType(KafkaRoutesResponseOutput{})
	pulumi.RegisterOutputType(KafkaRoutesResponseArrayOutput{})
	pulumi.RegisterOutputType(KafkaSharedSubscriptionPropertiesOutput{})
	pulumi.RegisterOutputType(KafkaSharedSubscriptionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KafkaSharedSubscriptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KafkaSharedSubscriptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaToMqttRoutesOutput{})
	pulumi.RegisterOutputType(KafkaToMqttRoutesPtrOutput{})
	pulumi.RegisterOutputType(KafkaToMqttRoutesResponseOutput{})
	pulumi.RegisterOutputType(KafkaToMqttRoutesResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaTokenKeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(KafkaTokenKeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KafkaTokenKeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KafkaTokenKeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapBatchingOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapBatchingPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapBatchingResponseOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapBatchingResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaX509AuthenticationOutput{})
	pulumi.RegisterOutputType(KafkaX509AuthenticationPtrOutput{})
	pulumi.RegisterOutputType(KafkaX509AuthenticationResponseOutput{})
	pulumi.RegisterOutputType(KafkaX509AuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificatePropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultCredentialsPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultCredentialsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultCredentialsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultCredentialsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretObjectOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretObjectPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretObjectResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretObjectResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerAuthenticationMethodsOutput{})
	pulumi.RegisterOutputType(LocalBrokerAuthenticationMethodsPtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerAuthenticationMethodsResponseOutput{})
	pulumi.RegisterOutputType(LocalBrokerAuthenticationMethodsResponsePtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionSpecOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionSpecPtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionSpecResponseOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionTlsOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionTlsPtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionTlsResponseOutput{})
	pulumi.RegisterOutputType(LocalBrokerConnectionTlsResponsePtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerKubernetesAuthenticationOutput{})
	pulumi.RegisterOutputType(LocalBrokerKubernetesAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(LocalBrokerKubernetesAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(LocalBrokerKubernetesAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthenticationOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(ManualCertMethodOutput{})
	pulumi.RegisterOutputType(ManualCertMethodPtrOutput{})
	pulumi.RegisterOutputType(ManualCertMethodResponseOutput{})
	pulumi.RegisterOutputType(ManualCertMethodResponsePtrOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerAuthenticationMethodsOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerAuthenticationMethodsResponseOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerConnectionSpecOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerConnectionSpecResponseOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerConnectionTlsOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerConnectionTlsResponseOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerX509AuthenticationOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerX509AuthenticationPtrOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerX509AuthenticationResponseOutput{})
	pulumi.RegisterOutputType(MqttBridgeRemoteBrokerX509AuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(MqttBridgeRouteSharedSubscriptionOutput{})
	pulumi.RegisterOutputType(MqttBridgeRouteSharedSubscriptionPtrOutput{})
	pulumi.RegisterOutputType(MqttBridgeRouteSharedSubscriptionResponseOutput{})
	pulumi.RegisterOutputType(MqttBridgeRouteSharedSubscriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(MqttBridgeRoutesOutput{})
	pulumi.RegisterOutputType(MqttBridgeRoutesArrayOutput{})
	pulumi.RegisterOutputType(MqttBridgeRoutesResponseOutput{})
	pulumi.RegisterOutputType(MqttBridgeRoutesResponseArrayOutput{})
	pulumi.RegisterOutputType(MqttToKafkaRoutesOutput{})
	pulumi.RegisterOutputType(MqttToKafkaRoutesPtrOutput{})
	pulumi.RegisterOutputType(MqttToKafkaRoutesResponseOutput{})
	pulumi.RegisterOutputType(MqttToKafkaRoutesResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeTolerationsOutput{})
	pulumi.RegisterOutputType(NodeTolerationsPtrOutput{})
	pulumi.RegisterOutputType(NodeTolerationsResponseOutput{})
	pulumi.RegisterOutputType(NodeTolerationsResponsePtrOutput{})
	pulumi.RegisterOutputType(PrincipalDefinitionOutput{})
	pulumi.RegisterOutputType(PrincipalDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ResourceInfoDefinitionOutput{})
	pulumi.RegisterOutputType(ResourceInfoDefinitionArrayOutput{})
	pulumi.RegisterOutputType(ResourceInfoDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ResourceInfoDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(SanForCertOutput{})
	pulumi.RegisterOutputType(SanForCertPtrOutput{})
	pulumi.RegisterOutputType(SanForCertResponseOutput{})
	pulumi.RegisterOutputType(SanForCertResponsePtrOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationTokenOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationTokenPtrOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationTokenResponseOutput{})
	pulumi.RegisterOutputType(SaslRemoteBrokerBasicAuthenticationTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TemporaryResourceLimitsConfigOutput{})
	pulumi.RegisterOutputType(TemporaryResourceLimitsConfigPtrOutput{})
	pulumi.RegisterOutputType(TemporaryResourceLimitsConfigResponseOutput{})
	pulumi.RegisterOutputType(TemporaryResourceLimitsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(TlsCertMethodOutput{})
	pulumi.RegisterOutputType(TlsCertMethodPtrOutput{})
	pulumi.RegisterOutputType(TlsCertMethodResponseOutput{})
	pulumi.RegisterOutputType(TlsCertMethodResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourceOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourcePtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourceRefOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourceRefResponseOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourceRefResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourceResponseOutput{})
	pulumi.RegisterOutputType(VolumeClaimDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimResourceRequirementsOutput{})
	pulumi.RegisterOutputType(VolumeClaimResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(VolumeClaimResourceRequirementsResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecPtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecResponseOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorMatchExpressionsResponseOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorMatchExpressionsResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorResponseOutput{})
	pulumi.RegisterOutputType(VolumeClaimSpecSelectorResponsePtrOutput{})
}
