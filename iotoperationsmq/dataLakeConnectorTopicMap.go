// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MQ dataLakeConnector/topicMap resource
// Azure REST API version: 2023-10-04-preview.
type DataLakeConnectorTopicMap struct {
	pulumi.CustomResourceState

	// DataLake Connector CRD to use.
	DataLakeConnectorRef pulumi.StringOutput `pulumi:"dataLakeConnectorRef"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponseOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// TopicMap for DataLake connector.
	Mapping DataLakeConnectorMapResponseOutput `pulumi:"mapping"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataLakeConnectorTopicMap registers a new resource with the given unique name, arguments, and options.
func NewDataLakeConnectorTopicMap(ctx *pulumi.Context,
	name string, args *DataLakeConnectorTopicMapArgs, opts ...pulumi.ResourceOption) (*DataLakeConnectorTopicMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataLakeConnectorName == nil {
		return nil, errors.New("invalid value for required argument 'DataLakeConnectorName'")
	}
	if args.DataLakeConnectorRef == nil {
		return nil, errors.New("invalid value for required argument 'DataLakeConnectorRef'")
	}
	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.Mapping == nil {
		return nil, errors.New("invalid value for required argument 'Mapping'")
	}
	if args.MqName == nil {
		return nil, errors.New("invalid value for required argument 'MqName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	args.Mapping = args.Mapping.ToDataLakeConnectorMapOutput().ApplyT(func(v DataLakeConnectorMap) DataLakeConnectorMap { return *v.Defaults() }).(DataLakeConnectorMapOutput)
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsmq/v20231004preview:DataLakeConnectorTopicMap"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DataLakeConnectorTopicMap
	err := ctx.RegisterResource("azure-native:iotoperationsmq:DataLakeConnectorTopicMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataLakeConnectorTopicMap gets an existing DataLakeConnectorTopicMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataLakeConnectorTopicMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataLakeConnectorTopicMapState, opts ...pulumi.ResourceOption) (*DataLakeConnectorTopicMap, error) {
	var resource DataLakeConnectorTopicMap
	err := ctx.ReadResource("azure-native:iotoperationsmq:DataLakeConnectorTopicMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataLakeConnectorTopicMap resources.
type dataLakeConnectorTopicMapState struct {
}

type DataLakeConnectorTopicMapState struct {
}

func (DataLakeConnectorTopicMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeConnectorTopicMapState)(nil)).Elem()
}

type dataLakeConnectorTopicMapArgs struct {
	// Name of MQ dataLakeConnector resource
	DataLakeConnectorName string `pulumi:"dataLakeConnectorName"`
	// DataLake Connector CRD to use.
	DataLakeConnectorRef string `pulumi:"dataLakeConnectorRef"`
	// Extended Location
	ExtendedLocation ExtendedLocationProperty `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// TopicMap for DataLake connector.
	Mapping DataLakeConnectorMap `pulumi:"mapping"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Name of MQ dataLakeConnector/topicMap resource
	TopicMapName *string `pulumi:"topicMapName"`
}

// The set of arguments for constructing a DataLakeConnectorTopicMap resource.
type DataLakeConnectorTopicMapArgs struct {
	// Name of MQ dataLakeConnector resource
	DataLakeConnectorName pulumi.StringInput
	// DataLake Connector CRD to use.
	DataLakeConnectorRef pulumi.StringInput
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// TopicMap for DataLake connector.
	Mapping DataLakeConnectorMapInput
	// Name of MQ resource
	MqName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Name of MQ dataLakeConnector/topicMap resource
	TopicMapName pulumi.StringPtrInput
}

func (DataLakeConnectorTopicMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeConnectorTopicMapArgs)(nil)).Elem()
}

type DataLakeConnectorTopicMapInput interface {
	pulumi.Input

	ToDataLakeConnectorTopicMapOutput() DataLakeConnectorTopicMapOutput
	ToDataLakeConnectorTopicMapOutputWithContext(ctx context.Context) DataLakeConnectorTopicMapOutput
}

func (*DataLakeConnectorTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeConnectorTopicMap)(nil)).Elem()
}

func (i *DataLakeConnectorTopicMap) ToDataLakeConnectorTopicMapOutput() DataLakeConnectorTopicMapOutput {
	return i.ToDataLakeConnectorTopicMapOutputWithContext(context.Background())
}

func (i *DataLakeConnectorTopicMap) ToDataLakeConnectorTopicMapOutputWithContext(ctx context.Context) DataLakeConnectorTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeConnectorTopicMapOutput)
}

type DataLakeConnectorTopicMapOutput struct{ *pulumi.OutputState }

func (DataLakeConnectorTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeConnectorTopicMap)(nil)).Elem()
}

func (o DataLakeConnectorTopicMapOutput) ToDataLakeConnectorTopicMapOutput() DataLakeConnectorTopicMapOutput {
	return o
}

func (o DataLakeConnectorTopicMapOutput) ToDataLakeConnectorTopicMapOutputWithContext(ctx context.Context) DataLakeConnectorTopicMapOutput {
	return o
}

// DataLake Connector CRD to use.
func (o DataLakeConnectorTopicMapOutput) DataLakeConnectorRef() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) pulumi.StringOutput { return v.DataLakeConnectorRef }).(pulumi.StringOutput)
}

// Extended Location
func (o DataLakeConnectorTopicMapOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) ExtendedLocationPropertyResponseOutput { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The geo-location where the resource lives
func (o DataLakeConnectorTopicMapOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// TopicMap for DataLake connector.
func (o DataLakeConnectorTopicMapOutput) Mapping() DataLakeConnectorMapResponseOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) DataLakeConnectorMapResponseOutput { return v.Mapping }).(DataLakeConnectorMapResponseOutput)
}

// The name of the resource
func (o DataLakeConnectorTopicMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o DataLakeConnectorTopicMapOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DataLakeConnectorTopicMapOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o DataLakeConnectorTopicMapOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DataLakeConnectorTopicMapOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnectorTopicMap) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DataLakeConnectorTopicMapOutput{})
}
