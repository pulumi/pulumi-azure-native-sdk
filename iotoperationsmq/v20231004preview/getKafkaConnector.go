// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a KafkaConnectorResource
func LookupKafkaConnector(ctx *pulumi.Context, args *LookupKafkaConnectorArgs, opts ...pulumi.InvokeOption) (*LookupKafkaConnectorResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupKafkaConnectorResult
	err := ctx.Invoke("azure-native:iotoperationsmq/v20231004preview:getKafkaConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupKafkaConnectorArgs struct {
	// Name of MQ kafkaConnector resource
	KafkaConnectorName string `pulumi:"kafkaConnectorName"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// MQ kafkaConnector resource
type LookupKafkaConnectorResult struct {
	// The client id prefix of the dynamically generated client ids.
	ClientIdPrefix *string `pulumi:"clientIdPrefix"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponse `pulumi:"extendedLocation"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The details of KafkaConnector Docker Image.
	Image *ContainerImageResponse `pulumi:"image"`
	// The number of KafkaConnector pods to spin up.
	Instances *int `pulumi:"instances"`
	// The details for connecting with Remote Kafka Broker.
	KafkaConnection KafkaRemoteBrokerConnectionSpecResponse `pulumi:"kafkaConnection"`
	// The details for connecting with Local Broker.
	LocalBrokerConnection *LocalBrokerConnectionSpecResponse `pulumi:"localBrokerConnection"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The log level of the Bridge Connector instances.
	LogLevel *string `pulumi:"logLevel"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The Node Tolerations for the Bridge Connector pods.
	NodeTolerations *NodeTolerationsResponse `pulumi:"nodeTolerations"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupKafkaConnectorResult
func (val *LookupKafkaConnectorResult) Defaults() *LookupKafkaConnectorResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LocalBrokerConnection = tmp.LocalBrokerConnection.Defaults()

	if tmp.LogLevel == nil {
		logLevel_ := "info"
		tmp.LogLevel = &logLevel_
	}
	return &tmp
}

func LookupKafkaConnectorOutput(ctx *pulumi.Context, args LookupKafkaConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupKafkaConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKafkaConnectorResult, error) {
			args := v.(LookupKafkaConnectorArgs)
			r, err := LookupKafkaConnector(ctx, &args, opts...)
			var s LookupKafkaConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKafkaConnectorResultOutput)
}

type LookupKafkaConnectorOutputArgs struct {
	// Name of MQ kafkaConnector resource
	KafkaConnectorName pulumi.StringInput `pulumi:"kafkaConnectorName"`
	// Name of MQ resource
	MqName pulumi.StringInput `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupKafkaConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaConnectorArgs)(nil)).Elem()
}

// MQ kafkaConnector resource
type LookupKafkaConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupKafkaConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKafkaConnectorResult)(nil)).Elem()
}

func (o LookupKafkaConnectorResultOutput) ToLookupKafkaConnectorResultOutput() LookupKafkaConnectorResultOutput {
	return o
}

func (o LookupKafkaConnectorResultOutput) ToLookupKafkaConnectorResultOutputWithContext(ctx context.Context) LookupKafkaConnectorResultOutput {
	return o
}

// The client id prefix of the dynamically generated client ids.
func (o LookupKafkaConnectorResultOutput) ClientIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) *string { return v.ClientIdPrefix }).(pulumi.StringPtrOutput)
}

// Extended Location
func (o LookupKafkaConnectorResultOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) ExtendedLocationPropertyResponse { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupKafkaConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The details of KafkaConnector Docker Image.
func (o LookupKafkaConnectorResultOutput) Image() ContainerImageResponsePtrOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) *ContainerImageResponse { return v.Image }).(ContainerImageResponsePtrOutput)
}

// The number of KafkaConnector pods to spin up.
func (o LookupKafkaConnectorResultOutput) Instances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) *int { return v.Instances }).(pulumi.IntPtrOutput)
}

// The details for connecting with Remote Kafka Broker.
func (o LookupKafkaConnectorResultOutput) KafkaConnection() KafkaRemoteBrokerConnectionSpecResponseOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) KafkaRemoteBrokerConnectionSpecResponse { return v.KafkaConnection }).(KafkaRemoteBrokerConnectionSpecResponseOutput)
}

// The details for connecting with Local Broker.
func (o LookupKafkaConnectorResultOutput) LocalBrokerConnection() LocalBrokerConnectionSpecResponsePtrOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) *LocalBrokerConnectionSpecResponse { return v.LocalBrokerConnection }).(LocalBrokerConnectionSpecResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupKafkaConnectorResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.Location }).(pulumi.StringOutput)
}

// The log level of the Bridge Connector instances.
func (o LookupKafkaConnectorResultOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupKafkaConnectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Node Tolerations for the Bridge Connector pods.
func (o LookupKafkaConnectorResultOutput) NodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) *NodeTolerationsResponse { return v.NodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// The status of the last operation.
func (o LookupKafkaConnectorResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupKafkaConnectorResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupKafkaConnectorResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupKafkaConnectorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKafkaConnectorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKafkaConnectorResultOutput{})
}
