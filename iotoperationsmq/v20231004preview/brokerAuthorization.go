// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MQ broker/authorization resource
type BrokerAuthorization struct {
	pulumi.CustomResourceState

	// The list of authorization policies supported by the Authorization Resource.
	AuthorizationPolicies AuthorizationConfigResponseOutput `pulumi:"authorizationPolicies"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponseOutput `pulumi:"extendedLocation"`
	// The array of listener Resources it supports.
	ListenerRef pulumi.StringArrayOutput `pulumi:"listenerRef"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBrokerAuthorization registers a new resource with the given unique name, arguments, and options.
func NewBrokerAuthorization(ctx *pulumi.Context,
	name string, args *BrokerAuthorizationArgs, opts ...pulumi.ResourceOption) (*BrokerAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationPolicies == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationPolicies'")
	}
	if args.BrokerName == nil {
		return nil, errors.New("invalid value for required argument 'BrokerName'")
	}
	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.ListenerRef == nil {
		return nil, errors.New("invalid value for required argument 'ListenerRef'")
	}
	if args.MqName == nil {
		return nil, errors.New("invalid value for required argument 'MqName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	args.AuthorizationPolicies = args.AuthorizationPolicies.ToAuthorizationConfigOutput().ApplyT(func(v AuthorizationConfig) AuthorizationConfig { return *v.Defaults() }).(AuthorizationConfigOutput)
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsmq:BrokerAuthorization"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BrokerAuthorization
	err := ctx.RegisterResource("azure-native:iotoperationsmq/v20231004preview:BrokerAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrokerAuthorization gets an existing BrokerAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrokerAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrokerAuthorizationState, opts ...pulumi.ResourceOption) (*BrokerAuthorization, error) {
	var resource BrokerAuthorization
	err := ctx.ReadResource("azure-native:iotoperationsmq/v20231004preview:BrokerAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrokerAuthorization resources.
type brokerAuthorizationState struct {
}

type BrokerAuthorizationState struct {
}

func (BrokerAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerAuthorizationState)(nil)).Elem()
}

type brokerAuthorizationArgs struct {
	// Name of MQ broker/authorization resource
	AuthorizationName *string `pulumi:"authorizationName"`
	// The list of authorization policies supported by the Authorization Resource.
	AuthorizationPolicies AuthorizationConfig `pulumi:"authorizationPolicies"`
	// Name of MQ broker resource
	BrokerName string `pulumi:"brokerName"`
	// Extended Location
	ExtendedLocation ExtendedLocationProperty `pulumi:"extendedLocation"`
	// The array of listener Resources it supports.
	ListenerRef []string `pulumi:"listenerRef"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a BrokerAuthorization resource.
type BrokerAuthorizationArgs struct {
	// Name of MQ broker/authorization resource
	AuthorizationName pulumi.StringPtrInput
	// The list of authorization policies supported by the Authorization Resource.
	AuthorizationPolicies AuthorizationConfigInput
	// Name of MQ broker resource
	BrokerName pulumi.StringInput
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyInput
	// The array of listener Resources it supports.
	ListenerRef pulumi.StringArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Name of MQ resource
	MqName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (BrokerAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerAuthorizationArgs)(nil)).Elem()
}

type BrokerAuthorizationInput interface {
	pulumi.Input

	ToBrokerAuthorizationOutput() BrokerAuthorizationOutput
	ToBrokerAuthorizationOutputWithContext(ctx context.Context) BrokerAuthorizationOutput
}

func (*BrokerAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthorization)(nil)).Elem()
}

func (i *BrokerAuthorization) ToBrokerAuthorizationOutput() BrokerAuthorizationOutput {
	return i.ToBrokerAuthorizationOutputWithContext(context.Background())
}

func (i *BrokerAuthorization) ToBrokerAuthorizationOutputWithContext(ctx context.Context) BrokerAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerAuthorizationOutput)
}

type BrokerAuthorizationOutput struct{ *pulumi.OutputState }

func (BrokerAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerAuthorization)(nil)).Elem()
}

func (o BrokerAuthorizationOutput) ToBrokerAuthorizationOutput() BrokerAuthorizationOutput {
	return o
}

func (o BrokerAuthorizationOutput) ToBrokerAuthorizationOutputWithContext(ctx context.Context) BrokerAuthorizationOutput {
	return o
}

// The list of authorization policies supported by the Authorization Resource.
func (o BrokerAuthorizationOutput) AuthorizationPolicies() AuthorizationConfigResponseOutput {
	return o.ApplyT(func(v *BrokerAuthorization) AuthorizationConfigResponseOutput { return v.AuthorizationPolicies }).(AuthorizationConfigResponseOutput)
}

// Extended Location
func (o BrokerAuthorizationOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v *BrokerAuthorization) ExtendedLocationPropertyResponseOutput { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The array of listener Resources it supports.
func (o BrokerAuthorizationOutput) ListenerRef() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrokerAuthorization) pulumi.StringArrayOutput { return v.ListenerRef }).(pulumi.StringArrayOutput)
}

// The geo-location where the resource lives
func (o BrokerAuthorizationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BrokerAuthorization) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o BrokerAuthorizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BrokerAuthorization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o BrokerAuthorizationOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *BrokerAuthorization) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o BrokerAuthorizationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *BrokerAuthorization) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o BrokerAuthorizationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BrokerAuthorization) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o BrokerAuthorizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *BrokerAuthorization) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BrokerAuthorizationOutput{})
}
