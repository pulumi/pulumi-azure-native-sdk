// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MQ diagnostic services resource
type DiagnosticService struct {
	pulumi.CustomResourceState

	// The frequency at which the data will be exported.
	DataExportFrequencySeconds pulumi.IntPtrOutput `pulumi:"dataExportFrequencySeconds"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponseOutput `pulumi:"extendedLocation"`
	// The details of Diagnostic Service Docker Image.
	Image ContainerImageResponseOutput `pulumi:"image"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The format for the logs generated.
	LogFormat pulumi.StringPtrOutput `pulumi:"logFormat"`
	// The format for the logs generated.
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// The maximum data stored in MiB.
	MaxDataStorageSize pulumi.Float64PtrOutput `pulumi:"maxDataStorageSize"`
	// The port at which metrics is exposed.
	MetricsPort pulumi.IntPtrOutput `pulumi:"metricsPort"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The destination to collect traces. Diagnostic service will push traces to this endpoint
	OpenTelemetryTracesCollectorAddr pulumi.StringPtrOutput `pulumi:"openTelemetryTracesCollectorAddr"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Metric inactivity timeout.
	StaleDataTimeoutSeconds pulumi.IntPtrOutput `pulumi:"staleDataTimeoutSeconds"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDiagnosticService registers a new resource with the given unique name, arguments, and options.
func NewDiagnosticService(ctx *pulumi.Context,
	name string, args *DiagnosticServiceArgs, opts ...pulumi.ResourceOption) (*DiagnosticService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.MqName == nil {
		return nil, errors.New("invalid value for required argument 'MqName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.DataExportFrequencySeconds == nil {
		args.DataExportFrequencySeconds = pulumi.IntPtr(10)
	}
	if args.LogFormat == nil {
		args.LogFormat = pulumi.StringPtr("json")
	}
	if args.LogLevel == nil {
		args.LogLevel = pulumi.StringPtr("info")
	}
	if args.MaxDataStorageSize == nil {
		args.MaxDataStorageSize = pulumi.Float64Ptr(16.0)
	}
	if args.MetricsPort == nil {
		args.MetricsPort = pulumi.IntPtr(9600)
	}
	if args.StaleDataTimeoutSeconds == nil {
		args.StaleDataTimeoutSeconds = pulumi.IntPtr(600)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsmq:DiagnosticService"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DiagnosticService
	err := ctx.RegisterResource("azure-native:iotoperationsmq/v20231004preview:DiagnosticService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiagnosticService gets an existing DiagnosticService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiagnosticService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiagnosticServiceState, opts ...pulumi.ResourceOption) (*DiagnosticService, error) {
	var resource DiagnosticService
	err := ctx.ReadResource("azure-native:iotoperationsmq/v20231004preview:DiagnosticService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiagnosticService resources.
type diagnosticServiceState struct {
}

type DiagnosticServiceState struct {
}

func (DiagnosticServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticServiceState)(nil)).Elem()
}

type diagnosticServiceArgs struct {
	// The frequency at which the data will be exported.
	DataExportFrequencySeconds *int `pulumi:"dataExportFrequencySeconds"`
	// Name of MQ diagnostic resource
	DiagnosticServiceName *string `pulumi:"diagnosticServiceName"`
	// Extended Location
	ExtendedLocation ExtendedLocationProperty `pulumi:"extendedLocation"`
	// The details of Diagnostic Service Docker Image.
	Image ContainerImage `pulumi:"image"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The format for the logs generated.
	LogFormat *string `pulumi:"logFormat"`
	// The format for the logs generated.
	LogLevel *string `pulumi:"logLevel"`
	// The maximum data stored in MiB.
	MaxDataStorageSize *float64 `pulumi:"maxDataStorageSize"`
	// The port at which metrics is exposed.
	MetricsPort *int `pulumi:"metricsPort"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The destination to collect traces. Diagnostic service will push traces to this endpoint
	OpenTelemetryTracesCollectorAddr *string `pulumi:"openTelemetryTracesCollectorAddr"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Metric inactivity timeout.
	StaleDataTimeoutSeconds *int `pulumi:"staleDataTimeoutSeconds"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DiagnosticService resource.
type DiagnosticServiceArgs struct {
	// The frequency at which the data will be exported.
	DataExportFrequencySeconds pulumi.IntPtrInput
	// Name of MQ diagnostic resource
	DiagnosticServiceName pulumi.StringPtrInput
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyInput
	// The details of Diagnostic Service Docker Image.
	Image ContainerImageInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The format for the logs generated.
	LogFormat pulumi.StringPtrInput
	// The format for the logs generated.
	LogLevel pulumi.StringPtrInput
	// The maximum data stored in MiB.
	MaxDataStorageSize pulumi.Float64PtrInput
	// The port at which metrics is exposed.
	MetricsPort pulumi.IntPtrInput
	// Name of MQ resource
	MqName pulumi.StringInput
	// The destination to collect traces. Diagnostic service will push traces to this endpoint
	OpenTelemetryTracesCollectorAddr pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Metric inactivity timeout.
	StaleDataTimeoutSeconds pulumi.IntPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (DiagnosticServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticServiceArgs)(nil)).Elem()
}

type DiagnosticServiceInput interface {
	pulumi.Input

	ToDiagnosticServiceOutput() DiagnosticServiceOutput
	ToDiagnosticServiceOutputWithContext(ctx context.Context) DiagnosticServiceOutput
}

func (*DiagnosticService) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticService)(nil)).Elem()
}

func (i *DiagnosticService) ToDiagnosticServiceOutput() DiagnosticServiceOutput {
	return i.ToDiagnosticServiceOutputWithContext(context.Background())
}

func (i *DiagnosticService) ToDiagnosticServiceOutputWithContext(ctx context.Context) DiagnosticServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticServiceOutput)
}

type DiagnosticServiceOutput struct{ *pulumi.OutputState }

func (DiagnosticServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticService)(nil)).Elem()
}

func (o DiagnosticServiceOutput) ToDiagnosticServiceOutput() DiagnosticServiceOutput {
	return o
}

func (o DiagnosticServiceOutput) ToDiagnosticServiceOutputWithContext(ctx context.Context) DiagnosticServiceOutput {
	return o
}

// The frequency at which the data will be exported.
func (o DiagnosticServiceOutput) DataExportFrequencySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.IntPtrOutput { return v.DataExportFrequencySeconds }).(pulumi.IntPtrOutput)
}

// Extended Location
func (o DiagnosticServiceOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v *DiagnosticService) ExtendedLocationPropertyResponseOutput { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The details of Diagnostic Service Docker Image.
func (o DiagnosticServiceOutput) Image() ContainerImageResponseOutput {
	return o.ApplyT(func(v *DiagnosticService) ContainerImageResponseOutput { return v.Image }).(ContainerImageResponseOutput)
}

// The geo-location where the resource lives
func (o DiagnosticServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The format for the logs generated.
func (o DiagnosticServiceOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringPtrOutput { return v.LogFormat }).(pulumi.StringPtrOutput)
}

// The format for the logs generated.
func (o DiagnosticServiceOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// The maximum data stored in MiB.
func (o DiagnosticServiceOutput) MaxDataStorageSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.Float64PtrOutput { return v.MaxDataStorageSize }).(pulumi.Float64PtrOutput)
}

// The port at which metrics is exposed.
func (o DiagnosticServiceOutput) MetricsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.IntPtrOutput { return v.MetricsPort }).(pulumi.IntPtrOutput)
}

// The name of the resource
func (o DiagnosticServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The destination to collect traces. Diagnostic service will push traces to this endpoint
func (o DiagnosticServiceOutput) OpenTelemetryTracesCollectorAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringPtrOutput { return v.OpenTelemetryTracesCollectorAddr }).(pulumi.StringPtrOutput)
}

// The status of the last operation.
func (o DiagnosticServiceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metric inactivity timeout.
func (o DiagnosticServiceOutput) StaleDataTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.IntPtrOutput { return v.StaleDataTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DiagnosticServiceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DiagnosticService) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o DiagnosticServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DiagnosticServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticService) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DiagnosticServiceOutput{})
}
