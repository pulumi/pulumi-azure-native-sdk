// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a DataLakeConnectorResource
func LookupDataLakeConnector(ctx *pulumi.Context, args *LookupDataLakeConnectorArgs, opts ...pulumi.InvokeOption) (*LookupDataLakeConnectorResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupDataLakeConnectorResult
	err := ctx.Invoke("azure-native:iotoperationsmq/v20231004preview:getDataLakeConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupDataLakeConnectorArgs struct {
	// Name of MQ dataLakeConnector resource
	DataLakeConnectorName string `pulumi:"dataLakeConnectorName"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// MQ dataLakeConnector resource
type LookupDataLakeConnectorResult struct {
	// DataLake database format to use.
	DatabaseFormat string `pulumi:"databaseFormat"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponse `pulumi:"extendedLocation"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The details of DataLakeConnector Docker Image.
	Image ContainerImageResponse `pulumi:"image"`
	// The number of DataLakeConnector pods to spin up.
	Instances *int `pulumi:"instances"`
	// The details for connecting with Local Broker.
	LocalBrokerConnection *LocalBrokerConnectionSpecResponse `pulumi:"localBrokerConnection"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The log level of the DataLake Connector instances.
	LogLevel *string `pulumi:"logLevel"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The Node Tolerations for the DataLake Connector pods.
	NodeTolerations *NodeTolerationsResponse `pulumi:"nodeTolerations"`
	// The protocol to use for connecting with Brokers.
	Protocol string `pulumi:"protocol"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
	Target DataLakeTargetStorageResponse `pulumi:"target"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupDataLakeConnectorResult
func (val *LookupDataLakeConnectorResult) Defaults() *LookupDataLakeConnectorResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LocalBrokerConnection = tmp.LocalBrokerConnection.Defaults()

	return &tmp
}

func LookupDataLakeConnectorOutput(ctx *pulumi.Context, args LookupDataLakeConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupDataLakeConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataLakeConnectorResult, error) {
			args := v.(LookupDataLakeConnectorArgs)
			r, err := LookupDataLakeConnector(ctx, &args, opts...)
			var s LookupDataLakeConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDataLakeConnectorResultOutput)
}

type LookupDataLakeConnectorOutputArgs struct {
	// Name of MQ dataLakeConnector resource
	DataLakeConnectorName pulumi.StringInput `pulumi:"dataLakeConnectorName"`
	// Name of MQ resource
	MqName pulumi.StringInput `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupDataLakeConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataLakeConnectorArgs)(nil)).Elem()
}

// MQ dataLakeConnector resource
type LookupDataLakeConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupDataLakeConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataLakeConnectorResult)(nil)).Elem()
}

func (o LookupDataLakeConnectorResultOutput) ToLookupDataLakeConnectorResultOutput() LookupDataLakeConnectorResultOutput {
	return o
}

func (o LookupDataLakeConnectorResultOutput) ToLookupDataLakeConnectorResultOutputWithContext(ctx context.Context) LookupDataLakeConnectorResultOutput {
	return o
}

// DataLake database format to use.
func (o LookupDataLakeConnectorResultOutput) DatabaseFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) string { return v.DatabaseFormat }).(pulumi.StringOutput)
}

// Extended Location
func (o LookupDataLakeConnectorResultOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) ExtendedLocationPropertyResponse { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupDataLakeConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The details of DataLakeConnector Docker Image.
func (o LookupDataLakeConnectorResultOutput) Image() ContainerImageResponseOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) ContainerImageResponse { return v.Image }).(ContainerImageResponseOutput)
}

// The number of DataLakeConnector pods to spin up.
func (o LookupDataLakeConnectorResultOutput) Instances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) *int { return v.Instances }).(pulumi.IntPtrOutput)
}

// The details for connecting with Local Broker.
func (o LookupDataLakeConnectorResultOutput) LocalBrokerConnection() LocalBrokerConnectionSpecResponsePtrOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) *LocalBrokerConnectionSpecResponse {
		return v.LocalBrokerConnection
	}).(LocalBrokerConnectionSpecResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupDataLakeConnectorResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) string { return v.Location }).(pulumi.StringOutput)
}

// The log level of the DataLake Connector instances.
func (o LookupDataLakeConnectorResultOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupDataLakeConnectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Node Tolerations for the DataLake Connector pods.
func (o LookupDataLakeConnectorResultOutput) NodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) *NodeTolerationsResponse { return v.NodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// The protocol to use for connecting with Brokers.
func (o LookupDataLakeConnectorResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o LookupDataLakeConnectorResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupDataLakeConnectorResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupDataLakeConnectorResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
func (o LookupDataLakeConnectorResultOutput) Target() DataLakeTargetStorageResponseOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) DataLakeTargetStorageResponse { return v.Target }).(DataLakeTargetStorageResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupDataLakeConnectorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeConnectorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataLakeConnectorResultOutput{})
}
