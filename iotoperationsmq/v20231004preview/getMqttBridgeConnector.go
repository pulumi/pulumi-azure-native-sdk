// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a MqttBridgeConnectorResource
func LookupMqttBridgeConnector(ctx *pulumi.Context, args *LookupMqttBridgeConnectorArgs, opts ...pulumi.InvokeOption) (*LookupMqttBridgeConnectorResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupMqttBridgeConnectorResult
	err := ctx.Invoke("azure-native:iotoperationsmq/v20231004preview:getMqttBridgeConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupMqttBridgeConnectorArgs struct {
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// Name of MQ mqttBridgeConnector resource
	MqttBridgeConnectorName string `pulumi:"mqttBridgeConnectorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// MQ mqttBridgeConnector resource
type LookupMqttBridgeConnectorResult struct {
	// The number of instances to deploy for a bridge rollout.
	BridgeInstances *int `pulumi:"bridgeInstances"`
	// The client id prefix of the dynamically generated client ids.
	ClientIdPrefix *string `pulumi:"clientIdPrefix"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponse `pulumi:"extendedLocation"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The details of MqttBridge Docker Image.
	Image ContainerImageResponse `pulumi:"image"`
	// The details for connecting with Local Broker.
	LocalBrokerConnection *LocalBrokerConnectionSpecResponse `pulumi:"localBrokerConnection"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The log level of the Bridge Connector instances.
	LogLevel *string `pulumi:"logLevel"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The Node Tolerations for the Bridge Connector pods.
	NodeTolerations *NodeTolerationsResponse `pulumi:"nodeTolerations"`
	// The protocol to use for connecting with Brokers.
	Protocol string `pulumi:"protocol"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// The details for connecting with Remote Broker.
	RemoteBrokerConnection MqttBridgeRemoteBrokerConnectionSpecResponse `pulumi:"remoteBrokerConnection"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupMqttBridgeConnectorResult
func (val *LookupMqttBridgeConnectorResult) Defaults() *LookupMqttBridgeConnectorResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LocalBrokerConnection = tmp.LocalBrokerConnection.Defaults()

	tmp.RemoteBrokerConnection = *tmp.RemoteBrokerConnection.Defaults()

	return &tmp
}

func LookupMqttBridgeConnectorOutput(ctx *pulumi.Context, args LookupMqttBridgeConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupMqttBridgeConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMqttBridgeConnectorResult, error) {
			args := v.(LookupMqttBridgeConnectorArgs)
			r, err := LookupMqttBridgeConnector(ctx, &args, opts...)
			var s LookupMqttBridgeConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMqttBridgeConnectorResultOutput)
}

type LookupMqttBridgeConnectorOutputArgs struct {
	// Name of MQ resource
	MqName pulumi.StringInput `pulumi:"mqName"`
	// Name of MQ mqttBridgeConnector resource
	MqttBridgeConnectorName pulumi.StringInput `pulumi:"mqttBridgeConnectorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupMqttBridgeConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMqttBridgeConnectorArgs)(nil)).Elem()
}

// MQ mqttBridgeConnector resource
type LookupMqttBridgeConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupMqttBridgeConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMqttBridgeConnectorResult)(nil)).Elem()
}

func (o LookupMqttBridgeConnectorResultOutput) ToLookupMqttBridgeConnectorResultOutput() LookupMqttBridgeConnectorResultOutput {
	return o
}

func (o LookupMqttBridgeConnectorResultOutput) ToLookupMqttBridgeConnectorResultOutputWithContext(ctx context.Context) LookupMqttBridgeConnectorResultOutput {
	return o
}

// The number of instances to deploy for a bridge rollout.
func (o LookupMqttBridgeConnectorResultOutput) BridgeInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) *int { return v.BridgeInstances }).(pulumi.IntPtrOutput)
}

// The client id prefix of the dynamically generated client ids.
func (o LookupMqttBridgeConnectorResultOutput) ClientIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) *string { return v.ClientIdPrefix }).(pulumi.StringPtrOutput)
}

// Extended Location
func (o LookupMqttBridgeConnectorResultOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) ExtendedLocationPropertyResponse { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupMqttBridgeConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The details of MqttBridge Docker Image.
func (o LookupMqttBridgeConnectorResultOutput) Image() ContainerImageResponseOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) ContainerImageResponse { return v.Image }).(ContainerImageResponseOutput)
}

// The details for connecting with Local Broker.
func (o LookupMqttBridgeConnectorResultOutput) LocalBrokerConnection() LocalBrokerConnectionSpecResponsePtrOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) *LocalBrokerConnectionSpecResponse {
		return v.LocalBrokerConnection
	}).(LocalBrokerConnectionSpecResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupMqttBridgeConnectorResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) string { return v.Location }).(pulumi.StringOutput)
}

// The log level of the Bridge Connector instances.
func (o LookupMqttBridgeConnectorResultOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupMqttBridgeConnectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Node Tolerations for the Bridge Connector pods.
func (o LookupMqttBridgeConnectorResultOutput) NodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) *NodeTolerationsResponse { return v.NodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// The protocol to use for connecting with Brokers.
func (o LookupMqttBridgeConnectorResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o LookupMqttBridgeConnectorResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The details for connecting with Remote Broker.
func (o LookupMqttBridgeConnectorResultOutput) RemoteBrokerConnection() MqttBridgeRemoteBrokerConnectionSpecResponseOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) MqttBridgeRemoteBrokerConnectionSpecResponse {
		return v.RemoteBrokerConnection
	}).(MqttBridgeRemoteBrokerConnectionSpecResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupMqttBridgeConnectorResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupMqttBridgeConnectorResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupMqttBridgeConnectorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMqttBridgeConnectorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMqttBridgeConnectorResultOutput{})
}
