// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a BrokerResource
func LookupBroker(ctx *pulumi.Context, args *LookupBrokerArgs, opts ...pulumi.InvokeOption) (*LookupBrokerResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupBrokerResult
	err := ctx.Invoke("azure-native:iotoperationsmq/v20231004preview:getBroker", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupBrokerArgs struct {
	// Name of MQ broker resource
	BrokerName string `pulumi:"brokerName"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// MQ broker resource
type LookupBrokerResult struct {
	// The details of Authentication Docker Image.
	AuthImage ContainerImageResponse `pulumi:"authImage"`
	// The details of Broker Docker Image.
	BrokerImage ContainerImageResponse `pulumi:"brokerImage"`
	// The details of Node Tolerations for Broker Pods.
	BrokerNodeTolerations *NodeTolerationsResponse `pulumi:"brokerNodeTolerations"`
	// The cardinality details of the broker.
	Cardinality *CardinalityResponse `pulumi:"cardinality"`
	// The diagnostic details of the broker deployment.
	Diagnostics *BrokerDiagnosticsResponse `pulumi:"diagnostics"`
	// The settings of the disk-backed message buffer.
	DiskBackedMessageBufferSettings *DiskBackedMessageBufferSettingsResponse `pulumi:"diskBackedMessageBufferSettings"`
	// The setting to enable or disable encryption of internal Traffic.
	EncryptInternalTraffic *bool `pulumi:"encryptInternalTraffic"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponse `pulumi:"extendedLocation"`
	// The details of Health Manager Docker Image.
	HealthManagerImage ContainerImageResponse `pulumi:"healthManagerImage"`
	// The details of Node Tolerations for Health Manager Pods.
	HealthManagerNodeTolerations *NodeTolerationsResponse `pulumi:"healthManagerNodeTolerations"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Details of the internal CA cert that will be used to secure communication between pods.
	InternalCerts *CertManagerCertOptionsResponse `pulumi:"internalCerts"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Memory profile of broker.
	MemoryProfile *string `pulumi:"memoryProfile"`
	// The Running Mode of the Broker Deployment.
	Mode string `pulumi:"mode"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupBrokerResult
func (val *LookupBrokerResult) Defaults() *LookupBrokerResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Cardinality = tmp.Cardinality.Defaults()

	tmp.Diagnostics = tmp.Diagnostics.Defaults()

	if tmp.EncryptInternalTraffic == nil {
		encryptInternalTraffic_ := true
		tmp.EncryptInternalTraffic = &encryptInternalTraffic_
	}
	tmp.InternalCerts = tmp.InternalCerts.Defaults()

	if tmp.MemoryProfile == nil {
		memoryProfile_ := "medium"
		tmp.MemoryProfile = &memoryProfile_
	}
	return &tmp
}

func LookupBrokerOutput(ctx *pulumi.Context, args LookupBrokerOutputArgs, opts ...pulumi.InvokeOption) LookupBrokerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBrokerResult, error) {
			args := v.(LookupBrokerArgs)
			r, err := LookupBroker(ctx, &args, opts...)
			var s LookupBrokerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBrokerResultOutput)
}

type LookupBrokerOutputArgs struct {
	// Name of MQ broker resource
	BrokerName pulumi.StringInput `pulumi:"brokerName"`
	// Name of MQ resource
	MqName pulumi.StringInput `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupBrokerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrokerArgs)(nil)).Elem()
}

// MQ broker resource
type LookupBrokerResultOutput struct{ *pulumi.OutputState }

func (LookupBrokerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrokerResult)(nil)).Elem()
}

func (o LookupBrokerResultOutput) ToLookupBrokerResultOutput() LookupBrokerResultOutput {
	return o
}

func (o LookupBrokerResultOutput) ToLookupBrokerResultOutputWithContext(ctx context.Context) LookupBrokerResultOutput {
	return o
}

// The details of Authentication Docker Image.
func (o LookupBrokerResultOutput) AuthImage() ContainerImageResponseOutput {
	return o.ApplyT(func(v LookupBrokerResult) ContainerImageResponse { return v.AuthImage }).(ContainerImageResponseOutput)
}

// The details of Broker Docker Image.
func (o LookupBrokerResultOutput) BrokerImage() ContainerImageResponseOutput {
	return o.ApplyT(func(v LookupBrokerResult) ContainerImageResponse { return v.BrokerImage }).(ContainerImageResponseOutput)
}

// The details of Node Tolerations for Broker Pods.
func (o LookupBrokerResultOutput) BrokerNodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *NodeTolerationsResponse { return v.BrokerNodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// The cardinality details of the broker.
func (o LookupBrokerResultOutput) Cardinality() CardinalityResponsePtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *CardinalityResponse { return v.Cardinality }).(CardinalityResponsePtrOutput)
}

// The diagnostic details of the broker deployment.
func (o LookupBrokerResultOutput) Diagnostics() BrokerDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *BrokerDiagnosticsResponse { return v.Diagnostics }).(BrokerDiagnosticsResponsePtrOutput)
}

// The settings of the disk-backed message buffer.
func (o LookupBrokerResultOutput) DiskBackedMessageBufferSettings() DiskBackedMessageBufferSettingsResponsePtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *DiskBackedMessageBufferSettingsResponse {
		return v.DiskBackedMessageBufferSettings
	}).(DiskBackedMessageBufferSettingsResponsePtrOutput)
}

// The setting to enable or disable encryption of internal Traffic.
func (o LookupBrokerResultOutput) EncryptInternalTraffic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *bool { return v.EncryptInternalTraffic }).(pulumi.BoolPtrOutput)
}

// Extended Location
func (o LookupBrokerResultOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v LookupBrokerResult) ExtendedLocationPropertyResponse { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The details of Health Manager Docker Image.
func (o LookupBrokerResultOutput) HealthManagerImage() ContainerImageResponseOutput {
	return o.ApplyT(func(v LookupBrokerResult) ContainerImageResponse { return v.HealthManagerImage }).(ContainerImageResponseOutput)
}

// The details of Node Tolerations for Health Manager Pods.
func (o LookupBrokerResultOutput) HealthManagerNodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *NodeTolerationsResponse { return v.HealthManagerNodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupBrokerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerResult) string { return v.Id }).(pulumi.StringOutput)
}

// Details of the internal CA cert that will be used to secure communication between pods.
func (o LookupBrokerResultOutput) InternalCerts() CertManagerCertOptionsResponsePtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *CertManagerCertOptionsResponse { return v.InternalCerts }).(CertManagerCertOptionsResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupBrokerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerResult) string { return v.Location }).(pulumi.StringOutput)
}

// Memory profile of broker.
func (o LookupBrokerResultOutput) MemoryProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBrokerResult) *string { return v.MemoryProfile }).(pulumi.StringPtrOutput)
}

// The Running Mode of the Broker Deployment.
func (o LookupBrokerResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerResult) string { return v.Mode }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupBrokerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerResult) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o LookupBrokerResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupBrokerResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupBrokerResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupBrokerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBrokerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupBrokerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBrokerResultOutput{})
}
