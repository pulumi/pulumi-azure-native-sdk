// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MQ dataLakeConnector resource
// Azure REST API version: 2023-10-04-preview.
type DataLakeConnector struct {
	pulumi.CustomResourceState

	// DataLake database format to use.
	DatabaseFormat pulumi.StringOutput `pulumi:"databaseFormat"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponseOutput `pulumi:"extendedLocation"`
	// The details of DataLakeConnector Docker Image.
	Image ContainerImageResponseOutput `pulumi:"image"`
	// The number of DataLakeConnector pods to spin up.
	Instances pulumi.IntPtrOutput `pulumi:"instances"`
	// The details for connecting with Local Broker.
	LocalBrokerConnection LocalBrokerConnectionSpecResponsePtrOutput `pulumi:"localBrokerConnection"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The log level of the DataLake Connector instances.
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The Node Tolerations for the DataLake Connector pods.
	NodeTolerations NodeTolerationsResponsePtrOutput `pulumi:"nodeTolerations"`
	// The protocol to use for connecting with Brokers.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
	Target DataLakeTargetStorageResponseOutput `pulumi:"target"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataLakeConnector registers a new resource with the given unique name, arguments, and options.
func NewDataLakeConnector(ctx *pulumi.Context,
	name string, args *DataLakeConnectorArgs, opts ...pulumi.ResourceOption) (*DataLakeConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseFormat == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseFormat'")
	}
	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.MqName == nil {
		return nil, errors.New("invalid value for required argument 'MqName'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.LocalBrokerConnection != nil {
		args.LocalBrokerConnection = args.LocalBrokerConnection.ToLocalBrokerConnectionSpecPtrOutput().ApplyT(func(v *LocalBrokerConnectionSpec) *LocalBrokerConnectionSpec { return v.Defaults() }).(LocalBrokerConnectionSpecPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsmq/v20231004preview:DataLakeConnector"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DataLakeConnector
	err := ctx.RegisterResource("azure-native:iotoperationsmq:DataLakeConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataLakeConnector gets an existing DataLakeConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataLakeConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataLakeConnectorState, opts ...pulumi.ResourceOption) (*DataLakeConnector, error) {
	var resource DataLakeConnector
	err := ctx.ReadResource("azure-native:iotoperationsmq:DataLakeConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataLakeConnector resources.
type dataLakeConnectorState struct {
}

type DataLakeConnectorState struct {
}

func (DataLakeConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeConnectorState)(nil)).Elem()
}

type dataLakeConnectorArgs struct {
	// Name of MQ dataLakeConnector resource
	DataLakeConnectorName *string `pulumi:"dataLakeConnectorName"`
	// DataLake database format to use.
	DatabaseFormat string `pulumi:"databaseFormat"`
	// Extended Location
	ExtendedLocation ExtendedLocationProperty `pulumi:"extendedLocation"`
	// The details of DataLakeConnector Docker Image.
	Image ContainerImage `pulumi:"image"`
	// The number of DataLakeConnector pods to spin up.
	Instances *int `pulumi:"instances"`
	// The details for connecting with Local Broker.
	LocalBrokerConnection *LocalBrokerConnectionSpec `pulumi:"localBrokerConnection"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The log level of the DataLake Connector instances.
	LogLevel *string `pulumi:"logLevel"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The Node Tolerations for the DataLake Connector pods.
	NodeTolerations *NodeTolerations `pulumi:"nodeTolerations"`
	// The protocol to use for connecting with Brokers.
	Protocol string `pulumi:"protocol"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
	Target DataLakeTargetStorage `pulumi:"target"`
}

// The set of arguments for constructing a DataLakeConnector resource.
type DataLakeConnectorArgs struct {
	// Name of MQ dataLakeConnector resource
	DataLakeConnectorName pulumi.StringPtrInput
	// DataLake database format to use.
	DatabaseFormat pulumi.StringInput
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyInput
	// The details of DataLakeConnector Docker Image.
	Image ContainerImageInput
	// The number of DataLakeConnector pods to spin up.
	Instances pulumi.IntPtrInput
	// The details for connecting with Local Broker.
	LocalBrokerConnection LocalBrokerConnectionSpecPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The log level of the DataLake Connector instances.
	LogLevel pulumi.StringPtrInput
	// Name of MQ resource
	MqName pulumi.StringInput
	// The Node Tolerations for the DataLake Connector pods.
	NodeTolerations NodeTolerationsPtrInput
	// The protocol to use for connecting with Brokers.
	Protocol pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
	Target DataLakeTargetStorageInput
}

func (DataLakeConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeConnectorArgs)(nil)).Elem()
}

type DataLakeConnectorInput interface {
	pulumi.Input

	ToDataLakeConnectorOutput() DataLakeConnectorOutput
	ToDataLakeConnectorOutputWithContext(ctx context.Context) DataLakeConnectorOutput
}

func (*DataLakeConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeConnector)(nil)).Elem()
}

func (i *DataLakeConnector) ToDataLakeConnectorOutput() DataLakeConnectorOutput {
	return i.ToDataLakeConnectorOutputWithContext(context.Background())
}

func (i *DataLakeConnector) ToDataLakeConnectorOutputWithContext(ctx context.Context) DataLakeConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeConnectorOutput)
}

type DataLakeConnectorOutput struct{ *pulumi.OutputState }

func (DataLakeConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeConnector)(nil)).Elem()
}

func (o DataLakeConnectorOutput) ToDataLakeConnectorOutput() DataLakeConnectorOutput {
	return o
}

func (o DataLakeConnectorOutput) ToDataLakeConnectorOutputWithContext(ctx context.Context) DataLakeConnectorOutput {
	return o
}

// DataLake database format to use.
func (o DataLakeConnectorOutput) DatabaseFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringOutput { return v.DatabaseFormat }).(pulumi.StringOutput)
}

// Extended Location
func (o DataLakeConnectorOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v *DataLakeConnector) ExtendedLocationPropertyResponseOutput { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The details of DataLakeConnector Docker Image.
func (o DataLakeConnectorOutput) Image() ContainerImageResponseOutput {
	return o.ApplyT(func(v *DataLakeConnector) ContainerImageResponseOutput { return v.Image }).(ContainerImageResponseOutput)
}

// The number of DataLakeConnector pods to spin up.
func (o DataLakeConnectorOutput) Instances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.IntPtrOutput { return v.Instances }).(pulumi.IntPtrOutput)
}

// The details for connecting with Local Broker.
func (o DataLakeConnectorOutput) LocalBrokerConnection() LocalBrokerConnectionSpecResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeConnector) LocalBrokerConnectionSpecResponsePtrOutput { return v.LocalBrokerConnection }).(LocalBrokerConnectionSpecResponsePtrOutput)
}

// The geo-location where the resource lives
func (o DataLakeConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The log level of the DataLake Connector instances.
func (o DataLakeConnectorOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o DataLakeConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Node Tolerations for the DataLake Connector pods.
func (o DataLakeConnectorOutput) NodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v *DataLakeConnector) NodeTolerationsResponsePtrOutput { return v.NodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// The protocol to use for connecting with Brokers.
func (o DataLakeConnectorOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o DataLakeConnectorOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DataLakeConnectorOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DataLakeConnector) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o DataLakeConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.
func (o DataLakeConnectorOutput) Target() DataLakeTargetStorageResponseOutput {
	return o.ApplyT(func(v *DataLakeConnector) DataLakeTargetStorageResponseOutput { return v.Target }).(DataLakeTargetStorageResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DataLakeConnectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeConnector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DataLakeConnectorOutput{})
}
