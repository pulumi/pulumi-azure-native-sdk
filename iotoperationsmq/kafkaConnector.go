// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MQ kafkaConnector resource
// Azure REST API version: 2023-10-04-preview.
type KafkaConnector struct {
	pulumi.CustomResourceState

	// The client id prefix of the dynamically generated client ids.
	ClientIdPrefix pulumi.StringPtrOutput `pulumi:"clientIdPrefix"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponseOutput `pulumi:"extendedLocation"`
	// The details of KafkaConnector Docker Image.
	Image ContainerImageResponsePtrOutput `pulumi:"image"`
	// The number of KafkaConnector pods to spin up.
	Instances pulumi.IntPtrOutput `pulumi:"instances"`
	// The details for connecting with Remote Kafka Broker.
	KafkaConnection KafkaRemoteBrokerConnectionSpecResponseOutput `pulumi:"kafkaConnection"`
	// The details for connecting with Local Broker.
	LocalBrokerConnection LocalBrokerConnectionSpecResponsePtrOutput `pulumi:"localBrokerConnection"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The log level of the Bridge Connector instances.
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The Node Tolerations for the Bridge Connector pods.
	NodeTolerations NodeTolerationsResponsePtrOutput `pulumi:"nodeTolerations"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnector(ctx *pulumi.Context,
	name string, args *KafkaConnectorArgs, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.KafkaConnection == nil {
		return nil, errors.New("invalid value for required argument 'KafkaConnection'")
	}
	if args.MqName == nil {
		return nil, errors.New("invalid value for required argument 'MqName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.LocalBrokerConnection != nil {
		args.LocalBrokerConnection = args.LocalBrokerConnection.ToLocalBrokerConnectionSpecPtrOutput().ApplyT(func(v *LocalBrokerConnectionSpec) *LocalBrokerConnectionSpec { return v.Defaults() }).(LocalBrokerConnectionSpecPtrOutput)
	}
	if args.LogLevel == nil {
		args.LogLevel = pulumi.StringPtr("info")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsmq/v20231004preview:KafkaConnector"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnector
	err := ctx.RegisterResource("azure-native:iotoperationsmq:KafkaConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnector gets an existing KafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorState, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	var resource KafkaConnector
	err := ctx.ReadResource("azure-native:iotoperationsmq:KafkaConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnector resources.
type kafkaConnectorState struct {
}

type KafkaConnectorState struct {
}

func (KafkaConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorState)(nil)).Elem()
}

type kafkaConnectorArgs struct {
	// The client id prefix of the dynamically generated client ids.
	ClientIdPrefix *string `pulumi:"clientIdPrefix"`
	// Extended Location
	ExtendedLocation ExtendedLocationProperty `pulumi:"extendedLocation"`
	// The details of KafkaConnector Docker Image.
	Image *ContainerImage `pulumi:"image"`
	// The number of KafkaConnector pods to spin up.
	Instances *int `pulumi:"instances"`
	// The details for connecting with Remote Kafka Broker.
	KafkaConnection KafkaRemoteBrokerConnectionSpec `pulumi:"kafkaConnection"`
	// Name of MQ kafkaConnector resource
	KafkaConnectorName *string `pulumi:"kafkaConnectorName"`
	// The details for connecting with Local Broker.
	LocalBrokerConnection *LocalBrokerConnectionSpec `pulumi:"localBrokerConnection"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The log level of the Bridge Connector instances.
	LogLevel *string `pulumi:"logLevel"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The Node Tolerations for the Bridge Connector pods.
	NodeTolerations *NodeTolerations `pulumi:"nodeTolerations"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a KafkaConnector resource.
type KafkaConnectorArgs struct {
	// The client id prefix of the dynamically generated client ids.
	ClientIdPrefix pulumi.StringPtrInput
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyInput
	// The details of KafkaConnector Docker Image.
	Image ContainerImagePtrInput
	// The number of KafkaConnector pods to spin up.
	Instances pulumi.IntPtrInput
	// The details for connecting with Remote Kafka Broker.
	KafkaConnection KafkaRemoteBrokerConnectionSpecInput
	// Name of MQ kafkaConnector resource
	KafkaConnectorName pulumi.StringPtrInput
	// The details for connecting with Local Broker.
	LocalBrokerConnection LocalBrokerConnectionSpecPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The log level of the Bridge Connector instances.
	LogLevel pulumi.StringPtrInput
	// Name of MQ resource
	MqName pulumi.StringInput
	// The Node Tolerations for the Bridge Connector pods.
	NodeTolerations NodeTolerationsPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (KafkaConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorArgs)(nil)).Elem()
}

type KafkaConnectorInput interface {
	pulumi.Input

	ToKafkaConnectorOutput() KafkaConnectorOutput
	ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput
}

func (*KafkaConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (i *KafkaConnector) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return i.ToKafkaConnectorOutputWithContext(context.Background())
}

func (i *KafkaConnector) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorOutput)
}

type KafkaConnectorOutput struct{ *pulumi.OutputState }

func (KafkaConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return o
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return o
}

// The client id prefix of the dynamically generated client ids.
func (o KafkaConnectorOutput) ClientIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringPtrOutput { return v.ClientIdPrefix }).(pulumi.StringPtrOutput)
}

// Extended Location
func (o KafkaConnectorOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v *KafkaConnector) ExtendedLocationPropertyResponseOutput { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The details of KafkaConnector Docker Image.
func (o KafkaConnectorOutput) Image() ContainerImageResponsePtrOutput {
	return o.ApplyT(func(v *KafkaConnector) ContainerImageResponsePtrOutput { return v.Image }).(ContainerImageResponsePtrOutput)
}

// The number of KafkaConnector pods to spin up.
func (o KafkaConnectorOutput) Instances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.IntPtrOutput { return v.Instances }).(pulumi.IntPtrOutput)
}

// The details for connecting with Remote Kafka Broker.
func (o KafkaConnectorOutput) KafkaConnection() KafkaRemoteBrokerConnectionSpecResponseOutput {
	return o.ApplyT(func(v *KafkaConnector) KafkaRemoteBrokerConnectionSpecResponseOutput { return v.KafkaConnection }).(KafkaRemoteBrokerConnectionSpecResponseOutput)
}

// The details for connecting with Local Broker.
func (o KafkaConnectorOutput) LocalBrokerConnection() LocalBrokerConnectionSpecResponsePtrOutput {
	return o.ApplyT(func(v *KafkaConnector) LocalBrokerConnectionSpecResponsePtrOutput { return v.LocalBrokerConnection }).(LocalBrokerConnectionSpecResponsePtrOutput)
}

// The geo-location where the resource lives
func (o KafkaConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The log level of the Bridge Connector instances.
func (o KafkaConnectorOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o KafkaConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Node Tolerations for the Bridge Connector pods.
func (o KafkaConnectorOutput) NodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v *KafkaConnector) NodeTolerationsResponsePtrOutput { return v.NodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// The status of the last operation.
func (o KafkaConnectorOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o KafkaConnectorOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *KafkaConnector) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o KafkaConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o KafkaConnectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(KafkaConnectorOutput{})
}
