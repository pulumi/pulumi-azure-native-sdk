// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a BrokerListenerResource
// Azure REST API version: 2023-10-04-preview.
func LookupBrokerListener(ctx *pulumi.Context, args *LookupBrokerListenerArgs, opts ...pulumi.InvokeOption) (*LookupBrokerListenerResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupBrokerListenerResult
	err := ctx.Invoke("azure-native:iotoperationsmq:getBrokerListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupBrokerListenerArgs struct {
	// Name of MQ broker resource
	BrokerName string `pulumi:"brokerName"`
	// Name of MQ broker/listener resource
	ListenerName string `pulumi:"listenerName"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// MQ broker/listener resource
type LookupBrokerListenerResult struct {
	// The flag for enabling Authentication rules on Listener Port.
	AuthenticationEnabled *bool `pulumi:"authenticationEnabled"`
	// The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.
	AuthorizationEnabled *bool `pulumi:"authorizationEnabled"`
	// The k8s cr/resource reference of mq/broker.
	BrokerRef string `pulumi:"brokerRef"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponse `pulumi:"extendedLocation"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The node port to use on the Host node.
	NodePort *int `pulumi:"nodePort"`
	// The port to start Listening for connections on.
	Port int `pulumi:"port"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// The service name to expose Listener port on.
	ServiceName *string `pulumi:"serviceName"`
	// The Kubernetes Service type to deploy for Listener.
	ServiceType *string `pulumi:"serviceType"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported
	Tls *TlsCertMethodResponse `pulumi:"tls"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupBrokerListenerResult
func (val *LookupBrokerListenerResult) Defaults() *LookupBrokerListenerResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AuthenticationEnabled == nil {
		authenticationEnabled_ := false
		tmp.AuthenticationEnabled = &authenticationEnabled_
	}
	if tmp.AuthorizationEnabled == nil {
		authorizationEnabled_ := false
		tmp.AuthorizationEnabled = &authorizationEnabled_
	}
	if tmp.ServiceName == nil {
		serviceName_ := "aio-mq-dmqtt-frontend"
		tmp.ServiceName = &serviceName_
	}
	if tmp.ServiceType == nil {
		serviceType_ := "clusterIp"
		tmp.ServiceType = &serviceType_
	}
	tmp.Tls = tmp.Tls.Defaults()

	return &tmp
}

func LookupBrokerListenerOutput(ctx *pulumi.Context, args LookupBrokerListenerOutputArgs, opts ...pulumi.InvokeOption) LookupBrokerListenerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBrokerListenerResult, error) {
			args := v.(LookupBrokerListenerArgs)
			r, err := LookupBrokerListener(ctx, &args, opts...)
			var s LookupBrokerListenerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBrokerListenerResultOutput)
}

type LookupBrokerListenerOutputArgs struct {
	// Name of MQ broker resource
	BrokerName pulumi.StringInput `pulumi:"brokerName"`
	// Name of MQ broker/listener resource
	ListenerName pulumi.StringInput `pulumi:"listenerName"`
	// Name of MQ resource
	MqName pulumi.StringInput `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupBrokerListenerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrokerListenerArgs)(nil)).Elem()
}

// MQ broker/listener resource
type LookupBrokerListenerResultOutput struct{ *pulumi.OutputState }

func (LookupBrokerListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrokerListenerResult)(nil)).Elem()
}

func (o LookupBrokerListenerResultOutput) ToLookupBrokerListenerResultOutput() LookupBrokerListenerResultOutput {
	return o
}

func (o LookupBrokerListenerResultOutput) ToLookupBrokerListenerResultOutputWithContext(ctx context.Context) LookupBrokerListenerResultOutput {
	return o
}

// The flag for enabling Authentication rules on Listener Port.
func (o LookupBrokerListenerResultOutput) AuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) *bool { return v.AuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.
func (o LookupBrokerListenerResultOutput) AuthorizationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) *bool { return v.AuthorizationEnabled }).(pulumi.BoolPtrOutput)
}

// The k8s cr/resource reference of mq/broker.
func (o LookupBrokerListenerResultOutput) BrokerRef() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) string { return v.BrokerRef }).(pulumi.StringOutput)
}

// Extended Location
func (o LookupBrokerListenerResultOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) ExtendedLocationPropertyResponse { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupBrokerListenerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupBrokerListenerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupBrokerListenerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) string { return v.Name }).(pulumi.StringOutput)
}

// The node port to use on the Host node.
func (o LookupBrokerListenerResultOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port to start Listening for connections on.
func (o LookupBrokerListenerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) int { return v.Port }).(pulumi.IntOutput)
}

// The status of the last operation.
func (o LookupBrokerListenerResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The service name to expose Listener port on.
func (o LookupBrokerListenerResultOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// The Kubernetes Service type to deploy for Listener.
func (o LookupBrokerListenerResultOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupBrokerListenerResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupBrokerListenerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported
func (o LookupBrokerListenerResultOutput) Tls() TlsCertMethodResponsePtrOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) *TlsCertMethodResponse { return v.Tls }).(TlsCertMethodResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupBrokerListenerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBrokerListenerResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBrokerListenerResultOutput{})
}
