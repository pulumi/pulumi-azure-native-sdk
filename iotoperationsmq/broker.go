// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MQ broker resource
// Azure REST API version: 2023-10-04-preview.
type Broker struct {
	pulumi.CustomResourceState

	// The details of Authentication Docker Image.
	AuthImage ContainerImageResponseOutput `pulumi:"authImage"`
	// The details of Broker Docker Image.
	BrokerImage ContainerImageResponseOutput `pulumi:"brokerImage"`
	// The details of Node Tolerations for Broker Pods.
	BrokerNodeTolerations NodeTolerationsResponsePtrOutput `pulumi:"brokerNodeTolerations"`
	// The cardinality details of the broker.
	Cardinality CardinalityResponsePtrOutput `pulumi:"cardinality"`
	// The diagnostic details of the broker deployment.
	Diagnostics BrokerDiagnosticsResponsePtrOutput `pulumi:"diagnostics"`
	// The settings of the disk-backed message buffer.
	DiskBackedMessageBufferSettings DiskBackedMessageBufferSettingsResponsePtrOutput `pulumi:"diskBackedMessageBufferSettings"`
	// The setting to enable or disable encryption of internal Traffic.
	EncryptInternalTraffic pulumi.BoolPtrOutput `pulumi:"encryptInternalTraffic"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponseOutput `pulumi:"extendedLocation"`
	// The details of Health Manager Docker Image.
	HealthManagerImage ContainerImageResponseOutput `pulumi:"healthManagerImage"`
	// The details of Node Tolerations for Health Manager Pods.
	HealthManagerNodeTolerations NodeTolerationsResponsePtrOutput `pulumi:"healthManagerNodeTolerations"`
	// Details of the internal CA cert that will be used to secure communication between pods.
	InternalCerts CertManagerCertOptionsResponsePtrOutput `pulumi:"internalCerts"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Memory profile of broker.
	MemoryProfile pulumi.StringPtrOutput `pulumi:"memoryProfile"`
	// The Running Mode of the Broker Deployment.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBroker registers a new resource with the given unique name, arguments, and options.
func NewBroker(ctx *pulumi.Context,
	name string, args *BrokerArgs, opts ...pulumi.ResourceOption) (*Broker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthImage == nil {
		return nil, errors.New("invalid value for required argument 'AuthImage'")
	}
	if args.BrokerImage == nil {
		return nil, errors.New("invalid value for required argument 'BrokerImage'")
	}
	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.HealthManagerImage == nil {
		return nil, errors.New("invalid value for required argument 'HealthManagerImage'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.MqName == nil {
		return nil, errors.New("invalid value for required argument 'MqName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Cardinality != nil {
		args.Cardinality = args.Cardinality.ToCardinalityPtrOutput().ApplyT(func(v *Cardinality) *Cardinality { return v.Defaults() }).(CardinalityPtrOutput)
	}
	if args.Diagnostics != nil {
		args.Diagnostics = args.Diagnostics.ToBrokerDiagnosticsPtrOutput().ApplyT(func(v *BrokerDiagnostics) *BrokerDiagnostics { return v.Defaults() }).(BrokerDiagnosticsPtrOutput)
	}
	if args.EncryptInternalTraffic == nil {
		args.EncryptInternalTraffic = pulumi.BoolPtr(true)
	}
	if args.InternalCerts != nil {
		args.InternalCerts = args.InternalCerts.ToCertManagerCertOptionsPtrOutput().ApplyT(func(v *CertManagerCertOptions) *CertManagerCertOptions { return v.Defaults() }).(CertManagerCertOptionsPtrOutput)
	}
	if args.MemoryProfile == nil {
		args.MemoryProfile = pulumi.StringPtr("medium")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsmq/v20231004preview:Broker"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Broker
	err := ctx.RegisterResource("azure-native:iotoperationsmq:Broker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBroker gets an existing Broker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBroker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrokerState, opts ...pulumi.ResourceOption) (*Broker, error) {
	var resource Broker
	err := ctx.ReadResource("azure-native:iotoperationsmq:Broker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Broker resources.
type brokerState struct {
}

type BrokerState struct {
}

func (BrokerState) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerState)(nil)).Elem()
}

type brokerArgs struct {
	// The details of Authentication Docker Image.
	AuthImage ContainerImage `pulumi:"authImage"`
	// The details of Broker Docker Image.
	BrokerImage ContainerImage `pulumi:"brokerImage"`
	// Name of MQ broker resource
	BrokerName *string `pulumi:"brokerName"`
	// The details of Node Tolerations for Broker Pods.
	BrokerNodeTolerations *NodeTolerations `pulumi:"brokerNodeTolerations"`
	// The cardinality details of the broker.
	Cardinality *Cardinality `pulumi:"cardinality"`
	// The diagnostic details of the broker deployment.
	Diagnostics *BrokerDiagnostics `pulumi:"diagnostics"`
	// The settings of the disk-backed message buffer.
	DiskBackedMessageBufferSettings *DiskBackedMessageBufferSettings `pulumi:"diskBackedMessageBufferSettings"`
	// The setting to enable or disable encryption of internal Traffic.
	EncryptInternalTraffic *bool `pulumi:"encryptInternalTraffic"`
	// Extended Location
	ExtendedLocation ExtendedLocationProperty `pulumi:"extendedLocation"`
	// The details of Health Manager Docker Image.
	HealthManagerImage ContainerImage `pulumi:"healthManagerImage"`
	// The details of Node Tolerations for Health Manager Pods.
	HealthManagerNodeTolerations *NodeTolerations `pulumi:"healthManagerNodeTolerations"`
	// Details of the internal CA cert that will be used to secure communication between pods.
	InternalCerts *CertManagerCertOptions `pulumi:"internalCerts"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Memory profile of broker.
	MemoryProfile *string `pulumi:"memoryProfile"`
	// The Running Mode of the Broker Deployment.
	Mode string `pulumi:"mode"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Broker resource.
type BrokerArgs struct {
	// The details of Authentication Docker Image.
	AuthImage ContainerImageInput
	// The details of Broker Docker Image.
	BrokerImage ContainerImageInput
	// Name of MQ broker resource
	BrokerName pulumi.StringPtrInput
	// The details of Node Tolerations for Broker Pods.
	BrokerNodeTolerations NodeTolerationsPtrInput
	// The cardinality details of the broker.
	Cardinality CardinalityPtrInput
	// The diagnostic details of the broker deployment.
	Diagnostics BrokerDiagnosticsPtrInput
	// The settings of the disk-backed message buffer.
	DiskBackedMessageBufferSettings DiskBackedMessageBufferSettingsPtrInput
	// The setting to enable or disable encryption of internal Traffic.
	EncryptInternalTraffic pulumi.BoolPtrInput
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyInput
	// The details of Health Manager Docker Image.
	HealthManagerImage ContainerImageInput
	// The details of Node Tolerations for Health Manager Pods.
	HealthManagerNodeTolerations NodeTolerationsPtrInput
	// Details of the internal CA cert that will be used to secure communication between pods.
	InternalCerts CertManagerCertOptionsPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Memory profile of broker.
	MemoryProfile pulumi.StringPtrInput
	// The Running Mode of the Broker Deployment.
	Mode pulumi.StringInput
	// Name of MQ resource
	MqName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (BrokerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerArgs)(nil)).Elem()
}

type BrokerInput interface {
	pulumi.Input

	ToBrokerOutput() BrokerOutput
	ToBrokerOutputWithContext(ctx context.Context) BrokerOutput
}

func (*Broker) ElementType() reflect.Type {
	return reflect.TypeOf((**Broker)(nil)).Elem()
}

func (i *Broker) ToBrokerOutput() BrokerOutput {
	return i.ToBrokerOutputWithContext(context.Background())
}

func (i *Broker) ToBrokerOutputWithContext(ctx context.Context) BrokerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerOutput)
}

type BrokerOutput struct{ *pulumi.OutputState }

func (BrokerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Broker)(nil)).Elem()
}

func (o BrokerOutput) ToBrokerOutput() BrokerOutput {
	return o
}

func (o BrokerOutput) ToBrokerOutputWithContext(ctx context.Context) BrokerOutput {
	return o
}

// The details of Authentication Docker Image.
func (o BrokerOutput) AuthImage() ContainerImageResponseOutput {
	return o.ApplyT(func(v *Broker) ContainerImageResponseOutput { return v.AuthImage }).(ContainerImageResponseOutput)
}

// The details of Broker Docker Image.
func (o BrokerOutput) BrokerImage() ContainerImageResponseOutput {
	return o.ApplyT(func(v *Broker) ContainerImageResponseOutput { return v.BrokerImage }).(ContainerImageResponseOutput)
}

// The details of Node Tolerations for Broker Pods.
func (o BrokerOutput) BrokerNodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v *Broker) NodeTolerationsResponsePtrOutput { return v.BrokerNodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// The cardinality details of the broker.
func (o BrokerOutput) Cardinality() CardinalityResponsePtrOutput {
	return o.ApplyT(func(v *Broker) CardinalityResponsePtrOutput { return v.Cardinality }).(CardinalityResponsePtrOutput)
}

// The diagnostic details of the broker deployment.
func (o BrokerOutput) Diagnostics() BrokerDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v *Broker) BrokerDiagnosticsResponsePtrOutput { return v.Diagnostics }).(BrokerDiagnosticsResponsePtrOutput)
}

// The settings of the disk-backed message buffer.
func (o BrokerOutput) DiskBackedMessageBufferSettings() DiskBackedMessageBufferSettingsResponsePtrOutput {
	return o.ApplyT(func(v *Broker) DiskBackedMessageBufferSettingsResponsePtrOutput {
		return v.DiskBackedMessageBufferSettings
	}).(DiskBackedMessageBufferSettingsResponsePtrOutput)
}

// The setting to enable or disable encryption of internal Traffic.
func (o BrokerOutput) EncryptInternalTraffic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.BoolPtrOutput { return v.EncryptInternalTraffic }).(pulumi.BoolPtrOutput)
}

// Extended Location
func (o BrokerOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v *Broker) ExtendedLocationPropertyResponseOutput { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The details of Health Manager Docker Image.
func (o BrokerOutput) HealthManagerImage() ContainerImageResponseOutput {
	return o.ApplyT(func(v *Broker) ContainerImageResponseOutput { return v.HealthManagerImage }).(ContainerImageResponseOutput)
}

// The details of Node Tolerations for Health Manager Pods.
func (o BrokerOutput) HealthManagerNodeTolerations() NodeTolerationsResponsePtrOutput {
	return o.ApplyT(func(v *Broker) NodeTolerationsResponsePtrOutput { return v.HealthManagerNodeTolerations }).(NodeTolerationsResponsePtrOutput)
}

// Details of the internal CA cert that will be used to secure communication between pods.
func (o BrokerOutput) InternalCerts() CertManagerCertOptionsResponsePtrOutput {
	return o.ApplyT(func(v *Broker) CertManagerCertOptionsResponsePtrOutput { return v.InternalCerts }).(CertManagerCertOptionsResponsePtrOutput)
}

// The geo-location where the resource lives
func (o BrokerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Memory profile of broker.
func (o BrokerOutput) MemoryProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringPtrOutput { return v.MemoryProfile }).(pulumi.StringPtrOutput)
}

// The Running Mode of the Broker Deployment.
func (o BrokerOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The name of the resource
func (o BrokerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o BrokerOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o BrokerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Broker) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o BrokerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o BrokerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BrokerOutput{})
}
