// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MQ kafkaConnector/topicMap resource
// Azure REST API version: 2023-10-04-preview.
type KafkaConnectorTopicMap struct {
	pulumi.CustomResourceState

	// The batching settings for kafka messages.
	Batching KafkaTopicMapBatchingResponsePtrOutput `pulumi:"batching"`
	// The compression to use for kafka messages.
	Compression pulumi.StringPtrOutput `pulumi:"compression"`
	// The flag to copy Mqtt properties.
	CopyMqttProperties pulumi.StringPtrOutput `pulumi:"copyMqttProperties"`
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyResponseOutput `pulumi:"extendedLocation"`
	// The kafkaConnector CRD it refers to.
	KafkaConnectorRef pulumi.StringOutput `pulumi:"kafkaConnectorRef"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The partition to use for Kafka.
	PartitionKeyProperty pulumi.StringPtrOutput `pulumi:"partitionKeyProperty"`
	// The partition strategy to use for Kafka.
	PartitionStrategy pulumi.StringPtrOutput `pulumi:"partitionStrategy"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The route details for Kafka connector.
	Routes KafkaRoutesResponseArrayOutput `pulumi:"routes"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKafkaConnectorTopicMap registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnectorTopicMap(ctx *pulumi.Context,
	name string, args *KafkaConnectorTopicMapArgs, opts ...pulumi.ResourceOption) (*KafkaConnectorTopicMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.KafkaConnectorName == nil {
		return nil, errors.New("invalid value for required argument 'KafkaConnectorName'")
	}
	if args.KafkaConnectorRef == nil {
		return nil, errors.New("invalid value for required argument 'KafkaConnectorRef'")
	}
	if args.MqName == nil {
		return nil, errors.New("invalid value for required argument 'MqName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Routes == nil {
		return nil, errors.New("invalid value for required argument 'Routes'")
	}
	if args.Batching != nil {
		args.Batching = args.Batching.ToKafkaTopicMapBatchingPtrOutput().ApplyT(func(v *KafkaTopicMapBatching) *KafkaTopicMapBatching { return v.Defaults() }).(KafkaTopicMapBatchingPtrOutput)
	}
	if args.Compression == nil {
		args.Compression = pulumi.StringPtr("none")
	}
	if args.PartitionStrategy == nil {
		args.PartitionStrategy = pulumi.StringPtr("default")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsmq/v20231004preview:KafkaConnectorTopicMap"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnectorTopicMap
	err := ctx.RegisterResource("azure-native:iotoperationsmq:KafkaConnectorTopicMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnectorTopicMap gets an existing KafkaConnectorTopicMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnectorTopicMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorTopicMapState, opts ...pulumi.ResourceOption) (*KafkaConnectorTopicMap, error) {
	var resource KafkaConnectorTopicMap
	err := ctx.ReadResource("azure-native:iotoperationsmq:KafkaConnectorTopicMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnectorTopicMap resources.
type kafkaConnectorTopicMapState struct {
}

type KafkaConnectorTopicMapState struct {
}

func (KafkaConnectorTopicMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorTopicMapState)(nil)).Elem()
}

type kafkaConnectorTopicMapArgs struct {
	// The batching settings for kafka messages.
	Batching *KafkaTopicMapBatching `pulumi:"batching"`
	// The compression to use for kafka messages.
	Compression *string `pulumi:"compression"`
	// The flag to copy Mqtt properties.
	CopyMqttProperties *string `pulumi:"copyMqttProperties"`
	// Extended Location
	ExtendedLocation ExtendedLocationProperty `pulumi:"extendedLocation"`
	// Name of MQ kafkaConnector resource
	KafkaConnectorName string `pulumi:"kafkaConnectorName"`
	// The kafkaConnector CRD it refers to.
	KafkaConnectorRef string `pulumi:"kafkaConnectorRef"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Name of MQ resource
	MqName string `pulumi:"mqName"`
	// The partition to use for Kafka.
	PartitionKeyProperty *string `pulumi:"partitionKeyProperty"`
	// The partition strategy to use for Kafka.
	PartitionStrategy *string `pulumi:"partitionStrategy"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The route details for Kafka connector.
	Routes []KafkaRoutes `pulumi:"routes"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Name of MQ kafka/topicMap resource
	TopicMapName *string `pulumi:"topicMapName"`
}

// The set of arguments for constructing a KafkaConnectorTopicMap resource.
type KafkaConnectorTopicMapArgs struct {
	// The batching settings for kafka messages.
	Batching KafkaTopicMapBatchingPtrInput
	// The compression to use for kafka messages.
	Compression pulumi.StringPtrInput
	// The flag to copy Mqtt properties.
	CopyMqttProperties pulumi.StringPtrInput
	// Extended Location
	ExtendedLocation ExtendedLocationPropertyInput
	// Name of MQ kafkaConnector resource
	KafkaConnectorName pulumi.StringInput
	// The kafkaConnector CRD it refers to.
	KafkaConnectorRef pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Name of MQ resource
	MqName pulumi.StringInput
	// The partition to use for Kafka.
	PartitionKeyProperty pulumi.StringPtrInput
	// The partition strategy to use for Kafka.
	PartitionStrategy pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The route details for Kafka connector.
	Routes KafkaRoutesArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Name of MQ kafka/topicMap resource
	TopicMapName pulumi.StringPtrInput
}

func (KafkaConnectorTopicMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorTopicMapArgs)(nil)).Elem()
}

type KafkaConnectorTopicMapInput interface {
	pulumi.Input

	ToKafkaConnectorTopicMapOutput() KafkaConnectorTopicMapOutput
	ToKafkaConnectorTopicMapOutputWithContext(ctx context.Context) KafkaConnectorTopicMapOutput
}

func (*KafkaConnectorTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectorTopicMap)(nil)).Elem()
}

func (i *KafkaConnectorTopicMap) ToKafkaConnectorTopicMapOutput() KafkaConnectorTopicMapOutput {
	return i.ToKafkaConnectorTopicMapOutputWithContext(context.Background())
}

func (i *KafkaConnectorTopicMap) ToKafkaConnectorTopicMapOutputWithContext(ctx context.Context) KafkaConnectorTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorTopicMapOutput)
}

type KafkaConnectorTopicMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectorTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectorTopicMap)(nil)).Elem()
}

func (o KafkaConnectorTopicMapOutput) ToKafkaConnectorTopicMapOutput() KafkaConnectorTopicMapOutput {
	return o
}

func (o KafkaConnectorTopicMapOutput) ToKafkaConnectorTopicMapOutputWithContext(ctx context.Context) KafkaConnectorTopicMapOutput {
	return o
}

// The batching settings for kafka messages.
func (o KafkaConnectorTopicMapOutput) Batching() KafkaTopicMapBatchingResponsePtrOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) KafkaTopicMapBatchingResponsePtrOutput { return v.Batching }).(KafkaTopicMapBatchingResponsePtrOutput)
}

// The compression to use for kafka messages.
func (o KafkaConnectorTopicMapOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringPtrOutput { return v.Compression }).(pulumi.StringPtrOutput)
}

// The flag to copy Mqtt properties.
func (o KafkaConnectorTopicMapOutput) CopyMqttProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringPtrOutput { return v.CopyMqttProperties }).(pulumi.StringPtrOutput)
}

// Extended Location
func (o KafkaConnectorTopicMapOutput) ExtendedLocation() ExtendedLocationPropertyResponseOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) ExtendedLocationPropertyResponseOutput { return v.ExtendedLocation }).(ExtendedLocationPropertyResponseOutput)
}

// The kafkaConnector CRD it refers to.
func (o KafkaConnectorTopicMapOutput) KafkaConnectorRef() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringOutput { return v.KafkaConnectorRef }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o KafkaConnectorTopicMapOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o KafkaConnectorTopicMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The partition to use for Kafka.
func (o KafkaConnectorTopicMapOutput) PartitionKeyProperty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringPtrOutput { return v.PartitionKeyProperty }).(pulumi.StringPtrOutput)
}

// The partition strategy to use for Kafka.
func (o KafkaConnectorTopicMapOutput) PartitionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringPtrOutput { return v.PartitionStrategy }).(pulumi.StringPtrOutput)
}

// The status of the last operation.
func (o KafkaConnectorTopicMapOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The route details for Kafka connector.
func (o KafkaConnectorTopicMapOutput) Routes() KafkaRoutesResponseArrayOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) KafkaRoutesResponseArrayOutput { return v.Routes }).(KafkaRoutesResponseArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o KafkaConnectorTopicMapOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o KafkaConnectorTopicMapOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o KafkaConnectorTopicMapOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectorTopicMap) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(KafkaConnectorTopicMapOutput{})
}
