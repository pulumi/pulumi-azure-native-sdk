// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200215

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The data format of the message. Optionally the data format can be added to each message.
type EventGridDataFormat string

const (
	EventGridDataFormatMULTIJSON  = EventGridDataFormat("MULTIJSON")
	EventGridDataFormatJSON       = EventGridDataFormat("JSON")
	EventGridDataFormatCSV        = EventGridDataFormat("CSV")
	EventGridDataFormatTSV        = EventGridDataFormat("TSV")
	EventGridDataFormatSCSV       = EventGridDataFormat("SCSV")
	EventGridDataFormatSOHSV      = EventGridDataFormat("SOHSV")
	EventGridDataFormatPSV        = EventGridDataFormat("PSV")
	EventGridDataFormatTXT        = EventGridDataFormat("TXT")
	EventGridDataFormatRAW        = EventGridDataFormat("RAW")
	EventGridDataFormatSINGLEJSON = EventGridDataFormat("SINGLEJSON")
	EventGridDataFormatAVRO       = EventGridDataFormat("AVRO")
	EventGridDataFormatTSVE       = EventGridDataFormat("TSVE")
	EventGridDataFormatPARQUET    = EventGridDataFormat("PARQUET")
	EventGridDataFormatORC        = EventGridDataFormat("ORC")
)

func (EventGridDataFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridDataFormat)(nil)).Elem()
}

func (e EventGridDataFormat) ToEventGridDataFormatOutput() EventGridDataFormatOutput {
	return pulumi.ToOutput(e).(EventGridDataFormatOutput)
}

func (e EventGridDataFormat) ToEventGridDataFormatOutputWithContext(ctx context.Context) EventGridDataFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventGridDataFormatOutput)
}

func (e EventGridDataFormat) ToEventGridDataFormatPtrOutput() EventGridDataFormatPtrOutput {
	return e.ToEventGridDataFormatPtrOutputWithContext(context.Background())
}

func (e EventGridDataFormat) ToEventGridDataFormatPtrOutputWithContext(ctx context.Context) EventGridDataFormatPtrOutput {
	return EventGridDataFormat(e).ToEventGridDataFormatOutputWithContext(ctx).ToEventGridDataFormatPtrOutputWithContext(ctx)
}

func (e EventGridDataFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventGridDataFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventGridDataFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventGridDataFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventGridDataFormatOutput struct{ *pulumi.OutputState }

func (EventGridDataFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridDataFormat)(nil)).Elem()
}

func (o EventGridDataFormatOutput) ToEventGridDataFormatOutput() EventGridDataFormatOutput {
	return o
}

func (o EventGridDataFormatOutput) ToEventGridDataFormatOutputWithContext(ctx context.Context) EventGridDataFormatOutput {
	return o
}

func (o EventGridDataFormatOutput) ToEventGridDataFormatPtrOutput() EventGridDataFormatPtrOutput {
	return o.ToEventGridDataFormatPtrOutputWithContext(context.Background())
}

func (o EventGridDataFormatOutput) ToEventGridDataFormatPtrOutputWithContext(ctx context.Context) EventGridDataFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventGridDataFormat) *EventGridDataFormat {
		return &v
	}).(EventGridDataFormatPtrOutput)
}

func (o EventGridDataFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventGridDataFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventGridDataFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventGridDataFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventGridDataFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventGridDataFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventGridDataFormatPtrOutput struct{ *pulumi.OutputState }

func (EventGridDataFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridDataFormat)(nil)).Elem()
}

func (o EventGridDataFormatPtrOutput) ToEventGridDataFormatPtrOutput() EventGridDataFormatPtrOutput {
	return o
}

func (o EventGridDataFormatPtrOutput) ToEventGridDataFormatPtrOutputWithContext(ctx context.Context) EventGridDataFormatPtrOutput {
	return o
}

func (o EventGridDataFormatPtrOutput) Elem() EventGridDataFormatOutput {
	return o.ApplyT(func(v *EventGridDataFormat) EventGridDataFormat {
		if v != nil {
			return *v
		}
		var ret EventGridDataFormat
		return ret
	}).(EventGridDataFormatOutput)
}

func (o EventGridDataFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventGridDataFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventGridDataFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventGridDataFormatInput is an input type that accepts values of the EventGridDataFormat enum
// A concrete instance of `EventGridDataFormatInput` can be one of the following:
//
//	EventGridDataFormatMULTIJSON
//	EventGridDataFormatJSON
//	EventGridDataFormatCSV
//	EventGridDataFormatTSV
//	EventGridDataFormatSCSV
//	EventGridDataFormatSOHSV
//	EventGridDataFormatPSV
//	EventGridDataFormatTXT
//	EventGridDataFormatRAW
//	EventGridDataFormatSINGLEJSON
//	EventGridDataFormatAVRO
//	EventGridDataFormatTSVE
//	EventGridDataFormatPARQUET
//	EventGridDataFormatORC
type EventGridDataFormatInput interface {
	pulumi.Input

	ToEventGridDataFormatOutput() EventGridDataFormatOutput
	ToEventGridDataFormatOutputWithContext(context.Context) EventGridDataFormatOutput
}

var eventGridDataFormatPtrType = reflect.TypeOf((**EventGridDataFormat)(nil)).Elem()

type EventGridDataFormatPtrInput interface {
	pulumi.Input

	ToEventGridDataFormatPtrOutput() EventGridDataFormatPtrOutput
	ToEventGridDataFormatPtrOutputWithContext(context.Context) EventGridDataFormatPtrOutput
}

type eventGridDataFormatPtr string

func EventGridDataFormatPtr(v string) EventGridDataFormatPtrInput {
	return (*eventGridDataFormatPtr)(&v)
}

func (*eventGridDataFormatPtr) ElementType() reflect.Type {
	return eventGridDataFormatPtrType
}

func (in *eventGridDataFormatPtr) ToEventGridDataFormatPtrOutput() EventGridDataFormatPtrOutput {
	return pulumi.ToOutput(in).(EventGridDataFormatPtrOutput)
}

func (in *eventGridDataFormatPtr) ToEventGridDataFormatPtrOutputWithContext(ctx context.Context) EventGridDataFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventGridDataFormatPtrOutput)
}

// Kind of the endpoint for the data connection
type Kind string

const (
	KindEventHub  = Kind("EventHub")
	KindEventGrid = Kind("EventGrid")
	KindIotHub    = Kind("IotHub")
)

func init() {
	pulumi.RegisterOutputType(EventGridDataFormatOutput{})
	pulumi.RegisterOutputType(EventGridDataFormatPtrOutput{})
}
