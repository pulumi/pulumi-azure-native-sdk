// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180907preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The data format of the message. Optionally the data format can be added to each message.
type DataFormat string

const (
	DataFormatMULTIJSON = DataFormat("MULTIJSON")
	DataFormatJSON      = DataFormat("JSON")
	DataFormatCSV       = DataFormat("CSV")
)

func (DataFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFormat)(nil)).Elem()
}

func (e DataFormat) ToDataFormatOutput() DataFormatOutput {
	return pulumi.ToOutput(e).(DataFormatOutput)
}

func (e DataFormat) ToDataFormatOutputWithContext(ctx context.Context) DataFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataFormatOutput)
}

func (e DataFormat) ToDataFormatPtrOutput() DataFormatPtrOutput {
	return e.ToDataFormatPtrOutputWithContext(context.Background())
}

func (e DataFormat) ToDataFormatPtrOutputWithContext(ctx context.Context) DataFormatPtrOutput {
	return DataFormat(e).ToDataFormatOutputWithContext(ctx).ToDataFormatPtrOutputWithContext(ctx)
}

func (e DataFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataFormatOutput struct{ *pulumi.OutputState }

func (DataFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFormat)(nil)).Elem()
}

func (o DataFormatOutput) ToDataFormatOutput() DataFormatOutput {
	return o
}

func (o DataFormatOutput) ToDataFormatOutputWithContext(ctx context.Context) DataFormatOutput {
	return o
}

func (o DataFormatOutput) ToDataFormatPtrOutput() DataFormatPtrOutput {
	return o.ToDataFormatPtrOutputWithContext(context.Background())
}

func (o DataFormatOutput) ToDataFormatPtrOutputWithContext(ctx context.Context) DataFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataFormat) *DataFormat {
		return &v
	}).(DataFormatPtrOutput)
}

func (o DataFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataFormatPtrOutput struct{ *pulumi.OutputState }

func (DataFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFormat)(nil)).Elem()
}

func (o DataFormatPtrOutput) ToDataFormatPtrOutput() DataFormatPtrOutput {
	return o
}

func (o DataFormatPtrOutput) ToDataFormatPtrOutputWithContext(ctx context.Context) DataFormatPtrOutput {
	return o
}

func (o DataFormatPtrOutput) Elem() DataFormatOutput {
	return o.ApplyT(func(v *DataFormat) DataFormat {
		if v != nil {
			return *v
		}
		var ret DataFormat
		return ret
	}).(DataFormatOutput)
}

func (o DataFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataFormatInput is an input type that accepts values of the DataFormat enum
// A concrete instance of `DataFormatInput` can be one of the following:
//
//	DataFormatMULTIJSON
//	DataFormatJSON
//	DataFormatCSV
type DataFormatInput interface {
	pulumi.Input

	ToDataFormatOutput() DataFormatOutput
	ToDataFormatOutputWithContext(context.Context) DataFormatOutput
}

var dataFormatPtrType = reflect.TypeOf((**DataFormat)(nil)).Elem()

type DataFormatPtrInput interface {
	pulumi.Input

	ToDataFormatPtrOutput() DataFormatPtrOutput
	ToDataFormatPtrOutputWithContext(context.Context) DataFormatPtrOutput
}

type dataFormatPtr string

func DataFormatPtr(v string) DataFormatPtrInput {
	return (*dataFormatPtr)(&v)
}

func (*dataFormatPtr) ElementType() reflect.Type {
	return dataFormatPtrType
}

func (in *dataFormatPtr) ToDataFormatPtrOutput() DataFormatPtrOutput {
	return pulumi.ToOutput(in).(DataFormatPtrOutput)
}

func (in *dataFormatPtr) ToDataFormatPtrOutputWithContext(ctx context.Context) DataFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataFormatPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DataFormatOutput{})
	pulumi.RegisterOutputType(DataFormatPtrOutput{})
}
