// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200918

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A class representing database principal entity.
type DatabasePrincipalResponse struct {
	// Application id - relevant only for application principal type.
	AppId *string `pulumi:"appId"`
	// Database principal email if exists.
	Email *string `pulumi:"email"`
	// Database principal fully qualified name.
	Fqn *string `pulumi:"fqn"`
	// Database principal name.
	Name string `pulumi:"name"`
	// Database principal role.
	Role string `pulumi:"role"`
	// The tenant name of the principal
	TenantName string `pulumi:"tenantName"`
	// Database principal type.
	Type string `pulumi:"type"`
}

// A class representing database principal entity.
type DatabasePrincipalResponseOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrincipalResponse)(nil)).Elem()
}

func (o DatabasePrincipalResponseOutput) ToDatabasePrincipalResponseOutput() DatabasePrincipalResponseOutput {
	return o
}

func (o DatabasePrincipalResponseOutput) ToDatabasePrincipalResponseOutputWithContext(ctx context.Context) DatabasePrincipalResponseOutput {
	return o
}

// Application id - relevant only for application principal type.
func (o DatabasePrincipalResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePrincipalResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Database principal email if exists.
func (o DatabasePrincipalResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePrincipalResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Database principal fully qualified name.
func (o DatabasePrincipalResponseOutput) Fqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePrincipalResponse) *string { return v.Fqn }).(pulumi.StringPtrOutput)
}

// Database principal name.
func (o DatabasePrincipalResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasePrincipalResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Database principal role.
func (o DatabasePrincipalResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasePrincipalResponse) string { return v.Role }).(pulumi.StringOutput)
}

// The tenant name of the principal
func (o DatabasePrincipalResponseOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasePrincipalResponse) string { return v.TenantName }).(pulumi.StringOutput)
}

// Database principal type.
func (o DatabasePrincipalResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasePrincipalResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DatabasePrincipalResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePrincipalResponse)(nil)).Elem()
}

func (o DatabasePrincipalResponseArrayOutput) ToDatabasePrincipalResponseArrayOutput() DatabasePrincipalResponseArrayOutput {
	return o
}

func (o DatabasePrincipalResponseArrayOutput) ToDatabasePrincipalResponseArrayOutputWithContext(ctx context.Context) DatabasePrincipalResponseArrayOutput {
	return o
}

func (o DatabasePrincipalResponseArrayOutput) Index(i pulumi.IntInput) DatabasePrincipalResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasePrincipalResponse {
		return vs[0].([]DatabasePrincipalResponse)[vs[1].(int)]
	}).(DatabasePrincipalResponseOutput)
}

// A class that contains database statistics information.
type DatabaseStatisticsResponse struct {
	// The database size - the total size of compressed data and index in bytes.
	Size *float64 `pulumi:"size"`
}

// A class that contains database statistics information.
type DatabaseStatisticsResponseOutput struct{ *pulumi.OutputState }

func (DatabaseStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseStatisticsResponse)(nil)).Elem()
}

func (o DatabaseStatisticsResponseOutput) ToDatabaseStatisticsResponseOutput() DatabaseStatisticsResponseOutput {
	return o
}

func (o DatabaseStatisticsResponseOutput) ToDatabaseStatisticsResponseOutputWithContext(ctx context.Context) DatabaseStatisticsResponseOutput {
	return o
}

// The database size - the total size of compressed data and index in bytes.
func (o DatabaseStatisticsResponseOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseStatisticsResponse) *float64 { return v.Size }).(pulumi.Float64PtrOutput)
}

// A class representing follower database request.
type FollowerDatabaseDefinitionResponse struct {
	// Resource name of the attached database configuration in the follower cluster.
	AttachedDatabaseConfigurationName string `pulumi:"attachedDatabaseConfigurationName"`
	// Resource id of the cluster that follows a database owned by this cluster.
	ClusterResourceId string `pulumi:"clusterResourceId"`
	// The database name owned by this cluster that was followed. * in case following all databases.
	DatabaseName string `pulumi:"databaseName"`
}

// A class representing follower database request.
type FollowerDatabaseDefinitionResponseOutput struct{ *pulumi.OutputState }

func (FollowerDatabaseDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FollowerDatabaseDefinitionResponse)(nil)).Elem()
}

func (o FollowerDatabaseDefinitionResponseOutput) ToFollowerDatabaseDefinitionResponseOutput() FollowerDatabaseDefinitionResponseOutput {
	return o
}

func (o FollowerDatabaseDefinitionResponseOutput) ToFollowerDatabaseDefinitionResponseOutputWithContext(ctx context.Context) FollowerDatabaseDefinitionResponseOutput {
	return o
}

// Resource name of the attached database configuration in the follower cluster.
func (o FollowerDatabaseDefinitionResponseOutput) AttachedDatabaseConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v FollowerDatabaseDefinitionResponse) string { return v.AttachedDatabaseConfigurationName }).(pulumi.StringOutput)
}

// Resource id of the cluster that follows a database owned by this cluster.
func (o FollowerDatabaseDefinitionResponseOutput) ClusterResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v FollowerDatabaseDefinitionResponse) string { return v.ClusterResourceId }).(pulumi.StringOutput)
}

// The database name owned by this cluster that was followed. * in case following all databases.
func (o FollowerDatabaseDefinitionResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v FollowerDatabaseDefinitionResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

type FollowerDatabaseDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (FollowerDatabaseDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FollowerDatabaseDefinitionResponse)(nil)).Elem()
}

func (o FollowerDatabaseDefinitionResponseArrayOutput) ToFollowerDatabaseDefinitionResponseArrayOutput() FollowerDatabaseDefinitionResponseArrayOutput {
	return o
}

func (o FollowerDatabaseDefinitionResponseArrayOutput) ToFollowerDatabaseDefinitionResponseArrayOutputWithContext(ctx context.Context) FollowerDatabaseDefinitionResponseArrayOutput {
	return o
}

func (o FollowerDatabaseDefinitionResponseArrayOutput) Index(i pulumi.IntInput) FollowerDatabaseDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FollowerDatabaseDefinitionResponse {
		return vs[0].([]FollowerDatabaseDefinitionResponse)[vs[1].(int)]
	}).(FollowerDatabaseDefinitionResponseOutput)
}

// The language extension object.
type LanguageExtensionResponse struct {
	// The language extension name.
	LanguageExtensionName *string `pulumi:"languageExtensionName"`
}

// The language extension object.
type LanguageExtensionResponseOutput struct{ *pulumi.OutputState }

func (LanguageExtensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageExtensionResponse)(nil)).Elem()
}

func (o LanguageExtensionResponseOutput) ToLanguageExtensionResponseOutput() LanguageExtensionResponseOutput {
	return o
}

func (o LanguageExtensionResponseOutput) ToLanguageExtensionResponseOutputWithContext(ctx context.Context) LanguageExtensionResponseOutput {
	return o
}

// The language extension name.
func (o LanguageExtensionResponseOutput) LanguageExtensionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LanguageExtensionResponse) *string { return v.LanguageExtensionName }).(pulumi.StringPtrOutput)
}

type LanguageExtensionResponseArrayOutput struct{ *pulumi.OutputState }

func (LanguageExtensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LanguageExtensionResponse)(nil)).Elem()
}

func (o LanguageExtensionResponseArrayOutput) ToLanguageExtensionResponseArrayOutput() LanguageExtensionResponseArrayOutput {
	return o
}

func (o LanguageExtensionResponseArrayOutput) ToLanguageExtensionResponseArrayOutputWithContext(ctx context.Context) LanguageExtensionResponseArrayOutput {
	return o
}

func (o LanguageExtensionResponseArrayOutput) Index(i pulumi.IntInput) LanguageExtensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LanguageExtensionResponse {
		return vs[0].([]LanguageExtensionResponse)[vs[1].(int)]
	}).(LanguageExtensionResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabasePrincipalResponseOutput{})
	pulumi.RegisterOutputType(DatabasePrincipalResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseStatisticsResponseOutput{})
	pulumi.RegisterOutputType(FollowerDatabaseDefinitionResponseOutput{})
	pulumi.RegisterOutputType(FollowerDatabaseDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(LanguageExtensionResponseOutput{})
	pulumi.RegisterOutputType(LanguageExtensionResponseArrayOutput{})
}
