// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a database.
func GetReadWriteDatabase(ctx *pulumi.Context, args *GetReadWriteDatabaseArgs, opts ...pulumi.InvokeOption) (*GetReadWriteDatabaseResult, error) {
	var rv GetReadWriteDatabaseResult
	err := ctx.Invoke("azure-native:kusto/v20210101:getReadWriteDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetReadWriteDatabaseArgs struct {
	// The name of the Kusto cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the database in the Kusto cluster.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Class representing a read write database.
type GetReadWriteDatabaseResult struct {
	// The time the data should be kept in cache for fast queries in TimeSpan.
	HotCachePeriod *string `pulumi:"hotCachePeriod"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Indicates whether the database is followed.
	IsFollowed bool `pulumi:"isFollowed"`
	// Kind of the database
	// Expected value is 'ReadWrite'.
	Kind string `pulumi:"kind"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioned state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The time the data should be kept before it stops being accessible to queries in TimeSpan.
	SoftDeletePeriod *string `pulumi:"softDeletePeriod"`
	// The statistics of the database.
	Statistics DatabaseStatisticsResponse `pulumi:"statistics"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func GetReadWriteDatabaseOutput(ctx *pulumi.Context, args GetReadWriteDatabaseOutputArgs, opts ...pulumi.InvokeOption) GetReadWriteDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReadWriteDatabaseResult, error) {
			args := v.(GetReadWriteDatabaseArgs)
			r, err := GetReadWriteDatabase(ctx, &args, opts...)
			var s GetReadWriteDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetReadWriteDatabaseResultOutput)
}

type GetReadWriteDatabaseOutputArgs struct {
	// The name of the Kusto cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the database in the Kusto cluster.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetReadWriteDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReadWriteDatabaseArgs)(nil)).Elem()
}

// Class representing a read write database.
type GetReadWriteDatabaseResultOutput struct{ *pulumi.OutputState }

func (GetReadWriteDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReadWriteDatabaseResult)(nil)).Elem()
}

func (o GetReadWriteDatabaseResultOutput) ToGetReadWriteDatabaseResultOutput() GetReadWriteDatabaseResultOutput {
	return o
}

func (o GetReadWriteDatabaseResultOutput) ToGetReadWriteDatabaseResultOutputWithContext(ctx context.Context) GetReadWriteDatabaseResultOutput {
	return o
}

// The time the data should be kept in cache for fast queries in TimeSpan.
func (o GetReadWriteDatabaseResultOutput) HotCachePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) *string { return v.HotCachePeriod }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o GetReadWriteDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the database is followed.
func (o GetReadWriteDatabaseResultOutput) IsFollowed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) bool { return v.IsFollowed }).(pulumi.BoolOutput)
}

// Kind of the database
// Expected value is 'ReadWrite'.
func (o GetReadWriteDatabaseResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Resource location.
func (o GetReadWriteDatabaseResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o GetReadWriteDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioned state of the resource.
func (o GetReadWriteDatabaseResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The time the data should be kept before it stops being accessible to queries in TimeSpan.
func (o GetReadWriteDatabaseResultOutput) SoftDeletePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) *string { return v.SoftDeletePeriod }).(pulumi.StringPtrOutput)
}

// The statistics of the database.
func (o GetReadWriteDatabaseResultOutput) Statistics() DatabaseStatisticsResponseOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) DatabaseStatisticsResponse { return v.Statistics }).(DatabaseStatisticsResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o GetReadWriteDatabaseResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetReadWriteDatabaseResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReadWriteDatabaseResultOutput{})
}
