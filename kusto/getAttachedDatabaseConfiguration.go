// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kusto

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns an attached database configuration.
//
// Uses Azure REST API version 2024-04-13.
//
// Other available API versions: 2019-09-07, 2019-11-09, 2020-02-15, 2020-06-14, 2020-09-18, 2021-01-01, 2021-08-27, 2022-02-01, 2022-07-07, 2022-11-11, 2022-12-29, 2023-05-02, 2023-08-15. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native kusto [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupAttachedDatabaseConfiguration(ctx *pulumi.Context, args *LookupAttachedDatabaseConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupAttachedDatabaseConfigurationResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupAttachedDatabaseConfigurationResult
	err := ctx.Invoke("azure-native:kusto:getAttachedDatabaseConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAttachedDatabaseConfigurationArgs struct {
	// The name of the attached database configuration.
	AttachedDatabaseConfigurationName string `pulumi:"attachedDatabaseConfigurationName"`
	// The name of the Kusto cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Class representing an attached database configuration.
type LookupAttachedDatabaseConfigurationResult struct {
	// The list of databases from the clusterResourceId which are currently attached to the cluster.
	AttachedDatabaseNames []string `pulumi:"attachedDatabaseNames"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// The resource id of the cluster where the databases you would like to attach reside.
	ClusterResourceId string `pulumi:"clusterResourceId"`
	// The name of the database which you would like to attach, use * if you want to follow all current and future databases.
	DatabaseName string `pulumi:"databaseName"`
	// Overrides the original database name. Relevant only when attaching to a specific database.
	DatabaseNameOverride *string `pulumi:"databaseNameOverride"`
	// Adds a prefix to the attached databases name. When following an entire cluster, that prefix would be added to all of the databases original names from leader cluster.
	DatabaseNamePrefix *string `pulumi:"databaseNamePrefix"`
	// The default principals modification kind
	DefaultPrincipalsModificationKind string `pulumi:"defaultPrincipalsModificationKind"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioned state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Table level sharing specifications
	TableLevelSharingProperties *TableLevelSharingPropertiesResponse `pulumi:"tableLevelSharingProperties"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupAttachedDatabaseConfigurationOutput(ctx *pulumi.Context, args LookupAttachedDatabaseConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupAttachedDatabaseConfigurationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAttachedDatabaseConfigurationResultOutput, error) {
			args := v.(LookupAttachedDatabaseConfigurationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:kusto:getAttachedDatabaseConfiguration", args, LookupAttachedDatabaseConfigurationResultOutput{}, options).(LookupAttachedDatabaseConfigurationResultOutput), nil
		}).(LookupAttachedDatabaseConfigurationResultOutput)
}

type LookupAttachedDatabaseConfigurationOutputArgs struct {
	// The name of the attached database configuration.
	AttachedDatabaseConfigurationName pulumi.StringInput `pulumi:"attachedDatabaseConfigurationName"`
	// The name of the Kusto cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAttachedDatabaseConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAttachedDatabaseConfigurationArgs)(nil)).Elem()
}

// Class representing an attached database configuration.
type LookupAttachedDatabaseConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupAttachedDatabaseConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAttachedDatabaseConfigurationResult)(nil)).Elem()
}

func (o LookupAttachedDatabaseConfigurationResultOutput) ToLookupAttachedDatabaseConfigurationResultOutput() LookupAttachedDatabaseConfigurationResultOutput {
	return o
}

func (o LookupAttachedDatabaseConfigurationResultOutput) ToLookupAttachedDatabaseConfigurationResultOutputWithContext(ctx context.Context) LookupAttachedDatabaseConfigurationResultOutput {
	return o
}

// The list of databases from the clusterResourceId which are currently attached to the cluster.
func (o LookupAttachedDatabaseConfigurationResultOutput) AttachedDatabaseNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) []string { return v.AttachedDatabaseNames }).(pulumi.StringArrayOutput)
}

// The Azure API version of the resource.
func (o LookupAttachedDatabaseConfigurationResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The resource id of the cluster where the databases you would like to attach reside.
func (o LookupAttachedDatabaseConfigurationResultOutput) ClusterResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.ClusterResourceId }).(pulumi.StringOutput)
}

// The name of the database which you would like to attach, use * if you want to follow all current and future databases.
func (o LookupAttachedDatabaseConfigurationResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Overrides the original database name. Relevant only when attaching to a specific database.
func (o LookupAttachedDatabaseConfigurationResultOutput) DatabaseNameOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) *string { return v.DatabaseNameOverride }).(pulumi.StringPtrOutput)
}

// Adds a prefix to the attached databases name. When following an entire cluster, that prefix would be added to all of the databases original names from leader cluster.
func (o LookupAttachedDatabaseConfigurationResultOutput) DatabaseNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) *string { return v.DatabaseNamePrefix }).(pulumi.StringPtrOutput)
}

// The default principals modification kind
func (o LookupAttachedDatabaseConfigurationResultOutput) DefaultPrincipalsModificationKind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.DefaultPrincipalsModificationKind }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupAttachedDatabaseConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource location.
func (o LookupAttachedDatabaseConfigurationResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupAttachedDatabaseConfigurationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioned state of the resource.
func (o LookupAttachedDatabaseConfigurationResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Table level sharing specifications
func (o LookupAttachedDatabaseConfigurationResultOutput) TableLevelSharingProperties() TableLevelSharingPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) *TableLevelSharingPropertiesResponse {
		return v.TableLevelSharingProperties
	}).(TableLevelSharingPropertiesResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupAttachedDatabaseConfigurationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAttachedDatabaseConfigurationResultOutput{})
}
