// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource representation of a workflow
//
// Uses Azure REST API version 2023-08-01. In version 2.x of the Azure Native provider, it used API version 2022-10-11-preview.
//
// Other available API versions: 2022-10-11-preview, 2024-05-01-preview, 2024-08-01-preview, 2025-03-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native devhub [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type Workflow struct {
	pulumi.CustomResourceState

	// The name of the app.
	AppName pulumi.StringPtrOutput `pulumi:"appName"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The version of the language image used for building the code in the generated dockerfile.
	BuilderVersion pulumi.StringPtrOutput `pulumi:"builderVersion"`
	// The mode of generation to be used for generating Dockerfiles.
	DockerfileGenerationMode pulumi.StringPtrOutput `pulumi:"dockerfileGenerationMode"`
	// The directory to output the generated Dockerfile to.
	DockerfileOutputDirectory pulumi.StringPtrOutput `pulumi:"dockerfileOutputDirectory"`
	// The programming language used.
	GenerationLanguage pulumi.StringPtrOutput `pulumi:"generationLanguage"`
	// Profile of a github workflow.
	GithubWorkflowProfile GitHubWorkflowProfileResponsePtrOutput `pulumi:"githubWorkflowProfile"`
	// The name of the image to be generated.
	ImageName pulumi.StringPtrOutput `pulumi:"imageName"`
	// The tag to apply to the generated image.
	ImageTag pulumi.StringPtrOutput `pulumi:"imageTag"`
	// The version of the language image used for execution in the generated dockerfile.
	LanguageVersion pulumi.StringPtrOutput `pulumi:"languageVersion"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The mode of generation to be used for generating Manifest.
	ManifestGenerationMode pulumi.StringPtrOutput `pulumi:"manifestGenerationMode"`
	// The directory to output the generated manifests to.
	ManifestOutputDirectory pulumi.StringPtrOutput `pulumi:"manifestOutputDirectory"`
	// Determines the type of manifests to be generated.
	ManifestType pulumi.StringPtrOutput `pulumi:"manifestType"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace to deploy the application to.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The port the application is exposed on.
	Port pulumi.StringPtrOutput `pulumi:"port"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:devhub/v20220401preview:Workflow"),
		},
		{
			Type: pulumi.String("azure-native:devhub/v20221011preview:Workflow"),
		},
		{
			Type: pulumi.String("azure-native:devhub/v20230801:Workflow"),
		},
		{
			Type: pulumi.String("azure-native:devhub/v20240501preview:Workflow"),
		},
		{
			Type: pulumi.String("azure-native:devhub/v20240801preview:Workflow"),
		},
		{
			Type: pulumi.String("azure-native:devhub/v20250301preview:Workflow"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("azure-native:devhub:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("azure-native:devhub:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
}

type WorkflowState struct {
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	// The name of the app.
	AppName *string `pulumi:"appName"`
	// The version of the language image used for building the code in the generated dockerfile.
	BuilderVersion *string `pulumi:"builderVersion"`
	// The mode of generation to be used for generating Dockerfiles.
	DockerfileGenerationMode *string `pulumi:"dockerfileGenerationMode"`
	// The directory to output the generated Dockerfile to.
	DockerfileOutputDirectory *string `pulumi:"dockerfileOutputDirectory"`
	// The programming language used.
	GenerationLanguage *string `pulumi:"generationLanguage"`
	// Profile of a github workflow.
	GithubWorkflowProfile *GitHubWorkflowProfile `pulumi:"githubWorkflowProfile"`
	// The name of the image to be generated.
	ImageName *string `pulumi:"imageName"`
	// The tag to apply to the generated image.
	ImageTag *string `pulumi:"imageTag"`
	// The version of the language image used for execution in the generated dockerfile.
	LanguageVersion *string `pulumi:"languageVersion"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The mode of generation to be used for generating Manifest.
	ManifestGenerationMode *string `pulumi:"manifestGenerationMode"`
	// The directory to output the generated manifests to.
	ManifestOutputDirectory *string `pulumi:"manifestOutputDirectory"`
	// Determines the type of manifests to be generated.
	ManifestType *string `pulumi:"manifestType"`
	// The namespace to deploy the application to.
	Namespace *string `pulumi:"namespace"`
	// The port the application is exposed on.
	Port *string `pulumi:"port"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the workflow resource.
	WorkflowName *string `pulumi:"workflowName"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// The name of the app.
	AppName pulumi.StringPtrInput
	// The version of the language image used for building the code in the generated dockerfile.
	BuilderVersion pulumi.StringPtrInput
	// The mode of generation to be used for generating Dockerfiles.
	DockerfileGenerationMode pulumi.StringPtrInput
	// The directory to output the generated Dockerfile to.
	DockerfileOutputDirectory pulumi.StringPtrInput
	// The programming language used.
	GenerationLanguage pulumi.StringPtrInput
	// Profile of a github workflow.
	GithubWorkflowProfile GitHubWorkflowProfilePtrInput
	// The name of the image to be generated.
	ImageName pulumi.StringPtrInput
	// The tag to apply to the generated image.
	ImageTag pulumi.StringPtrInput
	// The version of the language image used for execution in the generated dockerfile.
	LanguageVersion pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The mode of generation to be used for generating Manifest.
	ManifestGenerationMode pulumi.StringPtrInput
	// The directory to output the generated manifests to.
	ManifestOutputDirectory pulumi.StringPtrInput
	// Determines the type of manifests to be generated.
	ManifestType pulumi.StringPtrInput
	// The namespace to deploy the application to.
	Namespace pulumi.StringPtrInput
	// The port the application is exposed on.
	Port pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the workflow resource.
	WorkflowName pulumi.StringPtrInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

// The name of the app.
func (o WorkflowOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.AppName }).(pulumi.StringPtrOutput)
}

// The Azure API version of the resource.
func (o WorkflowOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The version of the language image used for building the code in the generated dockerfile.
func (o WorkflowOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Dockerfiles.
func (o WorkflowOutput) DockerfileGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.DockerfileGenerationMode }).(pulumi.StringPtrOutput)
}

// The directory to output the generated Dockerfile to.
func (o WorkflowOutput) DockerfileOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.DockerfileOutputDirectory }).(pulumi.StringPtrOutput)
}

// The programming language used.
func (o WorkflowOutput) GenerationLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.GenerationLanguage }).(pulumi.StringPtrOutput)
}

// Profile of a github workflow.
func (o WorkflowOutput) GithubWorkflowProfile() GitHubWorkflowProfileResponsePtrOutput {
	return o.ApplyT(func(v *Workflow) GitHubWorkflowProfileResponsePtrOutput { return v.GithubWorkflowProfile }).(GitHubWorkflowProfileResponsePtrOutput)
}

// The name of the image to be generated.
func (o WorkflowOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ImageName }).(pulumi.StringPtrOutput)
}

// The tag to apply to the generated image.
func (o WorkflowOutput) ImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ImageTag }).(pulumi.StringPtrOutput)
}

// The version of the language image used for execution in the generated dockerfile.
func (o WorkflowOutput) LanguageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.LanguageVersion }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o WorkflowOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The mode of generation to be used for generating Manifest.
func (o WorkflowOutput) ManifestGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ManifestGenerationMode }).(pulumi.StringPtrOutput)
}

// The directory to output the generated manifests to.
func (o WorkflowOutput) ManifestOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ManifestOutputDirectory }).(pulumi.StringPtrOutput)
}

// Determines the type of manifests to be generated.
func (o WorkflowOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ManifestType }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o WorkflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace to deploy the application to.
func (o WorkflowOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The port the application is exposed on.
func (o WorkflowOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Port }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o WorkflowOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Workflow) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o WorkflowOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkflowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkflowOutput{})
}
