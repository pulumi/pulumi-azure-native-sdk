// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Information on the azure container registry
type ACR struct {
	// ACR registry
	AcrRegistryName *string `pulumi:"acrRegistryName"`
	// ACR repository
	AcrRepositoryName *string `pulumi:"acrRepositoryName"`
	// ACR resource group
	AcrResourceGroup *string `pulumi:"acrResourceGroup"`
	// ACR subscription id
	AcrSubscriptionId *string `pulumi:"acrSubscriptionId"`
}

// ACRInput is an input type that accepts ACRArgs and ACROutput values.
// You can construct a concrete instance of `ACRInput` via:
//
//	ACRArgs{...}
type ACRInput interface {
	pulumi.Input

	ToACROutput() ACROutput
	ToACROutputWithContext(context.Context) ACROutput
}

// Information on the azure container registry
type ACRArgs struct {
	// ACR registry
	AcrRegistryName pulumi.StringPtrInput `pulumi:"acrRegistryName"`
	// ACR repository
	AcrRepositoryName pulumi.StringPtrInput `pulumi:"acrRepositoryName"`
	// ACR resource group
	AcrResourceGroup pulumi.StringPtrInput `pulumi:"acrResourceGroup"`
	// ACR subscription id
	AcrSubscriptionId pulumi.StringPtrInput `pulumi:"acrSubscriptionId"`
}

func (ACRArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACR)(nil)).Elem()
}

func (i ACRArgs) ToACROutput() ACROutput {
	return i.ToACROutputWithContext(context.Background())
}

func (i ACRArgs) ToACROutputWithContext(ctx context.Context) ACROutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACROutput)
}

func (i ACRArgs) ToACRPtrOutput() ACRPtrOutput {
	return i.ToACRPtrOutputWithContext(context.Background())
}

func (i ACRArgs) ToACRPtrOutputWithContext(ctx context.Context) ACRPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACROutput).ToACRPtrOutputWithContext(ctx)
}

// ACRPtrInput is an input type that accepts ACRArgs, ACRPtr and ACRPtrOutput values.
// You can construct a concrete instance of `ACRPtrInput` via:
//
//	        ACRArgs{...}
//
//	or:
//
//	        nil
type ACRPtrInput interface {
	pulumi.Input

	ToACRPtrOutput() ACRPtrOutput
	ToACRPtrOutputWithContext(context.Context) ACRPtrOutput
}

type acrPtrType ACRArgs

func ACRPtr(v *ACRArgs) ACRPtrInput {
	return (*acrPtrType)(v)
}

func (*acrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACR)(nil)).Elem()
}

func (i *acrPtrType) ToACRPtrOutput() ACRPtrOutput {
	return i.ToACRPtrOutputWithContext(context.Background())
}

func (i *acrPtrType) ToACRPtrOutputWithContext(ctx context.Context) ACRPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRPtrOutput)
}

// Information on the azure container registry
type ACROutput struct{ *pulumi.OutputState }

func (ACROutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACR)(nil)).Elem()
}

func (o ACROutput) ToACROutput() ACROutput {
	return o
}

func (o ACROutput) ToACROutputWithContext(ctx context.Context) ACROutput {
	return o
}

func (o ACROutput) ToACRPtrOutput() ACRPtrOutput {
	return o.ToACRPtrOutputWithContext(context.Background())
}

func (o ACROutput) ToACRPtrOutputWithContext(ctx context.Context) ACRPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACR) *ACR {
		return &v
	}).(ACRPtrOutput)
}

// ACR registry
func (o ACROutput) AcrRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACR) *string { return v.AcrRegistryName }).(pulumi.StringPtrOutput)
}

// ACR repository
func (o ACROutput) AcrRepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACR) *string { return v.AcrRepositoryName }).(pulumi.StringPtrOutput)
}

// ACR resource group
func (o ACROutput) AcrResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACR) *string { return v.AcrResourceGroup }).(pulumi.StringPtrOutput)
}

// ACR subscription id
func (o ACROutput) AcrSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACR) *string { return v.AcrSubscriptionId }).(pulumi.StringPtrOutput)
}

type ACRPtrOutput struct{ *pulumi.OutputState }

func (ACRPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACR)(nil)).Elem()
}

func (o ACRPtrOutput) ToACRPtrOutput() ACRPtrOutput {
	return o
}

func (o ACRPtrOutput) ToACRPtrOutputWithContext(ctx context.Context) ACRPtrOutput {
	return o
}

func (o ACRPtrOutput) Elem() ACROutput {
	return o.ApplyT(func(v *ACR) ACR {
		if v != nil {
			return *v
		}
		var ret ACR
		return ret
	}).(ACROutput)
}

// ACR registry
func (o ACRPtrOutput) AcrRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACR) *string {
		if v == nil {
			return nil
		}
		return v.AcrRegistryName
	}).(pulumi.StringPtrOutput)
}

// ACR repository
func (o ACRPtrOutput) AcrRepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACR) *string {
		if v == nil {
			return nil
		}
		return v.AcrRepositoryName
	}).(pulumi.StringPtrOutput)
}

// ACR resource group
func (o ACRPtrOutput) AcrResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACR) *string {
		if v == nil {
			return nil
		}
		return v.AcrResourceGroup
	}).(pulumi.StringPtrOutput)
}

// ACR subscription id
func (o ACRPtrOutput) AcrSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACR) *string {
		if v == nil {
			return nil
		}
		return v.AcrSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Information on the azure container registry
type ACRResponse struct {
	// ACR registry
	AcrRegistryName *string `pulumi:"acrRegistryName"`
	// ACR repository
	AcrRepositoryName *string `pulumi:"acrRepositoryName"`
	// ACR resource group
	AcrResourceGroup *string `pulumi:"acrResourceGroup"`
	// ACR subscription id
	AcrSubscriptionId *string `pulumi:"acrSubscriptionId"`
}

// Information on the azure container registry
type ACRResponseOutput struct{ *pulumi.OutputState }

func (ACRResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRResponse)(nil)).Elem()
}

func (o ACRResponseOutput) ToACRResponseOutput() ACRResponseOutput {
	return o
}

func (o ACRResponseOutput) ToACRResponseOutputWithContext(ctx context.Context) ACRResponseOutput {
	return o
}

// ACR registry
func (o ACRResponseOutput) AcrRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRResponse) *string { return v.AcrRegistryName }).(pulumi.StringPtrOutput)
}

// ACR repository
func (o ACRResponseOutput) AcrRepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRResponse) *string { return v.AcrRepositoryName }).(pulumi.StringPtrOutput)
}

// ACR resource group
func (o ACRResponseOutput) AcrResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRResponse) *string { return v.AcrResourceGroup }).(pulumi.StringPtrOutput)
}

// ACR subscription id
func (o ACRResponseOutput) AcrSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRResponse) *string { return v.AcrSubscriptionId }).(pulumi.StringPtrOutput)
}

type ACRResponsePtrOutput struct{ *pulumi.OutputState }

func (ACRResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRResponse)(nil)).Elem()
}

func (o ACRResponsePtrOutput) ToACRResponsePtrOutput() ACRResponsePtrOutput {
	return o
}

func (o ACRResponsePtrOutput) ToACRResponsePtrOutputWithContext(ctx context.Context) ACRResponsePtrOutput {
	return o
}

func (o ACRResponsePtrOutput) Elem() ACRResponseOutput {
	return o.ApplyT(func(v *ACRResponse) ACRResponse {
		if v != nil {
			return *v
		}
		var ret ACRResponse
		return ret
	}).(ACRResponseOutput)
}

// ACR registry
func (o ACRResponsePtrOutput) AcrRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrRegistryName
	}).(pulumi.StringPtrOutput)
}

// ACR repository
func (o ACRResponsePtrOutput) AcrRepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrRepositoryName
	}).(pulumi.StringPtrOutput)
}

// ACR resource group
func (o ACRResponsePtrOutput) AcrResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrResourceGroup
	}).(pulumi.StringPtrOutput)
}

// ACR subscription id
func (o ACRResponsePtrOutput) AcrSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Details of the GitHub repository associated with the workflow.
type ADOProviderProfile struct {
	// The name of the ARM Service Connection the pipeline is associated with.
	ArmServiceConnection *string `pulumi:"armServiceConnection"`
	// Details of the ADO repository associated with the workflow.
	Repository *ADORepository `pulumi:"repository"`
}

// ADOProviderProfileInput is an input type that accepts ADOProviderProfileArgs and ADOProviderProfileOutput values.
// You can construct a concrete instance of `ADOProviderProfileInput` via:
//
//	ADOProviderProfileArgs{...}
type ADOProviderProfileInput interface {
	pulumi.Input

	ToADOProviderProfileOutput() ADOProviderProfileOutput
	ToADOProviderProfileOutputWithContext(context.Context) ADOProviderProfileOutput
}

// Details of the GitHub repository associated with the workflow.
type ADOProviderProfileArgs struct {
	// The name of the ARM Service Connection the pipeline is associated with.
	ArmServiceConnection pulumi.StringPtrInput `pulumi:"armServiceConnection"`
	// Details of the ADO repository associated with the workflow.
	Repository ADORepositoryPtrInput `pulumi:"repository"`
}

func (ADOProviderProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ADOProviderProfile)(nil)).Elem()
}

func (i ADOProviderProfileArgs) ToADOProviderProfileOutput() ADOProviderProfileOutput {
	return i.ToADOProviderProfileOutputWithContext(context.Background())
}

func (i ADOProviderProfileArgs) ToADOProviderProfileOutputWithContext(ctx context.Context) ADOProviderProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADOProviderProfileOutput)
}

func (i ADOProviderProfileArgs) ToADOProviderProfilePtrOutput() ADOProviderProfilePtrOutput {
	return i.ToADOProviderProfilePtrOutputWithContext(context.Background())
}

func (i ADOProviderProfileArgs) ToADOProviderProfilePtrOutputWithContext(ctx context.Context) ADOProviderProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADOProviderProfileOutput).ToADOProviderProfilePtrOutputWithContext(ctx)
}

// ADOProviderProfilePtrInput is an input type that accepts ADOProviderProfileArgs, ADOProviderProfilePtr and ADOProviderProfilePtrOutput values.
// You can construct a concrete instance of `ADOProviderProfilePtrInput` via:
//
//	        ADOProviderProfileArgs{...}
//
//	or:
//
//	        nil
type ADOProviderProfilePtrInput interface {
	pulumi.Input

	ToADOProviderProfilePtrOutput() ADOProviderProfilePtrOutput
	ToADOProviderProfilePtrOutputWithContext(context.Context) ADOProviderProfilePtrOutput
}

type adoproviderProfilePtrType ADOProviderProfileArgs

func ADOProviderProfilePtr(v *ADOProviderProfileArgs) ADOProviderProfilePtrInput {
	return (*adoproviderProfilePtrType)(v)
}

func (*adoproviderProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ADOProviderProfile)(nil)).Elem()
}

func (i *adoproviderProfilePtrType) ToADOProviderProfilePtrOutput() ADOProviderProfilePtrOutput {
	return i.ToADOProviderProfilePtrOutputWithContext(context.Background())
}

func (i *adoproviderProfilePtrType) ToADOProviderProfilePtrOutputWithContext(ctx context.Context) ADOProviderProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADOProviderProfilePtrOutput)
}

// Details of the GitHub repository associated with the workflow.
type ADOProviderProfileOutput struct{ *pulumi.OutputState }

func (ADOProviderProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ADOProviderProfile)(nil)).Elem()
}

func (o ADOProviderProfileOutput) ToADOProviderProfileOutput() ADOProviderProfileOutput {
	return o
}

func (o ADOProviderProfileOutput) ToADOProviderProfileOutputWithContext(ctx context.Context) ADOProviderProfileOutput {
	return o
}

func (o ADOProviderProfileOutput) ToADOProviderProfilePtrOutput() ADOProviderProfilePtrOutput {
	return o.ToADOProviderProfilePtrOutputWithContext(context.Background())
}

func (o ADOProviderProfileOutput) ToADOProviderProfilePtrOutputWithContext(ctx context.Context) ADOProviderProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ADOProviderProfile) *ADOProviderProfile {
		return &v
	}).(ADOProviderProfilePtrOutput)
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o ADOProviderProfileOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADOProviderProfile) *string { return v.ArmServiceConnection }).(pulumi.StringPtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o ADOProviderProfileOutput) Repository() ADORepositoryPtrOutput {
	return o.ApplyT(func(v ADOProviderProfile) *ADORepository { return v.Repository }).(ADORepositoryPtrOutput)
}

type ADOProviderProfilePtrOutput struct{ *pulumi.OutputState }

func (ADOProviderProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ADOProviderProfile)(nil)).Elem()
}

func (o ADOProviderProfilePtrOutput) ToADOProviderProfilePtrOutput() ADOProviderProfilePtrOutput {
	return o
}

func (o ADOProviderProfilePtrOutput) ToADOProviderProfilePtrOutputWithContext(ctx context.Context) ADOProviderProfilePtrOutput {
	return o
}

func (o ADOProviderProfilePtrOutput) Elem() ADOProviderProfileOutput {
	return o.ApplyT(func(v *ADOProviderProfile) ADOProviderProfile {
		if v != nil {
			return *v
		}
		var ret ADOProviderProfile
		return ret
	}).(ADOProviderProfileOutput)
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o ADOProviderProfilePtrOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADOProviderProfile) *string {
		if v == nil {
			return nil
		}
		return v.ArmServiceConnection
	}).(pulumi.StringPtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o ADOProviderProfilePtrOutput) Repository() ADORepositoryPtrOutput {
	return o.ApplyT(func(v *ADOProviderProfile) *ADORepository {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(ADORepositoryPtrOutput)
}

// Details of the GitHub repository associated with the workflow.
type ADOProviderProfileResponse struct {
	// The name of the ARM Service Connection the pipeline is associated with.
	ArmServiceConnection *string `pulumi:"armServiceConnection"`
	// Details of the ADO repository associated with the workflow.
	Repository *ADORepositoryResponse `pulumi:"repository"`
}

// Details of the GitHub repository associated with the workflow.
type ADOProviderProfileResponseOutput struct{ *pulumi.OutputState }

func (ADOProviderProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ADOProviderProfileResponse)(nil)).Elem()
}

func (o ADOProviderProfileResponseOutput) ToADOProviderProfileResponseOutput() ADOProviderProfileResponseOutput {
	return o
}

func (o ADOProviderProfileResponseOutput) ToADOProviderProfileResponseOutputWithContext(ctx context.Context) ADOProviderProfileResponseOutput {
	return o
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o ADOProviderProfileResponseOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADOProviderProfileResponse) *string { return v.ArmServiceConnection }).(pulumi.StringPtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o ADOProviderProfileResponseOutput) Repository() ADORepositoryResponsePtrOutput {
	return o.ApplyT(func(v ADOProviderProfileResponse) *ADORepositoryResponse { return v.Repository }).(ADORepositoryResponsePtrOutput)
}

type ADOProviderProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ADOProviderProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ADOProviderProfileResponse)(nil)).Elem()
}

func (o ADOProviderProfileResponsePtrOutput) ToADOProviderProfileResponsePtrOutput() ADOProviderProfileResponsePtrOutput {
	return o
}

func (o ADOProviderProfileResponsePtrOutput) ToADOProviderProfileResponsePtrOutputWithContext(ctx context.Context) ADOProviderProfileResponsePtrOutput {
	return o
}

func (o ADOProviderProfileResponsePtrOutput) Elem() ADOProviderProfileResponseOutput {
	return o.ApplyT(func(v *ADOProviderProfileResponse) ADOProviderProfileResponse {
		if v != nil {
			return *v
		}
		var ret ADOProviderProfileResponse
		return ret
	}).(ADOProviderProfileResponseOutput)
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o ADOProviderProfileResponsePtrOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADOProviderProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArmServiceConnection
	}).(pulumi.StringPtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o ADOProviderProfileResponsePtrOutput) Repository() ADORepositoryResponsePtrOutput {
	return o.ApplyT(func(v *ADOProviderProfileResponse) *ADORepositoryResponse {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(ADORepositoryResponsePtrOutput)
}

// Details of the ADO repository associated with the workflow.
type ADORepository struct {
	// The name of the Azure DevOps organization the pipeline is associated with.
	AdoOrganization *string `pulumi:"adoOrganization"`
	// The name of the branch the workflow is associated with.
	BranchName *string `pulumi:"branchName"`
	// The name of the project the pipeline is associated with.
	ProjectName *string `pulumi:"projectName"`
	// The name of the repository the workflow is associated with.
	RepositoryName *string `pulumi:"repositoryName"`
	// The owner of the repository the workflow is associated with.
	RepositoryOwner *string `pulumi:"repositoryOwner"`
}

// ADORepositoryInput is an input type that accepts ADORepositoryArgs and ADORepositoryOutput values.
// You can construct a concrete instance of `ADORepositoryInput` via:
//
//	ADORepositoryArgs{...}
type ADORepositoryInput interface {
	pulumi.Input

	ToADORepositoryOutput() ADORepositoryOutput
	ToADORepositoryOutputWithContext(context.Context) ADORepositoryOutput
}

// Details of the ADO repository associated with the workflow.
type ADORepositoryArgs struct {
	// The name of the Azure DevOps organization the pipeline is associated with.
	AdoOrganization pulumi.StringPtrInput `pulumi:"adoOrganization"`
	// The name of the branch the workflow is associated with.
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// The name of the project the pipeline is associated with.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// The name of the repository the workflow is associated with.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// The owner of the repository the workflow is associated with.
	RepositoryOwner pulumi.StringPtrInput `pulumi:"repositoryOwner"`
}

func (ADORepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ADORepository)(nil)).Elem()
}

func (i ADORepositoryArgs) ToADORepositoryOutput() ADORepositoryOutput {
	return i.ToADORepositoryOutputWithContext(context.Background())
}

func (i ADORepositoryArgs) ToADORepositoryOutputWithContext(ctx context.Context) ADORepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADORepositoryOutput)
}

func (i ADORepositoryArgs) ToADORepositoryPtrOutput() ADORepositoryPtrOutput {
	return i.ToADORepositoryPtrOutputWithContext(context.Background())
}

func (i ADORepositoryArgs) ToADORepositoryPtrOutputWithContext(ctx context.Context) ADORepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADORepositoryOutput).ToADORepositoryPtrOutputWithContext(ctx)
}

// ADORepositoryPtrInput is an input type that accepts ADORepositoryArgs, ADORepositoryPtr and ADORepositoryPtrOutput values.
// You can construct a concrete instance of `ADORepositoryPtrInput` via:
//
//	        ADORepositoryArgs{...}
//
//	or:
//
//	        nil
type ADORepositoryPtrInput interface {
	pulumi.Input

	ToADORepositoryPtrOutput() ADORepositoryPtrOutput
	ToADORepositoryPtrOutputWithContext(context.Context) ADORepositoryPtrOutput
}

type adorepositoryPtrType ADORepositoryArgs

func ADORepositoryPtr(v *ADORepositoryArgs) ADORepositoryPtrInput {
	return (*adorepositoryPtrType)(v)
}

func (*adorepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ADORepository)(nil)).Elem()
}

func (i *adorepositoryPtrType) ToADORepositoryPtrOutput() ADORepositoryPtrOutput {
	return i.ToADORepositoryPtrOutputWithContext(context.Background())
}

func (i *adorepositoryPtrType) ToADORepositoryPtrOutputWithContext(ctx context.Context) ADORepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADORepositoryPtrOutput)
}

// Details of the ADO repository associated with the workflow.
type ADORepositoryOutput struct{ *pulumi.OutputState }

func (ADORepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ADORepository)(nil)).Elem()
}

func (o ADORepositoryOutput) ToADORepositoryOutput() ADORepositoryOutput {
	return o
}

func (o ADORepositoryOutput) ToADORepositoryOutputWithContext(ctx context.Context) ADORepositoryOutput {
	return o
}

func (o ADORepositoryOutput) ToADORepositoryPtrOutput() ADORepositoryPtrOutput {
	return o.ToADORepositoryPtrOutputWithContext(context.Background())
}

func (o ADORepositoryOutput) ToADORepositoryPtrOutputWithContext(ctx context.Context) ADORepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ADORepository) *ADORepository {
		return &v
	}).(ADORepositoryPtrOutput)
}

// The name of the Azure DevOps organization the pipeline is associated with.
func (o ADORepositoryOutput) AdoOrganization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepository) *string { return v.AdoOrganization }).(pulumi.StringPtrOutput)
}

// The name of the branch the workflow is associated with.
func (o ADORepositoryOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepository) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// The name of the project the pipeline is associated with.
func (o ADORepositoryOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepository) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o ADORepositoryOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepository) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o ADORepositoryOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepository) *string { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

type ADORepositoryPtrOutput struct{ *pulumi.OutputState }

func (ADORepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ADORepository)(nil)).Elem()
}

func (o ADORepositoryPtrOutput) ToADORepositoryPtrOutput() ADORepositoryPtrOutput {
	return o
}

func (o ADORepositoryPtrOutput) ToADORepositoryPtrOutputWithContext(ctx context.Context) ADORepositoryPtrOutput {
	return o
}

func (o ADORepositoryPtrOutput) Elem() ADORepositoryOutput {
	return o.ApplyT(func(v *ADORepository) ADORepository {
		if v != nil {
			return *v
		}
		var ret ADORepository
		return ret
	}).(ADORepositoryOutput)
}

// The name of the Azure DevOps organization the pipeline is associated with.
func (o ADORepositoryPtrOutput) AdoOrganization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepository) *string {
		if v == nil {
			return nil
		}
		return v.AdoOrganization
	}).(pulumi.StringPtrOutput)
}

// The name of the branch the workflow is associated with.
func (o ADORepositoryPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepository) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// The name of the project the pipeline is associated with.
func (o ADORepositoryPtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepository) *string {
		if v == nil {
			return nil
		}
		return v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o ADORepositoryPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o ADORepositoryPtrOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryOwner
	}).(pulumi.StringPtrOutput)
}

// Details of the ADO repository associated with the workflow.
type ADORepositoryResponse struct {
	// The name of the Azure DevOps organization the pipeline is associated with.
	AdoOrganization *string `pulumi:"adoOrganization"`
	// The name of the branch the workflow is associated with.
	BranchName *string `pulumi:"branchName"`
	// The name of the project the pipeline is associated with.
	ProjectName *string `pulumi:"projectName"`
	// The name of the repository the workflow is associated with.
	RepositoryName *string `pulumi:"repositoryName"`
	// The owner of the repository the workflow is associated with.
	RepositoryOwner *string `pulumi:"repositoryOwner"`
}

// Details of the ADO repository associated with the workflow.
type ADORepositoryResponseOutput struct{ *pulumi.OutputState }

func (ADORepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ADORepositoryResponse)(nil)).Elem()
}

func (o ADORepositoryResponseOutput) ToADORepositoryResponseOutput() ADORepositoryResponseOutput {
	return o
}

func (o ADORepositoryResponseOutput) ToADORepositoryResponseOutputWithContext(ctx context.Context) ADORepositoryResponseOutput {
	return o
}

// The name of the Azure DevOps organization the pipeline is associated with.
func (o ADORepositoryResponseOutput) AdoOrganization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepositoryResponse) *string { return v.AdoOrganization }).(pulumi.StringPtrOutput)
}

// The name of the branch the workflow is associated with.
func (o ADORepositoryResponseOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepositoryResponse) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// The name of the project the pipeline is associated with.
func (o ADORepositoryResponseOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepositoryResponse) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o ADORepositoryResponseOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepositoryResponse) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o ADORepositoryResponseOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ADORepositoryResponse) *string { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

type ADORepositoryResponsePtrOutput struct{ *pulumi.OutputState }

func (ADORepositoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ADORepositoryResponse)(nil)).Elem()
}

func (o ADORepositoryResponsePtrOutput) ToADORepositoryResponsePtrOutput() ADORepositoryResponsePtrOutput {
	return o
}

func (o ADORepositoryResponsePtrOutput) ToADORepositoryResponsePtrOutputWithContext(ctx context.Context) ADORepositoryResponsePtrOutput {
	return o
}

func (o ADORepositoryResponsePtrOutput) Elem() ADORepositoryResponseOutput {
	return o.ApplyT(func(v *ADORepositoryResponse) ADORepositoryResponse {
		if v != nil {
			return *v
		}
		var ret ADORepositoryResponse
		return ret
	}).(ADORepositoryResponseOutput)
}

// The name of the Azure DevOps organization the pipeline is associated with.
func (o ADORepositoryResponsePtrOutput) AdoOrganization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdoOrganization
	}).(pulumi.StringPtrOutput)
}

// The name of the branch the workflow is associated with.
func (o ADORepositoryResponsePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// The name of the project the pipeline is associated with.
func (o ADORepositoryResponsePtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o ADORepositoryResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o ADORepositoryResponsePtrOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADORepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryOwner
	}).(pulumi.StringPtrOutput)
}

// Properties used for generating artifacts such as Dockerfiles and manifests.
type ArtifactGenerationProperties struct {
	// The name of the app.
	AppName *string `pulumi:"appName"`
	// The version of the language image used for building the code in the generated dockerfile.
	BuilderVersion *string `pulumi:"builderVersion"`
	// The mode of generation to be used for generating Dockerfiles.
	DockerfileGenerationMode *string `pulumi:"dockerfileGenerationMode"`
	// The directory to output the generated Dockerfile to.
	DockerfileOutputDirectory *string `pulumi:"dockerfileOutputDirectory"`
	// The programming language used.
	GenerationLanguage *string `pulumi:"generationLanguage"`
	// The name of the image to be generated.
	ImageName *string `pulumi:"imageName"`
	// The tag to apply to the generated image.
	ImageTag *string `pulumi:"imageTag"`
	// The version of the language image used for execution in the generated dockerfile.
	LanguageVersion *string `pulumi:"languageVersion"`
	// The mode of generation to be used for generating Manifest.
	ManifestGenerationMode *string `pulumi:"manifestGenerationMode"`
	// The directory to output the generated manifests to.
	ManifestOutputDirectory *string `pulumi:"manifestOutputDirectory"`
	// Determines the type of manifests to be generated.
	ManifestType *string `pulumi:"manifestType"`
	// The namespace to deploy the application to.
	Namespace *string `pulumi:"namespace"`
	// The port the application is exposed on.
	Port *string `pulumi:"port"`
}

// ArtifactGenerationPropertiesInput is an input type that accepts ArtifactGenerationPropertiesArgs and ArtifactGenerationPropertiesOutput values.
// You can construct a concrete instance of `ArtifactGenerationPropertiesInput` via:
//
//	ArtifactGenerationPropertiesArgs{...}
type ArtifactGenerationPropertiesInput interface {
	pulumi.Input

	ToArtifactGenerationPropertiesOutput() ArtifactGenerationPropertiesOutput
	ToArtifactGenerationPropertiesOutputWithContext(context.Context) ArtifactGenerationPropertiesOutput
}

// Properties used for generating artifacts such as Dockerfiles and manifests.
type ArtifactGenerationPropertiesArgs struct {
	// The name of the app.
	AppName pulumi.StringPtrInput `pulumi:"appName"`
	// The version of the language image used for building the code in the generated dockerfile.
	BuilderVersion pulumi.StringPtrInput `pulumi:"builderVersion"`
	// The mode of generation to be used for generating Dockerfiles.
	DockerfileGenerationMode pulumi.StringPtrInput `pulumi:"dockerfileGenerationMode"`
	// The directory to output the generated Dockerfile to.
	DockerfileOutputDirectory pulumi.StringPtrInput `pulumi:"dockerfileOutputDirectory"`
	// The programming language used.
	GenerationLanguage pulumi.StringPtrInput `pulumi:"generationLanguage"`
	// The name of the image to be generated.
	ImageName pulumi.StringPtrInput `pulumi:"imageName"`
	// The tag to apply to the generated image.
	ImageTag pulumi.StringPtrInput `pulumi:"imageTag"`
	// The version of the language image used for execution in the generated dockerfile.
	LanguageVersion pulumi.StringPtrInput `pulumi:"languageVersion"`
	// The mode of generation to be used for generating Manifest.
	ManifestGenerationMode pulumi.StringPtrInput `pulumi:"manifestGenerationMode"`
	// The directory to output the generated manifests to.
	ManifestOutputDirectory pulumi.StringPtrInput `pulumi:"manifestOutputDirectory"`
	// Determines the type of manifests to be generated.
	ManifestType pulumi.StringPtrInput `pulumi:"manifestType"`
	// The namespace to deploy the application to.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The port the application is exposed on.
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (ArtifactGenerationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactGenerationProperties)(nil)).Elem()
}

func (i ArtifactGenerationPropertiesArgs) ToArtifactGenerationPropertiesOutput() ArtifactGenerationPropertiesOutput {
	return i.ToArtifactGenerationPropertiesOutputWithContext(context.Background())
}

func (i ArtifactGenerationPropertiesArgs) ToArtifactGenerationPropertiesOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactGenerationPropertiesOutput)
}

func (i ArtifactGenerationPropertiesArgs) ToArtifactGenerationPropertiesPtrOutput() ArtifactGenerationPropertiesPtrOutput {
	return i.ToArtifactGenerationPropertiesPtrOutputWithContext(context.Background())
}

func (i ArtifactGenerationPropertiesArgs) ToArtifactGenerationPropertiesPtrOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactGenerationPropertiesOutput).ToArtifactGenerationPropertiesPtrOutputWithContext(ctx)
}

// ArtifactGenerationPropertiesPtrInput is an input type that accepts ArtifactGenerationPropertiesArgs, ArtifactGenerationPropertiesPtr and ArtifactGenerationPropertiesPtrOutput values.
// You can construct a concrete instance of `ArtifactGenerationPropertiesPtrInput` via:
//
//	        ArtifactGenerationPropertiesArgs{...}
//
//	or:
//
//	        nil
type ArtifactGenerationPropertiesPtrInput interface {
	pulumi.Input

	ToArtifactGenerationPropertiesPtrOutput() ArtifactGenerationPropertiesPtrOutput
	ToArtifactGenerationPropertiesPtrOutputWithContext(context.Context) ArtifactGenerationPropertiesPtrOutput
}

type artifactGenerationPropertiesPtrType ArtifactGenerationPropertiesArgs

func ArtifactGenerationPropertiesPtr(v *ArtifactGenerationPropertiesArgs) ArtifactGenerationPropertiesPtrInput {
	return (*artifactGenerationPropertiesPtrType)(v)
}

func (*artifactGenerationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactGenerationProperties)(nil)).Elem()
}

func (i *artifactGenerationPropertiesPtrType) ToArtifactGenerationPropertiesPtrOutput() ArtifactGenerationPropertiesPtrOutput {
	return i.ToArtifactGenerationPropertiesPtrOutputWithContext(context.Background())
}

func (i *artifactGenerationPropertiesPtrType) ToArtifactGenerationPropertiesPtrOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactGenerationPropertiesPtrOutput)
}

// Properties used for generating artifacts such as Dockerfiles and manifests.
type ArtifactGenerationPropertiesOutput struct{ *pulumi.OutputState }

func (ArtifactGenerationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactGenerationProperties)(nil)).Elem()
}

func (o ArtifactGenerationPropertiesOutput) ToArtifactGenerationPropertiesOutput() ArtifactGenerationPropertiesOutput {
	return o
}

func (o ArtifactGenerationPropertiesOutput) ToArtifactGenerationPropertiesOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesOutput {
	return o
}

func (o ArtifactGenerationPropertiesOutput) ToArtifactGenerationPropertiesPtrOutput() ArtifactGenerationPropertiesPtrOutput {
	return o.ToArtifactGenerationPropertiesPtrOutputWithContext(context.Background())
}

func (o ArtifactGenerationPropertiesOutput) ToArtifactGenerationPropertiesPtrOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArtifactGenerationProperties) *ArtifactGenerationProperties {
		return &v
	}).(ArtifactGenerationPropertiesPtrOutput)
}

// The name of the app.
func (o ArtifactGenerationPropertiesOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.AppName }).(pulumi.StringPtrOutput)
}

// The version of the language image used for building the code in the generated dockerfile.
func (o ArtifactGenerationPropertiesOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Dockerfiles.
func (o ArtifactGenerationPropertiesOutput) DockerfileGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.DockerfileGenerationMode }).(pulumi.StringPtrOutput)
}

// The directory to output the generated Dockerfile to.
func (o ArtifactGenerationPropertiesOutput) DockerfileOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.DockerfileOutputDirectory }).(pulumi.StringPtrOutput)
}

// The programming language used.
func (o ArtifactGenerationPropertiesOutput) GenerationLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.GenerationLanguage }).(pulumi.StringPtrOutput)
}

// The name of the image to be generated.
func (o ArtifactGenerationPropertiesOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.ImageName }).(pulumi.StringPtrOutput)
}

// The tag to apply to the generated image.
func (o ArtifactGenerationPropertiesOutput) ImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.ImageTag }).(pulumi.StringPtrOutput)
}

// The version of the language image used for execution in the generated dockerfile.
func (o ArtifactGenerationPropertiesOutput) LanguageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.LanguageVersion }).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Manifest.
func (o ArtifactGenerationPropertiesOutput) ManifestGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.ManifestGenerationMode }).(pulumi.StringPtrOutput)
}

// The directory to output the generated manifests to.
func (o ArtifactGenerationPropertiesOutput) ManifestOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.ManifestOutputDirectory }).(pulumi.StringPtrOutput)
}

// Determines the type of manifests to be generated.
func (o ArtifactGenerationPropertiesOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.ManifestType }).(pulumi.StringPtrOutput)
}

// The namespace to deploy the application to.
func (o ArtifactGenerationPropertiesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The port the application is exposed on.
func (o ArtifactGenerationPropertiesOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationProperties) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ArtifactGenerationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ArtifactGenerationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactGenerationProperties)(nil)).Elem()
}

func (o ArtifactGenerationPropertiesPtrOutput) ToArtifactGenerationPropertiesPtrOutput() ArtifactGenerationPropertiesPtrOutput {
	return o
}

func (o ArtifactGenerationPropertiesPtrOutput) ToArtifactGenerationPropertiesPtrOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesPtrOutput {
	return o
}

func (o ArtifactGenerationPropertiesPtrOutput) Elem() ArtifactGenerationPropertiesOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) ArtifactGenerationProperties {
		if v != nil {
			return *v
		}
		var ret ArtifactGenerationProperties
		return ret
	}).(ArtifactGenerationPropertiesOutput)
}

// The name of the app.
func (o ArtifactGenerationPropertiesPtrOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.AppName
	}).(pulumi.StringPtrOutput)
}

// The version of the language image used for building the code in the generated dockerfile.
func (o ArtifactGenerationPropertiesPtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Dockerfiles.
func (o ArtifactGenerationPropertiesPtrOutput) DockerfileGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.DockerfileGenerationMode
	}).(pulumi.StringPtrOutput)
}

// The directory to output the generated Dockerfile to.
func (o ArtifactGenerationPropertiesPtrOutput) DockerfileOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.DockerfileOutputDirectory
	}).(pulumi.StringPtrOutput)
}

// The programming language used.
func (o ArtifactGenerationPropertiesPtrOutput) GenerationLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.GenerationLanguage
	}).(pulumi.StringPtrOutput)
}

// The name of the image to be generated.
func (o ArtifactGenerationPropertiesPtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ImageName
	}).(pulumi.StringPtrOutput)
}

// The tag to apply to the generated image.
func (o ArtifactGenerationPropertiesPtrOutput) ImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ImageTag
	}).(pulumi.StringPtrOutput)
}

// The version of the language image used for execution in the generated dockerfile.
func (o ArtifactGenerationPropertiesPtrOutput) LanguageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.LanguageVersion
	}).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Manifest.
func (o ArtifactGenerationPropertiesPtrOutput) ManifestGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ManifestGenerationMode
	}).(pulumi.StringPtrOutput)
}

// The directory to output the generated manifests to.
func (o ArtifactGenerationPropertiesPtrOutput) ManifestOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ManifestOutputDirectory
	}).(pulumi.StringPtrOutput)
}

// Determines the type of manifests to be generated.
func (o ArtifactGenerationPropertiesPtrOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ManifestType
	}).(pulumi.StringPtrOutput)
}

// The namespace to deploy the application to.
func (o ArtifactGenerationPropertiesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The port the application is exposed on.
func (o ArtifactGenerationPropertiesPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationProperties) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// Properties used for generating artifacts such as Dockerfiles and manifests.
type ArtifactGenerationPropertiesResponse struct {
	// The name of the app.
	AppName *string `pulumi:"appName"`
	// The version of the language image used for building the code in the generated dockerfile.
	BuilderVersion *string `pulumi:"builderVersion"`
	// The mode of generation to be used for generating Dockerfiles.
	DockerfileGenerationMode *string `pulumi:"dockerfileGenerationMode"`
	// The directory to output the generated Dockerfile to.
	DockerfileOutputDirectory *string `pulumi:"dockerfileOutputDirectory"`
	// The programming language used.
	GenerationLanguage *string `pulumi:"generationLanguage"`
	// The name of the image to be generated.
	ImageName *string `pulumi:"imageName"`
	// The tag to apply to the generated image.
	ImageTag *string `pulumi:"imageTag"`
	// The version of the language image used for execution in the generated dockerfile.
	LanguageVersion *string `pulumi:"languageVersion"`
	// The mode of generation to be used for generating Manifest.
	ManifestGenerationMode *string `pulumi:"manifestGenerationMode"`
	// The directory to output the generated manifests to.
	ManifestOutputDirectory *string `pulumi:"manifestOutputDirectory"`
	// Determines the type of manifests to be generated.
	ManifestType *string `pulumi:"manifestType"`
	// The namespace to deploy the application to.
	Namespace *string `pulumi:"namespace"`
	// The port the application is exposed on.
	Port *string `pulumi:"port"`
}

// Properties used for generating artifacts such as Dockerfiles and manifests.
type ArtifactGenerationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ArtifactGenerationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactGenerationPropertiesResponse)(nil)).Elem()
}

func (o ArtifactGenerationPropertiesResponseOutput) ToArtifactGenerationPropertiesResponseOutput() ArtifactGenerationPropertiesResponseOutput {
	return o
}

func (o ArtifactGenerationPropertiesResponseOutput) ToArtifactGenerationPropertiesResponseOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesResponseOutput {
	return o
}

// The name of the app.
func (o ArtifactGenerationPropertiesResponseOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.AppName }).(pulumi.StringPtrOutput)
}

// The version of the language image used for building the code in the generated dockerfile.
func (o ArtifactGenerationPropertiesResponseOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.BuilderVersion }).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Dockerfiles.
func (o ArtifactGenerationPropertiesResponseOutput) DockerfileGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.DockerfileGenerationMode }).(pulumi.StringPtrOutput)
}

// The directory to output the generated Dockerfile to.
func (o ArtifactGenerationPropertiesResponseOutput) DockerfileOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.DockerfileOutputDirectory }).(pulumi.StringPtrOutput)
}

// The programming language used.
func (o ArtifactGenerationPropertiesResponseOutput) GenerationLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.GenerationLanguage }).(pulumi.StringPtrOutput)
}

// The name of the image to be generated.
func (o ArtifactGenerationPropertiesResponseOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.ImageName }).(pulumi.StringPtrOutput)
}

// The tag to apply to the generated image.
func (o ArtifactGenerationPropertiesResponseOutput) ImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.ImageTag }).(pulumi.StringPtrOutput)
}

// The version of the language image used for execution in the generated dockerfile.
func (o ArtifactGenerationPropertiesResponseOutput) LanguageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.LanguageVersion }).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Manifest.
func (o ArtifactGenerationPropertiesResponseOutput) ManifestGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.ManifestGenerationMode }).(pulumi.StringPtrOutput)
}

// The directory to output the generated manifests to.
func (o ArtifactGenerationPropertiesResponseOutput) ManifestOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.ManifestOutputDirectory }).(pulumi.StringPtrOutput)
}

// Determines the type of manifests to be generated.
func (o ArtifactGenerationPropertiesResponseOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.ManifestType }).(pulumi.StringPtrOutput)
}

// The namespace to deploy the application to.
func (o ArtifactGenerationPropertiesResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The port the application is exposed on.
func (o ArtifactGenerationPropertiesResponseOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactGenerationPropertiesResponse) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ArtifactGenerationPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ArtifactGenerationPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactGenerationPropertiesResponse)(nil)).Elem()
}

func (o ArtifactGenerationPropertiesResponsePtrOutput) ToArtifactGenerationPropertiesResponsePtrOutput() ArtifactGenerationPropertiesResponsePtrOutput {
	return o
}

func (o ArtifactGenerationPropertiesResponsePtrOutput) ToArtifactGenerationPropertiesResponsePtrOutputWithContext(ctx context.Context) ArtifactGenerationPropertiesResponsePtrOutput {
	return o
}

func (o ArtifactGenerationPropertiesResponsePtrOutput) Elem() ArtifactGenerationPropertiesResponseOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) ArtifactGenerationPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ArtifactGenerationPropertiesResponse
		return ret
	}).(ArtifactGenerationPropertiesResponseOutput)
}

// The name of the app.
func (o ArtifactGenerationPropertiesResponsePtrOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppName
	}).(pulumi.StringPtrOutput)
}

// The version of the language image used for building the code in the generated dockerfile.
func (o ArtifactGenerationPropertiesResponsePtrOutput) BuilderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.BuilderVersion
	}).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Dockerfiles.
func (o ArtifactGenerationPropertiesResponsePtrOutput) DockerfileGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerfileGenerationMode
	}).(pulumi.StringPtrOutput)
}

// The directory to output the generated Dockerfile to.
func (o ArtifactGenerationPropertiesResponsePtrOutput) DockerfileOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerfileOutputDirectory
	}).(pulumi.StringPtrOutput)
}

// The programming language used.
func (o ArtifactGenerationPropertiesResponsePtrOutput) GenerationLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.GenerationLanguage
	}).(pulumi.StringPtrOutput)
}

// The name of the image to be generated.
func (o ArtifactGenerationPropertiesResponsePtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImageName
	}).(pulumi.StringPtrOutput)
}

// The tag to apply to the generated image.
func (o ArtifactGenerationPropertiesResponsePtrOutput) ImageTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImageTag
	}).(pulumi.StringPtrOutput)
}

// The version of the language image used for execution in the generated dockerfile.
func (o ArtifactGenerationPropertiesResponsePtrOutput) LanguageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LanguageVersion
	}).(pulumi.StringPtrOutput)
}

// The mode of generation to be used for generating Manifest.
func (o ArtifactGenerationPropertiesResponsePtrOutput) ManifestGenerationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ManifestGenerationMode
	}).(pulumi.StringPtrOutput)
}

// The directory to output the generated manifests to.
func (o ArtifactGenerationPropertiesResponsePtrOutput) ManifestOutputDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ManifestOutputDirectory
	}).(pulumi.StringPtrOutput)
}

// Determines the type of manifests to be generated.
func (o ArtifactGenerationPropertiesResponsePtrOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ManifestType
	}).(pulumi.StringPtrOutput)
}

// The namespace to deploy the application to.
func (o ArtifactGenerationPropertiesResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The port the application is exposed on.
func (o ArtifactGenerationPropertiesResponsePtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactGenerationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// Azure Pipeline Profile
type AzurePipelineProfile struct {
	// Resource identifier for azure container registry repository associated with the workflow.
	Acr *string `pulumi:"acr"`
	// The name of the ARM Service Connection the pipeline is associated with.
	ArmServiceConnection *string `pulumi:"armServiceConnection"`
	// Build details of the repository associated with the workflow.
	Build *Build `pulumi:"build"`
	// The Azure Kubernetes Cluster Resource the application will be deployed to.
	ClusterId *string `pulumi:"clusterId"`
	// Deployment details of the repository associated with the workflow.
	Deployment *Deployment `pulumi:"deployment"`
	// Kubernetes namespace the application is deployed to.
	Namespace *string `pulumi:"namespace"`
	// Details of the ADO repository associated with the workflow.
	Repository *ADORepository `pulumi:"repository"`
}

// AzurePipelineProfileInput is an input type that accepts AzurePipelineProfileArgs and AzurePipelineProfileOutput values.
// You can construct a concrete instance of `AzurePipelineProfileInput` via:
//
//	AzurePipelineProfileArgs{...}
type AzurePipelineProfileInput interface {
	pulumi.Input

	ToAzurePipelineProfileOutput() AzurePipelineProfileOutput
	ToAzurePipelineProfileOutputWithContext(context.Context) AzurePipelineProfileOutput
}

// Azure Pipeline Profile
type AzurePipelineProfileArgs struct {
	// Resource identifier for azure container registry repository associated with the workflow.
	Acr pulumi.StringPtrInput `pulumi:"acr"`
	// The name of the ARM Service Connection the pipeline is associated with.
	ArmServiceConnection pulumi.StringPtrInput `pulumi:"armServiceConnection"`
	// Build details of the repository associated with the workflow.
	Build BuildPtrInput `pulumi:"build"`
	// The Azure Kubernetes Cluster Resource the application will be deployed to.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// Deployment details of the repository associated with the workflow.
	Deployment DeploymentPtrInput `pulumi:"deployment"`
	// Kubernetes namespace the application is deployed to.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Details of the ADO repository associated with the workflow.
	Repository ADORepositoryPtrInput `pulumi:"repository"`
}

func (AzurePipelineProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePipelineProfile)(nil)).Elem()
}

func (i AzurePipelineProfileArgs) ToAzurePipelineProfileOutput() AzurePipelineProfileOutput {
	return i.ToAzurePipelineProfileOutputWithContext(context.Background())
}

func (i AzurePipelineProfileArgs) ToAzurePipelineProfileOutputWithContext(ctx context.Context) AzurePipelineProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePipelineProfileOutput)
}

func (i AzurePipelineProfileArgs) ToAzurePipelineProfilePtrOutput() AzurePipelineProfilePtrOutput {
	return i.ToAzurePipelineProfilePtrOutputWithContext(context.Background())
}

func (i AzurePipelineProfileArgs) ToAzurePipelineProfilePtrOutputWithContext(ctx context.Context) AzurePipelineProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePipelineProfileOutput).ToAzurePipelineProfilePtrOutputWithContext(ctx)
}

// AzurePipelineProfilePtrInput is an input type that accepts AzurePipelineProfileArgs, AzurePipelineProfilePtr and AzurePipelineProfilePtrOutput values.
// You can construct a concrete instance of `AzurePipelineProfilePtrInput` via:
//
//	        AzurePipelineProfileArgs{...}
//
//	or:
//
//	        nil
type AzurePipelineProfilePtrInput interface {
	pulumi.Input

	ToAzurePipelineProfilePtrOutput() AzurePipelineProfilePtrOutput
	ToAzurePipelineProfilePtrOutputWithContext(context.Context) AzurePipelineProfilePtrOutput
}

type azurePipelineProfilePtrType AzurePipelineProfileArgs

func AzurePipelineProfilePtr(v *AzurePipelineProfileArgs) AzurePipelineProfilePtrInput {
	return (*azurePipelineProfilePtrType)(v)
}

func (*azurePipelineProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzurePipelineProfile)(nil)).Elem()
}

func (i *azurePipelineProfilePtrType) ToAzurePipelineProfilePtrOutput() AzurePipelineProfilePtrOutput {
	return i.ToAzurePipelineProfilePtrOutputWithContext(context.Background())
}

func (i *azurePipelineProfilePtrType) ToAzurePipelineProfilePtrOutputWithContext(ctx context.Context) AzurePipelineProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePipelineProfilePtrOutput)
}

// Azure Pipeline Profile
type AzurePipelineProfileOutput struct{ *pulumi.OutputState }

func (AzurePipelineProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePipelineProfile)(nil)).Elem()
}

func (o AzurePipelineProfileOutput) ToAzurePipelineProfileOutput() AzurePipelineProfileOutput {
	return o
}

func (o AzurePipelineProfileOutput) ToAzurePipelineProfileOutputWithContext(ctx context.Context) AzurePipelineProfileOutput {
	return o
}

func (o AzurePipelineProfileOutput) ToAzurePipelineProfilePtrOutput() AzurePipelineProfilePtrOutput {
	return o.ToAzurePipelineProfilePtrOutputWithContext(context.Background())
}

func (o AzurePipelineProfileOutput) ToAzurePipelineProfilePtrOutputWithContext(ctx context.Context) AzurePipelineProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzurePipelineProfile) *AzurePipelineProfile {
		return &v
	}).(AzurePipelineProfilePtrOutput)
}

// Resource identifier for azure container registry repository associated with the workflow.
func (o AzurePipelineProfileOutput) Acr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfile) *string { return v.Acr }).(pulumi.StringPtrOutput)
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o AzurePipelineProfileOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfile) *string { return v.ArmServiceConnection }).(pulumi.StringPtrOutput)
}

// Build details of the repository associated with the workflow.
func (o AzurePipelineProfileOutput) Build() BuildPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfile) *Build { return v.Build }).(BuildPtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o AzurePipelineProfileOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfile) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o AzurePipelineProfileOutput) Deployment() DeploymentPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfile) *Deployment { return v.Deployment }).(DeploymentPtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o AzurePipelineProfileOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfile) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o AzurePipelineProfileOutput) Repository() ADORepositoryPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfile) *ADORepository { return v.Repository }).(ADORepositoryPtrOutput)
}

type AzurePipelineProfilePtrOutput struct{ *pulumi.OutputState }

func (AzurePipelineProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzurePipelineProfile)(nil)).Elem()
}

func (o AzurePipelineProfilePtrOutput) ToAzurePipelineProfilePtrOutput() AzurePipelineProfilePtrOutput {
	return o
}

func (o AzurePipelineProfilePtrOutput) ToAzurePipelineProfilePtrOutputWithContext(ctx context.Context) AzurePipelineProfilePtrOutput {
	return o
}

func (o AzurePipelineProfilePtrOutput) Elem() AzurePipelineProfileOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) AzurePipelineProfile {
		if v != nil {
			return *v
		}
		var ret AzurePipelineProfile
		return ret
	}).(AzurePipelineProfileOutput)
}

// Resource identifier for azure container registry repository associated with the workflow.
func (o AzurePipelineProfilePtrOutput) Acr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) *string {
		if v == nil {
			return nil
		}
		return v.Acr
	}).(pulumi.StringPtrOutput)
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o AzurePipelineProfilePtrOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) *string {
		if v == nil {
			return nil
		}
		return v.ArmServiceConnection
	}).(pulumi.StringPtrOutput)
}

// Build details of the repository associated with the workflow.
func (o AzurePipelineProfilePtrOutput) Build() BuildPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) *Build {
		if v == nil {
			return nil
		}
		return v.Build
	}).(BuildPtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o AzurePipelineProfilePtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o AzurePipelineProfilePtrOutput) Deployment() DeploymentPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) *Deployment {
		if v == nil {
			return nil
		}
		return v.Deployment
	}).(DeploymentPtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o AzurePipelineProfilePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o AzurePipelineProfilePtrOutput) Repository() ADORepositoryPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfile) *ADORepository {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(ADORepositoryPtrOutput)
}

// Azure Pipeline Profile
type AzurePipelineProfileResponse struct {
	// Resource identifier for azure container registry repository associated with the workflow.
	Acr *string `pulumi:"acr"`
	// The name of the ARM Service Connection the pipeline is associated with.
	ArmServiceConnection *string `pulumi:"armServiceConnection"`
	// Determines the authorization status of requests.
	AuthStatus string `pulumi:"authStatus"`
	// Build details of the repository associated with the workflow.
	Build *BuildResponse `pulumi:"build"`
	// The Azure Kubernetes Cluster Resource the application will be deployed to.
	ClusterId *string `pulumi:"clusterId"`
	// Deployment details of the repository associated with the workflow.
	Deployment      *DeploymentResponse  `pulumi:"deployment"`
	LastWorkflowRun *WorkflowRunResponse `pulumi:"lastWorkflowRun"`
	// Kubernetes namespace the application is deployed to.
	Namespace *string `pulumi:"namespace"`
	// Details of the pull request containing the workflow.
	PullRequest *PullRequestResponse `pulumi:"pullRequest"`
	// Details of the ADO repository associated with the workflow.
	Repository *ADORepositoryResponse `pulumi:"repository"`
}

// Azure Pipeline Profile
type AzurePipelineProfileResponseOutput struct{ *pulumi.OutputState }

func (AzurePipelineProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePipelineProfileResponse)(nil)).Elem()
}

func (o AzurePipelineProfileResponseOutput) ToAzurePipelineProfileResponseOutput() AzurePipelineProfileResponseOutput {
	return o
}

func (o AzurePipelineProfileResponseOutput) ToAzurePipelineProfileResponseOutputWithContext(ctx context.Context) AzurePipelineProfileResponseOutput {
	return o
}

// Resource identifier for azure container registry repository associated with the workflow.
func (o AzurePipelineProfileResponseOutput) Acr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *string { return v.Acr }).(pulumi.StringPtrOutput)
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o AzurePipelineProfileResponseOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *string { return v.ArmServiceConnection }).(pulumi.StringPtrOutput)
}

// Determines the authorization status of requests.
func (o AzurePipelineProfileResponseOutput) AuthStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) string { return v.AuthStatus }).(pulumi.StringOutput)
}

// Build details of the repository associated with the workflow.
func (o AzurePipelineProfileResponseOutput) Build() BuildResponsePtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *BuildResponse { return v.Build }).(BuildResponsePtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o AzurePipelineProfileResponseOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o AzurePipelineProfileResponseOutput) Deployment() DeploymentResponsePtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *DeploymentResponse { return v.Deployment }).(DeploymentResponsePtrOutput)
}

func (o AzurePipelineProfileResponseOutput) LastWorkflowRun() WorkflowRunResponsePtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *WorkflowRunResponse { return v.LastWorkflowRun }).(WorkflowRunResponsePtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o AzurePipelineProfileResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Details of the pull request containing the workflow.
func (o AzurePipelineProfileResponseOutput) PullRequest() PullRequestResponsePtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *PullRequestResponse { return v.PullRequest }).(PullRequestResponsePtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o AzurePipelineProfileResponseOutput) Repository() ADORepositoryResponsePtrOutput {
	return o.ApplyT(func(v AzurePipelineProfileResponse) *ADORepositoryResponse { return v.Repository }).(ADORepositoryResponsePtrOutput)
}

type AzurePipelineProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AzurePipelineProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzurePipelineProfileResponse)(nil)).Elem()
}

func (o AzurePipelineProfileResponsePtrOutput) ToAzurePipelineProfileResponsePtrOutput() AzurePipelineProfileResponsePtrOutput {
	return o
}

func (o AzurePipelineProfileResponsePtrOutput) ToAzurePipelineProfileResponsePtrOutputWithContext(ctx context.Context) AzurePipelineProfileResponsePtrOutput {
	return o
}

func (o AzurePipelineProfileResponsePtrOutput) Elem() AzurePipelineProfileResponseOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) AzurePipelineProfileResponse {
		if v != nil {
			return *v
		}
		var ret AzurePipelineProfileResponse
		return ret
	}).(AzurePipelineProfileResponseOutput)
}

// Resource identifier for azure container registry repository associated with the workflow.
func (o AzurePipelineProfileResponsePtrOutput) Acr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Acr
	}).(pulumi.StringPtrOutput)
}

// The name of the ARM Service Connection the pipeline is associated with.
func (o AzurePipelineProfileResponsePtrOutput) ArmServiceConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArmServiceConnection
	}).(pulumi.StringPtrOutput)
}

// Determines the authorization status of requests.
func (o AzurePipelineProfileResponsePtrOutput) AuthStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthStatus
	}).(pulumi.StringPtrOutput)
}

// Build details of the repository associated with the workflow.
func (o AzurePipelineProfileResponsePtrOutput) Build() BuildResponsePtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *BuildResponse {
		if v == nil {
			return nil
		}
		return v.Build
	}).(BuildResponsePtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o AzurePipelineProfileResponsePtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o AzurePipelineProfileResponsePtrOutput) Deployment() DeploymentResponsePtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *DeploymentResponse {
		if v == nil {
			return nil
		}
		return v.Deployment
	}).(DeploymentResponsePtrOutput)
}

func (o AzurePipelineProfileResponsePtrOutput) LastWorkflowRun() WorkflowRunResponsePtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *WorkflowRunResponse {
		if v == nil {
			return nil
		}
		return v.LastWorkflowRun
	}).(WorkflowRunResponsePtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o AzurePipelineProfileResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Details of the pull request containing the workflow.
func (o AzurePipelineProfileResponsePtrOutput) PullRequest() PullRequestResponsePtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *PullRequestResponse {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PullRequestResponsePtrOutput)
}

// Details of the ADO repository associated with the workflow.
func (o AzurePipelineProfileResponsePtrOutput) Repository() ADORepositoryResponsePtrOutput {
	return o.ApplyT(func(v *AzurePipelineProfileResponse) *ADORepositoryResponse {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(ADORepositoryResponsePtrOutput)
}

// Build details of the repository associated with the workflow.
type Build struct {
	// Path to Dockerfile Build Context within the repository.
	DockerBuildContext *string `pulumi:"dockerBuildContext"`
	// Path to the Dockerfile within the repository.
	Dockerfile *string `pulumi:"dockerfile"`
}

// BuildInput is an input type that accepts BuildArgs and BuildOutput values.
// You can construct a concrete instance of `BuildInput` via:
//
//	BuildArgs{...}
type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(context.Context) BuildOutput
}

// Build details of the repository associated with the workflow.
type BuildArgs struct {
	// Path to Dockerfile Build Context within the repository.
	DockerBuildContext pulumi.StringPtrInput `pulumi:"dockerBuildContext"`
	// Path to the Dockerfile within the repository.
	Dockerfile pulumi.StringPtrInput `pulumi:"dockerfile"`
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Build)(nil)).Elem()
}

func (i BuildArgs) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i BuildArgs) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

func (i BuildArgs) ToBuildPtrOutput() BuildPtrOutput {
	return i.ToBuildPtrOutputWithContext(context.Background())
}

func (i BuildArgs) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput).ToBuildPtrOutputWithContext(ctx)
}

// BuildPtrInput is an input type that accepts BuildArgs, BuildPtr and BuildPtrOutput values.
// You can construct a concrete instance of `BuildPtrInput` via:
//
//	        BuildArgs{...}
//
//	or:
//
//	        nil
type BuildPtrInput interface {
	pulumi.Input

	ToBuildPtrOutput() BuildPtrOutput
	ToBuildPtrOutputWithContext(context.Context) BuildPtrOutput
}

type buildPtrType BuildArgs

func BuildPtr(v *BuildArgs) BuildPtrInput {
	return (*buildPtrType)(v)
}

func (*buildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *buildPtrType) ToBuildPtrOutput() BuildPtrOutput {
	return i.ToBuildPtrOutputWithContext(context.Background())
}

func (i *buildPtrType) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildPtrOutput)
}

// Build details of the repository associated with the workflow.
type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

func (o BuildOutput) ToBuildPtrOutput() BuildPtrOutput {
	return o.ToBuildPtrOutputWithContext(context.Background())
}

func (o BuildOutput) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Build) *Build {
		return &v
	}).(BuildPtrOutput)
}

// Path to Dockerfile Build Context within the repository.
func (o BuildOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Build) *string { return v.DockerBuildContext }).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o BuildOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Build) *string { return v.Dockerfile }).(pulumi.StringPtrOutput)
}

type BuildPtrOutput struct{ *pulumi.OutputState }

func (BuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildPtrOutput) ToBuildPtrOutput() BuildPtrOutput {
	return o
}

func (o BuildPtrOutput) ToBuildPtrOutputWithContext(ctx context.Context) BuildPtrOutput {
	return o
}

func (o BuildPtrOutput) Elem() BuildOutput {
	return o.ApplyT(func(v *Build) Build {
		if v != nil {
			return *v
		}
		var ret Build
		return ret
	}).(BuildOutput)
}

// Path to Dockerfile Build Context within the repository.
func (o BuildPtrOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) *string {
		if v == nil {
			return nil
		}
		return v.DockerBuildContext
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o BuildPtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) *string {
		if v == nil {
			return nil
		}
		return v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// Build details of the repository associated with the workflow.
type BuildResponse struct {
	// Path to Dockerfile Build Context within the repository.
	DockerBuildContext *string `pulumi:"dockerBuildContext"`
	// Path to the Dockerfile within the repository.
	Dockerfile *string `pulumi:"dockerfile"`
}

// Build details of the repository associated with the workflow.
type BuildResponseOutput struct{ *pulumi.OutputState }

func (BuildResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildResponse)(nil)).Elem()
}

func (o BuildResponseOutput) ToBuildResponseOutput() BuildResponseOutput {
	return o
}

func (o BuildResponseOutput) ToBuildResponseOutputWithContext(ctx context.Context) BuildResponseOutput {
	return o
}

// Path to Dockerfile Build Context within the repository.
func (o BuildResponseOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildResponse) *string { return v.DockerBuildContext }).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o BuildResponseOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildResponse) *string { return v.Dockerfile }).(pulumi.StringPtrOutput)
}

type BuildResponsePtrOutput struct{ *pulumi.OutputState }

func (BuildResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildResponse)(nil)).Elem()
}

func (o BuildResponsePtrOutput) ToBuildResponsePtrOutput() BuildResponsePtrOutput {
	return o
}

func (o BuildResponsePtrOutput) ToBuildResponsePtrOutputWithContext(ctx context.Context) BuildResponsePtrOutput {
	return o
}

func (o BuildResponsePtrOutput) Elem() BuildResponseOutput {
	return o.ApplyT(func(v *BuildResponse) BuildResponse {
		if v != nil {
			return *v
		}
		var ret BuildResponse
		return ret
	}).(BuildResponseOutput)
}

// Path to Dockerfile Build Context within the repository.
func (o BuildResponsePtrOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerBuildContext
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o BuildResponsePtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
type Deployment struct {
	// Helm chart directory path in repository.
	HelmChartPath *string `pulumi:"helmChartPath"`
	// Helm Values.yaml file location in repository.
	HelmValues            *string  `pulumi:"helmValues"`
	KubeManifestLocations []string `pulumi:"kubeManifestLocations"`
	// Determines the type of manifests within the repository.
	ManifestType *string `pulumi:"manifestType"`
	// Manifest override values.
	Overrides map[string]string `pulumi:"overrides"`
}

// DeploymentInput is an input type that accepts DeploymentArgs and DeploymentOutput values.
// You can construct a concrete instance of `DeploymentInput` via:
//
//	DeploymentArgs{...}
type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(context.Context) DeploymentOutput
}

// Deployment details of the repository associated with the workflow.
type DeploymentArgs struct {
	// Helm chart directory path in repository.
	HelmChartPath pulumi.StringPtrInput `pulumi:"helmChartPath"`
	// Helm Values.yaml file location in repository.
	HelmValues            pulumi.StringPtrInput   `pulumi:"helmValues"`
	KubeManifestLocations pulumi.StringArrayInput `pulumi:"kubeManifestLocations"`
	// Determines the type of manifests within the repository.
	ManifestType pulumi.StringPtrInput `pulumi:"manifestType"`
	// Manifest override values.
	Overrides pulumi.StringMapInput `pulumi:"overrides"`
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (i DeploymentArgs) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

func (i DeploymentArgs) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i DeploymentArgs) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput).ToDeploymentPtrOutputWithContext(ctx)
}

// DeploymentPtrInput is an input type that accepts DeploymentArgs, DeploymentPtr and DeploymentPtrOutput values.
// You can construct a concrete instance of `DeploymentPtrInput` via:
//
//	        DeploymentArgs{...}
//
//	or:
//
//	        nil
type DeploymentPtrInput interface {
	pulumi.Input

	ToDeploymentPtrOutput() DeploymentPtrOutput
	ToDeploymentPtrOutputWithContext(context.Context) DeploymentPtrOutput
}

type deploymentPtrType DeploymentArgs

func DeploymentPtr(v *DeploymentArgs) DeploymentPtrInput {
	return (*deploymentPtrType)(v)
}

func (*deploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *deploymentPtrType) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return i.ToDeploymentPtrOutputWithContext(context.Background())
}

func (i *deploymentPtrType) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPtrOutput)
}

// Deployment details of the repository associated with the workflow.
type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o.ToDeploymentPtrOutputWithContext(context.Background())
}

func (o DeploymentOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deployment) *Deployment {
		return &v
	}).(DeploymentPtrOutput)
}

// Helm chart directory path in repository.
func (o DeploymentOutput) HelmChartPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.HelmChartPath }).(pulumi.StringPtrOutput)
}

// Helm Values.yaml file location in repository.
func (o DeploymentOutput) HelmValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.HelmValues }).(pulumi.StringPtrOutput)
}

func (o DeploymentOutput) KubeManifestLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Deployment) []string { return v.KubeManifestLocations }).(pulumi.StringArrayOutput)
}

// Determines the type of manifests within the repository.
func (o DeploymentOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deployment) *string { return v.ManifestType }).(pulumi.StringPtrOutput)
}

// Manifest override values.
func (o DeploymentOutput) Overrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v Deployment) map[string]string { return v.Overrides }).(pulumi.StringMapOutput)
}

type DeploymentPtrOutput struct{ *pulumi.OutputState }

func (DeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutput() DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) ToDeploymentPtrOutputWithContext(ctx context.Context) DeploymentPtrOutput {
	return o
}

func (o DeploymentPtrOutput) Elem() DeploymentOutput {
	return o.ApplyT(func(v *Deployment) Deployment {
		if v != nil {
			return *v
		}
		var ret Deployment
		return ret
	}).(DeploymentOutput)
}

// Helm chart directory path in repository.
func (o DeploymentPtrOutput) HelmChartPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.HelmChartPath
	}).(pulumi.StringPtrOutput)
}

// Helm Values.yaml file location in repository.
func (o DeploymentPtrOutput) HelmValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.HelmValues
	}).(pulumi.StringPtrOutput)
}

func (o DeploymentPtrOutput) KubeManifestLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Deployment) []string {
		if v == nil {
			return nil
		}
		return v.KubeManifestLocations
	}).(pulumi.StringArrayOutput)
}

// Determines the type of manifests within the repository.
func (o DeploymentPtrOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) *string {
		if v == nil {
			return nil
		}
		return v.ManifestType
	}).(pulumi.StringPtrOutput)
}

// Manifest override values.
func (o DeploymentPtrOutput) Overrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) map[string]string {
		if v == nil {
			return nil
		}
		return v.Overrides
	}).(pulumi.StringMapOutput)
}

// Deployment details of the repository associated with the workflow.
type DeploymentResponse struct {
	// Helm chart directory path in repository.
	HelmChartPath *string `pulumi:"helmChartPath"`
	// Helm Values.yaml file location in repository.
	HelmValues            *string  `pulumi:"helmValues"`
	KubeManifestLocations []string `pulumi:"kubeManifestLocations"`
	// Determines the type of manifests within the repository.
	ManifestType *string `pulumi:"manifestType"`
	// Manifest override values.
	Overrides map[string]string `pulumi:"overrides"`
}

// Deployment details of the repository associated with the workflow.
type DeploymentResponseOutput struct{ *pulumi.OutputState }

func (DeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResponse)(nil)).Elem()
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutput() DeploymentResponseOutput {
	return o
}

func (o DeploymentResponseOutput) ToDeploymentResponseOutputWithContext(ctx context.Context) DeploymentResponseOutput {
	return o
}

// Helm chart directory path in repository.
func (o DeploymentResponseOutput) HelmChartPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResponse) *string { return v.HelmChartPath }).(pulumi.StringPtrOutput)
}

// Helm Values.yaml file location in repository.
func (o DeploymentResponseOutput) HelmValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResponse) *string { return v.HelmValues }).(pulumi.StringPtrOutput)
}

func (o DeploymentResponseOutput) KubeManifestLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentResponse) []string { return v.KubeManifestLocations }).(pulumi.StringArrayOutput)
}

// Determines the type of manifests within the repository.
func (o DeploymentResponseOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResponse) *string { return v.ManifestType }).(pulumi.StringPtrOutput)
}

// Manifest override values.
func (o DeploymentResponseOutput) Overrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeploymentResponse) map[string]string { return v.Overrides }).(pulumi.StringMapOutput)
}

type DeploymentResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResponse)(nil)).Elem()
}

func (o DeploymentResponsePtrOutput) ToDeploymentResponsePtrOutput() DeploymentResponsePtrOutput {
	return o
}

func (o DeploymentResponsePtrOutput) ToDeploymentResponsePtrOutputWithContext(ctx context.Context) DeploymentResponsePtrOutput {
	return o
}

func (o DeploymentResponsePtrOutput) Elem() DeploymentResponseOutput {
	return o.ApplyT(func(v *DeploymentResponse) DeploymentResponse {
		if v != nil {
			return *v
		}
		var ret DeploymentResponse
		return ret
	}).(DeploymentResponseOutput)
}

// Helm chart directory path in repository.
func (o DeploymentResponsePtrOutput) HelmChartPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResponse) *string {
		if v == nil {
			return nil
		}
		return v.HelmChartPath
	}).(pulumi.StringPtrOutput)
}

// Helm Values.yaml file location in repository.
func (o DeploymentResponsePtrOutput) HelmValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResponse) *string {
		if v == nil {
			return nil
		}
		return v.HelmValues
	}).(pulumi.StringPtrOutput)
}

func (o DeploymentResponsePtrOutput) KubeManifestLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeploymentResponse) []string {
		if v == nil {
			return nil
		}
		return v.KubeManifestLocations
	}).(pulumi.StringArrayOutput)
}

// Determines the type of manifests within the repository.
func (o DeploymentResponsePtrOutput) ManifestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResponse) *string {
		if v == nil {
			return nil
		}
		return v.ManifestType
	}).(pulumi.StringPtrOutput)
}

// Manifest override values.
func (o DeploymentResponsePtrOutput) Overrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeploymentResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Overrides
	}).(pulumi.StringMapOutput)
}

// Details of the GitHub repository and credentials associated with the workflow.
type GitHubProviderProfile struct {
	// The fields needed for OIDC with GitHub.
	OidcCredentials *OidcCredentials `pulumi:"oidcCredentials"`
	// Details of the GitHub repository associated with the workflow.
	Repository *GitHubRepository `pulumi:"repository"`
}

// GitHubProviderProfileInput is an input type that accepts GitHubProviderProfileArgs and GitHubProviderProfileOutput values.
// You can construct a concrete instance of `GitHubProviderProfileInput` via:
//
//	GitHubProviderProfileArgs{...}
type GitHubProviderProfileInput interface {
	pulumi.Input

	ToGitHubProviderProfileOutput() GitHubProviderProfileOutput
	ToGitHubProviderProfileOutputWithContext(context.Context) GitHubProviderProfileOutput
}

// Details of the GitHub repository and credentials associated with the workflow.
type GitHubProviderProfileArgs struct {
	// The fields needed for OIDC with GitHub.
	OidcCredentials OidcCredentialsPtrInput `pulumi:"oidcCredentials"`
	// Details of the GitHub repository associated with the workflow.
	Repository GitHubRepositoryPtrInput `pulumi:"repository"`
}

func (GitHubProviderProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubProviderProfile)(nil)).Elem()
}

func (i GitHubProviderProfileArgs) ToGitHubProviderProfileOutput() GitHubProviderProfileOutput {
	return i.ToGitHubProviderProfileOutputWithContext(context.Background())
}

func (i GitHubProviderProfileArgs) ToGitHubProviderProfileOutputWithContext(ctx context.Context) GitHubProviderProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubProviderProfileOutput)
}

func (i GitHubProviderProfileArgs) ToGitHubProviderProfilePtrOutput() GitHubProviderProfilePtrOutput {
	return i.ToGitHubProviderProfilePtrOutputWithContext(context.Background())
}

func (i GitHubProviderProfileArgs) ToGitHubProviderProfilePtrOutputWithContext(ctx context.Context) GitHubProviderProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubProviderProfileOutput).ToGitHubProviderProfilePtrOutputWithContext(ctx)
}

// GitHubProviderProfilePtrInput is an input type that accepts GitHubProviderProfileArgs, GitHubProviderProfilePtr and GitHubProviderProfilePtrOutput values.
// You can construct a concrete instance of `GitHubProviderProfilePtrInput` via:
//
//	        GitHubProviderProfileArgs{...}
//
//	or:
//
//	        nil
type GitHubProviderProfilePtrInput interface {
	pulumi.Input

	ToGitHubProviderProfilePtrOutput() GitHubProviderProfilePtrOutput
	ToGitHubProviderProfilePtrOutputWithContext(context.Context) GitHubProviderProfilePtrOutput
}

type gitHubProviderProfilePtrType GitHubProviderProfileArgs

func GitHubProviderProfilePtr(v *GitHubProviderProfileArgs) GitHubProviderProfilePtrInput {
	return (*gitHubProviderProfilePtrType)(v)
}

func (*gitHubProviderProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubProviderProfile)(nil)).Elem()
}

func (i *gitHubProviderProfilePtrType) ToGitHubProviderProfilePtrOutput() GitHubProviderProfilePtrOutput {
	return i.ToGitHubProviderProfilePtrOutputWithContext(context.Background())
}

func (i *gitHubProviderProfilePtrType) ToGitHubProviderProfilePtrOutputWithContext(ctx context.Context) GitHubProviderProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubProviderProfilePtrOutput)
}

// Details of the GitHub repository and credentials associated with the workflow.
type GitHubProviderProfileOutput struct{ *pulumi.OutputState }

func (GitHubProviderProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubProviderProfile)(nil)).Elem()
}

func (o GitHubProviderProfileOutput) ToGitHubProviderProfileOutput() GitHubProviderProfileOutput {
	return o
}

func (o GitHubProviderProfileOutput) ToGitHubProviderProfileOutputWithContext(ctx context.Context) GitHubProviderProfileOutput {
	return o
}

func (o GitHubProviderProfileOutput) ToGitHubProviderProfilePtrOutput() GitHubProviderProfilePtrOutput {
	return o.ToGitHubProviderProfilePtrOutputWithContext(context.Background())
}

func (o GitHubProviderProfileOutput) ToGitHubProviderProfilePtrOutputWithContext(ctx context.Context) GitHubProviderProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubProviderProfile) *GitHubProviderProfile {
		return &v
	}).(GitHubProviderProfilePtrOutput)
}

// The fields needed for OIDC with GitHub.
func (o GitHubProviderProfileOutput) OidcCredentials() OidcCredentialsPtrOutput {
	return o.ApplyT(func(v GitHubProviderProfile) *OidcCredentials { return v.OidcCredentials }).(OidcCredentialsPtrOutput)
}

// Details of the GitHub repository associated with the workflow.
func (o GitHubProviderProfileOutput) Repository() GitHubRepositoryPtrOutput {
	return o.ApplyT(func(v GitHubProviderProfile) *GitHubRepository { return v.Repository }).(GitHubRepositoryPtrOutput)
}

type GitHubProviderProfilePtrOutput struct{ *pulumi.OutputState }

func (GitHubProviderProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubProviderProfile)(nil)).Elem()
}

func (o GitHubProviderProfilePtrOutput) ToGitHubProviderProfilePtrOutput() GitHubProviderProfilePtrOutput {
	return o
}

func (o GitHubProviderProfilePtrOutput) ToGitHubProviderProfilePtrOutputWithContext(ctx context.Context) GitHubProviderProfilePtrOutput {
	return o
}

func (o GitHubProviderProfilePtrOutput) Elem() GitHubProviderProfileOutput {
	return o.ApplyT(func(v *GitHubProviderProfile) GitHubProviderProfile {
		if v != nil {
			return *v
		}
		var ret GitHubProviderProfile
		return ret
	}).(GitHubProviderProfileOutput)
}

// The fields needed for OIDC with GitHub.
func (o GitHubProviderProfilePtrOutput) OidcCredentials() OidcCredentialsPtrOutput {
	return o.ApplyT(func(v *GitHubProviderProfile) *OidcCredentials {
		if v == nil {
			return nil
		}
		return v.OidcCredentials
	}).(OidcCredentialsPtrOutput)
}

// Details of the GitHub repository associated with the workflow.
func (o GitHubProviderProfilePtrOutput) Repository() GitHubRepositoryPtrOutput {
	return o.ApplyT(func(v *GitHubProviderProfile) *GitHubRepository {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(GitHubRepositoryPtrOutput)
}

// Details of the GitHub repository and credentials associated with the workflow.
type GitHubProviderProfileResponse struct {
	// The fields needed for OIDC with GitHub.
	OidcCredentials *OidcCredentialsResponse `pulumi:"oidcCredentials"`
	// Details of the GitHub repository associated with the workflow.
	Repository *GitHubRepositoryResponse `pulumi:"repository"`
}

// Details of the GitHub repository and credentials associated with the workflow.
type GitHubProviderProfileResponseOutput struct{ *pulumi.OutputState }

func (GitHubProviderProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubProviderProfileResponse)(nil)).Elem()
}

func (o GitHubProviderProfileResponseOutput) ToGitHubProviderProfileResponseOutput() GitHubProviderProfileResponseOutput {
	return o
}

func (o GitHubProviderProfileResponseOutput) ToGitHubProviderProfileResponseOutputWithContext(ctx context.Context) GitHubProviderProfileResponseOutput {
	return o
}

// The fields needed for OIDC with GitHub.
func (o GitHubProviderProfileResponseOutput) OidcCredentials() OidcCredentialsResponsePtrOutput {
	return o.ApplyT(func(v GitHubProviderProfileResponse) *OidcCredentialsResponse { return v.OidcCredentials }).(OidcCredentialsResponsePtrOutput)
}

// Details of the GitHub repository associated with the workflow.
func (o GitHubProviderProfileResponseOutput) Repository() GitHubRepositoryResponsePtrOutput {
	return o.ApplyT(func(v GitHubProviderProfileResponse) *GitHubRepositoryResponse { return v.Repository }).(GitHubRepositoryResponsePtrOutput)
}

type GitHubProviderProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GitHubProviderProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubProviderProfileResponse)(nil)).Elem()
}

func (o GitHubProviderProfileResponsePtrOutput) ToGitHubProviderProfileResponsePtrOutput() GitHubProviderProfileResponsePtrOutput {
	return o
}

func (o GitHubProviderProfileResponsePtrOutput) ToGitHubProviderProfileResponsePtrOutputWithContext(ctx context.Context) GitHubProviderProfileResponsePtrOutput {
	return o
}

func (o GitHubProviderProfileResponsePtrOutput) Elem() GitHubProviderProfileResponseOutput {
	return o.ApplyT(func(v *GitHubProviderProfileResponse) GitHubProviderProfileResponse {
		if v != nil {
			return *v
		}
		var ret GitHubProviderProfileResponse
		return ret
	}).(GitHubProviderProfileResponseOutput)
}

// The fields needed for OIDC with GitHub.
func (o GitHubProviderProfileResponsePtrOutput) OidcCredentials() OidcCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *GitHubProviderProfileResponse) *OidcCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.OidcCredentials
	}).(OidcCredentialsResponsePtrOutput)
}

// Details of the GitHub repository associated with the workflow.
func (o GitHubProviderProfileResponsePtrOutput) Repository() GitHubRepositoryResponsePtrOutput {
	return o.ApplyT(func(v *GitHubProviderProfileResponse) *GitHubRepositoryResponse {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(GitHubRepositoryResponsePtrOutput)
}

// Details of the GitHub repository associated with the workflow.
type GitHubRepository struct {
	// The name of the branch the workflow is associated with.
	BranchName *string `pulumi:"branchName"`
	// The name of the repository the workflow is associated with.
	RepositoryName *string `pulumi:"repositoryName"`
	// The owner of the repository the workflow is associated with.
	RepositoryOwner *string `pulumi:"repositoryOwner"`
}

// GitHubRepositoryInput is an input type that accepts GitHubRepositoryArgs and GitHubRepositoryOutput values.
// You can construct a concrete instance of `GitHubRepositoryInput` via:
//
//	GitHubRepositoryArgs{...}
type GitHubRepositoryInput interface {
	pulumi.Input

	ToGitHubRepositoryOutput() GitHubRepositoryOutput
	ToGitHubRepositoryOutputWithContext(context.Context) GitHubRepositoryOutput
}

// Details of the GitHub repository associated with the workflow.
type GitHubRepositoryArgs struct {
	// The name of the branch the workflow is associated with.
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// The name of the repository the workflow is associated with.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// The owner of the repository the workflow is associated with.
	RepositoryOwner pulumi.StringPtrInput `pulumi:"repositoryOwner"`
}

func (GitHubRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubRepository)(nil)).Elem()
}

func (i GitHubRepositoryArgs) ToGitHubRepositoryOutput() GitHubRepositoryOutput {
	return i.ToGitHubRepositoryOutputWithContext(context.Background())
}

func (i GitHubRepositoryArgs) ToGitHubRepositoryOutputWithContext(ctx context.Context) GitHubRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepositoryOutput)
}

func (i GitHubRepositoryArgs) ToGitHubRepositoryPtrOutput() GitHubRepositoryPtrOutput {
	return i.ToGitHubRepositoryPtrOutputWithContext(context.Background())
}

func (i GitHubRepositoryArgs) ToGitHubRepositoryPtrOutputWithContext(ctx context.Context) GitHubRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepositoryOutput).ToGitHubRepositoryPtrOutputWithContext(ctx)
}

// GitHubRepositoryPtrInput is an input type that accepts GitHubRepositoryArgs, GitHubRepositoryPtr and GitHubRepositoryPtrOutput values.
// You can construct a concrete instance of `GitHubRepositoryPtrInput` via:
//
//	        GitHubRepositoryArgs{...}
//
//	or:
//
//	        nil
type GitHubRepositoryPtrInput interface {
	pulumi.Input

	ToGitHubRepositoryPtrOutput() GitHubRepositoryPtrOutput
	ToGitHubRepositoryPtrOutputWithContext(context.Context) GitHubRepositoryPtrOutput
}

type gitHubRepositoryPtrType GitHubRepositoryArgs

func GitHubRepositoryPtr(v *GitHubRepositoryArgs) GitHubRepositoryPtrInput {
	return (*gitHubRepositoryPtrType)(v)
}

func (*gitHubRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRepository)(nil)).Elem()
}

func (i *gitHubRepositoryPtrType) ToGitHubRepositoryPtrOutput() GitHubRepositoryPtrOutput {
	return i.ToGitHubRepositoryPtrOutputWithContext(context.Background())
}

func (i *gitHubRepositoryPtrType) ToGitHubRepositoryPtrOutputWithContext(ctx context.Context) GitHubRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepositoryPtrOutput)
}

// Details of the GitHub repository associated with the workflow.
type GitHubRepositoryOutput struct{ *pulumi.OutputState }

func (GitHubRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubRepository)(nil)).Elem()
}

func (o GitHubRepositoryOutput) ToGitHubRepositoryOutput() GitHubRepositoryOutput {
	return o
}

func (o GitHubRepositoryOutput) ToGitHubRepositoryOutputWithContext(ctx context.Context) GitHubRepositoryOutput {
	return o
}

func (o GitHubRepositoryOutput) ToGitHubRepositoryPtrOutput() GitHubRepositoryPtrOutput {
	return o.ToGitHubRepositoryPtrOutputWithContext(context.Background())
}

func (o GitHubRepositoryOutput) ToGitHubRepositoryPtrOutputWithContext(ctx context.Context) GitHubRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubRepository) *GitHubRepository {
		return &v
	}).(GitHubRepositoryPtrOutput)
}

// The name of the branch the workflow is associated with.
func (o GitHubRepositoryOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubRepository) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o GitHubRepositoryOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubRepository) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o GitHubRepositoryOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubRepository) *string { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

type GitHubRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GitHubRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRepository)(nil)).Elem()
}

func (o GitHubRepositoryPtrOutput) ToGitHubRepositoryPtrOutput() GitHubRepositoryPtrOutput {
	return o
}

func (o GitHubRepositoryPtrOutput) ToGitHubRepositoryPtrOutputWithContext(ctx context.Context) GitHubRepositoryPtrOutput {
	return o
}

func (o GitHubRepositoryPtrOutput) Elem() GitHubRepositoryOutput {
	return o.ApplyT(func(v *GitHubRepository) GitHubRepository {
		if v != nil {
			return *v
		}
		var ret GitHubRepository
		return ret
	}).(GitHubRepositoryOutput)
}

// The name of the branch the workflow is associated with.
func (o GitHubRepositoryPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepository) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o GitHubRepositoryPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o GitHubRepositoryPtrOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryOwner
	}).(pulumi.StringPtrOutput)
}

// Details of the GitHub repository associated with the workflow.
type GitHubRepositoryResponse struct {
	// The name of the branch the workflow is associated with.
	BranchName *string `pulumi:"branchName"`
	// The name of the repository the workflow is associated with.
	RepositoryName *string `pulumi:"repositoryName"`
	// The owner of the repository the workflow is associated with.
	RepositoryOwner *string `pulumi:"repositoryOwner"`
}

// Details of the GitHub repository associated with the workflow.
type GitHubRepositoryResponseOutput struct{ *pulumi.OutputState }

func (GitHubRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubRepositoryResponse)(nil)).Elem()
}

func (o GitHubRepositoryResponseOutput) ToGitHubRepositoryResponseOutput() GitHubRepositoryResponseOutput {
	return o
}

func (o GitHubRepositoryResponseOutput) ToGitHubRepositoryResponseOutputWithContext(ctx context.Context) GitHubRepositoryResponseOutput {
	return o
}

// The name of the branch the workflow is associated with.
func (o GitHubRepositoryResponseOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubRepositoryResponse) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o GitHubRepositoryResponseOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubRepositoryResponse) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o GitHubRepositoryResponseOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubRepositoryResponse) *string { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

type GitHubRepositoryResponsePtrOutput struct{ *pulumi.OutputState }

func (GitHubRepositoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubRepositoryResponse)(nil)).Elem()
}

func (o GitHubRepositoryResponsePtrOutput) ToGitHubRepositoryResponsePtrOutput() GitHubRepositoryResponsePtrOutput {
	return o
}

func (o GitHubRepositoryResponsePtrOutput) ToGitHubRepositoryResponsePtrOutputWithContext(ctx context.Context) GitHubRepositoryResponsePtrOutput {
	return o
}

func (o GitHubRepositoryResponsePtrOutput) Elem() GitHubRepositoryResponseOutput {
	return o.ApplyT(func(v *GitHubRepositoryResponse) GitHubRepositoryResponse {
		if v != nil {
			return *v
		}
		var ret GitHubRepositoryResponse
		return ret
	}).(GitHubRepositoryResponseOutput)
}

// The name of the branch the workflow is associated with.
func (o GitHubRepositoryResponsePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// The name of the repository the workflow is associated with.
func (o GitHubRepositoryResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// The owner of the repository the workflow is associated with.
func (o GitHubRepositoryResponsePtrOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryOwner
	}).(pulumi.StringPtrOutput)
}

// GitHub Workflow Profile
type GitHubWorkflowProfile struct {
	// Information on the azure container registry
	Acr *ACR `pulumi:"acr"`
	// The Azure Kubernetes Cluster Resource the application will be deployed to.
	AksResourceId *string `pulumi:"aksResourceId"`
	// Repository Branch Name
	BranchName *string `pulumi:"branchName"`
	// Deployment details of the repository associated with the workflow.
	DeploymentProperties *Deployment `pulumi:"deploymentProperties"`
	// Path to Dockerfile Build Context within the repository.
	DockerBuildContext *string `pulumi:"dockerBuildContext"`
	// Path to the Dockerfile within the repository.
	Dockerfile *string `pulumi:"dockerfile"`
	// Kubernetes namespace the application is deployed to.
	Namespace *string `pulumi:"namespace"`
	// The fields needed for OIDC with GitHub.
	OidcCredentials *GitHubWorkflowProfileOidcCredentials `pulumi:"oidcCredentials"`
	// Repository Name
	RepositoryName *string `pulumi:"repositoryName"`
	// Repository Owner
	RepositoryOwner *string `pulumi:"repositoryOwner"`
}

// GitHubWorkflowProfileInput is an input type that accepts GitHubWorkflowProfileArgs and GitHubWorkflowProfileOutput values.
// You can construct a concrete instance of `GitHubWorkflowProfileInput` via:
//
//	GitHubWorkflowProfileArgs{...}
type GitHubWorkflowProfileInput interface {
	pulumi.Input

	ToGitHubWorkflowProfileOutput() GitHubWorkflowProfileOutput
	ToGitHubWorkflowProfileOutputWithContext(context.Context) GitHubWorkflowProfileOutput
}

// GitHub Workflow Profile
type GitHubWorkflowProfileArgs struct {
	// Information on the azure container registry
	Acr ACRPtrInput `pulumi:"acr"`
	// The Azure Kubernetes Cluster Resource the application will be deployed to.
	AksResourceId pulumi.StringPtrInput `pulumi:"aksResourceId"`
	// Repository Branch Name
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Deployment details of the repository associated with the workflow.
	DeploymentProperties DeploymentPtrInput `pulumi:"deploymentProperties"`
	// Path to Dockerfile Build Context within the repository.
	DockerBuildContext pulumi.StringPtrInput `pulumi:"dockerBuildContext"`
	// Path to the Dockerfile within the repository.
	Dockerfile pulumi.StringPtrInput `pulumi:"dockerfile"`
	// Kubernetes namespace the application is deployed to.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The fields needed for OIDC with GitHub.
	OidcCredentials GitHubWorkflowProfileOidcCredentialsPtrInput `pulumi:"oidcCredentials"`
	// Repository Name
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// Repository Owner
	RepositoryOwner pulumi.StringPtrInput `pulumi:"repositoryOwner"`
}

func (GitHubWorkflowProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubWorkflowProfile)(nil)).Elem()
}

func (i GitHubWorkflowProfileArgs) ToGitHubWorkflowProfileOutput() GitHubWorkflowProfileOutput {
	return i.ToGitHubWorkflowProfileOutputWithContext(context.Background())
}

func (i GitHubWorkflowProfileArgs) ToGitHubWorkflowProfileOutputWithContext(ctx context.Context) GitHubWorkflowProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubWorkflowProfileOutput)
}

func (i GitHubWorkflowProfileArgs) ToGitHubWorkflowProfilePtrOutput() GitHubWorkflowProfilePtrOutput {
	return i.ToGitHubWorkflowProfilePtrOutputWithContext(context.Background())
}

func (i GitHubWorkflowProfileArgs) ToGitHubWorkflowProfilePtrOutputWithContext(ctx context.Context) GitHubWorkflowProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubWorkflowProfileOutput).ToGitHubWorkflowProfilePtrOutputWithContext(ctx)
}

// GitHubWorkflowProfilePtrInput is an input type that accepts GitHubWorkflowProfileArgs, GitHubWorkflowProfilePtr and GitHubWorkflowProfilePtrOutput values.
// You can construct a concrete instance of `GitHubWorkflowProfilePtrInput` via:
//
//	        GitHubWorkflowProfileArgs{...}
//
//	or:
//
//	        nil
type GitHubWorkflowProfilePtrInput interface {
	pulumi.Input

	ToGitHubWorkflowProfilePtrOutput() GitHubWorkflowProfilePtrOutput
	ToGitHubWorkflowProfilePtrOutputWithContext(context.Context) GitHubWorkflowProfilePtrOutput
}

type gitHubWorkflowProfilePtrType GitHubWorkflowProfileArgs

func GitHubWorkflowProfilePtr(v *GitHubWorkflowProfileArgs) GitHubWorkflowProfilePtrInput {
	return (*gitHubWorkflowProfilePtrType)(v)
}

func (*gitHubWorkflowProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubWorkflowProfile)(nil)).Elem()
}

func (i *gitHubWorkflowProfilePtrType) ToGitHubWorkflowProfilePtrOutput() GitHubWorkflowProfilePtrOutput {
	return i.ToGitHubWorkflowProfilePtrOutputWithContext(context.Background())
}

func (i *gitHubWorkflowProfilePtrType) ToGitHubWorkflowProfilePtrOutputWithContext(ctx context.Context) GitHubWorkflowProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubWorkflowProfilePtrOutput)
}

// GitHub Workflow Profile
type GitHubWorkflowProfileOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubWorkflowProfile)(nil)).Elem()
}

func (o GitHubWorkflowProfileOutput) ToGitHubWorkflowProfileOutput() GitHubWorkflowProfileOutput {
	return o
}

func (o GitHubWorkflowProfileOutput) ToGitHubWorkflowProfileOutputWithContext(ctx context.Context) GitHubWorkflowProfileOutput {
	return o
}

func (o GitHubWorkflowProfileOutput) ToGitHubWorkflowProfilePtrOutput() GitHubWorkflowProfilePtrOutput {
	return o.ToGitHubWorkflowProfilePtrOutputWithContext(context.Background())
}

func (o GitHubWorkflowProfileOutput) ToGitHubWorkflowProfilePtrOutputWithContext(ctx context.Context) GitHubWorkflowProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubWorkflowProfile) *GitHubWorkflowProfile {
		return &v
	}).(GitHubWorkflowProfilePtrOutput)
}

// Information on the azure container registry
func (o GitHubWorkflowProfileOutput) Acr() ACRPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *ACR { return v.Acr }).(ACRPtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o GitHubWorkflowProfileOutput) AksResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *string { return v.AksResourceId }).(pulumi.StringPtrOutput)
}

// Repository Branch Name
func (o GitHubWorkflowProfileOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o GitHubWorkflowProfileOutput) DeploymentProperties() DeploymentPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *Deployment { return v.DeploymentProperties }).(DeploymentPtrOutput)
}

// Path to Dockerfile Build Context within the repository.
func (o GitHubWorkflowProfileOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *string { return v.DockerBuildContext }).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o GitHubWorkflowProfileOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *string { return v.Dockerfile }).(pulumi.StringPtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o GitHubWorkflowProfileOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The fields needed for OIDC with GitHub.
func (o GitHubWorkflowProfileOutput) OidcCredentials() GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *GitHubWorkflowProfileOidcCredentials { return v.OidcCredentials }).(GitHubWorkflowProfileOidcCredentialsPtrOutput)
}

// Repository Name
func (o GitHubWorkflowProfileOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// Repository Owner
func (o GitHubWorkflowProfileOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfile) *string { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

type GitHubWorkflowProfilePtrOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubWorkflowProfile)(nil)).Elem()
}

func (o GitHubWorkflowProfilePtrOutput) ToGitHubWorkflowProfilePtrOutput() GitHubWorkflowProfilePtrOutput {
	return o
}

func (o GitHubWorkflowProfilePtrOutput) ToGitHubWorkflowProfilePtrOutputWithContext(ctx context.Context) GitHubWorkflowProfilePtrOutput {
	return o
}

func (o GitHubWorkflowProfilePtrOutput) Elem() GitHubWorkflowProfileOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) GitHubWorkflowProfile {
		if v != nil {
			return *v
		}
		var ret GitHubWorkflowProfile
		return ret
	}).(GitHubWorkflowProfileOutput)
}

// Information on the azure container registry
func (o GitHubWorkflowProfilePtrOutput) Acr() ACRPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *ACR {
		if v == nil {
			return nil
		}
		return v.Acr
	}).(ACRPtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o GitHubWorkflowProfilePtrOutput) AksResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.AksResourceId
	}).(pulumi.StringPtrOutput)
}

// Repository Branch Name
func (o GitHubWorkflowProfilePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o GitHubWorkflowProfilePtrOutput) DeploymentProperties() DeploymentPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *Deployment {
		if v == nil {
			return nil
		}
		return v.DeploymentProperties
	}).(DeploymentPtrOutput)
}

// Path to Dockerfile Build Context within the repository.
func (o GitHubWorkflowProfilePtrOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.DockerBuildContext
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o GitHubWorkflowProfilePtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o GitHubWorkflowProfilePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The fields needed for OIDC with GitHub.
func (o GitHubWorkflowProfilePtrOutput) OidcCredentials() GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *GitHubWorkflowProfileOidcCredentials {
		if v == nil {
			return nil
		}
		return v.OidcCredentials
	}).(GitHubWorkflowProfileOidcCredentialsPtrOutput)
}

// Repository Name
func (o GitHubWorkflowProfilePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Repository Owner
func (o GitHubWorkflowProfilePtrOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryOwner
	}).(pulumi.StringPtrOutput)
}

// The fields needed for OIDC with GitHub.
type GitHubWorkflowProfileOidcCredentials struct {
	// Azure Application Client ID
	AzureClientId *string `pulumi:"azureClientId"`
	// Azure Directory (tenant) ID
	AzureTenantId *string `pulumi:"azureTenantId"`
}

// GitHubWorkflowProfileOidcCredentialsInput is an input type that accepts GitHubWorkflowProfileOidcCredentialsArgs and GitHubWorkflowProfileOidcCredentialsOutput values.
// You can construct a concrete instance of `GitHubWorkflowProfileOidcCredentialsInput` via:
//
//	GitHubWorkflowProfileOidcCredentialsArgs{...}
type GitHubWorkflowProfileOidcCredentialsInput interface {
	pulumi.Input

	ToGitHubWorkflowProfileOidcCredentialsOutput() GitHubWorkflowProfileOidcCredentialsOutput
	ToGitHubWorkflowProfileOidcCredentialsOutputWithContext(context.Context) GitHubWorkflowProfileOidcCredentialsOutput
}

// The fields needed for OIDC with GitHub.
type GitHubWorkflowProfileOidcCredentialsArgs struct {
	// Azure Application Client ID
	AzureClientId pulumi.StringPtrInput `pulumi:"azureClientId"`
	// Azure Directory (tenant) ID
	AzureTenantId pulumi.StringPtrInput `pulumi:"azureTenantId"`
}

func (GitHubWorkflowProfileOidcCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubWorkflowProfileOidcCredentials)(nil)).Elem()
}

func (i GitHubWorkflowProfileOidcCredentialsArgs) ToGitHubWorkflowProfileOidcCredentialsOutput() GitHubWorkflowProfileOidcCredentialsOutput {
	return i.ToGitHubWorkflowProfileOidcCredentialsOutputWithContext(context.Background())
}

func (i GitHubWorkflowProfileOidcCredentialsArgs) ToGitHubWorkflowProfileOidcCredentialsOutputWithContext(ctx context.Context) GitHubWorkflowProfileOidcCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubWorkflowProfileOidcCredentialsOutput)
}

func (i GitHubWorkflowProfileOidcCredentialsArgs) ToGitHubWorkflowProfileOidcCredentialsPtrOutput() GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return i.ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(context.Background())
}

func (i GitHubWorkflowProfileOidcCredentialsArgs) ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(ctx context.Context) GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubWorkflowProfileOidcCredentialsOutput).ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(ctx)
}

// GitHubWorkflowProfileOidcCredentialsPtrInput is an input type that accepts GitHubWorkflowProfileOidcCredentialsArgs, GitHubWorkflowProfileOidcCredentialsPtr and GitHubWorkflowProfileOidcCredentialsPtrOutput values.
// You can construct a concrete instance of `GitHubWorkflowProfileOidcCredentialsPtrInput` via:
//
//	        GitHubWorkflowProfileOidcCredentialsArgs{...}
//
//	or:
//
//	        nil
type GitHubWorkflowProfileOidcCredentialsPtrInput interface {
	pulumi.Input

	ToGitHubWorkflowProfileOidcCredentialsPtrOutput() GitHubWorkflowProfileOidcCredentialsPtrOutput
	ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(context.Context) GitHubWorkflowProfileOidcCredentialsPtrOutput
}

type gitHubWorkflowProfileOidcCredentialsPtrType GitHubWorkflowProfileOidcCredentialsArgs

func GitHubWorkflowProfileOidcCredentialsPtr(v *GitHubWorkflowProfileOidcCredentialsArgs) GitHubWorkflowProfileOidcCredentialsPtrInput {
	return (*gitHubWorkflowProfileOidcCredentialsPtrType)(v)
}

func (*gitHubWorkflowProfileOidcCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubWorkflowProfileOidcCredentials)(nil)).Elem()
}

func (i *gitHubWorkflowProfileOidcCredentialsPtrType) ToGitHubWorkflowProfileOidcCredentialsPtrOutput() GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return i.ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(context.Background())
}

func (i *gitHubWorkflowProfileOidcCredentialsPtrType) ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(ctx context.Context) GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubWorkflowProfileOidcCredentialsPtrOutput)
}

// The fields needed for OIDC with GitHub.
type GitHubWorkflowProfileOidcCredentialsOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfileOidcCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubWorkflowProfileOidcCredentials)(nil)).Elem()
}

func (o GitHubWorkflowProfileOidcCredentialsOutput) ToGitHubWorkflowProfileOidcCredentialsOutput() GitHubWorkflowProfileOidcCredentialsOutput {
	return o
}

func (o GitHubWorkflowProfileOidcCredentialsOutput) ToGitHubWorkflowProfileOidcCredentialsOutputWithContext(ctx context.Context) GitHubWorkflowProfileOidcCredentialsOutput {
	return o
}

func (o GitHubWorkflowProfileOidcCredentialsOutput) ToGitHubWorkflowProfileOidcCredentialsPtrOutput() GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return o.ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(context.Background())
}

func (o GitHubWorkflowProfileOidcCredentialsOutput) ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(ctx context.Context) GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubWorkflowProfileOidcCredentials) *GitHubWorkflowProfileOidcCredentials {
		return &v
	}).(GitHubWorkflowProfileOidcCredentialsPtrOutput)
}

// Azure Application Client ID
func (o GitHubWorkflowProfileOidcCredentialsOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileOidcCredentials) *string { return v.AzureClientId }).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o GitHubWorkflowProfileOidcCredentialsOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileOidcCredentials) *string { return v.AzureTenantId }).(pulumi.StringPtrOutput)
}

type GitHubWorkflowProfileOidcCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfileOidcCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubWorkflowProfileOidcCredentials)(nil)).Elem()
}

func (o GitHubWorkflowProfileOidcCredentialsPtrOutput) ToGitHubWorkflowProfileOidcCredentialsPtrOutput() GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return o
}

func (o GitHubWorkflowProfileOidcCredentialsPtrOutput) ToGitHubWorkflowProfileOidcCredentialsPtrOutputWithContext(ctx context.Context) GitHubWorkflowProfileOidcCredentialsPtrOutput {
	return o
}

func (o GitHubWorkflowProfileOidcCredentialsPtrOutput) Elem() GitHubWorkflowProfileOidcCredentialsOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileOidcCredentials) GitHubWorkflowProfileOidcCredentials {
		if v != nil {
			return *v
		}
		var ret GitHubWorkflowProfileOidcCredentials
		return ret
	}).(GitHubWorkflowProfileOidcCredentialsOutput)
}

// Azure Application Client ID
func (o GitHubWorkflowProfileOidcCredentialsPtrOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileOidcCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientId
	}).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o GitHubWorkflowProfileOidcCredentialsPtrOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileOidcCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AzureTenantId
	}).(pulumi.StringPtrOutput)
}

// GitHub Workflow Profile
type GitHubWorkflowProfileResponse struct {
	// Information on the azure container registry
	Acr *ACRResponse `pulumi:"acr"`
	// The Azure Kubernetes Cluster Resource the application will be deployed to.
	AksResourceId *string `pulumi:"aksResourceId"`
	// Determines the authorization status of requests.
	AuthStatus string `pulumi:"authStatus"`
	// Repository Branch Name
	BranchName *string `pulumi:"branchName"`
	// Deployment details of the repository associated with the workflow.
	DeploymentProperties *DeploymentResponse `pulumi:"deploymentProperties"`
	// Path to Dockerfile Build Context within the repository.
	DockerBuildContext *string `pulumi:"dockerBuildContext"`
	// Path to the Dockerfile within the repository.
	Dockerfile      *string              `pulumi:"dockerfile"`
	LastWorkflowRun *WorkflowRunResponse `pulumi:"lastWorkflowRun"`
	// Kubernetes namespace the application is deployed to.
	Namespace *string `pulumi:"namespace"`
	// The fields needed for OIDC with GitHub.
	OidcCredentials *GitHubWorkflowProfileResponseOidcCredentials `pulumi:"oidcCredentials"`
	// The status of the Pull Request submitted against the users repository.
	PrStatus string `pulumi:"prStatus"`
	// The URL to the Pull Request submitted against the users repository.
	PrURL string `pulumi:"prURL"`
	// The number associated with the submitted pull request.
	PullNumber int `pulumi:"pullNumber"`
	// Repository Name
	RepositoryName *string `pulumi:"repositoryName"`
	// Repository Owner
	RepositoryOwner *string `pulumi:"repositoryOwner"`
}

// GitHub Workflow Profile
type GitHubWorkflowProfileResponseOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubWorkflowProfileResponse)(nil)).Elem()
}

func (o GitHubWorkflowProfileResponseOutput) ToGitHubWorkflowProfileResponseOutput() GitHubWorkflowProfileResponseOutput {
	return o
}

func (o GitHubWorkflowProfileResponseOutput) ToGitHubWorkflowProfileResponseOutputWithContext(ctx context.Context) GitHubWorkflowProfileResponseOutput {
	return o
}

// Information on the azure container registry
func (o GitHubWorkflowProfileResponseOutput) Acr() ACRResponsePtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *ACRResponse { return v.Acr }).(ACRResponsePtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o GitHubWorkflowProfileResponseOutput) AksResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *string { return v.AksResourceId }).(pulumi.StringPtrOutput)
}

// Determines the authorization status of requests.
func (o GitHubWorkflowProfileResponseOutput) AuthStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) string { return v.AuthStatus }).(pulumi.StringOutput)
}

// Repository Branch Name
func (o GitHubWorkflowProfileResponseOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o GitHubWorkflowProfileResponseOutput) DeploymentProperties() DeploymentResponsePtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *DeploymentResponse { return v.DeploymentProperties }).(DeploymentResponsePtrOutput)
}

// Path to Dockerfile Build Context within the repository.
func (o GitHubWorkflowProfileResponseOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *string { return v.DockerBuildContext }).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o GitHubWorkflowProfileResponseOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *string { return v.Dockerfile }).(pulumi.StringPtrOutput)
}

func (o GitHubWorkflowProfileResponseOutput) LastWorkflowRun() WorkflowRunResponsePtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *WorkflowRunResponse { return v.LastWorkflowRun }).(WorkflowRunResponsePtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o GitHubWorkflowProfileResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The fields needed for OIDC with GitHub.
func (o GitHubWorkflowProfileResponseOutput) OidcCredentials() GitHubWorkflowProfileResponseOidcCredentialsPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *GitHubWorkflowProfileResponseOidcCredentials {
		return v.OidcCredentials
	}).(GitHubWorkflowProfileResponseOidcCredentialsPtrOutput)
}

// The status of the Pull Request submitted against the users repository.
func (o GitHubWorkflowProfileResponseOutput) PrStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) string { return v.PrStatus }).(pulumi.StringOutput)
}

// The URL to the Pull Request submitted against the users repository.
func (o GitHubWorkflowProfileResponseOutput) PrURL() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) string { return v.PrURL }).(pulumi.StringOutput)
}

// The number associated with the submitted pull request.
func (o GitHubWorkflowProfileResponseOutput) PullNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) int { return v.PullNumber }).(pulumi.IntOutput)
}

// Repository Name
func (o GitHubWorkflowProfileResponseOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// Repository Owner
func (o GitHubWorkflowProfileResponseOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponse) *string { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

type GitHubWorkflowProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubWorkflowProfileResponse)(nil)).Elem()
}

func (o GitHubWorkflowProfileResponsePtrOutput) ToGitHubWorkflowProfileResponsePtrOutput() GitHubWorkflowProfileResponsePtrOutput {
	return o
}

func (o GitHubWorkflowProfileResponsePtrOutput) ToGitHubWorkflowProfileResponsePtrOutputWithContext(ctx context.Context) GitHubWorkflowProfileResponsePtrOutput {
	return o
}

func (o GitHubWorkflowProfileResponsePtrOutput) Elem() GitHubWorkflowProfileResponseOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) GitHubWorkflowProfileResponse {
		if v != nil {
			return *v
		}
		var ret GitHubWorkflowProfileResponse
		return ret
	}).(GitHubWorkflowProfileResponseOutput)
}

// Information on the azure container registry
func (o GitHubWorkflowProfileResponsePtrOutput) Acr() ACRResponsePtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *ACRResponse {
		if v == nil {
			return nil
		}
		return v.Acr
	}).(ACRResponsePtrOutput)
}

// The Azure Kubernetes Cluster Resource the application will be deployed to.
func (o GitHubWorkflowProfileResponsePtrOutput) AksResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AksResourceId
	}).(pulumi.StringPtrOutput)
}

// Determines the authorization status of requests.
func (o GitHubWorkflowProfileResponsePtrOutput) AuthStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthStatus
	}).(pulumi.StringPtrOutput)
}

// Repository Branch Name
func (o GitHubWorkflowProfileResponsePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Deployment details of the repository associated with the workflow.
func (o GitHubWorkflowProfileResponsePtrOutput) DeploymentProperties() DeploymentResponsePtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *DeploymentResponse {
		if v == nil {
			return nil
		}
		return v.DeploymentProperties
	}).(DeploymentResponsePtrOutput)
}

// Path to Dockerfile Build Context within the repository.
func (o GitHubWorkflowProfileResponsePtrOutput) DockerBuildContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerBuildContext
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile within the repository.
func (o GitHubWorkflowProfileResponsePtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

func (o GitHubWorkflowProfileResponsePtrOutput) LastWorkflowRun() WorkflowRunResponsePtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *WorkflowRunResponse {
		if v == nil {
			return nil
		}
		return v.LastWorkflowRun
	}).(WorkflowRunResponsePtrOutput)
}

// Kubernetes namespace the application is deployed to.
func (o GitHubWorkflowProfileResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The fields needed for OIDC with GitHub.
func (o GitHubWorkflowProfileResponsePtrOutput) OidcCredentials() GitHubWorkflowProfileResponseOidcCredentialsPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *GitHubWorkflowProfileResponseOidcCredentials {
		if v == nil {
			return nil
		}
		return v.OidcCredentials
	}).(GitHubWorkflowProfileResponseOidcCredentialsPtrOutput)
}

// The status of the Pull Request submitted against the users repository.
func (o GitHubWorkflowProfileResponsePtrOutput) PrStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrStatus
	}).(pulumi.StringPtrOutput)
}

// The URL to the Pull Request submitted against the users repository.
func (o GitHubWorkflowProfileResponsePtrOutput) PrURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrURL
	}).(pulumi.StringPtrOutput)
}

// The number associated with the submitted pull request.
func (o GitHubWorkflowProfileResponsePtrOutput) PullNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PullNumber
	}).(pulumi.IntPtrOutput)
}

// Repository Name
func (o GitHubWorkflowProfileResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Repository Owner
func (o GitHubWorkflowProfileResponsePtrOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryOwner
	}).(pulumi.StringPtrOutput)
}

// The fields needed for OIDC with GitHub.
type GitHubWorkflowProfileResponseOidcCredentials struct {
	// Azure Application Client ID
	AzureClientId *string `pulumi:"azureClientId"`
	// Azure Directory (tenant) ID
	AzureTenantId *string `pulumi:"azureTenantId"`
}

// The fields needed for OIDC with GitHub.
type GitHubWorkflowProfileResponseOidcCredentialsOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfileResponseOidcCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubWorkflowProfileResponseOidcCredentials)(nil)).Elem()
}

func (o GitHubWorkflowProfileResponseOidcCredentialsOutput) ToGitHubWorkflowProfileResponseOidcCredentialsOutput() GitHubWorkflowProfileResponseOidcCredentialsOutput {
	return o
}

func (o GitHubWorkflowProfileResponseOidcCredentialsOutput) ToGitHubWorkflowProfileResponseOidcCredentialsOutputWithContext(ctx context.Context) GitHubWorkflowProfileResponseOidcCredentialsOutput {
	return o
}

// Azure Application Client ID
func (o GitHubWorkflowProfileResponseOidcCredentialsOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponseOidcCredentials) *string { return v.AzureClientId }).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o GitHubWorkflowProfileResponseOidcCredentialsOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubWorkflowProfileResponseOidcCredentials) *string { return v.AzureTenantId }).(pulumi.StringPtrOutput)
}

type GitHubWorkflowProfileResponseOidcCredentialsPtrOutput struct{ *pulumi.OutputState }

func (GitHubWorkflowProfileResponseOidcCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubWorkflowProfileResponseOidcCredentials)(nil)).Elem()
}

func (o GitHubWorkflowProfileResponseOidcCredentialsPtrOutput) ToGitHubWorkflowProfileResponseOidcCredentialsPtrOutput() GitHubWorkflowProfileResponseOidcCredentialsPtrOutput {
	return o
}

func (o GitHubWorkflowProfileResponseOidcCredentialsPtrOutput) ToGitHubWorkflowProfileResponseOidcCredentialsPtrOutputWithContext(ctx context.Context) GitHubWorkflowProfileResponseOidcCredentialsPtrOutput {
	return o
}

func (o GitHubWorkflowProfileResponseOidcCredentialsPtrOutput) Elem() GitHubWorkflowProfileResponseOidcCredentialsOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponseOidcCredentials) GitHubWorkflowProfileResponseOidcCredentials {
		if v != nil {
			return *v
		}
		var ret GitHubWorkflowProfileResponseOidcCredentials
		return ret
	}).(GitHubWorkflowProfileResponseOidcCredentialsOutput)
}

// Azure Application Client ID
func (o GitHubWorkflowProfileResponseOidcCredentialsPtrOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponseOidcCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientId
	}).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o GitHubWorkflowProfileResponseOidcCredentialsPtrOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubWorkflowProfileResponseOidcCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AzureTenantId
	}).(pulumi.StringPtrOutput)
}

type IacTemplateDetails struct {
	// Count of the product
	Count *int `pulumi:"count"`
	// Naming convention of this product
	NamingConvention *string `pulumi:"namingConvention"`
	// The name of the products.
	ProductName *string `pulumi:"productName"`
}

// IacTemplateDetailsInput is an input type that accepts IacTemplateDetailsArgs and IacTemplateDetailsOutput values.
// You can construct a concrete instance of `IacTemplateDetailsInput` via:
//
//	IacTemplateDetailsArgs{...}
type IacTemplateDetailsInput interface {
	pulumi.Input

	ToIacTemplateDetailsOutput() IacTemplateDetailsOutput
	ToIacTemplateDetailsOutputWithContext(context.Context) IacTemplateDetailsOutput
}

type IacTemplateDetailsArgs struct {
	// Count of the product
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Naming convention of this product
	NamingConvention pulumi.StringPtrInput `pulumi:"namingConvention"`
	// The name of the products.
	ProductName pulumi.StringPtrInput `pulumi:"productName"`
}

func (IacTemplateDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IacTemplateDetails)(nil)).Elem()
}

func (i IacTemplateDetailsArgs) ToIacTemplateDetailsOutput() IacTemplateDetailsOutput {
	return i.ToIacTemplateDetailsOutputWithContext(context.Background())
}

func (i IacTemplateDetailsArgs) ToIacTemplateDetailsOutputWithContext(ctx context.Context) IacTemplateDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IacTemplateDetailsOutput)
}

// IacTemplateDetailsArrayInput is an input type that accepts IacTemplateDetailsArray and IacTemplateDetailsArrayOutput values.
// You can construct a concrete instance of `IacTemplateDetailsArrayInput` via:
//
//	IacTemplateDetailsArray{ IacTemplateDetailsArgs{...} }
type IacTemplateDetailsArrayInput interface {
	pulumi.Input

	ToIacTemplateDetailsArrayOutput() IacTemplateDetailsArrayOutput
	ToIacTemplateDetailsArrayOutputWithContext(context.Context) IacTemplateDetailsArrayOutput
}

type IacTemplateDetailsArray []IacTemplateDetailsInput

func (IacTemplateDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IacTemplateDetails)(nil)).Elem()
}

func (i IacTemplateDetailsArray) ToIacTemplateDetailsArrayOutput() IacTemplateDetailsArrayOutput {
	return i.ToIacTemplateDetailsArrayOutputWithContext(context.Background())
}

func (i IacTemplateDetailsArray) ToIacTemplateDetailsArrayOutputWithContext(ctx context.Context) IacTemplateDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IacTemplateDetailsArrayOutput)
}

type IacTemplateDetailsOutput struct{ *pulumi.OutputState }

func (IacTemplateDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IacTemplateDetails)(nil)).Elem()
}

func (o IacTemplateDetailsOutput) ToIacTemplateDetailsOutput() IacTemplateDetailsOutput {
	return o
}

func (o IacTemplateDetailsOutput) ToIacTemplateDetailsOutputWithContext(ctx context.Context) IacTemplateDetailsOutput {
	return o
}

// Count of the product
func (o IacTemplateDetailsOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IacTemplateDetails) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Naming convention of this product
func (o IacTemplateDetailsOutput) NamingConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateDetails) *string { return v.NamingConvention }).(pulumi.StringPtrOutput)
}

// The name of the products.
func (o IacTemplateDetailsOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateDetails) *string { return v.ProductName }).(pulumi.StringPtrOutput)
}

type IacTemplateDetailsArrayOutput struct{ *pulumi.OutputState }

func (IacTemplateDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IacTemplateDetails)(nil)).Elem()
}

func (o IacTemplateDetailsArrayOutput) ToIacTemplateDetailsArrayOutput() IacTemplateDetailsArrayOutput {
	return o
}

func (o IacTemplateDetailsArrayOutput) ToIacTemplateDetailsArrayOutputWithContext(ctx context.Context) IacTemplateDetailsArrayOutput {
	return o
}

func (o IacTemplateDetailsArrayOutput) Index(i pulumi.IntInput) IacTemplateDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IacTemplateDetails {
		return vs[0].([]IacTemplateDetails)[vs[1].(int)]
	}).(IacTemplateDetailsOutput)
}

type IacTemplateDetailsResponse struct {
	// Count of the product
	Count *int `pulumi:"count"`
	// Naming convention of this product
	NamingConvention *string `pulumi:"namingConvention"`
	// The name of the products.
	ProductName *string `pulumi:"productName"`
}

type IacTemplateDetailsResponseOutput struct{ *pulumi.OutputState }

func (IacTemplateDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IacTemplateDetailsResponse)(nil)).Elem()
}

func (o IacTemplateDetailsResponseOutput) ToIacTemplateDetailsResponseOutput() IacTemplateDetailsResponseOutput {
	return o
}

func (o IacTemplateDetailsResponseOutput) ToIacTemplateDetailsResponseOutputWithContext(ctx context.Context) IacTemplateDetailsResponseOutput {
	return o
}

// Count of the product
func (o IacTemplateDetailsResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IacTemplateDetailsResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Naming convention of this product
func (o IacTemplateDetailsResponseOutput) NamingConvention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateDetailsResponse) *string { return v.NamingConvention }).(pulumi.StringPtrOutput)
}

// The name of the products.
func (o IacTemplateDetailsResponseOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateDetailsResponse) *string { return v.ProductName }).(pulumi.StringPtrOutput)
}

type IacTemplateDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (IacTemplateDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IacTemplateDetailsResponse)(nil)).Elem()
}

func (o IacTemplateDetailsResponseArrayOutput) ToIacTemplateDetailsResponseArrayOutput() IacTemplateDetailsResponseArrayOutput {
	return o
}

func (o IacTemplateDetailsResponseArrayOutput) ToIacTemplateDetailsResponseArrayOutputWithContext(ctx context.Context) IacTemplateDetailsResponseArrayOutput {
	return o
}

func (o IacTemplateDetailsResponseArrayOutput) Index(i pulumi.IntInput) IacTemplateDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IacTemplateDetailsResponse {
		return vs[0].([]IacTemplateDetailsResponse)[vs[1].(int)]
	}).(IacTemplateDetailsResponseOutput)
}

// Properties of a IacTemplate.
type IacTemplateProperties struct {
	// the sample instance name of the template
	InstanceName *string `pulumi:"instanceName"`
	// the source stage of the template
	InstanceStage *string `pulumi:"instanceStage"`
	// the source store of the template
	SourceResourceId *string              `pulumi:"sourceResourceId"`
	TemplateDetails  []IacTemplateDetails `pulumi:"templateDetails"`
	// Template Name
	TemplateName *string `pulumi:"templateName"`
}

// IacTemplatePropertiesInput is an input type that accepts IacTemplatePropertiesArgs and IacTemplatePropertiesOutput values.
// You can construct a concrete instance of `IacTemplatePropertiesInput` via:
//
//	IacTemplatePropertiesArgs{...}
type IacTemplatePropertiesInput interface {
	pulumi.Input

	ToIacTemplatePropertiesOutput() IacTemplatePropertiesOutput
	ToIacTemplatePropertiesOutputWithContext(context.Context) IacTemplatePropertiesOutput
}

// Properties of a IacTemplate.
type IacTemplatePropertiesArgs struct {
	// the sample instance name of the template
	InstanceName pulumi.StringPtrInput `pulumi:"instanceName"`
	// the source stage of the template
	InstanceStage pulumi.StringPtrInput `pulumi:"instanceStage"`
	// the source store of the template
	SourceResourceId pulumi.StringPtrInput        `pulumi:"sourceResourceId"`
	TemplateDetails  IacTemplateDetailsArrayInput `pulumi:"templateDetails"`
	// Template Name
	TemplateName pulumi.StringPtrInput `pulumi:"templateName"`
}

func (IacTemplatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IacTemplateProperties)(nil)).Elem()
}

func (i IacTemplatePropertiesArgs) ToIacTemplatePropertiesOutput() IacTemplatePropertiesOutput {
	return i.ToIacTemplatePropertiesOutputWithContext(context.Background())
}

func (i IacTemplatePropertiesArgs) ToIacTemplatePropertiesOutputWithContext(ctx context.Context) IacTemplatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IacTemplatePropertiesOutput)
}

// IacTemplatePropertiesArrayInput is an input type that accepts IacTemplatePropertiesArray and IacTemplatePropertiesArrayOutput values.
// You can construct a concrete instance of `IacTemplatePropertiesArrayInput` via:
//
//	IacTemplatePropertiesArray{ IacTemplatePropertiesArgs{...} }
type IacTemplatePropertiesArrayInput interface {
	pulumi.Input

	ToIacTemplatePropertiesArrayOutput() IacTemplatePropertiesArrayOutput
	ToIacTemplatePropertiesArrayOutputWithContext(context.Context) IacTemplatePropertiesArrayOutput
}

type IacTemplatePropertiesArray []IacTemplatePropertiesInput

func (IacTemplatePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IacTemplateProperties)(nil)).Elem()
}

func (i IacTemplatePropertiesArray) ToIacTemplatePropertiesArrayOutput() IacTemplatePropertiesArrayOutput {
	return i.ToIacTemplatePropertiesArrayOutputWithContext(context.Background())
}

func (i IacTemplatePropertiesArray) ToIacTemplatePropertiesArrayOutputWithContext(ctx context.Context) IacTemplatePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IacTemplatePropertiesArrayOutput)
}

// Properties of a IacTemplate.
type IacTemplatePropertiesOutput struct{ *pulumi.OutputState }

func (IacTemplatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IacTemplateProperties)(nil)).Elem()
}

func (o IacTemplatePropertiesOutput) ToIacTemplatePropertiesOutput() IacTemplatePropertiesOutput {
	return o
}

func (o IacTemplatePropertiesOutput) ToIacTemplatePropertiesOutputWithContext(ctx context.Context) IacTemplatePropertiesOutput {
	return o
}

// the sample instance name of the template
func (o IacTemplatePropertiesOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateProperties) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// the source stage of the template
func (o IacTemplatePropertiesOutput) InstanceStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateProperties) *string { return v.InstanceStage }).(pulumi.StringPtrOutput)
}

// the source store of the template
func (o IacTemplatePropertiesOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateProperties) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

func (o IacTemplatePropertiesOutput) TemplateDetails() IacTemplateDetailsArrayOutput {
	return o.ApplyT(func(v IacTemplateProperties) []IacTemplateDetails { return v.TemplateDetails }).(IacTemplateDetailsArrayOutput)
}

// Template Name
func (o IacTemplatePropertiesOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplateProperties) *string { return v.TemplateName }).(pulumi.StringPtrOutput)
}

type IacTemplatePropertiesArrayOutput struct{ *pulumi.OutputState }

func (IacTemplatePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IacTemplateProperties)(nil)).Elem()
}

func (o IacTemplatePropertiesArrayOutput) ToIacTemplatePropertiesArrayOutput() IacTemplatePropertiesArrayOutput {
	return o
}

func (o IacTemplatePropertiesArrayOutput) ToIacTemplatePropertiesArrayOutputWithContext(ctx context.Context) IacTemplatePropertiesArrayOutput {
	return o
}

func (o IacTemplatePropertiesArrayOutput) Index(i pulumi.IntInput) IacTemplatePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IacTemplateProperties {
		return vs[0].([]IacTemplateProperties)[vs[1].(int)]
	}).(IacTemplatePropertiesOutput)
}

// Properties of a IacTemplate.
type IacTemplatePropertiesResponse struct {
	// the sample instance name of the template
	InstanceName *string `pulumi:"instanceName"`
	// the source stage of the template
	InstanceStage *string `pulumi:"instanceStage"`
	// Determines the authorization status of requests.
	QuickStartTemplateType string `pulumi:"quickStartTemplateType"`
	// the source store of the template
	SourceResourceId *string                      `pulumi:"sourceResourceId"`
	TemplateDetails  []IacTemplateDetailsResponse `pulumi:"templateDetails"`
	// Template Name
	TemplateName *string `pulumi:"templateName"`
}

// Properties of a IacTemplate.
type IacTemplatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (IacTemplatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IacTemplatePropertiesResponse)(nil)).Elem()
}

func (o IacTemplatePropertiesResponseOutput) ToIacTemplatePropertiesResponseOutput() IacTemplatePropertiesResponseOutput {
	return o
}

func (o IacTemplatePropertiesResponseOutput) ToIacTemplatePropertiesResponseOutputWithContext(ctx context.Context) IacTemplatePropertiesResponseOutput {
	return o
}

// the sample instance name of the template
func (o IacTemplatePropertiesResponseOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplatePropertiesResponse) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// the source stage of the template
func (o IacTemplatePropertiesResponseOutput) InstanceStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplatePropertiesResponse) *string { return v.InstanceStage }).(pulumi.StringPtrOutput)
}

// Determines the authorization status of requests.
func (o IacTemplatePropertiesResponseOutput) QuickStartTemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v IacTemplatePropertiesResponse) string { return v.QuickStartTemplateType }).(pulumi.StringOutput)
}

// the source store of the template
func (o IacTemplatePropertiesResponseOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplatePropertiesResponse) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

func (o IacTemplatePropertiesResponseOutput) TemplateDetails() IacTemplateDetailsResponseArrayOutput {
	return o.ApplyT(func(v IacTemplatePropertiesResponse) []IacTemplateDetailsResponse { return v.TemplateDetails }).(IacTemplateDetailsResponseArrayOutput)
}

// Template Name
func (o IacTemplatePropertiesResponseOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IacTemplatePropertiesResponse) *string { return v.TemplateName }).(pulumi.StringPtrOutput)
}

type IacTemplatePropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (IacTemplatePropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IacTemplatePropertiesResponse)(nil)).Elem()
}

func (o IacTemplatePropertiesResponseArrayOutput) ToIacTemplatePropertiesResponseArrayOutput() IacTemplatePropertiesResponseArrayOutput {
	return o
}

func (o IacTemplatePropertiesResponseArrayOutput) ToIacTemplatePropertiesResponseArrayOutputWithContext(ctx context.Context) IacTemplatePropertiesResponseArrayOutput {
	return o
}

func (o IacTemplatePropertiesResponseArrayOutput) Index(i pulumi.IntInput) IacTemplatePropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IacTemplatePropertiesResponse {
		return vs[0].([]IacTemplatePropertiesResponse)[vs[1].(int)]
	}).(IacTemplatePropertiesResponseOutput)
}

// The fields needed for OIDC with GitHub.
type OidcCredentials struct {
	// Azure Application Client ID
	AzureClientId *string `pulumi:"azureClientId"`
	// Azure Directory (tenant) ID
	AzureTenantId *string `pulumi:"azureTenantId"`
}

// OidcCredentialsInput is an input type that accepts OidcCredentialsArgs and OidcCredentialsOutput values.
// You can construct a concrete instance of `OidcCredentialsInput` via:
//
//	OidcCredentialsArgs{...}
type OidcCredentialsInput interface {
	pulumi.Input

	ToOidcCredentialsOutput() OidcCredentialsOutput
	ToOidcCredentialsOutputWithContext(context.Context) OidcCredentialsOutput
}

// The fields needed for OIDC with GitHub.
type OidcCredentialsArgs struct {
	// Azure Application Client ID
	AzureClientId pulumi.StringPtrInput `pulumi:"azureClientId"`
	// Azure Directory (tenant) ID
	AzureTenantId pulumi.StringPtrInput `pulumi:"azureTenantId"`
}

func (OidcCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcCredentials)(nil)).Elem()
}

func (i OidcCredentialsArgs) ToOidcCredentialsOutput() OidcCredentialsOutput {
	return i.ToOidcCredentialsOutputWithContext(context.Background())
}

func (i OidcCredentialsArgs) ToOidcCredentialsOutputWithContext(ctx context.Context) OidcCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcCredentialsOutput)
}

func (i OidcCredentialsArgs) ToOidcCredentialsPtrOutput() OidcCredentialsPtrOutput {
	return i.ToOidcCredentialsPtrOutputWithContext(context.Background())
}

func (i OidcCredentialsArgs) ToOidcCredentialsPtrOutputWithContext(ctx context.Context) OidcCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcCredentialsOutput).ToOidcCredentialsPtrOutputWithContext(ctx)
}

// OidcCredentialsPtrInput is an input type that accepts OidcCredentialsArgs, OidcCredentialsPtr and OidcCredentialsPtrOutput values.
// You can construct a concrete instance of `OidcCredentialsPtrInput` via:
//
//	        OidcCredentialsArgs{...}
//
//	or:
//
//	        nil
type OidcCredentialsPtrInput interface {
	pulumi.Input

	ToOidcCredentialsPtrOutput() OidcCredentialsPtrOutput
	ToOidcCredentialsPtrOutputWithContext(context.Context) OidcCredentialsPtrOutput
}

type oidcCredentialsPtrType OidcCredentialsArgs

func OidcCredentialsPtr(v *OidcCredentialsArgs) OidcCredentialsPtrInput {
	return (*oidcCredentialsPtrType)(v)
}

func (*oidcCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcCredentials)(nil)).Elem()
}

func (i *oidcCredentialsPtrType) ToOidcCredentialsPtrOutput() OidcCredentialsPtrOutput {
	return i.ToOidcCredentialsPtrOutputWithContext(context.Background())
}

func (i *oidcCredentialsPtrType) ToOidcCredentialsPtrOutputWithContext(ctx context.Context) OidcCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcCredentialsPtrOutput)
}

// The fields needed for OIDC with GitHub.
type OidcCredentialsOutput struct{ *pulumi.OutputState }

func (OidcCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcCredentials)(nil)).Elem()
}

func (o OidcCredentialsOutput) ToOidcCredentialsOutput() OidcCredentialsOutput {
	return o
}

func (o OidcCredentialsOutput) ToOidcCredentialsOutputWithContext(ctx context.Context) OidcCredentialsOutput {
	return o
}

func (o OidcCredentialsOutput) ToOidcCredentialsPtrOutput() OidcCredentialsPtrOutput {
	return o.ToOidcCredentialsPtrOutputWithContext(context.Background())
}

func (o OidcCredentialsOutput) ToOidcCredentialsPtrOutputWithContext(ctx context.Context) OidcCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OidcCredentials) *OidcCredentials {
		return &v
	}).(OidcCredentialsPtrOutput)
}

// Azure Application Client ID
func (o OidcCredentialsOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcCredentials) *string { return v.AzureClientId }).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o OidcCredentialsOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcCredentials) *string { return v.AzureTenantId }).(pulumi.StringPtrOutput)
}

type OidcCredentialsPtrOutput struct{ *pulumi.OutputState }

func (OidcCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcCredentials)(nil)).Elem()
}

func (o OidcCredentialsPtrOutput) ToOidcCredentialsPtrOutput() OidcCredentialsPtrOutput {
	return o
}

func (o OidcCredentialsPtrOutput) ToOidcCredentialsPtrOutputWithContext(ctx context.Context) OidcCredentialsPtrOutput {
	return o
}

func (o OidcCredentialsPtrOutput) Elem() OidcCredentialsOutput {
	return o.ApplyT(func(v *OidcCredentials) OidcCredentials {
		if v != nil {
			return *v
		}
		var ret OidcCredentials
		return ret
	}).(OidcCredentialsOutput)
}

// Azure Application Client ID
func (o OidcCredentialsPtrOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientId
	}).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o OidcCredentialsPtrOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AzureTenantId
	}).(pulumi.StringPtrOutput)
}

// The fields needed for OIDC with GitHub.
type OidcCredentialsResponse struct {
	// Azure Application Client ID
	AzureClientId *string `pulumi:"azureClientId"`
	// Azure Directory (tenant) ID
	AzureTenantId *string `pulumi:"azureTenantId"`
}

// The fields needed for OIDC with GitHub.
type OidcCredentialsResponseOutput struct{ *pulumi.OutputState }

func (OidcCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcCredentialsResponse)(nil)).Elem()
}

func (o OidcCredentialsResponseOutput) ToOidcCredentialsResponseOutput() OidcCredentialsResponseOutput {
	return o
}

func (o OidcCredentialsResponseOutput) ToOidcCredentialsResponseOutputWithContext(ctx context.Context) OidcCredentialsResponseOutput {
	return o
}

// Azure Application Client ID
func (o OidcCredentialsResponseOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcCredentialsResponse) *string { return v.AzureClientId }).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o OidcCredentialsResponseOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcCredentialsResponse) *string { return v.AzureTenantId }).(pulumi.StringPtrOutput)
}

type OidcCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (OidcCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcCredentialsResponse)(nil)).Elem()
}

func (o OidcCredentialsResponsePtrOutput) ToOidcCredentialsResponsePtrOutput() OidcCredentialsResponsePtrOutput {
	return o
}

func (o OidcCredentialsResponsePtrOutput) ToOidcCredentialsResponsePtrOutputWithContext(ctx context.Context) OidcCredentialsResponsePtrOutput {
	return o
}

func (o OidcCredentialsResponsePtrOutput) Elem() OidcCredentialsResponseOutput {
	return o.ApplyT(func(v *OidcCredentialsResponse) OidcCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret OidcCredentialsResponse
		return ret
	}).(OidcCredentialsResponseOutput)
}

// Azure Application Client ID
func (o OidcCredentialsResponsePtrOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientId
	}).(pulumi.StringPtrOutput)
}

// Azure Directory (tenant) ID
func (o OidcCredentialsResponsePtrOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureTenantId
	}).(pulumi.StringPtrOutput)
}

// Details of the pull request containing the workflow.
type PullRequestResponse struct {
	// The status of the Pull Request submitted against the users repository.
	PrStatus string `pulumi:"prStatus"`
	// The URL to the Pull Request submitted against the users repository.
	PrURL string `pulumi:"prURL"`
	// The number associated with the submitted pull request.
	PullNumber int `pulumi:"pullNumber"`
}

// Details of the pull request containing the workflow.
type PullRequestResponseOutput struct{ *pulumi.OutputState }

func (PullRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestResponse)(nil)).Elem()
}

func (o PullRequestResponseOutput) ToPullRequestResponseOutput() PullRequestResponseOutput {
	return o
}

func (o PullRequestResponseOutput) ToPullRequestResponseOutputWithContext(ctx context.Context) PullRequestResponseOutput {
	return o
}

// The status of the Pull Request submitted against the users repository.
func (o PullRequestResponseOutput) PrStatus() pulumi.StringOutput {
	return o.ApplyT(func(v PullRequestResponse) string { return v.PrStatus }).(pulumi.StringOutput)
}

// The URL to the Pull Request submitted against the users repository.
func (o PullRequestResponseOutput) PrURL() pulumi.StringOutput {
	return o.ApplyT(func(v PullRequestResponse) string { return v.PrURL }).(pulumi.StringOutput)
}

// The number associated with the submitted pull request.
func (o PullRequestResponseOutput) PullNumber() pulumi.IntOutput {
	return o.ApplyT(func(v PullRequestResponse) int { return v.PullNumber }).(pulumi.IntOutput)
}

type PullRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (PullRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullRequestResponse)(nil)).Elem()
}

func (o PullRequestResponsePtrOutput) ToPullRequestResponsePtrOutput() PullRequestResponsePtrOutput {
	return o
}

func (o PullRequestResponsePtrOutput) ToPullRequestResponsePtrOutputWithContext(ctx context.Context) PullRequestResponsePtrOutput {
	return o
}

func (o PullRequestResponsePtrOutput) Elem() PullRequestResponseOutput {
	return o.ApplyT(func(v *PullRequestResponse) PullRequestResponse {
		if v != nil {
			return *v
		}
		var ret PullRequestResponse
		return ret
	}).(PullRequestResponseOutput)
}

// The status of the Pull Request submitted against the users repository.
func (o PullRequestResponsePtrOutput) PrStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrStatus
	}).(pulumi.StringPtrOutput)
}

// The URL to the Pull Request submitted against the users repository.
func (o PullRequestResponsePtrOutput) PrURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrURL
	}).(pulumi.StringPtrOutput)
}

// The number associated with the submitted pull request.
func (o PullRequestResponsePtrOutput) PullNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PullRequestResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PullNumber
	}).(pulumi.IntPtrOutput)
}

// Properties of a Stage.
type StageProperties struct {
	Dependencies   []string `pulumi:"dependencies"`
	GitEnvironment *string  `pulumi:"gitEnvironment"`
	// Stage Name
	StageName *string `pulumi:"stageName"`
}

// StagePropertiesInput is an input type that accepts StagePropertiesArgs and StagePropertiesOutput values.
// You can construct a concrete instance of `StagePropertiesInput` via:
//
//	StagePropertiesArgs{...}
type StagePropertiesInput interface {
	pulumi.Input

	ToStagePropertiesOutput() StagePropertiesOutput
	ToStagePropertiesOutputWithContext(context.Context) StagePropertiesOutput
}

// Properties of a Stage.
type StagePropertiesArgs struct {
	Dependencies   pulumi.StringArrayInput `pulumi:"dependencies"`
	GitEnvironment pulumi.StringPtrInput   `pulumi:"gitEnvironment"`
	// Stage Name
	StageName pulumi.StringPtrInput `pulumi:"stageName"`
}

func (StagePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageProperties)(nil)).Elem()
}

func (i StagePropertiesArgs) ToStagePropertiesOutput() StagePropertiesOutput {
	return i.ToStagePropertiesOutputWithContext(context.Background())
}

func (i StagePropertiesArgs) ToStagePropertiesOutputWithContext(ctx context.Context) StagePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagePropertiesOutput)
}

// StagePropertiesArrayInput is an input type that accepts StagePropertiesArray and StagePropertiesArrayOutput values.
// You can construct a concrete instance of `StagePropertiesArrayInput` via:
//
//	StagePropertiesArray{ StagePropertiesArgs{...} }
type StagePropertiesArrayInput interface {
	pulumi.Input

	ToStagePropertiesArrayOutput() StagePropertiesArrayOutput
	ToStagePropertiesArrayOutputWithContext(context.Context) StagePropertiesArrayOutput
}

type StagePropertiesArray []StagePropertiesInput

func (StagePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageProperties)(nil)).Elem()
}

func (i StagePropertiesArray) ToStagePropertiesArrayOutput() StagePropertiesArrayOutput {
	return i.ToStagePropertiesArrayOutputWithContext(context.Background())
}

func (i StagePropertiesArray) ToStagePropertiesArrayOutputWithContext(ctx context.Context) StagePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagePropertiesArrayOutput)
}

// Properties of a Stage.
type StagePropertiesOutput struct{ *pulumi.OutputState }

func (StagePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageProperties)(nil)).Elem()
}

func (o StagePropertiesOutput) ToStagePropertiesOutput() StagePropertiesOutput {
	return o
}

func (o StagePropertiesOutput) ToStagePropertiesOutputWithContext(ctx context.Context) StagePropertiesOutput {
	return o
}

func (o StagePropertiesOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StageProperties) []string { return v.Dependencies }).(pulumi.StringArrayOutput)
}

func (o StagePropertiesOutput) GitEnvironment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageProperties) *string { return v.GitEnvironment }).(pulumi.StringPtrOutput)
}

// Stage Name
func (o StagePropertiesOutput) StageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageProperties) *string { return v.StageName }).(pulumi.StringPtrOutput)
}

type StagePropertiesArrayOutput struct{ *pulumi.OutputState }

func (StagePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageProperties)(nil)).Elem()
}

func (o StagePropertiesArrayOutput) ToStagePropertiesArrayOutput() StagePropertiesArrayOutput {
	return o
}

func (o StagePropertiesArrayOutput) ToStagePropertiesArrayOutputWithContext(ctx context.Context) StagePropertiesArrayOutput {
	return o
}

func (o StagePropertiesArrayOutput) Index(i pulumi.IntInput) StagePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StageProperties {
		return vs[0].([]StageProperties)[vs[1].(int)]
	}).(StagePropertiesOutput)
}

// Properties of a Stage.
type StagePropertiesResponse struct {
	Dependencies   []string `pulumi:"dependencies"`
	GitEnvironment *string  `pulumi:"gitEnvironment"`
	// Stage Name
	StageName *string `pulumi:"stageName"`
}

// Properties of a Stage.
type StagePropertiesResponseOutput struct{ *pulumi.OutputState }

func (StagePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StagePropertiesResponse)(nil)).Elem()
}

func (o StagePropertiesResponseOutput) ToStagePropertiesResponseOutput() StagePropertiesResponseOutput {
	return o
}

func (o StagePropertiesResponseOutput) ToStagePropertiesResponseOutputWithContext(ctx context.Context) StagePropertiesResponseOutput {
	return o
}

func (o StagePropertiesResponseOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StagePropertiesResponse) []string { return v.Dependencies }).(pulumi.StringArrayOutput)
}

func (o StagePropertiesResponseOutput) GitEnvironment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StagePropertiesResponse) *string { return v.GitEnvironment }).(pulumi.StringPtrOutput)
}

// Stage Name
func (o StagePropertiesResponseOutput) StageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StagePropertiesResponse) *string { return v.StageName }).(pulumi.StringPtrOutput)
}

type StagePropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (StagePropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StagePropertiesResponse)(nil)).Elem()
}

func (o StagePropertiesResponseArrayOutput) ToStagePropertiesResponseArrayOutput() StagePropertiesResponseArrayOutput {
	return o
}

func (o StagePropertiesResponseArrayOutput) ToStagePropertiesResponseArrayOutputWithContext(ctx context.Context) StagePropertiesResponseArrayOutput {
	return o
}

func (o StagePropertiesResponseArrayOutput) Index(i pulumi.IntInput) StagePropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StagePropertiesResponse {
		return vs[0].([]StagePropertiesResponse)[vs[1].(int)]
	}).(StagePropertiesResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The properties of ADO OAuth.
type TemplateReference struct {
	// destination for template creation
	Destination *string `pulumi:"destination"`
	// parameters for template creation
	Parameters map[string]string `pulumi:"parameters"`
	// The versioned template arm resource id.
	TemplateId *string `pulumi:"templateId"`
}

// TemplateReferenceInput is an input type that accepts TemplateReferenceArgs and TemplateReferenceOutput values.
// You can construct a concrete instance of `TemplateReferenceInput` via:
//
//	TemplateReferenceArgs{...}
type TemplateReferenceInput interface {
	pulumi.Input

	ToTemplateReferenceOutput() TemplateReferenceOutput
	ToTemplateReferenceOutputWithContext(context.Context) TemplateReferenceOutput
}

// The properties of ADO OAuth.
type TemplateReferenceArgs struct {
	// destination for template creation
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// parameters for template creation
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// The versioned template arm resource id.
	TemplateId pulumi.StringPtrInput `pulumi:"templateId"`
}

func (TemplateReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReference)(nil)).Elem()
}

func (i TemplateReferenceArgs) ToTemplateReferenceOutput() TemplateReferenceOutput {
	return i.ToTemplateReferenceOutputWithContext(context.Background())
}

func (i TemplateReferenceArgs) ToTemplateReferenceOutputWithContext(ctx context.Context) TemplateReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceOutput)
}

func (i TemplateReferenceArgs) ToTemplateReferencePtrOutput() TemplateReferencePtrOutput {
	return i.ToTemplateReferencePtrOutputWithContext(context.Background())
}

func (i TemplateReferenceArgs) ToTemplateReferencePtrOutputWithContext(ctx context.Context) TemplateReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceOutput).ToTemplateReferencePtrOutputWithContext(ctx)
}

// TemplateReferencePtrInput is an input type that accepts TemplateReferenceArgs, TemplateReferencePtr and TemplateReferencePtrOutput values.
// You can construct a concrete instance of `TemplateReferencePtrInput` via:
//
//	        TemplateReferenceArgs{...}
//
//	or:
//
//	        nil
type TemplateReferencePtrInput interface {
	pulumi.Input

	ToTemplateReferencePtrOutput() TemplateReferencePtrOutput
	ToTemplateReferencePtrOutputWithContext(context.Context) TemplateReferencePtrOutput
}

type templateReferencePtrType TemplateReferenceArgs

func TemplateReferencePtr(v *TemplateReferenceArgs) TemplateReferencePtrInput {
	return (*templateReferencePtrType)(v)
}

func (*templateReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReference)(nil)).Elem()
}

func (i *templateReferencePtrType) ToTemplateReferencePtrOutput() TemplateReferencePtrOutput {
	return i.ToTemplateReferencePtrOutputWithContext(context.Background())
}

func (i *templateReferencePtrType) ToTemplateReferencePtrOutputWithContext(ctx context.Context) TemplateReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferencePtrOutput)
}

// TemplateReferenceArrayInput is an input type that accepts TemplateReferenceArray and TemplateReferenceArrayOutput values.
// You can construct a concrete instance of `TemplateReferenceArrayInput` via:
//
//	TemplateReferenceArray{ TemplateReferenceArgs{...} }
type TemplateReferenceArrayInput interface {
	pulumi.Input

	ToTemplateReferenceArrayOutput() TemplateReferenceArrayOutput
	ToTemplateReferenceArrayOutputWithContext(context.Context) TemplateReferenceArrayOutput
}

type TemplateReferenceArray []TemplateReferenceInput

func (TemplateReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateReference)(nil)).Elem()
}

func (i TemplateReferenceArray) ToTemplateReferenceArrayOutput() TemplateReferenceArrayOutput {
	return i.ToTemplateReferenceArrayOutputWithContext(context.Background())
}

func (i TemplateReferenceArray) ToTemplateReferenceArrayOutputWithContext(ctx context.Context) TemplateReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceArrayOutput)
}

// The properties of ADO OAuth.
type TemplateReferenceOutput struct{ *pulumi.OutputState }

func (TemplateReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReference)(nil)).Elem()
}

func (o TemplateReferenceOutput) ToTemplateReferenceOutput() TemplateReferenceOutput {
	return o
}

func (o TemplateReferenceOutput) ToTemplateReferenceOutputWithContext(ctx context.Context) TemplateReferenceOutput {
	return o
}

func (o TemplateReferenceOutput) ToTemplateReferencePtrOutput() TemplateReferencePtrOutput {
	return o.ToTemplateReferencePtrOutputWithContext(context.Background())
}

func (o TemplateReferenceOutput) ToTemplateReferencePtrOutputWithContext(ctx context.Context) TemplateReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateReference) *TemplateReference {
		return &v
	}).(TemplateReferencePtrOutput)
}

// destination for template creation
func (o TemplateReferenceOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateReference) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// parameters for template creation
func (o TemplateReferenceOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TemplateReference) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// The versioned template arm resource id.
func (o TemplateReferenceOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateReference) *string { return v.TemplateId }).(pulumi.StringPtrOutput)
}

type TemplateReferencePtrOutput struct{ *pulumi.OutputState }

func (TemplateReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReference)(nil)).Elem()
}

func (o TemplateReferencePtrOutput) ToTemplateReferencePtrOutput() TemplateReferencePtrOutput {
	return o
}

func (o TemplateReferencePtrOutput) ToTemplateReferencePtrOutputWithContext(ctx context.Context) TemplateReferencePtrOutput {
	return o
}

func (o TemplateReferencePtrOutput) Elem() TemplateReferenceOutput {
	return o.ApplyT(func(v *TemplateReference) TemplateReference {
		if v != nil {
			return *v
		}
		var ret TemplateReference
		return ret
	}).(TemplateReferenceOutput)
}

// destination for template creation
func (o TemplateReferencePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateReference) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// parameters for template creation
func (o TemplateReferencePtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TemplateReference) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// The versioned template arm resource id.
func (o TemplateReferencePtrOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateReference) *string {
		if v == nil {
			return nil
		}
		return v.TemplateId
	}).(pulumi.StringPtrOutput)
}

type TemplateReferenceArrayOutput struct{ *pulumi.OutputState }

func (TemplateReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateReference)(nil)).Elem()
}

func (o TemplateReferenceArrayOutput) ToTemplateReferenceArrayOutput() TemplateReferenceArrayOutput {
	return o
}

func (o TemplateReferenceArrayOutput) ToTemplateReferenceArrayOutputWithContext(ctx context.Context) TemplateReferenceArrayOutput {
	return o
}

func (o TemplateReferenceArrayOutput) Index(i pulumi.IntInput) TemplateReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateReference {
		return vs[0].([]TemplateReference)[vs[1].(int)]
	}).(TemplateReferenceOutput)
}

// The properties of ADO OAuth.
type TemplateReferenceResponse struct {
	// destination for template creation
	Destination *string `pulumi:"destination"`
	// parameters for template creation
	Parameters map[string]string `pulumi:"parameters"`
	// The versioned template arm resource id.
	TemplateId *string `pulumi:"templateId"`
}

// The properties of ADO OAuth.
type TemplateReferenceResponseOutput struct{ *pulumi.OutputState }

func (TemplateReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceResponse)(nil)).Elem()
}

func (o TemplateReferenceResponseOutput) ToTemplateReferenceResponseOutput() TemplateReferenceResponseOutput {
	return o
}

func (o TemplateReferenceResponseOutput) ToTemplateReferenceResponseOutputWithContext(ctx context.Context) TemplateReferenceResponseOutput {
	return o
}

// destination for template creation
func (o TemplateReferenceResponseOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateReferenceResponse) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// parameters for template creation
func (o TemplateReferenceResponseOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TemplateReferenceResponse) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// The versioned template arm resource id.
func (o TemplateReferenceResponseOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateReferenceResponse) *string { return v.TemplateId }).(pulumi.StringPtrOutput)
}

type TemplateReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (TemplateReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceResponse)(nil)).Elem()
}

func (o TemplateReferenceResponsePtrOutput) ToTemplateReferenceResponsePtrOutput() TemplateReferenceResponsePtrOutput {
	return o
}

func (o TemplateReferenceResponsePtrOutput) ToTemplateReferenceResponsePtrOutputWithContext(ctx context.Context) TemplateReferenceResponsePtrOutput {
	return o
}

func (o TemplateReferenceResponsePtrOutput) Elem() TemplateReferenceResponseOutput {
	return o.ApplyT(func(v *TemplateReferenceResponse) TemplateReferenceResponse {
		if v != nil {
			return *v
		}
		var ret TemplateReferenceResponse
		return ret
	}).(TemplateReferenceResponseOutput)
}

// destination for template creation
func (o TemplateReferenceResponsePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// parameters for template creation
func (o TemplateReferenceResponsePtrOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TemplateReferenceResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapOutput)
}

// The versioned template arm resource id.
func (o TemplateReferenceResponsePtrOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TemplateId
	}).(pulumi.StringPtrOutput)
}

type TemplateReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (TemplateReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateReferenceResponse)(nil)).Elem()
}

func (o TemplateReferenceResponseArrayOutput) ToTemplateReferenceResponseArrayOutput() TemplateReferenceResponseArrayOutput {
	return o
}

func (o TemplateReferenceResponseArrayOutput) ToTemplateReferenceResponseArrayOutputWithContext(ctx context.Context) TemplateReferenceResponseArrayOutput {
	return o
}

func (o TemplateReferenceResponseArrayOutput) Index(i pulumi.IntInput) TemplateReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateReferenceResponse {
		return vs[0].([]TemplateReferenceResponse)[vs[1].(int)]
	}).(TemplateReferenceResponseOutput)
}

// Template Workflow Profile
type TemplateWorkflowProfile struct {
	// Details of the GitHub repository associated with the workflow.
	AdoProviderProfile *ADOProviderProfile `pulumi:"adoProviderProfile"`
	// The properties of ADO OAuth.
	DeploymentTemplate *TemplateReference `pulumi:"deploymentTemplate"`
	// The properties of ADO OAuth.
	DockerfileTemplate *TemplateReference `pulumi:"dockerfileTemplate"`
	// Details of the GitHub repository and credentials associated with the workflow.
	GitHubProviderProfile *GitHubProviderProfile `pulumi:"gitHubProviderProfile"`
	ManifestTemplates     []TemplateReference    `pulumi:"manifestTemplates"`
	// The status of the Pull Request submitted against the users repository.
	RepositoryProvider *string `pulumi:"repositoryProvider"`
	// The properties of ADO OAuth.
	WorkflowTemplate *TemplateReference `pulumi:"workflowTemplate"`
}

// TemplateWorkflowProfileInput is an input type that accepts TemplateWorkflowProfileArgs and TemplateWorkflowProfileOutput values.
// You can construct a concrete instance of `TemplateWorkflowProfileInput` via:
//
//	TemplateWorkflowProfileArgs{...}
type TemplateWorkflowProfileInput interface {
	pulumi.Input

	ToTemplateWorkflowProfileOutput() TemplateWorkflowProfileOutput
	ToTemplateWorkflowProfileOutputWithContext(context.Context) TemplateWorkflowProfileOutput
}

// Template Workflow Profile
type TemplateWorkflowProfileArgs struct {
	// Details of the GitHub repository associated with the workflow.
	AdoProviderProfile ADOProviderProfilePtrInput `pulumi:"adoProviderProfile"`
	// The properties of ADO OAuth.
	DeploymentTemplate TemplateReferencePtrInput `pulumi:"deploymentTemplate"`
	// The properties of ADO OAuth.
	DockerfileTemplate TemplateReferencePtrInput `pulumi:"dockerfileTemplate"`
	// Details of the GitHub repository and credentials associated with the workflow.
	GitHubProviderProfile GitHubProviderProfilePtrInput `pulumi:"gitHubProviderProfile"`
	ManifestTemplates     TemplateReferenceArrayInput   `pulumi:"manifestTemplates"`
	// The status of the Pull Request submitted against the users repository.
	RepositoryProvider pulumi.StringPtrInput `pulumi:"repositoryProvider"`
	// The properties of ADO OAuth.
	WorkflowTemplate TemplateReferencePtrInput `pulumi:"workflowTemplate"`
}

func (TemplateWorkflowProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWorkflowProfile)(nil)).Elem()
}

func (i TemplateWorkflowProfileArgs) ToTemplateWorkflowProfileOutput() TemplateWorkflowProfileOutput {
	return i.ToTemplateWorkflowProfileOutputWithContext(context.Background())
}

func (i TemplateWorkflowProfileArgs) ToTemplateWorkflowProfileOutputWithContext(ctx context.Context) TemplateWorkflowProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWorkflowProfileOutput)
}

func (i TemplateWorkflowProfileArgs) ToTemplateWorkflowProfilePtrOutput() TemplateWorkflowProfilePtrOutput {
	return i.ToTemplateWorkflowProfilePtrOutputWithContext(context.Background())
}

func (i TemplateWorkflowProfileArgs) ToTemplateWorkflowProfilePtrOutputWithContext(ctx context.Context) TemplateWorkflowProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWorkflowProfileOutput).ToTemplateWorkflowProfilePtrOutputWithContext(ctx)
}

// TemplateWorkflowProfilePtrInput is an input type that accepts TemplateWorkflowProfileArgs, TemplateWorkflowProfilePtr and TemplateWorkflowProfilePtrOutput values.
// You can construct a concrete instance of `TemplateWorkflowProfilePtrInput` via:
//
//	        TemplateWorkflowProfileArgs{...}
//
//	or:
//
//	        nil
type TemplateWorkflowProfilePtrInput interface {
	pulumi.Input

	ToTemplateWorkflowProfilePtrOutput() TemplateWorkflowProfilePtrOutput
	ToTemplateWorkflowProfilePtrOutputWithContext(context.Context) TemplateWorkflowProfilePtrOutput
}

type templateWorkflowProfilePtrType TemplateWorkflowProfileArgs

func TemplateWorkflowProfilePtr(v *TemplateWorkflowProfileArgs) TemplateWorkflowProfilePtrInput {
	return (*templateWorkflowProfilePtrType)(v)
}

func (*templateWorkflowProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWorkflowProfile)(nil)).Elem()
}

func (i *templateWorkflowProfilePtrType) ToTemplateWorkflowProfilePtrOutput() TemplateWorkflowProfilePtrOutput {
	return i.ToTemplateWorkflowProfilePtrOutputWithContext(context.Background())
}

func (i *templateWorkflowProfilePtrType) ToTemplateWorkflowProfilePtrOutputWithContext(ctx context.Context) TemplateWorkflowProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWorkflowProfilePtrOutput)
}

// Template Workflow Profile
type TemplateWorkflowProfileOutput struct{ *pulumi.OutputState }

func (TemplateWorkflowProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWorkflowProfile)(nil)).Elem()
}

func (o TemplateWorkflowProfileOutput) ToTemplateWorkflowProfileOutput() TemplateWorkflowProfileOutput {
	return o
}

func (o TemplateWorkflowProfileOutput) ToTemplateWorkflowProfileOutputWithContext(ctx context.Context) TemplateWorkflowProfileOutput {
	return o
}

func (o TemplateWorkflowProfileOutput) ToTemplateWorkflowProfilePtrOutput() TemplateWorkflowProfilePtrOutput {
	return o.ToTemplateWorkflowProfilePtrOutputWithContext(context.Background())
}

func (o TemplateWorkflowProfileOutput) ToTemplateWorkflowProfilePtrOutputWithContext(ctx context.Context) TemplateWorkflowProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWorkflowProfile) *TemplateWorkflowProfile {
		return &v
	}).(TemplateWorkflowProfilePtrOutput)
}

// Details of the GitHub repository associated with the workflow.
func (o TemplateWorkflowProfileOutput) AdoProviderProfile() ADOProviderProfilePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfile) *ADOProviderProfile { return v.AdoProviderProfile }).(ADOProviderProfilePtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileOutput) DeploymentTemplate() TemplateReferencePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfile) *TemplateReference { return v.DeploymentTemplate }).(TemplateReferencePtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileOutput) DockerfileTemplate() TemplateReferencePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfile) *TemplateReference { return v.DockerfileTemplate }).(TemplateReferencePtrOutput)
}

// Details of the GitHub repository and credentials associated with the workflow.
func (o TemplateWorkflowProfileOutput) GitHubProviderProfile() GitHubProviderProfilePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfile) *GitHubProviderProfile { return v.GitHubProviderProfile }).(GitHubProviderProfilePtrOutput)
}

func (o TemplateWorkflowProfileOutput) ManifestTemplates() TemplateReferenceArrayOutput {
	return o.ApplyT(func(v TemplateWorkflowProfile) []TemplateReference { return v.ManifestTemplates }).(TemplateReferenceArrayOutput)
}

// The status of the Pull Request submitted against the users repository.
func (o TemplateWorkflowProfileOutput) RepositoryProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfile) *string { return v.RepositoryProvider }).(pulumi.StringPtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileOutput) WorkflowTemplate() TemplateReferencePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfile) *TemplateReference { return v.WorkflowTemplate }).(TemplateReferencePtrOutput)
}

type TemplateWorkflowProfilePtrOutput struct{ *pulumi.OutputState }

func (TemplateWorkflowProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWorkflowProfile)(nil)).Elem()
}

func (o TemplateWorkflowProfilePtrOutput) ToTemplateWorkflowProfilePtrOutput() TemplateWorkflowProfilePtrOutput {
	return o
}

func (o TemplateWorkflowProfilePtrOutput) ToTemplateWorkflowProfilePtrOutputWithContext(ctx context.Context) TemplateWorkflowProfilePtrOutput {
	return o
}

func (o TemplateWorkflowProfilePtrOutput) Elem() TemplateWorkflowProfileOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) TemplateWorkflowProfile {
		if v != nil {
			return *v
		}
		var ret TemplateWorkflowProfile
		return ret
	}).(TemplateWorkflowProfileOutput)
}

// Details of the GitHub repository associated with the workflow.
func (o TemplateWorkflowProfilePtrOutput) AdoProviderProfile() ADOProviderProfilePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) *ADOProviderProfile {
		if v == nil {
			return nil
		}
		return v.AdoProviderProfile
	}).(ADOProviderProfilePtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfilePtrOutput) DeploymentTemplate() TemplateReferencePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) *TemplateReference {
		if v == nil {
			return nil
		}
		return v.DeploymentTemplate
	}).(TemplateReferencePtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfilePtrOutput) DockerfileTemplate() TemplateReferencePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) *TemplateReference {
		if v == nil {
			return nil
		}
		return v.DockerfileTemplate
	}).(TemplateReferencePtrOutput)
}

// Details of the GitHub repository and credentials associated with the workflow.
func (o TemplateWorkflowProfilePtrOutput) GitHubProviderProfile() GitHubProviderProfilePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) *GitHubProviderProfile {
		if v == nil {
			return nil
		}
		return v.GitHubProviderProfile
	}).(GitHubProviderProfilePtrOutput)
}

func (o TemplateWorkflowProfilePtrOutput) ManifestTemplates() TemplateReferenceArrayOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) []TemplateReference {
		if v == nil {
			return nil
		}
		return v.ManifestTemplates
	}).(TemplateReferenceArrayOutput)
}

// The status of the Pull Request submitted against the users repository.
func (o TemplateWorkflowProfilePtrOutput) RepositoryProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryProvider
	}).(pulumi.StringPtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfilePtrOutput) WorkflowTemplate() TemplateReferencePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfile) *TemplateReference {
		if v == nil {
			return nil
		}
		return v.WorkflowTemplate
	}).(TemplateReferencePtrOutput)
}

// Template Workflow Profile
type TemplateWorkflowProfileResponse struct {
	// Details of the GitHub repository associated with the workflow.
	AdoProviderProfile *ADOProviderProfileResponse `pulumi:"adoProviderProfile"`
	// Determines the authorization status of requests.
	AuthStatus string `pulumi:"authStatus"`
	// The properties of ADO OAuth.
	DeploymentTemplate *TemplateReferenceResponse `pulumi:"deploymentTemplate"`
	// The properties of ADO OAuth.
	DockerfileTemplate *TemplateReferenceResponse `pulumi:"dockerfileTemplate"`
	// Details of the GitHub repository and credentials associated with the workflow.
	GitHubProviderProfile *GitHubProviderProfileResponse `pulumi:"gitHubProviderProfile"`
	LastWorkflowRun       *WorkflowRunResponse           `pulumi:"lastWorkflowRun"`
	ManifestTemplates     []TemplateReferenceResponse    `pulumi:"manifestTemplates"`
	// Details of the pull request containing the workflow.
	PullRequest *PullRequestResponse `pulumi:"pullRequest"`
	// The status of the Pull Request submitted against the users repository.
	RepositoryProvider *string `pulumi:"repositoryProvider"`
	// The properties of ADO OAuth.
	WorkflowTemplate *TemplateReferenceResponse `pulumi:"workflowTemplate"`
}

// Template Workflow Profile
type TemplateWorkflowProfileResponseOutput struct{ *pulumi.OutputState }

func (TemplateWorkflowProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWorkflowProfileResponse)(nil)).Elem()
}

func (o TemplateWorkflowProfileResponseOutput) ToTemplateWorkflowProfileResponseOutput() TemplateWorkflowProfileResponseOutput {
	return o
}

func (o TemplateWorkflowProfileResponseOutput) ToTemplateWorkflowProfileResponseOutputWithContext(ctx context.Context) TemplateWorkflowProfileResponseOutput {
	return o
}

// Details of the GitHub repository associated with the workflow.
func (o TemplateWorkflowProfileResponseOutput) AdoProviderProfile() ADOProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *ADOProviderProfileResponse { return v.AdoProviderProfile }).(ADOProviderProfileResponsePtrOutput)
}

// Determines the authorization status of requests.
func (o TemplateWorkflowProfileResponseOutput) AuthStatus() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) string { return v.AuthStatus }).(pulumi.StringOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileResponseOutput) DeploymentTemplate() TemplateReferenceResponsePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *TemplateReferenceResponse { return v.DeploymentTemplate }).(TemplateReferenceResponsePtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileResponseOutput) DockerfileTemplate() TemplateReferenceResponsePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *TemplateReferenceResponse { return v.DockerfileTemplate }).(TemplateReferenceResponsePtrOutput)
}

// Details of the GitHub repository and credentials associated with the workflow.
func (o TemplateWorkflowProfileResponseOutput) GitHubProviderProfile() GitHubProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *GitHubProviderProfileResponse { return v.GitHubProviderProfile }).(GitHubProviderProfileResponsePtrOutput)
}

func (o TemplateWorkflowProfileResponseOutput) LastWorkflowRun() WorkflowRunResponsePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *WorkflowRunResponse { return v.LastWorkflowRun }).(WorkflowRunResponsePtrOutput)
}

func (o TemplateWorkflowProfileResponseOutput) ManifestTemplates() TemplateReferenceResponseArrayOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) []TemplateReferenceResponse { return v.ManifestTemplates }).(TemplateReferenceResponseArrayOutput)
}

// Details of the pull request containing the workflow.
func (o TemplateWorkflowProfileResponseOutput) PullRequest() PullRequestResponsePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *PullRequestResponse { return v.PullRequest }).(PullRequestResponsePtrOutput)
}

// The status of the Pull Request submitted against the users repository.
func (o TemplateWorkflowProfileResponseOutput) RepositoryProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *string { return v.RepositoryProvider }).(pulumi.StringPtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileResponseOutput) WorkflowTemplate() TemplateReferenceResponsePtrOutput {
	return o.ApplyT(func(v TemplateWorkflowProfileResponse) *TemplateReferenceResponse { return v.WorkflowTemplate }).(TemplateReferenceResponsePtrOutput)
}

type TemplateWorkflowProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (TemplateWorkflowProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWorkflowProfileResponse)(nil)).Elem()
}

func (o TemplateWorkflowProfileResponsePtrOutput) ToTemplateWorkflowProfileResponsePtrOutput() TemplateWorkflowProfileResponsePtrOutput {
	return o
}

func (o TemplateWorkflowProfileResponsePtrOutput) ToTemplateWorkflowProfileResponsePtrOutputWithContext(ctx context.Context) TemplateWorkflowProfileResponsePtrOutput {
	return o
}

func (o TemplateWorkflowProfileResponsePtrOutput) Elem() TemplateWorkflowProfileResponseOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) TemplateWorkflowProfileResponse {
		if v != nil {
			return *v
		}
		var ret TemplateWorkflowProfileResponse
		return ret
	}).(TemplateWorkflowProfileResponseOutput)
}

// Details of the GitHub repository associated with the workflow.
func (o TemplateWorkflowProfileResponsePtrOutput) AdoProviderProfile() ADOProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *ADOProviderProfileResponse {
		if v == nil {
			return nil
		}
		return v.AdoProviderProfile
	}).(ADOProviderProfileResponsePtrOutput)
}

// Determines the authorization status of requests.
func (o TemplateWorkflowProfileResponsePtrOutput) AuthStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthStatus
	}).(pulumi.StringPtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileResponsePtrOutput) DeploymentTemplate() TemplateReferenceResponsePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *TemplateReferenceResponse {
		if v == nil {
			return nil
		}
		return v.DeploymentTemplate
	}).(TemplateReferenceResponsePtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileResponsePtrOutput) DockerfileTemplate() TemplateReferenceResponsePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *TemplateReferenceResponse {
		if v == nil {
			return nil
		}
		return v.DockerfileTemplate
	}).(TemplateReferenceResponsePtrOutput)
}

// Details of the GitHub repository and credentials associated with the workflow.
func (o TemplateWorkflowProfileResponsePtrOutput) GitHubProviderProfile() GitHubProviderProfileResponsePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *GitHubProviderProfileResponse {
		if v == nil {
			return nil
		}
		return v.GitHubProviderProfile
	}).(GitHubProviderProfileResponsePtrOutput)
}

func (o TemplateWorkflowProfileResponsePtrOutput) LastWorkflowRun() WorkflowRunResponsePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *WorkflowRunResponse {
		if v == nil {
			return nil
		}
		return v.LastWorkflowRun
	}).(WorkflowRunResponsePtrOutput)
}

func (o TemplateWorkflowProfileResponsePtrOutput) ManifestTemplates() TemplateReferenceResponseArrayOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) []TemplateReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ManifestTemplates
	}).(TemplateReferenceResponseArrayOutput)
}

// Details of the pull request containing the workflow.
func (o TemplateWorkflowProfileResponsePtrOutput) PullRequest() PullRequestResponsePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *PullRequestResponse {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PullRequestResponsePtrOutput)
}

// The status of the Pull Request submitted against the users repository.
func (o TemplateWorkflowProfileResponsePtrOutput) RepositoryProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryProvider
	}).(pulumi.StringPtrOutput)
}

// The properties of ADO OAuth.
func (o TemplateWorkflowProfileResponsePtrOutput) WorkflowTemplate() TemplateReferenceResponsePtrOutput {
	return o.ApplyT(func(v *TemplateWorkflowProfileResponse) *TemplateReferenceResponse {
		if v == nil {
			return nil
		}
		return v.WorkflowTemplate
	}).(TemplateReferenceResponsePtrOutput)
}

// Workflow properties
type WorkflowProperties struct {
	// Properties for generating artifacts like dockerfile and manifests.
	ArtifactGenerationProperties *ArtifactGenerationProperties `pulumi:"artifactGenerationProperties"`
	// Profile of an azure pipeline.
	AzurePipelineProfile *AzurePipelineProfile `pulumi:"azurePipelineProfile"`
	// Profile of a github workflow.
	GithubWorkflowProfile *GitHubWorkflowProfile `pulumi:"githubWorkflowProfile"`
	// Profile of an template workflow.
	TemplateWorkflowProfile *TemplateWorkflowProfile `pulumi:"templateWorkflowProfile"`
}

// WorkflowPropertiesInput is an input type that accepts WorkflowPropertiesArgs and WorkflowPropertiesOutput values.
// You can construct a concrete instance of `WorkflowPropertiesInput` via:
//
//	WorkflowPropertiesArgs{...}
type WorkflowPropertiesInput interface {
	pulumi.Input

	ToWorkflowPropertiesOutput() WorkflowPropertiesOutput
	ToWorkflowPropertiesOutputWithContext(context.Context) WorkflowPropertiesOutput
}

// Workflow properties
type WorkflowPropertiesArgs struct {
	// Properties for generating artifacts like dockerfile and manifests.
	ArtifactGenerationProperties ArtifactGenerationPropertiesPtrInput `pulumi:"artifactGenerationProperties"`
	// Profile of an azure pipeline.
	AzurePipelineProfile AzurePipelineProfilePtrInput `pulumi:"azurePipelineProfile"`
	// Profile of a github workflow.
	GithubWorkflowProfile GitHubWorkflowProfilePtrInput `pulumi:"githubWorkflowProfile"`
	// Profile of an template workflow.
	TemplateWorkflowProfile TemplateWorkflowProfilePtrInput `pulumi:"templateWorkflowProfile"`
}

func (WorkflowPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowProperties)(nil)).Elem()
}

func (i WorkflowPropertiesArgs) ToWorkflowPropertiesOutput() WorkflowPropertiesOutput {
	return i.ToWorkflowPropertiesOutputWithContext(context.Background())
}

func (i WorkflowPropertiesArgs) ToWorkflowPropertiesOutputWithContext(ctx context.Context) WorkflowPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowPropertiesOutput)
}

func (i WorkflowPropertiesArgs) ToWorkflowPropertiesPtrOutput() WorkflowPropertiesPtrOutput {
	return i.ToWorkflowPropertiesPtrOutputWithContext(context.Background())
}

func (i WorkflowPropertiesArgs) ToWorkflowPropertiesPtrOutputWithContext(ctx context.Context) WorkflowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowPropertiesOutput).ToWorkflowPropertiesPtrOutputWithContext(ctx)
}

// WorkflowPropertiesPtrInput is an input type that accepts WorkflowPropertiesArgs, WorkflowPropertiesPtr and WorkflowPropertiesPtrOutput values.
// You can construct a concrete instance of `WorkflowPropertiesPtrInput` via:
//
//	        WorkflowPropertiesArgs{...}
//
//	or:
//
//	        nil
type WorkflowPropertiesPtrInput interface {
	pulumi.Input

	ToWorkflowPropertiesPtrOutput() WorkflowPropertiesPtrOutput
	ToWorkflowPropertiesPtrOutputWithContext(context.Context) WorkflowPropertiesPtrOutput
}

type workflowPropertiesPtrType WorkflowPropertiesArgs

func WorkflowPropertiesPtr(v *WorkflowPropertiesArgs) WorkflowPropertiesPtrInput {
	return (*workflowPropertiesPtrType)(v)
}

func (*workflowPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowProperties)(nil)).Elem()
}

func (i *workflowPropertiesPtrType) ToWorkflowPropertiesPtrOutput() WorkflowPropertiesPtrOutput {
	return i.ToWorkflowPropertiesPtrOutputWithContext(context.Background())
}

func (i *workflowPropertiesPtrType) ToWorkflowPropertiesPtrOutputWithContext(ctx context.Context) WorkflowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowPropertiesPtrOutput)
}

// Workflow properties
type WorkflowPropertiesOutput struct{ *pulumi.OutputState }

func (WorkflowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowProperties)(nil)).Elem()
}

func (o WorkflowPropertiesOutput) ToWorkflowPropertiesOutput() WorkflowPropertiesOutput {
	return o
}

func (o WorkflowPropertiesOutput) ToWorkflowPropertiesOutputWithContext(ctx context.Context) WorkflowPropertiesOutput {
	return o
}

func (o WorkflowPropertiesOutput) ToWorkflowPropertiesPtrOutput() WorkflowPropertiesPtrOutput {
	return o.ToWorkflowPropertiesPtrOutputWithContext(context.Background())
}

func (o WorkflowPropertiesOutput) ToWorkflowPropertiesPtrOutputWithContext(ctx context.Context) WorkflowPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowProperties) *WorkflowProperties {
		return &v
	}).(WorkflowPropertiesPtrOutput)
}

// Properties for generating artifacts like dockerfile and manifests.
func (o WorkflowPropertiesOutput) ArtifactGenerationProperties() ArtifactGenerationPropertiesPtrOutput {
	return o.ApplyT(func(v WorkflowProperties) *ArtifactGenerationProperties { return v.ArtifactGenerationProperties }).(ArtifactGenerationPropertiesPtrOutput)
}

// Profile of an azure pipeline.
func (o WorkflowPropertiesOutput) AzurePipelineProfile() AzurePipelineProfilePtrOutput {
	return o.ApplyT(func(v WorkflowProperties) *AzurePipelineProfile { return v.AzurePipelineProfile }).(AzurePipelineProfilePtrOutput)
}

// Profile of a github workflow.
func (o WorkflowPropertiesOutput) GithubWorkflowProfile() GitHubWorkflowProfilePtrOutput {
	return o.ApplyT(func(v WorkflowProperties) *GitHubWorkflowProfile { return v.GithubWorkflowProfile }).(GitHubWorkflowProfilePtrOutput)
}

// Profile of an template workflow.
func (o WorkflowPropertiesOutput) TemplateWorkflowProfile() TemplateWorkflowProfilePtrOutput {
	return o.ApplyT(func(v WorkflowProperties) *TemplateWorkflowProfile { return v.TemplateWorkflowProfile }).(TemplateWorkflowProfilePtrOutput)
}

type WorkflowPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WorkflowPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowProperties)(nil)).Elem()
}

func (o WorkflowPropertiesPtrOutput) ToWorkflowPropertiesPtrOutput() WorkflowPropertiesPtrOutput {
	return o
}

func (o WorkflowPropertiesPtrOutput) ToWorkflowPropertiesPtrOutputWithContext(ctx context.Context) WorkflowPropertiesPtrOutput {
	return o
}

func (o WorkflowPropertiesPtrOutput) Elem() WorkflowPropertiesOutput {
	return o.ApplyT(func(v *WorkflowProperties) WorkflowProperties {
		if v != nil {
			return *v
		}
		var ret WorkflowProperties
		return ret
	}).(WorkflowPropertiesOutput)
}

// Properties for generating artifacts like dockerfile and manifests.
func (o WorkflowPropertiesPtrOutput) ArtifactGenerationProperties() ArtifactGenerationPropertiesPtrOutput {
	return o.ApplyT(func(v *WorkflowProperties) *ArtifactGenerationProperties {
		if v == nil {
			return nil
		}
		return v.ArtifactGenerationProperties
	}).(ArtifactGenerationPropertiesPtrOutput)
}

// Profile of an azure pipeline.
func (o WorkflowPropertiesPtrOutput) AzurePipelineProfile() AzurePipelineProfilePtrOutput {
	return o.ApplyT(func(v *WorkflowProperties) *AzurePipelineProfile {
		if v == nil {
			return nil
		}
		return v.AzurePipelineProfile
	}).(AzurePipelineProfilePtrOutput)
}

// Profile of a github workflow.
func (o WorkflowPropertiesPtrOutput) GithubWorkflowProfile() GitHubWorkflowProfilePtrOutput {
	return o.ApplyT(func(v *WorkflowProperties) *GitHubWorkflowProfile {
		if v == nil {
			return nil
		}
		return v.GithubWorkflowProfile
	}).(GitHubWorkflowProfilePtrOutput)
}

// Profile of an template workflow.
func (o WorkflowPropertiesPtrOutput) TemplateWorkflowProfile() TemplateWorkflowProfilePtrOutput {
	return o.ApplyT(func(v *WorkflowProperties) *TemplateWorkflowProfile {
		if v == nil {
			return nil
		}
		return v.TemplateWorkflowProfile
	}).(TemplateWorkflowProfilePtrOutput)
}

// Workflow properties
type WorkflowPropertiesResponse struct {
	// Properties for generating artifacts like dockerfile and manifests.
	ArtifactGenerationProperties *ArtifactGenerationPropertiesResponse `pulumi:"artifactGenerationProperties"`
	// Profile of an azure pipeline.
	AzurePipelineProfile *AzurePipelineProfileResponse `pulumi:"azurePipelineProfile"`
	// Profile of a github workflow.
	GithubWorkflowProfile *GitHubWorkflowProfileResponse `pulumi:"githubWorkflowProfile"`
	// Profile of an template workflow.
	TemplateWorkflowProfile *TemplateWorkflowProfileResponse `pulumi:"templateWorkflowProfile"`
}

// Workflow properties
type WorkflowPropertiesResponseOutput struct{ *pulumi.OutputState }

func (WorkflowPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowPropertiesResponse)(nil)).Elem()
}

func (o WorkflowPropertiesResponseOutput) ToWorkflowPropertiesResponseOutput() WorkflowPropertiesResponseOutput {
	return o
}

func (o WorkflowPropertiesResponseOutput) ToWorkflowPropertiesResponseOutputWithContext(ctx context.Context) WorkflowPropertiesResponseOutput {
	return o
}

// Properties for generating artifacts like dockerfile and manifests.
func (o WorkflowPropertiesResponseOutput) ArtifactGenerationProperties() ArtifactGenerationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v WorkflowPropertiesResponse) *ArtifactGenerationPropertiesResponse {
		return v.ArtifactGenerationProperties
	}).(ArtifactGenerationPropertiesResponsePtrOutput)
}

// Profile of an azure pipeline.
func (o WorkflowPropertiesResponseOutput) AzurePipelineProfile() AzurePipelineProfileResponsePtrOutput {
	return o.ApplyT(func(v WorkflowPropertiesResponse) *AzurePipelineProfileResponse { return v.AzurePipelineProfile }).(AzurePipelineProfileResponsePtrOutput)
}

// Profile of a github workflow.
func (o WorkflowPropertiesResponseOutput) GithubWorkflowProfile() GitHubWorkflowProfileResponsePtrOutput {
	return o.ApplyT(func(v WorkflowPropertiesResponse) *GitHubWorkflowProfileResponse { return v.GithubWorkflowProfile }).(GitHubWorkflowProfileResponsePtrOutput)
}

// Profile of an template workflow.
func (o WorkflowPropertiesResponseOutput) TemplateWorkflowProfile() TemplateWorkflowProfileResponsePtrOutput {
	return o.ApplyT(func(v WorkflowPropertiesResponse) *TemplateWorkflowProfileResponse { return v.TemplateWorkflowProfile }).(TemplateWorkflowProfileResponsePtrOutput)
}

type WorkflowRunResponse struct {
	// The timestamp of the last workflow run.
	LastRunAt string `pulumi:"lastRunAt"`
	// Describes if the workflow run succeeded.
	Succeeded bool `pulumi:"succeeded"`
	// Describes the status of the workflow run
	WorkflowRunStatus string `pulumi:"workflowRunStatus"`
	// URL to the run of the workflow.
	WorkflowRunURL string `pulumi:"workflowRunURL"`
}

type WorkflowRunResponseOutput struct{ *pulumi.OutputState }

func (WorkflowRunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowRunResponse)(nil)).Elem()
}

func (o WorkflowRunResponseOutput) ToWorkflowRunResponseOutput() WorkflowRunResponseOutput {
	return o
}

func (o WorkflowRunResponseOutput) ToWorkflowRunResponseOutputWithContext(ctx context.Context) WorkflowRunResponseOutput {
	return o
}

// The timestamp of the last workflow run.
func (o WorkflowRunResponseOutput) LastRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowRunResponse) string { return v.LastRunAt }).(pulumi.StringOutput)
}

// Describes if the workflow run succeeded.
func (o WorkflowRunResponseOutput) Succeeded() pulumi.BoolOutput {
	return o.ApplyT(func(v WorkflowRunResponse) bool { return v.Succeeded }).(pulumi.BoolOutput)
}

// Describes the status of the workflow run
func (o WorkflowRunResponseOutput) WorkflowRunStatus() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowRunResponse) string { return v.WorkflowRunStatus }).(pulumi.StringOutput)
}

// URL to the run of the workflow.
func (o WorkflowRunResponseOutput) WorkflowRunURL() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowRunResponse) string { return v.WorkflowRunURL }).(pulumi.StringOutput)
}

type WorkflowRunResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkflowRunResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowRunResponse)(nil)).Elem()
}

func (o WorkflowRunResponsePtrOutput) ToWorkflowRunResponsePtrOutput() WorkflowRunResponsePtrOutput {
	return o
}

func (o WorkflowRunResponsePtrOutput) ToWorkflowRunResponsePtrOutputWithContext(ctx context.Context) WorkflowRunResponsePtrOutput {
	return o
}

func (o WorkflowRunResponsePtrOutput) Elem() WorkflowRunResponseOutput {
	return o.ApplyT(func(v *WorkflowRunResponse) WorkflowRunResponse {
		if v != nil {
			return *v
		}
		var ret WorkflowRunResponse
		return ret
	}).(WorkflowRunResponseOutput)
}

// The timestamp of the last workflow run.
func (o WorkflowRunResponsePtrOutput) LastRunAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastRunAt
	}).(pulumi.StringPtrOutput)
}

// Describes if the workflow run succeeded.
func (o WorkflowRunResponsePtrOutput) Succeeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowRunResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Succeeded
	}).(pulumi.BoolPtrOutput)
}

// Describes the status of the workflow run
func (o WorkflowRunResponsePtrOutput) WorkflowRunStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkflowRunStatus
	}).(pulumi.StringPtrOutput)
}

// URL to the run of the workflow.
func (o WorkflowRunResponsePtrOutput) WorkflowRunURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkflowRunURL
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ACROutput{})
	pulumi.RegisterOutputType(ACRPtrOutput{})
	pulumi.RegisterOutputType(ACRResponseOutput{})
	pulumi.RegisterOutputType(ACRResponsePtrOutput{})
	pulumi.RegisterOutputType(ADOProviderProfileOutput{})
	pulumi.RegisterOutputType(ADOProviderProfilePtrOutput{})
	pulumi.RegisterOutputType(ADOProviderProfileResponseOutput{})
	pulumi.RegisterOutputType(ADOProviderProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ADORepositoryOutput{})
	pulumi.RegisterOutputType(ADORepositoryPtrOutput{})
	pulumi.RegisterOutputType(ADORepositoryResponseOutput{})
	pulumi.RegisterOutputType(ADORepositoryResponsePtrOutput{})
	pulumi.RegisterOutputType(ArtifactGenerationPropertiesOutput{})
	pulumi.RegisterOutputType(ArtifactGenerationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ArtifactGenerationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ArtifactGenerationPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AzurePipelineProfileOutput{})
	pulumi.RegisterOutputType(AzurePipelineProfilePtrOutput{})
	pulumi.RegisterOutputType(AzurePipelineProfileResponseOutput{})
	pulumi.RegisterOutputType(AzurePipelineProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildOutput{})
	pulumi.RegisterOutputType(BuildPtrOutput{})
	pulumi.RegisterOutputType(BuildResponseOutput{})
	pulumi.RegisterOutputType(BuildResponsePtrOutput{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentPtrOutput{})
	pulumi.RegisterOutputType(DeploymentResponseOutput{})
	pulumi.RegisterOutputType(DeploymentResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubProviderProfileOutput{})
	pulumi.RegisterOutputType(GitHubProviderProfilePtrOutput{})
	pulumi.RegisterOutputType(GitHubProviderProfileResponseOutput{})
	pulumi.RegisterOutputType(GitHubProviderProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubRepositoryOutput{})
	pulumi.RegisterOutputType(GitHubRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GitHubRepositoryResponseOutput{})
	pulumi.RegisterOutputType(GitHubRepositoryResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfileOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfilePtrOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfileOidcCredentialsOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfileOidcCredentialsPtrOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfileResponseOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfileResponseOidcCredentialsOutput{})
	pulumi.RegisterOutputType(GitHubWorkflowProfileResponseOidcCredentialsPtrOutput{})
	pulumi.RegisterOutputType(IacTemplateDetailsOutput{})
	pulumi.RegisterOutputType(IacTemplateDetailsArrayOutput{})
	pulumi.RegisterOutputType(IacTemplateDetailsResponseOutput{})
	pulumi.RegisterOutputType(IacTemplateDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(IacTemplatePropertiesOutput{})
	pulumi.RegisterOutputType(IacTemplatePropertiesArrayOutput{})
	pulumi.RegisterOutputType(IacTemplatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(IacTemplatePropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(OidcCredentialsOutput{})
	pulumi.RegisterOutputType(OidcCredentialsPtrOutput{})
	pulumi.RegisterOutputType(OidcCredentialsResponseOutput{})
	pulumi.RegisterOutputType(OidcCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(PullRequestResponseOutput{})
	pulumi.RegisterOutputType(PullRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(StagePropertiesOutput{})
	pulumi.RegisterOutputType(StagePropertiesArrayOutput{})
	pulumi.RegisterOutputType(StagePropertiesResponseOutput{})
	pulumi.RegisterOutputType(StagePropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TemplateReferenceOutput{})
	pulumi.RegisterOutputType(TemplateReferencePtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceArrayOutput{})
	pulumi.RegisterOutputType(TemplateReferenceResponseOutput{})
	pulumi.RegisterOutputType(TemplateReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(TemplateWorkflowProfileOutput{})
	pulumi.RegisterOutputType(TemplateWorkflowProfilePtrOutput{})
	pulumi.RegisterOutputType(TemplateWorkflowProfileResponseOutput{})
	pulumi.RegisterOutputType(TemplateWorkflowProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkflowPropertiesOutput{})
	pulumi.RegisterOutputType(WorkflowPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WorkflowPropertiesResponseOutput{})
	pulumi.RegisterOutputType(WorkflowRunResponseOutput{})
	pulumi.RegisterOutputType(WorkflowRunResponsePtrOutput{})
}
