// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Show costs accumulated over time.
type AccumulatedType string

const (
	AccumulatedTypeTrue  = AccumulatedType("true")
	AccumulatedTypeFalse = AccumulatedType("false")
)

func (AccumulatedType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccumulatedType)(nil)).Elem()
}

func (e AccumulatedType) ToAccumulatedTypeOutput() AccumulatedTypeOutput {
	return pulumi.ToOutput(e).(AccumulatedTypeOutput)
}

func (e AccumulatedType) ToAccumulatedTypeOutputWithContext(ctx context.Context) AccumulatedTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccumulatedTypeOutput)
}

func (e AccumulatedType) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return e.ToAccumulatedTypePtrOutputWithContext(context.Background())
}

func (e AccumulatedType) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return AccumulatedType(e).ToAccumulatedTypeOutputWithContext(ctx).ToAccumulatedTypePtrOutputWithContext(ctx)
}

func (e AccumulatedType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccumulatedType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccumulatedType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccumulatedType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccumulatedTypeOutput struct{ *pulumi.OutputState }

func (AccumulatedTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccumulatedType)(nil)).Elem()
}

func (o AccumulatedTypeOutput) ToAccumulatedTypeOutput() AccumulatedTypeOutput {
	return o
}

func (o AccumulatedTypeOutput) ToAccumulatedTypeOutputWithContext(ctx context.Context) AccumulatedTypeOutput {
	return o
}

func (o AccumulatedTypeOutput) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return o.ToAccumulatedTypePtrOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccumulatedType) *AccumulatedType {
		return &v
	}).(AccumulatedTypePtrOutput)
}

func (o AccumulatedTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccumulatedType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccumulatedTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccumulatedType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccumulatedTypePtrOutput struct{ *pulumi.OutputState }

func (AccumulatedTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccumulatedType)(nil)).Elem()
}

func (o AccumulatedTypePtrOutput) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return o
}

func (o AccumulatedTypePtrOutput) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return o
}

func (o AccumulatedTypePtrOutput) Elem() AccumulatedTypeOutput {
	return o.ApplyT(func(v *AccumulatedType) AccumulatedType {
		if v != nil {
			return *v
		}
		var ret AccumulatedType
		return ret
	}).(AccumulatedTypeOutput)
}

func (o AccumulatedTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccumulatedTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccumulatedType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccumulatedTypeInput is an input type that accepts values of the AccumulatedType enum
// A concrete instance of `AccumulatedTypeInput` can be one of the following:
//
//	AccumulatedTypeTrue
//	AccumulatedTypeFalse
type AccumulatedTypeInput interface {
	pulumi.Input

	ToAccumulatedTypeOutput() AccumulatedTypeOutput
	ToAccumulatedTypeOutputWithContext(context.Context) AccumulatedTypeOutput
}

var accumulatedTypePtrType = reflect.TypeOf((**AccumulatedType)(nil)).Elem()

type AccumulatedTypePtrInput interface {
	pulumi.Input

	ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput
	ToAccumulatedTypePtrOutputWithContext(context.Context) AccumulatedTypePtrOutput
}

type accumulatedTypePtr string

func AccumulatedTypePtr(v string) AccumulatedTypePtrInput {
	return (*accumulatedTypePtr)(&v)
}

func (*accumulatedTypePtr) ElementType() reflect.Type {
	return accumulatedTypePtrType
}

func (in *accumulatedTypePtr) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return pulumi.ToOutput(in).(AccumulatedTypePtrOutput)
}

func (in *accumulatedTypePtr) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccumulatedTypePtrOutput)
}

func (in *accumulatedTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AccumulatedType] {
	return pulumix.Output[*AccumulatedType]{
		OutputState: in.ToAccumulatedTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The comparison operator.
//
//	Supported for CategoryType(s): Cost, ReservationUtilization.
//
//	Supported operators for **CategoryType: Cost**
//
// - GreaterThan
// - GreaterThanOrEqualTo
//
//	Supported operators for **CategoryType: ReservationUtilization**
//
// - LessThan
type BudgetNotificationOperatorType string

const (
	// Notification will be triggered if the evaluated cost is the same as threshold value. Note: It’s not recommended to use this OperatorType as there’s low chance of cost being exactly the same as threshold value, leading to missing of your alert. This OperatorType will be deprecated in future.
	//
	//  Supported for CategoryType(s): Cost.
	BudgetNotificationOperatorTypeEqualTo = BudgetNotificationOperatorType("EqualTo")
	// Notification will be triggered if the evaluated cost is greater than the threshold value. Note: This is the recommended OperatorType while configuring Budget Alert.
	//
	//  Supported for CategoryType(s): Cost.
	BudgetNotificationOperatorTypeGreaterThan = BudgetNotificationOperatorType("GreaterThan")
	// Notification will be triggered if the evaluated cost is greater than or equal to the threshold value.
	//
	//  Supported for CategoryType(s): Cost.
	BudgetNotificationOperatorTypeGreaterThanOrEqualTo = BudgetNotificationOperatorType("GreaterThanOrEqualTo")
	// Notification will be triggered if any Reservations in the scope of the Reservation Utilization Alert Rule have a utilization less than the threshold percentage.
	//
	//  Supported for CategoryType(s): ReservationUtilization.
	BudgetNotificationOperatorTypeLessThan = BudgetNotificationOperatorType("LessThan")
)

func (BudgetNotificationOperatorType) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotificationOperatorType)(nil)).Elem()
}

func (e BudgetNotificationOperatorType) ToBudgetNotificationOperatorTypeOutput() BudgetNotificationOperatorTypeOutput {
	return pulumi.ToOutput(e).(BudgetNotificationOperatorTypeOutput)
}

func (e BudgetNotificationOperatorType) ToBudgetNotificationOperatorTypeOutputWithContext(ctx context.Context) BudgetNotificationOperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BudgetNotificationOperatorTypeOutput)
}

func (e BudgetNotificationOperatorType) ToBudgetNotificationOperatorTypePtrOutput() BudgetNotificationOperatorTypePtrOutput {
	return e.ToBudgetNotificationOperatorTypePtrOutputWithContext(context.Background())
}

func (e BudgetNotificationOperatorType) ToBudgetNotificationOperatorTypePtrOutputWithContext(ctx context.Context) BudgetNotificationOperatorTypePtrOutput {
	return BudgetNotificationOperatorType(e).ToBudgetNotificationOperatorTypeOutputWithContext(ctx).ToBudgetNotificationOperatorTypePtrOutputWithContext(ctx)
}

func (e BudgetNotificationOperatorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BudgetNotificationOperatorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BudgetNotificationOperatorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BudgetNotificationOperatorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BudgetNotificationOperatorTypeOutput struct{ *pulumi.OutputState }

func (BudgetNotificationOperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetNotificationOperatorType)(nil)).Elem()
}

func (o BudgetNotificationOperatorTypeOutput) ToBudgetNotificationOperatorTypeOutput() BudgetNotificationOperatorTypeOutput {
	return o
}

func (o BudgetNotificationOperatorTypeOutput) ToBudgetNotificationOperatorTypeOutputWithContext(ctx context.Context) BudgetNotificationOperatorTypeOutput {
	return o
}

func (o BudgetNotificationOperatorTypeOutput) ToBudgetNotificationOperatorTypePtrOutput() BudgetNotificationOperatorTypePtrOutput {
	return o.ToBudgetNotificationOperatorTypePtrOutputWithContext(context.Background())
}

func (o BudgetNotificationOperatorTypeOutput) ToBudgetNotificationOperatorTypePtrOutputWithContext(ctx context.Context) BudgetNotificationOperatorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetNotificationOperatorType) *BudgetNotificationOperatorType {
		return &v
	}).(BudgetNotificationOperatorTypePtrOutput)
}

func (o BudgetNotificationOperatorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BudgetNotificationOperatorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BudgetNotificationOperatorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BudgetNotificationOperatorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BudgetNotificationOperatorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BudgetNotificationOperatorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BudgetNotificationOperatorTypePtrOutput struct{ *pulumi.OutputState }

func (BudgetNotificationOperatorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetNotificationOperatorType)(nil)).Elem()
}

func (o BudgetNotificationOperatorTypePtrOutput) ToBudgetNotificationOperatorTypePtrOutput() BudgetNotificationOperatorTypePtrOutput {
	return o
}

func (o BudgetNotificationOperatorTypePtrOutput) ToBudgetNotificationOperatorTypePtrOutputWithContext(ctx context.Context) BudgetNotificationOperatorTypePtrOutput {
	return o
}

func (o BudgetNotificationOperatorTypePtrOutput) Elem() BudgetNotificationOperatorTypeOutput {
	return o.ApplyT(func(v *BudgetNotificationOperatorType) BudgetNotificationOperatorType {
		if v != nil {
			return *v
		}
		var ret BudgetNotificationOperatorType
		return ret
	}).(BudgetNotificationOperatorTypeOutput)
}

func (o BudgetNotificationOperatorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BudgetNotificationOperatorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BudgetNotificationOperatorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BudgetNotificationOperatorTypeInput is an input type that accepts values of the BudgetNotificationOperatorType enum
// A concrete instance of `BudgetNotificationOperatorTypeInput` can be one of the following:
//
//	BudgetNotificationOperatorTypeEqualTo
//	BudgetNotificationOperatorTypeGreaterThan
//	BudgetNotificationOperatorTypeGreaterThanOrEqualTo
//	BudgetNotificationOperatorTypeLessThan
type BudgetNotificationOperatorTypeInput interface {
	pulumi.Input

	ToBudgetNotificationOperatorTypeOutput() BudgetNotificationOperatorTypeOutput
	ToBudgetNotificationOperatorTypeOutputWithContext(context.Context) BudgetNotificationOperatorTypeOutput
}

var budgetNotificationOperatorTypePtrType = reflect.TypeOf((**BudgetNotificationOperatorType)(nil)).Elem()

type BudgetNotificationOperatorTypePtrInput interface {
	pulumi.Input

	ToBudgetNotificationOperatorTypePtrOutput() BudgetNotificationOperatorTypePtrOutput
	ToBudgetNotificationOperatorTypePtrOutputWithContext(context.Context) BudgetNotificationOperatorTypePtrOutput
}

type budgetNotificationOperatorTypePtr string

func BudgetNotificationOperatorTypePtr(v string) BudgetNotificationOperatorTypePtrInput {
	return (*budgetNotificationOperatorTypePtr)(&v)
}

func (*budgetNotificationOperatorTypePtr) ElementType() reflect.Type {
	return budgetNotificationOperatorTypePtrType
}

func (in *budgetNotificationOperatorTypePtr) ToBudgetNotificationOperatorTypePtrOutput() BudgetNotificationOperatorTypePtrOutput {
	return pulumi.ToOutput(in).(BudgetNotificationOperatorTypePtrOutput)
}

func (in *budgetNotificationOperatorTypePtr) ToBudgetNotificationOperatorTypePtrOutputWithContext(ctx context.Context) BudgetNotificationOperatorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BudgetNotificationOperatorTypePtrOutput)
}

func (in *budgetNotificationOperatorTypePtr) ToOutput(ctx context.Context) pulumix.Output[*BudgetNotificationOperatorType] {
	return pulumix.Output[*BudgetNotificationOperatorType]{
		OutputState: in.ToBudgetNotificationOperatorTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The operator to use for comparison.
type BudgetOperatorType string

const (
	BudgetOperatorTypeIn = BudgetOperatorType("In")
)

func (BudgetOperatorType) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetOperatorType)(nil)).Elem()
}

func (e BudgetOperatorType) ToBudgetOperatorTypeOutput() BudgetOperatorTypeOutput {
	return pulumi.ToOutput(e).(BudgetOperatorTypeOutput)
}

func (e BudgetOperatorType) ToBudgetOperatorTypeOutputWithContext(ctx context.Context) BudgetOperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BudgetOperatorTypeOutput)
}

func (e BudgetOperatorType) ToBudgetOperatorTypePtrOutput() BudgetOperatorTypePtrOutput {
	return e.ToBudgetOperatorTypePtrOutputWithContext(context.Background())
}

func (e BudgetOperatorType) ToBudgetOperatorTypePtrOutputWithContext(ctx context.Context) BudgetOperatorTypePtrOutput {
	return BudgetOperatorType(e).ToBudgetOperatorTypeOutputWithContext(ctx).ToBudgetOperatorTypePtrOutputWithContext(ctx)
}

func (e BudgetOperatorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BudgetOperatorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BudgetOperatorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BudgetOperatorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BudgetOperatorTypeOutput struct{ *pulumi.OutputState }

func (BudgetOperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetOperatorType)(nil)).Elem()
}

func (o BudgetOperatorTypeOutput) ToBudgetOperatorTypeOutput() BudgetOperatorTypeOutput {
	return o
}

func (o BudgetOperatorTypeOutput) ToBudgetOperatorTypeOutputWithContext(ctx context.Context) BudgetOperatorTypeOutput {
	return o
}

func (o BudgetOperatorTypeOutput) ToBudgetOperatorTypePtrOutput() BudgetOperatorTypePtrOutput {
	return o.ToBudgetOperatorTypePtrOutputWithContext(context.Background())
}

func (o BudgetOperatorTypeOutput) ToBudgetOperatorTypePtrOutputWithContext(ctx context.Context) BudgetOperatorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetOperatorType) *BudgetOperatorType {
		return &v
	}).(BudgetOperatorTypePtrOutput)
}

func (o BudgetOperatorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BudgetOperatorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BudgetOperatorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BudgetOperatorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BudgetOperatorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BudgetOperatorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BudgetOperatorTypePtrOutput struct{ *pulumi.OutputState }

func (BudgetOperatorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetOperatorType)(nil)).Elem()
}

func (o BudgetOperatorTypePtrOutput) ToBudgetOperatorTypePtrOutput() BudgetOperatorTypePtrOutput {
	return o
}

func (o BudgetOperatorTypePtrOutput) ToBudgetOperatorTypePtrOutputWithContext(ctx context.Context) BudgetOperatorTypePtrOutput {
	return o
}

func (o BudgetOperatorTypePtrOutput) Elem() BudgetOperatorTypeOutput {
	return o.ApplyT(func(v *BudgetOperatorType) BudgetOperatorType {
		if v != nil {
			return *v
		}
		var ret BudgetOperatorType
		return ret
	}).(BudgetOperatorTypeOutput)
}

func (o BudgetOperatorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BudgetOperatorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BudgetOperatorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BudgetOperatorTypeInput is an input type that accepts values of the BudgetOperatorType enum
// A concrete instance of `BudgetOperatorTypeInput` can be one of the following:
//
//	BudgetOperatorTypeIn
type BudgetOperatorTypeInput interface {
	pulumi.Input

	ToBudgetOperatorTypeOutput() BudgetOperatorTypeOutput
	ToBudgetOperatorTypeOutputWithContext(context.Context) BudgetOperatorTypeOutput
}

var budgetOperatorTypePtrType = reflect.TypeOf((**BudgetOperatorType)(nil)).Elem()

type BudgetOperatorTypePtrInput interface {
	pulumi.Input

	ToBudgetOperatorTypePtrOutput() BudgetOperatorTypePtrOutput
	ToBudgetOperatorTypePtrOutputWithContext(context.Context) BudgetOperatorTypePtrOutput
}

type budgetOperatorTypePtr string

func BudgetOperatorTypePtr(v string) BudgetOperatorTypePtrInput {
	return (*budgetOperatorTypePtr)(&v)
}

func (*budgetOperatorTypePtr) ElementType() reflect.Type {
	return budgetOperatorTypePtrType
}

func (in *budgetOperatorTypePtr) ToBudgetOperatorTypePtrOutput() BudgetOperatorTypePtrOutput {
	return pulumi.ToOutput(in).(BudgetOperatorTypePtrOutput)
}

func (in *budgetOperatorTypePtr) ToBudgetOperatorTypePtrOutputWithContext(ctx context.Context) BudgetOperatorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BudgetOperatorTypePtrOutput)
}

func (in *budgetOperatorTypePtr) ToOutput(ctx context.Context) pulumix.Output[*BudgetOperatorType] {
	return pulumix.Output[*BudgetOperatorType]{
		OutputState: in.ToBudgetOperatorTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The category of the budget.
// - 'Cost' defines a Budget.
// - 'ReservationUtilization' defines a Reservation Utilization Alert Rule.
type CategoryType string

const (
	// A Budget that evaluates monetary cost of Azure resources against an amount, and alerts based on a configured notification threshold.
	CategoryTypeCost = CategoryType("Cost")
	// An Alert Rule that evaluates the utilization percentage of Azure Reservations, and alerts based on a configured notification threshold.
	CategoryTypeReservationUtilization = CategoryType("ReservationUtilization")
)

func (CategoryType) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoryType)(nil)).Elem()
}

func (e CategoryType) ToCategoryTypeOutput() CategoryTypeOutput {
	return pulumi.ToOutput(e).(CategoryTypeOutput)
}

func (e CategoryType) ToCategoryTypeOutputWithContext(ctx context.Context) CategoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CategoryTypeOutput)
}

func (e CategoryType) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return e.ToCategoryTypePtrOutputWithContext(context.Background())
}

func (e CategoryType) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return CategoryType(e).ToCategoryTypeOutputWithContext(ctx).ToCategoryTypePtrOutputWithContext(ctx)
}

func (e CategoryType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CategoryType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CategoryType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CategoryType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CategoryTypeOutput struct{ *pulumi.OutputState }

func (CategoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoryType)(nil)).Elem()
}

func (o CategoryTypeOutput) ToCategoryTypeOutput() CategoryTypeOutput {
	return o
}

func (o CategoryTypeOutput) ToCategoryTypeOutputWithContext(ctx context.Context) CategoryTypeOutput {
	return o
}

func (o CategoryTypeOutput) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return o.ToCategoryTypePtrOutputWithContext(context.Background())
}

func (o CategoryTypeOutput) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CategoryType) *CategoryType {
		return &v
	}).(CategoryTypePtrOutput)
}

func (o CategoryTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CategoryTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CategoryType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CategoryTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CategoryTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CategoryType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CategoryTypePtrOutput struct{ *pulumi.OutputState }

func (CategoryTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryType)(nil)).Elem()
}

func (o CategoryTypePtrOutput) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return o
}

func (o CategoryTypePtrOutput) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return o
}

func (o CategoryTypePtrOutput) Elem() CategoryTypeOutput {
	return o.ApplyT(func(v *CategoryType) CategoryType {
		if v != nil {
			return *v
		}
		var ret CategoryType
		return ret
	}).(CategoryTypeOutput)
}

func (o CategoryTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CategoryTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CategoryType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CategoryTypeInput is an input type that accepts values of the CategoryType enum
// A concrete instance of `CategoryTypeInput` can be one of the following:
//
//	CategoryTypeCost
//	CategoryTypeReservationUtilization
type CategoryTypeInput interface {
	pulumi.Input

	ToCategoryTypeOutput() CategoryTypeOutput
	ToCategoryTypeOutputWithContext(context.Context) CategoryTypeOutput
}

var categoryTypePtrType = reflect.TypeOf((**CategoryType)(nil)).Elem()

type CategoryTypePtrInput interface {
	pulumi.Input

	ToCategoryTypePtrOutput() CategoryTypePtrOutput
	ToCategoryTypePtrOutputWithContext(context.Context) CategoryTypePtrOutput
}

type categoryTypePtr string

func CategoryTypePtr(v string) CategoryTypePtrInput {
	return (*categoryTypePtr)(&v)
}

func (*categoryTypePtr) ElementType() reflect.Type {
	return categoryTypePtrType
}

func (in *categoryTypePtr) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return pulumi.ToOutput(in).(CategoryTypePtrOutput)
}

func (in *categoryTypePtr) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CategoryTypePtrOutput)
}

func (in *categoryTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CategoryType] {
	return pulumix.Output[*CategoryType]{
		OutputState: in.ToCategoryTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Chart type of the main view in Cost Analysis. Required.
type ChartType string

const (
	ChartTypeArea          = ChartType("Area")
	ChartTypeLine          = ChartType("Line")
	ChartTypeStackedColumn = ChartType("StackedColumn")
	ChartTypeGroupedColumn = ChartType("GroupedColumn")
	ChartTypeTable         = ChartType("Table")
)

func (ChartType) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartType)(nil)).Elem()
}

func (e ChartType) ToChartTypeOutput() ChartTypeOutput {
	return pulumi.ToOutput(e).(ChartTypeOutput)
}

func (e ChartType) ToChartTypeOutputWithContext(ctx context.Context) ChartTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ChartTypeOutput)
}

func (e ChartType) ToChartTypePtrOutput() ChartTypePtrOutput {
	return e.ToChartTypePtrOutputWithContext(context.Background())
}

func (e ChartType) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return ChartType(e).ToChartTypeOutputWithContext(ctx).ToChartTypePtrOutputWithContext(ctx)
}

func (e ChartType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChartType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ChartTypeOutput struct{ *pulumi.OutputState }

func (ChartTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartType)(nil)).Elem()
}

func (o ChartTypeOutput) ToChartTypeOutput() ChartTypeOutput {
	return o
}

func (o ChartTypeOutput) ToChartTypeOutputWithContext(ctx context.Context) ChartTypeOutput {
	return o
}

func (o ChartTypeOutput) ToChartTypePtrOutput() ChartTypePtrOutput {
	return o.ToChartTypePtrOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartType) *ChartType {
		return &v
	}).(ChartTypePtrOutput)
}

func (o ChartTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ChartTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ChartTypePtrOutput struct{ *pulumi.OutputState }

func (ChartTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartType)(nil)).Elem()
}

func (o ChartTypePtrOutput) ToChartTypePtrOutput() ChartTypePtrOutput {
	return o
}

func (o ChartTypePtrOutput) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return o
}

func (o ChartTypePtrOutput) Elem() ChartTypeOutput {
	return o.ApplyT(func(v *ChartType) ChartType {
		if v != nil {
			return *v
		}
		var ret ChartType
		return ret
	}).(ChartTypeOutput)
}

func (o ChartTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ChartType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ChartTypeInput is an input type that accepts values of the ChartType enum
// A concrete instance of `ChartTypeInput` can be one of the following:
//
//	ChartTypeArea
//	ChartTypeLine
//	ChartTypeStackedColumn
//	ChartTypeGroupedColumn
//	ChartTypeTable
type ChartTypeInput interface {
	pulumi.Input

	ToChartTypeOutput() ChartTypeOutput
	ToChartTypeOutputWithContext(context.Context) ChartTypeOutput
}

var chartTypePtrType = reflect.TypeOf((**ChartType)(nil)).Elem()

type ChartTypePtrInput interface {
	pulumi.Input

	ToChartTypePtrOutput() ChartTypePtrOutput
	ToChartTypePtrOutputWithContext(context.Context) ChartTypePtrOutput
}

type chartTypePtr string

func ChartTypePtr(v string) ChartTypePtrInput {
	return (*chartTypePtr)(&v)
}

func (*chartTypePtr) ElementType() reflect.Type {
	return chartTypePtrType
}

func (in *chartTypePtr) ToChartTypePtrOutput() ChartTypePtrOutput {
	return pulumi.ToOutput(in).(ChartTypePtrOutput)
}

func (in *chartTypePtr) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ChartTypePtrOutput)
}

func (in *chartTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ChartType] {
	return pulumix.Output[*ChartType]{
		OutputState: in.ToChartTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Method of cost allocation for the rule
type CostAllocationPolicyType string

const (
	CostAllocationPolicyTypeFixedProportion = CostAllocationPolicyType("FixedProportion")
)

func (CostAllocationPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationPolicyType)(nil)).Elem()
}

func (e CostAllocationPolicyType) ToCostAllocationPolicyTypeOutput() CostAllocationPolicyTypeOutput {
	return pulumi.ToOutput(e).(CostAllocationPolicyTypeOutput)
}

func (e CostAllocationPolicyType) ToCostAllocationPolicyTypeOutputWithContext(ctx context.Context) CostAllocationPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CostAllocationPolicyTypeOutput)
}

func (e CostAllocationPolicyType) ToCostAllocationPolicyTypePtrOutput() CostAllocationPolicyTypePtrOutput {
	return e.ToCostAllocationPolicyTypePtrOutputWithContext(context.Background())
}

func (e CostAllocationPolicyType) ToCostAllocationPolicyTypePtrOutputWithContext(ctx context.Context) CostAllocationPolicyTypePtrOutput {
	return CostAllocationPolicyType(e).ToCostAllocationPolicyTypeOutputWithContext(ctx).ToCostAllocationPolicyTypePtrOutputWithContext(ctx)
}

func (e CostAllocationPolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CostAllocationPolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CostAllocationPolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CostAllocationPolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CostAllocationPolicyTypeOutput struct{ *pulumi.OutputState }

func (CostAllocationPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationPolicyType)(nil)).Elem()
}

func (o CostAllocationPolicyTypeOutput) ToCostAllocationPolicyTypeOutput() CostAllocationPolicyTypeOutput {
	return o
}

func (o CostAllocationPolicyTypeOutput) ToCostAllocationPolicyTypeOutputWithContext(ctx context.Context) CostAllocationPolicyTypeOutput {
	return o
}

func (o CostAllocationPolicyTypeOutput) ToCostAllocationPolicyTypePtrOutput() CostAllocationPolicyTypePtrOutput {
	return o.ToCostAllocationPolicyTypePtrOutputWithContext(context.Background())
}

func (o CostAllocationPolicyTypeOutput) ToCostAllocationPolicyTypePtrOutputWithContext(ctx context.Context) CostAllocationPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostAllocationPolicyType) *CostAllocationPolicyType {
		return &v
	}).(CostAllocationPolicyTypePtrOutput)
}

func (o CostAllocationPolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CostAllocationPolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CostAllocationPolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CostAllocationPolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CostAllocationPolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CostAllocationPolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CostAllocationPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (CostAllocationPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationPolicyType)(nil)).Elem()
}

func (o CostAllocationPolicyTypePtrOutput) ToCostAllocationPolicyTypePtrOutput() CostAllocationPolicyTypePtrOutput {
	return o
}

func (o CostAllocationPolicyTypePtrOutput) ToCostAllocationPolicyTypePtrOutputWithContext(ctx context.Context) CostAllocationPolicyTypePtrOutput {
	return o
}

func (o CostAllocationPolicyTypePtrOutput) Elem() CostAllocationPolicyTypeOutput {
	return o.ApplyT(func(v *CostAllocationPolicyType) CostAllocationPolicyType {
		if v != nil {
			return *v
		}
		var ret CostAllocationPolicyType
		return ret
	}).(CostAllocationPolicyTypeOutput)
}

func (o CostAllocationPolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CostAllocationPolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CostAllocationPolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CostAllocationPolicyTypeInput is an input type that accepts values of the CostAllocationPolicyType enum
// A concrete instance of `CostAllocationPolicyTypeInput` can be one of the following:
//
//	CostAllocationPolicyTypeFixedProportion
type CostAllocationPolicyTypeInput interface {
	pulumi.Input

	ToCostAllocationPolicyTypeOutput() CostAllocationPolicyTypeOutput
	ToCostAllocationPolicyTypeOutputWithContext(context.Context) CostAllocationPolicyTypeOutput
}

var costAllocationPolicyTypePtrType = reflect.TypeOf((**CostAllocationPolicyType)(nil)).Elem()

type CostAllocationPolicyTypePtrInput interface {
	pulumi.Input

	ToCostAllocationPolicyTypePtrOutput() CostAllocationPolicyTypePtrOutput
	ToCostAllocationPolicyTypePtrOutputWithContext(context.Context) CostAllocationPolicyTypePtrOutput
}

type costAllocationPolicyTypePtr string

func CostAllocationPolicyTypePtr(v string) CostAllocationPolicyTypePtrInput {
	return (*costAllocationPolicyTypePtr)(&v)
}

func (*costAllocationPolicyTypePtr) ElementType() reflect.Type {
	return costAllocationPolicyTypePtrType
}

func (in *costAllocationPolicyTypePtr) ToCostAllocationPolicyTypePtrOutput() CostAllocationPolicyTypePtrOutput {
	return pulumi.ToOutput(in).(CostAllocationPolicyTypePtrOutput)
}

func (in *costAllocationPolicyTypePtr) ToCostAllocationPolicyTypePtrOutputWithContext(ctx context.Context) CostAllocationPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CostAllocationPolicyTypePtrOutput)
}

func (in *costAllocationPolicyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CostAllocationPolicyType] {
	return pulumix.Output[*CostAllocationPolicyType]{
		OutputState: in.ToCostAllocationPolicyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Type of resources contained in this cost allocation rule
type CostAllocationResourceType string

const (
	// Indicates an Azure dimension such as a subscription id or resource group name is being used for allocation.
	CostAllocationResourceTypeDimension = CostAllocationResourceType("Dimension")
	// Allocates cost based on Azure Tag key value pairs.
	CostAllocationResourceTypeTag = CostAllocationResourceType("Tag")
)

func (CostAllocationResourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationResourceType)(nil)).Elem()
}

func (e CostAllocationResourceType) ToCostAllocationResourceTypeOutput() CostAllocationResourceTypeOutput {
	return pulumi.ToOutput(e).(CostAllocationResourceTypeOutput)
}

func (e CostAllocationResourceType) ToCostAllocationResourceTypeOutputWithContext(ctx context.Context) CostAllocationResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CostAllocationResourceTypeOutput)
}

func (e CostAllocationResourceType) ToCostAllocationResourceTypePtrOutput() CostAllocationResourceTypePtrOutput {
	return e.ToCostAllocationResourceTypePtrOutputWithContext(context.Background())
}

func (e CostAllocationResourceType) ToCostAllocationResourceTypePtrOutputWithContext(ctx context.Context) CostAllocationResourceTypePtrOutput {
	return CostAllocationResourceType(e).ToCostAllocationResourceTypeOutputWithContext(ctx).ToCostAllocationResourceTypePtrOutputWithContext(ctx)
}

func (e CostAllocationResourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CostAllocationResourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CostAllocationResourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CostAllocationResourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CostAllocationResourceTypeOutput struct{ *pulumi.OutputState }

func (CostAllocationResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationResourceType)(nil)).Elem()
}

func (o CostAllocationResourceTypeOutput) ToCostAllocationResourceTypeOutput() CostAllocationResourceTypeOutput {
	return o
}

func (o CostAllocationResourceTypeOutput) ToCostAllocationResourceTypeOutputWithContext(ctx context.Context) CostAllocationResourceTypeOutput {
	return o
}

func (o CostAllocationResourceTypeOutput) ToCostAllocationResourceTypePtrOutput() CostAllocationResourceTypePtrOutput {
	return o.ToCostAllocationResourceTypePtrOutputWithContext(context.Background())
}

func (o CostAllocationResourceTypeOutput) ToCostAllocationResourceTypePtrOutputWithContext(ctx context.Context) CostAllocationResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostAllocationResourceType) *CostAllocationResourceType {
		return &v
	}).(CostAllocationResourceTypePtrOutput)
}

func (o CostAllocationResourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CostAllocationResourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CostAllocationResourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CostAllocationResourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CostAllocationResourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CostAllocationResourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CostAllocationResourceTypePtrOutput struct{ *pulumi.OutputState }

func (CostAllocationResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationResourceType)(nil)).Elem()
}

func (o CostAllocationResourceTypePtrOutput) ToCostAllocationResourceTypePtrOutput() CostAllocationResourceTypePtrOutput {
	return o
}

func (o CostAllocationResourceTypePtrOutput) ToCostAllocationResourceTypePtrOutputWithContext(ctx context.Context) CostAllocationResourceTypePtrOutput {
	return o
}

func (o CostAllocationResourceTypePtrOutput) Elem() CostAllocationResourceTypeOutput {
	return o.ApplyT(func(v *CostAllocationResourceType) CostAllocationResourceType {
		if v != nil {
			return *v
		}
		var ret CostAllocationResourceType
		return ret
	}).(CostAllocationResourceTypeOutput)
}

func (o CostAllocationResourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CostAllocationResourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CostAllocationResourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CostAllocationResourceTypeInput is an input type that accepts values of the CostAllocationResourceType enum
// A concrete instance of `CostAllocationResourceTypeInput` can be one of the following:
//
//	CostAllocationResourceTypeDimension
//	CostAllocationResourceTypeTag
type CostAllocationResourceTypeInput interface {
	pulumi.Input

	ToCostAllocationResourceTypeOutput() CostAllocationResourceTypeOutput
	ToCostAllocationResourceTypeOutputWithContext(context.Context) CostAllocationResourceTypeOutput
}

var costAllocationResourceTypePtrType = reflect.TypeOf((**CostAllocationResourceType)(nil)).Elem()

type CostAllocationResourceTypePtrInput interface {
	pulumi.Input

	ToCostAllocationResourceTypePtrOutput() CostAllocationResourceTypePtrOutput
	ToCostAllocationResourceTypePtrOutputWithContext(context.Context) CostAllocationResourceTypePtrOutput
}

type costAllocationResourceTypePtr string

func CostAllocationResourceTypePtr(v string) CostAllocationResourceTypePtrInput {
	return (*costAllocationResourceTypePtr)(&v)
}

func (*costAllocationResourceTypePtr) ElementType() reflect.Type {
	return costAllocationResourceTypePtrType
}

func (in *costAllocationResourceTypePtr) ToCostAllocationResourceTypePtrOutput() CostAllocationResourceTypePtrOutput {
	return pulumi.ToOutput(in).(CostAllocationResourceTypePtrOutput)
}

func (in *costAllocationResourceTypePtr) ToCostAllocationResourceTypePtrOutputWithContext(ctx context.Context) CostAllocationResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CostAllocationResourceTypePtrOutput)
}

func (in *costAllocationResourceTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CostAllocationResourceType] {
	return pulumix.Output[*CostAllocationResourceType]{
		OutputState: in.ToCostAllocationResourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Language in which the recipient will receive the notification,
//
//	Supported for CategoryType(s): Cost, ReservationUtilization.
type CultureCode string

const (
	CultureCode_En_Us = CultureCode("en-us")
	CultureCode_Ja_Jp = CultureCode("ja-jp")
	CultureCode_Zh_Cn = CultureCode("zh-cn")
	CultureCode_De_De = CultureCode("de-de")
	CultureCode_Es_Es = CultureCode("es-es")
	CultureCode_Fr_Fr = CultureCode("fr-fr")
	CultureCode_It_It = CultureCode("it-it")
	CultureCode_Ko_Kr = CultureCode("ko-kr")
	CultureCode_Pt_Br = CultureCode("pt-br")
	CultureCode_Ru_Ru = CultureCode("ru-ru")
	CultureCode_Zh_Tw = CultureCode("zh-tw")
	CultureCode_Cs_Cz = CultureCode("cs-cz")
	CultureCode_Pl_Pl = CultureCode("pl-pl")
	CultureCode_Tr_Tr = CultureCode("tr-tr")
	CultureCode_Da_Dk = CultureCode("da-dk")
	CultureCode_En_Gb = CultureCode("en-gb")
	CultureCode_Hu_Hu = CultureCode("hu-hu")
	CultureCode_Nb_No = CultureCode("nb-no")
	CultureCode_Nl_Nl = CultureCode("nl-nl")
	CultureCode_Pt_Pt = CultureCode("pt-pt")
	CultureCode_Sv_Se = CultureCode("sv-se")
)

func (CultureCode) ElementType() reflect.Type {
	return reflect.TypeOf((*CultureCode)(nil)).Elem()
}

func (e CultureCode) ToCultureCodeOutput() CultureCodeOutput {
	return pulumi.ToOutput(e).(CultureCodeOutput)
}

func (e CultureCode) ToCultureCodeOutputWithContext(ctx context.Context) CultureCodeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CultureCodeOutput)
}

func (e CultureCode) ToCultureCodePtrOutput() CultureCodePtrOutput {
	return e.ToCultureCodePtrOutputWithContext(context.Background())
}

func (e CultureCode) ToCultureCodePtrOutputWithContext(ctx context.Context) CultureCodePtrOutput {
	return CultureCode(e).ToCultureCodeOutputWithContext(ctx).ToCultureCodePtrOutputWithContext(ctx)
}

func (e CultureCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CultureCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CultureCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CultureCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CultureCodeOutput struct{ *pulumi.OutputState }

func (CultureCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CultureCode)(nil)).Elem()
}

func (o CultureCodeOutput) ToCultureCodeOutput() CultureCodeOutput {
	return o
}

func (o CultureCodeOutput) ToCultureCodeOutputWithContext(ctx context.Context) CultureCodeOutput {
	return o
}

func (o CultureCodeOutput) ToCultureCodePtrOutput() CultureCodePtrOutput {
	return o.ToCultureCodePtrOutputWithContext(context.Background())
}

func (o CultureCodeOutput) ToCultureCodePtrOutputWithContext(ctx context.Context) CultureCodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CultureCode) *CultureCode {
		return &v
	}).(CultureCodePtrOutput)
}

func (o CultureCodeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CultureCodeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CultureCode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CultureCodeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CultureCodeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CultureCode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CultureCodePtrOutput struct{ *pulumi.OutputState }

func (CultureCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CultureCode)(nil)).Elem()
}

func (o CultureCodePtrOutput) ToCultureCodePtrOutput() CultureCodePtrOutput {
	return o
}

func (o CultureCodePtrOutput) ToCultureCodePtrOutputWithContext(ctx context.Context) CultureCodePtrOutput {
	return o
}

func (o CultureCodePtrOutput) Elem() CultureCodeOutput {
	return o.ApplyT(func(v *CultureCode) CultureCode {
		if v != nil {
			return *v
		}
		var ret CultureCode
		return ret
	}).(CultureCodeOutput)
}

func (o CultureCodePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CultureCodePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CultureCode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CultureCodeInput is an input type that accepts values of the CultureCode enum
// A concrete instance of `CultureCodeInput` can be one of the following:
//
//	CultureCode_En_Us
//	CultureCode_Ja_Jp
//	CultureCode_Zh_Cn
//	CultureCode_De_De
//	CultureCode_Es_Es
//	CultureCode_Fr_Fr
//	CultureCode_It_It
//	CultureCode_Ko_Kr
//	CultureCode_Pt_Br
//	CultureCode_Ru_Ru
//	CultureCode_Zh_Tw
//	CultureCode_Cs_Cz
//	CultureCode_Pl_Pl
//	CultureCode_Tr_Tr
//	CultureCode_Da_Dk
//	CultureCode_En_Gb
//	CultureCode_Hu_Hu
//	CultureCode_Nb_No
//	CultureCode_Nl_Nl
//	CultureCode_Pt_Pt
//	CultureCode_Sv_Se
type CultureCodeInput interface {
	pulumi.Input

	ToCultureCodeOutput() CultureCodeOutput
	ToCultureCodeOutputWithContext(context.Context) CultureCodeOutput
}

var cultureCodePtrType = reflect.TypeOf((**CultureCode)(nil)).Elem()

type CultureCodePtrInput interface {
	pulumi.Input

	ToCultureCodePtrOutput() CultureCodePtrOutput
	ToCultureCodePtrOutputWithContext(context.Context) CultureCodePtrOutput
}

type cultureCodePtr string

func CultureCodePtr(v string) CultureCodePtrInput {
	return (*cultureCodePtr)(&v)
}

func (*cultureCodePtr) ElementType() reflect.Type {
	return cultureCodePtrType
}

func (in *cultureCodePtr) ToCultureCodePtrOutput() CultureCodePtrOutput {
	return pulumi.ToOutput(in).(CultureCodePtrOutput)
}

func (in *cultureCodePtr) ToCultureCodePtrOutputWithContext(ctx context.Context) CultureCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CultureCodePtrOutput)
}

func (in *cultureCodePtr) ToOutput(ctx context.Context) pulumix.Output[*CultureCode] {
	return pulumix.Output[*CultureCode]{
		OutputState: in.ToCultureCodePtrOutputWithContext(ctx).OutputState,
	}
}

// Days of Week.
type DaysOfWeek string

const (
	DaysOfWeekMonday    = DaysOfWeek("Monday")
	DaysOfWeekTuesday   = DaysOfWeek("Tuesday")
	DaysOfWeekWednesday = DaysOfWeek("Wednesday")
	DaysOfWeekThursday  = DaysOfWeek("Thursday")
	DaysOfWeekFriday    = DaysOfWeek("Friday")
	DaysOfWeekSaturday  = DaysOfWeek("Saturday")
	DaysOfWeekSunday    = DaysOfWeek("Sunday")
)

func (DaysOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DaysOfWeek)(nil)).Elem()
}

func (e DaysOfWeek) ToDaysOfWeekOutput() DaysOfWeekOutput {
	return pulumi.ToOutput(e).(DaysOfWeekOutput)
}

func (e DaysOfWeek) ToDaysOfWeekOutputWithContext(ctx context.Context) DaysOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DaysOfWeekOutput)
}

func (e DaysOfWeek) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return e.ToDaysOfWeekPtrOutputWithContext(context.Background())
}

func (e DaysOfWeek) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return DaysOfWeek(e).ToDaysOfWeekOutputWithContext(ctx).ToDaysOfWeekPtrOutputWithContext(ctx)
}

func (e DaysOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DaysOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DaysOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DaysOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DaysOfWeekOutput struct{ *pulumi.OutputState }

func (DaysOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaysOfWeek)(nil)).Elem()
}

func (o DaysOfWeekOutput) ToDaysOfWeekOutput() DaysOfWeekOutput {
	return o
}

func (o DaysOfWeekOutput) ToDaysOfWeekOutputWithContext(ctx context.Context) DaysOfWeekOutput {
	return o
}

func (o DaysOfWeekOutput) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return o.ToDaysOfWeekPtrOutputWithContext(context.Background())
}

func (o DaysOfWeekOutput) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DaysOfWeek) *DaysOfWeek {
		return &v
	}).(DaysOfWeekPtrOutput)
}

func (o DaysOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DaysOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DaysOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DaysOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DaysOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DaysOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DaysOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DaysOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaysOfWeek)(nil)).Elem()
}

func (o DaysOfWeekPtrOutput) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return o
}

func (o DaysOfWeekPtrOutput) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return o
}

func (o DaysOfWeekPtrOutput) Elem() DaysOfWeekOutput {
	return o.ApplyT(func(v *DaysOfWeek) DaysOfWeek {
		if v != nil {
			return *v
		}
		var ret DaysOfWeek
		return ret
	}).(DaysOfWeekOutput)
}

func (o DaysOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DaysOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DaysOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DaysOfWeekInput is an input type that accepts values of the DaysOfWeek enum
// A concrete instance of `DaysOfWeekInput` can be one of the following:
//
//	DaysOfWeekMonday
//	DaysOfWeekTuesday
//	DaysOfWeekWednesday
//	DaysOfWeekThursday
//	DaysOfWeekFriday
//	DaysOfWeekSaturday
//	DaysOfWeekSunday
type DaysOfWeekInput interface {
	pulumi.Input

	ToDaysOfWeekOutput() DaysOfWeekOutput
	ToDaysOfWeekOutputWithContext(context.Context) DaysOfWeekOutput
}

var daysOfWeekPtrType = reflect.TypeOf((**DaysOfWeek)(nil)).Elem()

type DaysOfWeekPtrInput interface {
	pulumi.Input

	ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput
	ToDaysOfWeekPtrOutputWithContext(context.Context) DaysOfWeekPtrOutput
}

type daysOfWeekPtr string

func DaysOfWeekPtr(v string) DaysOfWeekPtrInput {
	return (*daysOfWeekPtr)(&v)
}

func (*daysOfWeekPtr) ElementType() reflect.Type {
	return daysOfWeekPtrType
}

func (in *daysOfWeekPtr) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DaysOfWeekPtrOutput)
}

func (in *daysOfWeekPtr) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DaysOfWeekPtrOutput)
}

func (in *daysOfWeekPtr) ToOutput(ctx context.Context) pulumix.Output[*DaysOfWeek] {
	return pulumix.Output[*DaysOfWeek]{
		OutputState: in.ToDaysOfWeekPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
type ExportType string

const (
	ExportTypeUsage         = ExportType("Usage")
	ExportTypeActualCost    = ExportType("ActualCost")
	ExportTypeAmortizedCost = ExportType("AmortizedCost")
)

func (ExportType) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportType)(nil)).Elem()
}

func (e ExportType) ToExportTypeOutput() ExportTypeOutput {
	return pulumi.ToOutput(e).(ExportTypeOutput)
}

func (e ExportType) ToExportTypeOutputWithContext(ctx context.Context) ExportTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExportTypeOutput)
}

func (e ExportType) ToExportTypePtrOutput() ExportTypePtrOutput {
	return e.ToExportTypePtrOutputWithContext(context.Background())
}

func (e ExportType) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return ExportType(e).ToExportTypeOutputWithContext(ctx).ToExportTypePtrOutputWithContext(ctx)
}

func (e ExportType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExportType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExportType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExportType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExportTypeOutput struct{ *pulumi.OutputState }

func (ExportTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportType)(nil)).Elem()
}

func (o ExportTypeOutput) ToExportTypeOutput() ExportTypeOutput {
	return o
}

func (o ExportTypeOutput) ToExportTypeOutputWithContext(ctx context.Context) ExportTypeOutput {
	return o
}

func (o ExportTypeOutput) ToExportTypePtrOutput() ExportTypePtrOutput {
	return o.ToExportTypePtrOutputWithContext(context.Background())
}

func (o ExportTypeOutput) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportType) *ExportType {
		return &v
	}).(ExportTypePtrOutput)
}

func (o ExportTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExportTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExportType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExportTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExportTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExportType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExportTypePtrOutput struct{ *pulumi.OutputState }

func (ExportTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportType)(nil)).Elem()
}

func (o ExportTypePtrOutput) ToExportTypePtrOutput() ExportTypePtrOutput {
	return o
}

func (o ExportTypePtrOutput) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return o
}

func (o ExportTypePtrOutput) Elem() ExportTypeOutput {
	return o.ApplyT(func(v *ExportType) ExportType {
		if v != nil {
			return *v
		}
		var ret ExportType
		return ret
	}).(ExportTypeOutput)
}

func (o ExportTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExportTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExportType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExportTypeInput is an input type that accepts values of the ExportType enum
// A concrete instance of `ExportTypeInput` can be one of the following:
//
//	ExportTypeUsage
//	ExportTypeActualCost
//	ExportTypeAmortizedCost
type ExportTypeInput interface {
	pulumi.Input

	ToExportTypeOutput() ExportTypeOutput
	ToExportTypeOutputWithContext(context.Context) ExportTypeOutput
}

var exportTypePtrType = reflect.TypeOf((**ExportType)(nil)).Elem()

type ExportTypePtrInput interface {
	pulumi.Input

	ToExportTypePtrOutput() ExportTypePtrOutput
	ToExportTypePtrOutputWithContext(context.Context) ExportTypePtrOutput
}

type exportTypePtr string

func ExportTypePtr(v string) ExportTypePtrInput {
	return (*exportTypePtr)(&v)
}

func (*exportTypePtr) ElementType() reflect.Type {
	return exportTypePtrType
}

func (in *exportTypePtr) ToExportTypePtrOutput() ExportTypePtrOutput {
	return pulumi.ToOutput(in).(ExportTypePtrOutput)
}

func (in *exportTypePtr) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExportTypePtrOutput)
}

func (in *exportTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ExportType] {
	return pulumix.Output[*ExportType]{
		OutputState: in.ToExportTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Destination of the view data. Currently only CSV format is supported.
type FileFormat string

const (
	FileFormatCsv = FileFormat("Csv")
)

func (FileFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*FileFormat)(nil)).Elem()
}

func (e FileFormat) ToFileFormatOutput() FileFormatOutput {
	return pulumi.ToOutput(e).(FileFormatOutput)
}

func (e FileFormat) ToFileFormatOutputWithContext(ctx context.Context) FileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FileFormatOutput)
}

func (e FileFormat) ToFileFormatPtrOutput() FileFormatPtrOutput {
	return e.ToFileFormatPtrOutputWithContext(context.Background())
}

func (e FileFormat) ToFileFormatPtrOutputWithContext(ctx context.Context) FileFormatPtrOutput {
	return FileFormat(e).ToFileFormatOutputWithContext(ctx).ToFileFormatPtrOutputWithContext(ctx)
}

func (e FileFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FileFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FileFormatOutput struct{ *pulumi.OutputState }

func (FileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileFormat)(nil)).Elem()
}

func (o FileFormatOutput) ToFileFormatOutput() FileFormatOutput {
	return o
}

func (o FileFormatOutput) ToFileFormatOutputWithContext(ctx context.Context) FileFormatOutput {
	return o
}

func (o FileFormatOutput) ToFileFormatPtrOutput() FileFormatPtrOutput {
	return o.ToFileFormatPtrOutputWithContext(context.Background())
}

func (o FileFormatOutput) ToFileFormatPtrOutputWithContext(ctx context.Context) FileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileFormat) *FileFormat {
		return &v
	}).(FileFormatPtrOutput)
}

func (o FileFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FileFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FileFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FileFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FileFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FileFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FileFormatPtrOutput struct{ *pulumi.OutputState }

func (FileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileFormat)(nil)).Elem()
}

func (o FileFormatPtrOutput) ToFileFormatPtrOutput() FileFormatPtrOutput {
	return o
}

func (o FileFormatPtrOutput) ToFileFormatPtrOutputWithContext(ctx context.Context) FileFormatPtrOutput {
	return o
}

func (o FileFormatPtrOutput) Elem() FileFormatOutput {
	return o.ApplyT(func(v *FileFormat) FileFormat {
		if v != nil {
			return *v
		}
		var ret FileFormat
		return ret
	}).(FileFormatOutput)
}

func (o FileFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FileFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FileFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FileFormatInput is an input type that accepts values of the FileFormat enum
// A concrete instance of `FileFormatInput` can be one of the following:
//
//	FileFormatCsv
type FileFormatInput interface {
	pulumi.Input

	ToFileFormatOutput() FileFormatOutput
	ToFileFormatOutputWithContext(context.Context) FileFormatOutput
}

var fileFormatPtrType = reflect.TypeOf((**FileFormat)(nil)).Elem()

type FileFormatPtrInput interface {
	pulumi.Input

	ToFileFormatPtrOutput() FileFormatPtrOutput
	ToFileFormatPtrOutputWithContext(context.Context) FileFormatPtrOutput
}

type fileFormatPtr string

func FileFormatPtr(v string) FileFormatPtrInput {
	return (*fileFormatPtr)(&v)
}

func (*fileFormatPtr) ElementType() reflect.Type {
	return fileFormatPtrType
}

func (in *fileFormatPtr) ToFileFormatPtrOutput() FileFormatPtrOutput {
	return pulumi.ToOutput(in).(FileFormatPtrOutput)
}

func (in *fileFormatPtr) ToFileFormatPtrOutputWithContext(ctx context.Context) FileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FileFormatPtrOutput)
}

func (in *fileFormatPtr) ToOutput(ctx context.Context) pulumix.Output[*FileFormat] {
	return pulumix.Output[*FileFormat]{
		OutputState: in.ToFileFormatPtrOutputWithContext(ctx).OutputState,
	}
}

// The format of the export being delivered. Currently only 'Csv' is supported.
type FormatType string

const (
	FormatTypeCsv = FormatType("Csv")
)

func (FormatType) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatType)(nil)).Elem()
}

func (e FormatType) ToFormatTypeOutput() FormatTypeOutput {
	return pulumi.ToOutput(e).(FormatTypeOutput)
}

func (e FormatType) ToFormatTypeOutputWithContext(ctx context.Context) FormatTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FormatTypeOutput)
}

func (e FormatType) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return e.ToFormatTypePtrOutputWithContext(context.Background())
}

func (e FormatType) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return FormatType(e).ToFormatTypeOutputWithContext(ctx).ToFormatTypePtrOutputWithContext(ctx)
}

func (e FormatType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FormatType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FormatType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FormatType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FormatTypeOutput struct{ *pulumi.OutputState }

func (FormatTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatType)(nil)).Elem()
}

func (o FormatTypeOutput) ToFormatTypeOutput() FormatTypeOutput {
	return o
}

func (o FormatTypeOutput) ToFormatTypeOutputWithContext(ctx context.Context) FormatTypeOutput {
	return o
}

func (o FormatTypeOutput) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return o.ToFormatTypePtrOutputWithContext(context.Background())
}

func (o FormatTypeOutput) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormatType) *FormatType {
		return &v
	}).(FormatTypePtrOutput)
}

func (o FormatTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FormatTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FormatType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FormatTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FormatTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FormatType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FormatTypePtrOutput struct{ *pulumi.OutputState }

func (FormatTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormatType)(nil)).Elem()
}

func (o FormatTypePtrOutput) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return o
}

func (o FormatTypePtrOutput) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return o
}

func (o FormatTypePtrOutput) Elem() FormatTypeOutput {
	return o.ApplyT(func(v *FormatType) FormatType {
		if v != nil {
			return *v
		}
		var ret FormatType
		return ret
	}).(FormatTypeOutput)
}

func (o FormatTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FormatTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FormatType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FormatTypeInput is an input type that accepts values of the FormatType enum
// A concrete instance of `FormatTypeInput` can be one of the following:
//
//	FormatTypeCsv
type FormatTypeInput interface {
	pulumi.Input

	ToFormatTypeOutput() FormatTypeOutput
	ToFormatTypeOutputWithContext(context.Context) FormatTypeOutput
}

var formatTypePtrType = reflect.TypeOf((**FormatType)(nil)).Elem()

type FormatTypePtrInput interface {
	pulumi.Input

	ToFormatTypePtrOutput() FormatTypePtrOutput
	ToFormatTypePtrOutputWithContext(context.Context) FormatTypePtrOutput
}

type formatTypePtr string

func FormatTypePtr(v string) FormatTypePtrInput {
	return (*formatTypePtr)(&v)
}

func (*formatTypePtr) ElementType() reflect.Type {
	return formatTypePtrType
}

func (in *formatTypePtr) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return pulumi.ToOutput(in).(FormatTypePtrOutput)
}

func (in *formatTypePtr) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FormatTypePtrOutput)
}

func (in *formatTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FormatType] {
	return pulumix.Output[*FormatType]{
		OutputState: in.ToFormatTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Frequency of a notification. Represents how long the notification will be silent after triggering an alert for a threshold breach. If not specified, the frequency will be set by default based on the timeGrain (Weekly when timeGrain: Last7Days, Monthly when timeGrain: Last30Days).
//
//	Supported for CategoryType(s): ReservationUtilization.
type Frequency string

const (
	// After the threshold breaches and an Alert is fired, no further alerts will be sent until the next calendar day.
	FrequencyDaily = Frequency("Daily")
	// After the threshold breaches and an Alert is fired, no further alerts will be sent for 7 calendar days.
	FrequencyWeekly = Frequency("Weekly")
	// After the threshold breaches and an Alert is fired, no further alerts will be sent for 30 calendar days.
	FrequencyMonthly = Frequency("Monthly")
)

func (Frequency) ElementType() reflect.Type {
	return reflect.TypeOf((*Frequency)(nil)).Elem()
}

func (e Frequency) ToFrequencyOutput() FrequencyOutput {
	return pulumi.ToOutput(e).(FrequencyOutput)
}

func (e Frequency) ToFrequencyOutputWithContext(ctx context.Context) FrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrequencyOutput)
}

func (e Frequency) ToFrequencyPtrOutput() FrequencyPtrOutput {
	return e.ToFrequencyPtrOutputWithContext(context.Background())
}

func (e Frequency) ToFrequencyPtrOutputWithContext(ctx context.Context) FrequencyPtrOutput {
	return Frequency(e).ToFrequencyOutputWithContext(ctx).ToFrequencyPtrOutputWithContext(ctx)
}

func (e Frequency) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Frequency) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Frequency) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Frequency) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrequencyOutput struct{ *pulumi.OutputState }

func (FrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Frequency)(nil)).Elem()
}

func (o FrequencyOutput) ToFrequencyOutput() FrequencyOutput {
	return o
}

func (o FrequencyOutput) ToFrequencyOutputWithContext(ctx context.Context) FrequencyOutput {
	return o
}

func (o FrequencyOutput) ToFrequencyPtrOutput() FrequencyPtrOutput {
	return o.ToFrequencyPtrOutputWithContext(context.Background())
}

func (o FrequencyOutput) ToFrequencyPtrOutputWithContext(ctx context.Context) FrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Frequency) *Frequency {
		return &v
	}).(FrequencyPtrOutput)
}

func (o FrequencyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrequencyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Frequency) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrequencyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrequencyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Frequency) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrequencyPtrOutput struct{ *pulumi.OutputState }

func (FrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Frequency)(nil)).Elem()
}

func (o FrequencyPtrOutput) ToFrequencyPtrOutput() FrequencyPtrOutput {
	return o
}

func (o FrequencyPtrOutput) ToFrequencyPtrOutputWithContext(ctx context.Context) FrequencyPtrOutput {
	return o
}

func (o FrequencyPtrOutput) Elem() FrequencyOutput {
	return o.ApplyT(func(v *Frequency) Frequency {
		if v != nil {
			return *v
		}
		var ret Frequency
		return ret
	}).(FrequencyOutput)
}

func (o FrequencyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrequencyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Frequency) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrequencyInput is an input type that accepts values of the Frequency enum
// A concrete instance of `FrequencyInput` can be one of the following:
//
//	FrequencyDaily
//	FrequencyWeekly
//	FrequencyMonthly
type FrequencyInput interface {
	pulumi.Input

	ToFrequencyOutput() FrequencyOutput
	ToFrequencyOutputWithContext(context.Context) FrequencyOutput
}

var frequencyPtrType = reflect.TypeOf((**Frequency)(nil)).Elem()

type FrequencyPtrInput interface {
	pulumi.Input

	ToFrequencyPtrOutput() FrequencyPtrOutput
	ToFrequencyPtrOutputWithContext(context.Context) FrequencyPtrOutput
}

type frequencyPtr string

func FrequencyPtr(v string) FrequencyPtrInput {
	return (*frequencyPtr)(&v)
}

func (*frequencyPtr) ElementType() reflect.Type {
	return frequencyPtrType
}

func (in *frequencyPtr) ToFrequencyPtrOutput() FrequencyPtrOutput {
	return pulumi.ToOutput(in).(FrequencyPtrOutput)
}

func (in *frequencyPtr) ToFrequencyPtrOutputWithContext(ctx context.Context) FrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrequencyPtrOutput)
}

func (in *frequencyPtr) ToOutput(ctx context.Context) pulumix.Output[*Frequency] {
	return pulumix.Output[*Frequency]{
		OutputState: in.ToFrequencyPtrOutputWithContext(ctx).OutputState,
	}
}

// The name of the aggregation function to use.
type FunctionType string

const (
	FunctionTypeSum = FunctionType("Sum")
)

func (FunctionType) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (e FunctionType) ToFunctionTypeOutput() FunctionTypeOutput {
	return pulumi.ToOutput(e).(FunctionTypeOutput)
}

func (e FunctionType) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FunctionTypeOutput)
}

func (e FunctionType) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return e.ToFunctionTypePtrOutputWithContext(context.Background())
}

func (e FunctionType) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return FunctionType(e).ToFunctionTypeOutputWithContext(ctx).ToFunctionTypePtrOutputWithContext(ctx)
}

func (e FunctionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FunctionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FunctionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FunctionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FunctionTypeOutput struct{ *pulumi.OutputState }

func (FunctionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (o FunctionTypeOutput) ToFunctionTypeOutput() FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return o.ToFunctionTypePtrOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionType) *FunctionType {
		return &v
	}).(FunctionTypePtrOutput)
}

func (o FunctionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FunctionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FunctionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FunctionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FunctionTypePtrOutput struct{ *pulumi.OutputState }

func (FunctionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionType)(nil)).Elem()
}

func (o FunctionTypePtrOutput) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return o
}

func (o FunctionTypePtrOutput) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return o
}

func (o FunctionTypePtrOutput) Elem() FunctionTypeOutput {
	return o.ApplyT(func(v *FunctionType) FunctionType {
		if v != nil {
			return *v
		}
		var ret FunctionType
		return ret
	}).(FunctionTypeOutput)
}

func (o FunctionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FunctionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FunctionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FunctionTypeInput is an input type that accepts values of the FunctionType enum
// A concrete instance of `FunctionTypeInput` can be one of the following:
//
//	FunctionTypeSum
type FunctionTypeInput interface {
	pulumi.Input

	ToFunctionTypeOutput() FunctionTypeOutput
	ToFunctionTypeOutputWithContext(context.Context) FunctionTypeOutput
}

var functionTypePtrType = reflect.TypeOf((**FunctionType)(nil)).Elem()

type FunctionTypePtrInput interface {
	pulumi.Input

	ToFunctionTypePtrOutput() FunctionTypePtrOutput
	ToFunctionTypePtrOutputWithContext(context.Context) FunctionTypePtrOutput
}

type functionTypePtr string

func FunctionTypePtr(v string) FunctionTypePtrInput {
	return (*functionTypePtr)(&v)
}

func (*functionTypePtr) ElementType() reflect.Type {
	return functionTypePtrType
}

func (in *functionTypePtr) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return pulumi.ToOutput(in).(FunctionTypePtrOutput)
}

func (in *functionTypePtr) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FunctionTypePtrOutput)
}

func (in *functionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FunctionType] {
	return pulumix.Output[*FunctionType]{
		OutputState: in.ToFunctionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
type GranularityType string

const (
	GranularityTypeDaily = GranularityType("Daily")
)

func (GranularityType) ElementType() reflect.Type {
	return reflect.TypeOf((*GranularityType)(nil)).Elem()
}

func (e GranularityType) ToGranularityTypeOutput() GranularityTypeOutput {
	return pulumi.ToOutput(e).(GranularityTypeOutput)
}

func (e GranularityType) ToGranularityTypeOutputWithContext(ctx context.Context) GranularityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GranularityTypeOutput)
}

func (e GranularityType) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return e.ToGranularityTypePtrOutputWithContext(context.Background())
}

func (e GranularityType) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return GranularityType(e).ToGranularityTypeOutputWithContext(ctx).ToGranularityTypePtrOutputWithContext(ctx)
}

func (e GranularityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GranularityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GranularityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GranularityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GranularityTypeOutput struct{ *pulumi.OutputState }

func (GranularityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GranularityType)(nil)).Elem()
}

func (o GranularityTypeOutput) ToGranularityTypeOutput() GranularityTypeOutput {
	return o
}

func (o GranularityTypeOutput) ToGranularityTypeOutputWithContext(ctx context.Context) GranularityTypeOutput {
	return o
}

func (o GranularityTypeOutput) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return o.ToGranularityTypePtrOutputWithContext(context.Background())
}

func (o GranularityTypeOutput) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GranularityType) *GranularityType {
		return &v
	}).(GranularityTypePtrOutput)
}

func (o GranularityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GranularityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GranularityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GranularityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GranularityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GranularityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GranularityTypePtrOutput struct{ *pulumi.OutputState }

func (GranularityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GranularityType)(nil)).Elem()
}

func (o GranularityTypePtrOutput) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return o
}

func (o GranularityTypePtrOutput) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return o
}

func (o GranularityTypePtrOutput) Elem() GranularityTypeOutput {
	return o.ApplyT(func(v *GranularityType) GranularityType {
		if v != nil {
			return *v
		}
		var ret GranularityType
		return ret
	}).(GranularityTypeOutput)
}

func (o GranularityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GranularityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GranularityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GranularityTypeInput is an input type that accepts values of the GranularityType enum
// A concrete instance of `GranularityTypeInput` can be one of the following:
//
//	GranularityTypeDaily
type GranularityTypeInput interface {
	pulumi.Input

	ToGranularityTypeOutput() GranularityTypeOutput
	ToGranularityTypeOutputWithContext(context.Context) GranularityTypeOutput
}

var granularityTypePtrType = reflect.TypeOf((**GranularityType)(nil)).Elem()

type GranularityTypePtrInput interface {
	pulumi.Input

	ToGranularityTypePtrOutput() GranularityTypePtrOutput
	ToGranularityTypePtrOutputWithContext(context.Context) GranularityTypePtrOutput
}

type granularityTypePtr string

func GranularityTypePtr(v string) GranularityTypePtrInput {
	return (*granularityTypePtr)(&v)
}

func (*granularityTypePtr) ElementType() reflect.Type {
	return granularityTypePtrType
}

func (in *granularityTypePtr) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return pulumi.ToOutput(in).(GranularityTypePtrOutput)
}

func (in *granularityTypePtr) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GranularityTypePtrOutput)
}

func (in *granularityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*GranularityType] {
	return pulumix.Output[*GranularityType]{
		OutputState: in.ToGranularityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// KPI type (Forecast, Budget).
type KpiTypeType string

const (
	KpiTypeTypeForecast = KpiTypeType("Forecast")
	KpiTypeTypeBudget   = KpiTypeType("Budget")
)

func (KpiTypeType) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiTypeType)(nil)).Elem()
}

func (e KpiTypeType) ToKpiTypeTypeOutput() KpiTypeTypeOutput {
	return pulumi.ToOutput(e).(KpiTypeTypeOutput)
}

func (e KpiTypeType) ToKpiTypeTypeOutputWithContext(ctx context.Context) KpiTypeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KpiTypeTypeOutput)
}

func (e KpiTypeType) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return e.ToKpiTypeTypePtrOutputWithContext(context.Background())
}

func (e KpiTypeType) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return KpiTypeType(e).ToKpiTypeTypeOutputWithContext(ctx).ToKpiTypeTypePtrOutputWithContext(ctx)
}

func (e KpiTypeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiTypeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiTypeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KpiTypeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KpiTypeTypeOutput struct{ *pulumi.OutputState }

func (KpiTypeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiTypeType)(nil)).Elem()
}

func (o KpiTypeTypeOutput) ToKpiTypeTypeOutput() KpiTypeTypeOutput {
	return o
}

func (o KpiTypeTypeOutput) ToKpiTypeTypeOutputWithContext(ctx context.Context) KpiTypeTypeOutput {
	return o
}

func (o KpiTypeTypeOutput) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return o.ToKpiTypeTypePtrOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KpiTypeType) *KpiTypeType {
		return &v
	}).(KpiTypeTypePtrOutput)
}

func (o KpiTypeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiTypeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KpiTypeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiTypeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KpiTypeTypePtrOutput struct{ *pulumi.OutputState }

func (KpiTypeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiTypeType)(nil)).Elem()
}

func (o KpiTypeTypePtrOutput) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return o
}

func (o KpiTypeTypePtrOutput) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return o
}

func (o KpiTypeTypePtrOutput) Elem() KpiTypeTypeOutput {
	return o.ApplyT(func(v *KpiTypeType) KpiTypeType {
		if v != nil {
			return *v
		}
		var ret KpiTypeType
		return ret
	}).(KpiTypeTypeOutput)
}

func (o KpiTypeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiTypeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KpiTypeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KpiTypeTypeInput is an input type that accepts values of the KpiTypeType enum
// A concrete instance of `KpiTypeTypeInput` can be one of the following:
//
//	KpiTypeTypeForecast
//	KpiTypeTypeBudget
type KpiTypeTypeInput interface {
	pulumi.Input

	ToKpiTypeTypeOutput() KpiTypeTypeOutput
	ToKpiTypeTypeOutputWithContext(context.Context) KpiTypeTypeOutput
}

var kpiTypeTypePtrType = reflect.TypeOf((**KpiTypeType)(nil)).Elem()

type KpiTypeTypePtrInput interface {
	pulumi.Input

	ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput
	ToKpiTypeTypePtrOutputWithContext(context.Context) KpiTypeTypePtrOutput
}

type kpiTypeTypePtr string

func KpiTypeTypePtr(v string) KpiTypeTypePtrInput {
	return (*kpiTypeTypePtr)(&v)
}

func (*kpiTypeTypePtr) ElementType() reflect.Type {
	return kpiTypeTypePtrType
}

func (in *kpiTypeTypePtr) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return pulumi.ToOutput(in).(KpiTypeTypePtrOutput)
}

func (in *kpiTypeTypePtr) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KpiTypeTypePtrOutput)
}

func (in *kpiTypeTypePtr) ToOutput(ctx context.Context) pulumix.Output[*KpiTypeType] {
	return pulumix.Output[*KpiTypeType]{
		OutputState: in.ToKpiTypeTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Metric to use when displaying costs.
type MetricType string

const (
	MetricTypeActualCost    = MetricType("ActualCost")
	MetricTypeAmortizedCost = MetricType("AmortizedCost")
	MetricTypeAHUB          = MetricType("AHUB")
)

func (MetricType) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricType)(nil)).Elem()
}

func (e MetricType) ToMetricTypeOutput() MetricTypeOutput {
	return pulumi.ToOutput(e).(MetricTypeOutput)
}

func (e MetricType) ToMetricTypeOutputWithContext(ctx context.Context) MetricTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricTypeOutput)
}

func (e MetricType) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return e.ToMetricTypePtrOutputWithContext(context.Background())
}

func (e MetricType) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return MetricType(e).ToMetricTypeOutputWithContext(ctx).ToMetricTypePtrOutputWithContext(ctx)
}

func (e MetricType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricTypeOutput struct{ *pulumi.OutputState }

func (MetricTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricType)(nil)).Elem()
}

func (o MetricTypeOutput) ToMetricTypeOutput() MetricTypeOutput {
	return o
}

func (o MetricTypeOutput) ToMetricTypeOutputWithContext(ctx context.Context) MetricTypeOutput {
	return o
}

func (o MetricTypeOutput) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return o.ToMetricTypePtrOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricType) *MetricType {
		return &v
	}).(MetricTypePtrOutput)
}

func (o MetricTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricTypePtrOutput struct{ *pulumi.OutputState }

func (MetricTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricType)(nil)).Elem()
}

func (o MetricTypePtrOutput) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return o
}

func (o MetricTypePtrOutput) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return o
}

func (o MetricTypePtrOutput) Elem() MetricTypeOutput {
	return o.ApplyT(func(v *MetricType) MetricType {
		if v != nil {
			return *v
		}
		var ret MetricType
		return ret
	}).(MetricTypeOutput)
}

func (o MetricTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricTypeInput is an input type that accepts values of the MetricType enum
// A concrete instance of `MetricTypeInput` can be one of the following:
//
//	MetricTypeActualCost
//	MetricTypeAmortizedCost
//	MetricTypeAHUB
type MetricTypeInput interface {
	pulumi.Input

	ToMetricTypeOutput() MetricTypeOutput
	ToMetricTypeOutputWithContext(context.Context) MetricTypeOutput
}

var metricTypePtrType = reflect.TypeOf((**MetricType)(nil)).Elem()

type MetricTypePtrInput interface {
	pulumi.Input

	ToMetricTypePtrOutput() MetricTypePtrOutput
	ToMetricTypePtrOutputWithContext(context.Context) MetricTypePtrOutput
}

type metricTypePtr string

func MetricTypePtr(v string) MetricTypePtrInput {
	return (*metricTypePtr)(&v)
}

func (*metricTypePtr) ElementType() reflect.Type {
	return metricTypePtrType
}

func (in *metricTypePtr) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return pulumi.ToOutput(in).(MetricTypePtrOutput)
}

func (in *metricTypePtr) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricTypePtrOutput)
}

func (in *metricTypePtr) ToOutput(ctx context.Context) pulumix.Output[*MetricType] {
	return pulumix.Output[*MetricType]{
		OutputState: in.ToMetricTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The operator to use for comparison.
type OperatorType string

const (
	OperatorTypeIn       = OperatorType("In")
	OperatorTypeContains = OperatorType("Contains")
)

func (OperatorType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (e OperatorType) ToOperatorTypeOutput() OperatorTypeOutput {
	return pulumi.ToOutput(e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return e.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (e OperatorType) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return OperatorType(e).ToOperatorTypeOutputWithContext(ctx).ToOperatorTypePtrOutputWithContext(ctx)
}

func (e OperatorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorTypeOutput struct{ *pulumi.OutputState }

func (OperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (o OperatorTypeOutput) ToOperatorTypeOutput() OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatorType) *OperatorType {
		return &v
	}).(OperatorTypePtrOutput)
}

func (o OperatorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorTypePtrOutput struct{ *pulumi.OutputState }

func (OperatorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorType)(nil)).Elem()
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) Elem() OperatorTypeOutput {
	return o.ApplyT(func(v *OperatorType) OperatorType {
		if v != nil {
			return *v
		}
		var ret OperatorType
		return ret
	}).(OperatorTypeOutput)
}

func (o OperatorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatorTypeInput is an input type that accepts values of the OperatorType enum
// A concrete instance of `OperatorTypeInput` can be one of the following:
//
//	OperatorTypeIn
//	OperatorTypeContains
type OperatorTypeInput interface {
	pulumi.Input

	ToOperatorTypeOutput() OperatorTypeOutput
	ToOperatorTypeOutputWithContext(context.Context) OperatorTypeOutput
}

var operatorTypePtrType = reflect.TypeOf((**OperatorType)(nil)).Elem()

type OperatorTypePtrInput interface {
	pulumi.Input

	ToOperatorTypePtrOutput() OperatorTypePtrOutput
	ToOperatorTypePtrOutputWithContext(context.Context) OperatorTypePtrOutput
}

type operatorTypePtr string

func OperatorTypePtr(v string) OperatorTypePtrInput {
	return (*operatorTypePtr)(&v)
}

func (*operatorTypePtr) ElementType() reflect.Type {
	return operatorTypePtrType
}

func (in *operatorTypePtr) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return pulumi.ToOutput(in).(OperatorTypePtrOutput)
}

func (in *operatorTypePtr) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorTypePtrOutput)
}

func (in *operatorTypePtr) ToOutput(ctx context.Context) pulumix.Output[*OperatorType] {
	return pulumix.Output[*OperatorType]{
		OutputState: in.ToOperatorTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Data type to show in view.
type PivotTypeType string

const (
	PivotTypeTypeDimension = PivotTypeType("Dimension")
	PivotTypeTypeTagKey    = PivotTypeType("TagKey")
)

func (PivotTypeType) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotTypeType)(nil)).Elem()
}

func (e PivotTypeType) ToPivotTypeTypeOutput() PivotTypeTypeOutput {
	return pulumi.ToOutput(e).(PivotTypeTypeOutput)
}

func (e PivotTypeType) ToPivotTypeTypeOutputWithContext(ctx context.Context) PivotTypeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PivotTypeTypeOutput)
}

func (e PivotTypeType) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return e.ToPivotTypeTypePtrOutputWithContext(context.Background())
}

func (e PivotTypeType) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return PivotTypeType(e).ToPivotTypeTypeOutputWithContext(ctx).ToPivotTypeTypePtrOutputWithContext(ctx)
}

func (e PivotTypeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PivotTypeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PivotTypeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PivotTypeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PivotTypeTypeOutput struct{ *pulumi.OutputState }

func (PivotTypeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotTypeType)(nil)).Elem()
}

func (o PivotTypeTypeOutput) ToPivotTypeTypeOutput() PivotTypeTypeOutput {
	return o
}

func (o PivotTypeTypeOutput) ToPivotTypeTypeOutputWithContext(ctx context.Context) PivotTypeTypeOutput {
	return o
}

func (o PivotTypeTypeOutput) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return o.ToPivotTypeTypePtrOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PivotTypeType) *PivotTypeType {
		return &v
	}).(PivotTypeTypePtrOutput)
}

func (o PivotTypeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PivotTypeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PivotTypeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PivotTypeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PivotTypeTypePtrOutput struct{ *pulumi.OutputState }

func (PivotTypeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PivotTypeType)(nil)).Elem()
}

func (o PivotTypeTypePtrOutput) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return o
}

func (o PivotTypeTypePtrOutput) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return o
}

func (o PivotTypeTypePtrOutput) Elem() PivotTypeTypeOutput {
	return o.ApplyT(func(v *PivotTypeType) PivotTypeType {
		if v != nil {
			return *v
		}
		var ret PivotTypeType
		return ret
	}).(PivotTypeTypeOutput)
}

func (o PivotTypeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PivotTypeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PivotTypeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PivotTypeTypeInput is an input type that accepts values of the PivotTypeType enum
// A concrete instance of `PivotTypeTypeInput` can be one of the following:
//
//	PivotTypeTypeDimension
//	PivotTypeTypeTagKey
type PivotTypeTypeInput interface {
	pulumi.Input

	ToPivotTypeTypeOutput() PivotTypeTypeOutput
	ToPivotTypeTypeOutputWithContext(context.Context) PivotTypeTypeOutput
}

var pivotTypeTypePtrType = reflect.TypeOf((**PivotTypeType)(nil)).Elem()

type PivotTypeTypePtrInput interface {
	pulumi.Input

	ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput
	ToPivotTypeTypePtrOutputWithContext(context.Context) PivotTypeTypePtrOutput
}

type pivotTypeTypePtr string

func PivotTypeTypePtr(v string) PivotTypeTypePtrInput {
	return (*pivotTypeTypePtr)(&v)
}

func (*pivotTypeTypePtr) ElementType() reflect.Type {
	return pivotTypeTypePtrType
}

func (in *pivotTypeTypePtr) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return pulumi.ToOutput(in).(PivotTypeTypePtrOutput)
}

func (in *pivotTypeTypePtr) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PivotTypeTypePtrOutput)
}

func (in *pivotTypeTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PivotTypeType] {
	return pulumix.Output[*PivotTypeType]{
		OutputState: in.ToPivotTypeTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Has type of the column to group.
type QueryColumnType string

const (
	// The tag associated with the cost data.
	QueryColumnTypeTagKey = QueryColumnType("TagKey")
	// The dimension of cost data.
	QueryColumnTypeDimension = QueryColumnType("Dimension")
)

func (QueryColumnType) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryColumnType)(nil)).Elem()
}

func (e QueryColumnType) ToQueryColumnTypeOutput() QueryColumnTypeOutput {
	return pulumi.ToOutput(e).(QueryColumnTypeOutput)
}

func (e QueryColumnType) ToQueryColumnTypeOutputWithContext(ctx context.Context) QueryColumnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(QueryColumnTypeOutput)
}

func (e QueryColumnType) ToQueryColumnTypePtrOutput() QueryColumnTypePtrOutput {
	return e.ToQueryColumnTypePtrOutputWithContext(context.Background())
}

func (e QueryColumnType) ToQueryColumnTypePtrOutputWithContext(ctx context.Context) QueryColumnTypePtrOutput {
	return QueryColumnType(e).ToQueryColumnTypeOutputWithContext(ctx).ToQueryColumnTypePtrOutputWithContext(ctx)
}

func (e QueryColumnType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryColumnType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e QueryColumnType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e QueryColumnType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type QueryColumnTypeOutput struct{ *pulumi.OutputState }

func (QueryColumnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryColumnType)(nil)).Elem()
}

func (o QueryColumnTypeOutput) ToQueryColumnTypeOutput() QueryColumnTypeOutput {
	return o
}

func (o QueryColumnTypeOutput) ToQueryColumnTypeOutputWithContext(ctx context.Context) QueryColumnTypeOutput {
	return o
}

func (o QueryColumnTypeOutput) ToQueryColumnTypePtrOutput() QueryColumnTypePtrOutput {
	return o.ToQueryColumnTypePtrOutputWithContext(context.Background())
}

func (o QueryColumnTypeOutput) ToQueryColumnTypePtrOutputWithContext(ctx context.Context) QueryColumnTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryColumnType) *QueryColumnType {
		return &v
	}).(QueryColumnTypePtrOutput)
}

func (o QueryColumnTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o QueryColumnTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryColumnType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o QueryColumnTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryColumnTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e QueryColumnType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type QueryColumnTypePtrOutput struct{ *pulumi.OutputState }

func (QueryColumnTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryColumnType)(nil)).Elem()
}

func (o QueryColumnTypePtrOutput) ToQueryColumnTypePtrOutput() QueryColumnTypePtrOutput {
	return o
}

func (o QueryColumnTypePtrOutput) ToQueryColumnTypePtrOutputWithContext(ctx context.Context) QueryColumnTypePtrOutput {
	return o
}

func (o QueryColumnTypePtrOutput) Elem() QueryColumnTypeOutput {
	return o.ApplyT(func(v *QueryColumnType) QueryColumnType {
		if v != nil {
			return *v
		}
		var ret QueryColumnType
		return ret
	}).(QueryColumnTypeOutput)
}

func (o QueryColumnTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o QueryColumnTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *QueryColumnType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// QueryColumnTypeInput is an input type that accepts values of the QueryColumnType enum
// A concrete instance of `QueryColumnTypeInput` can be one of the following:
//
//	QueryColumnTypeTagKey
//	QueryColumnTypeDimension
type QueryColumnTypeInput interface {
	pulumi.Input

	ToQueryColumnTypeOutput() QueryColumnTypeOutput
	ToQueryColumnTypeOutputWithContext(context.Context) QueryColumnTypeOutput
}

var queryColumnTypePtrType = reflect.TypeOf((**QueryColumnType)(nil)).Elem()

type QueryColumnTypePtrInput interface {
	pulumi.Input

	ToQueryColumnTypePtrOutput() QueryColumnTypePtrOutput
	ToQueryColumnTypePtrOutputWithContext(context.Context) QueryColumnTypePtrOutput
}

type queryColumnTypePtr string

func QueryColumnTypePtr(v string) QueryColumnTypePtrInput {
	return (*queryColumnTypePtr)(&v)
}

func (*queryColumnTypePtr) ElementType() reflect.Type {
	return queryColumnTypePtrType
}

func (in *queryColumnTypePtr) ToQueryColumnTypePtrOutput() QueryColumnTypePtrOutput {
	return pulumi.ToOutput(in).(QueryColumnTypePtrOutput)
}

func (in *queryColumnTypePtr) ToQueryColumnTypePtrOutputWithContext(ctx context.Context) QueryColumnTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(QueryColumnTypePtrOutput)
}

func (in *queryColumnTypePtr) ToOutput(ctx context.Context) pulumix.Output[*QueryColumnType] {
	return pulumix.Output[*QueryColumnType]{
		OutputState: in.ToQueryColumnTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The schedule recurrence.
type RecurrenceType string

const (
	RecurrenceTypeDaily    = RecurrenceType("Daily")
	RecurrenceTypeWeekly   = RecurrenceType("Weekly")
	RecurrenceTypeMonthly  = RecurrenceType("Monthly")
	RecurrenceTypeAnnually = RecurrenceType("Annually")
)

func (RecurrenceType) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceType)(nil)).Elem()
}

func (e RecurrenceType) ToRecurrenceTypeOutput() RecurrenceTypeOutput {
	return pulumi.ToOutput(e).(RecurrenceTypeOutput)
}

func (e RecurrenceType) ToRecurrenceTypeOutputWithContext(ctx context.Context) RecurrenceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RecurrenceTypeOutput)
}

func (e RecurrenceType) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return e.ToRecurrenceTypePtrOutputWithContext(context.Background())
}

func (e RecurrenceType) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return RecurrenceType(e).ToRecurrenceTypeOutputWithContext(ctx).ToRecurrenceTypePtrOutputWithContext(ctx)
}

func (e RecurrenceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RecurrenceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RecurrenceTypeOutput struct{ *pulumi.OutputState }

func (RecurrenceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceType)(nil)).Elem()
}

func (o RecurrenceTypeOutput) ToRecurrenceTypeOutput() RecurrenceTypeOutput {
	return o
}

func (o RecurrenceTypeOutput) ToRecurrenceTypeOutputWithContext(ctx context.Context) RecurrenceTypeOutput {
	return o
}

func (o RecurrenceTypeOutput) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return o.ToRecurrenceTypePtrOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceType) *RecurrenceType {
		return &v
	}).(RecurrenceTypePtrOutput)
}

func (o RecurrenceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RecurrenceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RecurrenceTypePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceType)(nil)).Elem()
}

func (o RecurrenceTypePtrOutput) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return o
}

func (o RecurrenceTypePtrOutput) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return o
}

func (o RecurrenceTypePtrOutput) Elem() RecurrenceTypeOutput {
	return o.ApplyT(func(v *RecurrenceType) RecurrenceType {
		if v != nil {
			return *v
		}
		var ret RecurrenceType
		return ret
	}).(RecurrenceTypeOutput)
}

func (o RecurrenceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RecurrenceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RecurrenceTypeInput is an input type that accepts values of the RecurrenceType enum
// A concrete instance of `RecurrenceTypeInput` can be one of the following:
//
//	RecurrenceTypeDaily
//	RecurrenceTypeWeekly
//	RecurrenceTypeMonthly
//	RecurrenceTypeAnnually
type RecurrenceTypeInput interface {
	pulumi.Input

	ToRecurrenceTypeOutput() RecurrenceTypeOutput
	ToRecurrenceTypeOutputWithContext(context.Context) RecurrenceTypeOutput
}

var recurrenceTypePtrType = reflect.TypeOf((**RecurrenceType)(nil)).Elem()

type RecurrenceTypePtrInput interface {
	pulumi.Input

	ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput
	ToRecurrenceTypePtrOutputWithContext(context.Context) RecurrenceTypePtrOutput
}

type recurrenceTypePtr string

func RecurrenceTypePtr(v string) RecurrenceTypePtrInput {
	return (*recurrenceTypePtr)(&v)
}

func (*recurrenceTypePtr) ElementType() reflect.Type {
	return recurrenceTypePtrType
}

func (in *recurrenceTypePtr) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return pulumi.ToOutput(in).(RecurrenceTypePtrOutput)
}

func (in *recurrenceTypePtr) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecurrenceTypePtrOutput)
}

func (in *recurrenceTypePtr) ToOutput(ctx context.Context) pulumix.Output[*RecurrenceType] {
	return pulumix.Output[*RecurrenceType]{
		OutputState: in.ToRecurrenceTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Direction of sort.
type ReportConfigSortingType string

const (
	ReportConfigSortingTypeAscending  = ReportConfigSortingType("Ascending")
	ReportConfigSortingTypeDescending = ReportConfigSortingType("Descending")
)

func (ReportConfigSortingType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSortingType)(nil)).Elem()
}

func (e ReportConfigSortingType) ToReportConfigSortingTypeOutput() ReportConfigSortingTypeOutput {
	return pulumi.ToOutput(e).(ReportConfigSortingTypeOutput)
}

func (e ReportConfigSortingType) ToReportConfigSortingTypeOutputWithContext(ctx context.Context) ReportConfigSortingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportConfigSortingTypeOutput)
}

func (e ReportConfigSortingType) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return e.ToReportConfigSortingTypePtrOutputWithContext(context.Background())
}

func (e ReportConfigSortingType) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return ReportConfigSortingType(e).ToReportConfigSortingTypeOutputWithContext(ctx).ToReportConfigSortingTypePtrOutputWithContext(ctx)
}

func (e ReportConfigSortingType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigSortingType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigSortingType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportConfigSortingType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportConfigSortingTypeOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSortingType)(nil)).Elem()
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypeOutput() ReportConfigSortingTypeOutput {
	return o
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypeOutputWithContext(ctx context.Context) ReportConfigSortingTypeOutput {
	return o
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return o.ToReportConfigSortingTypePtrOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigSortingType) *ReportConfigSortingType {
		return &v
	}).(ReportConfigSortingTypePtrOutput)
}

func (o ReportConfigSortingTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigSortingType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportConfigSortingTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigSortingType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportConfigSortingTypePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigSortingType)(nil)).Elem()
}

func (o ReportConfigSortingTypePtrOutput) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return o
}

func (o ReportConfigSortingTypePtrOutput) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return o
}

func (o ReportConfigSortingTypePtrOutput) Elem() ReportConfigSortingTypeOutput {
	return o.ApplyT(func(v *ReportConfigSortingType) ReportConfigSortingType {
		if v != nil {
			return *v
		}
		var ret ReportConfigSortingType
		return ret
	}).(ReportConfigSortingTypeOutput)
}

func (o ReportConfigSortingTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportConfigSortingType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportConfigSortingTypeInput is an input type that accepts values of the ReportConfigSortingType enum
// A concrete instance of `ReportConfigSortingTypeInput` can be one of the following:
//
//	ReportConfigSortingTypeAscending
//	ReportConfigSortingTypeDescending
type ReportConfigSortingTypeInput interface {
	pulumi.Input

	ToReportConfigSortingTypeOutput() ReportConfigSortingTypeOutput
	ToReportConfigSortingTypeOutputWithContext(context.Context) ReportConfigSortingTypeOutput
}

var reportConfigSortingTypePtrType = reflect.TypeOf((**ReportConfigSortingType)(nil)).Elem()

type ReportConfigSortingTypePtrInput interface {
	pulumi.Input

	ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput
	ToReportConfigSortingTypePtrOutputWithContext(context.Context) ReportConfigSortingTypePtrOutput
}

type reportConfigSortingTypePtr string

func ReportConfigSortingTypePtr(v string) ReportConfigSortingTypePtrInput {
	return (*reportConfigSortingTypePtr)(&v)
}

func (*reportConfigSortingTypePtr) ElementType() reflect.Type {
	return reportConfigSortingTypePtrType
}

func (in *reportConfigSortingTypePtr) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return pulumi.ToOutput(in).(ReportConfigSortingTypePtrOutput)
}

func (in *reportConfigSortingTypePtr) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportConfigSortingTypePtrOutput)
}

func (in *reportConfigSortingTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportConfigSortingType] {
	return pulumix.Output[*ReportConfigSortingType]{
		OutputState: in.ToReportConfigSortingTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The granularity of rows in the report.
type ReportGranularityType string

const (
	ReportGranularityTypeDaily   = ReportGranularityType("Daily")
	ReportGranularityTypeMonthly = ReportGranularityType("Monthly")
)

func (ReportGranularityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGranularityType)(nil)).Elem()
}

func (e ReportGranularityType) ToReportGranularityTypeOutput() ReportGranularityTypeOutput {
	return pulumi.ToOutput(e).(ReportGranularityTypeOutput)
}

func (e ReportGranularityType) ToReportGranularityTypeOutputWithContext(ctx context.Context) ReportGranularityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportGranularityTypeOutput)
}

func (e ReportGranularityType) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return e.ToReportGranularityTypePtrOutputWithContext(context.Background())
}

func (e ReportGranularityType) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return ReportGranularityType(e).ToReportGranularityTypeOutputWithContext(ctx).ToReportGranularityTypePtrOutputWithContext(ctx)
}

func (e ReportGranularityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportGranularityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportGranularityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportGranularityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportGranularityTypeOutput struct{ *pulumi.OutputState }

func (ReportGranularityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGranularityType)(nil)).Elem()
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypeOutput() ReportGranularityTypeOutput {
	return o
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypeOutputWithContext(ctx context.Context) ReportGranularityTypeOutput {
	return o
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return o.ToReportGranularityTypePtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportGranularityType) *ReportGranularityType {
		return &v
	}).(ReportGranularityTypePtrOutput)
}

func (o ReportGranularityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportGranularityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportGranularityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportGranularityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportGranularityTypePtrOutput struct{ *pulumi.OutputState }

func (ReportGranularityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGranularityType)(nil)).Elem()
}

func (o ReportGranularityTypePtrOutput) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return o
}

func (o ReportGranularityTypePtrOutput) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return o
}

func (o ReportGranularityTypePtrOutput) Elem() ReportGranularityTypeOutput {
	return o.ApplyT(func(v *ReportGranularityType) ReportGranularityType {
		if v != nil {
			return *v
		}
		var ret ReportGranularityType
		return ret
	}).(ReportGranularityTypeOutput)
}

func (o ReportGranularityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportGranularityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportGranularityTypeInput is an input type that accepts values of the ReportGranularityType enum
// A concrete instance of `ReportGranularityTypeInput` can be one of the following:
//
//	ReportGranularityTypeDaily
//	ReportGranularityTypeMonthly
type ReportGranularityTypeInput interface {
	pulumi.Input

	ToReportGranularityTypeOutput() ReportGranularityTypeOutput
	ToReportGranularityTypeOutputWithContext(context.Context) ReportGranularityTypeOutput
}

var reportGranularityTypePtrType = reflect.TypeOf((**ReportGranularityType)(nil)).Elem()

type ReportGranularityTypePtrInput interface {
	pulumi.Input

	ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput
	ToReportGranularityTypePtrOutputWithContext(context.Context) ReportGranularityTypePtrOutput
}

type reportGranularityTypePtr string

func ReportGranularityTypePtr(v string) ReportGranularityTypePtrInput {
	return (*reportGranularityTypePtr)(&v)
}

func (*reportGranularityTypePtr) ElementType() reflect.Type {
	return reportGranularityTypePtrType
}

func (in *reportGranularityTypePtr) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return pulumi.ToOutput(in).(ReportGranularityTypePtrOutput)
}

func (in *reportGranularityTypePtr) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportGranularityTypePtrOutput)
}

func (in *reportGranularityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportGranularityType] {
	return pulumix.Output[*ReportGranularityType]{
		OutputState: in.ToReportGranularityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
type ReportTimeframeType string

const (
	ReportTimeframeTypeWeekToDate  = ReportTimeframeType("WeekToDate")
	ReportTimeframeTypeMonthToDate = ReportTimeframeType("MonthToDate")
	ReportTimeframeTypeYearToDate  = ReportTimeframeType("YearToDate")
	ReportTimeframeTypeCustom      = ReportTimeframeType("Custom")
)

func (ReportTimeframeType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeframeType)(nil)).Elem()
}

func (e ReportTimeframeType) ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput {
	return pulumi.ToOutput(e).(ReportTimeframeTypeOutput)
}

func (e ReportTimeframeType) ToReportTimeframeTypeOutputWithContext(ctx context.Context) ReportTimeframeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportTimeframeTypeOutput)
}

func (e ReportTimeframeType) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return e.ToReportTimeframeTypePtrOutputWithContext(context.Background())
}

func (e ReportTimeframeType) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return ReportTimeframeType(e).ToReportTimeframeTypeOutputWithContext(ctx).ToReportTimeframeTypePtrOutputWithContext(ctx)
}

func (e ReportTimeframeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportTimeframeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportTimeframeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportTimeframeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportTimeframeTypeOutput struct{ *pulumi.OutputState }

func (ReportTimeframeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeframeType)(nil)).Elem()
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput {
	return o
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypeOutputWithContext(ctx context.Context) ReportTimeframeTypeOutput {
	return o
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return o.ToReportTimeframeTypePtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportTimeframeType) *ReportTimeframeType {
		return &v
	}).(ReportTimeframeTypePtrOutput)
}

func (o ReportTimeframeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportTimeframeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportTimeframeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportTimeframeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportTimeframeTypePtrOutput struct{ *pulumi.OutputState }

func (ReportTimeframeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimeframeType)(nil)).Elem()
}

func (o ReportTimeframeTypePtrOutput) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return o
}

func (o ReportTimeframeTypePtrOutput) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return o
}

func (o ReportTimeframeTypePtrOutput) Elem() ReportTimeframeTypeOutput {
	return o.ApplyT(func(v *ReportTimeframeType) ReportTimeframeType {
		if v != nil {
			return *v
		}
		var ret ReportTimeframeType
		return ret
	}).(ReportTimeframeTypeOutput)
}

func (o ReportTimeframeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportTimeframeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportTimeframeTypeInput is an input type that accepts values of the ReportTimeframeType enum
// A concrete instance of `ReportTimeframeTypeInput` can be one of the following:
//
//	ReportTimeframeTypeWeekToDate
//	ReportTimeframeTypeMonthToDate
//	ReportTimeframeTypeYearToDate
//	ReportTimeframeTypeCustom
type ReportTimeframeTypeInput interface {
	pulumi.Input

	ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput
	ToReportTimeframeTypeOutputWithContext(context.Context) ReportTimeframeTypeOutput
}

var reportTimeframeTypePtrType = reflect.TypeOf((**ReportTimeframeType)(nil)).Elem()

type ReportTimeframeTypePtrInput interface {
	pulumi.Input

	ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput
	ToReportTimeframeTypePtrOutputWithContext(context.Context) ReportTimeframeTypePtrOutput
}

type reportTimeframeTypePtr string

func ReportTimeframeTypePtr(v string) ReportTimeframeTypePtrInput {
	return (*reportTimeframeTypePtr)(&v)
}

func (*reportTimeframeTypePtr) ElementType() reflect.Type {
	return reportTimeframeTypePtrType
}

func (in *reportTimeframeTypePtr) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return pulumi.ToOutput(in).(ReportTimeframeTypePtrOutput)
}

func (in *reportTimeframeTypePtr) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportTimeframeTypePtrOutput)
}

func (in *reportTimeframeTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportTimeframeType] {
	return pulumix.Output[*ReportTimeframeType]{
		OutputState: in.ToReportTimeframeTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.
type ReportType string

const (
	ReportTypeUsage = ReportType("Usage")
)

func (ReportType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportType)(nil)).Elem()
}

func (e ReportType) ToReportTypeOutput() ReportTypeOutput {
	return pulumi.ToOutput(e).(ReportTypeOutput)
}

func (e ReportType) ToReportTypeOutputWithContext(ctx context.Context) ReportTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportTypeOutput)
}

func (e ReportType) ToReportTypePtrOutput() ReportTypePtrOutput {
	return e.ToReportTypePtrOutputWithContext(context.Background())
}

func (e ReportType) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return ReportType(e).ToReportTypeOutputWithContext(ctx).ToReportTypePtrOutputWithContext(ctx)
}

func (e ReportType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportTypeOutput struct{ *pulumi.OutputState }

func (ReportTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportType)(nil)).Elem()
}

func (o ReportTypeOutput) ToReportTypeOutput() ReportTypeOutput {
	return o
}

func (o ReportTypeOutput) ToReportTypeOutputWithContext(ctx context.Context) ReportTypeOutput {
	return o
}

func (o ReportTypeOutput) ToReportTypePtrOutput() ReportTypePtrOutput {
	return o.ToReportTypePtrOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportType) *ReportType {
		return &v
	}).(ReportTypePtrOutput)
}

func (o ReportTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportTypePtrOutput struct{ *pulumi.OutputState }

func (ReportTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportType)(nil)).Elem()
}

func (o ReportTypePtrOutput) ToReportTypePtrOutput() ReportTypePtrOutput {
	return o
}

func (o ReportTypePtrOutput) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return o
}

func (o ReportTypePtrOutput) Elem() ReportTypeOutput {
	return o.ApplyT(func(v *ReportType) ReportType {
		if v != nil {
			return *v
		}
		var ret ReportType
		return ret
	}).(ReportTypeOutput)
}

func (o ReportTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportTypeInput is an input type that accepts values of the ReportType enum
// A concrete instance of `ReportTypeInput` can be one of the following:
//
//	ReportTypeUsage
type ReportTypeInput interface {
	pulumi.Input

	ToReportTypeOutput() ReportTypeOutput
	ToReportTypeOutputWithContext(context.Context) ReportTypeOutput
}

var reportTypePtrType = reflect.TypeOf((**ReportType)(nil)).Elem()

type ReportTypePtrInput interface {
	pulumi.Input

	ToReportTypePtrOutput() ReportTypePtrOutput
	ToReportTypePtrOutputWithContext(context.Context) ReportTypePtrOutput
}

type reportTypePtr string

func ReportTypePtr(v string) ReportTypePtrInput {
	return (*reportTypePtr)(&v)
}

func (*reportTypePtr) ElementType() reflect.Type {
	return reportTypePtrType
}

func (in *reportTypePtr) ToReportTypePtrOutput() ReportTypePtrOutput {
	return pulumi.ToOutput(in).(ReportTypePtrOutput)
}

func (in *reportTypePtr) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportTypePtrOutput)
}

func (in *reportTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportType] {
	return pulumix.Output[*ReportType]{
		OutputState: in.ToReportTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Status of the rule
type RuleStatus string

const (
	// Rule is saved but not used to allocate costs.
	RuleStatusNotActive = RuleStatus("NotActive")
	// Rule is saved and impacting cost allocation.
	RuleStatusActive = RuleStatus("Active")
	// Rule is saved and cost allocation is being updated. Readonly value that cannot be submitted in a put request.
	RuleStatusProcessing = RuleStatus("Processing")
)

func (RuleStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleStatus)(nil)).Elem()
}

func (e RuleStatus) ToRuleStatusOutput() RuleStatusOutput {
	return pulumi.ToOutput(e).(RuleStatusOutput)
}

func (e RuleStatus) ToRuleStatusOutputWithContext(ctx context.Context) RuleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RuleStatusOutput)
}

func (e RuleStatus) ToRuleStatusPtrOutput() RuleStatusPtrOutput {
	return e.ToRuleStatusPtrOutputWithContext(context.Background())
}

func (e RuleStatus) ToRuleStatusPtrOutputWithContext(ctx context.Context) RuleStatusPtrOutput {
	return RuleStatus(e).ToRuleStatusOutputWithContext(ctx).ToRuleStatusPtrOutputWithContext(ctx)
}

func (e RuleStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RuleStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RuleStatusOutput struct{ *pulumi.OutputState }

func (RuleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleStatus)(nil)).Elem()
}

func (o RuleStatusOutput) ToRuleStatusOutput() RuleStatusOutput {
	return o
}

func (o RuleStatusOutput) ToRuleStatusOutputWithContext(ctx context.Context) RuleStatusOutput {
	return o
}

func (o RuleStatusOutput) ToRuleStatusPtrOutput() RuleStatusPtrOutput {
	return o.ToRuleStatusPtrOutputWithContext(context.Background())
}

func (o RuleStatusOutput) ToRuleStatusPtrOutputWithContext(ctx context.Context) RuleStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleStatus) *RuleStatus {
		return &v
	}).(RuleStatusPtrOutput)
}

func (o RuleStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RuleStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RuleStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RuleStatusPtrOutput struct{ *pulumi.OutputState }

func (RuleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleStatus)(nil)).Elem()
}

func (o RuleStatusPtrOutput) ToRuleStatusPtrOutput() RuleStatusPtrOutput {
	return o
}

func (o RuleStatusPtrOutput) ToRuleStatusPtrOutputWithContext(ctx context.Context) RuleStatusPtrOutput {
	return o
}

func (o RuleStatusPtrOutput) Elem() RuleStatusOutput {
	return o.ApplyT(func(v *RuleStatus) RuleStatus {
		if v != nil {
			return *v
		}
		var ret RuleStatus
		return ret
	}).(RuleStatusOutput)
}

func (o RuleStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RuleStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RuleStatusInput is an input type that accepts values of the RuleStatus enum
// A concrete instance of `RuleStatusInput` can be one of the following:
//
//	RuleStatusNotActive
//	RuleStatusActive
//	RuleStatusProcessing
type RuleStatusInput interface {
	pulumi.Input

	ToRuleStatusOutput() RuleStatusOutput
	ToRuleStatusOutputWithContext(context.Context) RuleStatusOutput
}

var ruleStatusPtrType = reflect.TypeOf((**RuleStatus)(nil)).Elem()

type RuleStatusPtrInput interface {
	pulumi.Input

	ToRuleStatusPtrOutput() RuleStatusPtrOutput
	ToRuleStatusPtrOutputWithContext(context.Context) RuleStatusPtrOutput
}

type ruleStatusPtr string

func RuleStatusPtr(v string) RuleStatusPtrInput {
	return (*ruleStatusPtr)(&v)
}

func (*ruleStatusPtr) ElementType() reflect.Type {
	return ruleStatusPtrType
}

func (in *ruleStatusPtr) ToRuleStatusPtrOutput() RuleStatusPtrOutput {
	return pulumi.ToOutput(in).(RuleStatusPtrOutput)
}

func (in *ruleStatusPtr) ToRuleStatusPtrOutputWithContext(ctx context.Context) RuleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RuleStatusPtrOutput)
}

func (in *ruleStatusPtr) ToOutput(ctx context.Context) pulumix.Output[*RuleStatus] {
	return pulumix.Output[*RuleStatus]{
		OutputState: in.ToRuleStatusPtrOutputWithContext(ctx).OutputState,
	}
}

// Frequency of the schedule.
type ScheduleFrequency string

const (
	// Cost analysis data will be emailed every day.
	ScheduleFrequencyDaily = ScheduleFrequency("Daily")
	// Cost analysis data will be emailed every week.
	ScheduleFrequencyWeekly = ScheduleFrequency("Weekly")
	// Cost analysis data will be emailed every month.
	ScheduleFrequencyMonthly = ScheduleFrequency("Monthly")
)

func (ScheduleFrequency) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFrequency)(nil)).Elem()
}

func (e ScheduleFrequency) ToScheduleFrequencyOutput() ScheduleFrequencyOutput {
	return pulumi.ToOutput(e).(ScheduleFrequencyOutput)
}

func (e ScheduleFrequency) ToScheduleFrequencyOutputWithContext(ctx context.Context) ScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleFrequencyOutput)
}

func (e ScheduleFrequency) ToScheduleFrequencyPtrOutput() ScheduleFrequencyPtrOutput {
	return e.ToScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (e ScheduleFrequency) ToScheduleFrequencyPtrOutputWithContext(ctx context.Context) ScheduleFrequencyPtrOutput {
	return ScheduleFrequency(e).ToScheduleFrequencyOutputWithContext(ctx).ToScheduleFrequencyPtrOutputWithContext(ctx)
}

func (e ScheduleFrequency) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleFrequency) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleFrequency) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleFrequency) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (ScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFrequency)(nil)).Elem()
}

func (o ScheduleFrequencyOutput) ToScheduleFrequencyOutput() ScheduleFrequencyOutput {
	return o
}

func (o ScheduleFrequencyOutput) ToScheduleFrequencyOutputWithContext(ctx context.Context) ScheduleFrequencyOutput {
	return o
}

func (o ScheduleFrequencyOutput) ToScheduleFrequencyPtrOutput() ScheduleFrequencyPtrOutput {
	return o.ToScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (o ScheduleFrequencyOutput) ToScheduleFrequencyPtrOutputWithContext(ctx context.Context) ScheduleFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleFrequency) *ScheduleFrequency {
		return &v
	}).(ScheduleFrequencyPtrOutput)
}

func (o ScheduleFrequencyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleFrequencyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleFrequency) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleFrequencyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleFrequencyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleFrequency) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleFrequencyPtrOutput struct{ *pulumi.OutputState }

func (ScheduleFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleFrequency)(nil)).Elem()
}

func (o ScheduleFrequencyPtrOutput) ToScheduleFrequencyPtrOutput() ScheduleFrequencyPtrOutput {
	return o
}

func (o ScheduleFrequencyPtrOutput) ToScheduleFrequencyPtrOutputWithContext(ctx context.Context) ScheduleFrequencyPtrOutput {
	return o
}

func (o ScheduleFrequencyPtrOutput) Elem() ScheduleFrequencyOutput {
	return o.ApplyT(func(v *ScheduleFrequency) ScheduleFrequency {
		if v != nil {
			return *v
		}
		var ret ScheduleFrequency
		return ret
	}).(ScheduleFrequencyOutput)
}

func (o ScheduleFrequencyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleFrequencyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleFrequency) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleFrequencyInput is an input type that accepts values of the ScheduleFrequency enum
// A concrete instance of `ScheduleFrequencyInput` can be one of the following:
//
//	ScheduleFrequencyDaily
//	ScheduleFrequencyWeekly
//	ScheduleFrequencyMonthly
type ScheduleFrequencyInput interface {
	pulumi.Input

	ToScheduleFrequencyOutput() ScheduleFrequencyOutput
	ToScheduleFrequencyOutputWithContext(context.Context) ScheduleFrequencyOutput
}

var scheduleFrequencyPtrType = reflect.TypeOf((**ScheduleFrequency)(nil)).Elem()

type ScheduleFrequencyPtrInput interface {
	pulumi.Input

	ToScheduleFrequencyPtrOutput() ScheduleFrequencyPtrOutput
	ToScheduleFrequencyPtrOutputWithContext(context.Context) ScheduleFrequencyPtrOutput
}

type scheduleFrequencyPtr string

func ScheduleFrequencyPtr(v string) ScheduleFrequencyPtrInput {
	return (*scheduleFrequencyPtr)(&v)
}

func (*scheduleFrequencyPtr) ElementType() reflect.Type {
	return scheduleFrequencyPtrType
}

func (in *scheduleFrequencyPtr) ToScheduleFrequencyPtrOutput() ScheduleFrequencyPtrOutput {
	return pulumi.ToOutput(in).(ScheduleFrequencyPtrOutput)
}

func (in *scheduleFrequencyPtr) ToScheduleFrequencyPtrOutputWithContext(ctx context.Context) ScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleFrequencyPtrOutput)
}

func (in *scheduleFrequencyPtr) ToOutput(ctx context.Context) pulumix.Output[*ScheduleFrequency] {
	return pulumix.Output[*ScheduleFrequency]{
		OutputState: in.ToScheduleFrequencyPtrOutputWithContext(ctx).OutputState,
	}
}

// Kind of the scheduled action.
type ScheduledActionKind string

const (
	// Cost analysis data will be emailed.
	ScheduledActionKindEmail = ScheduledActionKind("Email")
	// Cost anomaly information will be emailed. Available only on subscription scope at daily frequency. If no anomaly is detected on the resource, an email won't be sent.
	ScheduledActionKindInsightAlert = ScheduledActionKind("InsightAlert")
)

func (ScheduledActionKind) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionKind)(nil)).Elem()
}

func (e ScheduledActionKind) ToScheduledActionKindOutput() ScheduledActionKindOutput {
	return pulumi.ToOutput(e).(ScheduledActionKindOutput)
}

func (e ScheduledActionKind) ToScheduledActionKindOutputWithContext(ctx context.Context) ScheduledActionKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduledActionKindOutput)
}

func (e ScheduledActionKind) ToScheduledActionKindPtrOutput() ScheduledActionKindPtrOutput {
	return e.ToScheduledActionKindPtrOutputWithContext(context.Background())
}

func (e ScheduledActionKind) ToScheduledActionKindPtrOutputWithContext(ctx context.Context) ScheduledActionKindPtrOutput {
	return ScheduledActionKind(e).ToScheduledActionKindOutputWithContext(ctx).ToScheduledActionKindPtrOutputWithContext(ctx)
}

func (e ScheduledActionKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduledActionKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduledActionKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduledActionKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduledActionKindOutput struct{ *pulumi.OutputState }

func (ScheduledActionKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionKind)(nil)).Elem()
}

func (o ScheduledActionKindOutput) ToScheduledActionKindOutput() ScheduledActionKindOutput {
	return o
}

func (o ScheduledActionKindOutput) ToScheduledActionKindOutputWithContext(ctx context.Context) ScheduledActionKindOutput {
	return o
}

func (o ScheduledActionKindOutput) ToScheduledActionKindPtrOutput() ScheduledActionKindPtrOutput {
	return o.ToScheduledActionKindPtrOutputWithContext(context.Background())
}

func (o ScheduledActionKindOutput) ToScheduledActionKindPtrOutputWithContext(ctx context.Context) ScheduledActionKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledActionKind) *ScheduledActionKind {
		return &v
	}).(ScheduledActionKindPtrOutput)
}

func (o ScheduledActionKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduledActionKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduledActionKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduledActionKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduledActionKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduledActionKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduledActionKindPtrOutput struct{ *pulumi.OutputState }

func (ScheduledActionKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionKind)(nil)).Elem()
}

func (o ScheduledActionKindPtrOutput) ToScheduledActionKindPtrOutput() ScheduledActionKindPtrOutput {
	return o
}

func (o ScheduledActionKindPtrOutput) ToScheduledActionKindPtrOutputWithContext(ctx context.Context) ScheduledActionKindPtrOutput {
	return o
}

func (o ScheduledActionKindPtrOutput) Elem() ScheduledActionKindOutput {
	return o.ApplyT(func(v *ScheduledActionKind) ScheduledActionKind {
		if v != nil {
			return *v
		}
		var ret ScheduledActionKind
		return ret
	}).(ScheduledActionKindOutput)
}

func (o ScheduledActionKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduledActionKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduledActionKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduledActionKindInput is an input type that accepts values of the ScheduledActionKind enum
// A concrete instance of `ScheduledActionKindInput` can be one of the following:
//
//	ScheduledActionKindEmail
//	ScheduledActionKindInsightAlert
type ScheduledActionKindInput interface {
	pulumi.Input

	ToScheduledActionKindOutput() ScheduledActionKindOutput
	ToScheduledActionKindOutputWithContext(context.Context) ScheduledActionKindOutput
}

var scheduledActionKindPtrType = reflect.TypeOf((**ScheduledActionKind)(nil)).Elem()

type ScheduledActionKindPtrInput interface {
	pulumi.Input

	ToScheduledActionKindPtrOutput() ScheduledActionKindPtrOutput
	ToScheduledActionKindPtrOutputWithContext(context.Context) ScheduledActionKindPtrOutput
}

type scheduledActionKindPtr string

func ScheduledActionKindPtr(v string) ScheduledActionKindPtrInput {
	return (*scheduledActionKindPtr)(&v)
}

func (*scheduledActionKindPtr) ElementType() reflect.Type {
	return scheduledActionKindPtrType
}

func (in *scheduledActionKindPtr) ToScheduledActionKindPtrOutput() ScheduledActionKindPtrOutput {
	return pulumi.ToOutput(in).(ScheduledActionKindPtrOutput)
}

func (in *scheduledActionKindPtr) ToScheduledActionKindPtrOutputWithContext(ctx context.Context) ScheduledActionKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduledActionKindPtrOutput)
}

func (in *scheduledActionKindPtr) ToOutput(ctx context.Context) pulumix.Output[*ScheduledActionKind] {
	return pulumix.Output[*ScheduledActionKind]{
		OutputState: in.ToScheduledActionKindPtrOutputWithContext(ctx).OutputState,
	}
}

// Status of the scheduled action.
type ScheduledActionStatus string

const (
	// Scheduled action is saved but will not be run.
	ScheduledActionStatusDisabled = ScheduledActionStatus("Disabled")
	// Scheduled action is saved and will be run.
	ScheduledActionStatusEnabled = ScheduledActionStatus("Enabled")
	// Scheduled action is expired.
	ScheduledActionStatusExpired = ScheduledActionStatus("Expired")
)

func (ScheduledActionStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionStatus)(nil)).Elem()
}

func (e ScheduledActionStatus) ToScheduledActionStatusOutput() ScheduledActionStatusOutput {
	return pulumi.ToOutput(e).(ScheduledActionStatusOutput)
}

func (e ScheduledActionStatus) ToScheduledActionStatusOutputWithContext(ctx context.Context) ScheduledActionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduledActionStatusOutput)
}

func (e ScheduledActionStatus) ToScheduledActionStatusPtrOutput() ScheduledActionStatusPtrOutput {
	return e.ToScheduledActionStatusPtrOutputWithContext(context.Background())
}

func (e ScheduledActionStatus) ToScheduledActionStatusPtrOutputWithContext(ctx context.Context) ScheduledActionStatusPtrOutput {
	return ScheduledActionStatus(e).ToScheduledActionStatusOutputWithContext(ctx).ToScheduledActionStatusPtrOutputWithContext(ctx)
}

func (e ScheduledActionStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduledActionStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduledActionStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduledActionStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduledActionStatusOutput struct{ *pulumi.OutputState }

func (ScheduledActionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledActionStatus)(nil)).Elem()
}

func (o ScheduledActionStatusOutput) ToScheduledActionStatusOutput() ScheduledActionStatusOutput {
	return o
}

func (o ScheduledActionStatusOutput) ToScheduledActionStatusOutputWithContext(ctx context.Context) ScheduledActionStatusOutput {
	return o
}

func (o ScheduledActionStatusOutput) ToScheduledActionStatusPtrOutput() ScheduledActionStatusPtrOutput {
	return o.ToScheduledActionStatusPtrOutputWithContext(context.Background())
}

func (o ScheduledActionStatusOutput) ToScheduledActionStatusPtrOutputWithContext(ctx context.Context) ScheduledActionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledActionStatus) *ScheduledActionStatus {
		return &v
	}).(ScheduledActionStatusPtrOutput)
}

func (o ScheduledActionStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduledActionStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduledActionStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduledActionStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduledActionStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduledActionStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduledActionStatusPtrOutput struct{ *pulumi.OutputState }

func (ScheduledActionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledActionStatus)(nil)).Elem()
}

func (o ScheduledActionStatusPtrOutput) ToScheduledActionStatusPtrOutput() ScheduledActionStatusPtrOutput {
	return o
}

func (o ScheduledActionStatusPtrOutput) ToScheduledActionStatusPtrOutputWithContext(ctx context.Context) ScheduledActionStatusPtrOutput {
	return o
}

func (o ScheduledActionStatusPtrOutput) Elem() ScheduledActionStatusOutput {
	return o.ApplyT(func(v *ScheduledActionStatus) ScheduledActionStatus {
		if v != nil {
			return *v
		}
		var ret ScheduledActionStatus
		return ret
	}).(ScheduledActionStatusOutput)
}

func (o ScheduledActionStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduledActionStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduledActionStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduledActionStatusInput is an input type that accepts values of the ScheduledActionStatus enum
// A concrete instance of `ScheduledActionStatusInput` can be one of the following:
//
//	ScheduledActionStatusDisabled
//	ScheduledActionStatusEnabled
//	ScheduledActionStatusExpired
type ScheduledActionStatusInput interface {
	pulumi.Input

	ToScheduledActionStatusOutput() ScheduledActionStatusOutput
	ToScheduledActionStatusOutputWithContext(context.Context) ScheduledActionStatusOutput
}

var scheduledActionStatusPtrType = reflect.TypeOf((**ScheduledActionStatus)(nil)).Elem()

type ScheduledActionStatusPtrInput interface {
	pulumi.Input

	ToScheduledActionStatusPtrOutput() ScheduledActionStatusPtrOutput
	ToScheduledActionStatusPtrOutputWithContext(context.Context) ScheduledActionStatusPtrOutput
}

type scheduledActionStatusPtr string

func ScheduledActionStatusPtr(v string) ScheduledActionStatusPtrInput {
	return (*scheduledActionStatusPtr)(&v)
}

func (*scheduledActionStatusPtr) ElementType() reflect.Type {
	return scheduledActionStatusPtrType
}

func (in *scheduledActionStatusPtr) ToScheduledActionStatusPtrOutput() ScheduledActionStatusPtrOutput {
	return pulumi.ToOutput(in).(ScheduledActionStatusPtrOutput)
}

func (in *scheduledActionStatusPtr) ToScheduledActionStatusPtrOutputWithContext(ctx context.Context) ScheduledActionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduledActionStatusPtrOutput)
}

func (in *scheduledActionStatusPtr) ToOutput(ctx context.Context) pulumix.Output[*ScheduledActionStatus] {
	return pulumix.Output[*ScheduledActionStatus]{
		OutputState: in.ToScheduledActionStatusPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the kind of settings.
type SettingsKind string

const (
	SettingsKindTaginheritance = SettingsKind("taginheritance")
)

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
type StatusType string

const (
	StatusTypeActive   = StatusType("Active")
	StatusTypeInactive = StatusType("Inactive")
)

func (StatusType) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusType)(nil)).Elem()
}

func (e StatusType) ToStatusTypeOutput() StatusTypeOutput {
	return pulumi.ToOutput(e).(StatusTypeOutput)
}

func (e StatusType) ToStatusTypeOutputWithContext(ctx context.Context) StatusTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StatusTypeOutput)
}

func (e StatusType) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return e.ToStatusTypePtrOutputWithContext(context.Background())
}

func (e StatusType) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return StatusType(e).ToStatusTypeOutputWithContext(ctx).ToStatusTypePtrOutputWithContext(ctx)
}

func (e StatusType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StatusType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StatusTypeOutput struct{ *pulumi.OutputState }

func (StatusTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusType)(nil)).Elem()
}

func (o StatusTypeOutput) ToStatusTypeOutput() StatusTypeOutput {
	return o
}

func (o StatusTypeOutput) ToStatusTypeOutputWithContext(ctx context.Context) StatusTypeOutput {
	return o
}

func (o StatusTypeOutput) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return o.ToStatusTypePtrOutputWithContext(context.Background())
}

func (o StatusTypeOutput) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusType) *StatusType {
		return &v
	}).(StatusTypePtrOutput)
}

func (o StatusTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StatusTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StatusTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatusTypePtrOutput struct{ *pulumi.OutputState }

func (StatusTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusType)(nil)).Elem()
}

func (o StatusTypePtrOutput) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return o
}

func (o StatusTypePtrOutput) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return o
}

func (o StatusTypePtrOutput) Elem() StatusTypeOutput {
	return o.ApplyT(func(v *StatusType) StatusType {
		if v != nil {
			return *v
		}
		var ret StatusType
		return ret
	}).(StatusTypeOutput)
}

func (o StatusTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StatusType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StatusTypeInput is an input type that accepts values of the StatusType enum
// A concrete instance of `StatusTypeInput` can be one of the following:
//
//	StatusTypeActive
//	StatusTypeInactive
type StatusTypeInput interface {
	pulumi.Input

	ToStatusTypeOutput() StatusTypeOutput
	ToStatusTypeOutputWithContext(context.Context) StatusTypeOutput
}

var statusTypePtrType = reflect.TypeOf((**StatusType)(nil)).Elem()

type StatusTypePtrInput interface {
	pulumi.Input

	ToStatusTypePtrOutput() StatusTypePtrOutput
	ToStatusTypePtrOutputWithContext(context.Context) StatusTypePtrOutput
}

type statusTypePtr string

func StatusTypePtr(v string) StatusTypePtrInput {
	return (*statusTypePtr)(&v)
}

func (*statusTypePtr) ElementType() reflect.Type {
	return statusTypePtrType
}

func (in *statusTypePtr) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return pulumi.ToOutput(in).(StatusTypePtrOutput)
}

func (in *statusTypePtr) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StatusTypePtrOutput)
}

func (in *statusTypePtr) ToOutput(ctx context.Context) pulumix.Output[*StatusType] {
	return pulumix.Output[*StatusType]{
		OutputState: in.ToStatusTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Type of managed service identity (either system assigned, or none).
type SystemAssignedServiceIdentityType string

const (
	SystemAssignedServiceIdentityTypeNone           = SystemAssignedServiceIdentityType("None")
	SystemAssignedServiceIdentityTypeSystemAssigned = SystemAssignedServiceIdentityType("SystemAssigned")
)

func (SystemAssignedServiceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedServiceIdentityType)(nil)).Elem()
}

func (e SystemAssignedServiceIdentityType) ToSystemAssignedServiceIdentityTypeOutput() SystemAssignedServiceIdentityTypeOutput {
	return pulumi.ToOutput(e).(SystemAssignedServiceIdentityTypeOutput)
}

func (e SystemAssignedServiceIdentityType) ToSystemAssignedServiceIdentityTypeOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SystemAssignedServiceIdentityTypeOutput)
}

func (e SystemAssignedServiceIdentityType) ToSystemAssignedServiceIdentityTypePtrOutput() SystemAssignedServiceIdentityTypePtrOutput {
	return e.ToSystemAssignedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (e SystemAssignedServiceIdentityType) ToSystemAssignedServiceIdentityTypePtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityTypePtrOutput {
	return SystemAssignedServiceIdentityType(e).ToSystemAssignedServiceIdentityTypeOutputWithContext(ctx).ToSystemAssignedServiceIdentityTypePtrOutputWithContext(ctx)
}

func (e SystemAssignedServiceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SystemAssignedServiceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SystemAssignedServiceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SystemAssignedServiceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SystemAssignedServiceIdentityTypeOutput struct{ *pulumi.OutputState }

func (SystemAssignedServiceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedServiceIdentityType)(nil)).Elem()
}

func (o SystemAssignedServiceIdentityTypeOutput) ToSystemAssignedServiceIdentityTypeOutput() SystemAssignedServiceIdentityTypeOutput {
	return o
}

func (o SystemAssignedServiceIdentityTypeOutput) ToSystemAssignedServiceIdentityTypeOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityTypeOutput {
	return o
}

func (o SystemAssignedServiceIdentityTypeOutput) ToSystemAssignedServiceIdentityTypePtrOutput() SystemAssignedServiceIdentityTypePtrOutput {
	return o.ToSystemAssignedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (o SystemAssignedServiceIdentityTypeOutput) ToSystemAssignedServiceIdentityTypePtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemAssignedServiceIdentityType) *SystemAssignedServiceIdentityType {
		return &v
	}).(SystemAssignedServiceIdentityTypePtrOutput)
}

func (o SystemAssignedServiceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SystemAssignedServiceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SystemAssignedServiceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SystemAssignedServiceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SystemAssignedServiceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SystemAssignedServiceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SystemAssignedServiceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (SystemAssignedServiceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAssignedServiceIdentityType)(nil)).Elem()
}

func (o SystemAssignedServiceIdentityTypePtrOutput) ToSystemAssignedServiceIdentityTypePtrOutput() SystemAssignedServiceIdentityTypePtrOutput {
	return o
}

func (o SystemAssignedServiceIdentityTypePtrOutput) ToSystemAssignedServiceIdentityTypePtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityTypePtrOutput {
	return o
}

func (o SystemAssignedServiceIdentityTypePtrOutput) Elem() SystemAssignedServiceIdentityTypeOutput {
	return o.ApplyT(func(v *SystemAssignedServiceIdentityType) SystemAssignedServiceIdentityType {
		if v != nil {
			return *v
		}
		var ret SystemAssignedServiceIdentityType
		return ret
	}).(SystemAssignedServiceIdentityTypeOutput)
}

func (o SystemAssignedServiceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SystemAssignedServiceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SystemAssignedServiceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SystemAssignedServiceIdentityTypeInput is an input type that accepts values of the SystemAssignedServiceIdentityType enum
// A concrete instance of `SystemAssignedServiceIdentityTypeInput` can be one of the following:
//
//	SystemAssignedServiceIdentityTypeNone
//	SystemAssignedServiceIdentityTypeSystemAssigned
type SystemAssignedServiceIdentityTypeInput interface {
	pulumi.Input

	ToSystemAssignedServiceIdentityTypeOutput() SystemAssignedServiceIdentityTypeOutput
	ToSystemAssignedServiceIdentityTypeOutputWithContext(context.Context) SystemAssignedServiceIdentityTypeOutput
}

var systemAssignedServiceIdentityTypePtrType = reflect.TypeOf((**SystemAssignedServiceIdentityType)(nil)).Elem()

type SystemAssignedServiceIdentityTypePtrInput interface {
	pulumi.Input

	ToSystemAssignedServiceIdentityTypePtrOutput() SystemAssignedServiceIdentityTypePtrOutput
	ToSystemAssignedServiceIdentityTypePtrOutputWithContext(context.Context) SystemAssignedServiceIdentityTypePtrOutput
}

type systemAssignedServiceIdentityTypePtr string

func SystemAssignedServiceIdentityTypePtr(v string) SystemAssignedServiceIdentityTypePtrInput {
	return (*systemAssignedServiceIdentityTypePtr)(&v)
}

func (*systemAssignedServiceIdentityTypePtr) ElementType() reflect.Type {
	return systemAssignedServiceIdentityTypePtrType
}

func (in *systemAssignedServiceIdentityTypePtr) ToSystemAssignedServiceIdentityTypePtrOutput() SystemAssignedServiceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(SystemAssignedServiceIdentityTypePtrOutput)
}

func (in *systemAssignedServiceIdentityTypePtr) ToSystemAssignedServiceIdentityTypePtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SystemAssignedServiceIdentityTypePtrOutput)
}

func (in *systemAssignedServiceIdentityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SystemAssignedServiceIdentityType] {
	return pulumix.Output[*SystemAssignedServiceIdentityType]{
		OutputState: in.ToSystemAssignedServiceIdentityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of threshold.
//
//	Supported for CategoryType(s): Cost.
type ThresholdType string

const (
	// Actual costs budget alerts notify when the actual accrued cost exceeds the allocated budget.
	ThresholdTypeActual = ThresholdType("Actual")
	// Forecasted costs budget alerts provide advanced notification that your spending trends are likely to exceed your allocated budget, as it relies on forecasted cost predictions.
	ThresholdTypeForecasted = ThresholdType("Forecasted")
)

func (ThresholdType) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdType)(nil)).Elem()
}

func (e ThresholdType) ToThresholdTypeOutput() ThresholdTypeOutput {
	return pulumi.ToOutput(e).(ThresholdTypeOutput)
}

func (e ThresholdType) ToThresholdTypeOutputWithContext(ctx context.Context) ThresholdTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ThresholdTypeOutput)
}

func (e ThresholdType) ToThresholdTypePtrOutput() ThresholdTypePtrOutput {
	return e.ToThresholdTypePtrOutputWithContext(context.Background())
}

func (e ThresholdType) ToThresholdTypePtrOutputWithContext(ctx context.Context) ThresholdTypePtrOutput {
	return ThresholdType(e).ToThresholdTypeOutputWithContext(ctx).ToThresholdTypePtrOutputWithContext(ctx)
}

func (e ThresholdType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ThresholdType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ThresholdTypeOutput struct{ *pulumi.OutputState }

func (ThresholdTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdType)(nil)).Elem()
}

func (o ThresholdTypeOutput) ToThresholdTypeOutput() ThresholdTypeOutput {
	return o
}

func (o ThresholdTypeOutput) ToThresholdTypeOutputWithContext(ctx context.Context) ThresholdTypeOutput {
	return o
}

func (o ThresholdTypeOutput) ToThresholdTypePtrOutput() ThresholdTypePtrOutput {
	return o.ToThresholdTypePtrOutputWithContext(context.Background())
}

func (o ThresholdTypeOutput) ToThresholdTypePtrOutputWithContext(ctx context.Context) ThresholdTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThresholdType) *ThresholdType {
		return &v
	}).(ThresholdTypePtrOutput)
}

func (o ThresholdTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ThresholdTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ThresholdTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ThresholdTypePtrOutput struct{ *pulumi.OutputState }

func (ThresholdTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThresholdType)(nil)).Elem()
}

func (o ThresholdTypePtrOutput) ToThresholdTypePtrOutput() ThresholdTypePtrOutput {
	return o
}

func (o ThresholdTypePtrOutput) ToThresholdTypePtrOutputWithContext(ctx context.Context) ThresholdTypePtrOutput {
	return o
}

func (o ThresholdTypePtrOutput) Elem() ThresholdTypeOutput {
	return o.ApplyT(func(v *ThresholdType) ThresholdType {
		if v != nil {
			return *v
		}
		var ret ThresholdType
		return ret
	}).(ThresholdTypeOutput)
}

func (o ThresholdTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ThresholdType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ThresholdTypeInput is an input type that accepts values of the ThresholdType enum
// A concrete instance of `ThresholdTypeInput` can be one of the following:
//
//	ThresholdTypeActual
//	ThresholdTypeForecasted
type ThresholdTypeInput interface {
	pulumi.Input

	ToThresholdTypeOutput() ThresholdTypeOutput
	ToThresholdTypeOutputWithContext(context.Context) ThresholdTypeOutput
}

var thresholdTypePtrType = reflect.TypeOf((**ThresholdType)(nil)).Elem()

type ThresholdTypePtrInput interface {
	pulumi.Input

	ToThresholdTypePtrOutput() ThresholdTypePtrOutput
	ToThresholdTypePtrOutputWithContext(context.Context) ThresholdTypePtrOutput
}

type thresholdTypePtr string

func ThresholdTypePtr(v string) ThresholdTypePtrInput {
	return (*thresholdTypePtr)(&v)
}

func (*thresholdTypePtr) ElementType() reflect.Type {
	return thresholdTypePtrType
}

func (in *thresholdTypePtr) ToThresholdTypePtrOutput() ThresholdTypePtrOutput {
	return pulumi.ToOutput(in).(ThresholdTypePtrOutput)
}

func (in *thresholdTypePtr) ToThresholdTypePtrOutputWithContext(ctx context.Context) ThresholdTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ThresholdTypePtrOutput)
}

func (in *thresholdTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ThresholdType] {
	return pulumix.Output[*ThresholdType]{
		OutputState: in.ToThresholdTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
//
// Supported for CategoryType(s): Cost, ReservationUtilization.
//
//	Supported timeGrainTypes for **CategoryType: Cost**
//
// - Monthly
// - Quarterly
// - Annually
// - BillingMonth*
// - BillingQuarter*
// - BillingAnnual*
//
//	 *only supported for Web Direct customers.
//
//	Supported timeGrainTypes for **CategoryType: ReservationUtilization**
//
// - Last7Days
// - Last30Days
//
//	Required for CategoryType(s): Cost, ReservationUtilization.
type TimeGrainType string

const (
	// The budget will track costs in the current calendar month against the amount.
	//
	//  Supported for CategoryType: Cost only.
	TimeGrainTypeMonthly = TimeGrainType("Monthly")
	// The budget will track costs in the current calendar quarter against the amount.
	//
	//  Supported for CategoryType: Cost only.
	TimeGrainTypeQuarterly = TimeGrainType("Quarterly")
	// The budget will track costs in the current calendar year against the amount.
	//
	//  Supported for CategoryType: Cost only.
	TimeGrainTypeAnnually = TimeGrainType("Annually")
	// The budget will track costs in the current billing month against the amount.
	//
	//  Supported for CategoryType: Cost and Web Direct customers only.
	TimeGrainTypeBillingMonth = TimeGrainType("BillingMonth")
	// The budget will track costs in the current billing quarter against the amount.
	//
	//  Supported for CategoryType: Cost and Web Direct customers only.
	TimeGrainTypeBillingQuarter = TimeGrainType("BillingQuarter")
	// The budget will track costs in the current billing year against the amount.
	//
	//  Supported for CategoryType: Cost and Web Direct customers only.
	TimeGrainTypeBillingAnnual = TimeGrainType("BillingAnnual")
	// The Reservation Utilization Alert Rule will evaluate reservations based on their 7-Day utilization percentage.
	//
	//  Supported for CategoryType: ReservationUtilization only.
	TimeGrainTypeLast7Days = TimeGrainType("Last7Days")
	// The Reservation Utilization Alert Rule will evaluate reservations based on their 30-Day utilization percentage.
	//
	//  Supported for CategoryType: ReservationUtilization only.
	TimeGrainTypeLast30Days = TimeGrainType("Last30Days")
)

func (TimeGrainType) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeGrainType)(nil)).Elem()
}

func (e TimeGrainType) ToTimeGrainTypeOutput() TimeGrainTypeOutput {
	return pulumi.ToOutput(e).(TimeGrainTypeOutput)
}

func (e TimeGrainType) ToTimeGrainTypeOutputWithContext(ctx context.Context) TimeGrainTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TimeGrainTypeOutput)
}

func (e TimeGrainType) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return e.ToTimeGrainTypePtrOutputWithContext(context.Background())
}

func (e TimeGrainType) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return TimeGrainType(e).ToTimeGrainTypeOutputWithContext(ctx).ToTimeGrainTypePtrOutputWithContext(ctx)
}

func (e TimeGrainType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeGrainType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeGrainType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TimeGrainType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TimeGrainTypeOutput struct{ *pulumi.OutputState }

func (TimeGrainTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeGrainType)(nil)).Elem()
}

func (o TimeGrainTypeOutput) ToTimeGrainTypeOutput() TimeGrainTypeOutput {
	return o
}

func (o TimeGrainTypeOutput) ToTimeGrainTypeOutputWithContext(ctx context.Context) TimeGrainTypeOutput {
	return o
}

func (o TimeGrainTypeOutput) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return o.ToTimeGrainTypePtrOutputWithContext(context.Background())
}

func (o TimeGrainTypeOutput) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeGrainType) *TimeGrainType {
		return &v
	}).(TimeGrainTypePtrOutput)
}

func (o TimeGrainTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TimeGrainTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeGrainType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TimeGrainTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeGrainTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeGrainType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TimeGrainTypePtrOutput struct{ *pulumi.OutputState }

func (TimeGrainTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeGrainType)(nil)).Elem()
}

func (o TimeGrainTypePtrOutput) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return o
}

func (o TimeGrainTypePtrOutput) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return o
}

func (o TimeGrainTypePtrOutput) Elem() TimeGrainTypeOutput {
	return o.ApplyT(func(v *TimeGrainType) TimeGrainType {
		if v != nil {
			return *v
		}
		var ret TimeGrainType
		return ret
	}).(TimeGrainTypeOutput)
}

func (o TimeGrainTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeGrainTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TimeGrainType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TimeGrainTypeInput is an input type that accepts values of the TimeGrainType enum
// A concrete instance of `TimeGrainTypeInput` can be one of the following:
//
//	TimeGrainTypeMonthly
//	TimeGrainTypeQuarterly
//	TimeGrainTypeAnnually
//	TimeGrainTypeBillingMonth
//	TimeGrainTypeBillingQuarter
//	TimeGrainTypeBillingAnnual
//	TimeGrainTypeLast7Days
//	TimeGrainTypeLast30Days
type TimeGrainTypeInput interface {
	pulumi.Input

	ToTimeGrainTypeOutput() TimeGrainTypeOutput
	ToTimeGrainTypeOutputWithContext(context.Context) TimeGrainTypeOutput
}

var timeGrainTypePtrType = reflect.TypeOf((**TimeGrainType)(nil)).Elem()

type TimeGrainTypePtrInput interface {
	pulumi.Input

	ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput
	ToTimeGrainTypePtrOutputWithContext(context.Context) TimeGrainTypePtrOutput
}

type timeGrainTypePtr string

func TimeGrainTypePtr(v string) TimeGrainTypePtrInput {
	return (*timeGrainTypePtr)(&v)
}

func (*timeGrainTypePtr) ElementType() reflect.Type {
	return timeGrainTypePtrType
}

func (in *timeGrainTypePtr) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return pulumi.ToOutput(in).(TimeGrainTypePtrOutput)
}

func (in *timeGrainTypePtr) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TimeGrainTypePtrOutput)
}

func (in *timeGrainTypePtr) ToOutput(ctx context.Context) pulumix.Output[*TimeGrainType] {
	return pulumix.Output[*TimeGrainType]{
		OutputState: in.ToTimeGrainTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
type TimeframeType string

const (
	TimeframeTypeMonthToDate         = TimeframeType("MonthToDate")
	TimeframeTypeBillingMonthToDate  = TimeframeType("BillingMonthToDate")
	TimeframeTypeTheLastMonth        = TimeframeType("TheLastMonth")
	TimeframeTypeTheLastBillingMonth = TimeframeType("TheLastBillingMonth")
	TimeframeTypeWeekToDate          = TimeframeType("WeekToDate")
	TimeframeTypeCustom              = TimeframeType("Custom")
)

func (TimeframeType) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeframeType)(nil)).Elem()
}

func (e TimeframeType) ToTimeframeTypeOutput() TimeframeTypeOutput {
	return pulumi.ToOutput(e).(TimeframeTypeOutput)
}

func (e TimeframeType) ToTimeframeTypeOutputWithContext(ctx context.Context) TimeframeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TimeframeTypeOutput)
}

func (e TimeframeType) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return e.ToTimeframeTypePtrOutputWithContext(context.Background())
}

func (e TimeframeType) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return TimeframeType(e).ToTimeframeTypeOutputWithContext(ctx).ToTimeframeTypePtrOutputWithContext(ctx)
}

func (e TimeframeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeframeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeframeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TimeframeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TimeframeTypeOutput struct{ *pulumi.OutputState }

func (TimeframeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeframeType)(nil)).Elem()
}

func (o TimeframeTypeOutput) ToTimeframeTypeOutput() TimeframeTypeOutput {
	return o
}

func (o TimeframeTypeOutput) ToTimeframeTypeOutputWithContext(ctx context.Context) TimeframeTypeOutput {
	return o
}

func (o TimeframeTypeOutput) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return o.ToTimeframeTypePtrOutputWithContext(context.Background())
}

func (o TimeframeTypeOutput) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeframeType) *TimeframeType {
		return &v
	}).(TimeframeTypePtrOutput)
}

func (o TimeframeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TimeframeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeframeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TimeframeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeframeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeframeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TimeframeTypePtrOutput struct{ *pulumi.OutputState }

func (TimeframeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeframeType)(nil)).Elem()
}

func (o TimeframeTypePtrOutput) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return o
}

func (o TimeframeTypePtrOutput) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return o
}

func (o TimeframeTypePtrOutput) Elem() TimeframeTypeOutput {
	return o.ApplyT(func(v *TimeframeType) TimeframeType {
		if v != nil {
			return *v
		}
		var ret TimeframeType
		return ret
	}).(TimeframeTypeOutput)
}

func (o TimeframeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeframeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TimeframeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TimeframeTypeInput is an input type that accepts values of the TimeframeType enum
// A concrete instance of `TimeframeTypeInput` can be one of the following:
//
//	TimeframeTypeMonthToDate
//	TimeframeTypeBillingMonthToDate
//	TimeframeTypeTheLastMonth
//	TimeframeTypeTheLastBillingMonth
//	TimeframeTypeWeekToDate
//	TimeframeTypeCustom
type TimeframeTypeInput interface {
	pulumi.Input

	ToTimeframeTypeOutput() TimeframeTypeOutput
	ToTimeframeTypeOutputWithContext(context.Context) TimeframeTypeOutput
}

var timeframeTypePtrType = reflect.TypeOf((**TimeframeType)(nil)).Elem()

type TimeframeTypePtrInput interface {
	pulumi.Input

	ToTimeframeTypePtrOutput() TimeframeTypePtrOutput
	ToTimeframeTypePtrOutputWithContext(context.Context) TimeframeTypePtrOutput
}

type timeframeTypePtr string

func TimeframeTypePtr(v string) TimeframeTypePtrInput {
	return (*timeframeTypePtr)(&v)
}

func (*timeframeTypePtr) ElementType() reflect.Type {
	return timeframeTypePtrType
}

func (in *timeframeTypePtr) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return pulumi.ToOutput(in).(TimeframeTypePtrOutput)
}

func (in *timeframeTypePtr) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TimeframeTypePtrOutput)
}

func (in *timeframeTypePtr) ToOutput(ctx context.Context) pulumix.Output[*TimeframeType] {
	return pulumix.Output[*TimeframeType]{
		OutputState: in.ToTimeframeTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Weeks of month.
type WeeksOfMonth string

const (
	WeeksOfMonthFirst  = WeeksOfMonth("First")
	WeeksOfMonthSecond = WeeksOfMonth("Second")
	WeeksOfMonthThird  = WeeksOfMonth("Third")
	WeeksOfMonthFourth = WeeksOfMonth("Fourth")
	WeeksOfMonthLast   = WeeksOfMonth("Last")
)

func (WeeksOfMonth) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeksOfMonth)(nil)).Elem()
}

func (e WeeksOfMonth) ToWeeksOfMonthOutput() WeeksOfMonthOutput {
	return pulumi.ToOutput(e).(WeeksOfMonthOutput)
}

func (e WeeksOfMonth) ToWeeksOfMonthOutputWithContext(ctx context.Context) WeeksOfMonthOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeeksOfMonthOutput)
}

func (e WeeksOfMonth) ToWeeksOfMonthPtrOutput() WeeksOfMonthPtrOutput {
	return e.ToWeeksOfMonthPtrOutputWithContext(context.Background())
}

func (e WeeksOfMonth) ToWeeksOfMonthPtrOutputWithContext(ctx context.Context) WeeksOfMonthPtrOutput {
	return WeeksOfMonth(e).ToWeeksOfMonthOutputWithContext(ctx).ToWeeksOfMonthPtrOutputWithContext(ctx)
}

func (e WeeksOfMonth) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeeksOfMonth) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeeksOfMonth) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeeksOfMonth) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeeksOfMonthOutput struct{ *pulumi.OutputState }

func (WeeksOfMonthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeksOfMonth)(nil)).Elem()
}

func (o WeeksOfMonthOutput) ToWeeksOfMonthOutput() WeeksOfMonthOutput {
	return o
}

func (o WeeksOfMonthOutput) ToWeeksOfMonthOutputWithContext(ctx context.Context) WeeksOfMonthOutput {
	return o
}

func (o WeeksOfMonthOutput) ToWeeksOfMonthPtrOutput() WeeksOfMonthPtrOutput {
	return o.ToWeeksOfMonthPtrOutputWithContext(context.Background())
}

func (o WeeksOfMonthOutput) ToWeeksOfMonthPtrOutputWithContext(ctx context.Context) WeeksOfMonthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeksOfMonth) *WeeksOfMonth {
		return &v
	}).(WeeksOfMonthPtrOutput)
}

func (o WeeksOfMonthOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeeksOfMonthOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeeksOfMonth) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeeksOfMonthOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeeksOfMonthOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeeksOfMonth) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeeksOfMonthPtrOutput struct{ *pulumi.OutputState }

func (WeeksOfMonthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeksOfMonth)(nil)).Elem()
}

func (o WeeksOfMonthPtrOutput) ToWeeksOfMonthPtrOutput() WeeksOfMonthPtrOutput {
	return o
}

func (o WeeksOfMonthPtrOutput) ToWeeksOfMonthPtrOutputWithContext(ctx context.Context) WeeksOfMonthPtrOutput {
	return o
}

func (o WeeksOfMonthPtrOutput) Elem() WeeksOfMonthOutput {
	return o.ApplyT(func(v *WeeksOfMonth) WeeksOfMonth {
		if v != nil {
			return *v
		}
		var ret WeeksOfMonth
		return ret
	}).(WeeksOfMonthOutput)
}

func (o WeeksOfMonthPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeeksOfMonthPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeeksOfMonth) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeeksOfMonthInput is an input type that accepts values of the WeeksOfMonth enum
// A concrete instance of `WeeksOfMonthInput` can be one of the following:
//
//	WeeksOfMonthFirst
//	WeeksOfMonthSecond
//	WeeksOfMonthThird
//	WeeksOfMonthFourth
//	WeeksOfMonthLast
type WeeksOfMonthInput interface {
	pulumi.Input

	ToWeeksOfMonthOutput() WeeksOfMonthOutput
	ToWeeksOfMonthOutputWithContext(context.Context) WeeksOfMonthOutput
}

var weeksOfMonthPtrType = reflect.TypeOf((**WeeksOfMonth)(nil)).Elem()

type WeeksOfMonthPtrInput interface {
	pulumi.Input

	ToWeeksOfMonthPtrOutput() WeeksOfMonthPtrOutput
	ToWeeksOfMonthPtrOutputWithContext(context.Context) WeeksOfMonthPtrOutput
}

type weeksOfMonthPtr string

func WeeksOfMonthPtr(v string) WeeksOfMonthPtrInput {
	return (*weeksOfMonthPtr)(&v)
}

func (*weeksOfMonthPtr) ElementType() reflect.Type {
	return weeksOfMonthPtrType
}

func (in *weeksOfMonthPtr) ToWeeksOfMonthPtrOutput() WeeksOfMonthPtrOutput {
	return pulumi.ToOutput(in).(WeeksOfMonthPtrOutput)
}

func (in *weeksOfMonthPtr) ToWeeksOfMonthPtrOutputWithContext(ctx context.Context) WeeksOfMonthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeeksOfMonthPtrOutput)
}

func (in *weeksOfMonthPtr) ToOutput(ctx context.Context) pulumix.Output[*WeeksOfMonth] {
	return pulumix.Output[*WeeksOfMonth]{
		OutputState: in.ToWeeksOfMonthPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AccumulatedTypeOutput{})
	pulumi.RegisterOutputType(AccumulatedTypePtrOutput{})
	pulumi.RegisterOutputType(BudgetNotificationOperatorTypeOutput{})
	pulumi.RegisterOutputType(BudgetNotificationOperatorTypePtrOutput{})
	pulumi.RegisterOutputType(BudgetOperatorTypeOutput{})
	pulumi.RegisterOutputType(BudgetOperatorTypePtrOutput{})
	pulumi.RegisterOutputType(CategoryTypeOutput{})
	pulumi.RegisterOutputType(CategoryTypePtrOutput{})
	pulumi.RegisterOutputType(ChartTypeOutput{})
	pulumi.RegisterOutputType(ChartTypePtrOutput{})
	pulumi.RegisterOutputType(CostAllocationPolicyTypeOutput{})
	pulumi.RegisterOutputType(CostAllocationPolicyTypePtrOutput{})
	pulumi.RegisterOutputType(CostAllocationResourceTypeOutput{})
	pulumi.RegisterOutputType(CostAllocationResourceTypePtrOutput{})
	pulumi.RegisterOutputType(CultureCodeOutput{})
	pulumi.RegisterOutputType(CultureCodePtrOutput{})
	pulumi.RegisterOutputType(DaysOfWeekOutput{})
	pulumi.RegisterOutputType(DaysOfWeekPtrOutput{})
	pulumi.RegisterOutputType(ExportTypeOutput{})
	pulumi.RegisterOutputType(ExportTypePtrOutput{})
	pulumi.RegisterOutputType(FileFormatOutput{})
	pulumi.RegisterOutputType(FileFormatPtrOutput{})
	pulumi.RegisterOutputType(FormatTypeOutput{})
	pulumi.RegisterOutputType(FormatTypePtrOutput{})
	pulumi.RegisterOutputType(FrequencyOutput{})
	pulumi.RegisterOutputType(FrequencyPtrOutput{})
	pulumi.RegisterOutputType(FunctionTypeOutput{})
	pulumi.RegisterOutputType(FunctionTypePtrOutput{})
	pulumi.RegisterOutputType(GranularityTypeOutput{})
	pulumi.RegisterOutputType(GranularityTypePtrOutput{})
	pulumi.RegisterOutputType(KpiTypeTypeOutput{})
	pulumi.RegisterOutputType(KpiTypeTypePtrOutput{})
	pulumi.RegisterOutputType(MetricTypeOutput{})
	pulumi.RegisterOutputType(MetricTypePtrOutput{})
	pulumi.RegisterOutputType(OperatorTypeOutput{})
	pulumi.RegisterOutputType(OperatorTypePtrOutput{})
	pulumi.RegisterOutputType(PivotTypeTypeOutput{})
	pulumi.RegisterOutputType(PivotTypeTypePtrOutput{})
	pulumi.RegisterOutputType(QueryColumnTypeOutput{})
	pulumi.RegisterOutputType(QueryColumnTypePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTypeOutput{})
	pulumi.RegisterOutputType(RecurrenceTypePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingTypeOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingTypePtrOutput{})
	pulumi.RegisterOutputType(ReportGranularityTypeOutput{})
	pulumi.RegisterOutputType(ReportGranularityTypePtrOutput{})
	pulumi.RegisterOutputType(ReportTimeframeTypeOutput{})
	pulumi.RegisterOutputType(ReportTimeframeTypePtrOutput{})
	pulumi.RegisterOutputType(ReportTypeOutput{})
	pulumi.RegisterOutputType(ReportTypePtrOutput{})
	pulumi.RegisterOutputType(RuleStatusOutput{})
	pulumi.RegisterOutputType(RuleStatusPtrOutput{})
	pulumi.RegisterOutputType(ScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(ScheduleFrequencyPtrOutput{})
	pulumi.RegisterOutputType(ScheduledActionKindOutput{})
	pulumi.RegisterOutputType(ScheduledActionKindPtrOutput{})
	pulumi.RegisterOutputType(ScheduledActionStatusOutput{})
	pulumi.RegisterOutputType(ScheduledActionStatusPtrOutput{})
	pulumi.RegisterOutputType(StatusTypeOutput{})
	pulumi.RegisterOutputType(StatusTypePtrOutput{})
	pulumi.RegisterOutputType(SystemAssignedServiceIdentityTypeOutput{})
	pulumi.RegisterOutputType(SystemAssignedServiceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(ThresholdTypeOutput{})
	pulumi.RegisterOutputType(ThresholdTypePtrOutput{})
	pulumi.RegisterOutputType(TimeGrainTypeOutput{})
	pulumi.RegisterOutputType(TimeGrainTypePtrOutput{})
	pulumi.RegisterOutputType(TimeframeTypeOutput{})
	pulumi.RegisterOutputType(TimeframeTypePtrOutput{})
	pulumi.RegisterOutputType(WeeksOfMonthOutput{})
	pulumi.RegisterOutputType(WeeksOfMonthPtrOutput{})
}
