// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the setting from the given scope by name.
//
// Deprecated: Please use one of the variants: TagInheritanceSetting.
func LookupSettingByScope(ctx *pulumi.Context, args *LookupSettingByScopeArgs, opts ...pulumi.InvokeOption) (*LookupSettingByScopeResult, error) {
	var rv LookupSettingByScopeResult
	err := ctx.Invoke("azure-native:costmanagement/v20221001preview:getSettingByScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSettingByScopeArgs struct {
	// The scope associated with this setting. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billing profile scope.
	Scope string `pulumi:"scope"`
	// Setting type.
	Type string `pulumi:"type"`
}

// Setting definition.
type LookupSettingByScopeResult struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag *string `pulumi:"eTag"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Specifies the kind of settings.
	Kind string `pulumi:"kind"`
	// Resource name.
	Name string `pulumi:"name"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupSettingByScopeOutput(ctx *pulumi.Context, args LookupSettingByScopeOutputArgs, opts ...pulumi.InvokeOption) LookupSettingByScopeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSettingByScopeResult, error) {
			args := v.(LookupSettingByScopeArgs)
			r, err := LookupSettingByScope(ctx, &args, opts...)
			var s LookupSettingByScopeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSettingByScopeResultOutput)
}

type LookupSettingByScopeOutputArgs struct {
	// The scope associated with this setting. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billing profile scope.
	Scope pulumi.StringInput `pulumi:"scope"`
	// Setting type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupSettingByScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSettingByScopeArgs)(nil)).Elem()
}

// Setting definition.
type LookupSettingByScopeResultOutput struct{ *pulumi.OutputState }

func (LookupSettingByScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSettingByScopeResult)(nil)).Elem()
}

func (o LookupSettingByScopeResultOutput) ToLookupSettingByScopeResultOutput() LookupSettingByScopeResultOutput {
	return o
}

func (o LookupSettingByScopeResultOutput) ToLookupSettingByScopeResultOutputWithContext(ctx context.Context) LookupSettingByScopeResultOutput {
	return o
}

// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
func (o LookupSettingByScopeResultOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSettingByScopeResult) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Resource Id.
func (o LookupSettingByScopeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingByScopeResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the kind of settings.
func (o LookupSettingByScopeResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingByScopeResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupSettingByScopeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingByScopeResult) string { return v.Name }).(pulumi.StringOutput)
}

// Resource type.
func (o LookupSettingByScopeResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSettingByScopeResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSettingByScopeResultOutput{})
}
