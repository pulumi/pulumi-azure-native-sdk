// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221005preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Markup rule
type MarkupRule struct {
	pulumi.CustomResourceState

	// Customer information for the markup rule.
	CustomerDetails CustomerMetadataResponseOutput `pulumi:"customerDetails"`
	// The description of the markup rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag pulumi.StringPtrOutput `pulumi:"eTag"`
	// Ending date of the markup rule.
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The markup percentage of the rule.
	Percentage pulumi.Float64Output `pulumi:"percentage"`
	// Starting date of the markup rule.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMarkupRule registers a new resource with the given unique name, arguments, and options.
func NewMarkupRule(ctx *pulumi.Context,
	name string, args *MarkupRuleArgs, opts ...pulumi.ResourceOption) (*MarkupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BillingAccountId == nil {
		return nil, errors.New("invalid value for required argument 'BillingAccountId'")
	}
	if args.BillingProfileId == nil {
		return nil, errors.New("invalid value for required argument 'BillingProfileId'")
	}
	if args.CustomerDetails == nil {
		return nil, errors.New("invalid value for required argument 'CustomerDetails'")
	}
	if args.Percentage == nil {
		return nil, errors.New("invalid value for required argument 'Percentage'")
	}
	if args.StartDate == nil {
		return nil, errors.New("invalid value for required argument 'StartDate'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:costmanagement:MarkupRule"),
		},
	})
	opts = append(opts, aliases)
	var resource MarkupRule
	err := ctx.RegisterResource("azure-native:costmanagement/v20221005preview:MarkupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMarkupRule gets an existing MarkupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMarkupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MarkupRuleState, opts ...pulumi.ResourceOption) (*MarkupRule, error) {
	var resource MarkupRule
	err := ctx.ReadResource("azure-native:costmanagement/v20221005preview:MarkupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MarkupRule resources.
type markupRuleState struct {
}

type MarkupRuleState struct {
}

func (MarkupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*markupRuleState)(nil)).Elem()
}

type markupRuleArgs struct {
	// BillingAccount ID
	BillingAccountId string `pulumi:"billingAccountId"`
	// BillingProfile ID
	BillingProfileId string `pulumi:"billingProfileId"`
	// Customer information for the markup rule.
	CustomerDetails CustomerMetadata `pulumi:"customerDetails"`
	// The description of the markup rule.
	Description *string `pulumi:"description"`
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag *string `pulumi:"eTag"`
	// Ending date of the markup rule.
	EndDate *string `pulumi:"endDate"`
	// Markup rule name.
	Name *string `pulumi:"name"`
	// The markup percentage of the rule.
	Percentage float64 `pulumi:"percentage"`
	// Starting date of the markup rule.
	StartDate string `pulumi:"startDate"`
}

// The set of arguments for constructing a MarkupRule resource.
type MarkupRuleArgs struct {
	// BillingAccount ID
	BillingAccountId pulumi.StringInput
	// BillingProfile ID
	BillingProfileId pulumi.StringInput
	// Customer information for the markup rule.
	CustomerDetails CustomerMetadataInput
	// The description of the markup rule.
	Description pulumi.StringPtrInput
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag pulumi.StringPtrInput
	// Ending date of the markup rule.
	EndDate pulumi.StringPtrInput
	// Markup rule name.
	Name pulumi.StringPtrInput
	// The markup percentage of the rule.
	Percentage pulumi.Float64Input
	// Starting date of the markup rule.
	StartDate pulumi.StringInput
}

func (MarkupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*markupRuleArgs)(nil)).Elem()
}

type MarkupRuleInput interface {
	pulumi.Input

	ToMarkupRuleOutput() MarkupRuleOutput
	ToMarkupRuleOutputWithContext(ctx context.Context) MarkupRuleOutput
}

func (*MarkupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkupRule)(nil)).Elem()
}

func (i *MarkupRule) ToMarkupRuleOutput() MarkupRuleOutput {
	return i.ToMarkupRuleOutputWithContext(context.Background())
}

func (i *MarkupRule) ToMarkupRuleOutputWithContext(ctx context.Context) MarkupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarkupRuleOutput)
}

type MarkupRuleOutput struct{ *pulumi.OutputState }

func (MarkupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarkupRule)(nil)).Elem()
}

func (o MarkupRuleOutput) ToMarkupRuleOutput() MarkupRuleOutput {
	return o
}

func (o MarkupRuleOutput) ToMarkupRuleOutputWithContext(ctx context.Context) MarkupRuleOutput {
	return o
}

// Customer information for the markup rule.
func (o MarkupRuleOutput) CustomerDetails() CustomerMetadataResponseOutput {
	return o.ApplyT(func(v *MarkupRule) CustomerMetadataResponseOutput { return v.CustomerDetails }).(CustomerMetadataResponseOutput)
}

// The description of the markup rule.
func (o MarkupRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MarkupRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
func (o MarkupRuleOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MarkupRule) pulumi.StringPtrOutput { return v.ETag }).(pulumi.StringPtrOutput)
}

// Ending date of the markup rule.
func (o MarkupRuleOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MarkupRule) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o MarkupRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkupRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The markup percentage of the rule.
func (o MarkupRuleOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v *MarkupRule) pulumi.Float64Output { return v.Percentage }).(pulumi.Float64Output)
}

// Starting date of the markup rule.
func (o MarkupRuleOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkupRule) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// Resource type.
func (o MarkupRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MarkupRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MarkupRuleOutput{})
}
