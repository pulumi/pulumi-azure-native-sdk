// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221005preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Show costs accumulated over time.
type AccumulatedType string

const (
	AccumulatedTypeTrue  = AccumulatedType("true")
	AccumulatedTypeFalse = AccumulatedType("false")
)

func (AccumulatedType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccumulatedType)(nil)).Elem()
}

func (e AccumulatedType) ToAccumulatedTypeOutput() AccumulatedTypeOutput {
	return pulumi.ToOutput(e).(AccumulatedTypeOutput)
}

func (e AccumulatedType) ToAccumulatedTypeOutputWithContext(ctx context.Context) AccumulatedTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccumulatedTypeOutput)
}

func (e AccumulatedType) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return e.ToAccumulatedTypePtrOutputWithContext(context.Background())
}

func (e AccumulatedType) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return AccumulatedType(e).ToAccumulatedTypeOutputWithContext(ctx).ToAccumulatedTypePtrOutputWithContext(ctx)
}

func (e AccumulatedType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccumulatedType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccumulatedType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccumulatedType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccumulatedTypeOutput struct{ *pulumi.OutputState }

func (AccumulatedTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccumulatedType)(nil)).Elem()
}

func (o AccumulatedTypeOutput) ToAccumulatedTypeOutput() AccumulatedTypeOutput {
	return o
}

func (o AccumulatedTypeOutput) ToAccumulatedTypeOutputWithContext(ctx context.Context) AccumulatedTypeOutput {
	return o
}

func (o AccumulatedTypeOutput) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return o.ToAccumulatedTypePtrOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccumulatedType) *AccumulatedType {
		return &v
	}).(AccumulatedTypePtrOutput)
}

func (o AccumulatedTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccumulatedType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccumulatedTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccumulatedType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccumulatedTypePtrOutput struct{ *pulumi.OutputState }

func (AccumulatedTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccumulatedType)(nil)).Elem()
}

func (o AccumulatedTypePtrOutput) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return o
}

func (o AccumulatedTypePtrOutput) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return o
}

func (o AccumulatedTypePtrOutput) Elem() AccumulatedTypeOutput {
	return o.ApplyT(func(v *AccumulatedType) AccumulatedType {
		if v != nil {
			return *v
		}
		var ret AccumulatedType
		return ret
	}).(AccumulatedTypeOutput)
}

func (o AccumulatedTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccumulatedTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccumulatedType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccumulatedTypeInput is an input type that accepts values of the AccumulatedType enum
// A concrete instance of `AccumulatedTypeInput` can be one of the following:
//
//	AccumulatedTypeTrue
//	AccumulatedTypeFalse
type AccumulatedTypeInput interface {
	pulumi.Input

	ToAccumulatedTypeOutput() AccumulatedTypeOutput
	ToAccumulatedTypeOutputWithContext(context.Context) AccumulatedTypeOutput
}

var accumulatedTypePtrType = reflect.TypeOf((**AccumulatedType)(nil)).Elem()

type AccumulatedTypePtrInput interface {
	pulumi.Input

	ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput
	ToAccumulatedTypePtrOutputWithContext(context.Context) AccumulatedTypePtrOutput
}

type accumulatedTypePtr string

func AccumulatedTypePtr(v string) AccumulatedTypePtrInput {
	return (*accumulatedTypePtr)(&v)
}

func (*accumulatedTypePtr) ElementType() reflect.Type {
	return accumulatedTypePtrType
}

func (in *accumulatedTypePtr) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return pulumi.ToOutput(in).(AccumulatedTypePtrOutput)
}

func (in *accumulatedTypePtr) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccumulatedTypePtrOutput)
}

func (in *accumulatedTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AccumulatedType] {
	return pulumix.Output[*AccumulatedType]{
		OutputState: in.ToAccumulatedTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Chart type of the main view in Cost Analysis. Required.
type ChartType string

const (
	ChartTypeArea          = ChartType("Area")
	ChartTypeLine          = ChartType("Line")
	ChartTypeStackedColumn = ChartType("StackedColumn")
	ChartTypeGroupedColumn = ChartType("GroupedColumn")
	ChartTypeTable         = ChartType("Table")
)

func (ChartType) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartType)(nil)).Elem()
}

func (e ChartType) ToChartTypeOutput() ChartTypeOutput {
	return pulumi.ToOutput(e).(ChartTypeOutput)
}

func (e ChartType) ToChartTypeOutputWithContext(ctx context.Context) ChartTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ChartTypeOutput)
}

func (e ChartType) ToChartTypePtrOutput() ChartTypePtrOutput {
	return e.ToChartTypePtrOutputWithContext(context.Background())
}

func (e ChartType) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return ChartType(e).ToChartTypeOutputWithContext(ctx).ToChartTypePtrOutputWithContext(ctx)
}

func (e ChartType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChartType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ChartTypeOutput struct{ *pulumi.OutputState }

func (ChartTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartType)(nil)).Elem()
}

func (o ChartTypeOutput) ToChartTypeOutput() ChartTypeOutput {
	return o
}

func (o ChartTypeOutput) ToChartTypeOutputWithContext(ctx context.Context) ChartTypeOutput {
	return o
}

func (o ChartTypeOutput) ToChartTypePtrOutput() ChartTypePtrOutput {
	return o.ToChartTypePtrOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartType) *ChartType {
		return &v
	}).(ChartTypePtrOutput)
}

func (o ChartTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ChartTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ChartTypePtrOutput struct{ *pulumi.OutputState }

func (ChartTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartType)(nil)).Elem()
}

func (o ChartTypePtrOutput) ToChartTypePtrOutput() ChartTypePtrOutput {
	return o
}

func (o ChartTypePtrOutput) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return o
}

func (o ChartTypePtrOutput) Elem() ChartTypeOutput {
	return o.ApplyT(func(v *ChartType) ChartType {
		if v != nil {
			return *v
		}
		var ret ChartType
		return ret
	}).(ChartTypeOutput)
}

func (o ChartTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ChartType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ChartTypeInput is an input type that accepts values of the ChartType enum
// A concrete instance of `ChartTypeInput` can be one of the following:
//
//	ChartTypeArea
//	ChartTypeLine
//	ChartTypeStackedColumn
//	ChartTypeGroupedColumn
//	ChartTypeTable
type ChartTypeInput interface {
	pulumi.Input

	ToChartTypeOutput() ChartTypeOutput
	ToChartTypeOutputWithContext(context.Context) ChartTypeOutput
}

var chartTypePtrType = reflect.TypeOf((**ChartType)(nil)).Elem()

type ChartTypePtrInput interface {
	pulumi.Input

	ToChartTypePtrOutput() ChartTypePtrOutput
	ToChartTypePtrOutputWithContext(context.Context) ChartTypePtrOutput
}

type chartTypePtr string

func ChartTypePtr(v string) ChartTypePtrInput {
	return (*chartTypePtr)(&v)
}

func (*chartTypePtr) ElementType() reflect.Type {
	return chartTypePtrType
}

func (in *chartTypePtr) ToChartTypePtrOutput() ChartTypePtrOutput {
	return pulumi.ToOutput(in).(ChartTypePtrOutput)
}

func (in *chartTypePtr) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ChartTypePtrOutput)
}

func (in *chartTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ChartType] {
	return pulumix.Output[*ChartType]{
		OutputState: in.ToChartTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The name of the aggregation function to use.
type FunctionType string

const (
	FunctionTypeSum = FunctionType("Sum")
)

func (FunctionType) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (e FunctionType) ToFunctionTypeOutput() FunctionTypeOutput {
	return pulumi.ToOutput(e).(FunctionTypeOutput)
}

func (e FunctionType) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FunctionTypeOutput)
}

func (e FunctionType) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return e.ToFunctionTypePtrOutputWithContext(context.Background())
}

func (e FunctionType) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return FunctionType(e).ToFunctionTypeOutputWithContext(ctx).ToFunctionTypePtrOutputWithContext(ctx)
}

func (e FunctionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FunctionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FunctionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FunctionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FunctionTypeOutput struct{ *pulumi.OutputState }

func (FunctionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (o FunctionTypeOutput) ToFunctionTypeOutput() FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return o.ToFunctionTypePtrOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionType) *FunctionType {
		return &v
	}).(FunctionTypePtrOutput)
}

func (o FunctionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FunctionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FunctionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FunctionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FunctionTypePtrOutput struct{ *pulumi.OutputState }

func (FunctionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionType)(nil)).Elem()
}

func (o FunctionTypePtrOutput) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return o
}

func (o FunctionTypePtrOutput) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return o
}

func (o FunctionTypePtrOutput) Elem() FunctionTypeOutput {
	return o.ApplyT(func(v *FunctionType) FunctionType {
		if v != nil {
			return *v
		}
		var ret FunctionType
		return ret
	}).(FunctionTypeOutput)
}

func (o FunctionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FunctionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FunctionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FunctionTypeInput is an input type that accepts values of the FunctionType enum
// A concrete instance of `FunctionTypeInput` can be one of the following:
//
//	FunctionTypeSum
type FunctionTypeInput interface {
	pulumi.Input

	ToFunctionTypeOutput() FunctionTypeOutput
	ToFunctionTypeOutputWithContext(context.Context) FunctionTypeOutput
}

var functionTypePtrType = reflect.TypeOf((**FunctionType)(nil)).Elem()

type FunctionTypePtrInput interface {
	pulumi.Input

	ToFunctionTypePtrOutput() FunctionTypePtrOutput
	ToFunctionTypePtrOutputWithContext(context.Context) FunctionTypePtrOutput
}

type functionTypePtr string

func FunctionTypePtr(v string) FunctionTypePtrInput {
	return (*functionTypePtr)(&v)
}

func (*functionTypePtr) ElementType() reflect.Type {
	return functionTypePtrType
}

func (in *functionTypePtr) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return pulumi.ToOutput(in).(FunctionTypePtrOutput)
}

func (in *functionTypePtr) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FunctionTypePtrOutput)
}

func (in *functionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FunctionType] {
	return pulumix.Output[*FunctionType]{
		OutputState: in.ToFunctionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// KPI type (Forecast, Budget).
type KpiTypeType string

const (
	KpiTypeTypeForecast = KpiTypeType("Forecast")
	KpiTypeTypeBudget   = KpiTypeType("Budget")
)

func (KpiTypeType) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiTypeType)(nil)).Elem()
}

func (e KpiTypeType) ToKpiTypeTypeOutput() KpiTypeTypeOutput {
	return pulumi.ToOutput(e).(KpiTypeTypeOutput)
}

func (e KpiTypeType) ToKpiTypeTypeOutputWithContext(ctx context.Context) KpiTypeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KpiTypeTypeOutput)
}

func (e KpiTypeType) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return e.ToKpiTypeTypePtrOutputWithContext(context.Background())
}

func (e KpiTypeType) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return KpiTypeType(e).ToKpiTypeTypeOutputWithContext(ctx).ToKpiTypeTypePtrOutputWithContext(ctx)
}

func (e KpiTypeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiTypeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiTypeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KpiTypeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KpiTypeTypeOutput struct{ *pulumi.OutputState }

func (KpiTypeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiTypeType)(nil)).Elem()
}

func (o KpiTypeTypeOutput) ToKpiTypeTypeOutput() KpiTypeTypeOutput {
	return o
}

func (o KpiTypeTypeOutput) ToKpiTypeTypeOutputWithContext(ctx context.Context) KpiTypeTypeOutput {
	return o
}

func (o KpiTypeTypeOutput) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return o.ToKpiTypeTypePtrOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KpiTypeType) *KpiTypeType {
		return &v
	}).(KpiTypeTypePtrOutput)
}

func (o KpiTypeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiTypeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KpiTypeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiTypeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KpiTypeTypePtrOutput struct{ *pulumi.OutputState }

func (KpiTypeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiTypeType)(nil)).Elem()
}

func (o KpiTypeTypePtrOutput) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return o
}

func (o KpiTypeTypePtrOutput) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return o
}

func (o KpiTypeTypePtrOutput) Elem() KpiTypeTypeOutput {
	return o.ApplyT(func(v *KpiTypeType) KpiTypeType {
		if v != nil {
			return *v
		}
		var ret KpiTypeType
		return ret
	}).(KpiTypeTypeOutput)
}

func (o KpiTypeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiTypeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KpiTypeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KpiTypeTypeInput is an input type that accepts values of the KpiTypeType enum
// A concrete instance of `KpiTypeTypeInput` can be one of the following:
//
//	KpiTypeTypeForecast
//	KpiTypeTypeBudget
type KpiTypeTypeInput interface {
	pulumi.Input

	ToKpiTypeTypeOutput() KpiTypeTypeOutput
	ToKpiTypeTypeOutputWithContext(context.Context) KpiTypeTypeOutput
}

var kpiTypeTypePtrType = reflect.TypeOf((**KpiTypeType)(nil)).Elem()

type KpiTypeTypePtrInput interface {
	pulumi.Input

	ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput
	ToKpiTypeTypePtrOutputWithContext(context.Context) KpiTypeTypePtrOutput
}

type kpiTypeTypePtr string

func KpiTypeTypePtr(v string) KpiTypeTypePtrInput {
	return (*kpiTypeTypePtr)(&v)
}

func (*kpiTypeTypePtr) ElementType() reflect.Type {
	return kpiTypeTypePtrType
}

func (in *kpiTypeTypePtr) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return pulumi.ToOutput(in).(KpiTypeTypePtrOutput)
}

func (in *kpiTypeTypePtr) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KpiTypeTypePtrOutput)
}

func (in *kpiTypeTypePtr) ToOutput(ctx context.Context) pulumix.Output[*KpiTypeType] {
	return pulumix.Output[*KpiTypeType]{
		OutputState: in.ToKpiTypeTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Metric to use when displaying costs.
type MetricType string

const (
	MetricTypeActualCost    = MetricType("ActualCost")
	MetricTypeAmortizedCost = MetricType("AmortizedCost")
	MetricTypeAHUB          = MetricType("AHUB")
)

func (MetricType) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricType)(nil)).Elem()
}

func (e MetricType) ToMetricTypeOutput() MetricTypeOutput {
	return pulumi.ToOutput(e).(MetricTypeOutput)
}

func (e MetricType) ToMetricTypeOutputWithContext(ctx context.Context) MetricTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricTypeOutput)
}

func (e MetricType) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return e.ToMetricTypePtrOutputWithContext(context.Background())
}

func (e MetricType) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return MetricType(e).ToMetricTypeOutputWithContext(ctx).ToMetricTypePtrOutputWithContext(ctx)
}

func (e MetricType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricTypeOutput struct{ *pulumi.OutputState }

func (MetricTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricType)(nil)).Elem()
}

func (o MetricTypeOutput) ToMetricTypeOutput() MetricTypeOutput {
	return o
}

func (o MetricTypeOutput) ToMetricTypeOutputWithContext(ctx context.Context) MetricTypeOutput {
	return o
}

func (o MetricTypeOutput) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return o.ToMetricTypePtrOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricType) *MetricType {
		return &v
	}).(MetricTypePtrOutput)
}

func (o MetricTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricTypePtrOutput struct{ *pulumi.OutputState }

func (MetricTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricType)(nil)).Elem()
}

func (o MetricTypePtrOutput) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return o
}

func (o MetricTypePtrOutput) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return o
}

func (o MetricTypePtrOutput) Elem() MetricTypeOutput {
	return o.ApplyT(func(v *MetricType) MetricType {
		if v != nil {
			return *v
		}
		var ret MetricType
		return ret
	}).(MetricTypeOutput)
}

func (o MetricTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricTypeInput is an input type that accepts values of the MetricType enum
// A concrete instance of `MetricTypeInput` can be one of the following:
//
//	MetricTypeActualCost
//	MetricTypeAmortizedCost
//	MetricTypeAHUB
type MetricTypeInput interface {
	pulumi.Input

	ToMetricTypeOutput() MetricTypeOutput
	ToMetricTypeOutputWithContext(context.Context) MetricTypeOutput
}

var metricTypePtrType = reflect.TypeOf((**MetricType)(nil)).Elem()

type MetricTypePtrInput interface {
	pulumi.Input

	ToMetricTypePtrOutput() MetricTypePtrOutput
	ToMetricTypePtrOutputWithContext(context.Context) MetricTypePtrOutput
}

type metricTypePtr string

func MetricTypePtr(v string) MetricTypePtrInput {
	return (*metricTypePtr)(&v)
}

func (*metricTypePtr) ElementType() reflect.Type {
	return metricTypePtrType
}

func (in *metricTypePtr) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return pulumi.ToOutput(in).(MetricTypePtrOutput)
}

func (in *metricTypePtr) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricTypePtrOutput)
}

func (in *metricTypePtr) ToOutput(ctx context.Context) pulumix.Output[*MetricType] {
	return pulumix.Output[*MetricType]{
		OutputState: in.ToMetricTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The operator to use for comparison.
type OperatorType string

const (
	OperatorTypeIn       = OperatorType("In")
	OperatorTypeContains = OperatorType("Contains")
)

func (OperatorType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (e OperatorType) ToOperatorTypeOutput() OperatorTypeOutput {
	return pulumi.ToOutput(e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return e.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (e OperatorType) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return OperatorType(e).ToOperatorTypeOutputWithContext(ctx).ToOperatorTypePtrOutputWithContext(ctx)
}

func (e OperatorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorTypeOutput struct{ *pulumi.OutputState }

func (OperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (o OperatorTypeOutput) ToOperatorTypeOutput() OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatorType) *OperatorType {
		return &v
	}).(OperatorTypePtrOutput)
}

func (o OperatorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorTypePtrOutput struct{ *pulumi.OutputState }

func (OperatorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorType)(nil)).Elem()
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) Elem() OperatorTypeOutput {
	return o.ApplyT(func(v *OperatorType) OperatorType {
		if v != nil {
			return *v
		}
		var ret OperatorType
		return ret
	}).(OperatorTypeOutput)
}

func (o OperatorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatorTypeInput is an input type that accepts values of the OperatorType enum
// A concrete instance of `OperatorTypeInput` can be one of the following:
//
//	OperatorTypeIn
//	OperatorTypeContains
type OperatorTypeInput interface {
	pulumi.Input

	ToOperatorTypeOutput() OperatorTypeOutput
	ToOperatorTypeOutputWithContext(context.Context) OperatorTypeOutput
}

var operatorTypePtrType = reflect.TypeOf((**OperatorType)(nil)).Elem()

type OperatorTypePtrInput interface {
	pulumi.Input

	ToOperatorTypePtrOutput() OperatorTypePtrOutput
	ToOperatorTypePtrOutputWithContext(context.Context) OperatorTypePtrOutput
}

type operatorTypePtr string

func OperatorTypePtr(v string) OperatorTypePtrInput {
	return (*operatorTypePtr)(&v)
}

func (*operatorTypePtr) ElementType() reflect.Type {
	return operatorTypePtrType
}

func (in *operatorTypePtr) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return pulumi.ToOutput(in).(OperatorTypePtrOutput)
}

func (in *operatorTypePtr) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorTypePtrOutput)
}

func (in *operatorTypePtr) ToOutput(ctx context.Context) pulumix.Output[*OperatorType] {
	return pulumix.Output[*OperatorType]{
		OutputState: in.ToOperatorTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Data type to show in view.
type PivotTypeType string

const (
	PivotTypeTypeDimension = PivotTypeType("Dimension")
	PivotTypeTypeTagKey    = PivotTypeType("TagKey")
)

func (PivotTypeType) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotTypeType)(nil)).Elem()
}

func (e PivotTypeType) ToPivotTypeTypeOutput() PivotTypeTypeOutput {
	return pulumi.ToOutput(e).(PivotTypeTypeOutput)
}

func (e PivotTypeType) ToPivotTypeTypeOutputWithContext(ctx context.Context) PivotTypeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PivotTypeTypeOutput)
}

func (e PivotTypeType) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return e.ToPivotTypeTypePtrOutputWithContext(context.Background())
}

func (e PivotTypeType) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return PivotTypeType(e).ToPivotTypeTypeOutputWithContext(ctx).ToPivotTypeTypePtrOutputWithContext(ctx)
}

func (e PivotTypeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PivotTypeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PivotTypeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PivotTypeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PivotTypeTypeOutput struct{ *pulumi.OutputState }

func (PivotTypeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotTypeType)(nil)).Elem()
}

func (o PivotTypeTypeOutput) ToPivotTypeTypeOutput() PivotTypeTypeOutput {
	return o
}

func (o PivotTypeTypeOutput) ToPivotTypeTypeOutputWithContext(ctx context.Context) PivotTypeTypeOutput {
	return o
}

func (o PivotTypeTypeOutput) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return o.ToPivotTypeTypePtrOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PivotTypeType) *PivotTypeType {
		return &v
	}).(PivotTypeTypePtrOutput)
}

func (o PivotTypeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PivotTypeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PivotTypeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PivotTypeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PivotTypeTypePtrOutput struct{ *pulumi.OutputState }

func (PivotTypeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PivotTypeType)(nil)).Elem()
}

func (o PivotTypeTypePtrOutput) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return o
}

func (o PivotTypeTypePtrOutput) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return o
}

func (o PivotTypeTypePtrOutput) Elem() PivotTypeTypeOutput {
	return o.ApplyT(func(v *PivotTypeType) PivotTypeType {
		if v != nil {
			return *v
		}
		var ret PivotTypeType
		return ret
	}).(PivotTypeTypeOutput)
}

func (o PivotTypeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PivotTypeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PivotTypeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PivotTypeTypeInput is an input type that accepts values of the PivotTypeType enum
// A concrete instance of `PivotTypeTypeInput` can be one of the following:
//
//	PivotTypeTypeDimension
//	PivotTypeTypeTagKey
type PivotTypeTypeInput interface {
	pulumi.Input

	ToPivotTypeTypeOutput() PivotTypeTypeOutput
	ToPivotTypeTypeOutputWithContext(context.Context) PivotTypeTypeOutput
}

var pivotTypeTypePtrType = reflect.TypeOf((**PivotTypeType)(nil)).Elem()

type PivotTypeTypePtrInput interface {
	pulumi.Input

	ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput
	ToPivotTypeTypePtrOutputWithContext(context.Context) PivotTypeTypePtrOutput
}

type pivotTypeTypePtr string

func PivotTypeTypePtr(v string) PivotTypeTypePtrInput {
	return (*pivotTypeTypePtr)(&v)
}

func (*pivotTypeTypePtr) ElementType() reflect.Type {
	return pivotTypeTypePtrType
}

func (in *pivotTypeTypePtr) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return pulumi.ToOutput(in).(PivotTypeTypePtrOutput)
}

func (in *pivotTypeTypePtr) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PivotTypeTypePtrOutput)
}

func (in *pivotTypeTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PivotTypeType] {
	return pulumix.Output[*PivotTypeType]{
		OutputState: in.ToPivotTypeTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Has type of the column to group.
type ReportConfigColumnType string

const (
	ReportConfigColumnTypeTag       = ReportConfigColumnType("Tag")
	ReportConfigColumnTypeDimension = ReportConfigColumnType("Dimension")
)

func (ReportConfigColumnType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigColumnType)(nil)).Elem()
}

func (e ReportConfigColumnType) ToReportConfigColumnTypeOutput() ReportConfigColumnTypeOutput {
	return pulumi.ToOutput(e).(ReportConfigColumnTypeOutput)
}

func (e ReportConfigColumnType) ToReportConfigColumnTypeOutputWithContext(ctx context.Context) ReportConfigColumnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportConfigColumnTypeOutput)
}

func (e ReportConfigColumnType) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return e.ToReportConfigColumnTypePtrOutputWithContext(context.Background())
}

func (e ReportConfigColumnType) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return ReportConfigColumnType(e).ToReportConfigColumnTypeOutputWithContext(ctx).ToReportConfigColumnTypePtrOutputWithContext(ctx)
}

func (e ReportConfigColumnType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigColumnType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigColumnType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportConfigColumnType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportConfigColumnTypeOutput struct{ *pulumi.OutputState }

func (ReportConfigColumnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigColumnType)(nil)).Elem()
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypeOutput() ReportConfigColumnTypeOutput {
	return o
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypeOutputWithContext(ctx context.Context) ReportConfigColumnTypeOutput {
	return o
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return o.ToReportConfigColumnTypePtrOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigColumnType) *ReportConfigColumnType {
		return &v
	}).(ReportConfigColumnTypePtrOutput)
}

func (o ReportConfigColumnTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigColumnType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportConfigColumnTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigColumnType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportConfigColumnTypePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigColumnTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigColumnType)(nil)).Elem()
}

func (o ReportConfigColumnTypePtrOutput) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return o
}

func (o ReportConfigColumnTypePtrOutput) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return o
}

func (o ReportConfigColumnTypePtrOutput) Elem() ReportConfigColumnTypeOutput {
	return o.ApplyT(func(v *ReportConfigColumnType) ReportConfigColumnType {
		if v != nil {
			return *v
		}
		var ret ReportConfigColumnType
		return ret
	}).(ReportConfigColumnTypeOutput)
}

func (o ReportConfigColumnTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportConfigColumnType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportConfigColumnTypeInput is an input type that accepts values of the ReportConfigColumnType enum
// A concrete instance of `ReportConfigColumnTypeInput` can be one of the following:
//
//	ReportConfigColumnTypeTag
//	ReportConfigColumnTypeDimension
type ReportConfigColumnTypeInput interface {
	pulumi.Input

	ToReportConfigColumnTypeOutput() ReportConfigColumnTypeOutput
	ToReportConfigColumnTypeOutputWithContext(context.Context) ReportConfigColumnTypeOutput
}

var reportConfigColumnTypePtrType = reflect.TypeOf((**ReportConfigColumnType)(nil)).Elem()

type ReportConfigColumnTypePtrInput interface {
	pulumi.Input

	ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput
	ToReportConfigColumnTypePtrOutputWithContext(context.Context) ReportConfigColumnTypePtrOutput
}

type reportConfigColumnTypePtr string

func ReportConfigColumnTypePtr(v string) ReportConfigColumnTypePtrInput {
	return (*reportConfigColumnTypePtr)(&v)
}

func (*reportConfigColumnTypePtr) ElementType() reflect.Type {
	return reportConfigColumnTypePtrType
}

func (in *reportConfigColumnTypePtr) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return pulumi.ToOutput(in).(ReportConfigColumnTypePtrOutput)
}

func (in *reportConfigColumnTypePtr) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportConfigColumnTypePtrOutput)
}

func (in *reportConfigColumnTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportConfigColumnType] {
	return pulumix.Output[*ReportConfigColumnType]{
		OutputState: in.ToReportConfigColumnTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Direction of sort.
type ReportConfigSortingType string

const (
	ReportConfigSortingTypeAscending  = ReportConfigSortingType("Ascending")
	ReportConfigSortingTypeDescending = ReportConfigSortingType("Descending")
)

func (ReportConfigSortingType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSortingType)(nil)).Elem()
}

func (e ReportConfigSortingType) ToReportConfigSortingTypeOutput() ReportConfigSortingTypeOutput {
	return pulumi.ToOutput(e).(ReportConfigSortingTypeOutput)
}

func (e ReportConfigSortingType) ToReportConfigSortingTypeOutputWithContext(ctx context.Context) ReportConfigSortingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportConfigSortingTypeOutput)
}

func (e ReportConfigSortingType) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return e.ToReportConfigSortingTypePtrOutputWithContext(context.Background())
}

func (e ReportConfigSortingType) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return ReportConfigSortingType(e).ToReportConfigSortingTypeOutputWithContext(ctx).ToReportConfigSortingTypePtrOutputWithContext(ctx)
}

func (e ReportConfigSortingType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigSortingType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigSortingType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportConfigSortingType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportConfigSortingTypeOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSortingType)(nil)).Elem()
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypeOutput() ReportConfigSortingTypeOutput {
	return o
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypeOutputWithContext(ctx context.Context) ReportConfigSortingTypeOutput {
	return o
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return o.ToReportConfigSortingTypePtrOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypeOutput) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigSortingType) *ReportConfigSortingType {
		return &v
	}).(ReportConfigSortingTypePtrOutput)
}

func (o ReportConfigSortingTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigSortingType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportConfigSortingTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigSortingType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportConfigSortingTypePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigSortingType)(nil)).Elem()
}

func (o ReportConfigSortingTypePtrOutput) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return o
}

func (o ReportConfigSortingTypePtrOutput) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return o
}

func (o ReportConfigSortingTypePtrOutput) Elem() ReportConfigSortingTypeOutput {
	return o.ApplyT(func(v *ReportConfigSortingType) ReportConfigSortingType {
		if v != nil {
			return *v
		}
		var ret ReportConfigSortingType
		return ret
	}).(ReportConfigSortingTypeOutput)
}

func (o ReportConfigSortingTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigSortingTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportConfigSortingType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportConfigSortingTypeInput is an input type that accepts values of the ReportConfigSortingType enum
// A concrete instance of `ReportConfigSortingTypeInput` can be one of the following:
//
//	ReportConfigSortingTypeAscending
//	ReportConfigSortingTypeDescending
type ReportConfigSortingTypeInput interface {
	pulumi.Input

	ToReportConfigSortingTypeOutput() ReportConfigSortingTypeOutput
	ToReportConfigSortingTypeOutputWithContext(context.Context) ReportConfigSortingTypeOutput
}

var reportConfigSortingTypePtrType = reflect.TypeOf((**ReportConfigSortingType)(nil)).Elem()

type ReportConfigSortingTypePtrInput interface {
	pulumi.Input

	ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput
	ToReportConfigSortingTypePtrOutputWithContext(context.Context) ReportConfigSortingTypePtrOutput
}

type reportConfigSortingTypePtr string

func ReportConfigSortingTypePtr(v string) ReportConfigSortingTypePtrInput {
	return (*reportConfigSortingTypePtr)(&v)
}

func (*reportConfigSortingTypePtr) ElementType() reflect.Type {
	return reportConfigSortingTypePtrType
}

func (in *reportConfigSortingTypePtr) ToReportConfigSortingTypePtrOutput() ReportConfigSortingTypePtrOutput {
	return pulumi.ToOutput(in).(ReportConfigSortingTypePtrOutput)
}

func (in *reportConfigSortingTypePtr) ToReportConfigSortingTypePtrOutputWithContext(ctx context.Context) ReportConfigSortingTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportConfigSortingTypePtrOutput)
}

func (in *reportConfigSortingTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportConfigSortingType] {
	return pulumix.Output[*ReportConfigSortingType]{
		OutputState: in.ToReportConfigSortingTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The granularity of rows in the report.
type ReportGranularityType string

const (
	ReportGranularityTypeDaily   = ReportGranularityType("Daily")
	ReportGranularityTypeMonthly = ReportGranularityType("Monthly")
)

func (ReportGranularityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGranularityType)(nil)).Elem()
}

func (e ReportGranularityType) ToReportGranularityTypeOutput() ReportGranularityTypeOutput {
	return pulumi.ToOutput(e).(ReportGranularityTypeOutput)
}

func (e ReportGranularityType) ToReportGranularityTypeOutputWithContext(ctx context.Context) ReportGranularityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportGranularityTypeOutput)
}

func (e ReportGranularityType) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return e.ToReportGranularityTypePtrOutputWithContext(context.Background())
}

func (e ReportGranularityType) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return ReportGranularityType(e).ToReportGranularityTypeOutputWithContext(ctx).ToReportGranularityTypePtrOutputWithContext(ctx)
}

func (e ReportGranularityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportGranularityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportGranularityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportGranularityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportGranularityTypeOutput struct{ *pulumi.OutputState }

func (ReportGranularityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGranularityType)(nil)).Elem()
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypeOutput() ReportGranularityTypeOutput {
	return o
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypeOutputWithContext(ctx context.Context) ReportGranularityTypeOutput {
	return o
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return o.ToReportGranularityTypePtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportGranularityType) *ReportGranularityType {
		return &v
	}).(ReportGranularityTypePtrOutput)
}

func (o ReportGranularityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportGranularityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportGranularityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportGranularityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportGranularityTypePtrOutput struct{ *pulumi.OutputState }

func (ReportGranularityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportGranularityType)(nil)).Elem()
}

func (o ReportGranularityTypePtrOutput) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return o
}

func (o ReportGranularityTypePtrOutput) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return o
}

func (o ReportGranularityTypePtrOutput) Elem() ReportGranularityTypeOutput {
	return o.ApplyT(func(v *ReportGranularityType) ReportGranularityType {
		if v != nil {
			return *v
		}
		var ret ReportGranularityType
		return ret
	}).(ReportGranularityTypeOutput)
}

func (o ReportGranularityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportGranularityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportGranularityTypeInput is an input type that accepts values of the ReportGranularityType enum
// A concrete instance of `ReportGranularityTypeInput` can be one of the following:
//
//	ReportGranularityTypeDaily
//	ReportGranularityTypeMonthly
type ReportGranularityTypeInput interface {
	pulumi.Input

	ToReportGranularityTypeOutput() ReportGranularityTypeOutput
	ToReportGranularityTypeOutputWithContext(context.Context) ReportGranularityTypeOutput
}

var reportGranularityTypePtrType = reflect.TypeOf((**ReportGranularityType)(nil)).Elem()

type ReportGranularityTypePtrInput interface {
	pulumi.Input

	ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput
	ToReportGranularityTypePtrOutputWithContext(context.Context) ReportGranularityTypePtrOutput
}

type reportGranularityTypePtr string

func ReportGranularityTypePtr(v string) ReportGranularityTypePtrInput {
	return (*reportGranularityTypePtr)(&v)
}

func (*reportGranularityTypePtr) ElementType() reflect.Type {
	return reportGranularityTypePtrType
}

func (in *reportGranularityTypePtr) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return pulumi.ToOutput(in).(ReportGranularityTypePtrOutput)
}

func (in *reportGranularityTypePtr) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportGranularityTypePtrOutput)
}

func (in *reportGranularityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportGranularityType] {
	return pulumix.Output[*ReportGranularityType]{
		OutputState: in.ToReportGranularityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
type ReportTimeframeType string

const (
	ReportTimeframeTypeWeekToDate  = ReportTimeframeType("WeekToDate")
	ReportTimeframeTypeMonthToDate = ReportTimeframeType("MonthToDate")
	ReportTimeframeTypeYearToDate  = ReportTimeframeType("YearToDate")
	ReportTimeframeTypeCustom      = ReportTimeframeType("Custom")
)

func (ReportTimeframeType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeframeType)(nil)).Elem()
}

func (e ReportTimeframeType) ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput {
	return pulumi.ToOutput(e).(ReportTimeframeTypeOutput)
}

func (e ReportTimeframeType) ToReportTimeframeTypeOutputWithContext(ctx context.Context) ReportTimeframeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportTimeframeTypeOutput)
}

func (e ReportTimeframeType) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return e.ToReportTimeframeTypePtrOutputWithContext(context.Background())
}

func (e ReportTimeframeType) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return ReportTimeframeType(e).ToReportTimeframeTypeOutputWithContext(ctx).ToReportTimeframeTypePtrOutputWithContext(ctx)
}

func (e ReportTimeframeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportTimeframeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportTimeframeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportTimeframeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportTimeframeTypeOutput struct{ *pulumi.OutputState }

func (ReportTimeframeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeframeType)(nil)).Elem()
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput {
	return o
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypeOutputWithContext(ctx context.Context) ReportTimeframeTypeOutput {
	return o
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return o.ToReportTimeframeTypePtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportTimeframeType) *ReportTimeframeType {
		return &v
	}).(ReportTimeframeTypePtrOutput)
}

func (o ReportTimeframeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportTimeframeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportTimeframeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportTimeframeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportTimeframeTypePtrOutput struct{ *pulumi.OutputState }

func (ReportTimeframeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimeframeType)(nil)).Elem()
}

func (o ReportTimeframeTypePtrOutput) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return o
}

func (o ReportTimeframeTypePtrOutput) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return o
}

func (o ReportTimeframeTypePtrOutput) Elem() ReportTimeframeTypeOutput {
	return o.ApplyT(func(v *ReportTimeframeType) ReportTimeframeType {
		if v != nil {
			return *v
		}
		var ret ReportTimeframeType
		return ret
	}).(ReportTimeframeTypeOutput)
}

func (o ReportTimeframeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportTimeframeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportTimeframeTypeInput is an input type that accepts values of the ReportTimeframeType enum
// A concrete instance of `ReportTimeframeTypeInput` can be one of the following:
//
//	ReportTimeframeTypeWeekToDate
//	ReportTimeframeTypeMonthToDate
//	ReportTimeframeTypeYearToDate
//	ReportTimeframeTypeCustom
type ReportTimeframeTypeInput interface {
	pulumi.Input

	ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput
	ToReportTimeframeTypeOutputWithContext(context.Context) ReportTimeframeTypeOutput
}

var reportTimeframeTypePtrType = reflect.TypeOf((**ReportTimeframeType)(nil)).Elem()

type ReportTimeframeTypePtrInput interface {
	pulumi.Input

	ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput
	ToReportTimeframeTypePtrOutputWithContext(context.Context) ReportTimeframeTypePtrOutput
}

type reportTimeframeTypePtr string

func ReportTimeframeTypePtr(v string) ReportTimeframeTypePtrInput {
	return (*reportTimeframeTypePtr)(&v)
}

func (*reportTimeframeTypePtr) ElementType() reflect.Type {
	return reportTimeframeTypePtrType
}

func (in *reportTimeframeTypePtr) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return pulumi.ToOutput(in).(ReportTimeframeTypePtrOutput)
}

func (in *reportTimeframeTypePtr) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportTimeframeTypePtrOutput)
}

func (in *reportTimeframeTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportTimeframeType] {
	return pulumix.Output[*ReportTimeframeType]{
		OutputState: in.ToReportTimeframeTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.
type ReportType string

const (
	ReportTypeUsage = ReportType("Usage")
)

func (ReportType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportType)(nil)).Elem()
}

func (e ReportType) ToReportTypeOutput() ReportTypeOutput {
	return pulumi.ToOutput(e).(ReportTypeOutput)
}

func (e ReportType) ToReportTypeOutputWithContext(ctx context.Context) ReportTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportTypeOutput)
}

func (e ReportType) ToReportTypePtrOutput() ReportTypePtrOutput {
	return e.ToReportTypePtrOutputWithContext(context.Background())
}

func (e ReportType) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return ReportType(e).ToReportTypeOutputWithContext(ctx).ToReportTypePtrOutputWithContext(ctx)
}

func (e ReportType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportTypeOutput struct{ *pulumi.OutputState }

func (ReportTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportType)(nil)).Elem()
}

func (o ReportTypeOutput) ToReportTypeOutput() ReportTypeOutput {
	return o
}

func (o ReportTypeOutput) ToReportTypeOutputWithContext(ctx context.Context) ReportTypeOutput {
	return o
}

func (o ReportTypeOutput) ToReportTypePtrOutput() ReportTypePtrOutput {
	return o.ToReportTypePtrOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportType) *ReportType {
		return &v
	}).(ReportTypePtrOutput)
}

func (o ReportTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportTypePtrOutput struct{ *pulumi.OutputState }

func (ReportTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportType)(nil)).Elem()
}

func (o ReportTypePtrOutput) ToReportTypePtrOutput() ReportTypePtrOutput {
	return o
}

func (o ReportTypePtrOutput) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return o
}

func (o ReportTypePtrOutput) Elem() ReportTypeOutput {
	return o.ApplyT(func(v *ReportType) ReportType {
		if v != nil {
			return *v
		}
		var ret ReportType
		return ret
	}).(ReportTypeOutput)
}

func (o ReportTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReportTypeInput is an input type that accepts values of the ReportType enum
// A concrete instance of `ReportTypeInput` can be one of the following:
//
//	ReportTypeUsage
type ReportTypeInput interface {
	pulumi.Input

	ToReportTypeOutput() ReportTypeOutput
	ToReportTypeOutputWithContext(context.Context) ReportTypeOutput
}

var reportTypePtrType = reflect.TypeOf((**ReportType)(nil)).Elem()

type ReportTypePtrInput interface {
	pulumi.Input

	ToReportTypePtrOutput() ReportTypePtrOutput
	ToReportTypePtrOutputWithContext(context.Context) ReportTypePtrOutput
}

type reportTypePtr string

func ReportTypePtr(v string) ReportTypePtrInput {
	return (*reportTypePtr)(&v)
}

func (*reportTypePtr) ElementType() reflect.Type {
	return reportTypePtrType
}

func (in *reportTypePtr) ToReportTypePtrOutput() ReportTypePtrOutput {
	return pulumi.ToOutput(in).(ReportTypePtrOutput)
}

func (in *reportTypePtr) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportTypePtrOutput)
}

func (in *reportTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReportType] {
	return pulumix.Output[*ReportType]{
		OutputState: in.ToReportTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the kind of settings.
type SettingsKind string

const (
	SettingsKindTaginheritance = SettingsKind("taginheritance")
)

func init() {
	pulumi.RegisterOutputType(AccumulatedTypeOutput{})
	pulumi.RegisterOutputType(AccumulatedTypePtrOutput{})
	pulumi.RegisterOutputType(ChartTypeOutput{})
	pulumi.RegisterOutputType(ChartTypePtrOutput{})
	pulumi.RegisterOutputType(FunctionTypeOutput{})
	pulumi.RegisterOutputType(FunctionTypePtrOutput{})
	pulumi.RegisterOutputType(KpiTypeTypeOutput{})
	pulumi.RegisterOutputType(KpiTypeTypePtrOutput{})
	pulumi.RegisterOutputType(MetricTypeOutput{})
	pulumi.RegisterOutputType(MetricTypePtrOutput{})
	pulumi.RegisterOutputType(OperatorTypeOutput{})
	pulumi.RegisterOutputType(OperatorTypePtrOutput{})
	pulumi.RegisterOutputType(PivotTypeTypeOutput{})
	pulumi.RegisterOutputType(PivotTypeTypePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigColumnTypeOutput{})
	pulumi.RegisterOutputType(ReportConfigColumnTypePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingTypeOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingTypePtrOutput{})
	pulumi.RegisterOutputType(ReportGranularityTypeOutput{})
	pulumi.RegisterOutputType(ReportGranularityTypePtrOutput{})
	pulumi.RegisterOutputType(ReportTimeframeTypeOutput{})
	pulumi.RegisterOutputType(ReportTimeframeTypePtrOutput{})
	pulumi.RegisterOutputType(ReportTypeOutput{})
	pulumi.RegisterOutputType(ReportTypePtrOutput{})
}
