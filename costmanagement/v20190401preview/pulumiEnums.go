// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The category of the budget, whether the budget tracks cost or usage.
type CategoryType string

const (
	CategoryTypeCost  = CategoryType("Cost")
	CategoryTypeUsage = CategoryType("Usage")
)

func (CategoryType) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoryType)(nil)).Elem()
}

func (e CategoryType) ToCategoryTypeOutput() CategoryTypeOutput {
	return pulumi.ToOutput(e).(CategoryTypeOutput)
}

func (e CategoryType) ToCategoryTypeOutputWithContext(ctx context.Context) CategoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CategoryTypeOutput)
}

func (e CategoryType) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return e.ToCategoryTypePtrOutputWithContext(context.Background())
}

func (e CategoryType) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return CategoryType(e).ToCategoryTypeOutputWithContext(ctx).ToCategoryTypePtrOutputWithContext(ctx)
}

func (e CategoryType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CategoryType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CategoryType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CategoryType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CategoryTypeOutput struct{ *pulumi.OutputState }

func (CategoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoryType)(nil)).Elem()
}

func (o CategoryTypeOutput) ToCategoryTypeOutput() CategoryTypeOutput {
	return o
}

func (o CategoryTypeOutput) ToCategoryTypeOutputWithContext(ctx context.Context) CategoryTypeOutput {
	return o
}

func (o CategoryTypeOutput) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return o.ToCategoryTypePtrOutputWithContext(context.Background())
}

func (o CategoryTypeOutput) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CategoryType) *CategoryType {
		return &v
	}).(CategoryTypePtrOutput)
}

func (o CategoryTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CategoryTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CategoryType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CategoryTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CategoryTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CategoryType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CategoryTypePtrOutput struct{ *pulumi.OutputState }

func (CategoryTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CategoryType)(nil)).Elem()
}

func (o CategoryTypePtrOutput) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return o
}

func (o CategoryTypePtrOutput) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return o
}

func (o CategoryTypePtrOutput) Elem() CategoryTypeOutput {
	return o.ApplyT(func(v *CategoryType) CategoryType {
		if v != nil {
			return *v
		}
		var ret CategoryType
		return ret
	}).(CategoryTypeOutput)
}

func (o CategoryTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CategoryTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CategoryType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CategoryTypeInput is an input type that accepts values of the CategoryType enum
// A concrete instance of `CategoryTypeInput` can be one of the following:
//
//	CategoryTypeCost
//	CategoryTypeUsage
type CategoryTypeInput interface {
	pulumi.Input

	ToCategoryTypeOutput() CategoryTypeOutput
	ToCategoryTypeOutputWithContext(context.Context) CategoryTypeOutput
}

var categoryTypePtrType = reflect.TypeOf((**CategoryType)(nil)).Elem()

type CategoryTypePtrInput interface {
	pulumi.Input

	ToCategoryTypePtrOutput() CategoryTypePtrOutput
	ToCategoryTypePtrOutputWithContext(context.Context) CategoryTypePtrOutput
}

type categoryTypePtr string

func CategoryTypePtr(v string) CategoryTypePtrInput {
	return (*categoryTypePtr)(&v)
}

func (*categoryTypePtr) ElementType() reflect.Type {
	return categoryTypePtrType
}

func (in *categoryTypePtr) ToCategoryTypePtrOutput() CategoryTypePtrOutput {
	return pulumi.ToOutput(in).(CategoryTypePtrOutput)
}

func (in *categoryTypePtr) ToCategoryTypePtrOutputWithContext(ctx context.Context) CategoryTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CategoryTypePtrOutput)
}

func (in *categoryTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CategoryType] {
	return pulumix.Output[*CategoryType]{
		OutputState: in.ToCategoryTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The comparison operator.
type NotificationOperatorType string

const (
	NotificationOperatorTypeEqualTo              = NotificationOperatorType("EqualTo")
	NotificationOperatorTypeGreaterThan          = NotificationOperatorType("GreaterThan")
	NotificationOperatorTypeGreaterThanOrEqualTo = NotificationOperatorType("GreaterThanOrEqualTo")
)

func (NotificationOperatorType) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperatorType)(nil)).Elem()
}

func (e NotificationOperatorType) ToNotificationOperatorTypeOutput() NotificationOperatorTypeOutput {
	return pulumi.ToOutput(e).(NotificationOperatorTypeOutput)
}

func (e NotificationOperatorType) ToNotificationOperatorTypeOutputWithContext(ctx context.Context) NotificationOperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NotificationOperatorTypeOutput)
}

func (e NotificationOperatorType) ToNotificationOperatorTypePtrOutput() NotificationOperatorTypePtrOutput {
	return e.ToNotificationOperatorTypePtrOutputWithContext(context.Background())
}

func (e NotificationOperatorType) ToNotificationOperatorTypePtrOutputWithContext(ctx context.Context) NotificationOperatorTypePtrOutput {
	return NotificationOperatorType(e).ToNotificationOperatorTypeOutputWithContext(ctx).ToNotificationOperatorTypePtrOutputWithContext(ctx)
}

func (e NotificationOperatorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationOperatorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationOperatorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NotificationOperatorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NotificationOperatorTypeOutput struct{ *pulumi.OutputState }

func (NotificationOperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperatorType)(nil)).Elem()
}

func (o NotificationOperatorTypeOutput) ToNotificationOperatorTypeOutput() NotificationOperatorTypeOutput {
	return o
}

func (o NotificationOperatorTypeOutput) ToNotificationOperatorTypeOutputWithContext(ctx context.Context) NotificationOperatorTypeOutput {
	return o
}

func (o NotificationOperatorTypeOutput) ToNotificationOperatorTypePtrOutput() NotificationOperatorTypePtrOutput {
	return o.ToNotificationOperatorTypePtrOutputWithContext(context.Background())
}

func (o NotificationOperatorTypeOutput) ToNotificationOperatorTypePtrOutputWithContext(ctx context.Context) NotificationOperatorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationOperatorType) *NotificationOperatorType {
		return &v
	}).(NotificationOperatorTypePtrOutput)
}

func (o NotificationOperatorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NotificationOperatorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationOperatorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NotificationOperatorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationOperatorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationOperatorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NotificationOperatorTypePtrOutput struct{ *pulumi.OutputState }

func (NotificationOperatorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationOperatorType)(nil)).Elem()
}

func (o NotificationOperatorTypePtrOutput) ToNotificationOperatorTypePtrOutput() NotificationOperatorTypePtrOutput {
	return o
}

func (o NotificationOperatorTypePtrOutput) ToNotificationOperatorTypePtrOutputWithContext(ctx context.Context) NotificationOperatorTypePtrOutput {
	return o
}

func (o NotificationOperatorTypePtrOutput) Elem() NotificationOperatorTypeOutput {
	return o.ApplyT(func(v *NotificationOperatorType) NotificationOperatorType {
		if v != nil {
			return *v
		}
		var ret NotificationOperatorType
		return ret
	}).(NotificationOperatorTypeOutput)
}

func (o NotificationOperatorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationOperatorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NotificationOperatorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NotificationOperatorTypeInput is an input type that accepts values of the NotificationOperatorType enum
// A concrete instance of `NotificationOperatorTypeInput` can be one of the following:
//
//	NotificationOperatorTypeEqualTo
//	NotificationOperatorTypeGreaterThan
//	NotificationOperatorTypeGreaterThanOrEqualTo
type NotificationOperatorTypeInput interface {
	pulumi.Input

	ToNotificationOperatorTypeOutput() NotificationOperatorTypeOutput
	ToNotificationOperatorTypeOutputWithContext(context.Context) NotificationOperatorTypeOutput
}

var notificationOperatorTypePtrType = reflect.TypeOf((**NotificationOperatorType)(nil)).Elem()

type NotificationOperatorTypePtrInput interface {
	pulumi.Input

	ToNotificationOperatorTypePtrOutput() NotificationOperatorTypePtrOutput
	ToNotificationOperatorTypePtrOutputWithContext(context.Context) NotificationOperatorTypePtrOutput
}

type notificationOperatorTypePtr string

func NotificationOperatorTypePtr(v string) NotificationOperatorTypePtrInput {
	return (*notificationOperatorTypePtr)(&v)
}

func (*notificationOperatorTypePtr) ElementType() reflect.Type {
	return notificationOperatorTypePtrType
}

func (in *notificationOperatorTypePtr) ToNotificationOperatorTypePtrOutput() NotificationOperatorTypePtrOutput {
	return pulumi.ToOutput(in).(NotificationOperatorTypePtrOutput)
}

func (in *notificationOperatorTypePtr) ToNotificationOperatorTypePtrOutputWithContext(ctx context.Context) NotificationOperatorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NotificationOperatorTypePtrOutput)
}

func (in *notificationOperatorTypePtr) ToOutput(ctx context.Context) pulumix.Output[*NotificationOperatorType] {
	return pulumix.Output[*NotificationOperatorType]{
		OutputState: in.ToNotificationOperatorTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The operator to use for comparison.
type OperatorType string

const (
	OperatorTypeIn       = OperatorType("In")
	OperatorTypeContains = OperatorType("Contains")
)

func (OperatorType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (e OperatorType) ToOperatorTypeOutput() OperatorTypeOutput {
	return pulumi.ToOutput(e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return e.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (e OperatorType) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return OperatorType(e).ToOperatorTypeOutputWithContext(ctx).ToOperatorTypePtrOutputWithContext(ctx)
}

func (e OperatorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorTypeOutput struct{ *pulumi.OutputState }

func (OperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (o OperatorTypeOutput) ToOperatorTypeOutput() OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatorType) *OperatorType {
		return &v
	}).(OperatorTypePtrOutput)
}

func (o OperatorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorTypePtrOutput struct{ *pulumi.OutputState }

func (OperatorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorType)(nil)).Elem()
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) Elem() OperatorTypeOutput {
	return o.ApplyT(func(v *OperatorType) OperatorType {
		if v != nil {
			return *v
		}
		var ret OperatorType
		return ret
	}).(OperatorTypeOutput)
}

func (o OperatorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatorTypeInput is an input type that accepts values of the OperatorType enum
// A concrete instance of `OperatorTypeInput` can be one of the following:
//
//	OperatorTypeIn
//	OperatorTypeContains
type OperatorTypeInput interface {
	pulumi.Input

	ToOperatorTypeOutput() OperatorTypeOutput
	ToOperatorTypeOutputWithContext(context.Context) OperatorTypeOutput
}

var operatorTypePtrType = reflect.TypeOf((**OperatorType)(nil)).Elem()

type OperatorTypePtrInput interface {
	pulumi.Input

	ToOperatorTypePtrOutput() OperatorTypePtrOutput
	ToOperatorTypePtrOutputWithContext(context.Context) OperatorTypePtrOutput
}

type operatorTypePtr string

func OperatorTypePtr(v string) OperatorTypePtrInput {
	return (*operatorTypePtr)(&v)
}

func (*operatorTypePtr) ElementType() reflect.Type {
	return operatorTypePtrType
}

func (in *operatorTypePtr) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return pulumi.ToOutput(in).(OperatorTypePtrOutput)
}

func (in *operatorTypePtr) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorTypePtrOutput)
}

func (in *operatorTypePtr) ToOutput(ctx context.Context) pulumix.Output[*OperatorType] {
	return pulumix.Output[*OperatorType]{
		OutputState: in.ToOperatorTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
type TimeGrainType string

const (
	TimeGrainTypeMonthly   = TimeGrainType("Monthly")
	TimeGrainTypeQuarterly = TimeGrainType("Quarterly")
	TimeGrainTypeAnnually  = TimeGrainType("Annually")
)

func (TimeGrainType) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeGrainType)(nil)).Elem()
}

func (e TimeGrainType) ToTimeGrainTypeOutput() TimeGrainTypeOutput {
	return pulumi.ToOutput(e).(TimeGrainTypeOutput)
}

func (e TimeGrainType) ToTimeGrainTypeOutputWithContext(ctx context.Context) TimeGrainTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TimeGrainTypeOutput)
}

func (e TimeGrainType) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return e.ToTimeGrainTypePtrOutputWithContext(context.Background())
}

func (e TimeGrainType) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return TimeGrainType(e).ToTimeGrainTypeOutputWithContext(ctx).ToTimeGrainTypePtrOutputWithContext(ctx)
}

func (e TimeGrainType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeGrainType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeGrainType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TimeGrainType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TimeGrainTypeOutput struct{ *pulumi.OutputState }

func (TimeGrainTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeGrainType)(nil)).Elem()
}

func (o TimeGrainTypeOutput) ToTimeGrainTypeOutput() TimeGrainTypeOutput {
	return o
}

func (o TimeGrainTypeOutput) ToTimeGrainTypeOutputWithContext(ctx context.Context) TimeGrainTypeOutput {
	return o
}

func (o TimeGrainTypeOutput) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return o.ToTimeGrainTypePtrOutputWithContext(context.Background())
}

func (o TimeGrainTypeOutput) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeGrainType) *TimeGrainType {
		return &v
	}).(TimeGrainTypePtrOutput)
}

func (o TimeGrainTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TimeGrainTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeGrainType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TimeGrainTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeGrainTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeGrainType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TimeGrainTypePtrOutput struct{ *pulumi.OutputState }

func (TimeGrainTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeGrainType)(nil)).Elem()
}

func (o TimeGrainTypePtrOutput) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return o
}

func (o TimeGrainTypePtrOutput) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return o
}

func (o TimeGrainTypePtrOutput) Elem() TimeGrainTypeOutput {
	return o.ApplyT(func(v *TimeGrainType) TimeGrainType {
		if v != nil {
			return *v
		}
		var ret TimeGrainType
		return ret
	}).(TimeGrainTypeOutput)
}

func (o TimeGrainTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeGrainTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TimeGrainType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TimeGrainTypeInput is an input type that accepts values of the TimeGrainType enum
// A concrete instance of `TimeGrainTypeInput` can be one of the following:
//
//	TimeGrainTypeMonthly
//	TimeGrainTypeQuarterly
//	TimeGrainTypeAnnually
type TimeGrainTypeInput interface {
	pulumi.Input

	ToTimeGrainTypeOutput() TimeGrainTypeOutput
	ToTimeGrainTypeOutputWithContext(context.Context) TimeGrainTypeOutput
}

var timeGrainTypePtrType = reflect.TypeOf((**TimeGrainType)(nil)).Elem()

type TimeGrainTypePtrInput interface {
	pulumi.Input

	ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput
	ToTimeGrainTypePtrOutputWithContext(context.Context) TimeGrainTypePtrOutput
}

type timeGrainTypePtr string

func TimeGrainTypePtr(v string) TimeGrainTypePtrInput {
	return (*timeGrainTypePtr)(&v)
}

func (*timeGrainTypePtr) ElementType() reflect.Type {
	return timeGrainTypePtrType
}

func (in *timeGrainTypePtr) ToTimeGrainTypePtrOutput() TimeGrainTypePtrOutput {
	return pulumi.ToOutput(in).(TimeGrainTypePtrOutput)
}

func (in *timeGrainTypePtr) ToTimeGrainTypePtrOutputWithContext(ctx context.Context) TimeGrainTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TimeGrainTypePtrOutput)
}

func (in *timeGrainTypePtr) ToOutput(ctx context.Context) pulumix.Output[*TimeGrainType] {
	return pulumix.Output[*TimeGrainType]{
		OutputState: in.ToTimeGrainTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(CategoryTypeOutput{})
	pulumi.RegisterOutputType(CategoryTypePtrOutput{})
	pulumi.RegisterOutputType(NotificationOperatorTypeOutput{})
	pulumi.RegisterOutputType(NotificationOperatorTypePtrOutput{})
	pulumi.RegisterOutputType(OperatorTypeOutput{})
	pulumi.RegisterOutputType(OperatorTypePtrOutput{})
	pulumi.RegisterOutputType(TimeGrainTypeOutput{})
	pulumi.RegisterOutputType(TimeGrainTypePtrOutput{})
}
