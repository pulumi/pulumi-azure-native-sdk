// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The activation state of the API Bridge for this Communications Gateway
type ApiBridgeActivationState string

const (
	// API Bridge is enabled
	ApiBridgeActivationStateEnabled = ApiBridgeActivationState("enabled")
	// API Bridge is disabled
	ApiBridgeActivationStateDisabled = ApiBridgeActivationState("disabled")
)

// The scope at which the auto-generated domain name can be re-used
type AutoGeneratedDomainNameLabelScope string

const (
	// Generated domain name label depends on resource name and tenant ID.
	AutoGeneratedDomainNameLabelScopeTenantReuse = AutoGeneratedDomainNameLabelScope("TenantReuse")
	// Generated domain name label depends on resource name, tenant ID and subscription ID.
	AutoGeneratedDomainNameLabelScopeSubscriptionReuse = AutoGeneratedDomainNameLabelScope("SubscriptionReuse")
	// Generated domain name label depends on resource name, tenant ID, subscription ID and resource group name.
	AutoGeneratedDomainNameLabelScopeResourceGroupReuse = AutoGeneratedDomainNameLabelScope("ResourceGroupReuse")
	// Generated domain name label is always unique.
	AutoGeneratedDomainNameLabelScopeNoReuse = AutoGeneratedDomainNameLabelScope("NoReuse")
)

// Available platform types.
type CommunicationsPlatform string

const (
	// Operator Connect
	CommunicationsPlatformOperatorConnect = CommunicationsPlatform("OperatorConnect")
	// Teams Phone Mobile
	CommunicationsPlatformTeamsPhoneMobile = CommunicationsPlatform("TeamsPhoneMobile")
	// Teams Direct Routing
	CommunicationsPlatformTeamsDirectRouting = CommunicationsPlatform("TeamsDirectRouting")
)

// How to connect back to the operator network, e.g. MAPS
type Connectivity string

const (
	// This deployment connects to the operator network using a Public IP address, e.g. when using MAPS
	ConnectivityPublicAddress = Connectivity("PublicAddress")
)

// How to handle 911 calls
type E911Type string

const (
	// Emergency calls are not handled different from other calls
	E911TypeStandard = E911Type("Standard")
	// Emergency calls are routed directly to the ESRP
	E911TypeDirectToEsrp = E911Type("DirectToEsrp")
)

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned, UserAssigned")
)

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
type SkuTier string

const (
	SkuTierFree     = SkuTier("Free")
	SkuTierBasic    = SkuTier("Basic")
	SkuTierStandard = SkuTier("Standard")
	SkuTierPremium  = SkuTier("Premium")
)

func (SkuTier) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuTier)(nil)).Elem()
}

func (e SkuTier) ToSkuTierOutput() SkuTierOutput {
	return pulumi.ToOutput(e).(SkuTierOutput)
}

func (e SkuTier) ToSkuTierOutputWithContext(ctx context.Context) SkuTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SkuTierOutput)
}

func (e SkuTier) ToSkuTierPtrOutput() SkuTierPtrOutput {
	return e.ToSkuTierPtrOutputWithContext(context.Background())
}

func (e SkuTier) ToSkuTierPtrOutputWithContext(ctx context.Context) SkuTierPtrOutput {
	return SkuTier(e).ToSkuTierOutputWithContext(ctx).ToSkuTierPtrOutputWithContext(ctx)
}

func (e SkuTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SkuTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SkuTierOutput struct{ *pulumi.OutputState }

func (SkuTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuTier)(nil)).Elem()
}

func (o SkuTierOutput) ToSkuTierOutput() SkuTierOutput {
	return o
}

func (o SkuTierOutput) ToSkuTierOutputWithContext(ctx context.Context) SkuTierOutput {
	return o
}

func (o SkuTierOutput) ToSkuTierPtrOutput() SkuTierPtrOutput {
	return o.ToSkuTierPtrOutputWithContext(context.Background())
}

func (o SkuTierOutput) ToSkuTierPtrOutputWithContext(ctx context.Context) SkuTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuTier) *SkuTier {
		return &v
	}).(SkuTierPtrOutput)
}

func (o SkuTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SkuTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SkuTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SkuTierPtrOutput struct{ *pulumi.OutputState }

func (SkuTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuTier)(nil)).Elem()
}

func (o SkuTierPtrOutput) ToSkuTierPtrOutput() SkuTierPtrOutput {
	return o
}

func (o SkuTierPtrOutput) ToSkuTierPtrOutputWithContext(ctx context.Context) SkuTierPtrOutput {
	return o
}

func (o SkuTierPtrOutput) Elem() SkuTierOutput {
	return o.ApplyT(func(v *SkuTier) SkuTier {
		if v != nil {
			return *v
		}
		var ret SkuTier
		return ret
	}).(SkuTierOutput)
}

func (o SkuTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SkuTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SkuTierInput is an input type that accepts SkuTierArgs and SkuTierOutput values.
// You can construct a concrete instance of `SkuTierInput` via:
//
//	SkuTierArgs{...}
type SkuTierInput interface {
	pulumi.Input

	ToSkuTierOutput() SkuTierOutput
	ToSkuTierOutputWithContext(context.Context) SkuTierOutput
}

var skuTierPtrType = reflect.TypeOf((**SkuTier)(nil)).Elem()

type SkuTierPtrInput interface {
	pulumi.Input

	ToSkuTierPtrOutput() SkuTierPtrOutput
	ToSkuTierPtrOutputWithContext(context.Context) SkuTierPtrOutput
}

type skuTierPtr string

func SkuTierPtr(v string) SkuTierPtrInput {
	return (*skuTierPtr)(&v)
}

func (*skuTierPtr) ElementType() reflect.Type {
	return skuTierPtrType
}

func (in *skuTierPtr) ToSkuTierPtrOutput() SkuTierPtrOutput {
	return pulumi.ToOutput(in).(SkuTierPtrOutput)
}

func (in *skuTierPtr) ToSkuTierPtrOutputWithContext(ctx context.Context) SkuTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SkuTierPtrOutput)
}

func (in *skuTierPtr) ToOutput(ctx context.Context) pulumix.Output[*SkuTier] {
	return pulumix.Output[*SkuTier]{
		OutputState: in.ToSkuTierPtrOutputWithContext(ctx).OutputState,
	}
}

// The voice codecs expected for communication with Teams.
type TeamsCodecs string

const (
	// Pulse code modulation(PCM) U-law narrowband audio codec(G.711u)
	TeamsCodecsPCMA = TeamsCodecs("PCMA")
	// Pulse code modulation(PCM) U-law narrowband audio codec(G.711u)
	TeamsCodecsPCMU = TeamsCodecs("PCMU")
	// G.722 wideband audio codec
	TeamsCodecsG722 = TeamsCodecs("G722")
	// G.722.2 wideband audio codec
	TeamsCodecs_G722_2 = TeamsCodecs("G722_2")
	// SILK/8000 narrowband audio codec
	TeamsCodecs_SILK_8 = TeamsCodecs("SILK_8")
	// SILK/16000 wideband audio codec
	TeamsCodecs_SILK_16 = TeamsCodecs("SILK_16")
)

// Purpose of this test line, e.g. automated or manual testing
type TestLinePurpose string

const (
	// The test line is used for manual testing
	TestLinePurposeManual = TestLinePurpose("Manual")
	// The test line is used for automated testing
	TestLinePurposeAutomated = TestLinePurpose("Automated")
)

func init() {
	pulumi.RegisterOutputType(SkuTierOutput{})
	pulumi.RegisterOutputType(SkuTierPtrOutput{})
}
