// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scom

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A gateway resource.
// Azure REST API version: 2023-07-07-preview.
type ManagedGateway struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties of a gateway resource.
	Properties ManagedGatewayPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagedGateway registers a new resource with the given unique name, arguments, and options.
func NewManagedGateway(ctx *pulumi.Context,
	name string, args *ManagedGatewayArgs, opts ...pulumi.ResourceOption) (*ManagedGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:scom/v20230707preview:ManagedGateway"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ManagedGateway
	err := ctx.RegisterResource("azure-native:scom:ManagedGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedGateway gets an existing ManagedGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedGatewayState, opts ...pulumi.ResourceOption) (*ManagedGateway, error) {
	var resource ManagedGateway
	err := ctx.ReadResource("azure-native:scom:ManagedGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedGateway resources.
type managedGatewayState struct {
}

type ManagedGatewayState struct {
}

func (ManagedGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedGatewayState)(nil)).Elem()
}

type managedGatewayArgs struct {
	// Name of the SCOM managed instance.
	InstanceName string `pulumi:"instanceName"`
	// The gateway resource name.
	ManagedGatewayName *string `pulumi:"managedGatewayName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ManagedGateway resource.
type ManagedGatewayArgs struct {
	// Name of the SCOM managed instance.
	InstanceName pulumi.StringInput
	// The gateway resource name.
	ManagedGatewayName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (ManagedGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedGatewayArgs)(nil)).Elem()
}

type ManagedGatewayInput interface {
	pulumi.Input

	ToManagedGatewayOutput() ManagedGatewayOutput
	ToManagedGatewayOutputWithContext(ctx context.Context) ManagedGatewayOutput
}

func (*ManagedGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedGateway)(nil)).Elem()
}

func (i *ManagedGateway) ToManagedGatewayOutput() ManagedGatewayOutput {
	return i.ToManagedGatewayOutputWithContext(context.Background())
}

func (i *ManagedGateway) ToManagedGatewayOutputWithContext(ctx context.Context) ManagedGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedGatewayOutput)
}

type ManagedGatewayOutput struct{ *pulumi.OutputState }

func (ManagedGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedGateway)(nil)).Elem()
}

func (o ManagedGatewayOutput) ToManagedGatewayOutput() ManagedGatewayOutput {
	return o
}

func (o ManagedGatewayOutput) ToManagedGatewayOutputWithContext(ctx context.Context) ManagedGatewayOutput {
	return o
}

// The name of the resource
func (o ManagedGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The properties of a gateway resource.
func (o ManagedGatewayOutput) Properties() ManagedGatewayPropertiesResponseOutput {
	return o.ApplyT(func(v *ManagedGateway) ManagedGatewayPropertiesResponseOutput { return v.Properties }).(ManagedGatewayPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ManagedGatewayOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ManagedGateway) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ManagedGatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedGateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedGatewayOutput{})
}
