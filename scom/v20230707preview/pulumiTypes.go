// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230707preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The properties to maximize savings by using Azure Hybrid Benefit
type AzureHybridBenefitProperties struct {
	// SCOM license type. Maximize savings by using license you already own
	ScomLicenseType *string `pulumi:"scomLicenseType"`
	// SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
	SqlServerLicenseType *string `pulumi:"sqlServerLicenseType"`
	// Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	WindowsServerLicenseType *string `pulumi:"windowsServerLicenseType"`
}

// AzureHybridBenefitPropertiesInput is an input type that accepts AzureHybridBenefitPropertiesArgs and AzureHybridBenefitPropertiesOutput values.
// You can construct a concrete instance of `AzureHybridBenefitPropertiesInput` via:
//
//	AzureHybridBenefitPropertiesArgs{...}
type AzureHybridBenefitPropertiesInput interface {
	pulumi.Input

	ToAzureHybridBenefitPropertiesOutput() AzureHybridBenefitPropertiesOutput
	ToAzureHybridBenefitPropertiesOutputWithContext(context.Context) AzureHybridBenefitPropertiesOutput
}

// The properties to maximize savings by using Azure Hybrid Benefit
type AzureHybridBenefitPropertiesArgs struct {
	// SCOM license type. Maximize savings by using license you already own
	ScomLicenseType pulumi.StringPtrInput `pulumi:"scomLicenseType"`
	// SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
	SqlServerLicenseType pulumi.StringPtrInput `pulumi:"sqlServerLicenseType"`
	// Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	WindowsServerLicenseType pulumi.StringPtrInput `pulumi:"windowsServerLicenseType"`
}

func (AzureHybridBenefitPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureHybridBenefitProperties)(nil)).Elem()
}

func (i AzureHybridBenefitPropertiesArgs) ToAzureHybridBenefitPropertiesOutput() AzureHybridBenefitPropertiesOutput {
	return i.ToAzureHybridBenefitPropertiesOutputWithContext(context.Background())
}

func (i AzureHybridBenefitPropertiesArgs) ToAzureHybridBenefitPropertiesOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureHybridBenefitPropertiesOutput)
}

func (i AzureHybridBenefitPropertiesArgs) ToAzureHybridBenefitPropertiesPtrOutput() AzureHybridBenefitPropertiesPtrOutput {
	return i.ToAzureHybridBenefitPropertiesPtrOutputWithContext(context.Background())
}

func (i AzureHybridBenefitPropertiesArgs) ToAzureHybridBenefitPropertiesPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureHybridBenefitPropertiesOutput).ToAzureHybridBenefitPropertiesPtrOutputWithContext(ctx)
}

// AzureHybridBenefitPropertiesPtrInput is an input type that accepts AzureHybridBenefitPropertiesArgs, AzureHybridBenefitPropertiesPtr and AzureHybridBenefitPropertiesPtrOutput values.
// You can construct a concrete instance of `AzureHybridBenefitPropertiesPtrInput` via:
//
//	        AzureHybridBenefitPropertiesArgs{...}
//
//	or:
//
//	        nil
type AzureHybridBenefitPropertiesPtrInput interface {
	pulumi.Input

	ToAzureHybridBenefitPropertiesPtrOutput() AzureHybridBenefitPropertiesPtrOutput
	ToAzureHybridBenefitPropertiesPtrOutputWithContext(context.Context) AzureHybridBenefitPropertiesPtrOutput
}

type azureHybridBenefitPropertiesPtrType AzureHybridBenefitPropertiesArgs

func AzureHybridBenefitPropertiesPtr(v *AzureHybridBenefitPropertiesArgs) AzureHybridBenefitPropertiesPtrInput {
	return (*azureHybridBenefitPropertiesPtrType)(v)
}

func (*azureHybridBenefitPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureHybridBenefitProperties)(nil)).Elem()
}

func (i *azureHybridBenefitPropertiesPtrType) ToAzureHybridBenefitPropertiesPtrOutput() AzureHybridBenefitPropertiesPtrOutput {
	return i.ToAzureHybridBenefitPropertiesPtrOutputWithContext(context.Background())
}

func (i *azureHybridBenefitPropertiesPtrType) ToAzureHybridBenefitPropertiesPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureHybridBenefitPropertiesPtrOutput)
}

// The properties to maximize savings by using Azure Hybrid Benefit
type AzureHybridBenefitPropertiesOutput struct{ *pulumi.OutputState }

func (AzureHybridBenefitPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureHybridBenefitProperties)(nil)).Elem()
}

func (o AzureHybridBenefitPropertiesOutput) ToAzureHybridBenefitPropertiesOutput() AzureHybridBenefitPropertiesOutput {
	return o
}

func (o AzureHybridBenefitPropertiesOutput) ToAzureHybridBenefitPropertiesOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesOutput {
	return o
}

func (o AzureHybridBenefitPropertiesOutput) ToAzureHybridBenefitPropertiesPtrOutput() AzureHybridBenefitPropertiesPtrOutput {
	return o.ToAzureHybridBenefitPropertiesPtrOutputWithContext(context.Background())
}

func (o AzureHybridBenefitPropertiesOutput) ToAzureHybridBenefitPropertiesPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureHybridBenefitProperties) *AzureHybridBenefitProperties {
		return &v
	}).(AzureHybridBenefitPropertiesPtrOutput)
}

// SCOM license type. Maximize savings by using license you already own
func (o AzureHybridBenefitPropertiesOutput) ScomLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureHybridBenefitProperties) *string { return v.ScomLicenseType }).(pulumi.StringPtrOutput)
}

// SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
func (o AzureHybridBenefitPropertiesOutput) SqlServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureHybridBenefitProperties) *string { return v.SqlServerLicenseType }).(pulumi.StringPtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
func (o AzureHybridBenefitPropertiesOutput) WindowsServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureHybridBenefitProperties) *string { return v.WindowsServerLicenseType }).(pulumi.StringPtrOutput)
}

type AzureHybridBenefitPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AzureHybridBenefitPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureHybridBenefitProperties)(nil)).Elem()
}

func (o AzureHybridBenefitPropertiesPtrOutput) ToAzureHybridBenefitPropertiesPtrOutput() AzureHybridBenefitPropertiesPtrOutput {
	return o
}

func (o AzureHybridBenefitPropertiesPtrOutput) ToAzureHybridBenefitPropertiesPtrOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesPtrOutput {
	return o
}

func (o AzureHybridBenefitPropertiesPtrOutput) Elem() AzureHybridBenefitPropertiesOutput {
	return o.ApplyT(func(v *AzureHybridBenefitProperties) AzureHybridBenefitProperties {
		if v != nil {
			return *v
		}
		var ret AzureHybridBenefitProperties
		return ret
	}).(AzureHybridBenefitPropertiesOutput)
}

// SCOM license type. Maximize savings by using license you already own
func (o AzureHybridBenefitPropertiesPtrOutput) ScomLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureHybridBenefitProperties) *string {
		if v == nil {
			return nil
		}
		return v.ScomLicenseType
	}).(pulumi.StringPtrOutput)
}

// SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
func (o AzureHybridBenefitPropertiesPtrOutput) SqlServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureHybridBenefitProperties) *string {
		if v == nil {
			return nil
		}
		return v.SqlServerLicenseType
	}).(pulumi.StringPtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
func (o AzureHybridBenefitPropertiesPtrOutput) WindowsServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureHybridBenefitProperties) *string {
		if v == nil {
			return nil
		}
		return v.WindowsServerLicenseType
	}).(pulumi.StringPtrOutput)
}

// The properties to maximize savings by using Azure Hybrid Benefit
type AzureHybridBenefitPropertiesResponse struct {
	// SCOM license type. Maximize savings by using license you already own
	ScomLicenseType *string `pulumi:"scomLicenseType"`
	// SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
	SqlServerLicenseType *string `pulumi:"sqlServerLicenseType"`
	// Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	WindowsServerLicenseType *string `pulumi:"windowsServerLicenseType"`
}

// The properties to maximize savings by using Azure Hybrid Benefit
type AzureHybridBenefitPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AzureHybridBenefitPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureHybridBenefitPropertiesResponse)(nil)).Elem()
}

func (o AzureHybridBenefitPropertiesResponseOutput) ToAzureHybridBenefitPropertiesResponseOutput() AzureHybridBenefitPropertiesResponseOutput {
	return o
}

func (o AzureHybridBenefitPropertiesResponseOutput) ToAzureHybridBenefitPropertiesResponseOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesResponseOutput {
	return o
}

// SCOM license type. Maximize savings by using license you already own
func (o AzureHybridBenefitPropertiesResponseOutput) ScomLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureHybridBenefitPropertiesResponse) *string { return v.ScomLicenseType }).(pulumi.StringPtrOutput)
}

// SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
func (o AzureHybridBenefitPropertiesResponseOutput) SqlServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureHybridBenefitPropertiesResponse) *string { return v.SqlServerLicenseType }).(pulumi.StringPtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
func (o AzureHybridBenefitPropertiesResponseOutput) WindowsServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureHybridBenefitPropertiesResponse) *string { return v.WindowsServerLicenseType }).(pulumi.StringPtrOutput)
}

type AzureHybridBenefitPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureHybridBenefitPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureHybridBenefitPropertiesResponse)(nil)).Elem()
}

func (o AzureHybridBenefitPropertiesResponsePtrOutput) ToAzureHybridBenefitPropertiesResponsePtrOutput() AzureHybridBenefitPropertiesResponsePtrOutput {
	return o
}

func (o AzureHybridBenefitPropertiesResponsePtrOutput) ToAzureHybridBenefitPropertiesResponsePtrOutputWithContext(ctx context.Context) AzureHybridBenefitPropertiesResponsePtrOutput {
	return o
}

func (o AzureHybridBenefitPropertiesResponsePtrOutput) Elem() AzureHybridBenefitPropertiesResponseOutput {
	return o.ApplyT(func(v *AzureHybridBenefitPropertiesResponse) AzureHybridBenefitPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AzureHybridBenefitPropertiesResponse
		return ret
	}).(AzureHybridBenefitPropertiesResponseOutput)
}

// SCOM license type. Maximize savings by using license you already own
func (o AzureHybridBenefitPropertiesResponsePtrOutput) ScomLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureHybridBenefitPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScomLicenseType
	}).(pulumi.StringPtrOutput)
}

// SQL Server license type. Maximize savings by using Azure Hybrid Benefit for SQL Server with license you already own
func (o AzureHybridBenefitPropertiesResponsePtrOutput) SqlServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureHybridBenefitPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SqlServerLicenseType
	}).(pulumi.StringPtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
func (o AzureHybridBenefitPropertiesResponsePtrOutput) WindowsServerLicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureHybridBenefitPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.WindowsServerLicenseType
	}).(pulumi.StringPtrOutput)
}

// The properties of database instance
type DatabaseInstanceProperties struct {
	// Resource Id of existing database instance
	DatabaseInstanceId *string `pulumi:"databaseInstanceId"`
}

// DatabaseInstancePropertiesInput is an input type that accepts DatabaseInstancePropertiesArgs and DatabaseInstancePropertiesOutput values.
// You can construct a concrete instance of `DatabaseInstancePropertiesInput` via:
//
//	DatabaseInstancePropertiesArgs{...}
type DatabaseInstancePropertiesInput interface {
	pulumi.Input

	ToDatabaseInstancePropertiesOutput() DatabaseInstancePropertiesOutput
	ToDatabaseInstancePropertiesOutputWithContext(context.Context) DatabaseInstancePropertiesOutput
}

// The properties of database instance
type DatabaseInstancePropertiesArgs struct {
	// Resource Id of existing database instance
	DatabaseInstanceId pulumi.StringPtrInput `pulumi:"databaseInstanceId"`
}

func (DatabaseInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInstanceProperties)(nil)).Elem()
}

func (i DatabaseInstancePropertiesArgs) ToDatabaseInstancePropertiesOutput() DatabaseInstancePropertiesOutput {
	return i.ToDatabaseInstancePropertiesOutputWithContext(context.Background())
}

func (i DatabaseInstancePropertiesArgs) ToDatabaseInstancePropertiesOutputWithContext(ctx context.Context) DatabaseInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstancePropertiesOutput)
}

func (i DatabaseInstancePropertiesArgs) ToDatabaseInstancePropertiesPtrOutput() DatabaseInstancePropertiesPtrOutput {
	return i.ToDatabaseInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i DatabaseInstancePropertiesArgs) ToDatabaseInstancePropertiesPtrOutputWithContext(ctx context.Context) DatabaseInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstancePropertiesOutput).ToDatabaseInstancePropertiesPtrOutputWithContext(ctx)
}

// DatabaseInstancePropertiesPtrInput is an input type that accepts DatabaseInstancePropertiesArgs, DatabaseInstancePropertiesPtr and DatabaseInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `DatabaseInstancePropertiesPtrInput` via:
//
//	        DatabaseInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type DatabaseInstancePropertiesPtrInput interface {
	pulumi.Input

	ToDatabaseInstancePropertiesPtrOutput() DatabaseInstancePropertiesPtrOutput
	ToDatabaseInstancePropertiesPtrOutputWithContext(context.Context) DatabaseInstancePropertiesPtrOutput
}

type databaseInstancePropertiesPtrType DatabaseInstancePropertiesArgs

func DatabaseInstancePropertiesPtr(v *DatabaseInstancePropertiesArgs) DatabaseInstancePropertiesPtrInput {
	return (*databaseInstancePropertiesPtrType)(v)
}

func (*databaseInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInstanceProperties)(nil)).Elem()
}

func (i *databaseInstancePropertiesPtrType) ToDatabaseInstancePropertiesPtrOutput() DatabaseInstancePropertiesPtrOutput {
	return i.ToDatabaseInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *databaseInstancePropertiesPtrType) ToDatabaseInstancePropertiesPtrOutputWithContext(ctx context.Context) DatabaseInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInstancePropertiesPtrOutput)
}

// The properties of database instance
type DatabaseInstancePropertiesOutput struct{ *pulumi.OutputState }

func (DatabaseInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInstanceProperties)(nil)).Elem()
}

func (o DatabaseInstancePropertiesOutput) ToDatabaseInstancePropertiesOutput() DatabaseInstancePropertiesOutput {
	return o
}

func (o DatabaseInstancePropertiesOutput) ToDatabaseInstancePropertiesOutputWithContext(ctx context.Context) DatabaseInstancePropertiesOutput {
	return o
}

func (o DatabaseInstancePropertiesOutput) ToDatabaseInstancePropertiesPtrOutput() DatabaseInstancePropertiesPtrOutput {
	return o.ToDatabaseInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o DatabaseInstancePropertiesOutput) ToDatabaseInstancePropertiesPtrOutputWithContext(ctx context.Context) DatabaseInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseInstanceProperties) *DatabaseInstanceProperties {
		return &v
	}).(DatabaseInstancePropertiesPtrOutput)
}

// Resource Id of existing database instance
func (o DatabaseInstancePropertiesOutput) DatabaseInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInstanceProperties) *string { return v.DatabaseInstanceId }).(pulumi.StringPtrOutput)
}

type DatabaseInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DatabaseInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInstanceProperties)(nil)).Elem()
}

func (o DatabaseInstancePropertiesPtrOutput) ToDatabaseInstancePropertiesPtrOutput() DatabaseInstancePropertiesPtrOutput {
	return o
}

func (o DatabaseInstancePropertiesPtrOutput) ToDatabaseInstancePropertiesPtrOutputWithContext(ctx context.Context) DatabaseInstancePropertiesPtrOutput {
	return o
}

func (o DatabaseInstancePropertiesPtrOutput) Elem() DatabaseInstancePropertiesOutput {
	return o.ApplyT(func(v *DatabaseInstanceProperties) DatabaseInstanceProperties {
		if v != nil {
			return *v
		}
		var ret DatabaseInstanceProperties
		return ret
	}).(DatabaseInstancePropertiesOutput)
}

// Resource Id of existing database instance
func (o DatabaseInstancePropertiesPtrOutput) DatabaseInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseInstanceId
	}).(pulumi.StringPtrOutput)
}

// The properties of database instance
type DatabaseInstancePropertiesResponse struct {
	// Fully qualified domain name of existing database instance
	DatabaseFqdn string `pulumi:"databaseFqdn"`
	// Resource Id of existing database instance
	DatabaseInstanceId *string `pulumi:"databaseInstanceId"`
	// Resource Id of warehouse database on database instance
	DwDatabaseId string `pulumi:"dwDatabaseId"`
	// Name of warehouse database on database instance
	DwDatabaseName string `pulumi:"dwDatabaseName"`
	// Resource Id of operational database on database instance
	OperationalDatabaseId string `pulumi:"operationalDatabaseId"`
}

// The properties of database instance
type DatabaseInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInstancePropertiesResponse)(nil)).Elem()
}

func (o DatabaseInstancePropertiesResponseOutput) ToDatabaseInstancePropertiesResponseOutput() DatabaseInstancePropertiesResponseOutput {
	return o
}

func (o DatabaseInstancePropertiesResponseOutput) ToDatabaseInstancePropertiesResponseOutputWithContext(ctx context.Context) DatabaseInstancePropertiesResponseOutput {
	return o
}

// Fully qualified domain name of existing database instance
func (o DatabaseInstancePropertiesResponseOutput) DatabaseFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInstancePropertiesResponse) string { return v.DatabaseFqdn }).(pulumi.StringOutput)
}

// Resource Id of existing database instance
func (o DatabaseInstancePropertiesResponseOutput) DatabaseInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInstancePropertiesResponse) *string { return v.DatabaseInstanceId }).(pulumi.StringPtrOutput)
}

// Resource Id of warehouse database on database instance
func (o DatabaseInstancePropertiesResponseOutput) DwDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInstancePropertiesResponse) string { return v.DwDatabaseId }).(pulumi.StringOutput)
}

// Name of warehouse database on database instance
func (o DatabaseInstancePropertiesResponseOutput) DwDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInstancePropertiesResponse) string { return v.DwDatabaseName }).(pulumi.StringOutput)
}

// Resource Id of operational database on database instance
func (o DatabaseInstancePropertiesResponseOutput) OperationalDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInstancePropertiesResponse) string { return v.OperationalDatabaseId }).(pulumi.StringOutput)
}

type DatabaseInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInstancePropertiesResponse)(nil)).Elem()
}

func (o DatabaseInstancePropertiesResponsePtrOutput) ToDatabaseInstancePropertiesResponsePtrOutput() DatabaseInstancePropertiesResponsePtrOutput {
	return o
}

func (o DatabaseInstancePropertiesResponsePtrOutput) ToDatabaseInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) DatabaseInstancePropertiesResponsePtrOutput {
	return o
}

func (o DatabaseInstancePropertiesResponsePtrOutput) Elem() DatabaseInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *DatabaseInstancePropertiesResponse) DatabaseInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DatabaseInstancePropertiesResponse
		return ret
	}).(DatabaseInstancePropertiesResponseOutput)
}

// Fully qualified domain name of existing database instance
func (o DatabaseInstancePropertiesResponsePtrOutput) DatabaseFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseFqdn
	}).(pulumi.StringPtrOutput)
}

// Resource Id of existing database instance
func (o DatabaseInstancePropertiesResponsePtrOutput) DatabaseInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseInstanceId
	}).(pulumi.StringPtrOutput)
}

// Resource Id of warehouse database on database instance
func (o DatabaseInstancePropertiesResponsePtrOutput) DwDatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DwDatabaseId
	}).(pulumi.StringPtrOutput)
}

// Name of warehouse database on database instance
func (o DatabaseInstancePropertiesResponsePtrOutput) DwDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DwDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Resource Id of operational database on database instance
func (o DatabaseInstancePropertiesResponsePtrOutput) OperationalDatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OperationalDatabaseId
	}).(pulumi.StringPtrOutput)
}

// The properties of domain controller to which SCOM and SQL servers join for AuthN/AuthZ.
type DomainControllerProperties struct {
	// IP address of DNS server
	DnsServer *string `pulumi:"dnsServer"`
	// Fully qualified domain name
	DomainName *string `pulumi:"domainName"`
	// Organizational Unit path in which the SCOM servers will be present
	OuPath *string `pulumi:"ouPath"`
}

// Defaults sets the appropriate defaults for DomainControllerProperties
func (val *DomainControllerProperties) Defaults() *DomainControllerProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OuPath == nil {
		ouPath_ := ""
		tmp.OuPath = &ouPath_
	}
	return &tmp
}

// DomainControllerPropertiesInput is an input type that accepts DomainControllerPropertiesArgs and DomainControllerPropertiesOutput values.
// You can construct a concrete instance of `DomainControllerPropertiesInput` via:
//
//	DomainControllerPropertiesArgs{...}
type DomainControllerPropertiesInput interface {
	pulumi.Input

	ToDomainControllerPropertiesOutput() DomainControllerPropertiesOutput
	ToDomainControllerPropertiesOutputWithContext(context.Context) DomainControllerPropertiesOutput
}

// The properties of domain controller to which SCOM and SQL servers join for AuthN/AuthZ.
type DomainControllerPropertiesArgs struct {
	// IP address of DNS server
	DnsServer pulumi.StringPtrInput `pulumi:"dnsServer"`
	// Fully qualified domain name
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
	// Organizational Unit path in which the SCOM servers will be present
	OuPath pulumi.StringPtrInput `pulumi:"ouPath"`
}

// Defaults sets the appropriate defaults for DomainControllerPropertiesArgs
func (val *DomainControllerPropertiesArgs) Defaults() *DomainControllerPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OuPath == nil {
		tmp.OuPath = pulumi.StringPtr("")
	}
	return &tmp
}
func (DomainControllerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainControllerProperties)(nil)).Elem()
}

func (i DomainControllerPropertiesArgs) ToDomainControllerPropertiesOutput() DomainControllerPropertiesOutput {
	return i.ToDomainControllerPropertiesOutputWithContext(context.Background())
}

func (i DomainControllerPropertiesArgs) ToDomainControllerPropertiesOutputWithContext(ctx context.Context) DomainControllerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainControllerPropertiesOutput)
}

func (i DomainControllerPropertiesArgs) ToDomainControllerPropertiesPtrOutput() DomainControllerPropertiesPtrOutput {
	return i.ToDomainControllerPropertiesPtrOutputWithContext(context.Background())
}

func (i DomainControllerPropertiesArgs) ToDomainControllerPropertiesPtrOutputWithContext(ctx context.Context) DomainControllerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainControllerPropertiesOutput).ToDomainControllerPropertiesPtrOutputWithContext(ctx)
}

// DomainControllerPropertiesPtrInput is an input type that accepts DomainControllerPropertiesArgs, DomainControllerPropertiesPtr and DomainControllerPropertiesPtrOutput values.
// You can construct a concrete instance of `DomainControllerPropertiesPtrInput` via:
//
//	        DomainControllerPropertiesArgs{...}
//
//	or:
//
//	        nil
type DomainControllerPropertiesPtrInput interface {
	pulumi.Input

	ToDomainControllerPropertiesPtrOutput() DomainControllerPropertiesPtrOutput
	ToDomainControllerPropertiesPtrOutputWithContext(context.Context) DomainControllerPropertiesPtrOutput
}

type domainControllerPropertiesPtrType DomainControllerPropertiesArgs

func DomainControllerPropertiesPtr(v *DomainControllerPropertiesArgs) DomainControllerPropertiesPtrInput {
	return (*domainControllerPropertiesPtrType)(v)
}

func (*domainControllerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainControllerProperties)(nil)).Elem()
}

func (i *domainControllerPropertiesPtrType) ToDomainControllerPropertiesPtrOutput() DomainControllerPropertiesPtrOutput {
	return i.ToDomainControllerPropertiesPtrOutputWithContext(context.Background())
}

func (i *domainControllerPropertiesPtrType) ToDomainControllerPropertiesPtrOutputWithContext(ctx context.Context) DomainControllerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainControllerPropertiesPtrOutput)
}

// The properties of domain controller to which SCOM and SQL servers join for AuthN/AuthZ.
type DomainControllerPropertiesOutput struct{ *pulumi.OutputState }

func (DomainControllerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainControllerProperties)(nil)).Elem()
}

func (o DomainControllerPropertiesOutput) ToDomainControllerPropertiesOutput() DomainControllerPropertiesOutput {
	return o
}

func (o DomainControllerPropertiesOutput) ToDomainControllerPropertiesOutputWithContext(ctx context.Context) DomainControllerPropertiesOutput {
	return o
}

func (o DomainControllerPropertiesOutput) ToDomainControllerPropertiesPtrOutput() DomainControllerPropertiesPtrOutput {
	return o.ToDomainControllerPropertiesPtrOutputWithContext(context.Background())
}

func (o DomainControllerPropertiesOutput) ToDomainControllerPropertiesPtrOutputWithContext(ctx context.Context) DomainControllerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainControllerProperties) *DomainControllerProperties {
		return &v
	}).(DomainControllerPropertiesPtrOutput)
}

// IP address of DNS server
func (o DomainControllerPropertiesOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainControllerProperties) *string { return v.DnsServer }).(pulumi.StringPtrOutput)
}

// Fully qualified domain name
func (o DomainControllerPropertiesOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainControllerProperties) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// Organizational Unit path in which the SCOM servers will be present
func (o DomainControllerPropertiesOutput) OuPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainControllerProperties) *string { return v.OuPath }).(pulumi.StringPtrOutput)
}

type DomainControllerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DomainControllerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainControllerProperties)(nil)).Elem()
}

func (o DomainControllerPropertiesPtrOutput) ToDomainControllerPropertiesPtrOutput() DomainControllerPropertiesPtrOutput {
	return o
}

func (o DomainControllerPropertiesPtrOutput) ToDomainControllerPropertiesPtrOutputWithContext(ctx context.Context) DomainControllerPropertiesPtrOutput {
	return o
}

func (o DomainControllerPropertiesPtrOutput) Elem() DomainControllerPropertiesOutput {
	return o.ApplyT(func(v *DomainControllerProperties) DomainControllerProperties {
		if v != nil {
			return *v
		}
		var ret DomainControllerProperties
		return ret
	}).(DomainControllerPropertiesOutput)
}

// IP address of DNS server
func (o DomainControllerPropertiesPtrOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainControllerProperties) *string {
		if v == nil {
			return nil
		}
		return v.DnsServer
	}).(pulumi.StringPtrOutput)
}

// Fully qualified domain name
func (o DomainControllerPropertiesPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainControllerProperties) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// Organizational Unit path in which the SCOM servers will be present
func (o DomainControllerPropertiesPtrOutput) OuPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainControllerProperties) *string {
		if v == nil {
			return nil
		}
		return v.OuPath
	}).(pulumi.StringPtrOutput)
}

// The properties of domain controller to which SCOM and SQL servers join for AuthN/AuthZ.
type DomainControllerPropertiesResponse struct {
	// IP address of DNS server
	DnsServer *string `pulumi:"dnsServer"`
	// Fully qualified domain name
	DomainName *string `pulumi:"domainName"`
	// Organizational Unit path in which the SCOM servers will be present
	OuPath *string `pulumi:"ouPath"`
}

// Defaults sets the appropriate defaults for DomainControllerPropertiesResponse
func (val *DomainControllerPropertiesResponse) Defaults() *DomainControllerPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OuPath == nil {
		ouPath_ := ""
		tmp.OuPath = &ouPath_
	}
	return &tmp
}

// The properties of domain controller to which SCOM and SQL servers join for AuthN/AuthZ.
type DomainControllerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DomainControllerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainControllerPropertiesResponse)(nil)).Elem()
}

func (o DomainControllerPropertiesResponseOutput) ToDomainControllerPropertiesResponseOutput() DomainControllerPropertiesResponseOutput {
	return o
}

func (o DomainControllerPropertiesResponseOutput) ToDomainControllerPropertiesResponseOutputWithContext(ctx context.Context) DomainControllerPropertiesResponseOutput {
	return o
}

// IP address of DNS server
func (o DomainControllerPropertiesResponseOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainControllerPropertiesResponse) *string { return v.DnsServer }).(pulumi.StringPtrOutput)
}

// Fully qualified domain name
func (o DomainControllerPropertiesResponseOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainControllerPropertiesResponse) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// Organizational Unit path in which the SCOM servers will be present
func (o DomainControllerPropertiesResponseOutput) OuPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainControllerPropertiesResponse) *string { return v.OuPath }).(pulumi.StringPtrOutput)
}

type DomainControllerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DomainControllerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainControllerPropertiesResponse)(nil)).Elem()
}

func (o DomainControllerPropertiesResponsePtrOutput) ToDomainControllerPropertiesResponsePtrOutput() DomainControllerPropertiesResponsePtrOutput {
	return o
}

func (o DomainControllerPropertiesResponsePtrOutput) ToDomainControllerPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainControllerPropertiesResponsePtrOutput {
	return o
}

func (o DomainControllerPropertiesResponsePtrOutput) Elem() DomainControllerPropertiesResponseOutput {
	return o.ApplyT(func(v *DomainControllerPropertiesResponse) DomainControllerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DomainControllerPropertiesResponse
		return ret
	}).(DomainControllerPropertiesResponseOutput)
}

// IP address of DNS server
func (o DomainControllerPropertiesResponsePtrOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsServer
	}).(pulumi.StringPtrOutput)
}

// Fully qualified domain name
func (o DomainControllerPropertiesResponsePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// Organizational Unit path in which the SCOM servers will be present
func (o DomainControllerPropertiesResponsePtrOutput) OuPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OuPath
	}).(pulumi.StringPtrOutput)
}

// Get Domain user name and password from key vault
type DomainUserCredentials struct {
	// Key vault url to get the domain username and password
	KeyVaultUrl *string `pulumi:"keyVaultUrl"`
	// Domain Password secret
	PasswordSecret *string `pulumi:"passwordSecret"`
	// Domain user name secret
	UserNameSecret *string `pulumi:"userNameSecret"`
}

// DomainUserCredentialsInput is an input type that accepts DomainUserCredentialsArgs and DomainUserCredentialsOutput values.
// You can construct a concrete instance of `DomainUserCredentialsInput` via:
//
//	DomainUserCredentialsArgs{...}
type DomainUserCredentialsInput interface {
	pulumi.Input

	ToDomainUserCredentialsOutput() DomainUserCredentialsOutput
	ToDomainUserCredentialsOutputWithContext(context.Context) DomainUserCredentialsOutput
}

// Get Domain user name and password from key vault
type DomainUserCredentialsArgs struct {
	// Key vault url to get the domain username and password
	KeyVaultUrl pulumi.StringPtrInput `pulumi:"keyVaultUrl"`
	// Domain Password secret
	PasswordSecret pulumi.StringPtrInput `pulumi:"passwordSecret"`
	// Domain user name secret
	UserNameSecret pulumi.StringPtrInput `pulumi:"userNameSecret"`
}

func (DomainUserCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainUserCredentials)(nil)).Elem()
}

func (i DomainUserCredentialsArgs) ToDomainUserCredentialsOutput() DomainUserCredentialsOutput {
	return i.ToDomainUserCredentialsOutputWithContext(context.Background())
}

func (i DomainUserCredentialsArgs) ToDomainUserCredentialsOutputWithContext(ctx context.Context) DomainUserCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainUserCredentialsOutput)
}

func (i DomainUserCredentialsArgs) ToDomainUserCredentialsPtrOutput() DomainUserCredentialsPtrOutput {
	return i.ToDomainUserCredentialsPtrOutputWithContext(context.Background())
}

func (i DomainUserCredentialsArgs) ToDomainUserCredentialsPtrOutputWithContext(ctx context.Context) DomainUserCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainUserCredentialsOutput).ToDomainUserCredentialsPtrOutputWithContext(ctx)
}

// DomainUserCredentialsPtrInput is an input type that accepts DomainUserCredentialsArgs, DomainUserCredentialsPtr and DomainUserCredentialsPtrOutput values.
// You can construct a concrete instance of `DomainUserCredentialsPtrInput` via:
//
//	        DomainUserCredentialsArgs{...}
//
//	or:
//
//	        nil
type DomainUserCredentialsPtrInput interface {
	pulumi.Input

	ToDomainUserCredentialsPtrOutput() DomainUserCredentialsPtrOutput
	ToDomainUserCredentialsPtrOutputWithContext(context.Context) DomainUserCredentialsPtrOutput
}

type domainUserCredentialsPtrType DomainUserCredentialsArgs

func DomainUserCredentialsPtr(v *DomainUserCredentialsArgs) DomainUserCredentialsPtrInput {
	return (*domainUserCredentialsPtrType)(v)
}

func (*domainUserCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainUserCredentials)(nil)).Elem()
}

func (i *domainUserCredentialsPtrType) ToDomainUserCredentialsPtrOutput() DomainUserCredentialsPtrOutput {
	return i.ToDomainUserCredentialsPtrOutputWithContext(context.Background())
}

func (i *domainUserCredentialsPtrType) ToDomainUserCredentialsPtrOutputWithContext(ctx context.Context) DomainUserCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainUserCredentialsPtrOutput)
}

// Get Domain user name and password from key vault
type DomainUserCredentialsOutput struct{ *pulumi.OutputState }

func (DomainUserCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainUserCredentials)(nil)).Elem()
}

func (o DomainUserCredentialsOutput) ToDomainUserCredentialsOutput() DomainUserCredentialsOutput {
	return o
}

func (o DomainUserCredentialsOutput) ToDomainUserCredentialsOutputWithContext(ctx context.Context) DomainUserCredentialsOutput {
	return o
}

func (o DomainUserCredentialsOutput) ToDomainUserCredentialsPtrOutput() DomainUserCredentialsPtrOutput {
	return o.ToDomainUserCredentialsPtrOutputWithContext(context.Background())
}

func (o DomainUserCredentialsOutput) ToDomainUserCredentialsPtrOutputWithContext(ctx context.Context) DomainUserCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainUserCredentials) *DomainUserCredentials {
		return &v
	}).(DomainUserCredentialsPtrOutput)
}

// Key vault url to get the domain username and password
func (o DomainUserCredentialsOutput) KeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainUserCredentials) *string { return v.KeyVaultUrl }).(pulumi.StringPtrOutput)
}

// Domain Password secret
func (o DomainUserCredentialsOutput) PasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainUserCredentials) *string { return v.PasswordSecret }).(pulumi.StringPtrOutput)
}

// Domain user name secret
func (o DomainUserCredentialsOutput) UserNameSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainUserCredentials) *string { return v.UserNameSecret }).(pulumi.StringPtrOutput)
}

type DomainUserCredentialsPtrOutput struct{ *pulumi.OutputState }

func (DomainUserCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainUserCredentials)(nil)).Elem()
}

func (o DomainUserCredentialsPtrOutput) ToDomainUserCredentialsPtrOutput() DomainUserCredentialsPtrOutput {
	return o
}

func (o DomainUserCredentialsPtrOutput) ToDomainUserCredentialsPtrOutputWithContext(ctx context.Context) DomainUserCredentialsPtrOutput {
	return o
}

func (o DomainUserCredentialsPtrOutput) Elem() DomainUserCredentialsOutput {
	return o.ApplyT(func(v *DomainUserCredentials) DomainUserCredentials {
		if v != nil {
			return *v
		}
		var ret DomainUserCredentials
		return ret
	}).(DomainUserCredentialsOutput)
}

// Key vault url to get the domain username and password
func (o DomainUserCredentialsPtrOutput) KeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainUserCredentials) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultUrl
	}).(pulumi.StringPtrOutput)
}

// Domain Password secret
func (o DomainUserCredentialsPtrOutput) PasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainUserCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecret
	}).(pulumi.StringPtrOutput)
}

// Domain user name secret
func (o DomainUserCredentialsPtrOutput) UserNameSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainUserCredentials) *string {
		if v == nil {
			return nil
		}
		return v.UserNameSecret
	}).(pulumi.StringPtrOutput)
}

// Get Domain user name and password from key vault
type DomainUserCredentialsResponse struct {
	// Key vault url to get the domain username and password
	KeyVaultUrl *string `pulumi:"keyVaultUrl"`
	// Domain Password secret
	PasswordSecret *string `pulumi:"passwordSecret"`
	// Domain user name secret
	UserNameSecret *string `pulumi:"userNameSecret"`
}

// Get Domain user name and password from key vault
type DomainUserCredentialsResponseOutput struct{ *pulumi.OutputState }

func (DomainUserCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainUserCredentialsResponse)(nil)).Elem()
}

func (o DomainUserCredentialsResponseOutput) ToDomainUserCredentialsResponseOutput() DomainUserCredentialsResponseOutput {
	return o
}

func (o DomainUserCredentialsResponseOutput) ToDomainUserCredentialsResponseOutputWithContext(ctx context.Context) DomainUserCredentialsResponseOutput {
	return o
}

// Key vault url to get the domain username and password
func (o DomainUserCredentialsResponseOutput) KeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainUserCredentialsResponse) *string { return v.KeyVaultUrl }).(pulumi.StringPtrOutput)
}

// Domain Password secret
func (o DomainUserCredentialsResponseOutput) PasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainUserCredentialsResponse) *string { return v.PasswordSecret }).(pulumi.StringPtrOutput)
}

// Domain user name secret
func (o DomainUserCredentialsResponseOutput) UserNameSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainUserCredentialsResponse) *string { return v.UserNameSecret }).(pulumi.StringPtrOutput)
}

type DomainUserCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (DomainUserCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainUserCredentialsResponse)(nil)).Elem()
}

func (o DomainUserCredentialsResponsePtrOutput) ToDomainUserCredentialsResponsePtrOutput() DomainUserCredentialsResponsePtrOutput {
	return o
}

func (o DomainUserCredentialsResponsePtrOutput) ToDomainUserCredentialsResponsePtrOutputWithContext(ctx context.Context) DomainUserCredentialsResponsePtrOutput {
	return o
}

func (o DomainUserCredentialsResponsePtrOutput) Elem() DomainUserCredentialsResponseOutput {
	return o.ApplyT(func(v *DomainUserCredentialsResponse) DomainUserCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret DomainUserCredentialsResponse
		return ret
	}).(DomainUserCredentialsResponseOutput)
}

// Key vault url to get the domain username and password
func (o DomainUserCredentialsResponsePtrOutput) KeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainUserCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultUrl
	}).(pulumi.StringPtrOutput)
}

// Domain Password secret
func (o DomainUserCredentialsResponsePtrOutput) PasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainUserCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecret
	}).(pulumi.StringPtrOutput)
}

// Domain user name secret
func (o DomainUserCredentialsResponsePtrOutput) UserNameSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainUserCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserNameSecret
	}).(pulumi.StringPtrOutput)
}

// Gmsa Details
type GmsaDetails struct {
	// Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
	DnsName *string `pulumi:"dnsName"`
	// gMSA account under which context all Management Server services will run
	GmsaAccount *string `pulumi:"gmsaAccount"`
	// Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// OnPrem AD Computer Group where we will join VMs for ease of management
	ManagementServerGroupName *string `pulumi:"managementServerGroupName"`
}

// GmsaDetailsInput is an input type that accepts GmsaDetailsArgs and GmsaDetailsOutput values.
// You can construct a concrete instance of `GmsaDetailsInput` via:
//
//	GmsaDetailsArgs{...}
type GmsaDetailsInput interface {
	pulumi.Input

	ToGmsaDetailsOutput() GmsaDetailsOutput
	ToGmsaDetailsOutputWithContext(context.Context) GmsaDetailsOutput
}

// Gmsa Details
type GmsaDetailsArgs struct {
	// Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// gMSA account under which context all Management Server services will run
	GmsaAccount pulumi.StringPtrInput `pulumi:"gmsaAccount"`
	// Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// OnPrem AD Computer Group where we will join VMs for ease of management
	ManagementServerGroupName pulumi.StringPtrInput `pulumi:"managementServerGroupName"`
}

func (GmsaDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GmsaDetails)(nil)).Elem()
}

func (i GmsaDetailsArgs) ToGmsaDetailsOutput() GmsaDetailsOutput {
	return i.ToGmsaDetailsOutputWithContext(context.Background())
}

func (i GmsaDetailsArgs) ToGmsaDetailsOutputWithContext(ctx context.Context) GmsaDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GmsaDetailsOutput)
}

func (i GmsaDetailsArgs) ToGmsaDetailsPtrOutput() GmsaDetailsPtrOutput {
	return i.ToGmsaDetailsPtrOutputWithContext(context.Background())
}

func (i GmsaDetailsArgs) ToGmsaDetailsPtrOutputWithContext(ctx context.Context) GmsaDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GmsaDetailsOutput).ToGmsaDetailsPtrOutputWithContext(ctx)
}

// GmsaDetailsPtrInput is an input type that accepts GmsaDetailsArgs, GmsaDetailsPtr and GmsaDetailsPtrOutput values.
// You can construct a concrete instance of `GmsaDetailsPtrInput` via:
//
//	        GmsaDetailsArgs{...}
//
//	or:
//
//	        nil
type GmsaDetailsPtrInput interface {
	pulumi.Input

	ToGmsaDetailsPtrOutput() GmsaDetailsPtrOutput
	ToGmsaDetailsPtrOutputWithContext(context.Context) GmsaDetailsPtrOutput
}

type gmsaDetailsPtrType GmsaDetailsArgs

func GmsaDetailsPtr(v *GmsaDetailsArgs) GmsaDetailsPtrInput {
	return (*gmsaDetailsPtrType)(v)
}

func (*gmsaDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GmsaDetails)(nil)).Elem()
}

func (i *gmsaDetailsPtrType) ToGmsaDetailsPtrOutput() GmsaDetailsPtrOutput {
	return i.ToGmsaDetailsPtrOutputWithContext(context.Background())
}

func (i *gmsaDetailsPtrType) ToGmsaDetailsPtrOutputWithContext(ctx context.Context) GmsaDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GmsaDetailsPtrOutput)
}

// Gmsa Details
type GmsaDetailsOutput struct{ *pulumi.OutputState }

func (GmsaDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GmsaDetails)(nil)).Elem()
}

func (o GmsaDetailsOutput) ToGmsaDetailsOutput() GmsaDetailsOutput {
	return o
}

func (o GmsaDetailsOutput) ToGmsaDetailsOutputWithContext(ctx context.Context) GmsaDetailsOutput {
	return o
}

func (o GmsaDetailsOutput) ToGmsaDetailsPtrOutput() GmsaDetailsPtrOutput {
	return o.ToGmsaDetailsPtrOutputWithContext(context.Background())
}

func (o GmsaDetailsOutput) ToGmsaDetailsPtrOutputWithContext(ctx context.Context) GmsaDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GmsaDetails) *GmsaDetails {
		return &v
	}).(GmsaDetailsPtrOutput)
}

// Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
func (o GmsaDetailsOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetails) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// gMSA account under which context all Management Server services will run
func (o GmsaDetailsOutput) GmsaAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetails) *string { return v.GmsaAccount }).(pulumi.StringPtrOutput)
}

// Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
func (o GmsaDetailsOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetails) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// OnPrem AD Computer Group where we will join VMs for ease of management
func (o GmsaDetailsOutput) ManagementServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetails) *string { return v.ManagementServerGroupName }).(pulumi.StringPtrOutput)
}

type GmsaDetailsPtrOutput struct{ *pulumi.OutputState }

func (GmsaDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GmsaDetails)(nil)).Elem()
}

func (o GmsaDetailsPtrOutput) ToGmsaDetailsPtrOutput() GmsaDetailsPtrOutput {
	return o
}

func (o GmsaDetailsPtrOutput) ToGmsaDetailsPtrOutputWithContext(ctx context.Context) GmsaDetailsPtrOutput {
	return o
}

func (o GmsaDetailsPtrOutput) Elem() GmsaDetailsOutput {
	return o.ApplyT(func(v *GmsaDetails) GmsaDetails {
		if v != nil {
			return *v
		}
		var ret GmsaDetails
		return ret
	}).(GmsaDetailsOutput)
}

// Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
func (o GmsaDetailsPtrOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetails) *string {
		if v == nil {
			return nil
		}
		return v.DnsName
	}).(pulumi.StringPtrOutput)
}

// gMSA account under which context all Management Server services will run
func (o GmsaDetailsPtrOutput) GmsaAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetails) *string {
		if v == nil {
			return nil
		}
		return v.GmsaAccount
	}).(pulumi.StringPtrOutput)
}

// Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
func (o GmsaDetailsPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetails) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// OnPrem AD Computer Group where we will join VMs for ease of management
func (o GmsaDetailsPtrOutput) ManagementServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetails) *string {
		if v == nil {
			return nil
		}
		return v.ManagementServerGroupName
	}).(pulumi.StringPtrOutput)
}

// Gmsa Details
type GmsaDetailsResponse struct {
	// Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
	DnsName *string `pulumi:"dnsName"`
	// gMSA account under which context all Management Server services will run
	GmsaAccount *string `pulumi:"gmsaAccount"`
	// Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// OnPrem AD Computer Group where we will join VMs for ease of management
	ManagementServerGroupName *string `pulumi:"managementServerGroupName"`
}

// Gmsa Details
type GmsaDetailsResponseOutput struct{ *pulumi.OutputState }

func (GmsaDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GmsaDetailsResponse)(nil)).Elem()
}

func (o GmsaDetailsResponseOutput) ToGmsaDetailsResponseOutput() GmsaDetailsResponseOutput {
	return o
}

func (o GmsaDetailsResponseOutput) ToGmsaDetailsResponseOutputWithContext(ctx context.Context) GmsaDetailsResponseOutput {
	return o
}

// Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
func (o GmsaDetailsResponseOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetailsResponse) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// gMSA account under which context all Management Server services will run
func (o GmsaDetailsResponseOutput) GmsaAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetailsResponse) *string { return v.GmsaAccount }).(pulumi.StringPtrOutput)
}

// Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
func (o GmsaDetailsResponseOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetailsResponse) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// OnPrem AD Computer Group where we will join VMs for ease of management
func (o GmsaDetailsResponseOutput) ManagementServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmsaDetailsResponse) *string { return v.ManagementServerGroupName }).(pulumi.StringPtrOutput)
}

type GmsaDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (GmsaDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GmsaDetailsResponse)(nil)).Elem()
}

func (o GmsaDetailsResponsePtrOutput) ToGmsaDetailsResponsePtrOutput() GmsaDetailsResponsePtrOutput {
	return o
}

func (o GmsaDetailsResponsePtrOutput) ToGmsaDetailsResponsePtrOutputWithContext(ctx context.Context) GmsaDetailsResponsePtrOutput {
	return o
}

func (o GmsaDetailsResponsePtrOutput) Elem() GmsaDetailsResponseOutput {
	return o.ApplyT(func(v *GmsaDetailsResponse) GmsaDetailsResponse {
		if v != nil {
			return *v
		}
		var ret GmsaDetailsResponse
		return ret
	}).(GmsaDetailsResponseOutput)
}

// Frontend DNS name for Load Balancer which will be used by Agents to initiate communication
func (o GmsaDetailsResponsePtrOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsName
	}).(pulumi.StringPtrOutput)
}

// gMSA account under which context all Management Server services will run
func (o GmsaDetailsResponsePtrOutput) GmsaAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GmsaAccount
	}).(pulumi.StringPtrOutput)
}

// Frontend IP configuration for Load Balancer, which should be an available IP in customer VNet
func (o GmsaDetailsResponsePtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// OnPrem AD Computer Group where we will join VMs for ease of management
func (o GmsaDetailsResponsePtrOutput) ManagementServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmsaDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ManagementServerGroupName
	}).(pulumi.StringPtrOutput)
}

// Configuration for Log Analytics linking to SCOM managed instance.
type LogAnalyticsConfigurationResponse struct {
	// The types of data to be ingested to Log Analytics workspace.
	DataTypes []string `pulumi:"dataTypes"`
	// A one-time optional parameter to import data of last 7 days.
	ImportData *bool `pulumi:"importData"`
	// The resource ID of the Log Analytics workspace to be used.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// Defaults sets the appropriate defaults for LogAnalyticsConfigurationResponse
func (val *LogAnalyticsConfigurationResponse) Defaults() *LogAnalyticsConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ImportData == nil {
		importData_ := false
		tmp.ImportData = &importData_
	}
	return &tmp
}

// Configuration for Log Analytics linking to SCOM managed instance.
type LogAnalyticsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsConfigurationResponse)(nil)).Elem()
}

func (o LogAnalyticsConfigurationResponseOutput) ToLogAnalyticsConfigurationResponseOutput() LogAnalyticsConfigurationResponseOutput {
	return o
}

func (o LogAnalyticsConfigurationResponseOutput) ToLogAnalyticsConfigurationResponseOutputWithContext(ctx context.Context) LogAnalyticsConfigurationResponseOutput {
	return o
}

// The types of data to be ingested to Log Analytics workspace.
func (o LogAnalyticsConfigurationResponseOutput) DataTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogAnalyticsConfigurationResponse) []string { return v.DataTypes }).(pulumi.StringArrayOutput)
}

// A one-time optional parameter to import data of last 7 days.
func (o LogAnalyticsConfigurationResponseOutput) ImportData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfigurationResponse) *bool { return v.ImportData }).(pulumi.BoolPtrOutput)
}

// The resource ID of the Log Analytics workspace to be used.
func (o LogAnalyticsConfigurationResponseOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfigurationResponse) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

// The properties of a gateway resource.
type ManagedGatewayPropertiesResponse struct {
	// ComputerName of the gateway to be monitored.
	ComputerName *string `pulumi:"computerName"`
	// The connection status of the gateway resource.
	ConnectionStatus string `pulumi:"connectionStatus"`
	// The domain name associated with the gateway to be monitored.
	DomainName *string `pulumi:"domainName"`
	// The health status of the gateway resource.
	HealthStatus string `pulumi:"healthStatus"`
	// Install type of gateway resource.
	InstallType string `pulumi:"installType"`
	// The management server endpoint to which the gateway is directed.
	ManagementServerEndpoint string `pulumi:"managementServerEndpoint"`
	ProvisioningState        string `pulumi:"provisioningState"`
	// ArmId of the gateway to be monitored.
	ResourceId *string `pulumi:"resourceId"`
	// Location of the gateway to be monitored.
	ResourceLocation *string `pulumi:"resourceLocation"`
	// The version of the gateway resource.
	Version string `pulumi:"version"`
}

// The properties of a gateway resource.
type ManagedGatewayPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagedGatewayPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedGatewayPropertiesResponse)(nil)).Elem()
}

func (o ManagedGatewayPropertiesResponseOutput) ToManagedGatewayPropertiesResponseOutput() ManagedGatewayPropertiesResponseOutput {
	return o
}

func (o ManagedGatewayPropertiesResponseOutput) ToManagedGatewayPropertiesResponseOutputWithContext(ctx context.Context) ManagedGatewayPropertiesResponseOutput {
	return o
}

// ComputerName of the gateway to be monitored.
func (o ManagedGatewayPropertiesResponseOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// The connection status of the gateway resource.
func (o ManagedGatewayPropertiesResponseOutput) ConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) string { return v.ConnectionStatus }).(pulumi.StringOutput)
}

// The domain name associated with the gateway to be monitored.
func (o ManagedGatewayPropertiesResponseOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The health status of the gateway resource.
func (o ManagedGatewayPropertiesResponseOutput) HealthStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) string { return v.HealthStatus }).(pulumi.StringOutput)
}

// Install type of gateway resource.
func (o ManagedGatewayPropertiesResponseOutput) InstallType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) string { return v.InstallType }).(pulumi.StringOutput)
}

// The management server endpoint to which the gateway is directed.
func (o ManagedGatewayPropertiesResponseOutput) ManagementServerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) string { return v.ManagementServerEndpoint }).(pulumi.StringOutput)
}

func (o ManagedGatewayPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ArmId of the gateway to be monitored.
func (o ManagedGatewayPropertiesResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Location of the gateway to be monitored.
func (o ManagedGatewayPropertiesResponseOutput) ResourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) *string { return v.ResourceLocation }).(pulumi.StringPtrOutput)
}

// The version of the gateway resource.
func (o ManagedGatewayPropertiesResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedGatewayPropertiesResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Azure Active Directory identity configuration for a resource.
type ManagedIdentity struct {
	// The identity type
	Type *string `pulumi:"type"`
	// The resource ids of the user assigned identities to use
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedIdentityInput is an input type that accepts ManagedIdentityArgs and ManagedIdentityOutput values.
// You can construct a concrete instance of `ManagedIdentityInput` via:
//
//	ManagedIdentityArgs{...}
type ManagedIdentityInput interface {
	pulumi.Input

	ToManagedIdentityOutput() ManagedIdentityOutput
	ToManagedIdentityOutputWithContext(context.Context) ManagedIdentityOutput
}

// Azure Active Directory identity configuration for a resource.
type ManagedIdentityArgs struct {
	// The identity type
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The resource ids of the user assigned identities to use
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (i ManagedIdentityArgs) ToManagedIdentityOutput() ManagedIdentityOutput {
	return i.ToManagedIdentityOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput)
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput).ToManagedIdentityPtrOutputWithContext(ctx)
}

// ManagedIdentityPtrInput is an input type that accepts ManagedIdentityArgs, ManagedIdentityPtr and ManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityPtrInput` via:
//
//	        ManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityPtrInput interface {
	pulumi.Input

	ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput
	ToManagedIdentityPtrOutputWithContext(context.Context) ManagedIdentityPtrOutput
}

type managedIdentityPtrType ManagedIdentityArgs

func ManagedIdentityPtr(v *ManagedIdentityArgs) ManagedIdentityPtrInput {
	return (*managedIdentityPtrType)(v)
}

func (*managedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityPtrOutput)
}

// Azure Active Directory identity configuration for a resource.
type ManagedIdentityOutput struct{ *pulumi.OutputState }

func (ManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityOutput) ToManagedIdentityOutput() ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentity) *ManagedIdentity {
		return &v
	}).(ManagedIdentityPtrOutput)
}

// The identity type
func (o ManagedIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The resource ids of the user assigned identities to use
func (o ManagedIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) Elem() ManagedIdentityOutput {
	return o.ApplyT(func(v *ManagedIdentity) ManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedIdentity
		return ret
	}).(ManagedIdentityOutput)
}

// The identity type
func (o ManagedIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The resource ids of the user assigned identities to use
func (o ManagedIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Azure Active Directory identity configuration for a resource.
type ManagedIdentityResponse struct {
	// System Assigned Identity ObjectId.
	PrincipalId string `pulumi:"principalId"`
	// The Azure Active Directory tenant id.
	TenantId string `pulumi:"tenantId"`
	// The identity type
	Type *string `pulumi:"type"`
	// The resource ids of the user assigned identities to use
	UserAssignedIdentities map[string]UserIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Azure Active Directory identity configuration for a resource.
type ManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput {
	return o
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutputWithContext(ctx context.Context) ManagedIdentityResponseOutput {
	return o
}

// System Assigned Identity ObjectId.
func (o ManagedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Azure Active Directory tenant id.
func (o ManagedIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type
func (o ManagedIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The resource ids of the user assigned identities to use
func (o ManagedIdentityResponseOutput) UserAssignedIdentities() UserIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) map[string]UserIdentityResponse { return v.UserAssignedIdentities }).(UserIdentityResponseMapOutput)
}

type ManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) Elem() ManagedIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) ManagedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityResponse
		return ret
	}).(ManagedIdentityResponseOutput)
}

// System Assigned Identity ObjectId.
func (o ManagedIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory tenant id.
func (o ManagedIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type
func (o ManagedIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The resource ids of the user assigned identities to use
func (o ManagedIdentityResponsePtrOutput) UserAssignedIdentities() UserIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) map[string]UserIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityResponseMapOutput)
}

// Gets status of current and latest SCOM managed instance operation.
type ManagedInstanceOperationStatusResponse struct {
	// Operation id
	Id string `pulumi:"id"`
	// Operation Name
	OperationName string `pulumi:"operationName"`
	// Operation status
	OperationState string `pulumi:"operationState"`
}

// Gets status of current and latest SCOM managed instance operation.
type ManagedInstanceOperationStatusResponseOutput struct{ *pulumi.OutputState }

func (ManagedInstanceOperationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedInstanceOperationStatusResponse)(nil)).Elem()
}

func (o ManagedInstanceOperationStatusResponseOutput) ToManagedInstanceOperationStatusResponseOutput() ManagedInstanceOperationStatusResponseOutput {
	return o
}

func (o ManagedInstanceOperationStatusResponseOutput) ToManagedInstanceOperationStatusResponseOutputWithContext(ctx context.Context) ManagedInstanceOperationStatusResponseOutput {
	return o
}

// Operation id
func (o ManagedInstanceOperationStatusResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedInstanceOperationStatusResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Operation Name
func (o ManagedInstanceOperationStatusResponseOutput) OperationName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedInstanceOperationStatusResponse) string { return v.OperationName }).(pulumi.StringOutput)
}

// Operation status
func (o ManagedInstanceOperationStatusResponseOutput) OperationState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedInstanceOperationStatusResponse) string { return v.OperationState }).(pulumi.StringOutput)
}

type ManagedInstanceOperationStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceOperationStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedInstanceOperationStatusResponse)(nil)).Elem()
}

func (o ManagedInstanceOperationStatusResponseArrayOutput) ToManagedInstanceOperationStatusResponseArrayOutput() ManagedInstanceOperationStatusResponseArrayOutput {
	return o
}

func (o ManagedInstanceOperationStatusResponseArrayOutput) ToManagedInstanceOperationStatusResponseArrayOutputWithContext(ctx context.Context) ManagedInstanceOperationStatusResponseArrayOutput {
	return o
}

func (o ManagedInstanceOperationStatusResponseArrayOutput) Index(i pulumi.IntInput) ManagedInstanceOperationStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedInstanceOperationStatusResponse {
		return vs[0].([]ManagedInstanceOperationStatusResponse)[vs[1].(int)]
	}).(ManagedInstanceOperationStatusResponseOutput)
}

// The properties of management server
type ManagementServerPropertiesResponse struct {
	// Management server Fully Qualified Domain Name.
	Fqdn string `pulumi:"fqdn"`
	// Management server health state.
	HealthState string `pulumi:"healthState"`
	// Management server Name
	ServerName string `pulumi:"serverName"`
	// Represent whether the Server is a Management Server and/or Web Console Server.
	ServerRoles string `pulumi:"serverRoles"`
	// Azure VM Resource Id of the Management server.
	VmResId string `pulumi:"vmResId"`
}

// The properties of management server
type ManagementServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagementServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementServerPropertiesResponse)(nil)).Elem()
}

func (o ManagementServerPropertiesResponseOutput) ToManagementServerPropertiesResponseOutput() ManagementServerPropertiesResponseOutput {
	return o
}

func (o ManagementServerPropertiesResponseOutput) ToManagementServerPropertiesResponseOutputWithContext(ctx context.Context) ManagementServerPropertiesResponseOutput {
	return o
}

// Management server Fully Qualified Domain Name.
func (o ManagementServerPropertiesResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementServerPropertiesResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Management server health state.
func (o ManagementServerPropertiesResponseOutput) HealthState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementServerPropertiesResponse) string { return v.HealthState }).(pulumi.StringOutput)
}

// Management server Name
func (o ManagementServerPropertiesResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementServerPropertiesResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// Represent whether the Server is a Management Server and/or Web Console Server.
func (o ManagementServerPropertiesResponseOutput) ServerRoles() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementServerPropertiesResponse) string { return v.ServerRoles }).(pulumi.StringOutput)
}

// Azure VM Resource Id of the Management server.
func (o ManagementServerPropertiesResponseOutput) VmResId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementServerPropertiesResponse) string { return v.VmResId }).(pulumi.StringOutput)
}

type ManagementServerPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagementServerPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementServerPropertiesResponse)(nil)).Elem()
}

func (o ManagementServerPropertiesResponseArrayOutput) ToManagementServerPropertiesResponseArrayOutput() ManagementServerPropertiesResponseArrayOutput {
	return o
}

func (o ManagementServerPropertiesResponseArrayOutput) ToManagementServerPropertiesResponseArrayOutputWithContext(ctx context.Context) ManagementServerPropertiesResponseArrayOutput {
	return o
}

func (o ManagementServerPropertiesResponseArrayOutput) Index(i pulumi.IntInput) ManagementServerPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementServerPropertiesResponse {
		return vs[0].([]ManagementServerPropertiesResponse)[vs[1].(int)]
	}).(ManagementServerPropertiesResponseOutput)
}

// The properties of a monitored resource.
type MonitoredResourcePropertiesResponse struct {
	// The version of the monitored resource agent version.
	AgentVersion string `pulumi:"agentVersion"`
	// ComputerName of the monitored resource.
	ComputerName *string `pulumi:"computerName"`
	// The connection status of the monitored resource.
	ConnectionStatus string `pulumi:"connectionStatus"`
	// The domain name associated with the monitored resource.
	DomainName *string `pulumi:"domainName"`
	// The health status of the monitored resource.
	HealthStatus string `pulumi:"healthStatus"`
	// Install type of monitored resource.
	InstallType string `pulumi:"installType"`
	// The management server endpoint to which the monitored resource is directed.
	ManagementServerEndpoint string `pulumi:"managementServerEndpoint"`
	ProvisioningState        string `pulumi:"provisioningState"`
	// ArmId of the monitored resource.
	ResourceId *string `pulumi:"resourceId"`
	// Location of the monitored resource.
	ResourceLocation *string `pulumi:"resourceLocation"`
}

// The properties of a monitored resource.
type MonitoredResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (MonitoredResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredResourcePropertiesResponse)(nil)).Elem()
}

func (o MonitoredResourcePropertiesResponseOutput) ToMonitoredResourcePropertiesResponseOutput() MonitoredResourcePropertiesResponseOutput {
	return o
}

func (o MonitoredResourcePropertiesResponseOutput) ToMonitoredResourcePropertiesResponseOutputWithContext(ctx context.Context) MonitoredResourcePropertiesResponseOutput {
	return o
}

// The version of the monitored resource agent version.
func (o MonitoredResourcePropertiesResponseOutput) AgentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) string { return v.AgentVersion }).(pulumi.StringOutput)
}

// ComputerName of the monitored resource.
func (o MonitoredResourcePropertiesResponseOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// The connection status of the monitored resource.
func (o MonitoredResourcePropertiesResponseOutput) ConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) string { return v.ConnectionStatus }).(pulumi.StringOutput)
}

// The domain name associated with the monitored resource.
func (o MonitoredResourcePropertiesResponseOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The health status of the monitored resource.
func (o MonitoredResourcePropertiesResponseOutput) HealthStatus() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) string { return v.HealthStatus }).(pulumi.StringOutput)
}

// Install type of monitored resource.
func (o MonitoredResourcePropertiesResponseOutput) InstallType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) string { return v.InstallType }).(pulumi.StringOutput)
}

// The management server endpoint to which the monitored resource is directed.
func (o MonitoredResourcePropertiesResponseOutput) ManagementServerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) string { return v.ManagementServerEndpoint }).(pulumi.StringOutput)
}

func (o MonitoredResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ArmId of the monitored resource.
func (o MonitoredResourcePropertiesResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Location of the monitored resource.
func (o MonitoredResourcePropertiesResponseOutput) ResourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourcePropertiesResponse) *string { return v.ResourceLocation }).(pulumi.StringPtrOutput)
}

// The properties of a SCOM instance resource
type MonitoringInstanceProperties struct {
	// The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
	AzureHybridBenefit *AzureHybridBenefitProperties `pulumi:"azureHybridBenefit"`
	// The database instance where the SCOM Operational and Warehouse databases will be stored.
	DatabaseInstance *DatabaseInstanceProperties `pulumi:"databaseInstance"`
	// Domain controller details
	DomainController *DomainControllerProperties `pulumi:"domainController"`
	// Domain user which will be used to join VMs to domain and login to VMs.
	DomainUserCredentials *DomainUserCredentials `pulumi:"domainUserCredentials"`
	// Gmsa Details for load balancer and vmss
	GmsaDetails *GmsaDetails `pulumi:"gmsaDetails"`
	// Virtual Network subnet id on which Aquila instance will be provisioned
	VNetSubnetId *string `pulumi:"vNetSubnetId"`
}

// Defaults sets the appropriate defaults for MonitoringInstanceProperties
func (val *MonitoringInstanceProperties) Defaults() *MonitoringInstanceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DomainController = tmp.DomainController.Defaults()

	return &tmp
}

// MonitoringInstancePropertiesInput is an input type that accepts MonitoringInstancePropertiesArgs and MonitoringInstancePropertiesOutput values.
// You can construct a concrete instance of `MonitoringInstancePropertiesInput` via:
//
//	MonitoringInstancePropertiesArgs{...}
type MonitoringInstancePropertiesInput interface {
	pulumi.Input

	ToMonitoringInstancePropertiesOutput() MonitoringInstancePropertiesOutput
	ToMonitoringInstancePropertiesOutputWithContext(context.Context) MonitoringInstancePropertiesOutput
}

// The properties of a SCOM instance resource
type MonitoringInstancePropertiesArgs struct {
	// The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
	AzureHybridBenefit AzureHybridBenefitPropertiesPtrInput `pulumi:"azureHybridBenefit"`
	// The database instance where the SCOM Operational and Warehouse databases will be stored.
	DatabaseInstance DatabaseInstancePropertiesPtrInput `pulumi:"databaseInstance"`
	// Domain controller details
	DomainController DomainControllerPropertiesPtrInput `pulumi:"domainController"`
	// Domain user which will be used to join VMs to domain and login to VMs.
	DomainUserCredentials DomainUserCredentialsPtrInput `pulumi:"domainUserCredentials"`
	// Gmsa Details for load balancer and vmss
	GmsaDetails GmsaDetailsPtrInput `pulumi:"gmsaDetails"`
	// Virtual Network subnet id on which Aquila instance will be provisioned
	VNetSubnetId pulumi.StringPtrInput `pulumi:"vNetSubnetId"`
}

// Defaults sets the appropriate defaults for MonitoringInstancePropertiesArgs
func (val *MonitoringInstancePropertiesArgs) Defaults() *MonitoringInstancePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (MonitoringInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringInstanceProperties)(nil)).Elem()
}

func (i MonitoringInstancePropertiesArgs) ToMonitoringInstancePropertiesOutput() MonitoringInstancePropertiesOutput {
	return i.ToMonitoringInstancePropertiesOutputWithContext(context.Background())
}

func (i MonitoringInstancePropertiesArgs) ToMonitoringInstancePropertiesOutputWithContext(ctx context.Context) MonitoringInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringInstancePropertiesOutput)
}

func (i MonitoringInstancePropertiesArgs) ToMonitoringInstancePropertiesPtrOutput() MonitoringInstancePropertiesPtrOutput {
	return i.ToMonitoringInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i MonitoringInstancePropertiesArgs) ToMonitoringInstancePropertiesPtrOutputWithContext(ctx context.Context) MonitoringInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringInstancePropertiesOutput).ToMonitoringInstancePropertiesPtrOutputWithContext(ctx)
}

// MonitoringInstancePropertiesPtrInput is an input type that accepts MonitoringInstancePropertiesArgs, MonitoringInstancePropertiesPtr and MonitoringInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `MonitoringInstancePropertiesPtrInput` via:
//
//	        MonitoringInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type MonitoringInstancePropertiesPtrInput interface {
	pulumi.Input

	ToMonitoringInstancePropertiesPtrOutput() MonitoringInstancePropertiesPtrOutput
	ToMonitoringInstancePropertiesPtrOutputWithContext(context.Context) MonitoringInstancePropertiesPtrOutput
}

type monitoringInstancePropertiesPtrType MonitoringInstancePropertiesArgs

func MonitoringInstancePropertiesPtr(v *MonitoringInstancePropertiesArgs) MonitoringInstancePropertiesPtrInput {
	return (*monitoringInstancePropertiesPtrType)(v)
}

func (*monitoringInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringInstanceProperties)(nil)).Elem()
}

func (i *monitoringInstancePropertiesPtrType) ToMonitoringInstancePropertiesPtrOutput() MonitoringInstancePropertiesPtrOutput {
	return i.ToMonitoringInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *monitoringInstancePropertiesPtrType) ToMonitoringInstancePropertiesPtrOutputWithContext(ctx context.Context) MonitoringInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringInstancePropertiesPtrOutput)
}

// The properties of a SCOM instance resource
type MonitoringInstancePropertiesOutput struct{ *pulumi.OutputState }

func (MonitoringInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringInstanceProperties)(nil)).Elem()
}

func (o MonitoringInstancePropertiesOutput) ToMonitoringInstancePropertiesOutput() MonitoringInstancePropertiesOutput {
	return o
}

func (o MonitoringInstancePropertiesOutput) ToMonitoringInstancePropertiesOutputWithContext(ctx context.Context) MonitoringInstancePropertiesOutput {
	return o
}

func (o MonitoringInstancePropertiesOutput) ToMonitoringInstancePropertiesPtrOutput() MonitoringInstancePropertiesPtrOutput {
	return o.ToMonitoringInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o MonitoringInstancePropertiesOutput) ToMonitoringInstancePropertiesPtrOutputWithContext(ctx context.Context) MonitoringInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringInstanceProperties) *MonitoringInstanceProperties {
		return &v
	}).(MonitoringInstancePropertiesPtrOutput)
}

// The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
func (o MonitoringInstancePropertiesOutput) AzureHybridBenefit() AzureHybridBenefitPropertiesPtrOutput {
	return o.ApplyT(func(v MonitoringInstanceProperties) *AzureHybridBenefitProperties { return v.AzureHybridBenefit }).(AzureHybridBenefitPropertiesPtrOutput)
}

// The database instance where the SCOM Operational and Warehouse databases will be stored.
func (o MonitoringInstancePropertiesOutput) DatabaseInstance() DatabaseInstancePropertiesPtrOutput {
	return o.ApplyT(func(v MonitoringInstanceProperties) *DatabaseInstanceProperties { return v.DatabaseInstance }).(DatabaseInstancePropertiesPtrOutput)
}

// Domain controller details
func (o MonitoringInstancePropertiesOutput) DomainController() DomainControllerPropertiesPtrOutput {
	return o.ApplyT(func(v MonitoringInstanceProperties) *DomainControllerProperties { return v.DomainController }).(DomainControllerPropertiesPtrOutput)
}

// Domain user which will be used to join VMs to domain and login to VMs.
func (o MonitoringInstancePropertiesOutput) DomainUserCredentials() DomainUserCredentialsPtrOutput {
	return o.ApplyT(func(v MonitoringInstanceProperties) *DomainUserCredentials { return v.DomainUserCredentials }).(DomainUserCredentialsPtrOutput)
}

// Gmsa Details for load balancer and vmss
func (o MonitoringInstancePropertiesOutput) GmsaDetails() GmsaDetailsPtrOutput {
	return o.ApplyT(func(v MonitoringInstanceProperties) *GmsaDetails { return v.GmsaDetails }).(GmsaDetailsPtrOutput)
}

// Virtual Network subnet id on which Aquila instance will be provisioned
func (o MonitoringInstancePropertiesOutput) VNetSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringInstanceProperties) *string { return v.VNetSubnetId }).(pulumi.StringPtrOutput)
}

type MonitoringInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (MonitoringInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringInstanceProperties)(nil)).Elem()
}

func (o MonitoringInstancePropertiesPtrOutput) ToMonitoringInstancePropertiesPtrOutput() MonitoringInstancePropertiesPtrOutput {
	return o
}

func (o MonitoringInstancePropertiesPtrOutput) ToMonitoringInstancePropertiesPtrOutputWithContext(ctx context.Context) MonitoringInstancePropertiesPtrOutput {
	return o
}

func (o MonitoringInstancePropertiesPtrOutput) Elem() MonitoringInstancePropertiesOutput {
	return o.ApplyT(func(v *MonitoringInstanceProperties) MonitoringInstanceProperties {
		if v != nil {
			return *v
		}
		var ret MonitoringInstanceProperties
		return ret
	}).(MonitoringInstancePropertiesOutput)
}

// The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
func (o MonitoringInstancePropertiesPtrOutput) AzureHybridBenefit() AzureHybridBenefitPropertiesPtrOutput {
	return o.ApplyT(func(v *MonitoringInstanceProperties) *AzureHybridBenefitProperties {
		if v == nil {
			return nil
		}
		return v.AzureHybridBenefit
	}).(AzureHybridBenefitPropertiesPtrOutput)
}

// The database instance where the SCOM Operational and Warehouse databases will be stored.
func (o MonitoringInstancePropertiesPtrOutput) DatabaseInstance() DatabaseInstancePropertiesPtrOutput {
	return o.ApplyT(func(v *MonitoringInstanceProperties) *DatabaseInstanceProperties {
		if v == nil {
			return nil
		}
		return v.DatabaseInstance
	}).(DatabaseInstancePropertiesPtrOutput)
}

// Domain controller details
func (o MonitoringInstancePropertiesPtrOutput) DomainController() DomainControllerPropertiesPtrOutput {
	return o.ApplyT(func(v *MonitoringInstanceProperties) *DomainControllerProperties {
		if v == nil {
			return nil
		}
		return v.DomainController
	}).(DomainControllerPropertiesPtrOutput)
}

// Domain user which will be used to join VMs to domain and login to VMs.
func (o MonitoringInstancePropertiesPtrOutput) DomainUserCredentials() DomainUserCredentialsPtrOutput {
	return o.ApplyT(func(v *MonitoringInstanceProperties) *DomainUserCredentials {
		if v == nil {
			return nil
		}
		return v.DomainUserCredentials
	}).(DomainUserCredentialsPtrOutput)
}

// Gmsa Details for load balancer and vmss
func (o MonitoringInstancePropertiesPtrOutput) GmsaDetails() GmsaDetailsPtrOutput {
	return o.ApplyT(func(v *MonitoringInstanceProperties) *GmsaDetails {
		if v == nil {
			return nil
		}
		return v.GmsaDetails
	}).(GmsaDetailsPtrOutput)
}

// Virtual Network subnet id on which Aquila instance will be provisioned
func (o MonitoringInstancePropertiesPtrOutput) VNetSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.VNetSubnetId
	}).(pulumi.StringPtrOutput)
}

// The properties of a SCOM instance resource
type MonitoringInstancePropertiesResponse struct {
	// The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
	AzureHybridBenefit *AzureHybridBenefitPropertiesResponse `pulumi:"azureHybridBenefit"`
	// The database instance where the SCOM Operational and Warehouse databases will be stored.
	DatabaseInstance *DatabaseInstancePropertiesResponse `pulumi:"databaseInstance"`
	// Domain controller details
	DomainController *DomainControllerPropertiesResponse `pulumi:"domainController"`
	// Domain user which will be used to join VMs to domain and login to VMs.
	DomainUserCredentials *DomainUserCredentialsResponse `pulumi:"domainUserCredentials"`
	// Gmsa Details for load balancer and vmss
	GmsaDetails *GmsaDetailsResponse `pulumi:"gmsaDetails"`
	// Details of Log Analytics workspace and data being ingested.
	LogAnalyticsProperties LogAnalyticsConfigurationResponse `pulumi:"logAnalyticsProperties"`
	// List of management server endpoints
	ManagementEndpoints []ManagementServerPropertiesResponse `pulumi:"managementEndpoints"`
	// Gets status of current and latest SCOM managed instance operations.
	OperationsStatus []ManagedInstanceOperationStatusResponse `pulumi:"operationsStatus"`
	// SCOM product version to be installed on instance
	ProductVersion string `pulumi:"productVersion"`
	// Gets or sets the provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Virtual Network subnet id on which Aquila instance will be provisioned
	VNetSubnetId *string `pulumi:"vNetSubnetId"`
}

// Defaults sets the appropriate defaults for MonitoringInstancePropertiesResponse
func (val *MonitoringInstancePropertiesResponse) Defaults() *MonitoringInstancePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DomainController = tmp.DomainController.Defaults()

	tmp.LogAnalyticsProperties = *tmp.LogAnalyticsProperties.Defaults()

	return &tmp
}

// The properties of a SCOM instance resource
type MonitoringInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (MonitoringInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringInstancePropertiesResponse)(nil)).Elem()
}

func (o MonitoringInstancePropertiesResponseOutput) ToMonitoringInstancePropertiesResponseOutput() MonitoringInstancePropertiesResponseOutput {
	return o
}

func (o MonitoringInstancePropertiesResponseOutput) ToMonitoringInstancePropertiesResponseOutputWithContext(ctx context.Context) MonitoringInstancePropertiesResponseOutput {
	return o
}

// The properties to enable Azure Hybrid benefit for various SCOM infrastructure license.
func (o MonitoringInstancePropertiesResponseOutput) AzureHybridBenefit() AzureHybridBenefitPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) *AzureHybridBenefitPropertiesResponse {
		return v.AzureHybridBenefit
	}).(AzureHybridBenefitPropertiesResponsePtrOutput)
}

// The database instance where the SCOM Operational and Warehouse databases will be stored.
func (o MonitoringInstancePropertiesResponseOutput) DatabaseInstance() DatabaseInstancePropertiesResponsePtrOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) *DatabaseInstancePropertiesResponse {
		return v.DatabaseInstance
	}).(DatabaseInstancePropertiesResponsePtrOutput)
}

// Domain controller details
func (o MonitoringInstancePropertiesResponseOutput) DomainController() DomainControllerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) *DomainControllerPropertiesResponse {
		return v.DomainController
	}).(DomainControllerPropertiesResponsePtrOutput)
}

// Domain user which will be used to join VMs to domain and login to VMs.
func (o MonitoringInstancePropertiesResponseOutput) DomainUserCredentials() DomainUserCredentialsResponsePtrOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) *DomainUserCredentialsResponse {
		return v.DomainUserCredentials
	}).(DomainUserCredentialsResponsePtrOutput)
}

// Gmsa Details for load balancer and vmss
func (o MonitoringInstancePropertiesResponseOutput) GmsaDetails() GmsaDetailsResponsePtrOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) *GmsaDetailsResponse { return v.GmsaDetails }).(GmsaDetailsResponsePtrOutput)
}

// Details of Log Analytics workspace and data being ingested.
func (o MonitoringInstancePropertiesResponseOutput) LogAnalyticsProperties() LogAnalyticsConfigurationResponseOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) LogAnalyticsConfigurationResponse {
		return v.LogAnalyticsProperties
	}).(LogAnalyticsConfigurationResponseOutput)
}

// List of management server endpoints
func (o MonitoringInstancePropertiesResponseOutput) ManagementEndpoints() ManagementServerPropertiesResponseArrayOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) []ManagementServerPropertiesResponse {
		return v.ManagementEndpoints
	}).(ManagementServerPropertiesResponseArrayOutput)
}

// Gets status of current and latest SCOM managed instance operations.
func (o MonitoringInstancePropertiesResponseOutput) OperationsStatus() ManagedInstanceOperationStatusResponseArrayOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) []ManagedInstanceOperationStatusResponse {
		return v.OperationsStatus
	}).(ManagedInstanceOperationStatusResponseArrayOutput)
}

// SCOM product version to be installed on instance
func (o MonitoringInstancePropertiesResponseOutput) ProductVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) string { return v.ProductVersion }).(pulumi.StringOutput)
}

// Gets or sets the provisioning state.
func (o MonitoringInstancePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Virtual Network subnet id on which Aquila instance will be provisioned
func (o MonitoringInstancePropertiesResponseOutput) VNetSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringInstancePropertiesResponse) *string { return v.VNetSubnetId }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Azure Active Directory identity configuration for a resource.
type UserIdentityResponse struct {
	// The Azure Active Directory client id.
	ClientId string `pulumi:"clientId"`
	// The Azure Active Directory principal id.
	PrincipalId string `pulumi:"principalId"`
}

// Azure Active Directory identity configuration for a resource.
type UserIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutput() UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutputWithContext(ctx context.Context) UserIdentityResponseOutput {
	return o
}

// The Azure Active Directory client id.
func (o UserIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The Azure Active Directory principal id.
func (o UserIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseMapOutput) ToUserIdentityResponseMapOutput() UserIdentityResponseMapOutput {
	return o
}

func (o UserIdentityResponseMapOutput) ToUserIdentityResponseMapOutputWithContext(ctx context.Context) UserIdentityResponseMapOutput {
	return o
}

func (o UserIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityResponse {
		return vs[0].(map[string]UserIdentityResponse)[vs[1].(string)]
	}).(UserIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureHybridBenefitPropertiesOutput{})
	pulumi.RegisterOutputType(AzureHybridBenefitPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AzureHybridBenefitPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AzureHybridBenefitPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseInstancePropertiesOutput{})
	pulumi.RegisterOutputType(DatabaseInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DatabaseInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DomainControllerPropertiesOutput{})
	pulumi.RegisterOutputType(DomainControllerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DomainControllerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DomainControllerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DomainUserCredentialsOutput{})
	pulumi.RegisterOutputType(DomainUserCredentialsPtrOutput{})
	pulumi.RegisterOutputType(DomainUserCredentialsResponseOutput{})
	pulumi.RegisterOutputType(DomainUserCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(GmsaDetailsOutput{})
	pulumi.RegisterOutputType(GmsaDetailsPtrOutput{})
	pulumi.RegisterOutputType(GmsaDetailsResponseOutput{})
	pulumi.RegisterOutputType(GmsaDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedGatewayPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityOutput{})
	pulumi.RegisterOutputType(ManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedInstanceOperationStatusResponseOutput{})
	pulumi.RegisterOutputType(ManagedInstanceOperationStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagementServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagementServerPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(MonitoredResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(MonitoringInstancePropertiesOutput{})
	pulumi.RegisterOutputType(MonitoringInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(MonitoringInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseMapOutput{})
}
