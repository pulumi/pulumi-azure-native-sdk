// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managednetworkfabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the running status of the Network Interface.
// Azure REST API version: 2023-02-01-preview.
func GetNetworkInterfaceStatus(ctx *pulumi.Context, args *GetNetworkInterfaceStatusArgs, opts ...pulumi.InvokeOption) (*GetNetworkInterfaceStatusResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetNetworkInterfaceStatusResult
	err := ctx.Invoke("azure-native:managednetworkfabric:getNetworkInterfaceStatus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetNetworkInterfaceStatusArgs struct {
	// Name of the NetworkDevice.
	NetworkDeviceName string `pulumi:"networkDeviceName"`
	// Name of the NetworkInterface
	NetworkInterfaceName string `pulumi:"networkInterfaceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Interface running status properties
type GetNetworkInterfaceStatusResult struct {
	// The interface administrative state.
	AdministrativeState string `pulumi:"administrativeState"`
	// Connected to ARM resource or external interface
	ConnectedTo *string `pulumi:"connectedTo"`
	// The interface operational status.
	OperationalStatus *string `pulumi:"operationalStatus"`
	// The physical status.
	PhyStatus *string `pulumi:"phyStatus"`
	// The interface transceiver type. Example: up or down
	TransceiverStatus *string `pulumi:"transceiverStatus"`
}

func GetNetworkInterfaceStatusOutput(ctx *pulumi.Context, args GetNetworkInterfaceStatusOutputArgs, opts ...pulumi.InvokeOption) GetNetworkInterfaceStatusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNetworkInterfaceStatusResult, error) {
			args := v.(GetNetworkInterfaceStatusArgs)
			r, err := GetNetworkInterfaceStatus(ctx, &args, opts...)
			var s GetNetworkInterfaceStatusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNetworkInterfaceStatusResultOutput)
}

type GetNetworkInterfaceStatusOutputArgs struct {
	// Name of the NetworkDevice.
	NetworkDeviceName pulumi.StringInput `pulumi:"networkDeviceName"`
	// Name of the NetworkInterface
	NetworkInterfaceName pulumi.StringInput `pulumi:"networkInterfaceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetNetworkInterfaceStatusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkInterfaceStatusArgs)(nil)).Elem()
}

// Interface running status properties
type GetNetworkInterfaceStatusResultOutput struct{ *pulumi.OutputState }

func (GetNetworkInterfaceStatusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkInterfaceStatusResult)(nil)).Elem()
}

func (o GetNetworkInterfaceStatusResultOutput) ToGetNetworkInterfaceStatusResultOutput() GetNetworkInterfaceStatusResultOutput {
	return o
}

func (o GetNetworkInterfaceStatusResultOutput) ToGetNetworkInterfaceStatusResultOutputWithContext(ctx context.Context) GetNetworkInterfaceStatusResultOutput {
	return o
}

// The interface administrative state.
func (o GetNetworkInterfaceStatusResultOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkInterfaceStatusResult) string { return v.AdministrativeState }).(pulumi.StringOutput)
}

// Connected to ARM resource or external interface
func (o GetNetworkInterfaceStatusResultOutput) ConnectedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkInterfaceStatusResult) *string { return v.ConnectedTo }).(pulumi.StringPtrOutput)
}

// The interface operational status.
func (o GetNetworkInterfaceStatusResultOutput) OperationalStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkInterfaceStatusResult) *string { return v.OperationalStatus }).(pulumi.StringPtrOutput)
}

// The physical status.
func (o GetNetworkInterfaceStatusResultOutput) PhyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkInterfaceStatusResult) *string { return v.PhyStatus }).(pulumi.StringPtrOutput)
}

// The interface transceiver type. Example: up or down
func (o GetNetworkInterfaceStatusResultOutput) TransceiverStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkInterfaceStatusResult) *string { return v.TransceiverStatus }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNetworkInterfaceStatusResultOutput{})
}
