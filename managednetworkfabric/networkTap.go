// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managednetworkfabric

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Network Tap resource definition.
// Azure REST API version: 2023-06-15.
type NetworkTap struct {
	pulumi.CustomResourceState

	// Administrative state of the resource. Example -Enabled/Disabled
	AdministrativeState pulumi.StringOutput `pulumi:"administrativeState"`
	// Switch configuration description.
	Annotation pulumi.StringPtrOutput `pulumi:"annotation"`
	// Gets the configurations state of the resource.
	ConfigurationState pulumi.StringOutput `pulumi:"configurationState"`
	// List of destinations to send the filter traffic.
	Destinations NetworkTapPropertiesResponseDestinationsArrayOutput `pulumi:"destinations"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// ARM resource ID of the Network Packet Broker.
	NetworkPacketBrokerId pulumi.StringOutput `pulumi:"networkPacketBrokerId"`
	// Polling type.
	PollingType pulumi.StringPtrOutput `pulumi:"pollingType"`
	// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
	SourceTapRuleId pulumi.StringOutput `pulumi:"sourceTapRuleId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNetworkTap registers a new resource with the given unique name, arguments, and options.
func NewNetworkTap(ctx *pulumi.Context,
	name string, args *NetworkTapArgs, opts ...pulumi.ResourceOption) (*NetworkTap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destinations == nil {
		return nil, errors.New("invalid value for required argument 'Destinations'")
	}
	if args.NetworkPacketBrokerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkPacketBrokerId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.PollingType == nil {
		args.PollingType = pulumi.StringPtr("Pull")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:managednetworkfabric/v20230615:NetworkTap"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource NetworkTap
	err := ctx.RegisterResource("azure-native:managednetworkfabric:NetworkTap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkTap gets an existing NetworkTap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkTap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkTapState, opts ...pulumi.ResourceOption) (*NetworkTap, error) {
	var resource NetworkTap
	err := ctx.ReadResource("azure-native:managednetworkfabric:NetworkTap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkTap resources.
type networkTapState struct {
}

type NetworkTapState struct {
}

func (NetworkTapState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkTapState)(nil)).Elem()
}

type networkTapArgs struct {
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// List of destinations to send the filter traffic.
	Destinations []NetworkTapPropertiesDestinations `pulumi:"destinations"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// ARM resource ID of the Network Packet Broker.
	NetworkPacketBrokerId string `pulumi:"networkPacketBrokerId"`
	// Name of the Network Tap.
	NetworkTapName *string `pulumi:"networkTapName"`
	// Polling type.
	PollingType *string `pulumi:"pollingType"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkTap resource.
type NetworkTapArgs struct {
	// Switch configuration description.
	Annotation pulumi.StringPtrInput
	// List of destinations to send the filter traffic.
	Destinations NetworkTapPropertiesDestinationsArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// ARM resource ID of the Network Packet Broker.
	NetworkPacketBrokerId pulumi.StringInput
	// Name of the Network Tap.
	NetworkTapName pulumi.StringPtrInput
	// Polling type.
	PollingType pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (NetworkTapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkTapArgs)(nil)).Elem()
}

type NetworkTapInput interface {
	pulumi.Input

	ToNetworkTapOutput() NetworkTapOutput
	ToNetworkTapOutputWithContext(ctx context.Context) NetworkTapOutput
}

func (*NetworkTap) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkTap)(nil)).Elem()
}

func (i *NetworkTap) ToNetworkTapOutput() NetworkTapOutput {
	return i.ToNetworkTapOutputWithContext(context.Background())
}

func (i *NetworkTap) ToNetworkTapOutputWithContext(ctx context.Context) NetworkTapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapOutput)
}

type NetworkTapOutput struct{ *pulumi.OutputState }

func (NetworkTapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkTap)(nil)).Elem()
}

func (o NetworkTapOutput) ToNetworkTapOutput() NetworkTapOutput {
	return o
}

func (o NetworkTapOutput) ToNetworkTapOutputWithContext(ctx context.Context) NetworkTapOutput {
	return o
}

// Administrative state of the resource. Example -Enabled/Disabled
func (o NetworkTapOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.AdministrativeState }).(pulumi.StringOutput)
}

// Switch configuration description.
func (o NetworkTapOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringPtrOutput { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Gets the configurations state of the resource.
func (o NetworkTapOutput) ConfigurationState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.ConfigurationState }).(pulumi.StringOutput)
}

// List of destinations to send the filter traffic.
func (o NetworkTapOutput) Destinations() NetworkTapPropertiesResponseDestinationsArrayOutput {
	return o.ApplyT(func(v *NetworkTap) NetworkTapPropertiesResponseDestinationsArrayOutput { return v.Destinations }).(NetworkTapPropertiesResponseDestinationsArrayOutput)
}

// The geo-location where the resource lives
func (o NetworkTapOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o NetworkTapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ARM resource ID of the Network Packet Broker.
func (o NetworkTapOutput) NetworkPacketBrokerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.NetworkPacketBrokerId }).(pulumi.StringOutput)
}

// Polling type.
func (o NetworkTapOutput) PollingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringPtrOutput { return v.PollingType }).(pulumi.StringPtrOutput)
}

// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
func (o NetworkTapOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
func (o NetworkTapOutput) SourceTapRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.SourceTapRuleId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o NetworkTapOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NetworkTap) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o NetworkTapOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o NetworkTapOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkTap) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkTapOutput{})
}
