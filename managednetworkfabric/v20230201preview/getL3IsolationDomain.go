// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves details of this L3 Isolation Domain.
func LookupL3IsolationDomain(ctx *pulumi.Context, args *LookupL3IsolationDomainArgs, opts ...pulumi.InvokeOption) (*LookupL3IsolationDomainResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupL3IsolationDomainResult
	err := ctx.Invoke("azure-native:managednetworkfabric/v20230201preview:getL3IsolationDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupL3IsolationDomainArgs struct {
	// Name of the L3 Isolation Domain
	L3IsolationDomainName string `pulumi:"l3IsolationDomainName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The L3IsolationDomain resource definition.
type LookupL3IsolationDomainResult struct {
	// Administrative state of the IsolationDomain. Example: Enabled | Disabled.
	AdministrativeState string `pulumi:"administrativeState"`
	// List of Ipv4 and Ipv6 route configurations.
	AggregateRouteConfiguration *AggregateRouteConfigurationResponse `pulumi:"aggregateRouteConfiguration"`
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Connected Subnet RoutePolicy
	ConnectedSubnetRoutePolicy *L3IsolationDomainPatchPropertiesResponseConnectedSubnetRoutePolicy `pulumi:"connectedSubnetRoutePolicy"`
	// L3 Isolation Domain description.
	Description *string `pulumi:"description"`
	// List of resources the L3 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
	DisabledOnResources []string `pulumi:"disabledOnResources"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Network Fabric ARM resource id.
	NetworkFabricId string `pulumi:"networkFabricId"`
	// List of resources the OptionB is disabled on. Can be either entire NetworkFabric or NetworkRack.
	OptionBDisabledOnResources []string `pulumi:"optionBDisabledOnResources"`
	// Gets the provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Advertise Connected Subnets. Ex: "True" | "False".
	RedistributeConnectedSubnets *string `pulumi:"redistributeConnectedSubnets"`
	// Advertise Static Routes. Ex: "True" | "False".
	RedistributeStaticRoutes *string `pulumi:"redistributeStaticRoutes"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupL3IsolationDomainResult
func (val *LookupL3IsolationDomainResult) Defaults() *LookupL3IsolationDomainResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RedistributeConnectedSubnets == nil {
		redistributeConnectedSubnets_ := "True"
		tmp.RedistributeConnectedSubnets = &redistributeConnectedSubnets_
	}
	if tmp.RedistributeStaticRoutes == nil {
		redistributeStaticRoutes_ := "False"
		tmp.RedistributeStaticRoutes = &redistributeStaticRoutes_
	}
	return &tmp
}

func LookupL3IsolationDomainOutput(ctx *pulumi.Context, args LookupL3IsolationDomainOutputArgs, opts ...pulumi.InvokeOption) LookupL3IsolationDomainResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupL3IsolationDomainResult, error) {
			args := v.(LookupL3IsolationDomainArgs)
			r, err := LookupL3IsolationDomain(ctx, &args, opts...)
			var s LookupL3IsolationDomainResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupL3IsolationDomainResultOutput)
}

type LookupL3IsolationDomainOutputArgs struct {
	// Name of the L3 Isolation Domain
	L3IsolationDomainName pulumi.StringInput `pulumi:"l3IsolationDomainName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupL3IsolationDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupL3IsolationDomainArgs)(nil)).Elem()
}

// The L3IsolationDomain resource definition.
type LookupL3IsolationDomainResultOutput struct{ *pulumi.OutputState }

func (LookupL3IsolationDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupL3IsolationDomainResult)(nil)).Elem()
}

func (o LookupL3IsolationDomainResultOutput) ToLookupL3IsolationDomainResultOutput() LookupL3IsolationDomainResultOutput {
	return o
}

func (o LookupL3IsolationDomainResultOutput) ToLookupL3IsolationDomainResultOutputWithContext(ctx context.Context) LookupL3IsolationDomainResultOutput {
	return o
}

// Administrative state of the IsolationDomain. Example: Enabled | Disabled.
func (o LookupL3IsolationDomainResultOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) string { return v.AdministrativeState }).(pulumi.StringOutput)
}

// List of Ipv4 and Ipv6 route configurations.
func (o LookupL3IsolationDomainResultOutput) AggregateRouteConfiguration() AggregateRouteConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) *AggregateRouteConfigurationResponse {
		return v.AggregateRouteConfiguration
	}).(AggregateRouteConfigurationResponsePtrOutput)
}

// Switch configuration description.
func (o LookupL3IsolationDomainResultOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Connected Subnet RoutePolicy
func (o LookupL3IsolationDomainResultOutput) ConnectedSubnetRoutePolicy() L3IsolationDomainPatchPropertiesResponseConnectedSubnetRoutePolicyPtrOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) *L3IsolationDomainPatchPropertiesResponseConnectedSubnetRoutePolicy {
		return v.ConnectedSubnetRoutePolicy
	}).(L3IsolationDomainPatchPropertiesResponseConnectedSubnetRoutePolicyPtrOutput)
}

// L3 Isolation Domain description.
func (o LookupL3IsolationDomainResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// List of resources the L3 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
func (o LookupL3IsolationDomainResultOutput) DisabledOnResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) []string { return v.DisabledOnResources }).(pulumi.StringArrayOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupL3IsolationDomainResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupL3IsolationDomainResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupL3IsolationDomainResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network Fabric ARM resource id.
func (o LookupL3IsolationDomainResultOutput) NetworkFabricId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) string { return v.NetworkFabricId }).(pulumi.StringOutput)
}

// List of resources the OptionB is disabled on. Can be either entire NetworkFabric or NetworkRack.
func (o LookupL3IsolationDomainResultOutput) OptionBDisabledOnResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) []string { return v.OptionBDisabledOnResources }).(pulumi.StringArrayOutput)
}

// Gets the provisioning state of the resource.
func (o LookupL3IsolationDomainResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Advertise Connected Subnets. Ex: "True" | "False".
func (o LookupL3IsolationDomainResultOutput) RedistributeConnectedSubnets() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) *string { return v.RedistributeConnectedSubnets }).(pulumi.StringPtrOutput)
}

// Advertise Static Routes. Ex: "True" | "False".
func (o LookupL3IsolationDomainResultOutput) RedistributeStaticRoutes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) *string { return v.RedistributeStaticRoutes }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupL3IsolationDomainResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupL3IsolationDomainResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupL3IsolationDomainResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupL3IsolationDomainResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupL3IsolationDomainResultOutput{})
}
