// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Shows the provisioning status of Network Fabric Controller.
func LookupNetworkFabricController(ctx *pulumi.Context, args *LookupNetworkFabricControllerArgs, opts ...pulumi.InvokeOption) (*LookupNetworkFabricControllerResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkFabricControllerResult
	err := ctx.Invoke("azure-native:managednetworkfabric/v20230201preview:getNetworkFabricController", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupNetworkFabricControllerArgs struct {
	// Name of the Network Fabric Controller
	NetworkFabricControllerName string `pulumi:"networkFabricControllerName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The NetworkFabricController resource definition.
type LookupNetworkFabricControllerResult struct {
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute)
	InfrastructureExpressRouteConnections []ExpressRouteConnectionInformationResponse `pulumi:"infrastructureExpressRouteConnections"`
	// InfrastructureServices IP ranges.
	InfrastructureServices InfrastructureServicesResponse `pulumi:"infrastructureServices"`
	// IPv4 Network Fabric Controller Address Space.
	Ipv4AddressSpace *string `pulumi:"ipv4AddressSpace"`
	// IPv6 Network Fabric Controller Address Space.
	Ipv6AddressSpace *string `pulumi:"ipv6AddressSpace"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Managed Resource Group configuration properties.
	ManagedResourceGroupConfiguration *ManagedResourceGroupConfigurationResponse `pulumi:"managedResourceGroupConfiguration"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
	NetworkFabricIds []string `pulumi:"networkFabricIds"`
	// The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status.
	OperationalState string `pulumi:"operationalState"`
	// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute).
	WorkloadExpressRouteConnections []ExpressRouteConnectionInformationResponse `pulumi:"workloadExpressRouteConnections"`
	// A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
	WorkloadManagementNetwork bool `pulumi:"workloadManagementNetwork"`
	// WorkloadServices IP ranges.
	WorkloadServices WorkloadServicesResponse `pulumi:"workloadServices"`
}

// Defaults sets the appropriate defaults for LookupNetworkFabricControllerResult
func (val *LookupNetworkFabricControllerResult) Defaults() *LookupNetworkFabricControllerResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.WorkloadManagementNetwork) {
		tmp.WorkloadManagementNetwork = true
	}
	return &tmp
}

func LookupNetworkFabricControllerOutput(ctx *pulumi.Context, args LookupNetworkFabricControllerOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkFabricControllerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkFabricControllerResult, error) {
			args := v.(LookupNetworkFabricControllerArgs)
			r, err := LookupNetworkFabricController(ctx, &args, opts...)
			var s LookupNetworkFabricControllerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkFabricControllerResultOutput)
}

type LookupNetworkFabricControllerOutputArgs struct {
	// Name of the Network Fabric Controller
	NetworkFabricControllerName pulumi.StringInput `pulumi:"networkFabricControllerName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupNetworkFabricControllerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkFabricControllerArgs)(nil)).Elem()
}

// The NetworkFabricController resource definition.
type LookupNetworkFabricControllerResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkFabricControllerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkFabricControllerResult)(nil)).Elem()
}

func (o LookupNetworkFabricControllerResultOutput) ToLookupNetworkFabricControllerResultOutput() LookupNetworkFabricControllerResultOutput {
	return o
}

func (o LookupNetworkFabricControllerResultOutput) ToLookupNetworkFabricControllerResultOutputWithContext(ctx context.Context) LookupNetworkFabricControllerResultOutput {
	return o
}

// Switch configuration description.
func (o LookupNetworkFabricControllerResultOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupNetworkFabricControllerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) string { return v.Id }).(pulumi.StringOutput)
}

// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute)
func (o LookupNetworkFabricControllerResultOutput) InfrastructureExpressRouteConnections() ExpressRouteConnectionInformationResponseArrayOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) []ExpressRouteConnectionInformationResponse {
		return v.InfrastructureExpressRouteConnections
	}).(ExpressRouteConnectionInformationResponseArrayOutput)
}

// InfrastructureServices IP ranges.
func (o LookupNetworkFabricControllerResultOutput) InfrastructureServices() InfrastructureServicesResponseOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) InfrastructureServicesResponse {
		return v.InfrastructureServices
	}).(InfrastructureServicesResponseOutput)
}

// IPv4 Network Fabric Controller Address Space.
func (o LookupNetworkFabricControllerResultOutput) Ipv4AddressSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) *string { return v.Ipv4AddressSpace }).(pulumi.StringPtrOutput)
}

// IPv6 Network Fabric Controller Address Space.
func (o LookupNetworkFabricControllerResultOutput) Ipv6AddressSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) *string { return v.Ipv6AddressSpace }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o LookupNetworkFabricControllerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) string { return v.Location }).(pulumi.StringOutput)
}

// Managed Resource Group configuration properties.
func (o LookupNetworkFabricControllerResultOutput) ManagedResourceGroupConfiguration() ManagedResourceGroupConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) *ManagedResourceGroupConfigurationResponse {
		return v.ManagedResourceGroupConfiguration
	}).(ManagedResourceGroupConfigurationResponsePtrOutput)
}

// The name of the resource
func (o LookupNetworkFabricControllerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) string { return v.Name }).(pulumi.StringOutput)
}

// The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
func (o LookupNetworkFabricControllerResultOutput) NetworkFabricIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) []string { return v.NetworkFabricIds }).(pulumi.StringArrayOutput)
}

// The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status.
func (o LookupNetworkFabricControllerResultOutput) OperationalState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) string { return v.OperationalState }).(pulumi.StringOutput)
}

// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
func (o LookupNetworkFabricControllerResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupNetworkFabricControllerResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupNetworkFabricControllerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupNetworkFabricControllerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) string { return v.Type }).(pulumi.StringOutput)
}

// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute).
func (o LookupNetworkFabricControllerResultOutput) WorkloadExpressRouteConnections() ExpressRouteConnectionInformationResponseArrayOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) []ExpressRouteConnectionInformationResponse {
		return v.WorkloadExpressRouteConnections
	}).(ExpressRouteConnectionInformationResponseArrayOutput)
}

// A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
func (o LookupNetworkFabricControllerResultOutput) WorkloadManagementNetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) bool { return v.WorkloadManagementNetwork }).(pulumi.BoolOutput)
}

// WorkloadServices IP ranges.
func (o LookupNetworkFabricControllerResultOutput) WorkloadServices() WorkloadServicesResponseOutput {
	return o.ApplyT(func(v LookupNetworkFabricControllerResult) WorkloadServicesResponse { return v.WorkloadServices }).(WorkloadServicesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkFabricControllerResultOutput{})
}
