// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230201preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The NetworkFabricController resource definition.
type NetworkFabricController struct {
	pulumi.CustomResourceState

	// Switch configuration description.
	Annotation pulumi.StringPtrOutput `pulumi:"annotation"`
	// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute)
	InfrastructureExpressRouteConnections ExpressRouteConnectionInformationResponseArrayOutput `pulumi:"infrastructureExpressRouteConnections"`
	// InfrastructureServices IP ranges.
	InfrastructureServices InfrastructureServicesResponseOutput `pulumi:"infrastructureServices"`
	// IPv4 Network Fabric Controller Address Space.
	Ipv4AddressSpace pulumi.StringPtrOutput `pulumi:"ipv4AddressSpace"`
	// IPv6 Network Fabric Controller Address Space.
	Ipv6AddressSpace pulumi.StringPtrOutput `pulumi:"ipv6AddressSpace"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Managed Resource Group configuration properties.
	ManagedResourceGroupConfiguration ManagedResourceGroupConfigurationResponsePtrOutput `pulumi:"managedResourceGroupConfiguration"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
	NetworkFabricIds pulumi.StringArrayOutput `pulumi:"networkFabricIds"`
	// The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status.
	OperationalState pulumi.StringOutput `pulumi:"operationalState"`
	// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute).
	WorkloadExpressRouteConnections ExpressRouteConnectionInformationResponseArrayOutput `pulumi:"workloadExpressRouteConnections"`
	// A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
	WorkloadManagementNetwork pulumi.BoolOutput `pulumi:"workloadManagementNetwork"`
	// WorkloadServices IP ranges.
	WorkloadServices WorkloadServicesResponseOutput `pulumi:"workloadServices"`
}

// NewNetworkFabricController registers a new resource with the given unique name, arguments, and options.
func NewNetworkFabricController(ctx *pulumi.Context,
	name string, args *NetworkFabricControllerArgs, opts ...pulumi.ResourceOption) (*NetworkFabricController, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:managednetworkfabric:NetworkFabricController"),
		},
	})
	opts = append(opts, aliases)
	var resource NetworkFabricController
	err := ctx.RegisterResource("azure-native:managednetworkfabric/v20230201preview:NetworkFabricController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkFabricController gets an existing NetworkFabricController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkFabricController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkFabricControllerState, opts ...pulumi.ResourceOption) (*NetworkFabricController, error) {
	var resource NetworkFabricController
	err := ctx.ReadResource("azure-native:managednetworkfabric/v20230201preview:NetworkFabricController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkFabricController resources.
type networkFabricControllerState struct {
}

type NetworkFabricControllerState struct {
}

func (NetworkFabricControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFabricControllerState)(nil)).Elem()
}

type networkFabricControllerArgs struct {
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute)
	InfrastructureExpressRouteConnections []ExpressRouteConnectionInformation `pulumi:"infrastructureExpressRouteConnections"`
	// IPv4 Network Fabric Controller Address Space.
	Ipv4AddressSpace *string `pulumi:"ipv4AddressSpace"`
	// IPv6 Network Fabric Controller Address Space.
	Ipv6AddressSpace *string `pulumi:"ipv6AddressSpace"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Managed Resource Group configuration properties.
	ManagedResourceGroupConfiguration *ManagedResourceGroupConfiguration `pulumi:"managedResourceGroupConfiguration"`
	// Name of the Network Fabric Controller
	NetworkFabricControllerName *string `pulumi:"networkFabricControllerName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute).
	WorkloadExpressRouteConnections []ExpressRouteConnectionInformation `pulumi:"workloadExpressRouteConnections"`
}

// The set of arguments for constructing a NetworkFabricController resource.
type NetworkFabricControllerArgs struct {
	// Switch configuration description.
	Annotation pulumi.StringPtrInput
	// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute)
	InfrastructureExpressRouteConnections ExpressRouteConnectionInformationArrayInput
	// IPv4 Network Fabric Controller Address Space.
	Ipv4AddressSpace pulumi.StringPtrInput
	// IPv6 Network Fabric Controller Address Space.
	Ipv6AddressSpace pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Managed Resource Group configuration properties.
	ManagedResourceGroupConfiguration ManagedResourceGroupConfigurationPtrInput
	// Name of the Network Fabric Controller
	NetworkFabricControllerName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute).
	WorkloadExpressRouteConnections ExpressRouteConnectionInformationArrayInput
}

func (NetworkFabricControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFabricControllerArgs)(nil)).Elem()
}

type NetworkFabricControllerInput interface {
	pulumi.Input

	ToNetworkFabricControllerOutput() NetworkFabricControllerOutput
	ToNetworkFabricControllerOutputWithContext(ctx context.Context) NetworkFabricControllerOutput
}

func (*NetworkFabricController) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFabricController)(nil)).Elem()
}

func (i *NetworkFabricController) ToNetworkFabricControllerOutput() NetworkFabricControllerOutput {
	return i.ToNetworkFabricControllerOutputWithContext(context.Background())
}

func (i *NetworkFabricController) ToNetworkFabricControllerOutputWithContext(ctx context.Context) NetworkFabricControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFabricControllerOutput)
}

type NetworkFabricControllerOutput struct{ *pulumi.OutputState }

func (NetworkFabricControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFabricController)(nil)).Elem()
}

func (o NetworkFabricControllerOutput) ToNetworkFabricControllerOutput() NetworkFabricControllerOutput {
	return o
}

func (o NetworkFabricControllerOutput) ToNetworkFabricControllerOutputWithContext(ctx context.Context) NetworkFabricControllerOutput {
	return o
}

// Switch configuration description.
func (o NetworkFabricControllerOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringPtrOutput { return v.Annotation }).(pulumi.StringPtrOutput)
}

// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute)
func (o NetworkFabricControllerOutput) InfrastructureExpressRouteConnections() ExpressRouteConnectionInformationResponseArrayOutput {
	return o.ApplyT(func(v *NetworkFabricController) ExpressRouteConnectionInformationResponseArrayOutput {
		return v.InfrastructureExpressRouteConnections
	}).(ExpressRouteConnectionInformationResponseArrayOutput)
}

// InfrastructureServices IP ranges.
func (o NetworkFabricControllerOutput) InfrastructureServices() InfrastructureServicesResponseOutput {
	return o.ApplyT(func(v *NetworkFabricController) InfrastructureServicesResponseOutput { return v.InfrastructureServices }).(InfrastructureServicesResponseOutput)
}

// IPv4 Network Fabric Controller Address Space.
func (o NetworkFabricControllerOutput) Ipv4AddressSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringPtrOutput { return v.Ipv4AddressSpace }).(pulumi.StringPtrOutput)
}

// IPv6 Network Fabric Controller Address Space.
func (o NetworkFabricControllerOutput) Ipv6AddressSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringPtrOutput { return v.Ipv6AddressSpace }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o NetworkFabricControllerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Managed Resource Group configuration properties.
func (o NetworkFabricControllerOutput) ManagedResourceGroupConfiguration() ManagedResourceGroupConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkFabricController) ManagedResourceGroupConfigurationResponsePtrOutput {
		return v.ManagedResourceGroupConfiguration
	}).(ManagedResourceGroupConfigurationResponsePtrOutput)
}

// The name of the resource
func (o NetworkFabricControllerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
func (o NetworkFabricControllerOutput) NetworkFabricIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringArrayOutput { return v.NetworkFabricIds }).(pulumi.StringArrayOutput)
}

// The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status.
func (o NetworkFabricControllerOutput) OperationalState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringOutput { return v.OperationalState }).(pulumi.StringOutput)
}

// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
func (o NetworkFabricControllerOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o NetworkFabricControllerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NetworkFabricController) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o NetworkFabricControllerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o NetworkFabricControllerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute).
func (o NetworkFabricControllerOutput) WorkloadExpressRouteConnections() ExpressRouteConnectionInformationResponseArrayOutput {
	return o.ApplyT(func(v *NetworkFabricController) ExpressRouteConnectionInformationResponseArrayOutput {
		return v.WorkloadExpressRouteConnections
	}).(ExpressRouteConnectionInformationResponseArrayOutput)
}

// A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
func (o NetworkFabricControllerOutput) WorkloadManagementNetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkFabricController) pulumi.BoolOutput { return v.WorkloadManagementNetwork }).(pulumi.BoolOutput)
}

// WorkloadServices IP ranges.
func (o NetworkFabricControllerOutput) WorkloadServices() WorkloadServicesResponseOutput {
	return o.ApplyT(func(v *NetworkFabricController) WorkloadServicesResponseOutput { return v.WorkloadServices }).(WorkloadServicesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkFabricControllerOutput{})
}
