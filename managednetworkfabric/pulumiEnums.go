// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managednetworkfabric

// Specify action.
type Action string

const (
	ActionAllow = Action("Allow")
	ActionDeny  = Action("Deny")
)

// IP address family. Example: ipv4 | ipv6.
type AddressFamily string

const (
	AddressFamilyIpv4 = AddressFamily("ipv4")
	AddressFamilyIpv6 = AddressFamily("ipv6")
)

// Enable Or Disable state.
type AllowASOverride string

const (
	AllowASOverrideEnable  = AllowASOverride("Enable")
	AllowASOverrideDisable = AllowASOverride("Disable")
)

// Based on this parameter the layer2/layer3 is made as mandatory. Example: True/False
type BooleanEnumProperty string

const (
	BooleanEnumPropertyTrue  = BooleanEnumProperty("True")
	BooleanEnumPropertyFalse = BooleanEnumProperty("False")
)

// action. Example: Permit | Deny.
type CommunityActionTypes string

const (
	CommunityActionTypesPermit = CommunityActionTypes("Permit")
	CommunityActionTypesDeny   = CommunityActionTypes("Deny")
)

// Specify prefix-list bounds.
type Condition string

const (
	ConditionEqualTo              = Condition("EqualTo")
	ConditionGreaterThanOrEqualTo = Condition("GreaterThanOrEqualTo")
	ConditionLesserThanOrEqualTo  = Condition("LesserThanOrEqualTo")
)

// action. Example: allow | deny.
type ConditionActionType string

const (
	ConditionActionTypeAllow = ConditionActionType("allow")
	ConditionActionTypeDeny  = ConditionActionType("deny")
)

// Input method to configure Network Tap Rule.
type ConfigurationType string

const (
	ConfigurationTypeFile   = ConfigurationType("File")
	ConfigurationTypeInline = ConfigurationType("Inline")
)

// Type of destination. Input can be IsolationDomain or Direct.
type DestinationType string

const (
	DestinationTypeIsolationDomain = DestinationType("IsolationDomain")
	DestinationTypeDirect          = DestinationType("Direct")
)

// Type of encapsulation.
type Encapsulation string

const (
	EncapsulationNone = Encapsulation("None")
	EncapsulationGRE  = Encapsulation("GRE")
)

// Encapsulation Type.
type EncapsulationType string

const (
	EncapsulationTypeNone  = EncapsulationType("None")
	EncapsulationTypeGTPv1 = EncapsulationType("GTPv1")
)

// Gateway Type of the resource.
type GatewayType string

const (
	GatewayTypeInfrastructure = GatewayType("Infrastructure")
	GatewayTypeWorkload       = GatewayType("Workload")
)

// Type of IP Address. IPv4 or IPv6
type IPAddressType string

const (
	IPAddressTypeIPv4 = IPAddressType("IPv4")
	IPAddressTypeIPv6 = IPAddressType("IPv6")
)

// Layer4 protocol type that needs to be matched.
type Layer4Protocol string

const (
	Layer4ProtocolTCP = Layer4Protocol("TCP")
	Layer4ProtocolUDP = Layer4Protocol("UDP")
)

// networkDeviceRole is the device role: Example: CE | ToR.
type NetworkDeviceRoleTypes string

const (
	NetworkDeviceRoleTypesCE         = NetworkDeviceRoleTypes("CE")
	NetworkDeviceRoleTypesToR        = NetworkDeviceRoleTypes("ToR")
	NetworkDeviceRoleTypesNPB        = NetworkDeviceRoleTypes("NPB")
	NetworkDeviceRoleTypesTS         = NetworkDeviceRoleTypes("TS")
	NetworkDeviceRoleTypesManagement = NetworkDeviceRoleTypes("Management")
)

// Type of NNI used. Example: CE | NPB
type NniType string

const (
	NniTypeCE  = NniType("CE")
	NniTypeNPB = NniType("NPB")
)

// Peering option list.
type PeeringOption string

const (
	PeeringOptionOptionA = PeeringOption("OptionA")
	PeeringOptionOptionB = PeeringOption("OptionB")
)

// Polling type.
type PollingType string

const (
	PollingTypePull = PollingType("Pull")
	PollingTypePush = PollingType("Push")
)

// Port type that needs to be matched.
type PortType string

const (
	PortTypeSourcePort      = PortType("SourcePort")
	PortTypeDestinationPort = PortType("DestinationPort")
)

// IP Prefix Type.
type PrefixType string

const (
	PrefixTypePrefix        = PrefixType("Prefix")
	PrefixTypeLongestPrefix = PrefixType("LongestPrefix")
)

// Advertise Connected Subnets. Ex: "True" | "False".
type RedistributeConnectedSubnets string

const (
	RedistributeConnectedSubnetsTrue  = RedistributeConnectedSubnets("True")
	RedistributeConnectedSubnetsFalse = RedistributeConnectedSubnets("False")
)

// Advertise Static Routes. Ex: "True" | "False".
type RedistributeStaticRoutes string

const (
	RedistributeStaticRoutesTrue  = RedistributeStaticRoutes("True")
	RedistributeStaticRoutesFalse = RedistributeStaticRoutes("False")
)

// IP Address type.
type SourceDestinationType string

const (
	SourceDestinationTypeSourceIP      = SourceDestinationType("SourceIP")
	SourceDestinationTypeDestinationIP = SourceDestinationType("DestinationIP")
)

// Type of actions that can be performed.
type TapRuleActionType string

const (
	TapRuleActionTypeDrop      = TapRuleActionType("Drop")
	TapRuleActionTypeCount     = TapRuleActionType("Count")
	TapRuleActionTypeLog       = TapRuleActionType("Log")
	TapRuleActionTypeReplicate = TapRuleActionType("Replicate")
	TapRuleActionTypeGoto      = TapRuleActionType("Goto")
	TapRuleActionTypeRedirect  = TapRuleActionType("Redirect")
	TapRuleActionTypeMirror    = TapRuleActionType("Mirror")
)

// `Internet` - Advertise routes to internet community.
//
//	`LocalAS` - Advertise routes to only localAS peers.
//	`NoAdvertise` - Don't advertise routes to any peer.
//
// `NoExport` - Don't export to next AS.
// `GShut` - Graceful Shutdown (GSHUT) withdraw routes before terminating BGP connection.
type WellKnownCommunities string

const (
	WellKnownCommunitiesInternet    = WellKnownCommunities("Internet")
	WellKnownCommunitiesLocalAS     = WellKnownCommunities("LocalAS")
	WellKnownCommunitiesNoAdvertise = WellKnownCommunities("NoAdvertise")
	WellKnownCommunitiesNoExport    = WellKnownCommunities("NoExport")
	WellKnownCommunitiesGShut       = WellKnownCommunities("GShut")
)

func init() {
}
