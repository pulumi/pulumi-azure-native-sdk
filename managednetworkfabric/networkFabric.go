// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managednetworkfabric

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The NetworkFabric resource definition.
// Azure REST API version: 2023-02-01-preview. Prior API version in Azure Native 1.x: 2023-02-01-preview
type NetworkFabric struct {
	pulumi.CustomResourceState

	// Switch configuration description.
	Annotation pulumi.StringPtrOutput `pulumi:"annotation"`
	// ASN of CE devices for CE/PE connectivity.
	FabricASN pulumi.IntOutput `pulumi:"fabricASN"`
	// IPv4Prefix for Management Network. Example: 10.1.0.0/19.
	Ipv4Prefix pulumi.StringPtrOutput `pulumi:"ipv4Prefix"`
	// IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
	Ipv6Prefix pulumi.StringPtrOutput `pulumi:"ipv6Prefix"`
	// List of L2IsolationDomain resource IDs under the Network Fabric.
	L2IsolationDomains pulumi.StringArrayOutput `pulumi:"l2IsolationDomains"`
	// List of L3IsolationDomain resource IDs under the Network Fabric.
	L3IsolationDomains pulumi.StringArrayOutput `pulumi:"l3IsolationDomains"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Configuration to be used to setup the management network.
	ManagementNetworkConfiguration ManagementNetworkConfigurationResponseOutput `pulumi:"managementNetworkConfiguration"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
	NetworkFabricControllerId pulumi.StringOutput `pulumi:"networkFabricControllerId"`
	// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
	NetworkFabricSku pulumi.StringOutput `pulumi:"networkFabricSku"`
	// Gets the operational state of the resource.
	OperationalState pulumi.StringOutput `pulumi:"operationalState"`
	// Gets the provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Number of racks associated to Network Fabric.Possible values are from 2-8.
	RackCount pulumi.IntOutput `pulumi:"rackCount"`
	// List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
	Racks pulumi.StringArrayOutput `pulumi:"racks"`
	// Router Id of CE to be used for MP-BGP between PE and CE
	RouterId pulumi.StringOutput `pulumi:"routerId"`
	// Number of servers.Possible values are from 1-16.
	ServerCountPerRack pulumi.IntOutput `pulumi:"serverCountPerRack"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Network and credentials configuration currently applied to terminal server.
	TerminalServerConfiguration TerminalServerConfigurationResponseOutput `pulumi:"terminalServerConfiguration"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNetworkFabric registers a new resource with the given unique name, arguments, and options.
func NewNetworkFabric(ctx *pulumi.Context,
	name string, args *NetworkFabricArgs, opts ...pulumi.ResourceOption) (*NetworkFabric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FabricASN == nil {
		return nil, errors.New("invalid value for required argument 'FabricASN'")
	}
	if args.ManagementNetworkConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ManagementNetworkConfiguration'")
	}
	if args.NetworkFabricControllerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkFabricControllerId'")
	}
	if args.NetworkFabricSku == nil {
		return nil, errors.New("invalid value for required argument 'NetworkFabricSku'")
	}
	if args.RackCount == nil {
		return nil, errors.New("invalid value for required argument 'RackCount'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerCountPerRack == nil {
		return nil, errors.New("invalid value for required argument 'ServerCountPerRack'")
	}
	if args.TerminalServerConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'TerminalServerConfiguration'")
	}
	args.ManagementNetworkConfiguration = args.ManagementNetworkConfiguration.ToManagementNetworkConfigurationOutput().ApplyT(func(v ManagementNetworkConfiguration) ManagementNetworkConfiguration { return *v.Defaults() }).(ManagementNetworkConfigurationOutput)
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:managednetworkfabric/v20230201preview:NetworkFabric"),
		},
	})
	opts = append(opts, aliases)
	var resource NetworkFabric
	err := ctx.RegisterResource("azure-native:managednetworkfabric:NetworkFabric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkFabric gets an existing NetworkFabric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkFabric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkFabricState, opts ...pulumi.ResourceOption) (*NetworkFabric, error) {
	var resource NetworkFabric
	err := ctx.ReadResource("azure-native:managednetworkfabric:NetworkFabric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkFabric resources.
type networkFabricState struct {
}

type NetworkFabricState struct {
}

func (NetworkFabricState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFabricState)(nil)).Elem()
}

type networkFabricArgs struct {
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// ASN of CE devices for CE/PE connectivity.
	FabricASN int `pulumi:"fabricASN"`
	// IPv4Prefix for Management Network. Example: 10.1.0.0/19.
	Ipv4Prefix *string `pulumi:"ipv4Prefix"`
	// IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
	Ipv6Prefix *string `pulumi:"ipv6Prefix"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Configuration to be used to setup the management network.
	ManagementNetworkConfiguration ManagementNetworkConfiguration `pulumi:"managementNetworkConfiguration"`
	// Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
	NetworkFabricControllerId string `pulumi:"networkFabricControllerId"`
	// Name of the Network Fabric
	NetworkFabricName *string `pulumi:"networkFabricName"`
	// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
	NetworkFabricSku string `pulumi:"networkFabricSku"`
	// Number of racks associated to Network Fabric.Possible values are from 2-8.
	RackCount int `pulumi:"rackCount"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Number of servers.Possible values are from 1-16.
	ServerCountPerRack int `pulumi:"serverCountPerRack"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Network and credentials configuration currently applied to terminal server.
	TerminalServerConfiguration TerminalServerConfiguration `pulumi:"terminalServerConfiguration"`
}

// The set of arguments for constructing a NetworkFabric resource.
type NetworkFabricArgs struct {
	// Switch configuration description.
	Annotation pulumi.StringPtrInput
	// ASN of CE devices for CE/PE connectivity.
	FabricASN pulumi.IntInput
	// IPv4Prefix for Management Network. Example: 10.1.0.0/19.
	Ipv4Prefix pulumi.StringPtrInput
	// IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
	Ipv6Prefix pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Configuration to be used to setup the management network.
	ManagementNetworkConfiguration ManagementNetworkConfigurationInput
	// Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
	NetworkFabricControllerId pulumi.StringInput
	// Name of the Network Fabric
	NetworkFabricName pulumi.StringPtrInput
	// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
	NetworkFabricSku pulumi.StringInput
	// Number of racks associated to Network Fabric.Possible values are from 2-8.
	RackCount pulumi.IntInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Number of servers.Possible values are from 1-16.
	ServerCountPerRack pulumi.IntInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Network and credentials configuration currently applied to terminal server.
	TerminalServerConfiguration TerminalServerConfigurationInput
}

func (NetworkFabricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFabricArgs)(nil)).Elem()
}

type NetworkFabricInput interface {
	pulumi.Input

	ToNetworkFabricOutput() NetworkFabricOutput
	ToNetworkFabricOutputWithContext(ctx context.Context) NetworkFabricOutput
}

func (*NetworkFabric) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFabric)(nil)).Elem()
}

func (i *NetworkFabric) ToNetworkFabricOutput() NetworkFabricOutput {
	return i.ToNetworkFabricOutputWithContext(context.Background())
}

func (i *NetworkFabric) ToNetworkFabricOutputWithContext(ctx context.Context) NetworkFabricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFabricOutput)
}

type NetworkFabricOutput struct{ *pulumi.OutputState }

func (NetworkFabricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFabric)(nil)).Elem()
}

func (o NetworkFabricOutput) ToNetworkFabricOutput() NetworkFabricOutput {
	return o
}

func (o NetworkFabricOutput) ToNetworkFabricOutputWithContext(ctx context.Context) NetworkFabricOutput {
	return o
}

// Switch configuration description.
func (o NetworkFabricOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringPtrOutput { return v.Annotation }).(pulumi.StringPtrOutput)
}

// ASN of CE devices for CE/PE connectivity.
func (o NetworkFabricOutput) FabricASN() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.IntOutput { return v.FabricASN }).(pulumi.IntOutput)
}

// IPv4Prefix for Management Network. Example: 10.1.0.0/19.
func (o NetworkFabricOutput) Ipv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringPtrOutput { return v.Ipv4Prefix }).(pulumi.StringPtrOutput)
}

// IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
func (o NetworkFabricOutput) Ipv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringPtrOutput { return v.Ipv6Prefix }).(pulumi.StringPtrOutput)
}

// List of L2IsolationDomain resource IDs under the Network Fabric.
func (o NetworkFabricOutput) L2IsolationDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringArrayOutput { return v.L2IsolationDomains }).(pulumi.StringArrayOutput)
}

// List of L3IsolationDomain resource IDs under the Network Fabric.
func (o NetworkFabricOutput) L3IsolationDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringArrayOutput { return v.L3IsolationDomains }).(pulumi.StringArrayOutput)
}

// The geo-location where the resource lives
func (o NetworkFabricOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Configuration to be used to setup the management network.
func (o NetworkFabricOutput) ManagementNetworkConfiguration() ManagementNetworkConfigurationResponseOutput {
	return o.ApplyT(func(v *NetworkFabric) ManagementNetworkConfigurationResponseOutput {
		return v.ManagementNetworkConfiguration
	}).(ManagementNetworkConfigurationResponseOutput)
}

// The name of the resource
func (o NetworkFabricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
func (o NetworkFabricOutput) NetworkFabricControllerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.NetworkFabricControllerId }).(pulumi.StringOutput)
}

// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
func (o NetworkFabricOutput) NetworkFabricSku() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.NetworkFabricSku }).(pulumi.StringOutput)
}

// Gets the operational state of the resource.
func (o NetworkFabricOutput) OperationalState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.OperationalState }).(pulumi.StringOutput)
}

// Gets the provisioning state of the resource.
func (o NetworkFabricOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Number of racks associated to Network Fabric.Possible values are from 2-8.
func (o NetworkFabricOutput) RackCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.IntOutput { return v.RackCount }).(pulumi.IntOutput)
}

// List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
func (o NetworkFabricOutput) Racks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringArrayOutput { return v.Racks }).(pulumi.StringArrayOutput)
}

// Router Id of CE to be used for MP-BGP between PE and CE
func (o NetworkFabricOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

// Number of servers.Possible values are from 1-16.
func (o NetworkFabricOutput) ServerCountPerRack() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.IntOutput { return v.ServerCountPerRack }).(pulumi.IntOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o NetworkFabricOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NetworkFabric) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o NetworkFabricOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Network and credentials configuration currently applied to terminal server.
func (o NetworkFabricOutput) TerminalServerConfiguration() TerminalServerConfigurationResponseOutput {
	return o.ApplyT(func(v *NetworkFabric) TerminalServerConfigurationResponseOutput { return v.TerminalServerConfiguration }).(TerminalServerConfigurationResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o NetworkFabricOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFabric) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkFabricOutput{})
}
