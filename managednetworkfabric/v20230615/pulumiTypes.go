// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230615

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Action that need to performed.
type AccessControlListAction struct {
	// Name of the counter block to get match count information.
	CounterName *string `pulumi:"counterName"`
	// Type of actions that can be performed.
	Type *string `pulumi:"type"`
}

// AccessControlListActionInput is an input type that accepts AccessControlListActionArgs and AccessControlListActionOutput values.
// You can construct a concrete instance of `AccessControlListActionInput` via:
//
//	AccessControlListActionArgs{...}
type AccessControlListActionInput interface {
	pulumi.Input

	ToAccessControlListActionOutput() AccessControlListActionOutput
	ToAccessControlListActionOutputWithContext(context.Context) AccessControlListActionOutput
}

// Action that need to performed.
type AccessControlListActionArgs struct {
	// Name of the counter block to get match count information.
	CounterName pulumi.StringPtrInput `pulumi:"counterName"`
	// Type of actions that can be performed.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AccessControlListActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListAction)(nil)).Elem()
}

func (i AccessControlListActionArgs) ToAccessControlListActionOutput() AccessControlListActionOutput {
	return i.ToAccessControlListActionOutputWithContext(context.Background())
}

func (i AccessControlListActionArgs) ToAccessControlListActionOutputWithContext(ctx context.Context) AccessControlListActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListActionOutput)
}

// AccessControlListActionArrayInput is an input type that accepts AccessControlListActionArray and AccessControlListActionArrayOutput values.
// You can construct a concrete instance of `AccessControlListActionArrayInput` via:
//
//	AccessControlListActionArray{ AccessControlListActionArgs{...} }
type AccessControlListActionArrayInput interface {
	pulumi.Input

	ToAccessControlListActionArrayOutput() AccessControlListActionArrayOutput
	ToAccessControlListActionArrayOutputWithContext(context.Context) AccessControlListActionArrayOutput
}

type AccessControlListActionArray []AccessControlListActionInput

func (AccessControlListActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListAction)(nil)).Elem()
}

func (i AccessControlListActionArray) ToAccessControlListActionArrayOutput() AccessControlListActionArrayOutput {
	return i.ToAccessControlListActionArrayOutputWithContext(context.Background())
}

func (i AccessControlListActionArray) ToAccessControlListActionArrayOutputWithContext(ctx context.Context) AccessControlListActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListActionArrayOutput)
}

// Action that need to performed.
type AccessControlListActionOutput struct{ *pulumi.OutputState }

func (AccessControlListActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListAction)(nil)).Elem()
}

func (o AccessControlListActionOutput) ToAccessControlListActionOutput() AccessControlListActionOutput {
	return o
}

func (o AccessControlListActionOutput) ToAccessControlListActionOutputWithContext(ctx context.Context) AccessControlListActionOutput {
	return o
}

// Name of the counter block to get match count information.
func (o AccessControlListActionOutput) CounterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListAction) *string { return v.CounterName }).(pulumi.StringPtrOutput)
}

// Type of actions that can be performed.
func (o AccessControlListActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListAction) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AccessControlListActionArrayOutput struct{ *pulumi.OutputState }

func (AccessControlListActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListAction)(nil)).Elem()
}

func (o AccessControlListActionArrayOutput) ToAccessControlListActionArrayOutput() AccessControlListActionArrayOutput {
	return o
}

func (o AccessControlListActionArrayOutput) ToAccessControlListActionArrayOutputWithContext(ctx context.Context) AccessControlListActionArrayOutput {
	return o
}

func (o AccessControlListActionArrayOutput) Index(i pulumi.IntInput) AccessControlListActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlListAction {
		return vs[0].([]AccessControlListAction)[vs[1].(int)]
	}).(AccessControlListActionOutput)
}

// Action that need to performed.
type AccessControlListActionResponse struct {
	// Name of the counter block to get match count information.
	CounterName *string `pulumi:"counterName"`
	// Type of actions that can be performed.
	Type *string `pulumi:"type"`
}

// Action that need to performed.
type AccessControlListActionResponseOutput struct{ *pulumi.OutputState }

func (AccessControlListActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListActionResponse)(nil)).Elem()
}

func (o AccessControlListActionResponseOutput) ToAccessControlListActionResponseOutput() AccessControlListActionResponseOutput {
	return o
}

func (o AccessControlListActionResponseOutput) ToAccessControlListActionResponseOutputWithContext(ctx context.Context) AccessControlListActionResponseOutput {
	return o
}

// Name of the counter block to get match count information.
func (o AccessControlListActionResponseOutput) CounterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListActionResponse) *string { return v.CounterName }).(pulumi.StringPtrOutput)
}

// Type of actions that can be performed.
func (o AccessControlListActionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListActionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AccessControlListActionResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessControlListActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListActionResponse)(nil)).Elem()
}

func (o AccessControlListActionResponseArrayOutput) ToAccessControlListActionResponseArrayOutput() AccessControlListActionResponseArrayOutput {
	return o
}

func (o AccessControlListActionResponseArrayOutput) ToAccessControlListActionResponseArrayOutputWithContext(ctx context.Context) AccessControlListActionResponseArrayOutput {
	return o
}

func (o AccessControlListActionResponseArrayOutput) Index(i pulumi.IntInput) AccessControlListActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlListActionResponse {
		return vs[0].([]AccessControlListActionResponse)[vs[1].(int)]
	}).(AccessControlListActionResponseOutput)
}

// Defines the match condition that is supported to filter the traffic.
type AccessControlListMatchCondition struct {
	// List of DSCP Markings that need to be matched.
	DscpMarkings []string `pulumi:"dscpMarkings"`
	// List of ether type values that need to be matched.
	EtherTypes []string `pulumi:"etherTypes"`
	// List of IP fragment packets that need to be matched.
	Fragments []string `pulumi:"fragments"`
	// IP condition that needs to be matched.
	IpCondition *IpMatchCondition `pulumi:"ipCondition"`
	// List of IP Lengths that need to be matched.
	IpLengths []string `pulumi:"ipLengths"`
	// Defines the port condition that needs to be matched.
	PortCondition *AccessControlListPortCondition `pulumi:"portCondition"`
	// List of the protocols that need to be matched.
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// List of TTL [Time To Live] values that need to be matched.
	TtlValues []string `pulumi:"ttlValues"`
	// Vlan match condition that needs to be matched.
	VlanMatchCondition *VlanMatchCondition `pulumi:"vlanMatchCondition"`
}

// AccessControlListMatchConditionInput is an input type that accepts AccessControlListMatchConditionArgs and AccessControlListMatchConditionOutput values.
// You can construct a concrete instance of `AccessControlListMatchConditionInput` via:
//
//	AccessControlListMatchConditionArgs{...}
type AccessControlListMatchConditionInput interface {
	pulumi.Input

	ToAccessControlListMatchConditionOutput() AccessControlListMatchConditionOutput
	ToAccessControlListMatchConditionOutputWithContext(context.Context) AccessControlListMatchConditionOutput
}

// Defines the match condition that is supported to filter the traffic.
type AccessControlListMatchConditionArgs struct {
	// List of DSCP Markings that need to be matched.
	DscpMarkings pulumi.StringArrayInput `pulumi:"dscpMarkings"`
	// List of ether type values that need to be matched.
	EtherTypes pulumi.StringArrayInput `pulumi:"etherTypes"`
	// List of IP fragment packets that need to be matched.
	Fragments pulumi.StringArrayInput `pulumi:"fragments"`
	// IP condition that needs to be matched.
	IpCondition IpMatchConditionPtrInput `pulumi:"ipCondition"`
	// List of IP Lengths that need to be matched.
	IpLengths pulumi.StringArrayInput `pulumi:"ipLengths"`
	// Defines the port condition that needs to be matched.
	PortCondition AccessControlListPortConditionPtrInput `pulumi:"portCondition"`
	// List of the protocols that need to be matched.
	ProtocolTypes pulumi.StringArrayInput `pulumi:"protocolTypes"`
	// List of TTL [Time To Live] values that need to be matched.
	TtlValues pulumi.StringArrayInput `pulumi:"ttlValues"`
	// Vlan match condition that needs to be matched.
	VlanMatchCondition VlanMatchConditionPtrInput `pulumi:"vlanMatchCondition"`
}

func (AccessControlListMatchConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListMatchCondition)(nil)).Elem()
}

func (i AccessControlListMatchConditionArgs) ToAccessControlListMatchConditionOutput() AccessControlListMatchConditionOutput {
	return i.ToAccessControlListMatchConditionOutputWithContext(context.Background())
}

func (i AccessControlListMatchConditionArgs) ToAccessControlListMatchConditionOutputWithContext(ctx context.Context) AccessControlListMatchConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListMatchConditionOutput)
}

// AccessControlListMatchConditionArrayInput is an input type that accepts AccessControlListMatchConditionArray and AccessControlListMatchConditionArrayOutput values.
// You can construct a concrete instance of `AccessControlListMatchConditionArrayInput` via:
//
//	AccessControlListMatchConditionArray{ AccessControlListMatchConditionArgs{...} }
type AccessControlListMatchConditionArrayInput interface {
	pulumi.Input

	ToAccessControlListMatchConditionArrayOutput() AccessControlListMatchConditionArrayOutput
	ToAccessControlListMatchConditionArrayOutputWithContext(context.Context) AccessControlListMatchConditionArrayOutput
}

type AccessControlListMatchConditionArray []AccessControlListMatchConditionInput

func (AccessControlListMatchConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListMatchCondition)(nil)).Elem()
}

func (i AccessControlListMatchConditionArray) ToAccessControlListMatchConditionArrayOutput() AccessControlListMatchConditionArrayOutput {
	return i.ToAccessControlListMatchConditionArrayOutputWithContext(context.Background())
}

func (i AccessControlListMatchConditionArray) ToAccessControlListMatchConditionArrayOutputWithContext(ctx context.Context) AccessControlListMatchConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListMatchConditionArrayOutput)
}

// Defines the match condition that is supported to filter the traffic.
type AccessControlListMatchConditionOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListMatchCondition)(nil)).Elem()
}

func (o AccessControlListMatchConditionOutput) ToAccessControlListMatchConditionOutput() AccessControlListMatchConditionOutput {
	return o
}

func (o AccessControlListMatchConditionOutput) ToAccessControlListMatchConditionOutputWithContext(ctx context.Context) AccessControlListMatchConditionOutput {
	return o
}

// List of DSCP Markings that need to be matched.
func (o AccessControlListMatchConditionOutput) DscpMarkings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) []string { return v.DscpMarkings }).(pulumi.StringArrayOutput)
}

// List of ether type values that need to be matched.
func (o AccessControlListMatchConditionOutput) EtherTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) []string { return v.EtherTypes }).(pulumi.StringArrayOutput)
}

// List of IP fragment packets that need to be matched.
func (o AccessControlListMatchConditionOutput) Fragments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) []string { return v.Fragments }).(pulumi.StringArrayOutput)
}

// IP condition that needs to be matched.
func (o AccessControlListMatchConditionOutput) IpCondition() IpMatchConditionPtrOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) *IpMatchCondition { return v.IpCondition }).(IpMatchConditionPtrOutput)
}

// List of IP Lengths that need to be matched.
func (o AccessControlListMatchConditionOutput) IpLengths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) []string { return v.IpLengths }).(pulumi.StringArrayOutput)
}

// Defines the port condition that needs to be matched.
func (o AccessControlListMatchConditionOutput) PortCondition() AccessControlListPortConditionPtrOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) *AccessControlListPortCondition { return v.PortCondition }).(AccessControlListPortConditionPtrOutput)
}

// List of the protocols that need to be matched.
func (o AccessControlListMatchConditionOutput) ProtocolTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) []string { return v.ProtocolTypes }).(pulumi.StringArrayOutput)
}

// List of TTL [Time To Live] values that need to be matched.
func (o AccessControlListMatchConditionOutput) TtlValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) []string { return v.TtlValues }).(pulumi.StringArrayOutput)
}

// Vlan match condition that needs to be matched.
func (o AccessControlListMatchConditionOutput) VlanMatchCondition() VlanMatchConditionPtrOutput {
	return o.ApplyT(func(v AccessControlListMatchCondition) *VlanMatchCondition { return v.VlanMatchCondition }).(VlanMatchConditionPtrOutput)
}

type AccessControlListMatchConditionArrayOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListMatchCondition)(nil)).Elem()
}

func (o AccessControlListMatchConditionArrayOutput) ToAccessControlListMatchConditionArrayOutput() AccessControlListMatchConditionArrayOutput {
	return o
}

func (o AccessControlListMatchConditionArrayOutput) ToAccessControlListMatchConditionArrayOutputWithContext(ctx context.Context) AccessControlListMatchConditionArrayOutput {
	return o
}

func (o AccessControlListMatchConditionArrayOutput) Index(i pulumi.IntInput) AccessControlListMatchConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlListMatchCondition {
		return vs[0].([]AccessControlListMatchCondition)[vs[1].(int)]
	}).(AccessControlListMatchConditionOutput)
}

// Defines the match condition that is supported to filter the traffic.
type AccessControlListMatchConditionResponse struct {
	// List of DSCP Markings that need to be matched.
	DscpMarkings []string `pulumi:"dscpMarkings"`
	// List of ether type values that need to be matched.
	EtherTypes []string `pulumi:"etherTypes"`
	// List of IP fragment packets that need to be matched.
	Fragments []string `pulumi:"fragments"`
	// IP condition that needs to be matched.
	IpCondition *IpMatchConditionResponse `pulumi:"ipCondition"`
	// List of IP Lengths that need to be matched.
	IpLengths []string `pulumi:"ipLengths"`
	// Defines the port condition that needs to be matched.
	PortCondition *AccessControlListPortConditionResponse `pulumi:"portCondition"`
	// List of the protocols that need to be matched.
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// List of TTL [Time To Live] values that need to be matched.
	TtlValues []string `pulumi:"ttlValues"`
	// Vlan match condition that needs to be matched.
	VlanMatchCondition *VlanMatchConditionResponse `pulumi:"vlanMatchCondition"`
}

// Defines the match condition that is supported to filter the traffic.
type AccessControlListMatchConditionResponseOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListMatchConditionResponse)(nil)).Elem()
}

func (o AccessControlListMatchConditionResponseOutput) ToAccessControlListMatchConditionResponseOutput() AccessControlListMatchConditionResponseOutput {
	return o
}

func (o AccessControlListMatchConditionResponseOutput) ToAccessControlListMatchConditionResponseOutputWithContext(ctx context.Context) AccessControlListMatchConditionResponseOutput {
	return o
}

// List of DSCP Markings that need to be matched.
func (o AccessControlListMatchConditionResponseOutput) DscpMarkings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) []string { return v.DscpMarkings }).(pulumi.StringArrayOutput)
}

// List of ether type values that need to be matched.
func (o AccessControlListMatchConditionResponseOutput) EtherTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) []string { return v.EtherTypes }).(pulumi.StringArrayOutput)
}

// List of IP fragment packets that need to be matched.
func (o AccessControlListMatchConditionResponseOutput) Fragments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) []string { return v.Fragments }).(pulumi.StringArrayOutput)
}

// IP condition that needs to be matched.
func (o AccessControlListMatchConditionResponseOutput) IpCondition() IpMatchConditionResponsePtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) *IpMatchConditionResponse { return v.IpCondition }).(IpMatchConditionResponsePtrOutput)
}

// List of IP Lengths that need to be matched.
func (o AccessControlListMatchConditionResponseOutput) IpLengths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) []string { return v.IpLengths }).(pulumi.StringArrayOutput)
}

// Defines the port condition that needs to be matched.
func (o AccessControlListMatchConditionResponseOutput) PortCondition() AccessControlListPortConditionResponsePtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) *AccessControlListPortConditionResponse {
		return v.PortCondition
	}).(AccessControlListPortConditionResponsePtrOutput)
}

// List of the protocols that need to be matched.
func (o AccessControlListMatchConditionResponseOutput) ProtocolTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) []string { return v.ProtocolTypes }).(pulumi.StringArrayOutput)
}

// List of TTL [Time To Live] values that need to be matched.
func (o AccessControlListMatchConditionResponseOutput) TtlValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) []string { return v.TtlValues }).(pulumi.StringArrayOutput)
}

// Vlan match condition that needs to be matched.
func (o AccessControlListMatchConditionResponseOutput) VlanMatchCondition() VlanMatchConditionResponsePtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConditionResponse) *VlanMatchConditionResponse {
		return v.VlanMatchCondition
	}).(VlanMatchConditionResponsePtrOutput)
}

type AccessControlListMatchConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListMatchConditionResponse)(nil)).Elem()
}

func (o AccessControlListMatchConditionResponseArrayOutput) ToAccessControlListMatchConditionResponseArrayOutput() AccessControlListMatchConditionResponseArrayOutput {
	return o
}

func (o AccessControlListMatchConditionResponseArrayOutput) ToAccessControlListMatchConditionResponseArrayOutputWithContext(ctx context.Context) AccessControlListMatchConditionResponseArrayOutput {
	return o
}

func (o AccessControlListMatchConditionResponseArrayOutput) Index(i pulumi.IntInput) AccessControlListMatchConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlListMatchConditionResponse {
		return vs[0].([]AccessControlListMatchConditionResponse)[vs[1].(int)]
	}).(AccessControlListMatchConditionResponseOutput)
}

// Defines the match configuration that are supported to filter the traffic.
type AccessControlListMatchConfiguration struct {
	// List of actions that need to be performed for the matched conditions.
	Actions []AccessControlListAction `pulumi:"actions"`
	// Type of IP Address. IPv4 or IPv6
	IpAddressType *string `pulumi:"ipAddressType"`
	// List of the match conditions.
	MatchConditions []AccessControlListMatchCondition `pulumi:"matchConditions"`
	// The name of the match configuration.
	MatchConfigurationName *string `pulumi:"matchConfigurationName"`
	// Sequence Number of the match configuration.
	SequenceNumber *float64 `pulumi:"sequenceNumber"`
}

// AccessControlListMatchConfigurationInput is an input type that accepts AccessControlListMatchConfigurationArgs and AccessControlListMatchConfigurationOutput values.
// You can construct a concrete instance of `AccessControlListMatchConfigurationInput` via:
//
//	AccessControlListMatchConfigurationArgs{...}
type AccessControlListMatchConfigurationInput interface {
	pulumi.Input

	ToAccessControlListMatchConfigurationOutput() AccessControlListMatchConfigurationOutput
	ToAccessControlListMatchConfigurationOutputWithContext(context.Context) AccessControlListMatchConfigurationOutput
}

// Defines the match configuration that are supported to filter the traffic.
type AccessControlListMatchConfigurationArgs struct {
	// List of actions that need to be performed for the matched conditions.
	Actions AccessControlListActionArrayInput `pulumi:"actions"`
	// Type of IP Address. IPv4 or IPv6
	IpAddressType pulumi.StringPtrInput `pulumi:"ipAddressType"`
	// List of the match conditions.
	MatchConditions AccessControlListMatchConditionArrayInput `pulumi:"matchConditions"`
	// The name of the match configuration.
	MatchConfigurationName pulumi.StringPtrInput `pulumi:"matchConfigurationName"`
	// Sequence Number of the match configuration.
	SequenceNumber pulumi.Float64PtrInput `pulumi:"sequenceNumber"`
}

func (AccessControlListMatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListMatchConfiguration)(nil)).Elem()
}

func (i AccessControlListMatchConfigurationArgs) ToAccessControlListMatchConfigurationOutput() AccessControlListMatchConfigurationOutput {
	return i.ToAccessControlListMatchConfigurationOutputWithContext(context.Background())
}

func (i AccessControlListMatchConfigurationArgs) ToAccessControlListMatchConfigurationOutputWithContext(ctx context.Context) AccessControlListMatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListMatchConfigurationOutput)
}

// AccessControlListMatchConfigurationArrayInput is an input type that accepts AccessControlListMatchConfigurationArray and AccessControlListMatchConfigurationArrayOutput values.
// You can construct a concrete instance of `AccessControlListMatchConfigurationArrayInput` via:
//
//	AccessControlListMatchConfigurationArray{ AccessControlListMatchConfigurationArgs{...} }
type AccessControlListMatchConfigurationArrayInput interface {
	pulumi.Input

	ToAccessControlListMatchConfigurationArrayOutput() AccessControlListMatchConfigurationArrayOutput
	ToAccessControlListMatchConfigurationArrayOutputWithContext(context.Context) AccessControlListMatchConfigurationArrayOutput
}

type AccessControlListMatchConfigurationArray []AccessControlListMatchConfigurationInput

func (AccessControlListMatchConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListMatchConfiguration)(nil)).Elem()
}

func (i AccessControlListMatchConfigurationArray) ToAccessControlListMatchConfigurationArrayOutput() AccessControlListMatchConfigurationArrayOutput {
	return i.ToAccessControlListMatchConfigurationArrayOutputWithContext(context.Background())
}

func (i AccessControlListMatchConfigurationArray) ToAccessControlListMatchConfigurationArrayOutputWithContext(ctx context.Context) AccessControlListMatchConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListMatchConfigurationArrayOutput)
}

// Defines the match configuration that are supported to filter the traffic.
type AccessControlListMatchConfigurationOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListMatchConfiguration)(nil)).Elem()
}

func (o AccessControlListMatchConfigurationOutput) ToAccessControlListMatchConfigurationOutput() AccessControlListMatchConfigurationOutput {
	return o
}

func (o AccessControlListMatchConfigurationOutput) ToAccessControlListMatchConfigurationOutputWithContext(ctx context.Context) AccessControlListMatchConfigurationOutput {
	return o
}

// List of actions that need to be performed for the matched conditions.
func (o AccessControlListMatchConfigurationOutput) Actions() AccessControlListActionArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConfiguration) []AccessControlListAction { return v.Actions }).(AccessControlListActionArrayOutput)
}

// Type of IP Address. IPv4 or IPv6
func (o AccessControlListMatchConfigurationOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConfiguration) *string { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// List of the match conditions.
func (o AccessControlListMatchConfigurationOutput) MatchConditions() AccessControlListMatchConditionArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConfiguration) []AccessControlListMatchCondition {
		return v.MatchConditions
	}).(AccessControlListMatchConditionArrayOutput)
}

// The name of the match configuration.
func (o AccessControlListMatchConfigurationOutput) MatchConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConfiguration) *string { return v.MatchConfigurationName }).(pulumi.StringPtrOutput)
}

// Sequence Number of the match configuration.
func (o AccessControlListMatchConfigurationOutput) SequenceNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConfiguration) *float64 { return v.SequenceNumber }).(pulumi.Float64PtrOutput)
}

type AccessControlListMatchConfigurationArrayOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListMatchConfiguration)(nil)).Elem()
}

func (o AccessControlListMatchConfigurationArrayOutput) ToAccessControlListMatchConfigurationArrayOutput() AccessControlListMatchConfigurationArrayOutput {
	return o
}

func (o AccessControlListMatchConfigurationArrayOutput) ToAccessControlListMatchConfigurationArrayOutputWithContext(ctx context.Context) AccessControlListMatchConfigurationArrayOutput {
	return o
}

func (o AccessControlListMatchConfigurationArrayOutput) Index(i pulumi.IntInput) AccessControlListMatchConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlListMatchConfiguration {
		return vs[0].([]AccessControlListMatchConfiguration)[vs[1].(int)]
	}).(AccessControlListMatchConfigurationOutput)
}

// Defines the match configuration that are supported to filter the traffic.
type AccessControlListMatchConfigurationResponse struct {
	// List of actions that need to be performed for the matched conditions.
	Actions []AccessControlListActionResponse `pulumi:"actions"`
	// Type of IP Address. IPv4 or IPv6
	IpAddressType *string `pulumi:"ipAddressType"`
	// List of the match conditions.
	MatchConditions []AccessControlListMatchConditionResponse `pulumi:"matchConditions"`
	// The name of the match configuration.
	MatchConfigurationName *string `pulumi:"matchConfigurationName"`
	// Sequence Number of the match configuration.
	SequenceNumber *float64 `pulumi:"sequenceNumber"`
}

// Defines the match configuration that are supported to filter the traffic.
type AccessControlListMatchConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListMatchConfigurationResponse)(nil)).Elem()
}

func (o AccessControlListMatchConfigurationResponseOutput) ToAccessControlListMatchConfigurationResponseOutput() AccessControlListMatchConfigurationResponseOutput {
	return o
}

func (o AccessControlListMatchConfigurationResponseOutput) ToAccessControlListMatchConfigurationResponseOutputWithContext(ctx context.Context) AccessControlListMatchConfigurationResponseOutput {
	return o
}

// List of actions that need to be performed for the matched conditions.
func (o AccessControlListMatchConfigurationResponseOutput) Actions() AccessControlListActionResponseArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConfigurationResponse) []AccessControlListActionResponse {
		return v.Actions
	}).(AccessControlListActionResponseArrayOutput)
}

// Type of IP Address. IPv4 or IPv6
func (o AccessControlListMatchConfigurationResponseOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConfigurationResponse) *string { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// List of the match conditions.
func (o AccessControlListMatchConfigurationResponseOutput) MatchConditions() AccessControlListMatchConditionResponseArrayOutput {
	return o.ApplyT(func(v AccessControlListMatchConfigurationResponse) []AccessControlListMatchConditionResponse {
		return v.MatchConditions
	}).(AccessControlListMatchConditionResponseArrayOutput)
}

// The name of the match configuration.
func (o AccessControlListMatchConfigurationResponseOutput) MatchConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConfigurationResponse) *string { return v.MatchConfigurationName }).(pulumi.StringPtrOutput)
}

// Sequence Number of the match configuration.
func (o AccessControlListMatchConfigurationResponseOutput) SequenceNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AccessControlListMatchConfigurationResponse) *float64 { return v.SequenceNumber }).(pulumi.Float64PtrOutput)
}

type AccessControlListMatchConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessControlListMatchConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlListMatchConfigurationResponse)(nil)).Elem()
}

func (o AccessControlListMatchConfigurationResponseArrayOutput) ToAccessControlListMatchConfigurationResponseArrayOutput() AccessControlListMatchConfigurationResponseArrayOutput {
	return o
}

func (o AccessControlListMatchConfigurationResponseArrayOutput) ToAccessControlListMatchConfigurationResponseArrayOutputWithContext(ctx context.Context) AccessControlListMatchConfigurationResponseArrayOutput {
	return o
}

func (o AccessControlListMatchConfigurationResponseArrayOutput) Index(i pulumi.IntInput) AccessControlListMatchConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlListMatchConfigurationResponse {
		return vs[0].([]AccessControlListMatchConfigurationResponse)[vs[1].(int)]
	}).(AccessControlListMatchConfigurationResponseOutput)
}

// Defines the port condition that needs to be matched.
type AccessControlListPortCondition struct {
	// List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg
	Flags []string `pulumi:"flags"`
	// Layer4 protocol type that needs to be matched.
	Layer4Protocol string `pulumi:"layer4Protocol"`
	// List of the port Group Names that need to be matched.
	PortGroupNames []string `pulumi:"portGroupNames"`
	// Port type that needs to be matched.
	PortType *string `pulumi:"portType"`
	// List of the Ports that need to be matched.
	Ports []string `pulumi:"ports"`
}

// AccessControlListPortConditionInput is an input type that accepts AccessControlListPortConditionArgs and AccessControlListPortConditionOutput values.
// You can construct a concrete instance of `AccessControlListPortConditionInput` via:
//
//	AccessControlListPortConditionArgs{...}
type AccessControlListPortConditionInput interface {
	pulumi.Input

	ToAccessControlListPortConditionOutput() AccessControlListPortConditionOutput
	ToAccessControlListPortConditionOutputWithContext(context.Context) AccessControlListPortConditionOutput
}

// Defines the port condition that needs to be matched.
type AccessControlListPortConditionArgs struct {
	// List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg
	Flags pulumi.StringArrayInput `pulumi:"flags"`
	// Layer4 protocol type that needs to be matched.
	Layer4Protocol pulumi.StringInput `pulumi:"layer4Protocol"`
	// List of the port Group Names that need to be matched.
	PortGroupNames pulumi.StringArrayInput `pulumi:"portGroupNames"`
	// Port type that needs to be matched.
	PortType pulumi.StringPtrInput `pulumi:"portType"`
	// List of the Ports that need to be matched.
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (AccessControlListPortConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListPortCondition)(nil)).Elem()
}

func (i AccessControlListPortConditionArgs) ToAccessControlListPortConditionOutput() AccessControlListPortConditionOutput {
	return i.ToAccessControlListPortConditionOutputWithContext(context.Background())
}

func (i AccessControlListPortConditionArgs) ToAccessControlListPortConditionOutputWithContext(ctx context.Context) AccessControlListPortConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListPortConditionOutput)
}

func (i AccessControlListPortConditionArgs) ToAccessControlListPortConditionPtrOutput() AccessControlListPortConditionPtrOutput {
	return i.ToAccessControlListPortConditionPtrOutputWithContext(context.Background())
}

func (i AccessControlListPortConditionArgs) ToAccessControlListPortConditionPtrOutputWithContext(ctx context.Context) AccessControlListPortConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListPortConditionOutput).ToAccessControlListPortConditionPtrOutputWithContext(ctx)
}

// AccessControlListPortConditionPtrInput is an input type that accepts AccessControlListPortConditionArgs, AccessControlListPortConditionPtr and AccessControlListPortConditionPtrOutput values.
// You can construct a concrete instance of `AccessControlListPortConditionPtrInput` via:
//
//	        AccessControlListPortConditionArgs{...}
//
//	or:
//
//	        nil
type AccessControlListPortConditionPtrInput interface {
	pulumi.Input

	ToAccessControlListPortConditionPtrOutput() AccessControlListPortConditionPtrOutput
	ToAccessControlListPortConditionPtrOutputWithContext(context.Context) AccessControlListPortConditionPtrOutput
}

type accessControlListPortConditionPtrType AccessControlListPortConditionArgs

func AccessControlListPortConditionPtr(v *AccessControlListPortConditionArgs) AccessControlListPortConditionPtrInput {
	return (*accessControlListPortConditionPtrType)(v)
}

func (*accessControlListPortConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlListPortCondition)(nil)).Elem()
}

func (i *accessControlListPortConditionPtrType) ToAccessControlListPortConditionPtrOutput() AccessControlListPortConditionPtrOutput {
	return i.ToAccessControlListPortConditionPtrOutputWithContext(context.Background())
}

func (i *accessControlListPortConditionPtrType) ToAccessControlListPortConditionPtrOutputWithContext(ctx context.Context) AccessControlListPortConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlListPortConditionPtrOutput)
}

// Defines the port condition that needs to be matched.
type AccessControlListPortConditionOutput struct{ *pulumi.OutputState }

func (AccessControlListPortConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListPortCondition)(nil)).Elem()
}

func (o AccessControlListPortConditionOutput) ToAccessControlListPortConditionOutput() AccessControlListPortConditionOutput {
	return o
}

func (o AccessControlListPortConditionOutput) ToAccessControlListPortConditionOutputWithContext(ctx context.Context) AccessControlListPortConditionOutput {
	return o
}

func (o AccessControlListPortConditionOutput) ToAccessControlListPortConditionPtrOutput() AccessControlListPortConditionPtrOutput {
	return o.ToAccessControlListPortConditionPtrOutputWithContext(context.Background())
}

func (o AccessControlListPortConditionOutput) ToAccessControlListPortConditionPtrOutputWithContext(ctx context.Context) AccessControlListPortConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessControlListPortCondition) *AccessControlListPortCondition {
		return &v
	}).(AccessControlListPortConditionPtrOutput)
}

// List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg
func (o AccessControlListPortConditionOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListPortCondition) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

// Layer4 protocol type that needs to be matched.
func (o AccessControlListPortConditionOutput) Layer4Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlListPortCondition) string { return v.Layer4Protocol }).(pulumi.StringOutput)
}

// List of the port Group Names that need to be matched.
func (o AccessControlListPortConditionOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListPortCondition) []string { return v.PortGroupNames }).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o AccessControlListPortConditionOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListPortCondition) *string { return v.PortType }).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o AccessControlListPortConditionOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListPortCondition) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type AccessControlListPortConditionPtrOutput struct{ *pulumi.OutputState }

func (AccessControlListPortConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlListPortCondition)(nil)).Elem()
}

func (o AccessControlListPortConditionPtrOutput) ToAccessControlListPortConditionPtrOutput() AccessControlListPortConditionPtrOutput {
	return o
}

func (o AccessControlListPortConditionPtrOutput) ToAccessControlListPortConditionPtrOutputWithContext(ctx context.Context) AccessControlListPortConditionPtrOutput {
	return o
}

func (o AccessControlListPortConditionPtrOutput) Elem() AccessControlListPortConditionOutput {
	return o.ApplyT(func(v *AccessControlListPortCondition) AccessControlListPortCondition {
		if v != nil {
			return *v
		}
		var ret AccessControlListPortCondition
		return ret
	}).(AccessControlListPortConditionOutput)
}

// List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg
func (o AccessControlListPortConditionPtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessControlListPortCondition) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// Layer4 protocol type that needs to be matched.
func (o AccessControlListPortConditionPtrOutput) Layer4Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessControlListPortCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Layer4Protocol
	}).(pulumi.StringPtrOutput)
}

// List of the port Group Names that need to be matched.
func (o AccessControlListPortConditionPtrOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessControlListPortCondition) []string {
		if v == nil {
			return nil
		}
		return v.PortGroupNames
	}).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o AccessControlListPortConditionPtrOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessControlListPortCondition) *string {
		if v == nil {
			return nil
		}
		return v.PortType
	}).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o AccessControlListPortConditionPtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessControlListPortCondition) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

// Defines the port condition that needs to be matched.
type AccessControlListPortConditionResponse struct {
	// List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg
	Flags []string `pulumi:"flags"`
	// Layer4 protocol type that needs to be matched.
	Layer4Protocol string `pulumi:"layer4Protocol"`
	// List of the port Group Names that need to be matched.
	PortGroupNames []string `pulumi:"portGroupNames"`
	// Port type that needs to be matched.
	PortType *string `pulumi:"portType"`
	// List of the Ports that need to be matched.
	Ports []string `pulumi:"ports"`
}

// Defines the port condition that needs to be matched.
type AccessControlListPortConditionResponseOutput struct{ *pulumi.OutputState }

func (AccessControlListPortConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlListPortConditionResponse)(nil)).Elem()
}

func (o AccessControlListPortConditionResponseOutput) ToAccessControlListPortConditionResponseOutput() AccessControlListPortConditionResponseOutput {
	return o
}

func (o AccessControlListPortConditionResponseOutput) ToAccessControlListPortConditionResponseOutputWithContext(ctx context.Context) AccessControlListPortConditionResponseOutput {
	return o
}

// List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg
func (o AccessControlListPortConditionResponseOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListPortConditionResponse) []string { return v.Flags }).(pulumi.StringArrayOutput)
}

// Layer4 protocol type that needs to be matched.
func (o AccessControlListPortConditionResponseOutput) Layer4Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlListPortConditionResponse) string { return v.Layer4Protocol }).(pulumi.StringOutput)
}

// List of the port Group Names that need to be matched.
func (o AccessControlListPortConditionResponseOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListPortConditionResponse) []string { return v.PortGroupNames }).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o AccessControlListPortConditionResponseOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlListPortConditionResponse) *string { return v.PortType }).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o AccessControlListPortConditionResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlListPortConditionResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type AccessControlListPortConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (AccessControlListPortConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlListPortConditionResponse)(nil)).Elem()
}

func (o AccessControlListPortConditionResponsePtrOutput) ToAccessControlListPortConditionResponsePtrOutput() AccessControlListPortConditionResponsePtrOutput {
	return o
}

func (o AccessControlListPortConditionResponsePtrOutput) ToAccessControlListPortConditionResponsePtrOutputWithContext(ctx context.Context) AccessControlListPortConditionResponsePtrOutput {
	return o
}

func (o AccessControlListPortConditionResponsePtrOutput) Elem() AccessControlListPortConditionResponseOutput {
	return o.ApplyT(func(v *AccessControlListPortConditionResponse) AccessControlListPortConditionResponse {
		if v != nil {
			return *v
		}
		var ret AccessControlListPortConditionResponse
		return ret
	}).(AccessControlListPortConditionResponseOutput)
}

// List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg
func (o AccessControlListPortConditionResponsePtrOutput) Flags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessControlListPortConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Flags
	}).(pulumi.StringArrayOutput)
}

// Layer4 protocol type that needs to be matched.
func (o AccessControlListPortConditionResponsePtrOutput) Layer4Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessControlListPortConditionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Layer4Protocol
	}).(pulumi.StringPtrOutput)
}

// List of the port Group Names that need to be matched.
func (o AccessControlListPortConditionResponsePtrOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessControlListPortConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.PortGroupNames
	}).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o AccessControlListPortConditionResponsePtrOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessControlListPortConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortType
	}).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o AccessControlListPortConditionResponsePtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessControlListPortConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

// IP Community Properties.
type ActionIpCommunityProperties struct {
	// List of IP Community IDs.
	Add *IpCommunityIdList `pulumi:"add"`
	// List of IP Community IDs.
	Delete *IpCommunityIdList `pulumi:"delete"`
	// List of IP Community IDs.
	Set *IpCommunityIdList `pulumi:"set"`
}

// ActionIpCommunityPropertiesInput is an input type that accepts ActionIpCommunityPropertiesArgs and ActionIpCommunityPropertiesOutput values.
// You can construct a concrete instance of `ActionIpCommunityPropertiesInput` via:
//
//	ActionIpCommunityPropertiesArgs{...}
type ActionIpCommunityPropertiesInput interface {
	pulumi.Input

	ToActionIpCommunityPropertiesOutput() ActionIpCommunityPropertiesOutput
	ToActionIpCommunityPropertiesOutputWithContext(context.Context) ActionIpCommunityPropertiesOutput
}

// IP Community Properties.
type ActionIpCommunityPropertiesArgs struct {
	// List of IP Community IDs.
	Add IpCommunityIdListPtrInput `pulumi:"add"`
	// List of IP Community IDs.
	Delete IpCommunityIdListPtrInput `pulumi:"delete"`
	// List of IP Community IDs.
	Set IpCommunityIdListPtrInput `pulumi:"set"`
}

func (ActionIpCommunityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionIpCommunityProperties)(nil)).Elem()
}

func (i ActionIpCommunityPropertiesArgs) ToActionIpCommunityPropertiesOutput() ActionIpCommunityPropertiesOutput {
	return i.ToActionIpCommunityPropertiesOutputWithContext(context.Background())
}

func (i ActionIpCommunityPropertiesArgs) ToActionIpCommunityPropertiesOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionIpCommunityPropertiesOutput)
}

func (i ActionIpCommunityPropertiesArgs) ToActionIpCommunityPropertiesPtrOutput() ActionIpCommunityPropertiesPtrOutput {
	return i.ToActionIpCommunityPropertiesPtrOutputWithContext(context.Background())
}

func (i ActionIpCommunityPropertiesArgs) ToActionIpCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionIpCommunityPropertiesOutput).ToActionIpCommunityPropertiesPtrOutputWithContext(ctx)
}

// ActionIpCommunityPropertiesPtrInput is an input type that accepts ActionIpCommunityPropertiesArgs, ActionIpCommunityPropertiesPtr and ActionIpCommunityPropertiesPtrOutput values.
// You can construct a concrete instance of `ActionIpCommunityPropertiesPtrInput` via:
//
//	        ActionIpCommunityPropertiesArgs{...}
//
//	or:
//
//	        nil
type ActionIpCommunityPropertiesPtrInput interface {
	pulumi.Input

	ToActionIpCommunityPropertiesPtrOutput() ActionIpCommunityPropertiesPtrOutput
	ToActionIpCommunityPropertiesPtrOutputWithContext(context.Context) ActionIpCommunityPropertiesPtrOutput
}

type actionIpCommunityPropertiesPtrType ActionIpCommunityPropertiesArgs

func ActionIpCommunityPropertiesPtr(v *ActionIpCommunityPropertiesArgs) ActionIpCommunityPropertiesPtrInput {
	return (*actionIpCommunityPropertiesPtrType)(v)
}

func (*actionIpCommunityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionIpCommunityProperties)(nil)).Elem()
}

func (i *actionIpCommunityPropertiesPtrType) ToActionIpCommunityPropertiesPtrOutput() ActionIpCommunityPropertiesPtrOutput {
	return i.ToActionIpCommunityPropertiesPtrOutputWithContext(context.Background())
}

func (i *actionIpCommunityPropertiesPtrType) ToActionIpCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionIpCommunityPropertiesPtrOutput)
}

// IP Community Properties.
type ActionIpCommunityPropertiesOutput struct{ *pulumi.OutputState }

func (ActionIpCommunityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionIpCommunityProperties)(nil)).Elem()
}

func (o ActionIpCommunityPropertiesOutput) ToActionIpCommunityPropertiesOutput() ActionIpCommunityPropertiesOutput {
	return o
}

func (o ActionIpCommunityPropertiesOutput) ToActionIpCommunityPropertiesOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesOutput {
	return o
}

func (o ActionIpCommunityPropertiesOutput) ToActionIpCommunityPropertiesPtrOutput() ActionIpCommunityPropertiesPtrOutput {
	return o.ToActionIpCommunityPropertiesPtrOutputWithContext(context.Background())
}

func (o ActionIpCommunityPropertiesOutput) ToActionIpCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionIpCommunityProperties) *ActionIpCommunityProperties {
		return &v
	}).(ActionIpCommunityPropertiesPtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesOutput) Add() IpCommunityIdListPtrOutput {
	return o.ApplyT(func(v ActionIpCommunityProperties) *IpCommunityIdList { return v.Add }).(IpCommunityIdListPtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesOutput) Delete() IpCommunityIdListPtrOutput {
	return o.ApplyT(func(v ActionIpCommunityProperties) *IpCommunityIdList { return v.Delete }).(IpCommunityIdListPtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesOutput) Set() IpCommunityIdListPtrOutput {
	return o.ApplyT(func(v ActionIpCommunityProperties) *IpCommunityIdList { return v.Set }).(IpCommunityIdListPtrOutput)
}

type ActionIpCommunityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ActionIpCommunityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionIpCommunityProperties)(nil)).Elem()
}

func (o ActionIpCommunityPropertiesPtrOutput) ToActionIpCommunityPropertiesPtrOutput() ActionIpCommunityPropertiesPtrOutput {
	return o
}

func (o ActionIpCommunityPropertiesPtrOutput) ToActionIpCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesPtrOutput {
	return o
}

func (o ActionIpCommunityPropertiesPtrOutput) Elem() ActionIpCommunityPropertiesOutput {
	return o.ApplyT(func(v *ActionIpCommunityProperties) ActionIpCommunityProperties {
		if v != nil {
			return *v
		}
		var ret ActionIpCommunityProperties
		return ret
	}).(ActionIpCommunityPropertiesOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesPtrOutput) Add() IpCommunityIdListPtrOutput {
	return o.ApplyT(func(v *ActionIpCommunityProperties) *IpCommunityIdList {
		if v == nil {
			return nil
		}
		return v.Add
	}).(IpCommunityIdListPtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesPtrOutput) Delete() IpCommunityIdListPtrOutput {
	return o.ApplyT(func(v *ActionIpCommunityProperties) *IpCommunityIdList {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(IpCommunityIdListPtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesPtrOutput) Set() IpCommunityIdListPtrOutput {
	return o.ApplyT(func(v *ActionIpCommunityProperties) *IpCommunityIdList {
		if v == nil {
			return nil
		}
		return v.Set
	}).(IpCommunityIdListPtrOutput)
}

// IP Community Properties.
type ActionIpCommunityPropertiesResponse struct {
	// List of IP Community IDs.
	Add *IpCommunityIdListResponse `pulumi:"add"`
	// List of IP Community IDs.
	Delete *IpCommunityIdListResponse `pulumi:"delete"`
	// List of IP Community IDs.
	Set *IpCommunityIdListResponse `pulumi:"set"`
}

// IP Community Properties.
type ActionIpCommunityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ActionIpCommunityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionIpCommunityPropertiesResponse)(nil)).Elem()
}

func (o ActionIpCommunityPropertiesResponseOutput) ToActionIpCommunityPropertiesResponseOutput() ActionIpCommunityPropertiesResponseOutput {
	return o
}

func (o ActionIpCommunityPropertiesResponseOutput) ToActionIpCommunityPropertiesResponseOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesResponseOutput {
	return o
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesResponseOutput) Add() IpCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v ActionIpCommunityPropertiesResponse) *IpCommunityIdListResponse { return v.Add }).(IpCommunityIdListResponsePtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesResponseOutput) Delete() IpCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v ActionIpCommunityPropertiesResponse) *IpCommunityIdListResponse { return v.Delete }).(IpCommunityIdListResponsePtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesResponseOutput) Set() IpCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v ActionIpCommunityPropertiesResponse) *IpCommunityIdListResponse { return v.Set }).(IpCommunityIdListResponsePtrOutput)
}

type ActionIpCommunityPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionIpCommunityPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionIpCommunityPropertiesResponse)(nil)).Elem()
}

func (o ActionIpCommunityPropertiesResponsePtrOutput) ToActionIpCommunityPropertiesResponsePtrOutput() ActionIpCommunityPropertiesResponsePtrOutput {
	return o
}

func (o ActionIpCommunityPropertiesResponsePtrOutput) ToActionIpCommunityPropertiesResponsePtrOutputWithContext(ctx context.Context) ActionIpCommunityPropertiesResponsePtrOutput {
	return o
}

func (o ActionIpCommunityPropertiesResponsePtrOutput) Elem() ActionIpCommunityPropertiesResponseOutput {
	return o.ApplyT(func(v *ActionIpCommunityPropertiesResponse) ActionIpCommunityPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ActionIpCommunityPropertiesResponse
		return ret
	}).(ActionIpCommunityPropertiesResponseOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesResponsePtrOutput) Add() IpCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v *ActionIpCommunityPropertiesResponse) *IpCommunityIdListResponse {
		if v == nil {
			return nil
		}
		return v.Add
	}).(IpCommunityIdListResponsePtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesResponsePtrOutput) Delete() IpCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v *ActionIpCommunityPropertiesResponse) *IpCommunityIdListResponse {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(IpCommunityIdListResponsePtrOutput)
}

// List of IP Community IDs.
func (o ActionIpCommunityPropertiesResponsePtrOutput) Set() IpCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v *ActionIpCommunityPropertiesResponse) *IpCommunityIdListResponse {
		if v == nil {
			return nil
		}
		return v.Set
	}).(IpCommunityIdListResponsePtrOutput)
}

// IP Extended Community Properties.
type ActionIpExtendedCommunityProperties struct {
	// List of IP Extended Community IDs.
	Add *IpExtendedCommunityIdList `pulumi:"add"`
	// List of IP Extended Community IDs.
	Delete *IpExtendedCommunityIdList `pulumi:"delete"`
	// List of IP Extended Community IDs.
	Set *IpExtendedCommunityIdList `pulumi:"set"`
}

// ActionIpExtendedCommunityPropertiesInput is an input type that accepts ActionIpExtendedCommunityPropertiesArgs and ActionIpExtendedCommunityPropertiesOutput values.
// You can construct a concrete instance of `ActionIpExtendedCommunityPropertiesInput` via:
//
//	ActionIpExtendedCommunityPropertiesArgs{...}
type ActionIpExtendedCommunityPropertiesInput interface {
	pulumi.Input

	ToActionIpExtendedCommunityPropertiesOutput() ActionIpExtendedCommunityPropertiesOutput
	ToActionIpExtendedCommunityPropertiesOutputWithContext(context.Context) ActionIpExtendedCommunityPropertiesOutput
}

// IP Extended Community Properties.
type ActionIpExtendedCommunityPropertiesArgs struct {
	// List of IP Extended Community IDs.
	Add IpExtendedCommunityIdListPtrInput `pulumi:"add"`
	// List of IP Extended Community IDs.
	Delete IpExtendedCommunityIdListPtrInput `pulumi:"delete"`
	// List of IP Extended Community IDs.
	Set IpExtendedCommunityIdListPtrInput `pulumi:"set"`
}

func (ActionIpExtendedCommunityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionIpExtendedCommunityProperties)(nil)).Elem()
}

func (i ActionIpExtendedCommunityPropertiesArgs) ToActionIpExtendedCommunityPropertiesOutput() ActionIpExtendedCommunityPropertiesOutput {
	return i.ToActionIpExtendedCommunityPropertiesOutputWithContext(context.Background())
}

func (i ActionIpExtendedCommunityPropertiesArgs) ToActionIpExtendedCommunityPropertiesOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionIpExtendedCommunityPropertiesOutput)
}

func (i ActionIpExtendedCommunityPropertiesArgs) ToActionIpExtendedCommunityPropertiesPtrOutput() ActionIpExtendedCommunityPropertiesPtrOutput {
	return i.ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(context.Background())
}

func (i ActionIpExtendedCommunityPropertiesArgs) ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionIpExtendedCommunityPropertiesOutput).ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(ctx)
}

// ActionIpExtendedCommunityPropertiesPtrInput is an input type that accepts ActionIpExtendedCommunityPropertiesArgs, ActionIpExtendedCommunityPropertiesPtr and ActionIpExtendedCommunityPropertiesPtrOutput values.
// You can construct a concrete instance of `ActionIpExtendedCommunityPropertiesPtrInput` via:
//
//	        ActionIpExtendedCommunityPropertiesArgs{...}
//
//	or:
//
//	        nil
type ActionIpExtendedCommunityPropertiesPtrInput interface {
	pulumi.Input

	ToActionIpExtendedCommunityPropertiesPtrOutput() ActionIpExtendedCommunityPropertiesPtrOutput
	ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(context.Context) ActionIpExtendedCommunityPropertiesPtrOutput
}

type actionIpExtendedCommunityPropertiesPtrType ActionIpExtendedCommunityPropertiesArgs

func ActionIpExtendedCommunityPropertiesPtr(v *ActionIpExtendedCommunityPropertiesArgs) ActionIpExtendedCommunityPropertiesPtrInput {
	return (*actionIpExtendedCommunityPropertiesPtrType)(v)
}

func (*actionIpExtendedCommunityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionIpExtendedCommunityProperties)(nil)).Elem()
}

func (i *actionIpExtendedCommunityPropertiesPtrType) ToActionIpExtendedCommunityPropertiesPtrOutput() ActionIpExtendedCommunityPropertiesPtrOutput {
	return i.ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(context.Background())
}

func (i *actionIpExtendedCommunityPropertiesPtrType) ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionIpExtendedCommunityPropertiesPtrOutput)
}

// IP Extended Community Properties.
type ActionIpExtendedCommunityPropertiesOutput struct{ *pulumi.OutputState }

func (ActionIpExtendedCommunityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionIpExtendedCommunityProperties)(nil)).Elem()
}

func (o ActionIpExtendedCommunityPropertiesOutput) ToActionIpExtendedCommunityPropertiesOutput() ActionIpExtendedCommunityPropertiesOutput {
	return o
}

func (o ActionIpExtendedCommunityPropertiesOutput) ToActionIpExtendedCommunityPropertiesOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesOutput {
	return o
}

func (o ActionIpExtendedCommunityPropertiesOutput) ToActionIpExtendedCommunityPropertiesPtrOutput() ActionIpExtendedCommunityPropertiesPtrOutput {
	return o.ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(context.Background())
}

func (o ActionIpExtendedCommunityPropertiesOutput) ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionIpExtendedCommunityProperties) *ActionIpExtendedCommunityProperties {
		return &v
	}).(ActionIpExtendedCommunityPropertiesPtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesOutput) Add() IpExtendedCommunityIdListPtrOutput {
	return o.ApplyT(func(v ActionIpExtendedCommunityProperties) *IpExtendedCommunityIdList { return v.Add }).(IpExtendedCommunityIdListPtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesOutput) Delete() IpExtendedCommunityIdListPtrOutput {
	return o.ApplyT(func(v ActionIpExtendedCommunityProperties) *IpExtendedCommunityIdList { return v.Delete }).(IpExtendedCommunityIdListPtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesOutput) Set() IpExtendedCommunityIdListPtrOutput {
	return o.ApplyT(func(v ActionIpExtendedCommunityProperties) *IpExtendedCommunityIdList { return v.Set }).(IpExtendedCommunityIdListPtrOutput)
}

type ActionIpExtendedCommunityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ActionIpExtendedCommunityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionIpExtendedCommunityProperties)(nil)).Elem()
}

func (o ActionIpExtendedCommunityPropertiesPtrOutput) ToActionIpExtendedCommunityPropertiesPtrOutput() ActionIpExtendedCommunityPropertiesPtrOutput {
	return o
}

func (o ActionIpExtendedCommunityPropertiesPtrOutput) ToActionIpExtendedCommunityPropertiesPtrOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesPtrOutput {
	return o
}

func (o ActionIpExtendedCommunityPropertiesPtrOutput) Elem() ActionIpExtendedCommunityPropertiesOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityProperties) ActionIpExtendedCommunityProperties {
		if v != nil {
			return *v
		}
		var ret ActionIpExtendedCommunityProperties
		return ret
	}).(ActionIpExtendedCommunityPropertiesOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesPtrOutput) Add() IpExtendedCommunityIdListPtrOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityProperties) *IpExtendedCommunityIdList {
		if v == nil {
			return nil
		}
		return v.Add
	}).(IpExtendedCommunityIdListPtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesPtrOutput) Delete() IpExtendedCommunityIdListPtrOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityProperties) *IpExtendedCommunityIdList {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(IpExtendedCommunityIdListPtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesPtrOutput) Set() IpExtendedCommunityIdListPtrOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityProperties) *IpExtendedCommunityIdList {
		if v == nil {
			return nil
		}
		return v.Set
	}).(IpExtendedCommunityIdListPtrOutput)
}

// IP Extended Community Properties.
type ActionIpExtendedCommunityPropertiesResponse struct {
	// List of IP Extended Community IDs.
	Add *IpExtendedCommunityIdListResponse `pulumi:"add"`
	// List of IP Extended Community IDs.
	Delete *IpExtendedCommunityIdListResponse `pulumi:"delete"`
	// List of IP Extended Community IDs.
	Set *IpExtendedCommunityIdListResponse `pulumi:"set"`
}

// IP Extended Community Properties.
type ActionIpExtendedCommunityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ActionIpExtendedCommunityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionIpExtendedCommunityPropertiesResponse)(nil)).Elem()
}

func (o ActionIpExtendedCommunityPropertiesResponseOutput) ToActionIpExtendedCommunityPropertiesResponseOutput() ActionIpExtendedCommunityPropertiesResponseOutput {
	return o
}

func (o ActionIpExtendedCommunityPropertiesResponseOutput) ToActionIpExtendedCommunityPropertiesResponseOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesResponseOutput {
	return o
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesResponseOutput) Add() IpExtendedCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v ActionIpExtendedCommunityPropertiesResponse) *IpExtendedCommunityIdListResponse { return v.Add }).(IpExtendedCommunityIdListResponsePtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesResponseOutput) Delete() IpExtendedCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v ActionIpExtendedCommunityPropertiesResponse) *IpExtendedCommunityIdListResponse {
		return v.Delete
	}).(IpExtendedCommunityIdListResponsePtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesResponseOutput) Set() IpExtendedCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v ActionIpExtendedCommunityPropertiesResponse) *IpExtendedCommunityIdListResponse { return v.Set }).(IpExtendedCommunityIdListResponsePtrOutput)
}

type ActionIpExtendedCommunityPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionIpExtendedCommunityPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionIpExtendedCommunityPropertiesResponse)(nil)).Elem()
}

func (o ActionIpExtendedCommunityPropertiesResponsePtrOutput) ToActionIpExtendedCommunityPropertiesResponsePtrOutput() ActionIpExtendedCommunityPropertiesResponsePtrOutput {
	return o
}

func (o ActionIpExtendedCommunityPropertiesResponsePtrOutput) ToActionIpExtendedCommunityPropertiesResponsePtrOutputWithContext(ctx context.Context) ActionIpExtendedCommunityPropertiesResponsePtrOutput {
	return o
}

func (o ActionIpExtendedCommunityPropertiesResponsePtrOutput) Elem() ActionIpExtendedCommunityPropertiesResponseOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityPropertiesResponse) ActionIpExtendedCommunityPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ActionIpExtendedCommunityPropertiesResponse
		return ret
	}).(ActionIpExtendedCommunityPropertiesResponseOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesResponsePtrOutput) Add() IpExtendedCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityPropertiesResponse) *IpExtendedCommunityIdListResponse {
		if v == nil {
			return nil
		}
		return v.Add
	}).(IpExtendedCommunityIdListResponsePtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesResponsePtrOutput) Delete() IpExtendedCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityPropertiesResponse) *IpExtendedCommunityIdListResponse {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(IpExtendedCommunityIdListResponsePtrOutput)
}

// List of IP Extended Community IDs.
func (o ActionIpExtendedCommunityPropertiesResponsePtrOutput) Set() IpExtendedCommunityIdListResponsePtrOutput {
	return o.ApplyT(func(v *ActionIpExtendedCommunityPropertiesResponse) *IpExtendedCommunityIdListResponse {
		if v == nil {
			return nil
		}
		return v.Set
	}).(IpExtendedCommunityIdListResponsePtrOutput)
}

// aggregateIpv4Route model.
type AggregateRoute struct {
	// IPv4 Prefix of the aggregate Ipv4Route.
	Prefix string `pulumi:"prefix"`
}

// AggregateRouteInput is an input type that accepts AggregateRouteArgs and AggregateRouteOutput values.
// You can construct a concrete instance of `AggregateRouteInput` via:
//
//	AggregateRouteArgs{...}
type AggregateRouteInput interface {
	pulumi.Input

	ToAggregateRouteOutput() AggregateRouteOutput
	ToAggregateRouteOutputWithContext(context.Context) AggregateRouteOutput
}

// aggregateIpv4Route model.
type AggregateRouteArgs struct {
	// IPv4 Prefix of the aggregate Ipv4Route.
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (AggregateRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateRoute)(nil)).Elem()
}

func (i AggregateRouteArgs) ToAggregateRouteOutput() AggregateRouteOutput {
	return i.ToAggregateRouteOutputWithContext(context.Background())
}

func (i AggregateRouteArgs) ToAggregateRouteOutputWithContext(ctx context.Context) AggregateRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateRouteOutput)
}

// AggregateRouteArrayInput is an input type that accepts AggregateRouteArray and AggregateRouteArrayOutput values.
// You can construct a concrete instance of `AggregateRouteArrayInput` via:
//
//	AggregateRouteArray{ AggregateRouteArgs{...} }
type AggregateRouteArrayInput interface {
	pulumi.Input

	ToAggregateRouteArrayOutput() AggregateRouteArrayOutput
	ToAggregateRouteArrayOutputWithContext(context.Context) AggregateRouteArrayOutput
}

type AggregateRouteArray []AggregateRouteInput

func (AggregateRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AggregateRoute)(nil)).Elem()
}

func (i AggregateRouteArray) ToAggregateRouteArrayOutput() AggregateRouteArrayOutput {
	return i.ToAggregateRouteArrayOutputWithContext(context.Background())
}

func (i AggregateRouteArray) ToAggregateRouteArrayOutputWithContext(ctx context.Context) AggregateRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateRouteArrayOutput)
}

// aggregateIpv4Route model.
type AggregateRouteOutput struct{ *pulumi.OutputState }

func (AggregateRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateRoute)(nil)).Elem()
}

func (o AggregateRouteOutput) ToAggregateRouteOutput() AggregateRouteOutput {
	return o
}

func (o AggregateRouteOutput) ToAggregateRouteOutputWithContext(ctx context.Context) AggregateRouteOutput {
	return o
}

// IPv4 Prefix of the aggregate Ipv4Route.
func (o AggregateRouteOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v AggregateRoute) string { return v.Prefix }).(pulumi.StringOutput)
}

type AggregateRouteArrayOutput struct{ *pulumi.OutputState }

func (AggregateRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AggregateRoute)(nil)).Elem()
}

func (o AggregateRouteArrayOutput) ToAggregateRouteArrayOutput() AggregateRouteArrayOutput {
	return o
}

func (o AggregateRouteArrayOutput) ToAggregateRouteArrayOutputWithContext(ctx context.Context) AggregateRouteArrayOutput {
	return o
}

func (o AggregateRouteArrayOutput) Index(i pulumi.IntInput) AggregateRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AggregateRoute {
		return vs[0].([]AggregateRoute)[vs[1].(int)]
	}).(AggregateRouteOutput)
}

// List of IPv4 and IPv6 aggregate routes.
type AggregateRouteConfiguration struct {
	// List of IPv4 Route prefixes.
	Ipv4Routes []AggregateRoute `pulumi:"ipv4Routes"`
	// List of Ipv6Routes prefixes.
	Ipv6Routes []AggregateRoute `pulumi:"ipv6Routes"`
}

// AggregateRouteConfigurationInput is an input type that accepts AggregateRouteConfigurationArgs and AggregateRouteConfigurationOutput values.
// You can construct a concrete instance of `AggregateRouteConfigurationInput` via:
//
//	AggregateRouteConfigurationArgs{...}
type AggregateRouteConfigurationInput interface {
	pulumi.Input

	ToAggregateRouteConfigurationOutput() AggregateRouteConfigurationOutput
	ToAggregateRouteConfigurationOutputWithContext(context.Context) AggregateRouteConfigurationOutput
}

// List of IPv4 and IPv6 aggregate routes.
type AggregateRouteConfigurationArgs struct {
	// List of IPv4 Route prefixes.
	Ipv4Routes AggregateRouteArrayInput `pulumi:"ipv4Routes"`
	// List of Ipv6Routes prefixes.
	Ipv6Routes AggregateRouteArrayInput `pulumi:"ipv6Routes"`
}

func (AggregateRouteConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateRouteConfiguration)(nil)).Elem()
}

func (i AggregateRouteConfigurationArgs) ToAggregateRouteConfigurationOutput() AggregateRouteConfigurationOutput {
	return i.ToAggregateRouteConfigurationOutputWithContext(context.Background())
}

func (i AggregateRouteConfigurationArgs) ToAggregateRouteConfigurationOutputWithContext(ctx context.Context) AggregateRouteConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateRouteConfigurationOutput)
}

func (i AggregateRouteConfigurationArgs) ToAggregateRouteConfigurationPtrOutput() AggregateRouteConfigurationPtrOutput {
	return i.ToAggregateRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i AggregateRouteConfigurationArgs) ToAggregateRouteConfigurationPtrOutputWithContext(ctx context.Context) AggregateRouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateRouteConfigurationOutput).ToAggregateRouteConfigurationPtrOutputWithContext(ctx)
}

// AggregateRouteConfigurationPtrInput is an input type that accepts AggregateRouteConfigurationArgs, AggregateRouteConfigurationPtr and AggregateRouteConfigurationPtrOutput values.
// You can construct a concrete instance of `AggregateRouteConfigurationPtrInput` via:
//
//	        AggregateRouteConfigurationArgs{...}
//
//	or:
//
//	        nil
type AggregateRouteConfigurationPtrInput interface {
	pulumi.Input

	ToAggregateRouteConfigurationPtrOutput() AggregateRouteConfigurationPtrOutput
	ToAggregateRouteConfigurationPtrOutputWithContext(context.Context) AggregateRouteConfigurationPtrOutput
}

type aggregateRouteConfigurationPtrType AggregateRouteConfigurationArgs

func AggregateRouteConfigurationPtr(v *AggregateRouteConfigurationArgs) AggregateRouteConfigurationPtrInput {
	return (*aggregateRouteConfigurationPtrType)(v)
}

func (*aggregateRouteConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateRouteConfiguration)(nil)).Elem()
}

func (i *aggregateRouteConfigurationPtrType) ToAggregateRouteConfigurationPtrOutput() AggregateRouteConfigurationPtrOutput {
	return i.ToAggregateRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i *aggregateRouteConfigurationPtrType) ToAggregateRouteConfigurationPtrOutputWithContext(ctx context.Context) AggregateRouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateRouteConfigurationPtrOutput)
}

// List of IPv4 and IPv6 aggregate routes.
type AggregateRouteConfigurationOutput struct{ *pulumi.OutputState }

func (AggregateRouteConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateRouteConfiguration)(nil)).Elem()
}

func (o AggregateRouteConfigurationOutput) ToAggregateRouteConfigurationOutput() AggregateRouteConfigurationOutput {
	return o
}

func (o AggregateRouteConfigurationOutput) ToAggregateRouteConfigurationOutputWithContext(ctx context.Context) AggregateRouteConfigurationOutput {
	return o
}

func (o AggregateRouteConfigurationOutput) ToAggregateRouteConfigurationPtrOutput() AggregateRouteConfigurationPtrOutput {
	return o.ToAggregateRouteConfigurationPtrOutputWithContext(context.Background())
}

func (o AggregateRouteConfigurationOutput) ToAggregateRouteConfigurationPtrOutputWithContext(ctx context.Context) AggregateRouteConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregateRouteConfiguration) *AggregateRouteConfiguration {
		return &v
	}).(AggregateRouteConfigurationPtrOutput)
}

// List of IPv4 Route prefixes.
func (o AggregateRouteConfigurationOutput) Ipv4Routes() AggregateRouteArrayOutput {
	return o.ApplyT(func(v AggregateRouteConfiguration) []AggregateRoute { return v.Ipv4Routes }).(AggregateRouteArrayOutput)
}

// List of Ipv6Routes prefixes.
func (o AggregateRouteConfigurationOutput) Ipv6Routes() AggregateRouteArrayOutput {
	return o.ApplyT(func(v AggregateRouteConfiguration) []AggregateRoute { return v.Ipv6Routes }).(AggregateRouteArrayOutput)
}

type AggregateRouteConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AggregateRouteConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateRouteConfiguration)(nil)).Elem()
}

func (o AggregateRouteConfigurationPtrOutput) ToAggregateRouteConfigurationPtrOutput() AggregateRouteConfigurationPtrOutput {
	return o
}

func (o AggregateRouteConfigurationPtrOutput) ToAggregateRouteConfigurationPtrOutputWithContext(ctx context.Context) AggregateRouteConfigurationPtrOutput {
	return o
}

func (o AggregateRouteConfigurationPtrOutput) Elem() AggregateRouteConfigurationOutput {
	return o.ApplyT(func(v *AggregateRouteConfiguration) AggregateRouteConfiguration {
		if v != nil {
			return *v
		}
		var ret AggregateRouteConfiguration
		return ret
	}).(AggregateRouteConfigurationOutput)
}

// List of IPv4 Route prefixes.
func (o AggregateRouteConfigurationPtrOutput) Ipv4Routes() AggregateRouteArrayOutput {
	return o.ApplyT(func(v *AggregateRouteConfiguration) []AggregateRoute {
		if v == nil {
			return nil
		}
		return v.Ipv4Routes
	}).(AggregateRouteArrayOutput)
}

// List of Ipv6Routes prefixes.
func (o AggregateRouteConfigurationPtrOutput) Ipv6Routes() AggregateRouteArrayOutput {
	return o.ApplyT(func(v *AggregateRouteConfiguration) []AggregateRoute {
		if v == nil {
			return nil
		}
		return v.Ipv6Routes
	}).(AggregateRouteArrayOutput)
}

// List of IPv4 and IPv6 aggregate routes.
type AggregateRouteConfigurationResponse struct {
	// List of IPv4 Route prefixes.
	Ipv4Routes []AggregateRouteResponse `pulumi:"ipv4Routes"`
	// List of Ipv6Routes prefixes.
	Ipv6Routes []AggregateRouteResponse `pulumi:"ipv6Routes"`
}

// List of IPv4 and IPv6 aggregate routes.
type AggregateRouteConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AggregateRouteConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateRouteConfigurationResponse)(nil)).Elem()
}

func (o AggregateRouteConfigurationResponseOutput) ToAggregateRouteConfigurationResponseOutput() AggregateRouteConfigurationResponseOutput {
	return o
}

func (o AggregateRouteConfigurationResponseOutput) ToAggregateRouteConfigurationResponseOutputWithContext(ctx context.Context) AggregateRouteConfigurationResponseOutput {
	return o
}

// List of IPv4 Route prefixes.
func (o AggregateRouteConfigurationResponseOutput) Ipv4Routes() AggregateRouteResponseArrayOutput {
	return o.ApplyT(func(v AggregateRouteConfigurationResponse) []AggregateRouteResponse { return v.Ipv4Routes }).(AggregateRouteResponseArrayOutput)
}

// List of Ipv6Routes prefixes.
func (o AggregateRouteConfigurationResponseOutput) Ipv6Routes() AggregateRouteResponseArrayOutput {
	return o.ApplyT(func(v AggregateRouteConfigurationResponse) []AggregateRouteResponse { return v.Ipv6Routes }).(AggregateRouteResponseArrayOutput)
}

type AggregateRouteConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AggregateRouteConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateRouteConfigurationResponse)(nil)).Elem()
}

func (o AggregateRouteConfigurationResponsePtrOutput) ToAggregateRouteConfigurationResponsePtrOutput() AggregateRouteConfigurationResponsePtrOutput {
	return o
}

func (o AggregateRouteConfigurationResponsePtrOutput) ToAggregateRouteConfigurationResponsePtrOutputWithContext(ctx context.Context) AggregateRouteConfigurationResponsePtrOutput {
	return o
}

func (o AggregateRouteConfigurationResponsePtrOutput) Elem() AggregateRouteConfigurationResponseOutput {
	return o.ApplyT(func(v *AggregateRouteConfigurationResponse) AggregateRouteConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AggregateRouteConfigurationResponse
		return ret
	}).(AggregateRouteConfigurationResponseOutput)
}

// List of IPv4 Route prefixes.
func (o AggregateRouteConfigurationResponsePtrOutput) Ipv4Routes() AggregateRouteResponseArrayOutput {
	return o.ApplyT(func(v *AggregateRouteConfigurationResponse) []AggregateRouteResponse {
		if v == nil {
			return nil
		}
		return v.Ipv4Routes
	}).(AggregateRouteResponseArrayOutput)
}

// List of Ipv6Routes prefixes.
func (o AggregateRouteConfigurationResponsePtrOutput) Ipv6Routes() AggregateRouteResponseArrayOutput {
	return o.ApplyT(func(v *AggregateRouteConfigurationResponse) []AggregateRouteResponse {
		if v == nil {
			return nil
		}
		return v.Ipv6Routes
	}).(AggregateRouteResponseArrayOutput)
}

// aggregateIpv4Route model.
type AggregateRouteResponse struct {
	// IPv4 Prefix of the aggregate Ipv4Route.
	Prefix string `pulumi:"prefix"`
}

// aggregateIpv4Route model.
type AggregateRouteResponseOutput struct{ *pulumi.OutputState }

func (AggregateRouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateRouteResponse)(nil)).Elem()
}

func (o AggregateRouteResponseOutput) ToAggregateRouteResponseOutput() AggregateRouteResponseOutput {
	return o
}

func (o AggregateRouteResponseOutput) ToAggregateRouteResponseOutputWithContext(ctx context.Context) AggregateRouteResponseOutput {
	return o
}

// IPv4 Prefix of the aggregate Ipv4Route.
func (o AggregateRouteResponseOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v AggregateRouteResponse) string { return v.Prefix }).(pulumi.StringOutput)
}

type AggregateRouteResponseArrayOutput struct{ *pulumi.OutputState }

func (AggregateRouteResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AggregateRouteResponse)(nil)).Elem()
}

func (o AggregateRouteResponseArrayOutput) ToAggregateRouteResponseArrayOutput() AggregateRouteResponseArrayOutput {
	return o
}

func (o AggregateRouteResponseArrayOutput) ToAggregateRouteResponseArrayOutputWithContext(ctx context.Context) AggregateRouteResponseArrayOutput {
	return o
}

func (o AggregateRouteResponseArrayOutput) Index(i pulumi.IntInput) AggregateRouteResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AggregateRouteResponse {
		return vs[0].([]AggregateRouteResponse)[vs[1].(int)]
	}).(AggregateRouteResponseOutput)
}

// BFD configuration properties
type BfdConfiguration struct {
	// Interval in milliseconds. Example: 300.
	IntervalInMilliSeconds *int `pulumi:"intervalInMilliSeconds"`
	// Multiplier for the Bfd Configuration. Example: 5.
	Multiplier *int `pulumi:"multiplier"`
}

// Defaults sets the appropriate defaults for BfdConfiguration
func (val *BfdConfiguration) Defaults() *BfdConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IntervalInMilliSeconds == nil {
		intervalInMilliSeconds_ := 300
		tmp.IntervalInMilliSeconds = &intervalInMilliSeconds_
	}
	if tmp.Multiplier == nil {
		multiplier_ := 5
		tmp.Multiplier = &multiplier_
	}
	return &tmp
}

// BfdConfigurationInput is an input type that accepts BfdConfigurationArgs and BfdConfigurationOutput values.
// You can construct a concrete instance of `BfdConfigurationInput` via:
//
//	BfdConfigurationArgs{...}
type BfdConfigurationInput interface {
	pulumi.Input

	ToBfdConfigurationOutput() BfdConfigurationOutput
	ToBfdConfigurationOutputWithContext(context.Context) BfdConfigurationOutput
}

// BFD configuration properties
type BfdConfigurationArgs struct {
	// Interval in milliseconds. Example: 300.
	IntervalInMilliSeconds pulumi.IntPtrInput `pulumi:"intervalInMilliSeconds"`
	// Multiplier for the Bfd Configuration. Example: 5.
	Multiplier pulumi.IntPtrInput `pulumi:"multiplier"`
}

// Defaults sets the appropriate defaults for BfdConfigurationArgs
func (val *BfdConfigurationArgs) Defaults() *BfdConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IntervalInMilliSeconds == nil {
		tmp.IntervalInMilliSeconds = pulumi.IntPtr(300)
	}
	if tmp.Multiplier == nil {
		tmp.Multiplier = pulumi.IntPtr(5)
	}
	return &tmp
}
func (BfdConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdConfiguration)(nil)).Elem()
}

func (i BfdConfigurationArgs) ToBfdConfigurationOutput() BfdConfigurationOutput {
	return i.ToBfdConfigurationOutputWithContext(context.Background())
}

func (i BfdConfigurationArgs) ToBfdConfigurationOutputWithContext(ctx context.Context) BfdConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdConfigurationOutput)
}

func (i BfdConfigurationArgs) ToBfdConfigurationPtrOutput() BfdConfigurationPtrOutput {
	return i.ToBfdConfigurationPtrOutputWithContext(context.Background())
}

func (i BfdConfigurationArgs) ToBfdConfigurationPtrOutputWithContext(ctx context.Context) BfdConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdConfigurationOutput).ToBfdConfigurationPtrOutputWithContext(ctx)
}

// BfdConfigurationPtrInput is an input type that accepts BfdConfigurationArgs, BfdConfigurationPtr and BfdConfigurationPtrOutput values.
// You can construct a concrete instance of `BfdConfigurationPtrInput` via:
//
//	        BfdConfigurationArgs{...}
//
//	or:
//
//	        nil
type BfdConfigurationPtrInput interface {
	pulumi.Input

	ToBfdConfigurationPtrOutput() BfdConfigurationPtrOutput
	ToBfdConfigurationPtrOutputWithContext(context.Context) BfdConfigurationPtrOutput
}

type bfdConfigurationPtrType BfdConfigurationArgs

func BfdConfigurationPtr(v *BfdConfigurationArgs) BfdConfigurationPtrInput {
	return (*bfdConfigurationPtrType)(v)
}

func (*bfdConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BfdConfiguration)(nil)).Elem()
}

func (i *bfdConfigurationPtrType) ToBfdConfigurationPtrOutput() BfdConfigurationPtrOutput {
	return i.ToBfdConfigurationPtrOutputWithContext(context.Background())
}

func (i *bfdConfigurationPtrType) ToBfdConfigurationPtrOutputWithContext(ctx context.Context) BfdConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdConfigurationPtrOutput)
}

// BFD configuration properties
type BfdConfigurationOutput struct{ *pulumi.OutputState }

func (BfdConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdConfiguration)(nil)).Elem()
}

func (o BfdConfigurationOutput) ToBfdConfigurationOutput() BfdConfigurationOutput {
	return o
}

func (o BfdConfigurationOutput) ToBfdConfigurationOutputWithContext(ctx context.Context) BfdConfigurationOutput {
	return o
}

func (o BfdConfigurationOutput) ToBfdConfigurationPtrOutput() BfdConfigurationPtrOutput {
	return o.ToBfdConfigurationPtrOutputWithContext(context.Background())
}

func (o BfdConfigurationOutput) ToBfdConfigurationPtrOutputWithContext(ctx context.Context) BfdConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BfdConfiguration) *BfdConfiguration {
		return &v
	}).(BfdConfigurationPtrOutput)
}

// Interval in milliseconds. Example: 300.
func (o BfdConfigurationOutput) IntervalInMilliSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BfdConfiguration) *int { return v.IntervalInMilliSeconds }).(pulumi.IntPtrOutput)
}

// Multiplier for the Bfd Configuration. Example: 5.
func (o BfdConfigurationOutput) Multiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BfdConfiguration) *int { return v.Multiplier }).(pulumi.IntPtrOutput)
}

type BfdConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BfdConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BfdConfiguration)(nil)).Elem()
}

func (o BfdConfigurationPtrOutput) ToBfdConfigurationPtrOutput() BfdConfigurationPtrOutput {
	return o
}

func (o BfdConfigurationPtrOutput) ToBfdConfigurationPtrOutputWithContext(ctx context.Context) BfdConfigurationPtrOutput {
	return o
}

func (o BfdConfigurationPtrOutput) Elem() BfdConfigurationOutput {
	return o.ApplyT(func(v *BfdConfiguration) BfdConfiguration {
		if v != nil {
			return *v
		}
		var ret BfdConfiguration
		return ret
	}).(BfdConfigurationOutput)
}

// Interval in milliseconds. Example: 300.
func (o BfdConfigurationPtrOutput) IntervalInMilliSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BfdConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInMilliSeconds
	}).(pulumi.IntPtrOutput)
}

// Multiplier for the Bfd Configuration. Example: 5.
func (o BfdConfigurationPtrOutput) Multiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BfdConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Multiplier
	}).(pulumi.IntPtrOutput)
}

// BFD configuration properties
type BfdConfigurationResponse struct {
	// Administrative state of the BfdConfiguration. Example: Enabled | Disabled.
	AdministrativeState string `pulumi:"administrativeState"`
	// Interval in milliseconds. Example: 300.
	IntervalInMilliSeconds *int `pulumi:"intervalInMilliSeconds"`
	// Multiplier for the Bfd Configuration. Example: 5.
	Multiplier *int `pulumi:"multiplier"`
}

// Defaults sets the appropriate defaults for BfdConfigurationResponse
func (val *BfdConfigurationResponse) Defaults() *BfdConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.AdministrativeState) {
		tmp.AdministrativeState = "Disabled"
	}
	if tmp.IntervalInMilliSeconds == nil {
		intervalInMilliSeconds_ := 300
		tmp.IntervalInMilliSeconds = &intervalInMilliSeconds_
	}
	if tmp.Multiplier == nil {
		multiplier_ := 5
		tmp.Multiplier = &multiplier_
	}
	return &tmp
}

// BFD configuration properties
type BfdConfigurationResponseOutput struct{ *pulumi.OutputState }

func (BfdConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdConfigurationResponse)(nil)).Elem()
}

func (o BfdConfigurationResponseOutput) ToBfdConfigurationResponseOutput() BfdConfigurationResponseOutput {
	return o
}

func (o BfdConfigurationResponseOutput) ToBfdConfigurationResponseOutputWithContext(ctx context.Context) BfdConfigurationResponseOutput {
	return o
}

// Administrative state of the BfdConfiguration. Example: Enabled | Disabled.
func (o BfdConfigurationResponseOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v BfdConfigurationResponse) string { return v.AdministrativeState }).(pulumi.StringOutput)
}

// Interval in milliseconds. Example: 300.
func (o BfdConfigurationResponseOutput) IntervalInMilliSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BfdConfigurationResponse) *int { return v.IntervalInMilliSeconds }).(pulumi.IntPtrOutput)
}

// Multiplier for the Bfd Configuration. Example: 5.
func (o BfdConfigurationResponseOutput) Multiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BfdConfigurationResponse) *int { return v.Multiplier }).(pulumi.IntPtrOutput)
}

type BfdConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (BfdConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BfdConfigurationResponse)(nil)).Elem()
}

func (o BfdConfigurationResponsePtrOutput) ToBfdConfigurationResponsePtrOutput() BfdConfigurationResponsePtrOutput {
	return o
}

func (o BfdConfigurationResponsePtrOutput) ToBfdConfigurationResponsePtrOutputWithContext(ctx context.Context) BfdConfigurationResponsePtrOutput {
	return o
}

func (o BfdConfigurationResponsePtrOutput) Elem() BfdConfigurationResponseOutput {
	return o.ApplyT(func(v *BfdConfigurationResponse) BfdConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret BfdConfigurationResponse
		return ret
	}).(BfdConfigurationResponseOutput)
}

// Administrative state of the BfdConfiguration. Example: Enabled | Disabled.
func (o BfdConfigurationResponsePtrOutput) AdministrativeState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BfdConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdministrativeState
	}).(pulumi.StringPtrOutput)
}

// Interval in milliseconds. Example: 300.
func (o BfdConfigurationResponsePtrOutput) IntervalInMilliSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BfdConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInMilliSeconds
	}).(pulumi.IntPtrOutput)
}

// Multiplier for the Bfd Configuration. Example: 5.
func (o BfdConfigurationResponsePtrOutput) Multiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BfdConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Multiplier
	}).(pulumi.IntPtrOutput)
}

// Dynamic match configuration object.
type CommonDynamicMatchConfiguration struct {
	// List of IP Groups.
	IpGroups []IpGroupProperties `pulumi:"ipGroups"`
	// List of the port groups.
	PortGroups []PortGroupProperties `pulumi:"portGroups"`
	// List of vlan groups.
	VlanGroups []VlanGroupProperties `pulumi:"vlanGroups"`
}

// CommonDynamicMatchConfigurationInput is an input type that accepts CommonDynamicMatchConfigurationArgs and CommonDynamicMatchConfigurationOutput values.
// You can construct a concrete instance of `CommonDynamicMatchConfigurationInput` via:
//
//	CommonDynamicMatchConfigurationArgs{...}
type CommonDynamicMatchConfigurationInput interface {
	pulumi.Input

	ToCommonDynamicMatchConfigurationOutput() CommonDynamicMatchConfigurationOutput
	ToCommonDynamicMatchConfigurationOutputWithContext(context.Context) CommonDynamicMatchConfigurationOutput
}

// Dynamic match configuration object.
type CommonDynamicMatchConfigurationArgs struct {
	// List of IP Groups.
	IpGroups IpGroupPropertiesArrayInput `pulumi:"ipGroups"`
	// List of the port groups.
	PortGroups PortGroupPropertiesArrayInput `pulumi:"portGroups"`
	// List of vlan groups.
	VlanGroups VlanGroupPropertiesArrayInput `pulumi:"vlanGroups"`
}

func (CommonDynamicMatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDynamicMatchConfiguration)(nil)).Elem()
}

func (i CommonDynamicMatchConfigurationArgs) ToCommonDynamicMatchConfigurationOutput() CommonDynamicMatchConfigurationOutput {
	return i.ToCommonDynamicMatchConfigurationOutputWithContext(context.Background())
}

func (i CommonDynamicMatchConfigurationArgs) ToCommonDynamicMatchConfigurationOutputWithContext(ctx context.Context) CommonDynamicMatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDynamicMatchConfigurationOutput)
}

// CommonDynamicMatchConfigurationArrayInput is an input type that accepts CommonDynamicMatchConfigurationArray and CommonDynamicMatchConfigurationArrayOutput values.
// You can construct a concrete instance of `CommonDynamicMatchConfigurationArrayInput` via:
//
//	CommonDynamicMatchConfigurationArray{ CommonDynamicMatchConfigurationArgs{...} }
type CommonDynamicMatchConfigurationArrayInput interface {
	pulumi.Input

	ToCommonDynamicMatchConfigurationArrayOutput() CommonDynamicMatchConfigurationArrayOutput
	ToCommonDynamicMatchConfigurationArrayOutputWithContext(context.Context) CommonDynamicMatchConfigurationArrayOutput
}

type CommonDynamicMatchConfigurationArray []CommonDynamicMatchConfigurationInput

func (CommonDynamicMatchConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommonDynamicMatchConfiguration)(nil)).Elem()
}

func (i CommonDynamicMatchConfigurationArray) ToCommonDynamicMatchConfigurationArrayOutput() CommonDynamicMatchConfigurationArrayOutput {
	return i.ToCommonDynamicMatchConfigurationArrayOutputWithContext(context.Background())
}

func (i CommonDynamicMatchConfigurationArray) ToCommonDynamicMatchConfigurationArrayOutputWithContext(ctx context.Context) CommonDynamicMatchConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDynamicMatchConfigurationArrayOutput)
}

// Dynamic match configuration object.
type CommonDynamicMatchConfigurationOutput struct{ *pulumi.OutputState }

func (CommonDynamicMatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDynamicMatchConfiguration)(nil)).Elem()
}

func (o CommonDynamicMatchConfigurationOutput) ToCommonDynamicMatchConfigurationOutput() CommonDynamicMatchConfigurationOutput {
	return o
}

func (o CommonDynamicMatchConfigurationOutput) ToCommonDynamicMatchConfigurationOutputWithContext(ctx context.Context) CommonDynamicMatchConfigurationOutput {
	return o
}

// List of IP Groups.
func (o CommonDynamicMatchConfigurationOutput) IpGroups() IpGroupPropertiesArrayOutput {
	return o.ApplyT(func(v CommonDynamicMatchConfiguration) []IpGroupProperties { return v.IpGroups }).(IpGroupPropertiesArrayOutput)
}

// List of the port groups.
func (o CommonDynamicMatchConfigurationOutput) PortGroups() PortGroupPropertiesArrayOutput {
	return o.ApplyT(func(v CommonDynamicMatchConfiguration) []PortGroupProperties { return v.PortGroups }).(PortGroupPropertiesArrayOutput)
}

// List of vlan groups.
func (o CommonDynamicMatchConfigurationOutput) VlanGroups() VlanGroupPropertiesArrayOutput {
	return o.ApplyT(func(v CommonDynamicMatchConfiguration) []VlanGroupProperties { return v.VlanGroups }).(VlanGroupPropertiesArrayOutput)
}

type CommonDynamicMatchConfigurationArrayOutput struct{ *pulumi.OutputState }

func (CommonDynamicMatchConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommonDynamicMatchConfiguration)(nil)).Elem()
}

func (o CommonDynamicMatchConfigurationArrayOutput) ToCommonDynamicMatchConfigurationArrayOutput() CommonDynamicMatchConfigurationArrayOutput {
	return o
}

func (o CommonDynamicMatchConfigurationArrayOutput) ToCommonDynamicMatchConfigurationArrayOutputWithContext(ctx context.Context) CommonDynamicMatchConfigurationArrayOutput {
	return o
}

func (o CommonDynamicMatchConfigurationArrayOutput) Index(i pulumi.IntInput) CommonDynamicMatchConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommonDynamicMatchConfiguration {
		return vs[0].([]CommonDynamicMatchConfiguration)[vs[1].(int)]
	}).(CommonDynamicMatchConfigurationOutput)
}

// Dynamic match configuration object.
type CommonDynamicMatchConfigurationResponse struct {
	// List of IP Groups.
	IpGroups []IpGroupPropertiesResponse `pulumi:"ipGroups"`
	// List of the port groups.
	PortGroups []PortGroupPropertiesResponse `pulumi:"portGroups"`
	// List of vlan groups.
	VlanGroups []VlanGroupPropertiesResponse `pulumi:"vlanGroups"`
}

// Dynamic match configuration object.
type CommonDynamicMatchConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CommonDynamicMatchConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDynamicMatchConfigurationResponse)(nil)).Elem()
}

func (o CommonDynamicMatchConfigurationResponseOutput) ToCommonDynamicMatchConfigurationResponseOutput() CommonDynamicMatchConfigurationResponseOutput {
	return o
}

func (o CommonDynamicMatchConfigurationResponseOutput) ToCommonDynamicMatchConfigurationResponseOutputWithContext(ctx context.Context) CommonDynamicMatchConfigurationResponseOutput {
	return o
}

// List of IP Groups.
func (o CommonDynamicMatchConfigurationResponseOutput) IpGroups() IpGroupPropertiesResponseArrayOutput {
	return o.ApplyT(func(v CommonDynamicMatchConfigurationResponse) []IpGroupPropertiesResponse { return v.IpGroups }).(IpGroupPropertiesResponseArrayOutput)
}

// List of the port groups.
func (o CommonDynamicMatchConfigurationResponseOutput) PortGroups() PortGroupPropertiesResponseArrayOutput {
	return o.ApplyT(func(v CommonDynamicMatchConfigurationResponse) []PortGroupPropertiesResponse { return v.PortGroups }).(PortGroupPropertiesResponseArrayOutput)
}

// List of vlan groups.
func (o CommonDynamicMatchConfigurationResponseOutput) VlanGroups() VlanGroupPropertiesResponseArrayOutput {
	return o.ApplyT(func(v CommonDynamicMatchConfigurationResponse) []VlanGroupPropertiesResponse { return v.VlanGroups }).(VlanGroupPropertiesResponseArrayOutput)
}

type CommonDynamicMatchConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (CommonDynamicMatchConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommonDynamicMatchConfigurationResponse)(nil)).Elem()
}

func (o CommonDynamicMatchConfigurationResponseArrayOutput) ToCommonDynamicMatchConfigurationResponseArrayOutput() CommonDynamicMatchConfigurationResponseArrayOutput {
	return o
}

func (o CommonDynamicMatchConfigurationResponseArrayOutput) ToCommonDynamicMatchConfigurationResponseArrayOutputWithContext(ctx context.Context) CommonDynamicMatchConfigurationResponseArrayOutput {
	return o
}

func (o CommonDynamicMatchConfigurationResponseArrayOutput) Index(i pulumi.IntInput) CommonDynamicMatchConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommonDynamicMatchConfigurationResponse {
		return vs[0].([]CommonDynamicMatchConfigurationResponse)[vs[1].(int)]
	}).(CommonDynamicMatchConfigurationResponseOutput)
}

// Connected Subnet properties.
type ConnectedSubnet struct {
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Prefix of the Connected Subnet.
	Prefix string `pulumi:"prefix"`
}

// ConnectedSubnetInput is an input type that accepts ConnectedSubnetArgs and ConnectedSubnetOutput values.
// You can construct a concrete instance of `ConnectedSubnetInput` via:
//
//	ConnectedSubnetArgs{...}
type ConnectedSubnetInput interface {
	pulumi.Input

	ToConnectedSubnetOutput() ConnectedSubnetOutput
	ToConnectedSubnetOutputWithContext(context.Context) ConnectedSubnetOutput
}

// Connected Subnet properties.
type ConnectedSubnetArgs struct {
	// Switch configuration description.
	Annotation pulumi.StringPtrInput `pulumi:"annotation"`
	// Prefix of the Connected Subnet.
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (ConnectedSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedSubnet)(nil)).Elem()
}

func (i ConnectedSubnetArgs) ToConnectedSubnetOutput() ConnectedSubnetOutput {
	return i.ToConnectedSubnetOutputWithContext(context.Background())
}

func (i ConnectedSubnetArgs) ToConnectedSubnetOutputWithContext(ctx context.Context) ConnectedSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedSubnetOutput)
}

// ConnectedSubnetArrayInput is an input type that accepts ConnectedSubnetArray and ConnectedSubnetArrayOutput values.
// You can construct a concrete instance of `ConnectedSubnetArrayInput` via:
//
//	ConnectedSubnetArray{ ConnectedSubnetArgs{...} }
type ConnectedSubnetArrayInput interface {
	pulumi.Input

	ToConnectedSubnetArrayOutput() ConnectedSubnetArrayOutput
	ToConnectedSubnetArrayOutputWithContext(context.Context) ConnectedSubnetArrayOutput
}

type ConnectedSubnetArray []ConnectedSubnetInput

func (ConnectedSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectedSubnet)(nil)).Elem()
}

func (i ConnectedSubnetArray) ToConnectedSubnetArrayOutput() ConnectedSubnetArrayOutput {
	return i.ToConnectedSubnetArrayOutputWithContext(context.Background())
}

func (i ConnectedSubnetArray) ToConnectedSubnetArrayOutputWithContext(ctx context.Context) ConnectedSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedSubnetArrayOutput)
}

// Connected Subnet properties.
type ConnectedSubnetOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedSubnet)(nil)).Elem()
}

func (o ConnectedSubnetOutput) ToConnectedSubnetOutput() ConnectedSubnetOutput {
	return o
}

func (o ConnectedSubnetOutput) ToConnectedSubnetOutputWithContext(ctx context.Context) ConnectedSubnetOutput {
	return o
}

// Switch configuration description.
func (o ConnectedSubnetOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectedSubnet) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Prefix of the Connected Subnet.
func (o ConnectedSubnetOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectedSubnet) string { return v.Prefix }).(pulumi.StringOutput)
}

type ConnectedSubnetArrayOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectedSubnet)(nil)).Elem()
}

func (o ConnectedSubnetArrayOutput) ToConnectedSubnetArrayOutput() ConnectedSubnetArrayOutput {
	return o
}

func (o ConnectedSubnetArrayOutput) ToConnectedSubnetArrayOutputWithContext(ctx context.Context) ConnectedSubnetArrayOutput {
	return o
}

func (o ConnectedSubnetArrayOutput) Index(i pulumi.IntInput) ConnectedSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectedSubnet {
		return vs[0].([]ConnectedSubnet)[vs[1].(int)]
	}).(ConnectedSubnetOutput)
}

// Connected Subnet properties.
type ConnectedSubnetResponse struct {
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Prefix of the Connected Subnet.
	Prefix string `pulumi:"prefix"`
}

// Connected Subnet properties.
type ConnectedSubnetResponseOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedSubnetResponse)(nil)).Elem()
}

func (o ConnectedSubnetResponseOutput) ToConnectedSubnetResponseOutput() ConnectedSubnetResponseOutput {
	return o
}

func (o ConnectedSubnetResponseOutput) ToConnectedSubnetResponseOutputWithContext(ctx context.Context) ConnectedSubnetResponseOutput {
	return o
}

// Switch configuration description.
func (o ConnectedSubnetResponseOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectedSubnetResponse) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Prefix of the Connected Subnet.
func (o ConnectedSubnetResponseOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectedSubnetResponse) string { return v.Prefix }).(pulumi.StringOutput)
}

type ConnectedSubnetResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectedSubnetResponse)(nil)).Elem()
}

func (o ConnectedSubnetResponseArrayOutput) ToConnectedSubnetResponseArrayOutput() ConnectedSubnetResponseArrayOutput {
	return o
}

func (o ConnectedSubnetResponseArrayOutput) ToConnectedSubnetResponseArrayOutputWithContext(ctx context.Context) ConnectedSubnetResponseArrayOutput {
	return o
}

func (o ConnectedSubnetResponseArrayOutput) Index(i pulumi.IntInput) ConnectedSubnetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectedSubnetResponse {
		return vs[0].([]ConnectedSubnetResponse)[vs[1].(int)]
	}).(ConnectedSubnetResponseOutput)
}

// Connected Subnet Route Policy properties.
type ConnectedSubnetRoutePolicy struct {
	// Array of ARM Resource ID of the RoutePolicies.
	ExportRoutePolicy *L3ExportRoutePolicy `pulumi:"exportRoutePolicy"`
	// ARM Resource ID of the Route Policy. This is used for the backward compatibility.
	ExportRoutePolicyId *string `pulumi:"exportRoutePolicyId"`
}

// ConnectedSubnetRoutePolicyInput is an input type that accepts ConnectedSubnetRoutePolicyArgs and ConnectedSubnetRoutePolicyOutput values.
// You can construct a concrete instance of `ConnectedSubnetRoutePolicyInput` via:
//
//	ConnectedSubnetRoutePolicyArgs{...}
type ConnectedSubnetRoutePolicyInput interface {
	pulumi.Input

	ToConnectedSubnetRoutePolicyOutput() ConnectedSubnetRoutePolicyOutput
	ToConnectedSubnetRoutePolicyOutputWithContext(context.Context) ConnectedSubnetRoutePolicyOutput
}

// Connected Subnet Route Policy properties.
type ConnectedSubnetRoutePolicyArgs struct {
	// Array of ARM Resource ID of the RoutePolicies.
	ExportRoutePolicy L3ExportRoutePolicyPtrInput `pulumi:"exportRoutePolicy"`
	// ARM Resource ID of the Route Policy. This is used for the backward compatibility.
	ExportRoutePolicyId pulumi.StringPtrInput `pulumi:"exportRoutePolicyId"`
}

func (ConnectedSubnetRoutePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedSubnetRoutePolicy)(nil)).Elem()
}

func (i ConnectedSubnetRoutePolicyArgs) ToConnectedSubnetRoutePolicyOutput() ConnectedSubnetRoutePolicyOutput {
	return i.ToConnectedSubnetRoutePolicyOutputWithContext(context.Background())
}

func (i ConnectedSubnetRoutePolicyArgs) ToConnectedSubnetRoutePolicyOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedSubnetRoutePolicyOutput)
}

func (i ConnectedSubnetRoutePolicyArgs) ToConnectedSubnetRoutePolicyPtrOutput() ConnectedSubnetRoutePolicyPtrOutput {
	return i.ToConnectedSubnetRoutePolicyPtrOutputWithContext(context.Background())
}

func (i ConnectedSubnetRoutePolicyArgs) ToConnectedSubnetRoutePolicyPtrOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedSubnetRoutePolicyOutput).ToConnectedSubnetRoutePolicyPtrOutputWithContext(ctx)
}

// ConnectedSubnetRoutePolicyPtrInput is an input type that accepts ConnectedSubnetRoutePolicyArgs, ConnectedSubnetRoutePolicyPtr and ConnectedSubnetRoutePolicyPtrOutput values.
// You can construct a concrete instance of `ConnectedSubnetRoutePolicyPtrInput` via:
//
//	        ConnectedSubnetRoutePolicyArgs{...}
//
//	or:
//
//	        nil
type ConnectedSubnetRoutePolicyPtrInput interface {
	pulumi.Input

	ToConnectedSubnetRoutePolicyPtrOutput() ConnectedSubnetRoutePolicyPtrOutput
	ToConnectedSubnetRoutePolicyPtrOutputWithContext(context.Context) ConnectedSubnetRoutePolicyPtrOutput
}

type connectedSubnetRoutePolicyPtrType ConnectedSubnetRoutePolicyArgs

func ConnectedSubnetRoutePolicyPtr(v *ConnectedSubnetRoutePolicyArgs) ConnectedSubnetRoutePolicyPtrInput {
	return (*connectedSubnetRoutePolicyPtrType)(v)
}

func (*connectedSubnetRoutePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedSubnetRoutePolicy)(nil)).Elem()
}

func (i *connectedSubnetRoutePolicyPtrType) ToConnectedSubnetRoutePolicyPtrOutput() ConnectedSubnetRoutePolicyPtrOutput {
	return i.ToConnectedSubnetRoutePolicyPtrOutputWithContext(context.Background())
}

func (i *connectedSubnetRoutePolicyPtrType) ToConnectedSubnetRoutePolicyPtrOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedSubnetRoutePolicyPtrOutput)
}

// Connected Subnet Route Policy properties.
type ConnectedSubnetRoutePolicyOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetRoutePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedSubnetRoutePolicy)(nil)).Elem()
}

func (o ConnectedSubnetRoutePolicyOutput) ToConnectedSubnetRoutePolicyOutput() ConnectedSubnetRoutePolicyOutput {
	return o
}

func (o ConnectedSubnetRoutePolicyOutput) ToConnectedSubnetRoutePolicyOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyOutput {
	return o
}

func (o ConnectedSubnetRoutePolicyOutput) ToConnectedSubnetRoutePolicyPtrOutput() ConnectedSubnetRoutePolicyPtrOutput {
	return o.ToConnectedSubnetRoutePolicyPtrOutputWithContext(context.Background())
}

func (o ConnectedSubnetRoutePolicyOutput) ToConnectedSubnetRoutePolicyPtrOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectedSubnetRoutePolicy) *ConnectedSubnetRoutePolicy {
		return &v
	}).(ConnectedSubnetRoutePolicyPtrOutput)
}

// Array of ARM Resource ID of the RoutePolicies.
func (o ConnectedSubnetRoutePolicyOutput) ExportRoutePolicy() L3ExportRoutePolicyPtrOutput {
	return o.ApplyT(func(v ConnectedSubnetRoutePolicy) *L3ExportRoutePolicy { return v.ExportRoutePolicy }).(L3ExportRoutePolicyPtrOutput)
}

// ARM Resource ID of the Route Policy. This is used for the backward compatibility.
func (o ConnectedSubnetRoutePolicyOutput) ExportRoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectedSubnetRoutePolicy) *string { return v.ExportRoutePolicyId }).(pulumi.StringPtrOutput)
}

type ConnectedSubnetRoutePolicyPtrOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetRoutePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedSubnetRoutePolicy)(nil)).Elem()
}

func (o ConnectedSubnetRoutePolicyPtrOutput) ToConnectedSubnetRoutePolicyPtrOutput() ConnectedSubnetRoutePolicyPtrOutput {
	return o
}

func (o ConnectedSubnetRoutePolicyPtrOutput) ToConnectedSubnetRoutePolicyPtrOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyPtrOutput {
	return o
}

func (o ConnectedSubnetRoutePolicyPtrOutput) Elem() ConnectedSubnetRoutePolicyOutput {
	return o.ApplyT(func(v *ConnectedSubnetRoutePolicy) ConnectedSubnetRoutePolicy {
		if v != nil {
			return *v
		}
		var ret ConnectedSubnetRoutePolicy
		return ret
	}).(ConnectedSubnetRoutePolicyOutput)
}

// Array of ARM Resource ID of the RoutePolicies.
func (o ConnectedSubnetRoutePolicyPtrOutput) ExportRoutePolicy() L3ExportRoutePolicyPtrOutput {
	return o.ApplyT(func(v *ConnectedSubnetRoutePolicy) *L3ExportRoutePolicy {
		if v == nil {
			return nil
		}
		return v.ExportRoutePolicy
	}).(L3ExportRoutePolicyPtrOutput)
}

// ARM Resource ID of the Route Policy. This is used for the backward compatibility.
func (o ConnectedSubnetRoutePolicyPtrOutput) ExportRoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedSubnetRoutePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ExportRoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Connected Subnet Route Policy properties.
type ConnectedSubnetRoutePolicyResponse struct {
	// Array of ARM Resource ID of the RoutePolicies.
	ExportRoutePolicy *L3ExportRoutePolicyResponse `pulumi:"exportRoutePolicy"`
	// ARM Resource ID of the Route Policy. This is used for the backward compatibility.
	ExportRoutePolicyId *string `pulumi:"exportRoutePolicyId"`
}

// Connected Subnet Route Policy properties.
type ConnectedSubnetRoutePolicyResponseOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetRoutePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedSubnetRoutePolicyResponse)(nil)).Elem()
}

func (o ConnectedSubnetRoutePolicyResponseOutput) ToConnectedSubnetRoutePolicyResponseOutput() ConnectedSubnetRoutePolicyResponseOutput {
	return o
}

func (o ConnectedSubnetRoutePolicyResponseOutput) ToConnectedSubnetRoutePolicyResponseOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyResponseOutput {
	return o
}

// Array of ARM Resource ID of the RoutePolicies.
func (o ConnectedSubnetRoutePolicyResponseOutput) ExportRoutePolicy() L3ExportRoutePolicyResponsePtrOutput {
	return o.ApplyT(func(v ConnectedSubnetRoutePolicyResponse) *L3ExportRoutePolicyResponse { return v.ExportRoutePolicy }).(L3ExportRoutePolicyResponsePtrOutput)
}

// ARM Resource ID of the Route Policy. This is used for the backward compatibility.
func (o ConnectedSubnetRoutePolicyResponseOutput) ExportRoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectedSubnetRoutePolicyResponse) *string { return v.ExportRoutePolicyId }).(pulumi.StringPtrOutput)
}

type ConnectedSubnetRoutePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectedSubnetRoutePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedSubnetRoutePolicyResponse)(nil)).Elem()
}

func (o ConnectedSubnetRoutePolicyResponsePtrOutput) ToConnectedSubnetRoutePolicyResponsePtrOutput() ConnectedSubnetRoutePolicyResponsePtrOutput {
	return o
}

func (o ConnectedSubnetRoutePolicyResponsePtrOutput) ToConnectedSubnetRoutePolicyResponsePtrOutputWithContext(ctx context.Context) ConnectedSubnetRoutePolicyResponsePtrOutput {
	return o
}

func (o ConnectedSubnetRoutePolicyResponsePtrOutput) Elem() ConnectedSubnetRoutePolicyResponseOutput {
	return o.ApplyT(func(v *ConnectedSubnetRoutePolicyResponse) ConnectedSubnetRoutePolicyResponse {
		if v != nil {
			return *v
		}
		var ret ConnectedSubnetRoutePolicyResponse
		return ret
	}).(ConnectedSubnetRoutePolicyResponseOutput)
}

// Array of ARM Resource ID of the RoutePolicies.
func (o ConnectedSubnetRoutePolicyResponsePtrOutput) ExportRoutePolicy() L3ExportRoutePolicyResponsePtrOutput {
	return o.ApplyT(func(v *ConnectedSubnetRoutePolicyResponse) *L3ExportRoutePolicyResponse {
		if v == nil {
			return nil
		}
		return v.ExportRoutePolicy
	}).(L3ExportRoutePolicyResponsePtrOutput)
}

// ARM Resource ID of the Route Policy. This is used for the backward compatibility.
func (o ConnectedSubnetRoutePolicyResponsePtrOutput) ExportRoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedSubnetRoutePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExportRoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Network Fabric Controller services.
type ControllerServicesResponse struct {
	// The IPv4 Address space is optional, if the value is not defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute.
	Ipv4AddressSpaces []string `pulumi:"ipv4AddressSpaces"`
	// The IPv6 is not supported right now.
	Ipv6AddressSpaces []string `pulumi:"ipv6AddressSpaces"`
}

// Network Fabric Controller services.
type ControllerServicesResponseOutput struct{ *pulumi.OutputState }

func (ControllerServicesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerServicesResponse)(nil)).Elem()
}

func (o ControllerServicesResponseOutput) ToControllerServicesResponseOutput() ControllerServicesResponseOutput {
	return o
}

func (o ControllerServicesResponseOutput) ToControllerServicesResponseOutputWithContext(ctx context.Context) ControllerServicesResponseOutput {
	return o
}

// The IPv4 Address space is optional, if the value is not defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute.
func (o ControllerServicesResponseOutput) Ipv4AddressSpaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerServicesResponse) []string { return v.Ipv4AddressSpaces }).(pulumi.StringArrayOutput)
}

// The IPv6 is not supported right now.
func (o ControllerServicesResponseOutput) Ipv6AddressSpaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerServicesResponse) []string { return v.Ipv6AddressSpaces }).(pulumi.StringArrayOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The resource management error additional info.
type ErrorAdditionalInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutput() ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseOutput {
	return o
}

// The additional info.
func (o ErrorAdditionalInfoResponseOutput) Info() pulumi.AnyOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) interface{} { return v.Info }).(pulumi.AnyOutput)
}

// The additional info type.
func (o ErrorAdditionalInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ErrorAdditionalInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutput() ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) Index(i pulumi.IntInput) ErrorAdditionalInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorAdditionalInfoResponse {
		return vs[0].([]ErrorAdditionalInfoResponse)[vs[1].(int)]
	}).(ErrorAdditionalInfoResponseOutput)
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// The error detail.
type ErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutput() ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutputWithContext(ctx context.Context) ErrorDetailResponseOutput {
	return o
}

// The error additional info.
func (o ErrorDetailResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o ErrorDetailResponseOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorDetailResponse { return v.Details }).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The error target.
func (o ErrorDetailResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorDetailResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutput() ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutputWithContext(ctx context.Context) ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) Elem() ErrorDetailResponseOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) ErrorDetailResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDetailResponse
		return ret
	}).(ErrorDetailResponseOutput)
}

// The error additional info.
func (o ErrorDetailResponsePtrOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorAdditionalInfoResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalInfo
	}).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// The error details.
func (o ErrorDetailResponsePtrOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorDetailResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The error target.
func (o ErrorDetailResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutput() ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutputWithContext(ctx context.Context) ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) ErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDetailResponse {
		return vs[0].([]ErrorDetailResponse)[vs[1].(int)]
	}).(ErrorDetailResponseOutput)
}

// Export Route Policy either IPv4 or IPv6.
type ExportRoutePolicy struct {
	// ARM resource ID of RoutePolicy.
	ExportIpv4RoutePolicyId *string `pulumi:"exportIpv4RoutePolicyId"`
	// ARM resource ID of RoutePolicy.
	ExportIpv6RoutePolicyId *string `pulumi:"exportIpv6RoutePolicyId"`
}

// ExportRoutePolicyInput is an input type that accepts ExportRoutePolicyArgs and ExportRoutePolicyOutput values.
// You can construct a concrete instance of `ExportRoutePolicyInput` via:
//
//	ExportRoutePolicyArgs{...}
type ExportRoutePolicyInput interface {
	pulumi.Input

	ToExportRoutePolicyOutput() ExportRoutePolicyOutput
	ToExportRoutePolicyOutputWithContext(context.Context) ExportRoutePolicyOutput
}

// Export Route Policy either IPv4 or IPv6.
type ExportRoutePolicyArgs struct {
	// ARM resource ID of RoutePolicy.
	ExportIpv4RoutePolicyId pulumi.StringPtrInput `pulumi:"exportIpv4RoutePolicyId"`
	// ARM resource ID of RoutePolicy.
	ExportIpv6RoutePolicyId pulumi.StringPtrInput `pulumi:"exportIpv6RoutePolicyId"`
}

func (ExportRoutePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRoutePolicy)(nil)).Elem()
}

func (i ExportRoutePolicyArgs) ToExportRoutePolicyOutput() ExportRoutePolicyOutput {
	return i.ToExportRoutePolicyOutputWithContext(context.Background())
}

func (i ExportRoutePolicyArgs) ToExportRoutePolicyOutputWithContext(ctx context.Context) ExportRoutePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRoutePolicyOutput)
}

func (i ExportRoutePolicyArgs) ToExportRoutePolicyPtrOutput() ExportRoutePolicyPtrOutput {
	return i.ToExportRoutePolicyPtrOutputWithContext(context.Background())
}

func (i ExportRoutePolicyArgs) ToExportRoutePolicyPtrOutputWithContext(ctx context.Context) ExportRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRoutePolicyOutput).ToExportRoutePolicyPtrOutputWithContext(ctx)
}

// ExportRoutePolicyPtrInput is an input type that accepts ExportRoutePolicyArgs, ExportRoutePolicyPtr and ExportRoutePolicyPtrOutput values.
// You can construct a concrete instance of `ExportRoutePolicyPtrInput` via:
//
//	        ExportRoutePolicyArgs{...}
//
//	or:
//
//	        nil
type ExportRoutePolicyPtrInput interface {
	pulumi.Input

	ToExportRoutePolicyPtrOutput() ExportRoutePolicyPtrOutput
	ToExportRoutePolicyPtrOutputWithContext(context.Context) ExportRoutePolicyPtrOutput
}

type exportRoutePolicyPtrType ExportRoutePolicyArgs

func ExportRoutePolicyPtr(v *ExportRoutePolicyArgs) ExportRoutePolicyPtrInput {
	return (*exportRoutePolicyPtrType)(v)
}

func (*exportRoutePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRoutePolicy)(nil)).Elem()
}

func (i *exportRoutePolicyPtrType) ToExportRoutePolicyPtrOutput() ExportRoutePolicyPtrOutput {
	return i.ToExportRoutePolicyPtrOutputWithContext(context.Background())
}

func (i *exportRoutePolicyPtrType) ToExportRoutePolicyPtrOutputWithContext(ctx context.Context) ExportRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRoutePolicyPtrOutput)
}

// Export Route Policy either IPv4 or IPv6.
type ExportRoutePolicyOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRoutePolicy)(nil)).Elem()
}

func (o ExportRoutePolicyOutput) ToExportRoutePolicyOutput() ExportRoutePolicyOutput {
	return o
}

func (o ExportRoutePolicyOutput) ToExportRoutePolicyOutputWithContext(ctx context.Context) ExportRoutePolicyOutput {
	return o
}

func (o ExportRoutePolicyOutput) ToExportRoutePolicyPtrOutput() ExportRoutePolicyPtrOutput {
	return o.ToExportRoutePolicyPtrOutputWithContext(context.Background())
}

func (o ExportRoutePolicyOutput) ToExportRoutePolicyPtrOutputWithContext(ctx context.Context) ExportRoutePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportRoutePolicy) *ExportRoutePolicy {
		return &v
	}).(ExportRoutePolicyPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicy) *string { return v.ExportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicy) *string { return v.ExportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ExportRoutePolicyPtrOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRoutePolicy)(nil)).Elem()
}

func (o ExportRoutePolicyPtrOutput) ToExportRoutePolicyPtrOutput() ExportRoutePolicyPtrOutput {
	return o
}

func (o ExportRoutePolicyPtrOutput) ToExportRoutePolicyPtrOutputWithContext(ctx context.Context) ExportRoutePolicyPtrOutput {
	return o
}

func (o ExportRoutePolicyPtrOutput) Elem() ExportRoutePolicyOutput {
	return o.ApplyT(func(v *ExportRoutePolicy) ExportRoutePolicy {
		if v != nil {
			return *v
		}
		var ret ExportRoutePolicy
		return ret
	}).(ExportRoutePolicyOutput)
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyPtrOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyPtrOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Export Route Policy Configuration.
type ExportRoutePolicyInformation struct {
	// Export IPv4 Route Policy Id.
	ExportIpv4RoutePolicyId *string `pulumi:"exportIpv4RoutePolicyId"`
	// Export IPv6 Route Policy Id.
	ExportIpv6RoutePolicyId *string `pulumi:"exportIpv6RoutePolicyId"`
}

// ExportRoutePolicyInformationInput is an input type that accepts ExportRoutePolicyInformationArgs and ExportRoutePolicyInformationOutput values.
// You can construct a concrete instance of `ExportRoutePolicyInformationInput` via:
//
//	ExportRoutePolicyInformationArgs{...}
type ExportRoutePolicyInformationInput interface {
	pulumi.Input

	ToExportRoutePolicyInformationOutput() ExportRoutePolicyInformationOutput
	ToExportRoutePolicyInformationOutputWithContext(context.Context) ExportRoutePolicyInformationOutput
}

// Export Route Policy Configuration.
type ExportRoutePolicyInformationArgs struct {
	// Export IPv4 Route Policy Id.
	ExportIpv4RoutePolicyId pulumi.StringPtrInput `pulumi:"exportIpv4RoutePolicyId"`
	// Export IPv6 Route Policy Id.
	ExportIpv6RoutePolicyId pulumi.StringPtrInput `pulumi:"exportIpv6RoutePolicyId"`
}

func (ExportRoutePolicyInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRoutePolicyInformation)(nil)).Elem()
}

func (i ExportRoutePolicyInformationArgs) ToExportRoutePolicyInformationOutput() ExportRoutePolicyInformationOutput {
	return i.ToExportRoutePolicyInformationOutputWithContext(context.Background())
}

func (i ExportRoutePolicyInformationArgs) ToExportRoutePolicyInformationOutputWithContext(ctx context.Context) ExportRoutePolicyInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRoutePolicyInformationOutput)
}

func (i ExportRoutePolicyInformationArgs) ToExportRoutePolicyInformationPtrOutput() ExportRoutePolicyInformationPtrOutput {
	return i.ToExportRoutePolicyInformationPtrOutputWithContext(context.Background())
}

func (i ExportRoutePolicyInformationArgs) ToExportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ExportRoutePolicyInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRoutePolicyInformationOutput).ToExportRoutePolicyInformationPtrOutputWithContext(ctx)
}

// ExportRoutePolicyInformationPtrInput is an input type that accepts ExportRoutePolicyInformationArgs, ExportRoutePolicyInformationPtr and ExportRoutePolicyInformationPtrOutput values.
// You can construct a concrete instance of `ExportRoutePolicyInformationPtrInput` via:
//
//	        ExportRoutePolicyInformationArgs{...}
//
//	or:
//
//	        nil
type ExportRoutePolicyInformationPtrInput interface {
	pulumi.Input

	ToExportRoutePolicyInformationPtrOutput() ExportRoutePolicyInformationPtrOutput
	ToExportRoutePolicyInformationPtrOutputWithContext(context.Context) ExportRoutePolicyInformationPtrOutput
}

type exportRoutePolicyInformationPtrType ExportRoutePolicyInformationArgs

func ExportRoutePolicyInformationPtr(v *ExportRoutePolicyInformationArgs) ExportRoutePolicyInformationPtrInput {
	return (*exportRoutePolicyInformationPtrType)(v)
}

func (*exportRoutePolicyInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRoutePolicyInformation)(nil)).Elem()
}

func (i *exportRoutePolicyInformationPtrType) ToExportRoutePolicyInformationPtrOutput() ExportRoutePolicyInformationPtrOutput {
	return i.ToExportRoutePolicyInformationPtrOutputWithContext(context.Background())
}

func (i *exportRoutePolicyInformationPtrType) ToExportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ExportRoutePolicyInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRoutePolicyInformationPtrOutput)
}

// Export Route Policy Configuration.
type ExportRoutePolicyInformationOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRoutePolicyInformation)(nil)).Elem()
}

func (o ExportRoutePolicyInformationOutput) ToExportRoutePolicyInformationOutput() ExportRoutePolicyInformationOutput {
	return o
}

func (o ExportRoutePolicyInformationOutput) ToExportRoutePolicyInformationOutputWithContext(ctx context.Context) ExportRoutePolicyInformationOutput {
	return o
}

func (o ExportRoutePolicyInformationOutput) ToExportRoutePolicyInformationPtrOutput() ExportRoutePolicyInformationPtrOutput {
	return o.ToExportRoutePolicyInformationPtrOutputWithContext(context.Background())
}

func (o ExportRoutePolicyInformationOutput) ToExportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ExportRoutePolicyInformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportRoutePolicyInformation) *ExportRoutePolicyInformation {
		return &v
	}).(ExportRoutePolicyInformationPtrOutput)
}

// Export IPv4 Route Policy Id.
func (o ExportRoutePolicyInformationOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicyInformation) *string { return v.ExportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// Export IPv6 Route Policy Id.
func (o ExportRoutePolicyInformationOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicyInformation) *string { return v.ExportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ExportRoutePolicyInformationPtrOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRoutePolicyInformation)(nil)).Elem()
}

func (o ExportRoutePolicyInformationPtrOutput) ToExportRoutePolicyInformationPtrOutput() ExportRoutePolicyInformationPtrOutput {
	return o
}

func (o ExportRoutePolicyInformationPtrOutput) ToExportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ExportRoutePolicyInformationPtrOutput {
	return o
}

func (o ExportRoutePolicyInformationPtrOutput) Elem() ExportRoutePolicyInformationOutput {
	return o.ApplyT(func(v *ExportRoutePolicyInformation) ExportRoutePolicyInformation {
		if v != nil {
			return *v
		}
		var ret ExportRoutePolicyInformation
		return ret
	}).(ExportRoutePolicyInformationOutput)
}

// Export IPv4 Route Policy Id.
func (o ExportRoutePolicyInformationPtrOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicyInformation) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Export IPv6 Route Policy Id.
func (o ExportRoutePolicyInformationPtrOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicyInformation) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Export Route Policy Configuration.
type ExportRoutePolicyInformationResponse struct {
	// Export IPv4 Route Policy Id.
	ExportIpv4RoutePolicyId *string `pulumi:"exportIpv4RoutePolicyId"`
	// Export IPv6 Route Policy Id.
	ExportIpv6RoutePolicyId *string `pulumi:"exportIpv6RoutePolicyId"`
}

// Export Route Policy Configuration.
type ExportRoutePolicyInformationResponseOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRoutePolicyInformationResponse)(nil)).Elem()
}

func (o ExportRoutePolicyInformationResponseOutput) ToExportRoutePolicyInformationResponseOutput() ExportRoutePolicyInformationResponseOutput {
	return o
}

func (o ExportRoutePolicyInformationResponseOutput) ToExportRoutePolicyInformationResponseOutputWithContext(ctx context.Context) ExportRoutePolicyInformationResponseOutput {
	return o
}

// Export IPv4 Route Policy Id.
func (o ExportRoutePolicyInformationResponseOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicyInformationResponse) *string { return v.ExportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// Export IPv6 Route Policy Id.
func (o ExportRoutePolicyInformationResponseOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicyInformationResponse) *string { return v.ExportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ExportRoutePolicyInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRoutePolicyInformationResponse)(nil)).Elem()
}

func (o ExportRoutePolicyInformationResponsePtrOutput) ToExportRoutePolicyInformationResponsePtrOutput() ExportRoutePolicyInformationResponsePtrOutput {
	return o
}

func (o ExportRoutePolicyInformationResponsePtrOutput) ToExportRoutePolicyInformationResponsePtrOutputWithContext(ctx context.Context) ExportRoutePolicyInformationResponsePtrOutput {
	return o
}

func (o ExportRoutePolicyInformationResponsePtrOutput) Elem() ExportRoutePolicyInformationResponseOutput {
	return o.ApplyT(func(v *ExportRoutePolicyInformationResponse) ExportRoutePolicyInformationResponse {
		if v != nil {
			return *v
		}
		var ret ExportRoutePolicyInformationResponse
		return ret
	}).(ExportRoutePolicyInformationResponseOutput)
}

// Export IPv4 Route Policy Id.
func (o ExportRoutePolicyInformationResponsePtrOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicyInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Export IPv6 Route Policy Id.
func (o ExportRoutePolicyInformationResponsePtrOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicyInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Export Route Policy either IPv4 or IPv6.
type ExportRoutePolicyResponse struct {
	// ARM resource ID of RoutePolicy.
	ExportIpv4RoutePolicyId *string `pulumi:"exportIpv4RoutePolicyId"`
	// ARM resource ID of RoutePolicy.
	ExportIpv6RoutePolicyId *string `pulumi:"exportIpv6RoutePolicyId"`
}

// Export Route Policy either IPv4 or IPv6.
type ExportRoutePolicyResponseOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRoutePolicyResponse)(nil)).Elem()
}

func (o ExportRoutePolicyResponseOutput) ToExportRoutePolicyResponseOutput() ExportRoutePolicyResponseOutput {
	return o
}

func (o ExportRoutePolicyResponseOutput) ToExportRoutePolicyResponseOutputWithContext(ctx context.Context) ExportRoutePolicyResponseOutput {
	return o
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyResponseOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicyResponse) *string { return v.ExportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyResponseOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRoutePolicyResponse) *string { return v.ExportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ExportRoutePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportRoutePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRoutePolicyResponse)(nil)).Elem()
}

func (o ExportRoutePolicyResponsePtrOutput) ToExportRoutePolicyResponsePtrOutput() ExportRoutePolicyResponsePtrOutput {
	return o
}

func (o ExportRoutePolicyResponsePtrOutput) ToExportRoutePolicyResponsePtrOutputWithContext(ctx context.Context) ExportRoutePolicyResponsePtrOutput {
	return o
}

func (o ExportRoutePolicyResponsePtrOutput) Elem() ExportRoutePolicyResponseOutput {
	return o.ApplyT(func(v *ExportRoutePolicyResponse) ExportRoutePolicyResponse {
		if v != nil {
			return *v
		}
		var ret ExportRoutePolicyResponse
		return ret
	}).(ExportRoutePolicyResponseOutput)
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyResponsePtrOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ExportRoutePolicyResponsePtrOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRoutePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service.
type ExpressRouteConnectionInformation struct {
	// Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.
	ExpressRouteAuthorizationKey string `pulumi:"expressRouteAuthorizationKey"`
	// The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.
	ExpressRouteCircuitId string `pulumi:"expressRouteCircuitId"`
}

// ExpressRouteConnectionInformationInput is an input type that accepts ExpressRouteConnectionInformationArgs and ExpressRouteConnectionInformationOutput values.
// You can construct a concrete instance of `ExpressRouteConnectionInformationInput` via:
//
//	ExpressRouteConnectionInformationArgs{...}
type ExpressRouteConnectionInformationInput interface {
	pulumi.Input

	ToExpressRouteConnectionInformationOutput() ExpressRouteConnectionInformationOutput
	ToExpressRouteConnectionInformationOutputWithContext(context.Context) ExpressRouteConnectionInformationOutput
}

// The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service.
type ExpressRouteConnectionInformationArgs struct {
	// Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.
	ExpressRouteAuthorizationKey pulumi.StringInput `pulumi:"expressRouteAuthorizationKey"`
	// The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.
	ExpressRouteCircuitId pulumi.StringInput `pulumi:"expressRouteCircuitId"`
}

func (ExpressRouteConnectionInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressRouteConnectionInformation)(nil)).Elem()
}

func (i ExpressRouteConnectionInformationArgs) ToExpressRouteConnectionInformationOutput() ExpressRouteConnectionInformationOutput {
	return i.ToExpressRouteConnectionInformationOutputWithContext(context.Background())
}

func (i ExpressRouteConnectionInformationArgs) ToExpressRouteConnectionInformationOutputWithContext(ctx context.Context) ExpressRouteConnectionInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteConnectionInformationOutput)
}

// ExpressRouteConnectionInformationArrayInput is an input type that accepts ExpressRouteConnectionInformationArray and ExpressRouteConnectionInformationArrayOutput values.
// You can construct a concrete instance of `ExpressRouteConnectionInformationArrayInput` via:
//
//	ExpressRouteConnectionInformationArray{ ExpressRouteConnectionInformationArgs{...} }
type ExpressRouteConnectionInformationArrayInput interface {
	pulumi.Input

	ToExpressRouteConnectionInformationArrayOutput() ExpressRouteConnectionInformationArrayOutput
	ToExpressRouteConnectionInformationArrayOutputWithContext(context.Context) ExpressRouteConnectionInformationArrayOutput
}

type ExpressRouteConnectionInformationArray []ExpressRouteConnectionInformationInput

func (ExpressRouteConnectionInformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressRouteConnectionInformation)(nil)).Elem()
}

func (i ExpressRouteConnectionInformationArray) ToExpressRouteConnectionInformationArrayOutput() ExpressRouteConnectionInformationArrayOutput {
	return i.ToExpressRouteConnectionInformationArrayOutputWithContext(context.Background())
}

func (i ExpressRouteConnectionInformationArray) ToExpressRouteConnectionInformationArrayOutputWithContext(ctx context.Context) ExpressRouteConnectionInformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteConnectionInformationArrayOutput)
}

// The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service.
type ExpressRouteConnectionInformationOutput struct{ *pulumi.OutputState }

func (ExpressRouteConnectionInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressRouteConnectionInformation)(nil)).Elem()
}

func (o ExpressRouteConnectionInformationOutput) ToExpressRouteConnectionInformationOutput() ExpressRouteConnectionInformationOutput {
	return o
}

func (o ExpressRouteConnectionInformationOutput) ToExpressRouteConnectionInformationOutputWithContext(ctx context.Context) ExpressRouteConnectionInformationOutput {
	return o
}

// Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.
func (o ExpressRouteConnectionInformationOutput) ExpressRouteAuthorizationKey() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressRouteConnectionInformation) string { return v.ExpressRouteAuthorizationKey }).(pulumi.StringOutput)
}

// The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.
func (o ExpressRouteConnectionInformationOutput) ExpressRouteCircuitId() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressRouteConnectionInformation) string { return v.ExpressRouteCircuitId }).(pulumi.StringOutput)
}

type ExpressRouteConnectionInformationArrayOutput struct{ *pulumi.OutputState }

func (ExpressRouteConnectionInformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressRouteConnectionInformation)(nil)).Elem()
}

func (o ExpressRouteConnectionInformationArrayOutput) ToExpressRouteConnectionInformationArrayOutput() ExpressRouteConnectionInformationArrayOutput {
	return o
}

func (o ExpressRouteConnectionInformationArrayOutput) ToExpressRouteConnectionInformationArrayOutputWithContext(ctx context.Context) ExpressRouteConnectionInformationArrayOutput {
	return o
}

func (o ExpressRouteConnectionInformationArrayOutput) Index(i pulumi.IntInput) ExpressRouteConnectionInformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExpressRouteConnectionInformation {
		return vs[0].([]ExpressRouteConnectionInformation)[vs[1].(int)]
	}).(ExpressRouteConnectionInformationOutput)
}

// The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service.
type ExpressRouteConnectionInformationResponse struct {
	// Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.
	ExpressRouteAuthorizationKey string `pulumi:"expressRouteAuthorizationKey"`
	// The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.
	ExpressRouteCircuitId string `pulumi:"expressRouteCircuitId"`
}

// The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service.
type ExpressRouteConnectionInformationResponseOutput struct{ *pulumi.OutputState }

func (ExpressRouteConnectionInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressRouteConnectionInformationResponse)(nil)).Elem()
}

func (o ExpressRouteConnectionInformationResponseOutput) ToExpressRouteConnectionInformationResponseOutput() ExpressRouteConnectionInformationResponseOutput {
	return o
}

func (o ExpressRouteConnectionInformationResponseOutput) ToExpressRouteConnectionInformationResponseOutputWithContext(ctx context.Context) ExpressRouteConnectionInformationResponseOutput {
	return o
}

// Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.
func (o ExpressRouteConnectionInformationResponseOutput) ExpressRouteAuthorizationKey() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressRouteConnectionInformationResponse) string { return v.ExpressRouteAuthorizationKey }).(pulumi.StringOutput)
}

// The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.
func (o ExpressRouteConnectionInformationResponseOutput) ExpressRouteCircuitId() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressRouteConnectionInformationResponse) string { return v.ExpressRouteCircuitId }).(pulumi.StringOutput)
}

type ExpressRouteConnectionInformationResponseArrayOutput struct{ *pulumi.OutputState }

func (ExpressRouteConnectionInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressRouteConnectionInformationResponse)(nil)).Elem()
}

func (o ExpressRouteConnectionInformationResponseArrayOutput) ToExpressRouteConnectionInformationResponseArrayOutput() ExpressRouteConnectionInformationResponseArrayOutput {
	return o
}

func (o ExpressRouteConnectionInformationResponseArrayOutput) ToExpressRouteConnectionInformationResponseArrayOutputWithContext(ctx context.Context) ExpressRouteConnectionInformationResponseArrayOutput {
	return o
}

func (o ExpressRouteConnectionInformationResponseArrayOutput) Index(i pulumi.IntInput) ExpressRouteConnectionInformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExpressRouteConnectionInformationResponse {
		return vs[0].([]ExpressRouteConnectionInformationResponse)[vs[1].(int)]
	}).(ExpressRouteConnectionInformationResponseOutput)
}

// option A properties object
type ExternalNetworkPropertiesOptionAProperties struct {
	// BFD configuration properties
	BfdConfiguration *BfdConfiguration `pulumi:"bfdConfiguration"`
	// Egress Acl. ARM resource ID of Access Control Lists.
	EgressAclId *string `pulumi:"egressAclId"`
	// Ingress Acl. ARM resource ID of Access Control Lists.
	IngressAclId *string `pulumi:"ingressAclId"`
	// MTU to use for option A peering.
	Mtu *int `pulumi:"mtu"`
	// Peer ASN number.Example : 28
	PeerASN float64 `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix *string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix *string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// Vlan identifier. Example : 501
	VlanId int `pulumi:"vlanId"`
}

// Defaults sets the appropriate defaults for ExternalNetworkPropertiesOptionAProperties
func (val *ExternalNetworkPropertiesOptionAProperties) Defaults() *ExternalNetworkPropertiesOptionAProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	if tmp.Mtu == nil {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	return &tmp
}

// ExternalNetworkPropertiesOptionAPropertiesInput is an input type that accepts ExternalNetworkPropertiesOptionAPropertiesArgs and ExternalNetworkPropertiesOptionAPropertiesOutput values.
// You can construct a concrete instance of `ExternalNetworkPropertiesOptionAPropertiesInput` via:
//
//	ExternalNetworkPropertiesOptionAPropertiesArgs{...}
type ExternalNetworkPropertiesOptionAPropertiesInput interface {
	pulumi.Input

	ToExternalNetworkPropertiesOptionAPropertiesOutput() ExternalNetworkPropertiesOptionAPropertiesOutput
	ToExternalNetworkPropertiesOptionAPropertiesOutputWithContext(context.Context) ExternalNetworkPropertiesOptionAPropertiesOutput
}

// option A properties object
type ExternalNetworkPropertiesOptionAPropertiesArgs struct {
	// BFD configuration properties
	BfdConfiguration BfdConfigurationPtrInput `pulumi:"bfdConfiguration"`
	// Egress Acl. ARM resource ID of Access Control Lists.
	EgressAclId pulumi.StringPtrInput `pulumi:"egressAclId"`
	// Ingress Acl. ARM resource ID of Access Control Lists.
	IngressAclId pulumi.StringPtrInput `pulumi:"ingressAclId"`
	// MTU to use for option A peering.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// Peer ASN number.Example : 28
	PeerASN pulumi.Float64Input `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix pulumi.StringPtrInput `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix pulumi.StringPtrInput `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix pulumi.StringPtrInput `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix pulumi.StringPtrInput `pulumi:"secondaryIpv6Prefix"`
	// Vlan identifier. Example : 501
	VlanId pulumi.IntInput `pulumi:"vlanId"`
}

// Defaults sets the appropriate defaults for ExternalNetworkPropertiesOptionAPropertiesArgs
func (val *ExternalNetworkPropertiesOptionAPropertiesArgs) Defaults() *ExternalNetworkPropertiesOptionAPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mtu == nil {
		tmp.Mtu = pulumi.IntPtr(1500)
	}
	return &tmp
}
func (ExternalNetworkPropertiesOptionAPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalNetworkPropertiesOptionAProperties)(nil)).Elem()
}

func (i ExternalNetworkPropertiesOptionAPropertiesArgs) ToExternalNetworkPropertiesOptionAPropertiesOutput() ExternalNetworkPropertiesOptionAPropertiesOutput {
	return i.ToExternalNetworkPropertiesOptionAPropertiesOutputWithContext(context.Background())
}

func (i ExternalNetworkPropertiesOptionAPropertiesArgs) ToExternalNetworkPropertiesOptionAPropertiesOutputWithContext(ctx context.Context) ExternalNetworkPropertiesOptionAPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkPropertiesOptionAPropertiesOutput)
}

func (i ExternalNetworkPropertiesOptionAPropertiesArgs) ToExternalNetworkPropertiesOptionAPropertiesPtrOutput() ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return i.ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(context.Background())
}

func (i ExternalNetworkPropertiesOptionAPropertiesArgs) ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkPropertiesOptionAPropertiesOutput).ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(ctx)
}

// ExternalNetworkPropertiesOptionAPropertiesPtrInput is an input type that accepts ExternalNetworkPropertiesOptionAPropertiesArgs, ExternalNetworkPropertiesOptionAPropertiesPtr and ExternalNetworkPropertiesOptionAPropertiesPtrOutput values.
// You can construct a concrete instance of `ExternalNetworkPropertiesOptionAPropertiesPtrInput` via:
//
//	        ExternalNetworkPropertiesOptionAPropertiesArgs{...}
//
//	or:
//
//	        nil
type ExternalNetworkPropertiesOptionAPropertiesPtrInput interface {
	pulumi.Input

	ToExternalNetworkPropertiesOptionAPropertiesPtrOutput() ExternalNetworkPropertiesOptionAPropertiesPtrOutput
	ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(context.Context) ExternalNetworkPropertiesOptionAPropertiesPtrOutput
}

type externalNetworkPropertiesOptionAPropertiesPtrType ExternalNetworkPropertiesOptionAPropertiesArgs

func ExternalNetworkPropertiesOptionAPropertiesPtr(v *ExternalNetworkPropertiesOptionAPropertiesArgs) ExternalNetworkPropertiesOptionAPropertiesPtrInput {
	return (*externalNetworkPropertiesOptionAPropertiesPtrType)(v)
}

func (*externalNetworkPropertiesOptionAPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNetworkPropertiesOptionAProperties)(nil)).Elem()
}

func (i *externalNetworkPropertiesOptionAPropertiesPtrType) ToExternalNetworkPropertiesOptionAPropertiesPtrOutput() ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return i.ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(context.Background())
}

func (i *externalNetworkPropertiesOptionAPropertiesPtrType) ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNetworkPropertiesOptionAPropertiesPtrOutput)
}

// option A properties object
type ExternalNetworkPropertiesOptionAPropertiesOutput struct{ *pulumi.OutputState }

func (ExternalNetworkPropertiesOptionAPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalNetworkPropertiesOptionAProperties)(nil)).Elem()
}

func (o ExternalNetworkPropertiesOptionAPropertiesOutput) ToExternalNetworkPropertiesOptionAPropertiesOutput() ExternalNetworkPropertiesOptionAPropertiesOutput {
	return o
}

func (o ExternalNetworkPropertiesOptionAPropertiesOutput) ToExternalNetworkPropertiesOptionAPropertiesOutputWithContext(ctx context.Context) ExternalNetworkPropertiesOptionAPropertiesOutput {
	return o
}

func (o ExternalNetworkPropertiesOptionAPropertiesOutput) ToExternalNetworkPropertiesOptionAPropertiesPtrOutput() ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return o.ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(context.Background())
}

func (o ExternalNetworkPropertiesOptionAPropertiesOutput) ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalNetworkPropertiesOptionAProperties) *ExternalNetworkPropertiesOptionAProperties {
		return &v
	}).(ExternalNetworkPropertiesOptionAPropertiesPtrOutput)
}

// BFD configuration properties
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *BfdConfiguration { return v.BfdConfiguration }).(BfdConfigurationPtrOutput)
}

// Egress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) EgressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *string { return v.EgressAclId }).(pulumi.StringPtrOutput)
}

// Ingress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) IngressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *string { return v.IngressAclId }).(pulumi.StringPtrOutput)
}

// MTU to use for option A peering.
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) float64 { return v.PeerASN }).(pulumi.Float64Output)
}

// IPv4 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *string { return v.PrimaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *string { return v.PrimaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *string { return v.SecondaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) *string { return v.SecondaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Vlan identifier. Example : 501
func (o ExternalNetworkPropertiesOptionAPropertiesOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesOptionAProperties) int { return v.VlanId }).(pulumi.IntOutput)
}

type ExternalNetworkPropertiesOptionAPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ExternalNetworkPropertiesOptionAPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNetworkPropertiesOptionAProperties)(nil)).Elem()
}

func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) ToExternalNetworkPropertiesOptionAPropertiesPtrOutput() ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return o
}

func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) ToExternalNetworkPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) ExternalNetworkPropertiesOptionAPropertiesPtrOutput {
	return o
}

func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) Elem() ExternalNetworkPropertiesOptionAPropertiesOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) ExternalNetworkPropertiesOptionAProperties {
		if v != nil {
			return *v
		}
		var ret ExternalNetworkPropertiesOptionAProperties
		return ret
	}).(ExternalNetworkPropertiesOptionAPropertiesOutput)
}

// BFD configuration properties
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *BfdConfiguration {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationPtrOutput)
}

// Egress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) EgressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.EgressAclId
	}).(pulumi.StringPtrOutput)
}

// Ingress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) IngressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.IngressAclId
	}).(pulumi.StringPtrOutput)
}

// MTU to use for option A peering.
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// IPv4 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Vlan identifier. Example : 501
func (o ExternalNetworkPropertiesOptionAPropertiesPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return &v.VlanId
	}).(pulumi.IntPtrOutput)
}

// option A properties object
type ExternalNetworkPropertiesResponseOptionAProperties struct {
	// BFD configuration properties
	BfdConfiguration *BfdConfigurationResponse `pulumi:"bfdConfiguration"`
	// Egress Acl. ARM resource ID of Access Control Lists.
	EgressAclId *string `pulumi:"egressAclId"`
	// Fabric ASN number. Example 65001
	FabricASN float64 `pulumi:"fabricASN"`
	// Ingress Acl. ARM resource ID of Access Control Lists.
	IngressAclId *string `pulumi:"ingressAclId"`
	// MTU to use for option A peering.
	Mtu *int `pulumi:"mtu"`
	// Peer ASN number.Example : 28
	PeerASN float64 `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix *string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix *string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// Vlan identifier. Example : 501
	VlanId int `pulumi:"vlanId"`
}

// Defaults sets the appropriate defaults for ExternalNetworkPropertiesResponseOptionAProperties
func (val *ExternalNetworkPropertiesResponseOptionAProperties) Defaults() *ExternalNetworkPropertiesResponseOptionAProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	if tmp.Mtu == nil {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	return &tmp
}

// option A properties object
type ExternalNetworkPropertiesResponseOptionAPropertiesOutput struct{ *pulumi.OutputState }

func (ExternalNetworkPropertiesResponseOptionAPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalNetworkPropertiesResponseOptionAProperties)(nil)).Elem()
}

func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) ToExternalNetworkPropertiesResponseOptionAPropertiesOutput() ExternalNetworkPropertiesResponseOptionAPropertiesOutput {
	return o
}

func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) ToExternalNetworkPropertiesResponseOptionAPropertiesOutputWithContext(ctx context.Context) ExternalNetworkPropertiesResponseOptionAPropertiesOutput {
	return o
}

// BFD configuration properties
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *BfdConfigurationResponse {
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// Egress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) EgressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *string { return v.EgressAclId }).(pulumi.StringPtrOutput)
}

// Fabric ASN number. Example 65001
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) FabricASN() pulumi.Float64Output {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) float64 { return v.FabricASN }).(pulumi.Float64Output)
}

// Ingress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) IngressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *string { return v.IngressAclId }).(pulumi.StringPtrOutput)
}

// MTU to use for option A peering.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) float64 { return v.PeerASN }).(pulumi.Float64Output)
}

// IPv4 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *string { return v.PrimaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *string { return v.PrimaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *string { return v.SecondaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) *string { return v.SecondaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Vlan identifier. Example : 501
func (o ExternalNetworkPropertiesResponseOptionAPropertiesOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v ExternalNetworkPropertiesResponseOptionAProperties) int { return v.VlanId }).(pulumi.IntOutput)
}

type ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNetworkPropertiesResponseOptionAProperties)(nil)).Elem()
}

func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) ToExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput() ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput {
	return o
}

func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) ToExternalNetworkPropertiesResponseOptionAPropertiesPtrOutputWithContext(ctx context.Context) ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput {
	return o
}

func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) Elem() ExternalNetworkPropertiesResponseOptionAPropertiesOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) ExternalNetworkPropertiesResponseOptionAProperties {
		if v != nil {
			return *v
		}
		var ret ExternalNetworkPropertiesResponseOptionAProperties
		return ret
	}).(ExternalNetworkPropertiesResponseOptionAPropertiesOutput)
}

// BFD configuration properties
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *BfdConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// Egress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) EgressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.EgressAclId
	}).(pulumi.StringPtrOutput)
}

// Fabric ASN number. Example 65001
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) FabricASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *float64 {
		if v == nil {
			return nil
		}
		return &v.FabricASN
	}).(pulumi.Float64PtrOutput)
}

// Ingress Acl. ARM resource ID of Access Control Lists.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) IngressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.IngressAclId
	}).(pulumi.StringPtrOutput)
}

// MTU to use for option A peering.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// IPv4 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Vlan identifier. Example : 501
func (o ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalNetworkPropertiesResponseOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return &v.VlanId
	}).(pulumi.IntPtrOutput)
}

// Option B configuration to be used for Management VPN.
type FabricOptionBProperties struct {
	// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
	ExportRouteTargets []string `pulumi:"exportRouteTargets"`
	// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
	ImportRouteTargets []string `pulumi:"importRouteTargets"`
	// Route Targets to be applied.
	RouteTargets *RouteTargetInformation `pulumi:"routeTargets"`
}

// FabricOptionBPropertiesInput is an input type that accepts FabricOptionBPropertiesArgs and FabricOptionBPropertiesOutput values.
// You can construct a concrete instance of `FabricOptionBPropertiesInput` via:
//
//	FabricOptionBPropertiesArgs{...}
type FabricOptionBPropertiesInput interface {
	pulumi.Input

	ToFabricOptionBPropertiesOutput() FabricOptionBPropertiesOutput
	ToFabricOptionBPropertiesOutputWithContext(context.Context) FabricOptionBPropertiesOutput
}

// Option B configuration to be used for Management VPN.
type FabricOptionBPropertiesArgs struct {
	// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
	ExportRouteTargets pulumi.StringArrayInput `pulumi:"exportRouteTargets"`
	// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
	ImportRouteTargets pulumi.StringArrayInput `pulumi:"importRouteTargets"`
	// Route Targets to be applied.
	RouteTargets RouteTargetInformationPtrInput `pulumi:"routeTargets"`
}

func (FabricOptionBPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricOptionBProperties)(nil)).Elem()
}

func (i FabricOptionBPropertiesArgs) ToFabricOptionBPropertiesOutput() FabricOptionBPropertiesOutput {
	return i.ToFabricOptionBPropertiesOutputWithContext(context.Background())
}

func (i FabricOptionBPropertiesArgs) ToFabricOptionBPropertiesOutputWithContext(ctx context.Context) FabricOptionBPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricOptionBPropertiesOutput)
}

func (i FabricOptionBPropertiesArgs) ToFabricOptionBPropertiesPtrOutput() FabricOptionBPropertiesPtrOutput {
	return i.ToFabricOptionBPropertiesPtrOutputWithContext(context.Background())
}

func (i FabricOptionBPropertiesArgs) ToFabricOptionBPropertiesPtrOutputWithContext(ctx context.Context) FabricOptionBPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricOptionBPropertiesOutput).ToFabricOptionBPropertiesPtrOutputWithContext(ctx)
}

// FabricOptionBPropertiesPtrInput is an input type that accepts FabricOptionBPropertiesArgs, FabricOptionBPropertiesPtr and FabricOptionBPropertiesPtrOutput values.
// You can construct a concrete instance of `FabricOptionBPropertiesPtrInput` via:
//
//	        FabricOptionBPropertiesArgs{...}
//
//	or:
//
//	        nil
type FabricOptionBPropertiesPtrInput interface {
	pulumi.Input

	ToFabricOptionBPropertiesPtrOutput() FabricOptionBPropertiesPtrOutput
	ToFabricOptionBPropertiesPtrOutputWithContext(context.Context) FabricOptionBPropertiesPtrOutput
}

type fabricOptionBPropertiesPtrType FabricOptionBPropertiesArgs

func FabricOptionBPropertiesPtr(v *FabricOptionBPropertiesArgs) FabricOptionBPropertiesPtrInput {
	return (*fabricOptionBPropertiesPtrType)(v)
}

func (*fabricOptionBPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricOptionBProperties)(nil)).Elem()
}

func (i *fabricOptionBPropertiesPtrType) ToFabricOptionBPropertiesPtrOutput() FabricOptionBPropertiesPtrOutput {
	return i.ToFabricOptionBPropertiesPtrOutputWithContext(context.Background())
}

func (i *fabricOptionBPropertiesPtrType) ToFabricOptionBPropertiesPtrOutputWithContext(ctx context.Context) FabricOptionBPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricOptionBPropertiesPtrOutput)
}

// Option B configuration to be used for Management VPN.
type FabricOptionBPropertiesOutput struct{ *pulumi.OutputState }

func (FabricOptionBPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricOptionBProperties)(nil)).Elem()
}

func (o FabricOptionBPropertiesOutput) ToFabricOptionBPropertiesOutput() FabricOptionBPropertiesOutput {
	return o
}

func (o FabricOptionBPropertiesOutput) ToFabricOptionBPropertiesOutputWithContext(ctx context.Context) FabricOptionBPropertiesOutput {
	return o
}

func (o FabricOptionBPropertiesOutput) ToFabricOptionBPropertiesPtrOutput() FabricOptionBPropertiesPtrOutput {
	return o.ToFabricOptionBPropertiesPtrOutputWithContext(context.Background())
}

func (o FabricOptionBPropertiesOutput) ToFabricOptionBPropertiesPtrOutputWithContext(ctx context.Context) FabricOptionBPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FabricOptionBProperties) *FabricOptionBProperties {
		return &v
	}).(FabricOptionBPropertiesPtrOutput)
}

// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
func (o FabricOptionBPropertiesOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FabricOptionBProperties) []string { return v.ExportRouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
func (o FabricOptionBPropertiesOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FabricOptionBProperties) []string { return v.ImportRouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied.
func (o FabricOptionBPropertiesOutput) RouteTargets() RouteTargetInformationPtrOutput {
	return o.ApplyT(func(v FabricOptionBProperties) *RouteTargetInformation { return v.RouteTargets }).(RouteTargetInformationPtrOutput)
}

type FabricOptionBPropertiesPtrOutput struct{ *pulumi.OutputState }

func (FabricOptionBPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricOptionBProperties)(nil)).Elem()
}

func (o FabricOptionBPropertiesPtrOutput) ToFabricOptionBPropertiesPtrOutput() FabricOptionBPropertiesPtrOutput {
	return o
}

func (o FabricOptionBPropertiesPtrOutput) ToFabricOptionBPropertiesPtrOutputWithContext(ctx context.Context) FabricOptionBPropertiesPtrOutput {
	return o
}

func (o FabricOptionBPropertiesPtrOutput) Elem() FabricOptionBPropertiesOutput {
	return o.ApplyT(func(v *FabricOptionBProperties) FabricOptionBProperties {
		if v != nil {
			return *v
		}
		var ret FabricOptionBProperties
		return ret
	}).(FabricOptionBPropertiesOutput)
}

// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
func (o FabricOptionBPropertiesPtrOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FabricOptionBProperties) []string {
		if v == nil {
			return nil
		}
		return v.ExportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
func (o FabricOptionBPropertiesPtrOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FabricOptionBProperties) []string {
		if v == nil {
			return nil
		}
		return v.ImportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied.
func (o FabricOptionBPropertiesPtrOutput) RouteTargets() RouteTargetInformationPtrOutput {
	return o.ApplyT(func(v *FabricOptionBProperties) *RouteTargetInformation {
		if v == nil {
			return nil
		}
		return v.RouteTargets
	}).(RouteTargetInformationPtrOutput)
}

// Option B configuration to be used for Management VPN.
type FabricOptionBPropertiesResponse struct {
	// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
	ExportRouteTargets []string `pulumi:"exportRouteTargets"`
	// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
	ImportRouteTargets []string `pulumi:"importRouteTargets"`
	// Route Targets to be applied.
	RouteTargets *RouteTargetInformationResponse `pulumi:"routeTargets"`
}

// Option B configuration to be used for Management VPN.
type FabricOptionBPropertiesResponseOutput struct{ *pulumi.OutputState }

func (FabricOptionBPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FabricOptionBPropertiesResponse)(nil)).Elem()
}

func (o FabricOptionBPropertiesResponseOutput) ToFabricOptionBPropertiesResponseOutput() FabricOptionBPropertiesResponseOutput {
	return o
}

func (o FabricOptionBPropertiesResponseOutput) ToFabricOptionBPropertiesResponseOutputWithContext(ctx context.Context) FabricOptionBPropertiesResponseOutput {
	return o
}

// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
func (o FabricOptionBPropertiesResponseOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FabricOptionBPropertiesResponse) []string { return v.ExportRouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
func (o FabricOptionBPropertiesResponseOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FabricOptionBPropertiesResponse) []string { return v.ImportRouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied.
func (o FabricOptionBPropertiesResponseOutput) RouteTargets() RouteTargetInformationResponsePtrOutput {
	return o.ApplyT(func(v FabricOptionBPropertiesResponse) *RouteTargetInformationResponse { return v.RouteTargets }).(RouteTargetInformationResponsePtrOutput)
}

type FabricOptionBPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (FabricOptionBPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricOptionBPropertiesResponse)(nil)).Elem()
}

func (o FabricOptionBPropertiesResponsePtrOutput) ToFabricOptionBPropertiesResponsePtrOutput() FabricOptionBPropertiesResponsePtrOutput {
	return o
}

func (o FabricOptionBPropertiesResponsePtrOutput) ToFabricOptionBPropertiesResponsePtrOutputWithContext(ctx context.Context) FabricOptionBPropertiesResponsePtrOutput {
	return o
}

func (o FabricOptionBPropertiesResponsePtrOutput) Elem() FabricOptionBPropertiesResponseOutput {
	return o.ApplyT(func(v *FabricOptionBPropertiesResponse) FabricOptionBPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret FabricOptionBPropertiesResponse
		return ret
	}).(FabricOptionBPropertiesResponseOutput)
}

// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
func (o FabricOptionBPropertiesResponsePtrOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FabricOptionBPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
func (o FabricOptionBPropertiesResponsePtrOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FabricOptionBPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied.
func (o FabricOptionBPropertiesResponsePtrOutput) RouteTargets() RouteTargetInformationResponsePtrOutput {
	return o.ApplyT(func(v *FabricOptionBPropertiesResponse) *RouteTargetInformationResponse {
		if v == nil {
			return nil
		}
		return v.RouteTargets
	}).(RouteTargetInformationResponsePtrOutput)
}

// Import Route Policy either IPv4 or IPv6.
type ImportRoutePolicy struct {
	// ARM resource ID of RoutePolicy.
	ImportIpv4RoutePolicyId *string `pulumi:"importIpv4RoutePolicyId"`
	// ARM resource ID of RoutePolicy.
	ImportIpv6RoutePolicyId *string `pulumi:"importIpv6RoutePolicyId"`
}

// ImportRoutePolicyInput is an input type that accepts ImportRoutePolicyArgs and ImportRoutePolicyOutput values.
// You can construct a concrete instance of `ImportRoutePolicyInput` via:
//
//	ImportRoutePolicyArgs{...}
type ImportRoutePolicyInput interface {
	pulumi.Input

	ToImportRoutePolicyOutput() ImportRoutePolicyOutput
	ToImportRoutePolicyOutputWithContext(context.Context) ImportRoutePolicyOutput
}

// Import Route Policy either IPv4 or IPv6.
type ImportRoutePolicyArgs struct {
	// ARM resource ID of RoutePolicy.
	ImportIpv4RoutePolicyId pulumi.StringPtrInput `pulumi:"importIpv4RoutePolicyId"`
	// ARM resource ID of RoutePolicy.
	ImportIpv6RoutePolicyId pulumi.StringPtrInput `pulumi:"importIpv6RoutePolicyId"`
}

func (ImportRoutePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportRoutePolicy)(nil)).Elem()
}

func (i ImportRoutePolicyArgs) ToImportRoutePolicyOutput() ImportRoutePolicyOutput {
	return i.ToImportRoutePolicyOutputWithContext(context.Background())
}

func (i ImportRoutePolicyArgs) ToImportRoutePolicyOutputWithContext(ctx context.Context) ImportRoutePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportRoutePolicyOutput)
}

func (i ImportRoutePolicyArgs) ToImportRoutePolicyPtrOutput() ImportRoutePolicyPtrOutput {
	return i.ToImportRoutePolicyPtrOutputWithContext(context.Background())
}

func (i ImportRoutePolicyArgs) ToImportRoutePolicyPtrOutputWithContext(ctx context.Context) ImportRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportRoutePolicyOutput).ToImportRoutePolicyPtrOutputWithContext(ctx)
}

// ImportRoutePolicyPtrInput is an input type that accepts ImportRoutePolicyArgs, ImportRoutePolicyPtr and ImportRoutePolicyPtrOutput values.
// You can construct a concrete instance of `ImportRoutePolicyPtrInput` via:
//
//	        ImportRoutePolicyArgs{...}
//
//	or:
//
//	        nil
type ImportRoutePolicyPtrInput interface {
	pulumi.Input

	ToImportRoutePolicyPtrOutput() ImportRoutePolicyPtrOutput
	ToImportRoutePolicyPtrOutputWithContext(context.Context) ImportRoutePolicyPtrOutput
}

type importRoutePolicyPtrType ImportRoutePolicyArgs

func ImportRoutePolicyPtr(v *ImportRoutePolicyArgs) ImportRoutePolicyPtrInput {
	return (*importRoutePolicyPtrType)(v)
}

func (*importRoutePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportRoutePolicy)(nil)).Elem()
}

func (i *importRoutePolicyPtrType) ToImportRoutePolicyPtrOutput() ImportRoutePolicyPtrOutput {
	return i.ToImportRoutePolicyPtrOutputWithContext(context.Background())
}

func (i *importRoutePolicyPtrType) ToImportRoutePolicyPtrOutputWithContext(ctx context.Context) ImportRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportRoutePolicyPtrOutput)
}

// Import Route Policy either IPv4 or IPv6.
type ImportRoutePolicyOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportRoutePolicy)(nil)).Elem()
}

func (o ImportRoutePolicyOutput) ToImportRoutePolicyOutput() ImportRoutePolicyOutput {
	return o
}

func (o ImportRoutePolicyOutput) ToImportRoutePolicyOutputWithContext(ctx context.Context) ImportRoutePolicyOutput {
	return o
}

func (o ImportRoutePolicyOutput) ToImportRoutePolicyPtrOutput() ImportRoutePolicyPtrOutput {
	return o.ToImportRoutePolicyPtrOutputWithContext(context.Background())
}

func (o ImportRoutePolicyOutput) ToImportRoutePolicyPtrOutputWithContext(ctx context.Context) ImportRoutePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImportRoutePolicy) *ImportRoutePolicy {
		return &v
	}).(ImportRoutePolicyPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicy) *string { return v.ImportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicy) *string { return v.ImportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ImportRoutePolicyPtrOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportRoutePolicy)(nil)).Elem()
}

func (o ImportRoutePolicyPtrOutput) ToImportRoutePolicyPtrOutput() ImportRoutePolicyPtrOutput {
	return o
}

func (o ImportRoutePolicyPtrOutput) ToImportRoutePolicyPtrOutputWithContext(ctx context.Context) ImportRoutePolicyPtrOutput {
	return o
}

func (o ImportRoutePolicyPtrOutput) Elem() ImportRoutePolicyOutput {
	return o.ApplyT(func(v *ImportRoutePolicy) ImportRoutePolicy {
		if v != nil {
			return *v
		}
		var ret ImportRoutePolicy
		return ret
	}).(ImportRoutePolicyOutput)
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyPtrOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyPtrOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Import Route Policy Configuration.
type ImportRoutePolicyInformation struct {
	// Import IPv4 Route Policy Id.
	ImportIpv4RoutePolicyId *string `pulumi:"importIpv4RoutePolicyId"`
	// Import IPv6 Route Policy Id.
	ImportIpv6RoutePolicyId *string `pulumi:"importIpv6RoutePolicyId"`
}

// ImportRoutePolicyInformationInput is an input type that accepts ImportRoutePolicyInformationArgs and ImportRoutePolicyInformationOutput values.
// You can construct a concrete instance of `ImportRoutePolicyInformationInput` via:
//
//	ImportRoutePolicyInformationArgs{...}
type ImportRoutePolicyInformationInput interface {
	pulumi.Input

	ToImportRoutePolicyInformationOutput() ImportRoutePolicyInformationOutput
	ToImportRoutePolicyInformationOutputWithContext(context.Context) ImportRoutePolicyInformationOutput
}

// Import Route Policy Configuration.
type ImportRoutePolicyInformationArgs struct {
	// Import IPv4 Route Policy Id.
	ImportIpv4RoutePolicyId pulumi.StringPtrInput `pulumi:"importIpv4RoutePolicyId"`
	// Import IPv6 Route Policy Id.
	ImportIpv6RoutePolicyId pulumi.StringPtrInput `pulumi:"importIpv6RoutePolicyId"`
}

func (ImportRoutePolicyInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportRoutePolicyInformation)(nil)).Elem()
}

func (i ImportRoutePolicyInformationArgs) ToImportRoutePolicyInformationOutput() ImportRoutePolicyInformationOutput {
	return i.ToImportRoutePolicyInformationOutputWithContext(context.Background())
}

func (i ImportRoutePolicyInformationArgs) ToImportRoutePolicyInformationOutputWithContext(ctx context.Context) ImportRoutePolicyInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportRoutePolicyInformationOutput)
}

func (i ImportRoutePolicyInformationArgs) ToImportRoutePolicyInformationPtrOutput() ImportRoutePolicyInformationPtrOutput {
	return i.ToImportRoutePolicyInformationPtrOutputWithContext(context.Background())
}

func (i ImportRoutePolicyInformationArgs) ToImportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ImportRoutePolicyInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportRoutePolicyInformationOutput).ToImportRoutePolicyInformationPtrOutputWithContext(ctx)
}

// ImportRoutePolicyInformationPtrInput is an input type that accepts ImportRoutePolicyInformationArgs, ImportRoutePolicyInformationPtr and ImportRoutePolicyInformationPtrOutput values.
// You can construct a concrete instance of `ImportRoutePolicyInformationPtrInput` via:
//
//	        ImportRoutePolicyInformationArgs{...}
//
//	or:
//
//	        nil
type ImportRoutePolicyInformationPtrInput interface {
	pulumi.Input

	ToImportRoutePolicyInformationPtrOutput() ImportRoutePolicyInformationPtrOutput
	ToImportRoutePolicyInformationPtrOutputWithContext(context.Context) ImportRoutePolicyInformationPtrOutput
}

type importRoutePolicyInformationPtrType ImportRoutePolicyInformationArgs

func ImportRoutePolicyInformationPtr(v *ImportRoutePolicyInformationArgs) ImportRoutePolicyInformationPtrInput {
	return (*importRoutePolicyInformationPtrType)(v)
}

func (*importRoutePolicyInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportRoutePolicyInformation)(nil)).Elem()
}

func (i *importRoutePolicyInformationPtrType) ToImportRoutePolicyInformationPtrOutput() ImportRoutePolicyInformationPtrOutput {
	return i.ToImportRoutePolicyInformationPtrOutputWithContext(context.Background())
}

func (i *importRoutePolicyInformationPtrType) ToImportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ImportRoutePolicyInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportRoutePolicyInformationPtrOutput)
}

// Import Route Policy Configuration.
type ImportRoutePolicyInformationOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportRoutePolicyInformation)(nil)).Elem()
}

func (o ImportRoutePolicyInformationOutput) ToImportRoutePolicyInformationOutput() ImportRoutePolicyInformationOutput {
	return o
}

func (o ImportRoutePolicyInformationOutput) ToImportRoutePolicyInformationOutputWithContext(ctx context.Context) ImportRoutePolicyInformationOutput {
	return o
}

func (o ImportRoutePolicyInformationOutput) ToImportRoutePolicyInformationPtrOutput() ImportRoutePolicyInformationPtrOutput {
	return o.ToImportRoutePolicyInformationPtrOutputWithContext(context.Background())
}

func (o ImportRoutePolicyInformationOutput) ToImportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ImportRoutePolicyInformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImportRoutePolicyInformation) *ImportRoutePolicyInformation {
		return &v
	}).(ImportRoutePolicyInformationPtrOutput)
}

// Import IPv4 Route Policy Id.
func (o ImportRoutePolicyInformationOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicyInformation) *string { return v.ImportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// Import IPv6 Route Policy Id.
func (o ImportRoutePolicyInformationOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicyInformation) *string { return v.ImportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ImportRoutePolicyInformationPtrOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportRoutePolicyInformation)(nil)).Elem()
}

func (o ImportRoutePolicyInformationPtrOutput) ToImportRoutePolicyInformationPtrOutput() ImportRoutePolicyInformationPtrOutput {
	return o
}

func (o ImportRoutePolicyInformationPtrOutput) ToImportRoutePolicyInformationPtrOutputWithContext(ctx context.Context) ImportRoutePolicyInformationPtrOutput {
	return o
}

func (o ImportRoutePolicyInformationPtrOutput) Elem() ImportRoutePolicyInformationOutput {
	return o.ApplyT(func(v *ImportRoutePolicyInformation) ImportRoutePolicyInformation {
		if v != nil {
			return *v
		}
		var ret ImportRoutePolicyInformation
		return ret
	}).(ImportRoutePolicyInformationOutput)
}

// Import IPv4 Route Policy Id.
func (o ImportRoutePolicyInformationPtrOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicyInformation) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Import IPv6 Route Policy Id.
func (o ImportRoutePolicyInformationPtrOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicyInformation) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Import Route Policy Configuration.
type ImportRoutePolicyInformationResponse struct {
	// Import IPv4 Route Policy Id.
	ImportIpv4RoutePolicyId *string `pulumi:"importIpv4RoutePolicyId"`
	// Import IPv6 Route Policy Id.
	ImportIpv6RoutePolicyId *string `pulumi:"importIpv6RoutePolicyId"`
}

// Import Route Policy Configuration.
type ImportRoutePolicyInformationResponseOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportRoutePolicyInformationResponse)(nil)).Elem()
}

func (o ImportRoutePolicyInformationResponseOutput) ToImportRoutePolicyInformationResponseOutput() ImportRoutePolicyInformationResponseOutput {
	return o
}

func (o ImportRoutePolicyInformationResponseOutput) ToImportRoutePolicyInformationResponseOutputWithContext(ctx context.Context) ImportRoutePolicyInformationResponseOutput {
	return o
}

// Import IPv4 Route Policy Id.
func (o ImportRoutePolicyInformationResponseOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicyInformationResponse) *string { return v.ImportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// Import IPv6 Route Policy Id.
func (o ImportRoutePolicyInformationResponseOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicyInformationResponse) *string { return v.ImportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ImportRoutePolicyInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportRoutePolicyInformationResponse)(nil)).Elem()
}

func (o ImportRoutePolicyInformationResponsePtrOutput) ToImportRoutePolicyInformationResponsePtrOutput() ImportRoutePolicyInformationResponsePtrOutput {
	return o
}

func (o ImportRoutePolicyInformationResponsePtrOutput) ToImportRoutePolicyInformationResponsePtrOutputWithContext(ctx context.Context) ImportRoutePolicyInformationResponsePtrOutput {
	return o
}

func (o ImportRoutePolicyInformationResponsePtrOutput) Elem() ImportRoutePolicyInformationResponseOutput {
	return o.ApplyT(func(v *ImportRoutePolicyInformationResponse) ImportRoutePolicyInformationResponse {
		if v != nil {
			return *v
		}
		var ret ImportRoutePolicyInformationResponse
		return ret
	}).(ImportRoutePolicyInformationResponseOutput)
}

// Import IPv4 Route Policy Id.
func (o ImportRoutePolicyInformationResponsePtrOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicyInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Import IPv6 Route Policy Id.
func (o ImportRoutePolicyInformationResponsePtrOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicyInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Import Route Policy either IPv4 or IPv6.
type ImportRoutePolicyResponse struct {
	// ARM resource ID of RoutePolicy.
	ImportIpv4RoutePolicyId *string `pulumi:"importIpv4RoutePolicyId"`
	// ARM resource ID of RoutePolicy.
	ImportIpv6RoutePolicyId *string `pulumi:"importIpv6RoutePolicyId"`
}

// Import Route Policy either IPv4 or IPv6.
type ImportRoutePolicyResponseOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportRoutePolicyResponse)(nil)).Elem()
}

func (o ImportRoutePolicyResponseOutput) ToImportRoutePolicyResponseOutput() ImportRoutePolicyResponseOutput {
	return o
}

func (o ImportRoutePolicyResponseOutput) ToImportRoutePolicyResponseOutputWithContext(ctx context.Context) ImportRoutePolicyResponseOutput {
	return o
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyResponseOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicyResponse) *string { return v.ImportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyResponseOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportRoutePolicyResponse) *string { return v.ImportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type ImportRoutePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ImportRoutePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportRoutePolicyResponse)(nil)).Elem()
}

func (o ImportRoutePolicyResponsePtrOutput) ToImportRoutePolicyResponsePtrOutput() ImportRoutePolicyResponsePtrOutput {
	return o
}

func (o ImportRoutePolicyResponsePtrOutput) ToImportRoutePolicyResponsePtrOutputWithContext(ctx context.Context) ImportRoutePolicyResponsePtrOutput {
	return o
}

func (o ImportRoutePolicyResponsePtrOutput) Elem() ImportRoutePolicyResponseOutput {
	return o.ApplyT(func(v *ImportRoutePolicyResponse) ImportRoutePolicyResponse {
		if v != nil {
			return *v
		}
		var ret ImportRoutePolicyResponse
		return ret
	}).(ImportRoutePolicyResponseOutput)
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyResponsePtrOutput) ImportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// ARM resource ID of RoutePolicy.
func (o ImportRoutePolicyResponsePtrOutput) ImportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportRoutePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// BGP configuration properties.
type InternalNetworkPropertiesBgpConfiguration struct {
	// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
	AllowAS *int `pulumi:"allowAS"`
	// Enable Or Disable state.
	AllowASOverride *string `pulumi:"allowASOverride"`
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// BFD configuration properties
	BfdConfiguration *BfdConfiguration `pulumi:"bfdConfiguration"`
	// Originate a defaultRoute. Ex: "True" | "False".
	DefaultRouteOriginate *string `pulumi:"defaultRouteOriginate"`
	// List of BGP IPv4 Listen Range prefixes.
	Ipv4ListenRangePrefixes []string `pulumi:"ipv4ListenRangePrefixes"`
	// List with stringified IPv4 Neighbor Addresses.
	Ipv4NeighborAddress []NeighborAddress `pulumi:"ipv4NeighborAddress"`
	// List of BGP IPv6 Listen Ranges prefixes.
	Ipv6ListenRangePrefixes []string `pulumi:"ipv6ListenRangePrefixes"`
	// List with stringified IPv6 Neighbor Address.
	Ipv6NeighborAddress []NeighborAddress `pulumi:"ipv6NeighborAddress"`
	// Peer ASN. Example: 65047.
	PeerASN float64 `pulumi:"peerASN"`
}

// Defaults sets the appropriate defaults for InternalNetworkPropertiesBgpConfiguration
func (val *InternalNetworkPropertiesBgpConfiguration) Defaults() *InternalNetworkPropertiesBgpConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllowAS == nil {
		allowAS_ := 2
		tmp.AllowAS = &allowAS_
	}
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	return &tmp
}

// InternalNetworkPropertiesBgpConfigurationInput is an input type that accepts InternalNetworkPropertiesBgpConfigurationArgs and InternalNetworkPropertiesBgpConfigurationOutput values.
// You can construct a concrete instance of `InternalNetworkPropertiesBgpConfigurationInput` via:
//
//	InternalNetworkPropertiesBgpConfigurationArgs{...}
type InternalNetworkPropertiesBgpConfigurationInput interface {
	pulumi.Input

	ToInternalNetworkPropertiesBgpConfigurationOutput() InternalNetworkPropertiesBgpConfigurationOutput
	ToInternalNetworkPropertiesBgpConfigurationOutputWithContext(context.Context) InternalNetworkPropertiesBgpConfigurationOutput
}

// BGP configuration properties.
type InternalNetworkPropertiesBgpConfigurationArgs struct {
	// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
	AllowAS pulumi.IntPtrInput `pulumi:"allowAS"`
	// Enable Or Disable state.
	AllowASOverride pulumi.StringPtrInput `pulumi:"allowASOverride"`
	// Switch configuration description.
	Annotation pulumi.StringPtrInput `pulumi:"annotation"`
	// BFD configuration properties
	BfdConfiguration BfdConfigurationPtrInput `pulumi:"bfdConfiguration"`
	// Originate a defaultRoute. Ex: "True" | "False".
	DefaultRouteOriginate pulumi.StringPtrInput `pulumi:"defaultRouteOriginate"`
	// List of BGP IPv4 Listen Range prefixes.
	Ipv4ListenRangePrefixes pulumi.StringArrayInput `pulumi:"ipv4ListenRangePrefixes"`
	// List with stringified IPv4 Neighbor Addresses.
	Ipv4NeighborAddress NeighborAddressArrayInput `pulumi:"ipv4NeighborAddress"`
	// List of BGP IPv6 Listen Ranges prefixes.
	Ipv6ListenRangePrefixes pulumi.StringArrayInput `pulumi:"ipv6ListenRangePrefixes"`
	// List with stringified IPv6 Neighbor Address.
	Ipv6NeighborAddress NeighborAddressArrayInput `pulumi:"ipv6NeighborAddress"`
	// Peer ASN. Example: 65047.
	PeerASN pulumi.Float64Input `pulumi:"peerASN"`
}

// Defaults sets the appropriate defaults for InternalNetworkPropertiesBgpConfigurationArgs
func (val *InternalNetworkPropertiesBgpConfigurationArgs) Defaults() *InternalNetworkPropertiesBgpConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllowAS == nil {
		tmp.AllowAS = pulumi.IntPtr(2)
	}

	return &tmp
}
func (InternalNetworkPropertiesBgpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalNetworkPropertiesBgpConfiguration)(nil)).Elem()
}

func (i InternalNetworkPropertiesBgpConfigurationArgs) ToInternalNetworkPropertiesBgpConfigurationOutput() InternalNetworkPropertiesBgpConfigurationOutput {
	return i.ToInternalNetworkPropertiesBgpConfigurationOutputWithContext(context.Background())
}

func (i InternalNetworkPropertiesBgpConfigurationArgs) ToInternalNetworkPropertiesBgpConfigurationOutputWithContext(ctx context.Context) InternalNetworkPropertiesBgpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalNetworkPropertiesBgpConfigurationOutput)
}

func (i InternalNetworkPropertiesBgpConfigurationArgs) ToInternalNetworkPropertiesBgpConfigurationPtrOutput() InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return i.ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(context.Background())
}

func (i InternalNetworkPropertiesBgpConfigurationArgs) ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalNetworkPropertiesBgpConfigurationOutput).ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(ctx)
}

// InternalNetworkPropertiesBgpConfigurationPtrInput is an input type that accepts InternalNetworkPropertiesBgpConfigurationArgs, InternalNetworkPropertiesBgpConfigurationPtr and InternalNetworkPropertiesBgpConfigurationPtrOutput values.
// You can construct a concrete instance of `InternalNetworkPropertiesBgpConfigurationPtrInput` via:
//
//	        InternalNetworkPropertiesBgpConfigurationArgs{...}
//
//	or:
//
//	        nil
type InternalNetworkPropertiesBgpConfigurationPtrInput interface {
	pulumi.Input

	ToInternalNetworkPropertiesBgpConfigurationPtrOutput() InternalNetworkPropertiesBgpConfigurationPtrOutput
	ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(context.Context) InternalNetworkPropertiesBgpConfigurationPtrOutput
}

type internalNetworkPropertiesBgpConfigurationPtrType InternalNetworkPropertiesBgpConfigurationArgs

func InternalNetworkPropertiesBgpConfigurationPtr(v *InternalNetworkPropertiesBgpConfigurationArgs) InternalNetworkPropertiesBgpConfigurationPtrInput {
	return (*internalNetworkPropertiesBgpConfigurationPtrType)(v)
}

func (*internalNetworkPropertiesBgpConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalNetworkPropertiesBgpConfiguration)(nil)).Elem()
}

func (i *internalNetworkPropertiesBgpConfigurationPtrType) ToInternalNetworkPropertiesBgpConfigurationPtrOutput() InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return i.ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(context.Background())
}

func (i *internalNetworkPropertiesBgpConfigurationPtrType) ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalNetworkPropertiesBgpConfigurationPtrOutput)
}

// BGP configuration properties.
type InternalNetworkPropertiesBgpConfigurationOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesBgpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalNetworkPropertiesBgpConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesBgpConfigurationOutput) ToInternalNetworkPropertiesBgpConfigurationOutput() InternalNetworkPropertiesBgpConfigurationOutput {
	return o
}

func (o InternalNetworkPropertiesBgpConfigurationOutput) ToInternalNetworkPropertiesBgpConfigurationOutputWithContext(ctx context.Context) InternalNetworkPropertiesBgpConfigurationOutput {
	return o
}

func (o InternalNetworkPropertiesBgpConfigurationOutput) ToInternalNetworkPropertiesBgpConfigurationPtrOutput() InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return o.ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(context.Background())
}

func (o InternalNetworkPropertiesBgpConfigurationOutput) ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InternalNetworkPropertiesBgpConfiguration) *InternalNetworkPropertiesBgpConfiguration {
		return &v
	}).(InternalNetworkPropertiesBgpConfigurationPtrOutput)
}

// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
func (o InternalNetworkPropertiesBgpConfigurationOutput) AllowAS() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) *int { return v.AllowAS }).(pulumi.IntPtrOutput)
}

// Enable Or Disable state.
func (o InternalNetworkPropertiesBgpConfigurationOutput) AllowASOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) *string { return v.AllowASOverride }).(pulumi.StringPtrOutput)
}

// Switch configuration description.
func (o InternalNetworkPropertiesBgpConfigurationOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// BFD configuration properties
func (o InternalNetworkPropertiesBgpConfigurationOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) *BfdConfiguration { return v.BfdConfiguration }).(BfdConfigurationPtrOutput)
}

// Originate a defaultRoute. Ex: "True" | "False".
func (o InternalNetworkPropertiesBgpConfigurationOutput) DefaultRouteOriginate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) *string { return v.DefaultRouteOriginate }).(pulumi.StringPtrOutput)
}

// List of BGP IPv4 Listen Range prefixes.
func (o InternalNetworkPropertiesBgpConfigurationOutput) Ipv4ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) []string { return v.Ipv4ListenRangePrefixes }).(pulumi.StringArrayOutput)
}

// List with stringified IPv4 Neighbor Addresses.
func (o InternalNetworkPropertiesBgpConfigurationOutput) Ipv4NeighborAddress() NeighborAddressArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) []NeighborAddress { return v.Ipv4NeighborAddress }).(NeighborAddressArrayOutput)
}

// List of BGP IPv6 Listen Ranges prefixes.
func (o InternalNetworkPropertiesBgpConfigurationOutput) Ipv6ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) []string { return v.Ipv6ListenRangePrefixes }).(pulumi.StringArrayOutput)
}

// List with stringified IPv6 Neighbor Address.
func (o InternalNetworkPropertiesBgpConfigurationOutput) Ipv6NeighborAddress() NeighborAddressArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) []NeighborAddress { return v.Ipv6NeighborAddress }).(NeighborAddressArrayOutput)
}

// Peer ASN. Example: 65047.
func (o InternalNetworkPropertiesBgpConfigurationOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v InternalNetworkPropertiesBgpConfiguration) float64 { return v.PeerASN }).(pulumi.Float64Output)
}

type InternalNetworkPropertiesBgpConfigurationPtrOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesBgpConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalNetworkPropertiesBgpConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) ToInternalNetworkPropertiesBgpConfigurationPtrOutput() InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) ToInternalNetworkPropertiesBgpConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesBgpConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) Elem() InternalNetworkPropertiesBgpConfigurationOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) InternalNetworkPropertiesBgpConfiguration {
		if v != nil {
			return *v
		}
		var ret InternalNetworkPropertiesBgpConfiguration
		return ret
	}).(InternalNetworkPropertiesBgpConfigurationOutput)
}

// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) AllowAS() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.AllowAS
	}).(pulumi.IntPtrOutput)
}

// Enable Or Disable state.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) AllowASOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AllowASOverride
	}).(pulumi.StringPtrOutput)
}

// Switch configuration description.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Annotation
	}).(pulumi.StringPtrOutput)
}

// BFD configuration properties
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) *BfdConfiguration {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationPtrOutput)
}

// Originate a defaultRoute. Ex: "True" | "False".
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) DefaultRouteOriginate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DefaultRouteOriginate
	}).(pulumi.StringPtrOutput)
}

// List of BGP IPv4 Listen Range prefixes.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) Ipv4ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Ipv4ListenRangePrefixes
	}).(pulumi.StringArrayOutput)
}

// List with stringified IPv4 Neighbor Addresses.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) Ipv4NeighborAddress() NeighborAddressArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) []NeighborAddress {
		if v == nil {
			return nil
		}
		return v.Ipv4NeighborAddress
	}).(NeighborAddressArrayOutput)
}

// List of BGP IPv6 Listen Ranges prefixes.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) Ipv6ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Ipv6ListenRangePrefixes
	}).(pulumi.StringArrayOutput)
}

// List with stringified IPv6 Neighbor Address.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) Ipv6NeighborAddress() NeighborAddressArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) []NeighborAddress {
		if v == nil {
			return nil
		}
		return v.Ipv6NeighborAddress
	}).(NeighborAddressArrayOutput)
}

// Peer ASN. Example: 65047.
func (o InternalNetworkPropertiesBgpConfigurationPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesBgpConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// BGP configuration properties.
type InternalNetworkPropertiesResponseBgpConfiguration struct {
	// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
	AllowAS *int `pulumi:"allowAS"`
	// Enable Or Disable state.
	AllowASOverride *string `pulumi:"allowASOverride"`
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// BFD configuration properties
	BfdConfiguration *BfdConfigurationResponse `pulumi:"bfdConfiguration"`
	// Originate a defaultRoute. Ex: "True" | "False".
	DefaultRouteOriginate *string `pulumi:"defaultRouteOriginate"`
	// ASN of Network Fabric. Example: 65048.
	FabricASN float64 `pulumi:"fabricASN"`
	// List of BGP IPv4 Listen Range prefixes.
	Ipv4ListenRangePrefixes []string `pulumi:"ipv4ListenRangePrefixes"`
	// List with stringified IPv4 Neighbor Addresses.
	Ipv4NeighborAddress []NeighborAddressResponse `pulumi:"ipv4NeighborAddress"`
	// List of BGP IPv6 Listen Ranges prefixes.
	Ipv6ListenRangePrefixes []string `pulumi:"ipv6ListenRangePrefixes"`
	// List with stringified IPv6 Neighbor Address.
	Ipv6NeighborAddress []NeighborAddressResponse `pulumi:"ipv6NeighborAddress"`
	// Peer ASN. Example: 65047.
	PeerASN float64 `pulumi:"peerASN"`
}

// Defaults sets the appropriate defaults for InternalNetworkPropertiesResponseBgpConfiguration
func (val *InternalNetworkPropertiesResponseBgpConfiguration) Defaults() *InternalNetworkPropertiesResponseBgpConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllowAS == nil {
		allowAS_ := 2
		tmp.AllowAS = &allowAS_
	}
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	return &tmp
}

// BGP configuration properties.
type InternalNetworkPropertiesResponseBgpConfigurationOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesResponseBgpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalNetworkPropertiesResponseBgpConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) ToInternalNetworkPropertiesResponseBgpConfigurationOutput() InternalNetworkPropertiesResponseBgpConfigurationOutput {
	return o
}

func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) ToInternalNetworkPropertiesResponseBgpConfigurationOutputWithContext(ctx context.Context) InternalNetworkPropertiesResponseBgpConfigurationOutput {
	return o
}

// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) AllowAS() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) *int { return v.AllowAS }).(pulumi.IntPtrOutput)
}

// Enable Or Disable state.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) AllowASOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) *string { return v.AllowASOverride }).(pulumi.StringPtrOutput)
}

// Switch configuration description.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// BFD configuration properties
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) *BfdConfigurationResponse {
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// Originate a defaultRoute. Ex: "True" | "False".
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) DefaultRouteOriginate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) *string { return v.DefaultRouteOriginate }).(pulumi.StringPtrOutput)
}

// ASN of Network Fabric. Example: 65048.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) FabricASN() pulumi.Float64Output {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) float64 { return v.FabricASN }).(pulumi.Float64Output)
}

// List of BGP IPv4 Listen Range prefixes.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) Ipv4ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) []string { return v.Ipv4ListenRangePrefixes }).(pulumi.StringArrayOutput)
}

// List with stringified IPv4 Neighbor Addresses.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) Ipv4NeighborAddress() NeighborAddressResponseArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) []NeighborAddressResponse {
		return v.Ipv4NeighborAddress
	}).(NeighborAddressResponseArrayOutput)
}

// List of BGP IPv6 Listen Ranges prefixes.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) Ipv6ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) []string { return v.Ipv6ListenRangePrefixes }).(pulumi.StringArrayOutput)
}

// List with stringified IPv6 Neighbor Address.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) Ipv6NeighborAddress() NeighborAddressResponseArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) []NeighborAddressResponse {
		return v.Ipv6NeighborAddress
	}).(NeighborAddressResponseArrayOutput)
}

// Peer ASN. Example: 65047.
func (o InternalNetworkPropertiesResponseBgpConfigurationOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseBgpConfiguration) float64 { return v.PeerASN }).(pulumi.Float64Output)
}

type InternalNetworkPropertiesResponseBgpConfigurationPtrOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalNetworkPropertiesResponseBgpConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) ToInternalNetworkPropertiesResponseBgpConfigurationPtrOutput() InternalNetworkPropertiesResponseBgpConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) ToInternalNetworkPropertiesResponseBgpConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesResponseBgpConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) Elem() InternalNetworkPropertiesResponseBgpConfigurationOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) InternalNetworkPropertiesResponseBgpConfiguration {
		if v != nil {
			return *v
		}
		var ret InternalNetworkPropertiesResponseBgpConfiguration
		return ret
	}).(InternalNetworkPropertiesResponseBgpConfigurationOutput)
}

// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) AllowAS() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.AllowAS
	}).(pulumi.IntPtrOutput)
}

// Enable Or Disable state.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) AllowASOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AllowASOverride
	}).(pulumi.StringPtrOutput)
}

// Switch configuration description.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Annotation
	}).(pulumi.StringPtrOutput)
}

// BFD configuration properties
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) *BfdConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// Originate a defaultRoute. Ex: "True" | "False".
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) DefaultRouteOriginate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DefaultRouteOriginate
	}).(pulumi.StringPtrOutput)
}

// ASN of Network Fabric. Example: 65048.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) FabricASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.FabricASN
	}).(pulumi.Float64PtrOutput)
}

// List of BGP IPv4 Listen Range prefixes.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) Ipv4ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Ipv4ListenRangePrefixes
	}).(pulumi.StringArrayOutput)
}

// List with stringified IPv4 Neighbor Addresses.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) Ipv4NeighborAddress() NeighborAddressResponseArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) []NeighborAddressResponse {
		if v == nil {
			return nil
		}
		return v.Ipv4NeighborAddress
	}).(NeighborAddressResponseArrayOutput)
}

// List of BGP IPv6 Listen Ranges prefixes.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) Ipv6ListenRangePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Ipv6ListenRangePrefixes
	}).(pulumi.StringArrayOutput)
}

// List with stringified IPv6 Neighbor Address.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) Ipv6NeighborAddress() NeighborAddressResponseArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) []NeighborAddressResponse {
		if v == nil {
			return nil
		}
		return v.Ipv6NeighborAddress
	}).(NeighborAddressResponseArrayOutput)
}

// Peer ASN. Example: 65047.
func (o InternalNetworkPropertiesResponseBgpConfigurationPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseBgpConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// Static Route Configuration properties.
type InternalNetworkPropertiesResponseStaticRouteConfiguration struct {
	// BFD configuration properties
	BfdConfiguration *BfdConfigurationResponse `pulumi:"bfdConfiguration"`
	// Extension. Example: NoExtension | NPB.
	Extension *string `pulumi:"extension"`
	// List of IPv4 Routes.
	Ipv4Routes []StaticRoutePropertiesResponse `pulumi:"ipv4Routes"`
	// List of IPv6 Routes.
	Ipv6Routes []StaticRoutePropertiesResponse `pulumi:"ipv6Routes"`
}

// Defaults sets the appropriate defaults for InternalNetworkPropertiesResponseStaticRouteConfiguration
func (val *InternalNetworkPropertiesResponseStaticRouteConfiguration) Defaults() *InternalNetworkPropertiesResponseStaticRouteConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	if tmp.Extension == nil {
		extension_ := "NoExtension"
		tmp.Extension = &extension_
	}
	return &tmp
}

// Static Route Configuration properties.
type InternalNetworkPropertiesResponseStaticRouteConfigurationOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesResponseStaticRouteConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalNetworkPropertiesResponseStaticRouteConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesResponseStaticRouteConfigurationOutput) ToInternalNetworkPropertiesResponseStaticRouteConfigurationOutput() InternalNetworkPropertiesResponseStaticRouteConfigurationOutput {
	return o
}

func (o InternalNetworkPropertiesResponseStaticRouteConfigurationOutput) ToInternalNetworkPropertiesResponseStaticRouteConfigurationOutputWithContext(ctx context.Context) InternalNetworkPropertiesResponseStaticRouteConfigurationOutput {
	return o
}

// BFD configuration properties
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseStaticRouteConfiguration) *BfdConfigurationResponse {
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// Extension. Example: NoExtension | NPB.
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseStaticRouteConfiguration) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// List of IPv4 Routes.
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationOutput) Ipv4Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseStaticRouteConfiguration) []StaticRoutePropertiesResponse {
		return v.Ipv4Routes
	}).(StaticRoutePropertiesResponseArrayOutput)
}

// List of IPv6 Routes.
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationOutput) Ipv6Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesResponseStaticRouteConfiguration) []StaticRoutePropertiesResponse {
		return v.Ipv6Routes
	}).(StaticRoutePropertiesResponseArrayOutput)
}

type InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalNetworkPropertiesResponseStaticRouteConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) ToInternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput() InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) ToInternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) Elem() InternalNetworkPropertiesResponseStaticRouteConfigurationOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseStaticRouteConfiguration) InternalNetworkPropertiesResponseStaticRouteConfiguration {
		if v != nil {
			return *v
		}
		var ret InternalNetworkPropertiesResponseStaticRouteConfiguration
		return ret
	}).(InternalNetworkPropertiesResponseStaticRouteConfigurationOutput)
}

// BFD configuration properties
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseStaticRouteConfiguration) *BfdConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// Extension. Example: NoExtension | NPB.
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseStaticRouteConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Extension
	}).(pulumi.StringPtrOutput)
}

// List of IPv4 Routes.
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) Ipv4Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseStaticRouteConfiguration) []StaticRoutePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Ipv4Routes
	}).(StaticRoutePropertiesResponseArrayOutput)
}

// List of IPv6 Routes.
func (o InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput) Ipv6Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesResponseStaticRouteConfiguration) []StaticRoutePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Ipv6Routes
	}).(StaticRoutePropertiesResponseArrayOutput)
}

// Static Route Configuration properties.
type InternalNetworkPropertiesStaticRouteConfiguration struct {
	// BFD configuration properties
	BfdConfiguration *BfdConfiguration `pulumi:"bfdConfiguration"`
	// Extension. Example: NoExtension | NPB.
	Extension *string `pulumi:"extension"`
	// List of IPv4 Routes.
	Ipv4Routes []StaticRouteProperties `pulumi:"ipv4Routes"`
	// List of IPv6 Routes.
	Ipv6Routes []StaticRouteProperties `pulumi:"ipv6Routes"`
}

// Defaults sets the appropriate defaults for InternalNetworkPropertiesStaticRouteConfiguration
func (val *InternalNetworkPropertiesStaticRouteConfiguration) Defaults() *InternalNetworkPropertiesStaticRouteConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	if tmp.Extension == nil {
		extension_ := "NoExtension"
		tmp.Extension = &extension_
	}
	return &tmp
}

// InternalNetworkPropertiesStaticRouteConfigurationInput is an input type that accepts InternalNetworkPropertiesStaticRouteConfigurationArgs and InternalNetworkPropertiesStaticRouteConfigurationOutput values.
// You can construct a concrete instance of `InternalNetworkPropertiesStaticRouteConfigurationInput` via:
//
//	InternalNetworkPropertiesStaticRouteConfigurationArgs{...}
type InternalNetworkPropertiesStaticRouteConfigurationInput interface {
	pulumi.Input

	ToInternalNetworkPropertiesStaticRouteConfigurationOutput() InternalNetworkPropertiesStaticRouteConfigurationOutput
	ToInternalNetworkPropertiesStaticRouteConfigurationOutputWithContext(context.Context) InternalNetworkPropertiesStaticRouteConfigurationOutput
}

// Static Route Configuration properties.
type InternalNetworkPropertiesStaticRouteConfigurationArgs struct {
	// BFD configuration properties
	BfdConfiguration BfdConfigurationPtrInput `pulumi:"bfdConfiguration"`
	// Extension. Example: NoExtension | NPB.
	Extension pulumi.StringPtrInput `pulumi:"extension"`
	// List of IPv4 Routes.
	Ipv4Routes StaticRoutePropertiesArrayInput `pulumi:"ipv4Routes"`
	// List of IPv6 Routes.
	Ipv6Routes StaticRoutePropertiesArrayInput `pulumi:"ipv6Routes"`
}

// Defaults sets the appropriate defaults for InternalNetworkPropertiesStaticRouteConfigurationArgs
func (val *InternalNetworkPropertiesStaticRouteConfigurationArgs) Defaults() *InternalNetworkPropertiesStaticRouteConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Extension == nil {
		tmp.Extension = pulumi.StringPtr("NoExtension")
	}
	return &tmp
}
func (InternalNetworkPropertiesStaticRouteConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalNetworkPropertiesStaticRouteConfiguration)(nil)).Elem()
}

func (i InternalNetworkPropertiesStaticRouteConfigurationArgs) ToInternalNetworkPropertiesStaticRouteConfigurationOutput() InternalNetworkPropertiesStaticRouteConfigurationOutput {
	return i.ToInternalNetworkPropertiesStaticRouteConfigurationOutputWithContext(context.Background())
}

func (i InternalNetworkPropertiesStaticRouteConfigurationArgs) ToInternalNetworkPropertiesStaticRouteConfigurationOutputWithContext(ctx context.Context) InternalNetworkPropertiesStaticRouteConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalNetworkPropertiesStaticRouteConfigurationOutput)
}

func (i InternalNetworkPropertiesStaticRouteConfigurationArgs) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutput() InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return i.ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i InternalNetworkPropertiesStaticRouteConfigurationArgs) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalNetworkPropertiesStaticRouteConfigurationOutput).ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(ctx)
}

// InternalNetworkPropertiesStaticRouteConfigurationPtrInput is an input type that accepts InternalNetworkPropertiesStaticRouteConfigurationArgs, InternalNetworkPropertiesStaticRouteConfigurationPtr and InternalNetworkPropertiesStaticRouteConfigurationPtrOutput values.
// You can construct a concrete instance of `InternalNetworkPropertiesStaticRouteConfigurationPtrInput` via:
//
//	        InternalNetworkPropertiesStaticRouteConfigurationArgs{...}
//
//	or:
//
//	        nil
type InternalNetworkPropertiesStaticRouteConfigurationPtrInput interface {
	pulumi.Input

	ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutput() InternalNetworkPropertiesStaticRouteConfigurationPtrOutput
	ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(context.Context) InternalNetworkPropertiesStaticRouteConfigurationPtrOutput
}

type internalNetworkPropertiesStaticRouteConfigurationPtrType InternalNetworkPropertiesStaticRouteConfigurationArgs

func InternalNetworkPropertiesStaticRouteConfigurationPtr(v *InternalNetworkPropertiesStaticRouteConfigurationArgs) InternalNetworkPropertiesStaticRouteConfigurationPtrInput {
	return (*internalNetworkPropertiesStaticRouteConfigurationPtrType)(v)
}

func (*internalNetworkPropertiesStaticRouteConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalNetworkPropertiesStaticRouteConfiguration)(nil)).Elem()
}

func (i *internalNetworkPropertiesStaticRouteConfigurationPtrType) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutput() InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return i.ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i *internalNetworkPropertiesStaticRouteConfigurationPtrType) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalNetworkPropertiesStaticRouteConfigurationPtrOutput)
}

// Static Route Configuration properties.
type InternalNetworkPropertiesStaticRouteConfigurationOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesStaticRouteConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalNetworkPropertiesStaticRouteConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) ToInternalNetworkPropertiesStaticRouteConfigurationOutput() InternalNetworkPropertiesStaticRouteConfigurationOutput {
	return o
}

func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) ToInternalNetworkPropertiesStaticRouteConfigurationOutputWithContext(ctx context.Context) InternalNetworkPropertiesStaticRouteConfigurationOutput {
	return o
}

func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutput() InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return o.ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(context.Background())
}

func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InternalNetworkPropertiesStaticRouteConfiguration) *InternalNetworkPropertiesStaticRouteConfiguration {
		return &v
	}).(InternalNetworkPropertiesStaticRouteConfigurationPtrOutput)
}

// BFD configuration properties
func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesStaticRouteConfiguration) *BfdConfiguration { return v.BfdConfiguration }).(BfdConfigurationPtrOutput)
}

// Extension. Example: NoExtension | NPB.
func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesStaticRouteConfiguration) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// List of IPv4 Routes.
func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) Ipv4Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesStaticRouteConfiguration) []StaticRouteProperties { return v.Ipv4Routes }).(StaticRoutePropertiesArrayOutput)
}

// List of IPv6 Routes.
func (o InternalNetworkPropertiesStaticRouteConfigurationOutput) Ipv6Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v InternalNetworkPropertiesStaticRouteConfiguration) []StaticRouteProperties { return v.Ipv6Routes }).(StaticRoutePropertiesArrayOutput)
}

type InternalNetworkPropertiesStaticRouteConfigurationPtrOutput struct{ *pulumi.OutputState }

func (InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalNetworkPropertiesStaticRouteConfiguration)(nil)).Elem()
}

func (o InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutput() InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) ToInternalNetworkPropertiesStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) InternalNetworkPropertiesStaticRouteConfigurationPtrOutput {
	return o
}

func (o InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) Elem() InternalNetworkPropertiesStaticRouteConfigurationOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesStaticRouteConfiguration) InternalNetworkPropertiesStaticRouteConfiguration {
		if v != nil {
			return *v
		}
		var ret InternalNetworkPropertiesStaticRouteConfiguration
		return ret
	}).(InternalNetworkPropertiesStaticRouteConfigurationOutput)
}

// BFD configuration properties
func (o InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesStaticRouteConfiguration) *BfdConfiguration {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationPtrOutput)
}

// Extension. Example: NoExtension | NPB.
func (o InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesStaticRouteConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Extension
	}).(pulumi.StringPtrOutput)
}

// List of IPv4 Routes.
func (o InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) Ipv4Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesStaticRouteConfiguration) []StaticRouteProperties {
		if v == nil {
			return nil
		}
		return v.Ipv4Routes
	}).(StaticRoutePropertiesArrayOutput)
}

// List of IPv6 Routes.
func (o InternalNetworkPropertiesStaticRouteConfigurationPtrOutput) Ipv6Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v *InternalNetworkPropertiesStaticRouteConfiguration) []StaticRouteProperties {
		if v == nil {
			return nil
		}
		return v.Ipv6Routes
	}).(StaticRoutePropertiesArrayOutput)
}

// IP Community ID list properties.
type IpCommunityIdList struct {
	// List of IP Community resource IDs.
	IpCommunityIds []string `pulumi:"ipCommunityIds"`
}

// IpCommunityIdListInput is an input type that accepts IpCommunityIdListArgs and IpCommunityIdListOutput values.
// You can construct a concrete instance of `IpCommunityIdListInput` via:
//
//	IpCommunityIdListArgs{...}
type IpCommunityIdListInput interface {
	pulumi.Input

	ToIpCommunityIdListOutput() IpCommunityIdListOutput
	ToIpCommunityIdListOutputWithContext(context.Context) IpCommunityIdListOutput
}

// IP Community ID list properties.
type IpCommunityIdListArgs struct {
	// List of IP Community resource IDs.
	IpCommunityIds pulumi.StringArrayInput `pulumi:"ipCommunityIds"`
}

func (IpCommunityIdListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCommunityIdList)(nil)).Elem()
}

func (i IpCommunityIdListArgs) ToIpCommunityIdListOutput() IpCommunityIdListOutput {
	return i.ToIpCommunityIdListOutputWithContext(context.Background())
}

func (i IpCommunityIdListArgs) ToIpCommunityIdListOutputWithContext(ctx context.Context) IpCommunityIdListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpCommunityIdListOutput)
}

func (i IpCommunityIdListArgs) ToIpCommunityIdListPtrOutput() IpCommunityIdListPtrOutput {
	return i.ToIpCommunityIdListPtrOutputWithContext(context.Background())
}

func (i IpCommunityIdListArgs) ToIpCommunityIdListPtrOutputWithContext(ctx context.Context) IpCommunityIdListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpCommunityIdListOutput).ToIpCommunityIdListPtrOutputWithContext(ctx)
}

// IpCommunityIdListPtrInput is an input type that accepts IpCommunityIdListArgs, IpCommunityIdListPtr and IpCommunityIdListPtrOutput values.
// You can construct a concrete instance of `IpCommunityIdListPtrInput` via:
//
//	        IpCommunityIdListArgs{...}
//
//	or:
//
//	        nil
type IpCommunityIdListPtrInput interface {
	pulumi.Input

	ToIpCommunityIdListPtrOutput() IpCommunityIdListPtrOutput
	ToIpCommunityIdListPtrOutputWithContext(context.Context) IpCommunityIdListPtrOutput
}

type ipCommunityIdListPtrType IpCommunityIdListArgs

func IpCommunityIdListPtr(v *IpCommunityIdListArgs) IpCommunityIdListPtrInput {
	return (*ipCommunityIdListPtrType)(v)
}

func (*ipCommunityIdListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpCommunityIdList)(nil)).Elem()
}

func (i *ipCommunityIdListPtrType) ToIpCommunityIdListPtrOutput() IpCommunityIdListPtrOutput {
	return i.ToIpCommunityIdListPtrOutputWithContext(context.Background())
}

func (i *ipCommunityIdListPtrType) ToIpCommunityIdListPtrOutputWithContext(ctx context.Context) IpCommunityIdListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpCommunityIdListPtrOutput)
}

// IP Community ID list properties.
type IpCommunityIdListOutput struct{ *pulumi.OutputState }

func (IpCommunityIdListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCommunityIdList)(nil)).Elem()
}

func (o IpCommunityIdListOutput) ToIpCommunityIdListOutput() IpCommunityIdListOutput {
	return o
}

func (o IpCommunityIdListOutput) ToIpCommunityIdListOutputWithContext(ctx context.Context) IpCommunityIdListOutput {
	return o
}

func (o IpCommunityIdListOutput) ToIpCommunityIdListPtrOutput() IpCommunityIdListPtrOutput {
	return o.ToIpCommunityIdListPtrOutputWithContext(context.Background())
}

func (o IpCommunityIdListOutput) ToIpCommunityIdListPtrOutputWithContext(ctx context.Context) IpCommunityIdListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpCommunityIdList) *IpCommunityIdList {
		return &v
	}).(IpCommunityIdListPtrOutput)
}

// List of IP Community resource IDs.
func (o IpCommunityIdListOutput) IpCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpCommunityIdList) []string { return v.IpCommunityIds }).(pulumi.StringArrayOutput)
}

type IpCommunityIdListPtrOutput struct{ *pulumi.OutputState }

func (IpCommunityIdListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpCommunityIdList)(nil)).Elem()
}

func (o IpCommunityIdListPtrOutput) ToIpCommunityIdListPtrOutput() IpCommunityIdListPtrOutput {
	return o
}

func (o IpCommunityIdListPtrOutput) ToIpCommunityIdListPtrOutputWithContext(ctx context.Context) IpCommunityIdListPtrOutput {
	return o
}

func (o IpCommunityIdListPtrOutput) Elem() IpCommunityIdListOutput {
	return o.ApplyT(func(v *IpCommunityIdList) IpCommunityIdList {
		if v != nil {
			return *v
		}
		var ret IpCommunityIdList
		return ret
	}).(IpCommunityIdListOutput)
}

// List of IP Community resource IDs.
func (o IpCommunityIdListPtrOutput) IpCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpCommunityIdList) []string {
		if v == nil {
			return nil
		}
		return v.IpCommunityIds
	}).(pulumi.StringArrayOutput)
}

// IP Community ID list properties.
type IpCommunityIdListResponse struct {
	// List of IP Community resource IDs.
	IpCommunityIds []string `pulumi:"ipCommunityIds"`
}

// IP Community ID list properties.
type IpCommunityIdListResponseOutput struct{ *pulumi.OutputState }

func (IpCommunityIdListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCommunityIdListResponse)(nil)).Elem()
}

func (o IpCommunityIdListResponseOutput) ToIpCommunityIdListResponseOutput() IpCommunityIdListResponseOutput {
	return o
}

func (o IpCommunityIdListResponseOutput) ToIpCommunityIdListResponseOutputWithContext(ctx context.Context) IpCommunityIdListResponseOutput {
	return o
}

// List of IP Community resource IDs.
func (o IpCommunityIdListResponseOutput) IpCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpCommunityIdListResponse) []string { return v.IpCommunityIds }).(pulumi.StringArrayOutput)
}

type IpCommunityIdListResponsePtrOutput struct{ *pulumi.OutputState }

func (IpCommunityIdListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpCommunityIdListResponse)(nil)).Elem()
}

func (o IpCommunityIdListResponsePtrOutput) ToIpCommunityIdListResponsePtrOutput() IpCommunityIdListResponsePtrOutput {
	return o
}

func (o IpCommunityIdListResponsePtrOutput) ToIpCommunityIdListResponsePtrOutputWithContext(ctx context.Context) IpCommunityIdListResponsePtrOutput {
	return o
}

func (o IpCommunityIdListResponsePtrOutput) Elem() IpCommunityIdListResponseOutput {
	return o.ApplyT(func(v *IpCommunityIdListResponse) IpCommunityIdListResponse {
		if v != nil {
			return *v
		}
		var ret IpCommunityIdListResponse
		return ret
	}).(IpCommunityIdListResponseOutput)
}

// List of IP Community resource IDs.
func (o IpCommunityIdListResponsePtrOutput) IpCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpCommunityIdListResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpCommunityIds
	}).(pulumi.StringArrayOutput)
}

// IP Community patchable properties.
type IpCommunityRule struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action string `pulumi:"action"`
	// List the community members of IP Community.
	CommunityMembers []string `pulumi:"communityMembers"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
	// Supported well known Community List.
	WellKnownCommunities []string `pulumi:"wellKnownCommunities"`
}

// IpCommunityRuleInput is an input type that accepts IpCommunityRuleArgs and IpCommunityRuleOutput values.
// You can construct a concrete instance of `IpCommunityRuleInput` via:
//
//	IpCommunityRuleArgs{...}
type IpCommunityRuleInput interface {
	pulumi.Input

	ToIpCommunityRuleOutput() IpCommunityRuleOutput
	ToIpCommunityRuleOutputWithContext(context.Context) IpCommunityRuleOutput
}

// IP Community patchable properties.
type IpCommunityRuleArgs struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action pulumi.StringInput `pulumi:"action"`
	// List the community members of IP Community.
	CommunityMembers pulumi.StringArrayInput `pulumi:"communityMembers"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber pulumi.Float64Input `pulumi:"sequenceNumber"`
	// Supported well known Community List.
	WellKnownCommunities pulumi.StringArrayInput `pulumi:"wellKnownCommunities"`
}

func (IpCommunityRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCommunityRule)(nil)).Elem()
}

func (i IpCommunityRuleArgs) ToIpCommunityRuleOutput() IpCommunityRuleOutput {
	return i.ToIpCommunityRuleOutputWithContext(context.Background())
}

func (i IpCommunityRuleArgs) ToIpCommunityRuleOutputWithContext(ctx context.Context) IpCommunityRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpCommunityRuleOutput)
}

// IpCommunityRuleArrayInput is an input type that accepts IpCommunityRuleArray and IpCommunityRuleArrayOutput values.
// You can construct a concrete instance of `IpCommunityRuleArrayInput` via:
//
//	IpCommunityRuleArray{ IpCommunityRuleArgs{...} }
type IpCommunityRuleArrayInput interface {
	pulumi.Input

	ToIpCommunityRuleArrayOutput() IpCommunityRuleArrayOutput
	ToIpCommunityRuleArrayOutputWithContext(context.Context) IpCommunityRuleArrayOutput
}

type IpCommunityRuleArray []IpCommunityRuleInput

func (IpCommunityRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpCommunityRule)(nil)).Elem()
}

func (i IpCommunityRuleArray) ToIpCommunityRuleArrayOutput() IpCommunityRuleArrayOutput {
	return i.ToIpCommunityRuleArrayOutputWithContext(context.Background())
}

func (i IpCommunityRuleArray) ToIpCommunityRuleArrayOutputWithContext(ctx context.Context) IpCommunityRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpCommunityRuleArrayOutput)
}

// IP Community patchable properties.
type IpCommunityRuleOutput struct{ *pulumi.OutputState }

func (IpCommunityRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCommunityRule)(nil)).Elem()
}

func (o IpCommunityRuleOutput) ToIpCommunityRuleOutput() IpCommunityRuleOutput {
	return o
}

func (o IpCommunityRuleOutput) ToIpCommunityRuleOutputWithContext(ctx context.Context) IpCommunityRuleOutput {
	return o
}

// Action to be taken on the configuration. Example: Permit | Deny.
func (o IpCommunityRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpCommunityRule) string { return v.Action }).(pulumi.StringOutput)
}

// List the community members of IP Community.
func (o IpCommunityRuleOutput) CommunityMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpCommunityRule) []string { return v.CommunityMembers }).(pulumi.StringArrayOutput)
}

// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
func (o IpCommunityRuleOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v IpCommunityRule) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

// Supported well known Community List.
func (o IpCommunityRuleOutput) WellKnownCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpCommunityRule) []string { return v.WellKnownCommunities }).(pulumi.StringArrayOutput)
}

type IpCommunityRuleArrayOutput struct{ *pulumi.OutputState }

func (IpCommunityRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpCommunityRule)(nil)).Elem()
}

func (o IpCommunityRuleArrayOutput) ToIpCommunityRuleArrayOutput() IpCommunityRuleArrayOutput {
	return o
}

func (o IpCommunityRuleArrayOutput) ToIpCommunityRuleArrayOutputWithContext(ctx context.Context) IpCommunityRuleArrayOutput {
	return o
}

func (o IpCommunityRuleArrayOutput) Index(i pulumi.IntInput) IpCommunityRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpCommunityRule {
		return vs[0].([]IpCommunityRule)[vs[1].(int)]
	}).(IpCommunityRuleOutput)
}

// IP Community patchable properties.
type IpCommunityRuleResponse struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action string `pulumi:"action"`
	// List the community members of IP Community.
	CommunityMembers []string `pulumi:"communityMembers"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
	// Supported well known Community List.
	WellKnownCommunities []string `pulumi:"wellKnownCommunities"`
}

// IP Community patchable properties.
type IpCommunityRuleResponseOutput struct{ *pulumi.OutputState }

func (IpCommunityRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpCommunityRuleResponse)(nil)).Elem()
}

func (o IpCommunityRuleResponseOutput) ToIpCommunityRuleResponseOutput() IpCommunityRuleResponseOutput {
	return o
}

func (o IpCommunityRuleResponseOutput) ToIpCommunityRuleResponseOutputWithContext(ctx context.Context) IpCommunityRuleResponseOutput {
	return o
}

// Action to be taken on the configuration. Example: Permit | Deny.
func (o IpCommunityRuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpCommunityRuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// List the community members of IP Community.
func (o IpCommunityRuleResponseOutput) CommunityMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpCommunityRuleResponse) []string { return v.CommunityMembers }).(pulumi.StringArrayOutput)
}

// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
func (o IpCommunityRuleResponseOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v IpCommunityRuleResponse) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

// Supported well known Community List.
func (o IpCommunityRuleResponseOutput) WellKnownCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpCommunityRuleResponse) []string { return v.WellKnownCommunities }).(pulumi.StringArrayOutput)
}

type IpCommunityRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (IpCommunityRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpCommunityRuleResponse)(nil)).Elem()
}

func (o IpCommunityRuleResponseArrayOutput) ToIpCommunityRuleResponseArrayOutput() IpCommunityRuleResponseArrayOutput {
	return o
}

func (o IpCommunityRuleResponseArrayOutput) ToIpCommunityRuleResponseArrayOutputWithContext(ctx context.Context) IpCommunityRuleResponseArrayOutput {
	return o
}

func (o IpCommunityRuleResponseArrayOutput) Index(i pulumi.IntInput) IpCommunityRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpCommunityRuleResponse {
		return vs[0].([]IpCommunityRuleResponse)[vs[1].(int)]
	}).(IpCommunityRuleResponseOutput)
}

// IP Extended Community Id list properties.
type IpExtendedCommunityIdList struct {
	// List of IP Extended Community resource IDs.
	IpExtendedCommunityIds []string `pulumi:"ipExtendedCommunityIds"`
}

// IpExtendedCommunityIdListInput is an input type that accepts IpExtendedCommunityIdListArgs and IpExtendedCommunityIdListOutput values.
// You can construct a concrete instance of `IpExtendedCommunityIdListInput` via:
//
//	IpExtendedCommunityIdListArgs{...}
type IpExtendedCommunityIdListInput interface {
	pulumi.Input

	ToIpExtendedCommunityIdListOutput() IpExtendedCommunityIdListOutput
	ToIpExtendedCommunityIdListOutputWithContext(context.Context) IpExtendedCommunityIdListOutput
}

// IP Extended Community Id list properties.
type IpExtendedCommunityIdListArgs struct {
	// List of IP Extended Community resource IDs.
	IpExtendedCommunityIds pulumi.StringArrayInput `pulumi:"ipExtendedCommunityIds"`
}

func (IpExtendedCommunityIdListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpExtendedCommunityIdList)(nil)).Elem()
}

func (i IpExtendedCommunityIdListArgs) ToIpExtendedCommunityIdListOutput() IpExtendedCommunityIdListOutput {
	return i.ToIpExtendedCommunityIdListOutputWithContext(context.Background())
}

func (i IpExtendedCommunityIdListArgs) ToIpExtendedCommunityIdListOutputWithContext(ctx context.Context) IpExtendedCommunityIdListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpExtendedCommunityIdListOutput)
}

func (i IpExtendedCommunityIdListArgs) ToIpExtendedCommunityIdListPtrOutput() IpExtendedCommunityIdListPtrOutput {
	return i.ToIpExtendedCommunityIdListPtrOutputWithContext(context.Background())
}

func (i IpExtendedCommunityIdListArgs) ToIpExtendedCommunityIdListPtrOutputWithContext(ctx context.Context) IpExtendedCommunityIdListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpExtendedCommunityIdListOutput).ToIpExtendedCommunityIdListPtrOutputWithContext(ctx)
}

// IpExtendedCommunityIdListPtrInput is an input type that accepts IpExtendedCommunityIdListArgs, IpExtendedCommunityIdListPtr and IpExtendedCommunityIdListPtrOutput values.
// You can construct a concrete instance of `IpExtendedCommunityIdListPtrInput` via:
//
//	        IpExtendedCommunityIdListArgs{...}
//
//	or:
//
//	        nil
type IpExtendedCommunityIdListPtrInput interface {
	pulumi.Input

	ToIpExtendedCommunityIdListPtrOutput() IpExtendedCommunityIdListPtrOutput
	ToIpExtendedCommunityIdListPtrOutputWithContext(context.Context) IpExtendedCommunityIdListPtrOutput
}

type ipExtendedCommunityIdListPtrType IpExtendedCommunityIdListArgs

func IpExtendedCommunityIdListPtr(v *IpExtendedCommunityIdListArgs) IpExtendedCommunityIdListPtrInput {
	return (*ipExtendedCommunityIdListPtrType)(v)
}

func (*ipExtendedCommunityIdListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpExtendedCommunityIdList)(nil)).Elem()
}

func (i *ipExtendedCommunityIdListPtrType) ToIpExtendedCommunityIdListPtrOutput() IpExtendedCommunityIdListPtrOutput {
	return i.ToIpExtendedCommunityIdListPtrOutputWithContext(context.Background())
}

func (i *ipExtendedCommunityIdListPtrType) ToIpExtendedCommunityIdListPtrOutputWithContext(ctx context.Context) IpExtendedCommunityIdListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpExtendedCommunityIdListPtrOutput)
}

// IP Extended Community Id list properties.
type IpExtendedCommunityIdListOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityIdListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpExtendedCommunityIdList)(nil)).Elem()
}

func (o IpExtendedCommunityIdListOutput) ToIpExtendedCommunityIdListOutput() IpExtendedCommunityIdListOutput {
	return o
}

func (o IpExtendedCommunityIdListOutput) ToIpExtendedCommunityIdListOutputWithContext(ctx context.Context) IpExtendedCommunityIdListOutput {
	return o
}

func (o IpExtendedCommunityIdListOutput) ToIpExtendedCommunityIdListPtrOutput() IpExtendedCommunityIdListPtrOutput {
	return o.ToIpExtendedCommunityIdListPtrOutputWithContext(context.Background())
}

func (o IpExtendedCommunityIdListOutput) ToIpExtendedCommunityIdListPtrOutputWithContext(ctx context.Context) IpExtendedCommunityIdListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpExtendedCommunityIdList) *IpExtendedCommunityIdList {
		return &v
	}).(IpExtendedCommunityIdListPtrOutput)
}

// List of IP Extended Community resource IDs.
func (o IpExtendedCommunityIdListOutput) IpExtendedCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpExtendedCommunityIdList) []string { return v.IpExtendedCommunityIds }).(pulumi.StringArrayOutput)
}

type IpExtendedCommunityIdListPtrOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityIdListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpExtendedCommunityIdList)(nil)).Elem()
}

func (o IpExtendedCommunityIdListPtrOutput) ToIpExtendedCommunityIdListPtrOutput() IpExtendedCommunityIdListPtrOutput {
	return o
}

func (o IpExtendedCommunityIdListPtrOutput) ToIpExtendedCommunityIdListPtrOutputWithContext(ctx context.Context) IpExtendedCommunityIdListPtrOutput {
	return o
}

func (o IpExtendedCommunityIdListPtrOutput) Elem() IpExtendedCommunityIdListOutput {
	return o.ApplyT(func(v *IpExtendedCommunityIdList) IpExtendedCommunityIdList {
		if v != nil {
			return *v
		}
		var ret IpExtendedCommunityIdList
		return ret
	}).(IpExtendedCommunityIdListOutput)
}

// List of IP Extended Community resource IDs.
func (o IpExtendedCommunityIdListPtrOutput) IpExtendedCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpExtendedCommunityIdList) []string {
		if v == nil {
			return nil
		}
		return v.IpExtendedCommunityIds
	}).(pulumi.StringArrayOutput)
}

// IP Extended Community Id list properties.
type IpExtendedCommunityIdListResponse struct {
	// List of IP Extended Community resource IDs.
	IpExtendedCommunityIds []string `pulumi:"ipExtendedCommunityIds"`
}

// IP Extended Community Id list properties.
type IpExtendedCommunityIdListResponseOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityIdListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpExtendedCommunityIdListResponse)(nil)).Elem()
}

func (o IpExtendedCommunityIdListResponseOutput) ToIpExtendedCommunityIdListResponseOutput() IpExtendedCommunityIdListResponseOutput {
	return o
}

func (o IpExtendedCommunityIdListResponseOutput) ToIpExtendedCommunityIdListResponseOutputWithContext(ctx context.Context) IpExtendedCommunityIdListResponseOutput {
	return o
}

// List of IP Extended Community resource IDs.
func (o IpExtendedCommunityIdListResponseOutput) IpExtendedCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpExtendedCommunityIdListResponse) []string { return v.IpExtendedCommunityIds }).(pulumi.StringArrayOutput)
}

type IpExtendedCommunityIdListResponsePtrOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityIdListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpExtendedCommunityIdListResponse)(nil)).Elem()
}

func (o IpExtendedCommunityIdListResponsePtrOutput) ToIpExtendedCommunityIdListResponsePtrOutput() IpExtendedCommunityIdListResponsePtrOutput {
	return o
}

func (o IpExtendedCommunityIdListResponsePtrOutput) ToIpExtendedCommunityIdListResponsePtrOutputWithContext(ctx context.Context) IpExtendedCommunityIdListResponsePtrOutput {
	return o
}

func (o IpExtendedCommunityIdListResponsePtrOutput) Elem() IpExtendedCommunityIdListResponseOutput {
	return o.ApplyT(func(v *IpExtendedCommunityIdListResponse) IpExtendedCommunityIdListResponse {
		if v != nil {
			return *v
		}
		var ret IpExtendedCommunityIdListResponse
		return ret
	}).(IpExtendedCommunityIdListResponseOutput)
}

// List of IP Extended Community resource IDs.
func (o IpExtendedCommunityIdListResponsePtrOutput) IpExtendedCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpExtendedCommunityIdListResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpExtendedCommunityIds
	}).(pulumi.StringArrayOutput)
}

// List of IP Extended Community Rules.
type IpExtendedCommunityRule struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action string `pulumi:"action"`
	// Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
	RouteTargets []string `pulumi:"routeTargets"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
}

// IpExtendedCommunityRuleInput is an input type that accepts IpExtendedCommunityRuleArgs and IpExtendedCommunityRuleOutput values.
// You can construct a concrete instance of `IpExtendedCommunityRuleInput` via:
//
//	IpExtendedCommunityRuleArgs{...}
type IpExtendedCommunityRuleInput interface {
	pulumi.Input

	ToIpExtendedCommunityRuleOutput() IpExtendedCommunityRuleOutput
	ToIpExtendedCommunityRuleOutputWithContext(context.Context) IpExtendedCommunityRuleOutput
}

// List of IP Extended Community Rules.
type IpExtendedCommunityRuleArgs struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action pulumi.StringInput `pulumi:"action"`
	// Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
	RouteTargets pulumi.StringArrayInput `pulumi:"routeTargets"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber pulumi.Float64Input `pulumi:"sequenceNumber"`
}

func (IpExtendedCommunityRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpExtendedCommunityRule)(nil)).Elem()
}

func (i IpExtendedCommunityRuleArgs) ToIpExtendedCommunityRuleOutput() IpExtendedCommunityRuleOutput {
	return i.ToIpExtendedCommunityRuleOutputWithContext(context.Background())
}

func (i IpExtendedCommunityRuleArgs) ToIpExtendedCommunityRuleOutputWithContext(ctx context.Context) IpExtendedCommunityRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpExtendedCommunityRuleOutput)
}

// IpExtendedCommunityRuleArrayInput is an input type that accepts IpExtendedCommunityRuleArray and IpExtendedCommunityRuleArrayOutput values.
// You can construct a concrete instance of `IpExtendedCommunityRuleArrayInput` via:
//
//	IpExtendedCommunityRuleArray{ IpExtendedCommunityRuleArgs{...} }
type IpExtendedCommunityRuleArrayInput interface {
	pulumi.Input

	ToIpExtendedCommunityRuleArrayOutput() IpExtendedCommunityRuleArrayOutput
	ToIpExtendedCommunityRuleArrayOutputWithContext(context.Context) IpExtendedCommunityRuleArrayOutput
}

type IpExtendedCommunityRuleArray []IpExtendedCommunityRuleInput

func (IpExtendedCommunityRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpExtendedCommunityRule)(nil)).Elem()
}

func (i IpExtendedCommunityRuleArray) ToIpExtendedCommunityRuleArrayOutput() IpExtendedCommunityRuleArrayOutput {
	return i.ToIpExtendedCommunityRuleArrayOutputWithContext(context.Background())
}

func (i IpExtendedCommunityRuleArray) ToIpExtendedCommunityRuleArrayOutputWithContext(ctx context.Context) IpExtendedCommunityRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpExtendedCommunityRuleArrayOutput)
}

// List of IP Extended Community Rules.
type IpExtendedCommunityRuleOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpExtendedCommunityRule)(nil)).Elem()
}

func (o IpExtendedCommunityRuleOutput) ToIpExtendedCommunityRuleOutput() IpExtendedCommunityRuleOutput {
	return o
}

func (o IpExtendedCommunityRuleOutput) ToIpExtendedCommunityRuleOutputWithContext(ctx context.Context) IpExtendedCommunityRuleOutput {
	return o
}

// Action to be taken on the configuration. Example: Permit | Deny.
func (o IpExtendedCommunityRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpExtendedCommunityRule) string { return v.Action }).(pulumi.StringOutput)
}

// Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
func (o IpExtendedCommunityRuleOutput) RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpExtendedCommunityRule) []string { return v.RouteTargets }).(pulumi.StringArrayOutput)
}

// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
func (o IpExtendedCommunityRuleOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v IpExtendedCommunityRule) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

type IpExtendedCommunityRuleArrayOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpExtendedCommunityRule)(nil)).Elem()
}

func (o IpExtendedCommunityRuleArrayOutput) ToIpExtendedCommunityRuleArrayOutput() IpExtendedCommunityRuleArrayOutput {
	return o
}

func (o IpExtendedCommunityRuleArrayOutput) ToIpExtendedCommunityRuleArrayOutputWithContext(ctx context.Context) IpExtendedCommunityRuleArrayOutput {
	return o
}

func (o IpExtendedCommunityRuleArrayOutput) Index(i pulumi.IntInput) IpExtendedCommunityRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpExtendedCommunityRule {
		return vs[0].([]IpExtendedCommunityRule)[vs[1].(int)]
	}).(IpExtendedCommunityRuleOutput)
}

// List of IP Extended Community Rules.
type IpExtendedCommunityRuleResponse struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action string `pulumi:"action"`
	// Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
	RouteTargets []string `pulumi:"routeTargets"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
}

// List of IP Extended Community Rules.
type IpExtendedCommunityRuleResponseOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpExtendedCommunityRuleResponse)(nil)).Elem()
}

func (o IpExtendedCommunityRuleResponseOutput) ToIpExtendedCommunityRuleResponseOutput() IpExtendedCommunityRuleResponseOutput {
	return o
}

func (o IpExtendedCommunityRuleResponseOutput) ToIpExtendedCommunityRuleResponseOutputWithContext(ctx context.Context) IpExtendedCommunityRuleResponseOutput {
	return o
}

// Action to be taken on the configuration. Example: Permit | Deny.
func (o IpExtendedCommunityRuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpExtendedCommunityRuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
func (o IpExtendedCommunityRuleResponseOutput) RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpExtendedCommunityRuleResponse) []string { return v.RouteTargets }).(pulumi.StringArrayOutput)
}

// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
func (o IpExtendedCommunityRuleResponseOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v IpExtendedCommunityRuleResponse) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

type IpExtendedCommunityRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (IpExtendedCommunityRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpExtendedCommunityRuleResponse)(nil)).Elem()
}

func (o IpExtendedCommunityRuleResponseArrayOutput) ToIpExtendedCommunityRuleResponseArrayOutput() IpExtendedCommunityRuleResponseArrayOutput {
	return o
}

func (o IpExtendedCommunityRuleResponseArrayOutput) ToIpExtendedCommunityRuleResponseArrayOutputWithContext(ctx context.Context) IpExtendedCommunityRuleResponseArrayOutput {
	return o
}

func (o IpExtendedCommunityRuleResponseArrayOutput) Index(i pulumi.IntInput) IpExtendedCommunityRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpExtendedCommunityRuleResponse {
		return vs[0].([]IpExtendedCommunityRuleResponse)[vs[1].(int)]
	}).(IpExtendedCommunityRuleResponseOutput)
}

// IP Group properties.
type IpGroupProperties struct {
	// IP Address type.
	IpAddressType *string `pulumi:"ipAddressType"`
	// List of IP Prefixes.
	IpPrefixes []string `pulumi:"ipPrefixes"`
	// IP Group name.
	Name *string `pulumi:"name"`
}

// IpGroupPropertiesInput is an input type that accepts IpGroupPropertiesArgs and IpGroupPropertiesOutput values.
// You can construct a concrete instance of `IpGroupPropertiesInput` via:
//
//	IpGroupPropertiesArgs{...}
type IpGroupPropertiesInput interface {
	pulumi.Input

	ToIpGroupPropertiesOutput() IpGroupPropertiesOutput
	ToIpGroupPropertiesOutputWithContext(context.Context) IpGroupPropertiesOutput
}

// IP Group properties.
type IpGroupPropertiesArgs struct {
	// IP Address type.
	IpAddressType pulumi.StringPtrInput `pulumi:"ipAddressType"`
	// List of IP Prefixes.
	IpPrefixes pulumi.StringArrayInput `pulumi:"ipPrefixes"`
	// IP Group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (IpGroupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpGroupProperties)(nil)).Elem()
}

func (i IpGroupPropertiesArgs) ToIpGroupPropertiesOutput() IpGroupPropertiesOutput {
	return i.ToIpGroupPropertiesOutputWithContext(context.Background())
}

func (i IpGroupPropertiesArgs) ToIpGroupPropertiesOutputWithContext(ctx context.Context) IpGroupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupPropertiesOutput)
}

// IpGroupPropertiesArrayInput is an input type that accepts IpGroupPropertiesArray and IpGroupPropertiesArrayOutput values.
// You can construct a concrete instance of `IpGroupPropertiesArrayInput` via:
//
//	IpGroupPropertiesArray{ IpGroupPropertiesArgs{...} }
type IpGroupPropertiesArrayInput interface {
	pulumi.Input

	ToIpGroupPropertiesArrayOutput() IpGroupPropertiesArrayOutput
	ToIpGroupPropertiesArrayOutputWithContext(context.Context) IpGroupPropertiesArrayOutput
}

type IpGroupPropertiesArray []IpGroupPropertiesInput

func (IpGroupPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpGroupProperties)(nil)).Elem()
}

func (i IpGroupPropertiesArray) ToIpGroupPropertiesArrayOutput() IpGroupPropertiesArrayOutput {
	return i.ToIpGroupPropertiesArrayOutputWithContext(context.Background())
}

func (i IpGroupPropertiesArray) ToIpGroupPropertiesArrayOutputWithContext(ctx context.Context) IpGroupPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupPropertiesArrayOutput)
}

// IP Group properties.
type IpGroupPropertiesOutput struct{ *pulumi.OutputState }

func (IpGroupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpGroupProperties)(nil)).Elem()
}

func (o IpGroupPropertiesOutput) ToIpGroupPropertiesOutput() IpGroupPropertiesOutput {
	return o
}

func (o IpGroupPropertiesOutput) ToIpGroupPropertiesOutputWithContext(ctx context.Context) IpGroupPropertiesOutput {
	return o
}

// IP Address type.
func (o IpGroupPropertiesOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpGroupProperties) *string { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// List of IP Prefixes.
func (o IpGroupPropertiesOutput) IpPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpGroupProperties) []string { return v.IpPrefixes }).(pulumi.StringArrayOutput)
}

// IP Group name.
func (o IpGroupPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpGroupProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type IpGroupPropertiesArrayOutput struct{ *pulumi.OutputState }

func (IpGroupPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpGroupProperties)(nil)).Elem()
}

func (o IpGroupPropertiesArrayOutput) ToIpGroupPropertiesArrayOutput() IpGroupPropertiesArrayOutput {
	return o
}

func (o IpGroupPropertiesArrayOutput) ToIpGroupPropertiesArrayOutputWithContext(ctx context.Context) IpGroupPropertiesArrayOutput {
	return o
}

func (o IpGroupPropertiesArrayOutput) Index(i pulumi.IntInput) IpGroupPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpGroupProperties {
		return vs[0].([]IpGroupProperties)[vs[1].(int)]
	}).(IpGroupPropertiesOutput)
}

// IP Group properties.
type IpGroupPropertiesResponse struct {
	// IP Address type.
	IpAddressType *string `pulumi:"ipAddressType"`
	// List of IP Prefixes.
	IpPrefixes []string `pulumi:"ipPrefixes"`
	// IP Group name.
	Name *string `pulumi:"name"`
}

// IP Group properties.
type IpGroupPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IpGroupPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpGroupPropertiesResponse)(nil)).Elem()
}

func (o IpGroupPropertiesResponseOutput) ToIpGroupPropertiesResponseOutput() IpGroupPropertiesResponseOutput {
	return o
}

func (o IpGroupPropertiesResponseOutput) ToIpGroupPropertiesResponseOutputWithContext(ctx context.Context) IpGroupPropertiesResponseOutput {
	return o
}

// IP Address type.
func (o IpGroupPropertiesResponseOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpGroupPropertiesResponse) *string { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// List of IP Prefixes.
func (o IpGroupPropertiesResponseOutput) IpPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpGroupPropertiesResponse) []string { return v.IpPrefixes }).(pulumi.StringArrayOutput)
}

// IP Group name.
func (o IpGroupPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpGroupPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type IpGroupPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (IpGroupPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpGroupPropertiesResponse)(nil)).Elem()
}

func (o IpGroupPropertiesResponseArrayOutput) ToIpGroupPropertiesResponseArrayOutput() IpGroupPropertiesResponseArrayOutput {
	return o
}

func (o IpGroupPropertiesResponseArrayOutput) ToIpGroupPropertiesResponseArrayOutputWithContext(ctx context.Context) IpGroupPropertiesResponseArrayOutput {
	return o
}

func (o IpGroupPropertiesResponseArrayOutput) Index(i pulumi.IntInput) IpGroupPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpGroupPropertiesResponse {
		return vs[0].([]IpGroupPropertiesResponse)[vs[1].(int)]
	}).(IpGroupPropertiesResponseOutput)
}

// Defines the condition that can be filtered using the selected IPs.
type IpMatchCondition struct {
	// The List of IP Group Names that need to be matched.
	IpGroupNames []string `pulumi:"ipGroupNames"`
	// The list of IP Prefixes that need to be matched.
	IpPrefixValues []string `pulumi:"ipPrefixValues"`
	// IP Prefix Type that needs to be matched.
	PrefixType *string `pulumi:"prefixType"`
	// IP Address type that needs to be matched.
	Type *string `pulumi:"type"`
}

// IpMatchConditionInput is an input type that accepts IpMatchConditionArgs and IpMatchConditionOutput values.
// You can construct a concrete instance of `IpMatchConditionInput` via:
//
//	IpMatchConditionArgs{...}
type IpMatchConditionInput interface {
	pulumi.Input

	ToIpMatchConditionOutput() IpMatchConditionOutput
	ToIpMatchConditionOutputWithContext(context.Context) IpMatchConditionOutput
}

// Defines the condition that can be filtered using the selected IPs.
type IpMatchConditionArgs struct {
	// The List of IP Group Names that need to be matched.
	IpGroupNames pulumi.StringArrayInput `pulumi:"ipGroupNames"`
	// The list of IP Prefixes that need to be matched.
	IpPrefixValues pulumi.StringArrayInput `pulumi:"ipPrefixValues"`
	// IP Prefix Type that needs to be matched.
	PrefixType pulumi.StringPtrInput `pulumi:"prefixType"`
	// IP Address type that needs to be matched.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IpMatchConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMatchCondition)(nil)).Elem()
}

func (i IpMatchConditionArgs) ToIpMatchConditionOutput() IpMatchConditionOutput {
	return i.ToIpMatchConditionOutputWithContext(context.Background())
}

func (i IpMatchConditionArgs) ToIpMatchConditionOutputWithContext(ctx context.Context) IpMatchConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMatchConditionOutput)
}

func (i IpMatchConditionArgs) ToIpMatchConditionPtrOutput() IpMatchConditionPtrOutput {
	return i.ToIpMatchConditionPtrOutputWithContext(context.Background())
}

func (i IpMatchConditionArgs) ToIpMatchConditionPtrOutputWithContext(ctx context.Context) IpMatchConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMatchConditionOutput).ToIpMatchConditionPtrOutputWithContext(ctx)
}

// IpMatchConditionPtrInput is an input type that accepts IpMatchConditionArgs, IpMatchConditionPtr and IpMatchConditionPtrOutput values.
// You can construct a concrete instance of `IpMatchConditionPtrInput` via:
//
//	        IpMatchConditionArgs{...}
//
//	or:
//
//	        nil
type IpMatchConditionPtrInput interface {
	pulumi.Input

	ToIpMatchConditionPtrOutput() IpMatchConditionPtrOutput
	ToIpMatchConditionPtrOutputWithContext(context.Context) IpMatchConditionPtrOutput
}

type ipMatchConditionPtrType IpMatchConditionArgs

func IpMatchConditionPtr(v *IpMatchConditionArgs) IpMatchConditionPtrInput {
	return (*ipMatchConditionPtrType)(v)
}

func (*ipMatchConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpMatchCondition)(nil)).Elem()
}

func (i *ipMatchConditionPtrType) ToIpMatchConditionPtrOutput() IpMatchConditionPtrOutput {
	return i.ToIpMatchConditionPtrOutputWithContext(context.Background())
}

func (i *ipMatchConditionPtrType) ToIpMatchConditionPtrOutputWithContext(ctx context.Context) IpMatchConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMatchConditionPtrOutput)
}

// Defines the condition that can be filtered using the selected IPs.
type IpMatchConditionOutput struct{ *pulumi.OutputState }

func (IpMatchConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMatchCondition)(nil)).Elem()
}

func (o IpMatchConditionOutput) ToIpMatchConditionOutput() IpMatchConditionOutput {
	return o
}

func (o IpMatchConditionOutput) ToIpMatchConditionOutputWithContext(ctx context.Context) IpMatchConditionOutput {
	return o
}

func (o IpMatchConditionOutput) ToIpMatchConditionPtrOutput() IpMatchConditionPtrOutput {
	return o.ToIpMatchConditionPtrOutputWithContext(context.Background())
}

func (o IpMatchConditionOutput) ToIpMatchConditionPtrOutputWithContext(ctx context.Context) IpMatchConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpMatchCondition) *IpMatchCondition {
		return &v
	}).(IpMatchConditionPtrOutput)
}

// The List of IP Group Names that need to be matched.
func (o IpMatchConditionOutput) IpGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpMatchCondition) []string { return v.IpGroupNames }).(pulumi.StringArrayOutput)
}

// The list of IP Prefixes that need to be matched.
func (o IpMatchConditionOutput) IpPrefixValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpMatchCondition) []string { return v.IpPrefixValues }).(pulumi.StringArrayOutput)
}

// IP Prefix Type that needs to be matched.
func (o IpMatchConditionOutput) PrefixType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMatchCondition) *string { return v.PrefixType }).(pulumi.StringPtrOutput)
}

// IP Address type that needs to be matched.
func (o IpMatchConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMatchCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IpMatchConditionPtrOutput struct{ *pulumi.OutputState }

func (IpMatchConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpMatchCondition)(nil)).Elem()
}

func (o IpMatchConditionPtrOutput) ToIpMatchConditionPtrOutput() IpMatchConditionPtrOutput {
	return o
}

func (o IpMatchConditionPtrOutput) ToIpMatchConditionPtrOutputWithContext(ctx context.Context) IpMatchConditionPtrOutput {
	return o
}

func (o IpMatchConditionPtrOutput) Elem() IpMatchConditionOutput {
	return o.ApplyT(func(v *IpMatchCondition) IpMatchCondition {
		if v != nil {
			return *v
		}
		var ret IpMatchCondition
		return ret
	}).(IpMatchConditionOutput)
}

// The List of IP Group Names that need to be matched.
func (o IpMatchConditionPtrOutput) IpGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpMatchCondition) []string {
		if v == nil {
			return nil
		}
		return v.IpGroupNames
	}).(pulumi.StringArrayOutput)
}

// The list of IP Prefixes that need to be matched.
func (o IpMatchConditionPtrOutput) IpPrefixValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpMatchCondition) []string {
		if v == nil {
			return nil
		}
		return v.IpPrefixValues
	}).(pulumi.StringArrayOutput)
}

// IP Prefix Type that needs to be matched.
func (o IpMatchConditionPtrOutput) PrefixType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpMatchCondition) *string {
		if v == nil {
			return nil
		}
		return v.PrefixType
	}).(pulumi.StringPtrOutput)
}

// IP Address type that needs to be matched.
func (o IpMatchConditionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpMatchCondition) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Defines the condition that can be filtered using the selected IPs.
type IpMatchConditionResponse struct {
	// The List of IP Group Names that need to be matched.
	IpGroupNames []string `pulumi:"ipGroupNames"`
	// The list of IP Prefixes that need to be matched.
	IpPrefixValues []string `pulumi:"ipPrefixValues"`
	// IP Prefix Type that needs to be matched.
	PrefixType *string `pulumi:"prefixType"`
	// IP Address type that needs to be matched.
	Type *string `pulumi:"type"`
}

// Defines the condition that can be filtered using the selected IPs.
type IpMatchConditionResponseOutput struct{ *pulumi.OutputState }

func (IpMatchConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMatchConditionResponse)(nil)).Elem()
}

func (o IpMatchConditionResponseOutput) ToIpMatchConditionResponseOutput() IpMatchConditionResponseOutput {
	return o
}

func (o IpMatchConditionResponseOutput) ToIpMatchConditionResponseOutputWithContext(ctx context.Context) IpMatchConditionResponseOutput {
	return o
}

// The List of IP Group Names that need to be matched.
func (o IpMatchConditionResponseOutput) IpGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpMatchConditionResponse) []string { return v.IpGroupNames }).(pulumi.StringArrayOutput)
}

// The list of IP Prefixes that need to be matched.
func (o IpMatchConditionResponseOutput) IpPrefixValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpMatchConditionResponse) []string { return v.IpPrefixValues }).(pulumi.StringArrayOutput)
}

// IP Prefix Type that needs to be matched.
func (o IpMatchConditionResponseOutput) PrefixType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMatchConditionResponse) *string { return v.PrefixType }).(pulumi.StringPtrOutput)
}

// IP Address type that needs to be matched.
func (o IpMatchConditionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMatchConditionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IpMatchConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (IpMatchConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpMatchConditionResponse)(nil)).Elem()
}

func (o IpMatchConditionResponsePtrOutput) ToIpMatchConditionResponsePtrOutput() IpMatchConditionResponsePtrOutput {
	return o
}

func (o IpMatchConditionResponsePtrOutput) ToIpMatchConditionResponsePtrOutputWithContext(ctx context.Context) IpMatchConditionResponsePtrOutput {
	return o
}

func (o IpMatchConditionResponsePtrOutput) Elem() IpMatchConditionResponseOutput {
	return o.ApplyT(func(v *IpMatchConditionResponse) IpMatchConditionResponse {
		if v != nil {
			return *v
		}
		var ret IpMatchConditionResponse
		return ret
	}).(IpMatchConditionResponseOutput)
}

// The List of IP Group Names that need to be matched.
func (o IpMatchConditionResponsePtrOutput) IpGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpMatchConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpGroupNames
	}).(pulumi.StringArrayOutput)
}

// The list of IP Prefixes that need to be matched.
func (o IpMatchConditionResponsePtrOutput) IpPrefixValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpMatchConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpPrefixValues
	}).(pulumi.StringArrayOutput)
}

// IP Prefix Type that needs to be matched.
func (o IpMatchConditionResponsePtrOutput) PrefixType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpMatchConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrefixType
	}).(pulumi.StringPtrOutput)
}

// IP Address type that needs to be matched.
func (o IpMatchConditionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpMatchConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// IP Prefix Rule properties.
type IpPrefixRule struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action string `pulumi:"action"`
	// Specify prefix-list bounds.
	Condition *string `pulumi:"condition"`
	// Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126
	NetworkPrefix string `pulumi:"networkPrefix"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
	// SubnetMaskLength gives the minimum NetworkPrefix length to be matched. Possible values for IPv4 are 1 - 32 . Possible values of IPv6 are 1 - 128.
	SubnetMaskLength *string `pulumi:"subnetMaskLength"`
}

// IpPrefixRuleInput is an input type that accepts IpPrefixRuleArgs and IpPrefixRuleOutput values.
// You can construct a concrete instance of `IpPrefixRuleInput` via:
//
//	IpPrefixRuleArgs{...}
type IpPrefixRuleInput interface {
	pulumi.Input

	ToIpPrefixRuleOutput() IpPrefixRuleOutput
	ToIpPrefixRuleOutputWithContext(context.Context) IpPrefixRuleOutput
}

// IP Prefix Rule properties.
type IpPrefixRuleArgs struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action pulumi.StringInput `pulumi:"action"`
	// Specify prefix-list bounds.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126
	NetworkPrefix pulumi.StringInput `pulumi:"networkPrefix"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber pulumi.Float64Input `pulumi:"sequenceNumber"`
	// SubnetMaskLength gives the minimum NetworkPrefix length to be matched. Possible values for IPv4 are 1 - 32 . Possible values of IPv6 are 1 - 128.
	SubnetMaskLength pulumi.StringPtrInput `pulumi:"subnetMaskLength"`
}

func (IpPrefixRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpPrefixRule)(nil)).Elem()
}

func (i IpPrefixRuleArgs) ToIpPrefixRuleOutput() IpPrefixRuleOutput {
	return i.ToIpPrefixRuleOutputWithContext(context.Background())
}

func (i IpPrefixRuleArgs) ToIpPrefixRuleOutputWithContext(ctx context.Context) IpPrefixRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPrefixRuleOutput)
}

// IpPrefixRuleArrayInput is an input type that accepts IpPrefixRuleArray and IpPrefixRuleArrayOutput values.
// You can construct a concrete instance of `IpPrefixRuleArrayInput` via:
//
//	IpPrefixRuleArray{ IpPrefixRuleArgs{...} }
type IpPrefixRuleArrayInput interface {
	pulumi.Input

	ToIpPrefixRuleArrayOutput() IpPrefixRuleArrayOutput
	ToIpPrefixRuleArrayOutputWithContext(context.Context) IpPrefixRuleArrayOutput
}

type IpPrefixRuleArray []IpPrefixRuleInput

func (IpPrefixRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpPrefixRule)(nil)).Elem()
}

func (i IpPrefixRuleArray) ToIpPrefixRuleArrayOutput() IpPrefixRuleArrayOutput {
	return i.ToIpPrefixRuleArrayOutputWithContext(context.Background())
}

func (i IpPrefixRuleArray) ToIpPrefixRuleArrayOutputWithContext(ctx context.Context) IpPrefixRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPrefixRuleArrayOutput)
}

// IP Prefix Rule properties.
type IpPrefixRuleOutput struct{ *pulumi.OutputState }

func (IpPrefixRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpPrefixRule)(nil)).Elem()
}

func (o IpPrefixRuleOutput) ToIpPrefixRuleOutput() IpPrefixRuleOutput {
	return o
}

func (o IpPrefixRuleOutput) ToIpPrefixRuleOutputWithContext(ctx context.Context) IpPrefixRuleOutput {
	return o
}

// Action to be taken on the configuration. Example: Permit | Deny.
func (o IpPrefixRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpPrefixRule) string { return v.Action }).(pulumi.StringOutput)
}

// Specify prefix-list bounds.
func (o IpPrefixRuleOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpPrefixRule) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126
func (o IpPrefixRuleOutput) NetworkPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v IpPrefixRule) string { return v.NetworkPrefix }).(pulumi.StringOutput)
}

// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
func (o IpPrefixRuleOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v IpPrefixRule) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

// SubnetMaskLength gives the minimum NetworkPrefix length to be matched. Possible values for IPv4 are 1 - 32 . Possible values of IPv6 are 1 - 128.
func (o IpPrefixRuleOutput) SubnetMaskLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpPrefixRule) *string { return v.SubnetMaskLength }).(pulumi.StringPtrOutput)
}

type IpPrefixRuleArrayOutput struct{ *pulumi.OutputState }

func (IpPrefixRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpPrefixRule)(nil)).Elem()
}

func (o IpPrefixRuleArrayOutput) ToIpPrefixRuleArrayOutput() IpPrefixRuleArrayOutput {
	return o
}

func (o IpPrefixRuleArrayOutput) ToIpPrefixRuleArrayOutputWithContext(ctx context.Context) IpPrefixRuleArrayOutput {
	return o
}

func (o IpPrefixRuleArrayOutput) Index(i pulumi.IntInput) IpPrefixRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpPrefixRule {
		return vs[0].([]IpPrefixRule)[vs[1].(int)]
	}).(IpPrefixRuleOutput)
}

// IP Prefix Rule properties.
type IpPrefixRuleResponse struct {
	// Action to be taken on the configuration. Example: Permit | Deny.
	Action string `pulumi:"action"`
	// Specify prefix-list bounds.
	Condition *string `pulumi:"condition"`
	// Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126
	NetworkPrefix string `pulumi:"networkPrefix"`
	// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
	// SubnetMaskLength gives the minimum NetworkPrefix length to be matched. Possible values for IPv4 are 1 - 32 . Possible values of IPv6 are 1 - 128.
	SubnetMaskLength *string `pulumi:"subnetMaskLength"`
}

// IP Prefix Rule properties.
type IpPrefixRuleResponseOutput struct{ *pulumi.OutputState }

func (IpPrefixRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpPrefixRuleResponse)(nil)).Elem()
}

func (o IpPrefixRuleResponseOutput) ToIpPrefixRuleResponseOutput() IpPrefixRuleResponseOutput {
	return o
}

func (o IpPrefixRuleResponseOutput) ToIpPrefixRuleResponseOutputWithContext(ctx context.Context) IpPrefixRuleResponseOutput {
	return o
}

// Action to be taken on the configuration. Example: Permit | Deny.
func (o IpPrefixRuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpPrefixRuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// Specify prefix-list bounds.
func (o IpPrefixRuleResponseOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpPrefixRuleResponse) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126
func (o IpPrefixRuleResponseOutput) NetworkPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v IpPrefixRuleResponse) string { return v.NetworkPrefix }).(pulumi.StringOutput)
}

// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
func (o IpPrefixRuleResponseOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v IpPrefixRuleResponse) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

// SubnetMaskLength gives the minimum NetworkPrefix length to be matched. Possible values for IPv4 are 1 - 32 . Possible values of IPv6 are 1 - 128.
func (o IpPrefixRuleResponseOutput) SubnetMaskLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpPrefixRuleResponse) *string { return v.SubnetMaskLength }).(pulumi.StringPtrOutput)
}

type IpPrefixRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (IpPrefixRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpPrefixRuleResponse)(nil)).Elem()
}

func (o IpPrefixRuleResponseArrayOutput) ToIpPrefixRuleResponseArrayOutput() IpPrefixRuleResponseArrayOutput {
	return o
}

func (o IpPrefixRuleResponseArrayOutput) ToIpPrefixRuleResponseArrayOutputWithContext(ctx context.Context) IpPrefixRuleResponseArrayOutput {
	return o
}

func (o IpPrefixRuleResponseArrayOutput) Index(i pulumi.IntInput) IpPrefixRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpPrefixRuleResponse {
		return vs[0].([]IpPrefixRuleResponse)[vs[1].(int)]
	}).(IpPrefixRuleResponseOutput)
}

// Isolation Domain Properties.
type IsolationDomainProperties struct {
	// Type of encapsulation.
	Encapsulation *string `pulumi:"encapsulation"`
	// List of Neighbor Group IDs.
	NeighborGroupIds []string `pulumi:"neighborGroupIds"`
}

// IsolationDomainPropertiesInput is an input type that accepts IsolationDomainPropertiesArgs and IsolationDomainPropertiesOutput values.
// You can construct a concrete instance of `IsolationDomainPropertiesInput` via:
//
//	IsolationDomainPropertiesArgs{...}
type IsolationDomainPropertiesInput interface {
	pulumi.Input

	ToIsolationDomainPropertiesOutput() IsolationDomainPropertiesOutput
	ToIsolationDomainPropertiesOutputWithContext(context.Context) IsolationDomainPropertiesOutput
}

// Isolation Domain Properties.
type IsolationDomainPropertiesArgs struct {
	// Type of encapsulation.
	Encapsulation pulumi.StringPtrInput `pulumi:"encapsulation"`
	// List of Neighbor Group IDs.
	NeighborGroupIds pulumi.StringArrayInput `pulumi:"neighborGroupIds"`
}

func (IsolationDomainPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IsolationDomainProperties)(nil)).Elem()
}

func (i IsolationDomainPropertiesArgs) ToIsolationDomainPropertiesOutput() IsolationDomainPropertiesOutput {
	return i.ToIsolationDomainPropertiesOutputWithContext(context.Background())
}

func (i IsolationDomainPropertiesArgs) ToIsolationDomainPropertiesOutputWithContext(ctx context.Context) IsolationDomainPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationDomainPropertiesOutput)
}

func (i IsolationDomainPropertiesArgs) ToIsolationDomainPropertiesPtrOutput() IsolationDomainPropertiesPtrOutput {
	return i.ToIsolationDomainPropertiesPtrOutputWithContext(context.Background())
}

func (i IsolationDomainPropertiesArgs) ToIsolationDomainPropertiesPtrOutputWithContext(ctx context.Context) IsolationDomainPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationDomainPropertiesOutput).ToIsolationDomainPropertiesPtrOutputWithContext(ctx)
}

// IsolationDomainPropertiesPtrInput is an input type that accepts IsolationDomainPropertiesArgs, IsolationDomainPropertiesPtr and IsolationDomainPropertiesPtrOutput values.
// You can construct a concrete instance of `IsolationDomainPropertiesPtrInput` via:
//
//	        IsolationDomainPropertiesArgs{...}
//
//	or:
//
//	        nil
type IsolationDomainPropertiesPtrInput interface {
	pulumi.Input

	ToIsolationDomainPropertiesPtrOutput() IsolationDomainPropertiesPtrOutput
	ToIsolationDomainPropertiesPtrOutputWithContext(context.Context) IsolationDomainPropertiesPtrOutput
}

type isolationDomainPropertiesPtrType IsolationDomainPropertiesArgs

func IsolationDomainPropertiesPtr(v *IsolationDomainPropertiesArgs) IsolationDomainPropertiesPtrInput {
	return (*isolationDomainPropertiesPtrType)(v)
}

func (*isolationDomainPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IsolationDomainProperties)(nil)).Elem()
}

func (i *isolationDomainPropertiesPtrType) ToIsolationDomainPropertiesPtrOutput() IsolationDomainPropertiesPtrOutput {
	return i.ToIsolationDomainPropertiesPtrOutputWithContext(context.Background())
}

func (i *isolationDomainPropertiesPtrType) ToIsolationDomainPropertiesPtrOutputWithContext(ctx context.Context) IsolationDomainPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolationDomainPropertiesPtrOutput)
}

// Isolation Domain Properties.
type IsolationDomainPropertiesOutput struct{ *pulumi.OutputState }

func (IsolationDomainPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsolationDomainProperties)(nil)).Elem()
}

func (o IsolationDomainPropertiesOutput) ToIsolationDomainPropertiesOutput() IsolationDomainPropertiesOutput {
	return o
}

func (o IsolationDomainPropertiesOutput) ToIsolationDomainPropertiesOutputWithContext(ctx context.Context) IsolationDomainPropertiesOutput {
	return o
}

func (o IsolationDomainPropertiesOutput) ToIsolationDomainPropertiesPtrOutput() IsolationDomainPropertiesPtrOutput {
	return o.ToIsolationDomainPropertiesPtrOutputWithContext(context.Background())
}

func (o IsolationDomainPropertiesOutput) ToIsolationDomainPropertiesPtrOutputWithContext(ctx context.Context) IsolationDomainPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IsolationDomainProperties) *IsolationDomainProperties {
		return &v
	}).(IsolationDomainPropertiesPtrOutput)
}

// Type of encapsulation.
func (o IsolationDomainPropertiesOutput) Encapsulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsolationDomainProperties) *string { return v.Encapsulation }).(pulumi.StringPtrOutput)
}

// List of Neighbor Group IDs.
func (o IsolationDomainPropertiesOutput) NeighborGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IsolationDomainProperties) []string { return v.NeighborGroupIds }).(pulumi.StringArrayOutput)
}

type IsolationDomainPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IsolationDomainPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IsolationDomainProperties)(nil)).Elem()
}

func (o IsolationDomainPropertiesPtrOutput) ToIsolationDomainPropertiesPtrOutput() IsolationDomainPropertiesPtrOutput {
	return o
}

func (o IsolationDomainPropertiesPtrOutput) ToIsolationDomainPropertiesPtrOutputWithContext(ctx context.Context) IsolationDomainPropertiesPtrOutput {
	return o
}

func (o IsolationDomainPropertiesPtrOutput) Elem() IsolationDomainPropertiesOutput {
	return o.ApplyT(func(v *IsolationDomainProperties) IsolationDomainProperties {
		if v != nil {
			return *v
		}
		var ret IsolationDomainProperties
		return ret
	}).(IsolationDomainPropertiesOutput)
}

// Type of encapsulation.
func (o IsolationDomainPropertiesPtrOutput) Encapsulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IsolationDomainProperties) *string {
		if v == nil {
			return nil
		}
		return v.Encapsulation
	}).(pulumi.StringPtrOutput)
}

// List of Neighbor Group IDs.
func (o IsolationDomainPropertiesPtrOutput) NeighborGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IsolationDomainProperties) []string {
		if v == nil {
			return nil
		}
		return v.NeighborGroupIds
	}).(pulumi.StringArrayOutput)
}

// Isolation Domain Properties.
type IsolationDomainPropertiesResponse struct {
	// Type of encapsulation.
	Encapsulation *string `pulumi:"encapsulation"`
	// List of Neighbor Group IDs.
	NeighborGroupIds []string `pulumi:"neighborGroupIds"`
}

// Isolation Domain Properties.
type IsolationDomainPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IsolationDomainPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsolationDomainPropertiesResponse)(nil)).Elem()
}

func (o IsolationDomainPropertiesResponseOutput) ToIsolationDomainPropertiesResponseOutput() IsolationDomainPropertiesResponseOutput {
	return o
}

func (o IsolationDomainPropertiesResponseOutput) ToIsolationDomainPropertiesResponseOutputWithContext(ctx context.Context) IsolationDomainPropertiesResponseOutput {
	return o
}

// Type of encapsulation.
func (o IsolationDomainPropertiesResponseOutput) Encapsulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsolationDomainPropertiesResponse) *string { return v.Encapsulation }).(pulumi.StringPtrOutput)
}

// List of Neighbor Group IDs.
func (o IsolationDomainPropertiesResponseOutput) NeighborGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IsolationDomainPropertiesResponse) []string { return v.NeighborGroupIds }).(pulumi.StringArrayOutput)
}

type IsolationDomainPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IsolationDomainPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IsolationDomainPropertiesResponse)(nil)).Elem()
}

func (o IsolationDomainPropertiesResponsePtrOutput) ToIsolationDomainPropertiesResponsePtrOutput() IsolationDomainPropertiesResponsePtrOutput {
	return o
}

func (o IsolationDomainPropertiesResponsePtrOutput) ToIsolationDomainPropertiesResponsePtrOutputWithContext(ctx context.Context) IsolationDomainPropertiesResponsePtrOutput {
	return o
}

func (o IsolationDomainPropertiesResponsePtrOutput) Elem() IsolationDomainPropertiesResponseOutput {
	return o.ApplyT(func(v *IsolationDomainPropertiesResponse) IsolationDomainPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IsolationDomainPropertiesResponse
		return ret
	}).(IsolationDomainPropertiesResponseOutput)
}

// Type of encapsulation.
func (o IsolationDomainPropertiesResponsePtrOutput) Encapsulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IsolationDomainPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Encapsulation
	}).(pulumi.StringPtrOutput)
}

// List of Neighbor Group IDs.
func (o IsolationDomainPropertiesResponsePtrOutput) NeighborGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IsolationDomainPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.NeighborGroupIds
	}).(pulumi.StringArrayOutput)
}

// Array of ARM Resource ID of the RoutePolicies.
type L3ExportRoutePolicy struct {
	// ARM Resource ID of the RoutePolicy.
	ExportIpv4RoutePolicyId *string `pulumi:"exportIpv4RoutePolicyId"`
	// ARM Resource ID of the RoutePolicy.
	ExportIpv6RoutePolicyId *string `pulumi:"exportIpv6RoutePolicyId"`
}

// L3ExportRoutePolicyInput is an input type that accepts L3ExportRoutePolicyArgs and L3ExportRoutePolicyOutput values.
// You can construct a concrete instance of `L3ExportRoutePolicyInput` via:
//
//	L3ExportRoutePolicyArgs{...}
type L3ExportRoutePolicyInput interface {
	pulumi.Input

	ToL3ExportRoutePolicyOutput() L3ExportRoutePolicyOutput
	ToL3ExportRoutePolicyOutputWithContext(context.Context) L3ExportRoutePolicyOutput
}

// Array of ARM Resource ID of the RoutePolicies.
type L3ExportRoutePolicyArgs struct {
	// ARM Resource ID of the RoutePolicy.
	ExportIpv4RoutePolicyId pulumi.StringPtrInput `pulumi:"exportIpv4RoutePolicyId"`
	// ARM Resource ID of the RoutePolicy.
	ExportIpv6RoutePolicyId pulumi.StringPtrInput `pulumi:"exportIpv6RoutePolicyId"`
}

func (L3ExportRoutePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L3ExportRoutePolicy)(nil)).Elem()
}

func (i L3ExportRoutePolicyArgs) ToL3ExportRoutePolicyOutput() L3ExportRoutePolicyOutput {
	return i.ToL3ExportRoutePolicyOutputWithContext(context.Background())
}

func (i L3ExportRoutePolicyArgs) ToL3ExportRoutePolicyOutputWithContext(ctx context.Context) L3ExportRoutePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3ExportRoutePolicyOutput)
}

func (i L3ExportRoutePolicyArgs) ToL3ExportRoutePolicyPtrOutput() L3ExportRoutePolicyPtrOutput {
	return i.ToL3ExportRoutePolicyPtrOutputWithContext(context.Background())
}

func (i L3ExportRoutePolicyArgs) ToL3ExportRoutePolicyPtrOutputWithContext(ctx context.Context) L3ExportRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3ExportRoutePolicyOutput).ToL3ExportRoutePolicyPtrOutputWithContext(ctx)
}

// L3ExportRoutePolicyPtrInput is an input type that accepts L3ExportRoutePolicyArgs, L3ExportRoutePolicyPtr and L3ExportRoutePolicyPtrOutput values.
// You can construct a concrete instance of `L3ExportRoutePolicyPtrInput` via:
//
//	        L3ExportRoutePolicyArgs{...}
//
//	or:
//
//	        nil
type L3ExportRoutePolicyPtrInput interface {
	pulumi.Input

	ToL3ExportRoutePolicyPtrOutput() L3ExportRoutePolicyPtrOutput
	ToL3ExportRoutePolicyPtrOutputWithContext(context.Context) L3ExportRoutePolicyPtrOutput
}

type l3exportRoutePolicyPtrType L3ExportRoutePolicyArgs

func L3ExportRoutePolicyPtr(v *L3ExportRoutePolicyArgs) L3ExportRoutePolicyPtrInput {
	return (*l3exportRoutePolicyPtrType)(v)
}

func (*l3exportRoutePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**L3ExportRoutePolicy)(nil)).Elem()
}

func (i *l3exportRoutePolicyPtrType) ToL3ExportRoutePolicyPtrOutput() L3ExportRoutePolicyPtrOutput {
	return i.ToL3ExportRoutePolicyPtrOutputWithContext(context.Background())
}

func (i *l3exportRoutePolicyPtrType) ToL3ExportRoutePolicyPtrOutputWithContext(ctx context.Context) L3ExportRoutePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3ExportRoutePolicyPtrOutput)
}

// Array of ARM Resource ID of the RoutePolicies.
type L3ExportRoutePolicyOutput struct{ *pulumi.OutputState }

func (L3ExportRoutePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L3ExportRoutePolicy)(nil)).Elem()
}

func (o L3ExportRoutePolicyOutput) ToL3ExportRoutePolicyOutput() L3ExportRoutePolicyOutput {
	return o
}

func (o L3ExportRoutePolicyOutput) ToL3ExportRoutePolicyOutputWithContext(ctx context.Context) L3ExportRoutePolicyOutput {
	return o
}

func (o L3ExportRoutePolicyOutput) ToL3ExportRoutePolicyPtrOutput() L3ExportRoutePolicyPtrOutput {
	return o.ToL3ExportRoutePolicyPtrOutputWithContext(context.Background())
}

func (o L3ExportRoutePolicyOutput) ToL3ExportRoutePolicyPtrOutputWithContext(ctx context.Context) L3ExportRoutePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v L3ExportRoutePolicy) *L3ExportRoutePolicy {
		return &v
	}).(L3ExportRoutePolicyPtrOutput)
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3ExportRoutePolicy) *string { return v.ExportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3ExportRoutePolicy) *string { return v.ExportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type L3ExportRoutePolicyPtrOutput struct{ *pulumi.OutputState }

func (L3ExportRoutePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L3ExportRoutePolicy)(nil)).Elem()
}

func (o L3ExportRoutePolicyPtrOutput) ToL3ExportRoutePolicyPtrOutput() L3ExportRoutePolicyPtrOutput {
	return o
}

func (o L3ExportRoutePolicyPtrOutput) ToL3ExportRoutePolicyPtrOutputWithContext(ctx context.Context) L3ExportRoutePolicyPtrOutput {
	return o
}

func (o L3ExportRoutePolicyPtrOutput) Elem() L3ExportRoutePolicyOutput {
	return o.ApplyT(func(v *L3ExportRoutePolicy) L3ExportRoutePolicy {
		if v != nil {
			return *v
		}
		var ret L3ExportRoutePolicy
		return ret
	}).(L3ExportRoutePolicyOutput)
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyPtrOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L3ExportRoutePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyPtrOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L3ExportRoutePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Array of ARM Resource ID of the RoutePolicies.
type L3ExportRoutePolicyResponse struct {
	// ARM Resource ID of the RoutePolicy.
	ExportIpv4RoutePolicyId *string `pulumi:"exportIpv4RoutePolicyId"`
	// ARM Resource ID of the RoutePolicy.
	ExportIpv6RoutePolicyId *string `pulumi:"exportIpv6RoutePolicyId"`
}

// Array of ARM Resource ID of the RoutePolicies.
type L3ExportRoutePolicyResponseOutput struct{ *pulumi.OutputState }

func (L3ExportRoutePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L3ExportRoutePolicyResponse)(nil)).Elem()
}

func (o L3ExportRoutePolicyResponseOutput) ToL3ExportRoutePolicyResponseOutput() L3ExportRoutePolicyResponseOutput {
	return o
}

func (o L3ExportRoutePolicyResponseOutput) ToL3ExportRoutePolicyResponseOutputWithContext(ctx context.Context) L3ExportRoutePolicyResponseOutput {
	return o
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyResponseOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3ExportRoutePolicyResponse) *string { return v.ExportIpv4RoutePolicyId }).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyResponseOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3ExportRoutePolicyResponse) *string { return v.ExportIpv6RoutePolicyId }).(pulumi.StringPtrOutput)
}

type L3ExportRoutePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (L3ExportRoutePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L3ExportRoutePolicyResponse)(nil)).Elem()
}

func (o L3ExportRoutePolicyResponsePtrOutput) ToL3ExportRoutePolicyResponsePtrOutput() L3ExportRoutePolicyResponsePtrOutput {
	return o
}

func (o L3ExportRoutePolicyResponsePtrOutput) ToL3ExportRoutePolicyResponsePtrOutputWithContext(ctx context.Context) L3ExportRoutePolicyResponsePtrOutput {
	return o
}

func (o L3ExportRoutePolicyResponsePtrOutput) Elem() L3ExportRoutePolicyResponseOutput {
	return o.ApplyT(func(v *L3ExportRoutePolicyResponse) L3ExportRoutePolicyResponse {
		if v != nil {
			return *v
		}
		var ret L3ExportRoutePolicyResponse
		return ret
	}).(L3ExportRoutePolicyResponseOutput)
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyResponsePtrOutput) ExportIpv4RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L3ExportRoutePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the RoutePolicy.
func (o L3ExportRoutePolicyResponsePtrOutput) ExportIpv6RoutePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L3ExportRoutePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RoutePolicyId
	}).(pulumi.StringPtrOutput)
}

// Option B configuration.
type L3OptionBProperties struct {
	// RouteTargets to be applied. This is used for the backward compatibility.
	ExportRouteTargets []string `pulumi:"exportRouteTargets"`
	// RouteTargets to be applied. This is used for the backward compatibility.
	ImportRouteTargets []string `pulumi:"importRouteTargets"`
	// RouteTargets to be applied.
	RouteTargets *RouteTargetInformation `pulumi:"routeTargets"`
}

// L3OptionBPropertiesInput is an input type that accepts L3OptionBPropertiesArgs and L3OptionBPropertiesOutput values.
// You can construct a concrete instance of `L3OptionBPropertiesInput` via:
//
//	L3OptionBPropertiesArgs{...}
type L3OptionBPropertiesInput interface {
	pulumi.Input

	ToL3OptionBPropertiesOutput() L3OptionBPropertiesOutput
	ToL3OptionBPropertiesOutputWithContext(context.Context) L3OptionBPropertiesOutput
}

// Option B configuration.
type L3OptionBPropertiesArgs struct {
	// RouteTargets to be applied. This is used for the backward compatibility.
	ExportRouteTargets pulumi.StringArrayInput `pulumi:"exportRouteTargets"`
	// RouteTargets to be applied. This is used for the backward compatibility.
	ImportRouteTargets pulumi.StringArrayInput `pulumi:"importRouteTargets"`
	// RouteTargets to be applied.
	RouteTargets RouteTargetInformationPtrInput `pulumi:"routeTargets"`
}

func (L3OptionBPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L3OptionBProperties)(nil)).Elem()
}

func (i L3OptionBPropertiesArgs) ToL3OptionBPropertiesOutput() L3OptionBPropertiesOutput {
	return i.ToL3OptionBPropertiesOutputWithContext(context.Background())
}

func (i L3OptionBPropertiesArgs) ToL3OptionBPropertiesOutputWithContext(ctx context.Context) L3OptionBPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3OptionBPropertiesOutput)
}

func (i L3OptionBPropertiesArgs) ToL3OptionBPropertiesPtrOutput() L3OptionBPropertiesPtrOutput {
	return i.ToL3OptionBPropertiesPtrOutputWithContext(context.Background())
}

func (i L3OptionBPropertiesArgs) ToL3OptionBPropertiesPtrOutputWithContext(ctx context.Context) L3OptionBPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3OptionBPropertiesOutput).ToL3OptionBPropertiesPtrOutputWithContext(ctx)
}

// L3OptionBPropertiesPtrInput is an input type that accepts L3OptionBPropertiesArgs, L3OptionBPropertiesPtr and L3OptionBPropertiesPtrOutput values.
// You can construct a concrete instance of `L3OptionBPropertiesPtrInput` via:
//
//	        L3OptionBPropertiesArgs{...}
//
//	or:
//
//	        nil
type L3OptionBPropertiesPtrInput interface {
	pulumi.Input

	ToL3OptionBPropertiesPtrOutput() L3OptionBPropertiesPtrOutput
	ToL3OptionBPropertiesPtrOutputWithContext(context.Context) L3OptionBPropertiesPtrOutput
}

type l3optionBPropertiesPtrType L3OptionBPropertiesArgs

func L3OptionBPropertiesPtr(v *L3OptionBPropertiesArgs) L3OptionBPropertiesPtrInput {
	return (*l3optionBPropertiesPtrType)(v)
}

func (*l3optionBPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**L3OptionBProperties)(nil)).Elem()
}

func (i *l3optionBPropertiesPtrType) ToL3OptionBPropertiesPtrOutput() L3OptionBPropertiesPtrOutput {
	return i.ToL3OptionBPropertiesPtrOutputWithContext(context.Background())
}

func (i *l3optionBPropertiesPtrType) ToL3OptionBPropertiesPtrOutputWithContext(ctx context.Context) L3OptionBPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3OptionBPropertiesPtrOutput)
}

// Option B configuration.
type L3OptionBPropertiesOutput struct{ *pulumi.OutputState }

func (L3OptionBPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L3OptionBProperties)(nil)).Elem()
}

func (o L3OptionBPropertiesOutput) ToL3OptionBPropertiesOutput() L3OptionBPropertiesOutput {
	return o
}

func (o L3OptionBPropertiesOutput) ToL3OptionBPropertiesOutputWithContext(ctx context.Context) L3OptionBPropertiesOutput {
	return o
}

func (o L3OptionBPropertiesOutput) ToL3OptionBPropertiesPtrOutput() L3OptionBPropertiesPtrOutput {
	return o.ToL3OptionBPropertiesPtrOutputWithContext(context.Background())
}

func (o L3OptionBPropertiesOutput) ToL3OptionBPropertiesPtrOutputWithContext(ctx context.Context) L3OptionBPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v L3OptionBProperties) *L3OptionBProperties {
		return &v
	}).(L3OptionBPropertiesPtrOutput)
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v L3OptionBProperties) []string { return v.ExportRouteTargets }).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v L3OptionBProperties) []string { return v.ImportRouteTargets }).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied.
func (o L3OptionBPropertiesOutput) RouteTargets() RouteTargetInformationPtrOutput {
	return o.ApplyT(func(v L3OptionBProperties) *RouteTargetInformation { return v.RouteTargets }).(RouteTargetInformationPtrOutput)
}

type L3OptionBPropertiesPtrOutput struct{ *pulumi.OutputState }

func (L3OptionBPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L3OptionBProperties)(nil)).Elem()
}

func (o L3OptionBPropertiesPtrOutput) ToL3OptionBPropertiesPtrOutput() L3OptionBPropertiesPtrOutput {
	return o
}

func (o L3OptionBPropertiesPtrOutput) ToL3OptionBPropertiesPtrOutputWithContext(ctx context.Context) L3OptionBPropertiesPtrOutput {
	return o
}

func (o L3OptionBPropertiesPtrOutput) Elem() L3OptionBPropertiesOutput {
	return o.ApplyT(func(v *L3OptionBProperties) L3OptionBProperties {
		if v != nil {
			return *v
		}
		var ret L3OptionBProperties
		return ret
	}).(L3OptionBPropertiesOutput)
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesPtrOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *L3OptionBProperties) []string {
		if v == nil {
			return nil
		}
		return v.ExportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesPtrOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *L3OptionBProperties) []string {
		if v == nil {
			return nil
		}
		return v.ImportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied.
func (o L3OptionBPropertiesPtrOutput) RouteTargets() RouteTargetInformationPtrOutput {
	return o.ApplyT(func(v *L3OptionBProperties) *RouteTargetInformation {
		if v == nil {
			return nil
		}
		return v.RouteTargets
	}).(RouteTargetInformationPtrOutput)
}

// Option B configuration.
type L3OptionBPropertiesResponse struct {
	// RouteTargets to be applied. This is used for the backward compatibility.
	ExportRouteTargets []string `pulumi:"exportRouteTargets"`
	// RouteTargets to be applied. This is used for the backward compatibility.
	ImportRouteTargets []string `pulumi:"importRouteTargets"`
	// RouteTargets to be applied.
	RouteTargets *RouteTargetInformationResponse `pulumi:"routeTargets"`
}

// Option B configuration.
type L3OptionBPropertiesResponseOutput struct{ *pulumi.OutputState }

func (L3OptionBPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L3OptionBPropertiesResponse)(nil)).Elem()
}

func (o L3OptionBPropertiesResponseOutput) ToL3OptionBPropertiesResponseOutput() L3OptionBPropertiesResponseOutput {
	return o
}

func (o L3OptionBPropertiesResponseOutput) ToL3OptionBPropertiesResponseOutputWithContext(ctx context.Context) L3OptionBPropertiesResponseOutput {
	return o
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesResponseOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v L3OptionBPropertiesResponse) []string { return v.ExportRouteTargets }).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesResponseOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v L3OptionBPropertiesResponse) []string { return v.ImportRouteTargets }).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied.
func (o L3OptionBPropertiesResponseOutput) RouteTargets() RouteTargetInformationResponsePtrOutput {
	return o.ApplyT(func(v L3OptionBPropertiesResponse) *RouteTargetInformationResponse { return v.RouteTargets }).(RouteTargetInformationResponsePtrOutput)
}

type L3OptionBPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (L3OptionBPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L3OptionBPropertiesResponse)(nil)).Elem()
}

func (o L3OptionBPropertiesResponsePtrOutput) ToL3OptionBPropertiesResponsePtrOutput() L3OptionBPropertiesResponsePtrOutput {
	return o
}

func (o L3OptionBPropertiesResponsePtrOutput) ToL3OptionBPropertiesResponsePtrOutputWithContext(ctx context.Context) L3OptionBPropertiesResponsePtrOutput {
	return o
}

func (o L3OptionBPropertiesResponsePtrOutput) Elem() L3OptionBPropertiesResponseOutput {
	return o.ApplyT(func(v *L3OptionBPropertiesResponse) L3OptionBPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret L3OptionBPropertiesResponse
		return ret
	}).(L3OptionBPropertiesResponseOutput)
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesResponsePtrOutput) ExportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *L3OptionBPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied. This is used for the backward compatibility.
func (o L3OptionBPropertiesResponsePtrOutput) ImportRouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *L3OptionBPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImportRouteTargets
	}).(pulumi.StringArrayOutput)
}

// RouteTargets to be applied.
func (o L3OptionBPropertiesResponsePtrOutput) RouteTargets() RouteTargetInformationResponsePtrOutput {
	return o.ApplyT(func(v *L3OptionBPropertiesResponse) *RouteTargetInformationResponse {
		if v == nil {
			return nil
		}
		return v.RouteTargets
	}).(RouteTargetInformationResponsePtrOutput)
}

// Common properties for Layer2 Configuration.
type Layer2Configuration struct {
	// List of network device interfaces resource IDs.
	Interfaces []string `pulumi:"interfaces"`
	// MTU of the packets between PE & CE.
	Mtu *int `pulumi:"mtu"`
}

// Defaults sets the appropriate defaults for Layer2Configuration
func (val *Layer2Configuration) Defaults() *Layer2Configuration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mtu == nil {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	return &tmp
}

// Layer2ConfigurationInput is an input type that accepts Layer2ConfigurationArgs and Layer2ConfigurationOutput values.
// You can construct a concrete instance of `Layer2ConfigurationInput` via:
//
//	Layer2ConfigurationArgs{...}
type Layer2ConfigurationInput interface {
	pulumi.Input

	ToLayer2ConfigurationOutput() Layer2ConfigurationOutput
	ToLayer2ConfigurationOutputWithContext(context.Context) Layer2ConfigurationOutput
}

// Common properties for Layer2 Configuration.
type Layer2ConfigurationArgs struct {
	// List of network device interfaces resource IDs.
	Interfaces pulumi.StringArrayInput `pulumi:"interfaces"`
	// MTU of the packets between PE & CE.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
}

// Defaults sets the appropriate defaults for Layer2ConfigurationArgs
func (val *Layer2ConfigurationArgs) Defaults() *Layer2ConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mtu == nil {
		tmp.Mtu = pulumi.IntPtr(1500)
	}
	return &tmp
}
func (Layer2ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer2Configuration)(nil)).Elem()
}

func (i Layer2ConfigurationArgs) ToLayer2ConfigurationOutput() Layer2ConfigurationOutput {
	return i.ToLayer2ConfigurationOutputWithContext(context.Background())
}

func (i Layer2ConfigurationArgs) ToLayer2ConfigurationOutputWithContext(ctx context.Context) Layer2ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Layer2ConfigurationOutput)
}

func (i Layer2ConfigurationArgs) ToLayer2ConfigurationPtrOutput() Layer2ConfigurationPtrOutput {
	return i.ToLayer2ConfigurationPtrOutputWithContext(context.Background())
}

func (i Layer2ConfigurationArgs) ToLayer2ConfigurationPtrOutputWithContext(ctx context.Context) Layer2ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Layer2ConfigurationOutput).ToLayer2ConfigurationPtrOutputWithContext(ctx)
}

// Layer2ConfigurationPtrInput is an input type that accepts Layer2ConfigurationArgs, Layer2ConfigurationPtr and Layer2ConfigurationPtrOutput values.
// You can construct a concrete instance of `Layer2ConfigurationPtrInput` via:
//
//	        Layer2ConfigurationArgs{...}
//
//	or:
//
//	        nil
type Layer2ConfigurationPtrInput interface {
	pulumi.Input

	ToLayer2ConfigurationPtrOutput() Layer2ConfigurationPtrOutput
	ToLayer2ConfigurationPtrOutputWithContext(context.Context) Layer2ConfigurationPtrOutput
}

type layer2ConfigurationPtrType Layer2ConfigurationArgs

func Layer2ConfigurationPtr(v *Layer2ConfigurationArgs) Layer2ConfigurationPtrInput {
	return (*layer2ConfigurationPtrType)(v)
}

func (*layer2ConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Layer2Configuration)(nil)).Elem()
}

func (i *layer2ConfigurationPtrType) ToLayer2ConfigurationPtrOutput() Layer2ConfigurationPtrOutput {
	return i.ToLayer2ConfigurationPtrOutputWithContext(context.Background())
}

func (i *layer2ConfigurationPtrType) ToLayer2ConfigurationPtrOutputWithContext(ctx context.Context) Layer2ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Layer2ConfigurationPtrOutput)
}

// Common properties for Layer2 Configuration.
type Layer2ConfigurationOutput struct{ *pulumi.OutputState }

func (Layer2ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer2Configuration)(nil)).Elem()
}

func (o Layer2ConfigurationOutput) ToLayer2ConfigurationOutput() Layer2ConfigurationOutput {
	return o
}

func (o Layer2ConfigurationOutput) ToLayer2ConfigurationOutputWithContext(ctx context.Context) Layer2ConfigurationOutput {
	return o
}

func (o Layer2ConfigurationOutput) ToLayer2ConfigurationPtrOutput() Layer2ConfigurationPtrOutput {
	return o.ToLayer2ConfigurationPtrOutputWithContext(context.Background())
}

func (o Layer2ConfigurationOutput) ToLayer2ConfigurationPtrOutputWithContext(ctx context.Context) Layer2ConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Layer2Configuration) *Layer2Configuration {
		return &v
	}).(Layer2ConfigurationPtrOutput)
}

// List of network device interfaces resource IDs.
func (o Layer2ConfigurationOutput) Interfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Layer2Configuration) []string { return v.Interfaces }).(pulumi.StringArrayOutput)
}

// MTU of the packets between PE & CE.
func (o Layer2ConfigurationOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Layer2Configuration) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

type Layer2ConfigurationPtrOutput struct{ *pulumi.OutputState }

func (Layer2ConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Layer2Configuration)(nil)).Elem()
}

func (o Layer2ConfigurationPtrOutput) ToLayer2ConfigurationPtrOutput() Layer2ConfigurationPtrOutput {
	return o
}

func (o Layer2ConfigurationPtrOutput) ToLayer2ConfigurationPtrOutputWithContext(ctx context.Context) Layer2ConfigurationPtrOutput {
	return o
}

func (o Layer2ConfigurationPtrOutput) Elem() Layer2ConfigurationOutput {
	return o.ApplyT(func(v *Layer2Configuration) Layer2Configuration {
		if v != nil {
			return *v
		}
		var ret Layer2Configuration
		return ret
	}).(Layer2ConfigurationOutput)
}

// List of network device interfaces resource IDs.
func (o Layer2ConfigurationPtrOutput) Interfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Layer2Configuration) []string {
		if v == nil {
			return nil
		}
		return v.Interfaces
	}).(pulumi.StringArrayOutput)
}

// MTU of the packets between PE & CE.
func (o Layer2ConfigurationPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Layer2Configuration) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Common properties for Layer2 Configuration.
type Layer2ConfigurationResponse struct {
	// List of network device interfaces resource IDs.
	Interfaces []string `pulumi:"interfaces"`
	// MTU of the packets between PE & CE.
	Mtu *int `pulumi:"mtu"`
}

// Defaults sets the appropriate defaults for Layer2ConfigurationResponse
func (val *Layer2ConfigurationResponse) Defaults() *Layer2ConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mtu == nil {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	return &tmp
}

// Common properties for Layer2 Configuration.
type Layer2ConfigurationResponseOutput struct{ *pulumi.OutputState }

func (Layer2ConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer2ConfigurationResponse)(nil)).Elem()
}

func (o Layer2ConfigurationResponseOutput) ToLayer2ConfigurationResponseOutput() Layer2ConfigurationResponseOutput {
	return o
}

func (o Layer2ConfigurationResponseOutput) ToLayer2ConfigurationResponseOutputWithContext(ctx context.Context) Layer2ConfigurationResponseOutput {
	return o
}

// List of network device interfaces resource IDs.
func (o Layer2ConfigurationResponseOutput) Interfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Layer2ConfigurationResponse) []string { return v.Interfaces }).(pulumi.StringArrayOutput)
}

// MTU of the packets between PE & CE.
func (o Layer2ConfigurationResponseOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Layer2ConfigurationResponse) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

type Layer2ConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (Layer2ConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Layer2ConfigurationResponse)(nil)).Elem()
}

func (o Layer2ConfigurationResponsePtrOutput) ToLayer2ConfigurationResponsePtrOutput() Layer2ConfigurationResponsePtrOutput {
	return o
}

func (o Layer2ConfigurationResponsePtrOutput) ToLayer2ConfigurationResponsePtrOutputWithContext(ctx context.Context) Layer2ConfigurationResponsePtrOutput {
	return o
}

func (o Layer2ConfigurationResponsePtrOutput) Elem() Layer2ConfigurationResponseOutput {
	return o.ApplyT(func(v *Layer2ConfigurationResponse) Layer2ConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret Layer2ConfigurationResponse
		return ret
	}).(Layer2ConfigurationResponseOutput)
}

// List of network device interfaces resource IDs.
func (o Layer2ConfigurationResponsePtrOutput) Interfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Layer2ConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Interfaces
	}).(pulumi.StringArrayOutput)
}

// MTU of the packets between PE & CE.
func (o Layer2ConfigurationResponsePtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Layer2ConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Managed Resource Group configuration properties.
type ManagedResourceGroupConfiguration struct {
	// Managed resource group location.
	Location *string `pulumi:"location"`
	// The NFC service will be hosted in a Managed resource group.
	Name *string `pulumi:"name"`
}

// ManagedResourceGroupConfigurationInput is an input type that accepts ManagedResourceGroupConfigurationArgs and ManagedResourceGroupConfigurationOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationInput` via:
//
//	ManagedResourceGroupConfigurationArgs{...}
type ManagedResourceGroupConfigurationInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput
	ToManagedResourceGroupConfigurationOutputWithContext(context.Context) ManagedResourceGroupConfigurationOutput
}

// Managed Resource Group configuration properties.
type ManagedResourceGroupConfigurationArgs struct {
	// Managed resource group location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The NFC service will be hosted in a Managed resource group.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedResourceGroupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return i.ToManagedResourceGroupConfigurationOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput)
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput).ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx)
}

// ManagedResourceGroupConfigurationPtrInput is an input type that accepts ManagedResourceGroupConfigurationArgs, ManagedResourceGroupConfigurationPtr and ManagedResourceGroupConfigurationPtrOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationPtrInput` via:
//
//	        ManagedResourceGroupConfigurationArgs{...}
//
//	or:
//
//	        nil
type ManagedResourceGroupConfigurationPtrInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput
	ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Context) ManagedResourceGroupConfigurationPtrOutput
}

type managedResourceGroupConfigurationPtrType ManagedResourceGroupConfigurationArgs

func ManagedResourceGroupConfigurationPtr(v *ManagedResourceGroupConfigurationArgs) ManagedResourceGroupConfigurationPtrInput {
	return (*managedResourceGroupConfigurationPtrType)(v)
}

func (*managedResourceGroupConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationPtrOutput)
}

// Managed Resource Group configuration properties.
type ManagedResourceGroupConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedResourceGroupConfiguration) *ManagedResourceGroupConfiguration {
		return &v
	}).(ManagedResourceGroupConfigurationPtrOutput)
}

// Managed resource group location.
func (o ManagedResourceGroupConfigurationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfiguration) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The NFC service will be hosted in a Managed resource group.
func (o ManagedResourceGroupConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) Elem() ManagedResourceGroupConfigurationOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) ManagedResourceGroupConfiguration {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupConfiguration
		return ret
	}).(ManagedResourceGroupConfigurationOutput)
}

// Managed resource group location.
func (o ManagedResourceGroupConfigurationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The NFC service will be hosted in a Managed resource group.
func (o ManagedResourceGroupConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Managed Resource Group configuration properties.
type ManagedResourceGroupConfigurationResponse struct {
	// Managed resource group location.
	Location *string `pulumi:"location"`
	// The NFC service will be hosted in a Managed resource group.
	Name *string `pulumi:"name"`
}

// Managed Resource Group configuration properties.
type ManagedResourceGroupConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfigurationResponse)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationResponseOutput) ToManagedResourceGroupConfigurationResponseOutput() ManagedResourceGroupConfigurationResponseOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponseOutput) ToManagedResourceGroupConfigurationResponseOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationResponseOutput {
	return o
}

// Managed resource group location.
func (o ManagedResourceGroupConfigurationResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfigurationResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The NFC service will be hosted in a Managed resource group.
func (o ManagedResourceGroupConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfigurationResponse)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) ToManagedResourceGroupConfigurationResponsePtrOutput() ManagedResourceGroupConfigurationResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) ToManagedResourceGroupConfigurationResponsePtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) Elem() ManagedResourceGroupConfigurationResponseOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) ManagedResourceGroupConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupConfigurationResponse
		return ret
	}).(ManagedResourceGroupConfigurationResponseOutput)
}

// Managed resource group location.
func (o ManagedResourceGroupConfigurationResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The NFC service will be hosted in a Managed resource group.
func (o ManagedResourceGroupConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Configuration to be used to setup the management network.
type ManagementNetworkConfigurationProperties struct {
	// VPN Configuration properties.
	InfrastructureVpnConfiguration VpnConfigurationProperties `pulumi:"infrastructureVpnConfiguration"`
	// VPN Configuration properties.
	WorkloadVpnConfiguration VpnConfigurationProperties `pulumi:"workloadVpnConfiguration"`
}

// Defaults sets the appropriate defaults for ManagementNetworkConfigurationProperties
func (val *ManagementNetworkConfigurationProperties) Defaults() *ManagementNetworkConfigurationProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.InfrastructureVpnConfiguration = *tmp.InfrastructureVpnConfiguration.Defaults()

	tmp.WorkloadVpnConfiguration = *tmp.WorkloadVpnConfiguration.Defaults()

	return &tmp
}

// ManagementNetworkConfigurationPropertiesInput is an input type that accepts ManagementNetworkConfigurationPropertiesArgs and ManagementNetworkConfigurationPropertiesOutput values.
// You can construct a concrete instance of `ManagementNetworkConfigurationPropertiesInput` via:
//
//	ManagementNetworkConfigurationPropertiesArgs{...}
type ManagementNetworkConfigurationPropertiesInput interface {
	pulumi.Input

	ToManagementNetworkConfigurationPropertiesOutput() ManagementNetworkConfigurationPropertiesOutput
	ToManagementNetworkConfigurationPropertiesOutputWithContext(context.Context) ManagementNetworkConfigurationPropertiesOutput
}

// Configuration to be used to setup the management network.
type ManagementNetworkConfigurationPropertiesArgs struct {
	// VPN Configuration properties.
	InfrastructureVpnConfiguration VpnConfigurationPropertiesInput `pulumi:"infrastructureVpnConfiguration"`
	// VPN Configuration properties.
	WorkloadVpnConfiguration VpnConfigurationPropertiesInput `pulumi:"workloadVpnConfiguration"`
}

// Defaults sets the appropriate defaults for ManagementNetworkConfigurationPropertiesArgs
func (val *ManagementNetworkConfigurationPropertiesArgs) Defaults() *ManagementNetworkConfigurationPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ManagementNetworkConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementNetworkConfigurationProperties)(nil)).Elem()
}

func (i ManagementNetworkConfigurationPropertiesArgs) ToManagementNetworkConfigurationPropertiesOutput() ManagementNetworkConfigurationPropertiesOutput {
	return i.ToManagementNetworkConfigurationPropertiesOutputWithContext(context.Background())
}

func (i ManagementNetworkConfigurationPropertiesArgs) ToManagementNetworkConfigurationPropertiesOutputWithContext(ctx context.Context) ManagementNetworkConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementNetworkConfigurationPropertiesOutput)
}

// Configuration to be used to setup the management network.
type ManagementNetworkConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (ManagementNetworkConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementNetworkConfigurationProperties)(nil)).Elem()
}

func (o ManagementNetworkConfigurationPropertiesOutput) ToManagementNetworkConfigurationPropertiesOutput() ManagementNetworkConfigurationPropertiesOutput {
	return o
}

func (o ManagementNetworkConfigurationPropertiesOutput) ToManagementNetworkConfigurationPropertiesOutputWithContext(ctx context.Context) ManagementNetworkConfigurationPropertiesOutput {
	return o
}

// VPN Configuration properties.
func (o ManagementNetworkConfigurationPropertiesOutput) InfrastructureVpnConfiguration() VpnConfigurationPropertiesOutput {
	return o.ApplyT(func(v ManagementNetworkConfigurationProperties) VpnConfigurationProperties {
		return v.InfrastructureVpnConfiguration
	}).(VpnConfigurationPropertiesOutput)
}

// VPN Configuration properties.
func (o ManagementNetworkConfigurationPropertiesOutput) WorkloadVpnConfiguration() VpnConfigurationPropertiesOutput {
	return o.ApplyT(func(v ManagementNetworkConfigurationProperties) VpnConfigurationProperties {
		return v.WorkloadVpnConfiguration
	}).(VpnConfigurationPropertiesOutput)
}

// Configuration to be used to setup the management network.
type ManagementNetworkConfigurationPropertiesResponse struct {
	// VPN Configuration properties.
	InfrastructureVpnConfiguration VpnConfigurationPropertiesResponse `pulumi:"infrastructureVpnConfiguration"`
	// VPN Configuration properties.
	WorkloadVpnConfiguration VpnConfigurationPropertiesResponse `pulumi:"workloadVpnConfiguration"`
}

// Defaults sets the appropriate defaults for ManagementNetworkConfigurationPropertiesResponse
func (val *ManagementNetworkConfigurationPropertiesResponse) Defaults() *ManagementNetworkConfigurationPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.InfrastructureVpnConfiguration = *tmp.InfrastructureVpnConfiguration.Defaults()

	tmp.WorkloadVpnConfiguration = *tmp.WorkloadVpnConfiguration.Defaults()

	return &tmp
}

// Configuration to be used to setup the management network.
type ManagementNetworkConfigurationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagementNetworkConfigurationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementNetworkConfigurationPropertiesResponse)(nil)).Elem()
}

func (o ManagementNetworkConfigurationPropertiesResponseOutput) ToManagementNetworkConfigurationPropertiesResponseOutput() ManagementNetworkConfigurationPropertiesResponseOutput {
	return o
}

func (o ManagementNetworkConfigurationPropertiesResponseOutput) ToManagementNetworkConfigurationPropertiesResponseOutputWithContext(ctx context.Context) ManagementNetworkConfigurationPropertiesResponseOutput {
	return o
}

// VPN Configuration properties.
func (o ManagementNetworkConfigurationPropertiesResponseOutput) InfrastructureVpnConfiguration() VpnConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v ManagementNetworkConfigurationPropertiesResponse) VpnConfigurationPropertiesResponse {
		return v.InfrastructureVpnConfiguration
	}).(VpnConfigurationPropertiesResponseOutput)
}

// VPN Configuration properties.
func (o ManagementNetworkConfigurationPropertiesResponseOutput) WorkloadVpnConfiguration() VpnConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v ManagementNetworkConfigurationPropertiesResponse) VpnConfigurationPropertiesResponse {
		return v.WorkloadVpnConfiguration
	}).(VpnConfigurationPropertiesResponseOutput)
}

// Neighbor Address properties.
type NeighborAddress struct {
	// IP Address.
	Address *string `pulumi:"address"`
}

// NeighborAddressInput is an input type that accepts NeighborAddressArgs and NeighborAddressOutput values.
// You can construct a concrete instance of `NeighborAddressInput` via:
//
//	NeighborAddressArgs{...}
type NeighborAddressInput interface {
	pulumi.Input

	ToNeighborAddressOutput() NeighborAddressOutput
	ToNeighborAddressOutputWithContext(context.Context) NeighborAddressOutput
}

// Neighbor Address properties.
type NeighborAddressArgs struct {
	// IP Address.
	Address pulumi.StringPtrInput `pulumi:"address"`
}

func (NeighborAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NeighborAddress)(nil)).Elem()
}

func (i NeighborAddressArgs) ToNeighborAddressOutput() NeighborAddressOutput {
	return i.ToNeighborAddressOutputWithContext(context.Background())
}

func (i NeighborAddressArgs) ToNeighborAddressOutputWithContext(ctx context.Context) NeighborAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeighborAddressOutput)
}

// NeighborAddressArrayInput is an input type that accepts NeighborAddressArray and NeighborAddressArrayOutput values.
// You can construct a concrete instance of `NeighborAddressArrayInput` via:
//
//	NeighborAddressArray{ NeighborAddressArgs{...} }
type NeighborAddressArrayInput interface {
	pulumi.Input

	ToNeighborAddressArrayOutput() NeighborAddressArrayOutput
	ToNeighborAddressArrayOutputWithContext(context.Context) NeighborAddressArrayOutput
}

type NeighborAddressArray []NeighborAddressInput

func (NeighborAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NeighborAddress)(nil)).Elem()
}

func (i NeighborAddressArray) ToNeighborAddressArrayOutput() NeighborAddressArrayOutput {
	return i.ToNeighborAddressArrayOutputWithContext(context.Background())
}

func (i NeighborAddressArray) ToNeighborAddressArrayOutputWithContext(ctx context.Context) NeighborAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeighborAddressArrayOutput)
}

// Neighbor Address properties.
type NeighborAddressOutput struct{ *pulumi.OutputState }

func (NeighborAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NeighborAddress)(nil)).Elem()
}

func (o NeighborAddressOutput) ToNeighborAddressOutput() NeighborAddressOutput {
	return o
}

func (o NeighborAddressOutput) ToNeighborAddressOutputWithContext(ctx context.Context) NeighborAddressOutput {
	return o
}

// IP Address.
func (o NeighborAddressOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NeighborAddress) *string { return v.Address }).(pulumi.StringPtrOutput)
}

type NeighborAddressArrayOutput struct{ *pulumi.OutputState }

func (NeighborAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NeighborAddress)(nil)).Elem()
}

func (o NeighborAddressArrayOutput) ToNeighborAddressArrayOutput() NeighborAddressArrayOutput {
	return o
}

func (o NeighborAddressArrayOutput) ToNeighborAddressArrayOutputWithContext(ctx context.Context) NeighborAddressArrayOutput {
	return o
}

func (o NeighborAddressArrayOutput) Index(i pulumi.IntInput) NeighborAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NeighborAddress {
		return vs[0].([]NeighborAddress)[vs[1].(int)]
	}).(NeighborAddressOutput)
}

// Neighbor Address properties.
type NeighborAddressResponse struct {
	// IP Address.
	Address *string `pulumi:"address"`
	// Configuration state of the resource.
	ConfigurationState string `pulumi:"configurationState"`
}

// Neighbor Address properties.
type NeighborAddressResponseOutput struct{ *pulumi.OutputState }

func (NeighborAddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NeighborAddressResponse)(nil)).Elem()
}

func (o NeighborAddressResponseOutput) ToNeighborAddressResponseOutput() NeighborAddressResponseOutput {
	return o
}

func (o NeighborAddressResponseOutput) ToNeighborAddressResponseOutputWithContext(ctx context.Context) NeighborAddressResponseOutput {
	return o
}

// IP Address.
func (o NeighborAddressResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NeighborAddressResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Configuration state of the resource.
func (o NeighborAddressResponseOutput) ConfigurationState() pulumi.StringOutput {
	return o.ApplyT(func(v NeighborAddressResponse) string { return v.ConfigurationState }).(pulumi.StringOutput)
}

type NeighborAddressResponseArrayOutput struct{ *pulumi.OutputState }

func (NeighborAddressResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NeighborAddressResponse)(nil)).Elem()
}

func (o NeighborAddressResponseArrayOutput) ToNeighborAddressResponseArrayOutput() NeighborAddressResponseArrayOutput {
	return o
}

func (o NeighborAddressResponseArrayOutput) ToNeighborAddressResponseArrayOutputWithContext(ctx context.Context) NeighborAddressResponseArrayOutput {
	return o
}

func (o NeighborAddressResponseArrayOutput) Index(i pulumi.IntInput) NeighborAddressResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NeighborAddressResponse {
		return vs[0].([]NeighborAddressResponse)[vs[1].(int)]
	}).(NeighborAddressResponseOutput)
}

// An array of destination IPv4 Addresses or IPv6 Addresses.
type NeighborGroupDestination struct {
	// Array of IPv4 Addresses.
	Ipv4Addresses []string `pulumi:"ipv4Addresses"`
	// Array of IPv6 Addresses.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
}

// NeighborGroupDestinationInput is an input type that accepts NeighborGroupDestinationArgs and NeighborGroupDestinationOutput values.
// You can construct a concrete instance of `NeighborGroupDestinationInput` via:
//
//	NeighborGroupDestinationArgs{...}
type NeighborGroupDestinationInput interface {
	pulumi.Input

	ToNeighborGroupDestinationOutput() NeighborGroupDestinationOutput
	ToNeighborGroupDestinationOutputWithContext(context.Context) NeighborGroupDestinationOutput
}

// An array of destination IPv4 Addresses or IPv6 Addresses.
type NeighborGroupDestinationArgs struct {
	// Array of IPv4 Addresses.
	Ipv4Addresses pulumi.StringArrayInput `pulumi:"ipv4Addresses"`
	// Array of IPv6 Addresses.
	Ipv6Addresses pulumi.StringArrayInput `pulumi:"ipv6Addresses"`
}

func (NeighborGroupDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NeighborGroupDestination)(nil)).Elem()
}

func (i NeighborGroupDestinationArgs) ToNeighborGroupDestinationOutput() NeighborGroupDestinationOutput {
	return i.ToNeighborGroupDestinationOutputWithContext(context.Background())
}

func (i NeighborGroupDestinationArgs) ToNeighborGroupDestinationOutputWithContext(ctx context.Context) NeighborGroupDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NeighborGroupDestinationOutput)
}

// An array of destination IPv4 Addresses or IPv6 Addresses.
type NeighborGroupDestinationOutput struct{ *pulumi.OutputState }

func (NeighborGroupDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NeighborGroupDestination)(nil)).Elem()
}

func (o NeighborGroupDestinationOutput) ToNeighborGroupDestinationOutput() NeighborGroupDestinationOutput {
	return o
}

func (o NeighborGroupDestinationOutput) ToNeighborGroupDestinationOutputWithContext(ctx context.Context) NeighborGroupDestinationOutput {
	return o
}

// Array of IPv4 Addresses.
func (o NeighborGroupDestinationOutput) Ipv4Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NeighborGroupDestination) []string { return v.Ipv4Addresses }).(pulumi.StringArrayOutput)
}

// Array of IPv6 Addresses.
func (o NeighborGroupDestinationOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NeighborGroupDestination) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

// An array of destination IPv4 Addresses or IPv6 Addresses.
type NeighborGroupDestinationResponse struct {
	// Array of IPv4 Addresses.
	Ipv4Addresses []string `pulumi:"ipv4Addresses"`
	// Array of IPv6 Addresses.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
}

// An array of destination IPv4 Addresses or IPv6 Addresses.
type NeighborGroupDestinationResponseOutput struct{ *pulumi.OutputState }

func (NeighborGroupDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NeighborGroupDestinationResponse)(nil)).Elem()
}

func (o NeighborGroupDestinationResponseOutput) ToNeighborGroupDestinationResponseOutput() NeighborGroupDestinationResponseOutput {
	return o
}

func (o NeighborGroupDestinationResponseOutput) ToNeighborGroupDestinationResponseOutputWithContext(ctx context.Context) NeighborGroupDestinationResponseOutput {
	return o
}

// Array of IPv4 Addresses.
func (o NeighborGroupDestinationResponseOutput) Ipv4Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NeighborGroupDestinationResponse) []string { return v.Ipv4Addresses }).(pulumi.StringArrayOutput)
}

// Array of IPv6 Addresses.
func (o NeighborGroupDestinationResponseOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NeighborGroupDestinationResponse) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

// Destination.
type NetworkTapPropertiesDestinations struct {
	// The destination Id. ARM Resource ID of either NNI or Internal Networks.
	DestinationId string `pulumi:"destinationId"`
	// ARM Resource ID of destination Tap Rule that contains match configurations.
	DestinationTapRuleId *string `pulumi:"destinationTapRuleId"`
	// Type of destination. Input can be IsolationDomain or Direct.
	DestinationType string `pulumi:"destinationType"`
	// Isolation Domain Properties.
	IsolationDomainProperties *IsolationDomainProperties `pulumi:"isolationDomainProperties"`
	// Destination name.
	Name string `pulumi:"name"`
}

// NetworkTapPropertiesDestinationsInput is an input type that accepts NetworkTapPropertiesDestinationsArgs and NetworkTapPropertiesDestinationsOutput values.
// You can construct a concrete instance of `NetworkTapPropertiesDestinationsInput` via:
//
//	NetworkTapPropertiesDestinationsArgs{...}
type NetworkTapPropertiesDestinationsInput interface {
	pulumi.Input

	ToNetworkTapPropertiesDestinationsOutput() NetworkTapPropertiesDestinationsOutput
	ToNetworkTapPropertiesDestinationsOutputWithContext(context.Context) NetworkTapPropertiesDestinationsOutput
}

// Destination.
type NetworkTapPropertiesDestinationsArgs struct {
	// The destination Id. ARM Resource ID of either NNI or Internal Networks.
	DestinationId pulumi.StringInput `pulumi:"destinationId"`
	// ARM Resource ID of destination Tap Rule that contains match configurations.
	DestinationTapRuleId pulumi.StringPtrInput `pulumi:"destinationTapRuleId"`
	// Type of destination. Input can be IsolationDomain or Direct.
	DestinationType pulumi.StringInput `pulumi:"destinationType"`
	// Isolation Domain Properties.
	IsolationDomainProperties IsolationDomainPropertiesPtrInput `pulumi:"isolationDomainProperties"`
	// Destination name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NetworkTapPropertiesDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapPropertiesDestinations)(nil)).Elem()
}

func (i NetworkTapPropertiesDestinationsArgs) ToNetworkTapPropertiesDestinationsOutput() NetworkTapPropertiesDestinationsOutput {
	return i.ToNetworkTapPropertiesDestinationsOutputWithContext(context.Background())
}

func (i NetworkTapPropertiesDestinationsArgs) ToNetworkTapPropertiesDestinationsOutputWithContext(ctx context.Context) NetworkTapPropertiesDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapPropertiesDestinationsOutput)
}

// NetworkTapPropertiesDestinationsArrayInput is an input type that accepts NetworkTapPropertiesDestinationsArray and NetworkTapPropertiesDestinationsArrayOutput values.
// You can construct a concrete instance of `NetworkTapPropertiesDestinationsArrayInput` via:
//
//	NetworkTapPropertiesDestinationsArray{ NetworkTapPropertiesDestinationsArgs{...} }
type NetworkTapPropertiesDestinationsArrayInput interface {
	pulumi.Input

	ToNetworkTapPropertiesDestinationsArrayOutput() NetworkTapPropertiesDestinationsArrayOutput
	ToNetworkTapPropertiesDestinationsArrayOutputWithContext(context.Context) NetworkTapPropertiesDestinationsArrayOutput
}

type NetworkTapPropertiesDestinationsArray []NetworkTapPropertiesDestinationsInput

func (NetworkTapPropertiesDestinationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapPropertiesDestinations)(nil)).Elem()
}

func (i NetworkTapPropertiesDestinationsArray) ToNetworkTapPropertiesDestinationsArrayOutput() NetworkTapPropertiesDestinationsArrayOutput {
	return i.ToNetworkTapPropertiesDestinationsArrayOutputWithContext(context.Background())
}

func (i NetworkTapPropertiesDestinationsArray) ToNetworkTapPropertiesDestinationsArrayOutputWithContext(ctx context.Context) NetworkTapPropertiesDestinationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapPropertiesDestinationsArrayOutput)
}

// Destination.
type NetworkTapPropertiesDestinationsOutput struct{ *pulumi.OutputState }

func (NetworkTapPropertiesDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapPropertiesDestinations)(nil)).Elem()
}

func (o NetworkTapPropertiesDestinationsOutput) ToNetworkTapPropertiesDestinationsOutput() NetworkTapPropertiesDestinationsOutput {
	return o
}

func (o NetworkTapPropertiesDestinationsOutput) ToNetworkTapPropertiesDestinationsOutputWithContext(ctx context.Context) NetworkTapPropertiesDestinationsOutput {
	return o
}

// The destination Id. ARM Resource ID of either NNI or Internal Networks.
func (o NetworkTapPropertiesDestinationsOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTapPropertiesDestinations) string { return v.DestinationId }).(pulumi.StringOutput)
}

// ARM Resource ID of destination Tap Rule that contains match configurations.
func (o NetworkTapPropertiesDestinationsOutput) DestinationTapRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapPropertiesDestinations) *string { return v.DestinationTapRuleId }).(pulumi.StringPtrOutput)
}

// Type of destination. Input can be IsolationDomain or Direct.
func (o NetworkTapPropertiesDestinationsOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTapPropertiesDestinations) string { return v.DestinationType }).(pulumi.StringOutput)
}

// Isolation Domain Properties.
func (o NetworkTapPropertiesDestinationsOutput) IsolationDomainProperties() IsolationDomainPropertiesPtrOutput {
	return o.ApplyT(func(v NetworkTapPropertiesDestinations) *IsolationDomainProperties {
		return v.IsolationDomainProperties
	}).(IsolationDomainPropertiesPtrOutput)
}

// Destination name.
func (o NetworkTapPropertiesDestinationsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTapPropertiesDestinations) string { return v.Name }).(pulumi.StringOutput)
}

type NetworkTapPropertiesDestinationsArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapPropertiesDestinationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapPropertiesDestinations)(nil)).Elem()
}

func (o NetworkTapPropertiesDestinationsArrayOutput) ToNetworkTapPropertiesDestinationsArrayOutput() NetworkTapPropertiesDestinationsArrayOutput {
	return o
}

func (o NetworkTapPropertiesDestinationsArrayOutput) ToNetworkTapPropertiesDestinationsArrayOutputWithContext(ctx context.Context) NetworkTapPropertiesDestinationsArrayOutput {
	return o
}

func (o NetworkTapPropertiesDestinationsArrayOutput) Index(i pulumi.IntInput) NetworkTapPropertiesDestinationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapPropertiesDestinations {
		return vs[0].([]NetworkTapPropertiesDestinations)[vs[1].(int)]
	}).(NetworkTapPropertiesDestinationsOutput)
}

// Destination.
type NetworkTapPropertiesResponseDestinations struct {
	// The destination Id. ARM Resource ID of either NNI or Internal Networks.
	DestinationId string `pulumi:"destinationId"`
	// ARM Resource ID of destination Tap Rule that contains match configurations.
	DestinationTapRuleId *string `pulumi:"destinationTapRuleId"`
	// Type of destination. Input can be IsolationDomain or Direct.
	DestinationType string `pulumi:"destinationType"`
	// Isolation Domain Properties.
	IsolationDomainProperties *IsolationDomainPropertiesResponse `pulumi:"isolationDomainProperties"`
	// Destination name.
	Name string `pulumi:"name"`
}

// Destination.
type NetworkTapPropertiesResponseDestinationsOutput struct{ *pulumi.OutputState }

func (NetworkTapPropertiesResponseDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapPropertiesResponseDestinations)(nil)).Elem()
}

func (o NetworkTapPropertiesResponseDestinationsOutput) ToNetworkTapPropertiesResponseDestinationsOutput() NetworkTapPropertiesResponseDestinationsOutput {
	return o
}

func (o NetworkTapPropertiesResponseDestinationsOutput) ToNetworkTapPropertiesResponseDestinationsOutputWithContext(ctx context.Context) NetworkTapPropertiesResponseDestinationsOutput {
	return o
}

// The destination Id. ARM Resource ID of either NNI or Internal Networks.
func (o NetworkTapPropertiesResponseDestinationsOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTapPropertiesResponseDestinations) string { return v.DestinationId }).(pulumi.StringOutput)
}

// ARM Resource ID of destination Tap Rule that contains match configurations.
func (o NetworkTapPropertiesResponseDestinationsOutput) DestinationTapRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapPropertiesResponseDestinations) *string { return v.DestinationTapRuleId }).(pulumi.StringPtrOutput)
}

// Type of destination. Input can be IsolationDomain or Direct.
func (o NetworkTapPropertiesResponseDestinationsOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTapPropertiesResponseDestinations) string { return v.DestinationType }).(pulumi.StringOutput)
}

// Isolation Domain Properties.
func (o NetworkTapPropertiesResponseDestinationsOutput) IsolationDomainProperties() IsolationDomainPropertiesResponsePtrOutput {
	return o.ApplyT(func(v NetworkTapPropertiesResponseDestinations) *IsolationDomainPropertiesResponse {
		return v.IsolationDomainProperties
	}).(IsolationDomainPropertiesResponsePtrOutput)
}

// Destination name.
func (o NetworkTapPropertiesResponseDestinationsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTapPropertiesResponseDestinations) string { return v.Name }).(pulumi.StringOutput)
}

type NetworkTapPropertiesResponseDestinationsArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapPropertiesResponseDestinationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapPropertiesResponseDestinations)(nil)).Elem()
}

func (o NetworkTapPropertiesResponseDestinationsArrayOutput) ToNetworkTapPropertiesResponseDestinationsArrayOutput() NetworkTapPropertiesResponseDestinationsArrayOutput {
	return o
}

func (o NetworkTapPropertiesResponseDestinationsArrayOutput) ToNetworkTapPropertiesResponseDestinationsArrayOutputWithContext(ctx context.Context) NetworkTapPropertiesResponseDestinationsArrayOutput {
	return o
}

func (o NetworkTapPropertiesResponseDestinationsArrayOutput) Index(i pulumi.IntInput) NetworkTapPropertiesResponseDestinationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapPropertiesResponseDestinations {
		return vs[0].([]NetworkTapPropertiesResponseDestinations)[vs[1].(int)]
	}).(NetworkTapPropertiesResponseDestinationsOutput)
}

// Action that need to performed.
type NetworkTapRuleAction struct {
	// Destination Id. The ARM resource Id may be either Network To Network Interconnect or NeighborGroup.
	DestinationId *string `pulumi:"destinationId"`
	// The parameter to enable or disable the timestamp.
	IsTimestampEnabled *string `pulumi:"isTimestampEnabled"`
	// The name of the match configuration. This is used when Goto type is provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration.
	MatchConfigurationName *string `pulumi:"matchConfigurationName"`
	// Truncate. 0 indicates do not truncate.
	Truncate *string `pulumi:"truncate"`
	// Type of actions that can be performed.
	Type *string `pulumi:"type"`
}

// NetworkTapRuleActionInput is an input type that accepts NetworkTapRuleActionArgs and NetworkTapRuleActionOutput values.
// You can construct a concrete instance of `NetworkTapRuleActionInput` via:
//
//	NetworkTapRuleActionArgs{...}
type NetworkTapRuleActionInput interface {
	pulumi.Input

	ToNetworkTapRuleActionOutput() NetworkTapRuleActionOutput
	ToNetworkTapRuleActionOutputWithContext(context.Context) NetworkTapRuleActionOutput
}

// Action that need to performed.
type NetworkTapRuleActionArgs struct {
	// Destination Id. The ARM resource Id may be either Network To Network Interconnect or NeighborGroup.
	DestinationId pulumi.StringPtrInput `pulumi:"destinationId"`
	// The parameter to enable or disable the timestamp.
	IsTimestampEnabled pulumi.StringPtrInput `pulumi:"isTimestampEnabled"`
	// The name of the match configuration. This is used when Goto type is provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration.
	MatchConfigurationName pulumi.StringPtrInput `pulumi:"matchConfigurationName"`
	// Truncate. 0 indicates do not truncate.
	Truncate pulumi.StringPtrInput `pulumi:"truncate"`
	// Type of actions that can be performed.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NetworkTapRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleAction)(nil)).Elem()
}

func (i NetworkTapRuleActionArgs) ToNetworkTapRuleActionOutput() NetworkTapRuleActionOutput {
	return i.ToNetworkTapRuleActionOutputWithContext(context.Background())
}

func (i NetworkTapRuleActionArgs) ToNetworkTapRuleActionOutputWithContext(ctx context.Context) NetworkTapRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapRuleActionOutput)
}

// NetworkTapRuleActionArrayInput is an input type that accepts NetworkTapRuleActionArray and NetworkTapRuleActionArrayOutput values.
// You can construct a concrete instance of `NetworkTapRuleActionArrayInput` via:
//
//	NetworkTapRuleActionArray{ NetworkTapRuleActionArgs{...} }
type NetworkTapRuleActionArrayInput interface {
	pulumi.Input

	ToNetworkTapRuleActionArrayOutput() NetworkTapRuleActionArrayOutput
	ToNetworkTapRuleActionArrayOutputWithContext(context.Context) NetworkTapRuleActionArrayOutput
}

type NetworkTapRuleActionArray []NetworkTapRuleActionInput

func (NetworkTapRuleActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleAction)(nil)).Elem()
}

func (i NetworkTapRuleActionArray) ToNetworkTapRuleActionArrayOutput() NetworkTapRuleActionArrayOutput {
	return i.ToNetworkTapRuleActionArrayOutputWithContext(context.Background())
}

func (i NetworkTapRuleActionArray) ToNetworkTapRuleActionArrayOutputWithContext(ctx context.Context) NetworkTapRuleActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapRuleActionArrayOutput)
}

// Action that need to performed.
type NetworkTapRuleActionOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleAction)(nil)).Elem()
}

func (o NetworkTapRuleActionOutput) ToNetworkTapRuleActionOutput() NetworkTapRuleActionOutput {
	return o
}

func (o NetworkTapRuleActionOutput) ToNetworkTapRuleActionOutputWithContext(ctx context.Context) NetworkTapRuleActionOutput {
	return o
}

// Destination Id. The ARM resource Id may be either Network To Network Interconnect or NeighborGroup.
func (o NetworkTapRuleActionOutput) DestinationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleAction) *string { return v.DestinationId }).(pulumi.StringPtrOutput)
}

// The parameter to enable or disable the timestamp.
func (o NetworkTapRuleActionOutput) IsTimestampEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleAction) *string { return v.IsTimestampEnabled }).(pulumi.StringPtrOutput)
}

// The name of the match configuration. This is used when Goto type is provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration.
func (o NetworkTapRuleActionOutput) MatchConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleAction) *string { return v.MatchConfigurationName }).(pulumi.StringPtrOutput)
}

// Truncate. 0 indicates do not truncate.
func (o NetworkTapRuleActionOutput) Truncate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleAction) *string { return v.Truncate }).(pulumi.StringPtrOutput)
}

// Type of actions that can be performed.
func (o NetworkTapRuleActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleAction) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworkTapRuleActionArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleAction)(nil)).Elem()
}

func (o NetworkTapRuleActionArrayOutput) ToNetworkTapRuleActionArrayOutput() NetworkTapRuleActionArrayOutput {
	return o
}

func (o NetworkTapRuleActionArrayOutput) ToNetworkTapRuleActionArrayOutputWithContext(ctx context.Context) NetworkTapRuleActionArrayOutput {
	return o
}

func (o NetworkTapRuleActionArrayOutput) Index(i pulumi.IntInput) NetworkTapRuleActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapRuleAction {
		return vs[0].([]NetworkTapRuleAction)[vs[1].(int)]
	}).(NetworkTapRuleActionOutput)
}

// Action that need to performed.
type NetworkTapRuleActionResponse struct {
	// Destination Id. The ARM resource Id may be either Network To Network Interconnect or NeighborGroup.
	DestinationId *string `pulumi:"destinationId"`
	// The parameter to enable or disable the timestamp.
	IsTimestampEnabled *string `pulumi:"isTimestampEnabled"`
	// The name of the match configuration. This is used when Goto type is provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration.
	MatchConfigurationName *string `pulumi:"matchConfigurationName"`
	// Truncate. 0 indicates do not truncate.
	Truncate *string `pulumi:"truncate"`
	// Type of actions that can be performed.
	Type *string `pulumi:"type"`
}

// Action that need to performed.
type NetworkTapRuleActionResponseOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleActionResponse)(nil)).Elem()
}

func (o NetworkTapRuleActionResponseOutput) ToNetworkTapRuleActionResponseOutput() NetworkTapRuleActionResponseOutput {
	return o
}

func (o NetworkTapRuleActionResponseOutput) ToNetworkTapRuleActionResponseOutputWithContext(ctx context.Context) NetworkTapRuleActionResponseOutput {
	return o
}

// Destination Id. The ARM resource Id may be either Network To Network Interconnect or NeighborGroup.
func (o NetworkTapRuleActionResponseOutput) DestinationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleActionResponse) *string { return v.DestinationId }).(pulumi.StringPtrOutput)
}

// The parameter to enable or disable the timestamp.
func (o NetworkTapRuleActionResponseOutput) IsTimestampEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleActionResponse) *string { return v.IsTimestampEnabled }).(pulumi.StringPtrOutput)
}

// The name of the match configuration. This is used when Goto type is provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration.
func (o NetworkTapRuleActionResponseOutput) MatchConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleActionResponse) *string { return v.MatchConfigurationName }).(pulumi.StringPtrOutput)
}

// Truncate. 0 indicates do not truncate.
func (o NetworkTapRuleActionResponseOutput) Truncate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleActionResponse) *string { return v.Truncate }).(pulumi.StringPtrOutput)
}

// Type of actions that can be performed.
func (o NetworkTapRuleActionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleActionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworkTapRuleActionResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleActionResponse)(nil)).Elem()
}

func (o NetworkTapRuleActionResponseArrayOutput) ToNetworkTapRuleActionResponseArrayOutput() NetworkTapRuleActionResponseArrayOutput {
	return o
}

func (o NetworkTapRuleActionResponseArrayOutput) ToNetworkTapRuleActionResponseArrayOutputWithContext(ctx context.Context) NetworkTapRuleActionResponseArrayOutput {
	return o
}

func (o NetworkTapRuleActionResponseArrayOutput) Index(i pulumi.IntInput) NetworkTapRuleActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapRuleActionResponse {
		return vs[0].([]NetworkTapRuleActionResponse)[vs[1].(int)]
	}).(NetworkTapRuleActionResponseOutput)
}

// Defines the match condition that is supported to filter the traffic.
type NetworkTapRuleMatchCondition struct {
	// Encapsulation Type that needs to be matched.
	EncapsulationType *string `pulumi:"encapsulationType"`
	// IP condition that needs to be matched.
	IpCondition *IpMatchCondition `pulumi:"ipCondition"`
	// Defines the port condition that needs to be matched.
	PortCondition *PortCondition `pulumi:"portCondition"`
	// List of the protocols that need to be matched.
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// Vlan match condition that needs to be matched.
	VlanMatchCondition *VlanMatchCondition `pulumi:"vlanMatchCondition"`
}

// Defaults sets the appropriate defaults for NetworkTapRuleMatchCondition
func (val *NetworkTapRuleMatchCondition) Defaults() *NetworkTapRuleMatchCondition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncapsulationType == nil {
		encapsulationType_ := "None"
		tmp.EncapsulationType = &encapsulationType_
	}
	return &tmp
}

// NetworkTapRuleMatchConditionInput is an input type that accepts NetworkTapRuleMatchConditionArgs and NetworkTapRuleMatchConditionOutput values.
// You can construct a concrete instance of `NetworkTapRuleMatchConditionInput` via:
//
//	NetworkTapRuleMatchConditionArgs{...}
type NetworkTapRuleMatchConditionInput interface {
	pulumi.Input

	ToNetworkTapRuleMatchConditionOutput() NetworkTapRuleMatchConditionOutput
	ToNetworkTapRuleMatchConditionOutputWithContext(context.Context) NetworkTapRuleMatchConditionOutput
}

// Defines the match condition that is supported to filter the traffic.
type NetworkTapRuleMatchConditionArgs struct {
	// Encapsulation Type that needs to be matched.
	EncapsulationType pulumi.StringPtrInput `pulumi:"encapsulationType"`
	// IP condition that needs to be matched.
	IpCondition IpMatchConditionPtrInput `pulumi:"ipCondition"`
	// Defines the port condition that needs to be matched.
	PortCondition PortConditionPtrInput `pulumi:"portCondition"`
	// List of the protocols that need to be matched.
	ProtocolTypes pulumi.StringArrayInput `pulumi:"protocolTypes"`
	// Vlan match condition that needs to be matched.
	VlanMatchCondition VlanMatchConditionPtrInput `pulumi:"vlanMatchCondition"`
}

// Defaults sets the appropriate defaults for NetworkTapRuleMatchConditionArgs
func (val *NetworkTapRuleMatchConditionArgs) Defaults() *NetworkTapRuleMatchConditionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncapsulationType == nil {
		tmp.EncapsulationType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (NetworkTapRuleMatchConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleMatchCondition)(nil)).Elem()
}

func (i NetworkTapRuleMatchConditionArgs) ToNetworkTapRuleMatchConditionOutput() NetworkTapRuleMatchConditionOutput {
	return i.ToNetworkTapRuleMatchConditionOutputWithContext(context.Background())
}

func (i NetworkTapRuleMatchConditionArgs) ToNetworkTapRuleMatchConditionOutputWithContext(ctx context.Context) NetworkTapRuleMatchConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapRuleMatchConditionOutput)
}

// NetworkTapRuleMatchConditionArrayInput is an input type that accepts NetworkTapRuleMatchConditionArray and NetworkTapRuleMatchConditionArrayOutput values.
// You can construct a concrete instance of `NetworkTapRuleMatchConditionArrayInput` via:
//
//	NetworkTapRuleMatchConditionArray{ NetworkTapRuleMatchConditionArgs{...} }
type NetworkTapRuleMatchConditionArrayInput interface {
	pulumi.Input

	ToNetworkTapRuleMatchConditionArrayOutput() NetworkTapRuleMatchConditionArrayOutput
	ToNetworkTapRuleMatchConditionArrayOutputWithContext(context.Context) NetworkTapRuleMatchConditionArrayOutput
}

type NetworkTapRuleMatchConditionArray []NetworkTapRuleMatchConditionInput

func (NetworkTapRuleMatchConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleMatchCondition)(nil)).Elem()
}

func (i NetworkTapRuleMatchConditionArray) ToNetworkTapRuleMatchConditionArrayOutput() NetworkTapRuleMatchConditionArrayOutput {
	return i.ToNetworkTapRuleMatchConditionArrayOutputWithContext(context.Background())
}

func (i NetworkTapRuleMatchConditionArray) ToNetworkTapRuleMatchConditionArrayOutputWithContext(ctx context.Context) NetworkTapRuleMatchConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapRuleMatchConditionArrayOutput)
}

// Defines the match condition that is supported to filter the traffic.
type NetworkTapRuleMatchConditionOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleMatchCondition)(nil)).Elem()
}

func (o NetworkTapRuleMatchConditionOutput) ToNetworkTapRuleMatchConditionOutput() NetworkTapRuleMatchConditionOutput {
	return o
}

func (o NetworkTapRuleMatchConditionOutput) ToNetworkTapRuleMatchConditionOutputWithContext(ctx context.Context) NetworkTapRuleMatchConditionOutput {
	return o
}

// Encapsulation Type that needs to be matched.
func (o NetworkTapRuleMatchConditionOutput) EncapsulationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchCondition) *string { return v.EncapsulationType }).(pulumi.StringPtrOutput)
}

// IP condition that needs to be matched.
func (o NetworkTapRuleMatchConditionOutput) IpCondition() IpMatchConditionPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchCondition) *IpMatchCondition { return v.IpCondition }).(IpMatchConditionPtrOutput)
}

// Defines the port condition that needs to be matched.
func (o NetworkTapRuleMatchConditionOutput) PortCondition() PortConditionPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchCondition) *PortCondition { return v.PortCondition }).(PortConditionPtrOutput)
}

// List of the protocols that need to be matched.
func (o NetworkTapRuleMatchConditionOutput) ProtocolTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchCondition) []string { return v.ProtocolTypes }).(pulumi.StringArrayOutput)
}

// Vlan match condition that needs to be matched.
func (o NetworkTapRuleMatchConditionOutput) VlanMatchCondition() VlanMatchConditionPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchCondition) *VlanMatchCondition { return v.VlanMatchCondition }).(VlanMatchConditionPtrOutput)
}

type NetworkTapRuleMatchConditionArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleMatchCondition)(nil)).Elem()
}

func (o NetworkTapRuleMatchConditionArrayOutput) ToNetworkTapRuleMatchConditionArrayOutput() NetworkTapRuleMatchConditionArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConditionArrayOutput) ToNetworkTapRuleMatchConditionArrayOutputWithContext(ctx context.Context) NetworkTapRuleMatchConditionArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConditionArrayOutput) Index(i pulumi.IntInput) NetworkTapRuleMatchConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapRuleMatchCondition {
		return vs[0].([]NetworkTapRuleMatchCondition)[vs[1].(int)]
	}).(NetworkTapRuleMatchConditionOutput)
}

// Defines the match condition that is supported to filter the traffic.
type NetworkTapRuleMatchConditionResponse struct {
	// Encapsulation Type that needs to be matched.
	EncapsulationType *string `pulumi:"encapsulationType"`
	// IP condition that needs to be matched.
	IpCondition *IpMatchConditionResponse `pulumi:"ipCondition"`
	// Defines the port condition that needs to be matched.
	PortCondition *PortConditionResponse `pulumi:"portCondition"`
	// List of the protocols that need to be matched.
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// Vlan match condition that needs to be matched.
	VlanMatchCondition *VlanMatchConditionResponse `pulumi:"vlanMatchCondition"`
}

// Defaults sets the appropriate defaults for NetworkTapRuleMatchConditionResponse
func (val *NetworkTapRuleMatchConditionResponse) Defaults() *NetworkTapRuleMatchConditionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncapsulationType == nil {
		encapsulationType_ := "None"
		tmp.EncapsulationType = &encapsulationType_
	}
	return &tmp
}

// Defines the match condition that is supported to filter the traffic.
type NetworkTapRuleMatchConditionResponseOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleMatchConditionResponse)(nil)).Elem()
}

func (o NetworkTapRuleMatchConditionResponseOutput) ToNetworkTapRuleMatchConditionResponseOutput() NetworkTapRuleMatchConditionResponseOutput {
	return o
}

func (o NetworkTapRuleMatchConditionResponseOutput) ToNetworkTapRuleMatchConditionResponseOutputWithContext(ctx context.Context) NetworkTapRuleMatchConditionResponseOutput {
	return o
}

// Encapsulation Type that needs to be matched.
func (o NetworkTapRuleMatchConditionResponseOutput) EncapsulationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConditionResponse) *string { return v.EncapsulationType }).(pulumi.StringPtrOutput)
}

// IP condition that needs to be matched.
func (o NetworkTapRuleMatchConditionResponseOutput) IpCondition() IpMatchConditionResponsePtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConditionResponse) *IpMatchConditionResponse { return v.IpCondition }).(IpMatchConditionResponsePtrOutput)
}

// Defines the port condition that needs to be matched.
func (o NetworkTapRuleMatchConditionResponseOutput) PortCondition() PortConditionResponsePtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConditionResponse) *PortConditionResponse { return v.PortCondition }).(PortConditionResponsePtrOutput)
}

// List of the protocols that need to be matched.
func (o NetworkTapRuleMatchConditionResponseOutput) ProtocolTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConditionResponse) []string { return v.ProtocolTypes }).(pulumi.StringArrayOutput)
}

// Vlan match condition that needs to be matched.
func (o NetworkTapRuleMatchConditionResponseOutput) VlanMatchCondition() VlanMatchConditionResponsePtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConditionResponse) *VlanMatchConditionResponse { return v.VlanMatchCondition }).(VlanMatchConditionResponsePtrOutput)
}

type NetworkTapRuleMatchConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleMatchConditionResponse)(nil)).Elem()
}

func (o NetworkTapRuleMatchConditionResponseArrayOutput) ToNetworkTapRuleMatchConditionResponseArrayOutput() NetworkTapRuleMatchConditionResponseArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConditionResponseArrayOutput) ToNetworkTapRuleMatchConditionResponseArrayOutputWithContext(ctx context.Context) NetworkTapRuleMatchConditionResponseArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConditionResponseArrayOutput) Index(i pulumi.IntInput) NetworkTapRuleMatchConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapRuleMatchConditionResponse {
		return vs[0].([]NetworkTapRuleMatchConditionResponse)[vs[1].(int)]
	}).(NetworkTapRuleMatchConditionResponseOutput)
}

// Defines the match configuration that are supported to filter the traffic.
type NetworkTapRuleMatchConfiguration struct {
	// List of actions that need to be performed for the matched conditions.
	Actions []NetworkTapRuleAction `pulumi:"actions"`
	// Type of IP Address. IPv4 or IPv6
	IpAddressType *string `pulumi:"ipAddressType"`
	// List of the match conditions.
	MatchConditions []NetworkTapRuleMatchCondition `pulumi:"matchConditions"`
	// The name of the match configuration.
	MatchConfigurationName *string `pulumi:"matchConfigurationName"`
	// Sequence Number of the match configuration..
	SequenceNumber *float64 `pulumi:"sequenceNumber"`
}

// NetworkTapRuleMatchConfigurationInput is an input type that accepts NetworkTapRuleMatchConfigurationArgs and NetworkTapRuleMatchConfigurationOutput values.
// You can construct a concrete instance of `NetworkTapRuleMatchConfigurationInput` via:
//
//	NetworkTapRuleMatchConfigurationArgs{...}
type NetworkTapRuleMatchConfigurationInput interface {
	pulumi.Input

	ToNetworkTapRuleMatchConfigurationOutput() NetworkTapRuleMatchConfigurationOutput
	ToNetworkTapRuleMatchConfigurationOutputWithContext(context.Context) NetworkTapRuleMatchConfigurationOutput
}

// Defines the match configuration that are supported to filter the traffic.
type NetworkTapRuleMatchConfigurationArgs struct {
	// List of actions that need to be performed for the matched conditions.
	Actions NetworkTapRuleActionArrayInput `pulumi:"actions"`
	// Type of IP Address. IPv4 or IPv6
	IpAddressType pulumi.StringPtrInput `pulumi:"ipAddressType"`
	// List of the match conditions.
	MatchConditions NetworkTapRuleMatchConditionArrayInput `pulumi:"matchConditions"`
	// The name of the match configuration.
	MatchConfigurationName pulumi.StringPtrInput `pulumi:"matchConfigurationName"`
	// Sequence Number of the match configuration..
	SequenceNumber pulumi.Float64PtrInput `pulumi:"sequenceNumber"`
}

func (NetworkTapRuleMatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleMatchConfiguration)(nil)).Elem()
}

func (i NetworkTapRuleMatchConfigurationArgs) ToNetworkTapRuleMatchConfigurationOutput() NetworkTapRuleMatchConfigurationOutput {
	return i.ToNetworkTapRuleMatchConfigurationOutputWithContext(context.Background())
}

func (i NetworkTapRuleMatchConfigurationArgs) ToNetworkTapRuleMatchConfigurationOutputWithContext(ctx context.Context) NetworkTapRuleMatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapRuleMatchConfigurationOutput)
}

// NetworkTapRuleMatchConfigurationArrayInput is an input type that accepts NetworkTapRuleMatchConfigurationArray and NetworkTapRuleMatchConfigurationArrayOutput values.
// You can construct a concrete instance of `NetworkTapRuleMatchConfigurationArrayInput` via:
//
//	NetworkTapRuleMatchConfigurationArray{ NetworkTapRuleMatchConfigurationArgs{...} }
type NetworkTapRuleMatchConfigurationArrayInput interface {
	pulumi.Input

	ToNetworkTapRuleMatchConfigurationArrayOutput() NetworkTapRuleMatchConfigurationArrayOutput
	ToNetworkTapRuleMatchConfigurationArrayOutputWithContext(context.Context) NetworkTapRuleMatchConfigurationArrayOutput
}

type NetworkTapRuleMatchConfigurationArray []NetworkTapRuleMatchConfigurationInput

func (NetworkTapRuleMatchConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleMatchConfiguration)(nil)).Elem()
}

func (i NetworkTapRuleMatchConfigurationArray) ToNetworkTapRuleMatchConfigurationArrayOutput() NetworkTapRuleMatchConfigurationArrayOutput {
	return i.ToNetworkTapRuleMatchConfigurationArrayOutputWithContext(context.Background())
}

func (i NetworkTapRuleMatchConfigurationArray) ToNetworkTapRuleMatchConfigurationArrayOutputWithContext(ctx context.Context) NetworkTapRuleMatchConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTapRuleMatchConfigurationArrayOutput)
}

// Defines the match configuration that are supported to filter the traffic.
type NetworkTapRuleMatchConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleMatchConfiguration)(nil)).Elem()
}

func (o NetworkTapRuleMatchConfigurationOutput) ToNetworkTapRuleMatchConfigurationOutput() NetworkTapRuleMatchConfigurationOutput {
	return o
}

func (o NetworkTapRuleMatchConfigurationOutput) ToNetworkTapRuleMatchConfigurationOutputWithContext(ctx context.Context) NetworkTapRuleMatchConfigurationOutput {
	return o
}

// List of actions that need to be performed for the matched conditions.
func (o NetworkTapRuleMatchConfigurationOutput) Actions() NetworkTapRuleActionArrayOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfiguration) []NetworkTapRuleAction { return v.Actions }).(NetworkTapRuleActionArrayOutput)
}

// Type of IP Address. IPv4 or IPv6
func (o NetworkTapRuleMatchConfigurationOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfiguration) *string { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// List of the match conditions.
func (o NetworkTapRuleMatchConfigurationOutput) MatchConditions() NetworkTapRuleMatchConditionArrayOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfiguration) []NetworkTapRuleMatchCondition { return v.MatchConditions }).(NetworkTapRuleMatchConditionArrayOutput)
}

// The name of the match configuration.
func (o NetworkTapRuleMatchConfigurationOutput) MatchConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfiguration) *string { return v.MatchConfigurationName }).(pulumi.StringPtrOutput)
}

// Sequence Number of the match configuration..
func (o NetworkTapRuleMatchConfigurationOutput) SequenceNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfiguration) *float64 { return v.SequenceNumber }).(pulumi.Float64PtrOutput)
}

type NetworkTapRuleMatchConfigurationArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleMatchConfiguration)(nil)).Elem()
}

func (o NetworkTapRuleMatchConfigurationArrayOutput) ToNetworkTapRuleMatchConfigurationArrayOutput() NetworkTapRuleMatchConfigurationArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConfigurationArrayOutput) ToNetworkTapRuleMatchConfigurationArrayOutputWithContext(ctx context.Context) NetworkTapRuleMatchConfigurationArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConfigurationArrayOutput) Index(i pulumi.IntInput) NetworkTapRuleMatchConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapRuleMatchConfiguration {
		return vs[0].([]NetworkTapRuleMatchConfiguration)[vs[1].(int)]
	}).(NetworkTapRuleMatchConfigurationOutput)
}

// Defines the match configuration that are supported to filter the traffic.
type NetworkTapRuleMatchConfigurationResponse struct {
	// List of actions that need to be performed for the matched conditions.
	Actions []NetworkTapRuleActionResponse `pulumi:"actions"`
	// Type of IP Address. IPv4 or IPv6
	IpAddressType *string `pulumi:"ipAddressType"`
	// List of the match conditions.
	MatchConditions []NetworkTapRuleMatchConditionResponse `pulumi:"matchConditions"`
	// The name of the match configuration.
	MatchConfigurationName *string `pulumi:"matchConfigurationName"`
	// Sequence Number of the match configuration..
	SequenceNumber *float64 `pulumi:"sequenceNumber"`
}

// Defines the match configuration that are supported to filter the traffic.
type NetworkTapRuleMatchConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTapRuleMatchConfigurationResponse)(nil)).Elem()
}

func (o NetworkTapRuleMatchConfigurationResponseOutput) ToNetworkTapRuleMatchConfigurationResponseOutput() NetworkTapRuleMatchConfigurationResponseOutput {
	return o
}

func (o NetworkTapRuleMatchConfigurationResponseOutput) ToNetworkTapRuleMatchConfigurationResponseOutputWithContext(ctx context.Context) NetworkTapRuleMatchConfigurationResponseOutput {
	return o
}

// List of actions that need to be performed for the matched conditions.
func (o NetworkTapRuleMatchConfigurationResponseOutput) Actions() NetworkTapRuleActionResponseArrayOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfigurationResponse) []NetworkTapRuleActionResponse { return v.Actions }).(NetworkTapRuleActionResponseArrayOutput)
}

// Type of IP Address. IPv4 or IPv6
func (o NetworkTapRuleMatchConfigurationResponseOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfigurationResponse) *string { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// List of the match conditions.
func (o NetworkTapRuleMatchConfigurationResponseOutput) MatchConditions() NetworkTapRuleMatchConditionResponseArrayOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfigurationResponse) []NetworkTapRuleMatchConditionResponse {
		return v.MatchConditions
	}).(NetworkTapRuleMatchConditionResponseArrayOutput)
}

// The name of the match configuration.
func (o NetworkTapRuleMatchConfigurationResponseOutput) MatchConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfigurationResponse) *string { return v.MatchConfigurationName }).(pulumi.StringPtrOutput)
}

// Sequence Number of the match configuration..
func (o NetworkTapRuleMatchConfigurationResponseOutput) SequenceNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NetworkTapRuleMatchConfigurationResponse) *float64 { return v.SequenceNumber }).(pulumi.Float64PtrOutput)
}

type NetworkTapRuleMatchConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkTapRuleMatchConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTapRuleMatchConfigurationResponse)(nil)).Elem()
}

func (o NetworkTapRuleMatchConfigurationResponseArrayOutput) ToNetworkTapRuleMatchConfigurationResponseArrayOutput() NetworkTapRuleMatchConfigurationResponseArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConfigurationResponseArrayOutput) ToNetworkTapRuleMatchConfigurationResponseArrayOutputWithContext(ctx context.Context) NetworkTapRuleMatchConfigurationResponseArrayOutput {
	return o
}

func (o NetworkTapRuleMatchConfigurationResponseArrayOutput) Index(i pulumi.IntInput) NetworkTapRuleMatchConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTapRuleMatchConfigurationResponse {
		return vs[0].([]NetworkTapRuleMatchConfigurationResponse)[vs[1].(int)]
	}).(NetworkTapRuleMatchConfigurationResponseOutput)
}

// Common properties for Layer3Configuration.
type NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration struct {
	// ASN of PE devices for CE/PE connectivity.Example : 28
	PeerASN float64 `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix *string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix *string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// VLAN for CE/PE Layer 3 connectivity.Example : 501
	VlanId int `pulumi:"vlanId"`
}

// NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationInput is an input type that accepts NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs and NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput values.
// You can construct a concrete instance of `NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationInput` via:
//
//	NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs{...}
type NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationInput interface {
	pulumi.Input

	ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput
	ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutputWithContext(context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput
}

// Common properties for Layer3Configuration.
type NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs struct {
	// ASN of PE devices for CE/PE connectivity.Example : 28
	PeerASN pulumi.Float64Input `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix pulumi.StringPtrInput `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix pulumi.StringPtrInput `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix pulumi.StringPtrInput `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix pulumi.StringPtrInput `pulumi:"secondaryIpv6Prefix"`
	// VLAN for CE/PE Layer 3 connectivity.Example : 501
	VlanId pulumi.IntInput `pulumi:"vlanId"`
}

func (NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration)(nil)).Elem()
}

func (i NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput {
	return i.ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutputWithContext(context.Background())
}

func (i NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput)
}

func (i NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return i.ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(context.Background())
}

func (i NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput).ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(ctx)
}

// NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrInput is an input type that accepts NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs, NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtr and NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput values.
// You can construct a concrete instance of `NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrInput` via:
//
//	        NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs{...}
//
//	or:
//
//	        nil
type NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrInput interface {
	pulumi.Input

	ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput
	ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput
}

type networkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrType NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs

func NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtr(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationArgs) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrInput {
	return (*networkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrType)(v)
}

func (*networkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration)(nil)).Elem()
}

func (i *networkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrType) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return i.ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(context.Background())
}

func (i *networkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrType) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput)
}

// Common properties for Layer3Configuration.
type NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration)(nil)).Elem()
}

func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput {
	return o
}

func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput {
	return o
}

func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return o.ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(context.Background())
}

func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration {
		return &v
	}).(NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput)
}

// ASN of PE devices for CE/PE connectivity.Example : 28
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) float64 { return v.PeerASN }).(pulumi.Float64Output)
}

// IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// VLAN for CE/PE Layer 3 connectivity.Example : 501
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) int { return v.VlanId }).(pulumi.IntOutput)
}

type NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration)(nil)).Elem()
}

func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return o
}

func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) ToNetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput {
	return o
}

func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) Elem() NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration {
		if v != nil {
			return *v
		}
		var ret NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration
		return ret
	}).(NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput)
}

// ASN of PE devices for CE/PE connectivity.Example : 28
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// VLAN for CE/PE Layer 3 connectivity.Example : 501
func (o NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration) *int {
		if v == nil {
			return nil
		}
		return &v.VlanId
	}).(pulumi.IntPtrOutput)
}

// Common properties for Layer3Configuration.
type NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration struct {
	// ASN of CE devices for CE/PE connectivity.
	FabricASN float64 `pulumi:"fabricASN"`
	// ASN of PE devices for CE/PE connectivity.Example : 28
	PeerASN float64 `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix *string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix *string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// VLAN for CE/PE Layer 3 connectivity.Example : 501
	VlanId int `pulumi:"vlanId"`
}

// Common properties for Layer3Configuration.
type NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration)(nil)).Elem()
}

func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) ToNetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput() NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput {
	return o
}

func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) ToNetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput {
	return o
}

// ASN of CE devices for CE/PE connectivity.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) FabricASN() pulumi.Float64Output {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) float64 {
		return v.FabricASN
	}).(pulumi.Float64Output)
}

// ASN of PE devices for CE/PE connectivity.Example : 28
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) float64 {
		return v.PeerASN
	}).(pulumi.Float64Output)
}

// IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// VLAN for CE/PE Layer 3 connectivity.Example : 501
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) int { return v.VlanId }).(pulumi.IntOutput)
}

type NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration)(nil)).Elem()
}

func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) ToNetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput() NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput {
	return o
}

func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) ToNetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput {
	return o
}

func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) Elem() NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration {
		if v != nil {
			return *v
		}
		var ret NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration
		return ret
	}).(NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput)
}

// ASN of CE devices for CE/PE connectivity.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) FabricASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *float64 {
		if v == nil {
			return nil
		}
		return &v.FabricASN
	}).(pulumi.Float64PtrOutput)
}

// ASN of PE devices for CE/PE connectivity.Example : 28
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// VLAN for CE/PE Layer 3 connectivity.Example : 501
func (o NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration) *int {
		if v == nil {
			return nil
		}
		return &v.VlanId
	}).(pulumi.IntPtrOutput)
}

// NPB Static Route Configuration properties.
type NpbStaticRouteConfiguration struct {
	// BFD Configuration properties.
	BfdConfiguration *BfdConfiguration `pulumi:"bfdConfiguration"`
	// List of IPv4 Routes.
	Ipv4Routes []StaticRouteProperties `pulumi:"ipv4Routes"`
	// List of IPv6 Routes.
	Ipv6Routes []StaticRouteProperties `pulumi:"ipv6Routes"`
}

// Defaults sets the appropriate defaults for NpbStaticRouteConfiguration
func (val *NpbStaticRouteConfiguration) Defaults() *NpbStaticRouteConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	return &tmp
}

// NpbStaticRouteConfigurationInput is an input type that accepts NpbStaticRouteConfigurationArgs and NpbStaticRouteConfigurationOutput values.
// You can construct a concrete instance of `NpbStaticRouteConfigurationInput` via:
//
//	NpbStaticRouteConfigurationArgs{...}
type NpbStaticRouteConfigurationInput interface {
	pulumi.Input

	ToNpbStaticRouteConfigurationOutput() NpbStaticRouteConfigurationOutput
	ToNpbStaticRouteConfigurationOutputWithContext(context.Context) NpbStaticRouteConfigurationOutput
}

// NPB Static Route Configuration properties.
type NpbStaticRouteConfigurationArgs struct {
	// BFD Configuration properties.
	BfdConfiguration BfdConfigurationPtrInput `pulumi:"bfdConfiguration"`
	// List of IPv4 Routes.
	Ipv4Routes StaticRoutePropertiesArrayInput `pulumi:"ipv4Routes"`
	// List of IPv6 Routes.
	Ipv6Routes StaticRoutePropertiesArrayInput `pulumi:"ipv6Routes"`
}

// Defaults sets the appropriate defaults for NpbStaticRouteConfigurationArgs
func (val *NpbStaticRouteConfigurationArgs) Defaults() *NpbStaticRouteConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (NpbStaticRouteConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NpbStaticRouteConfiguration)(nil)).Elem()
}

func (i NpbStaticRouteConfigurationArgs) ToNpbStaticRouteConfigurationOutput() NpbStaticRouteConfigurationOutput {
	return i.ToNpbStaticRouteConfigurationOutputWithContext(context.Background())
}

func (i NpbStaticRouteConfigurationArgs) ToNpbStaticRouteConfigurationOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpbStaticRouteConfigurationOutput)
}

func (i NpbStaticRouteConfigurationArgs) ToNpbStaticRouteConfigurationPtrOutput() NpbStaticRouteConfigurationPtrOutput {
	return i.ToNpbStaticRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i NpbStaticRouteConfigurationArgs) ToNpbStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpbStaticRouteConfigurationOutput).ToNpbStaticRouteConfigurationPtrOutputWithContext(ctx)
}

// NpbStaticRouteConfigurationPtrInput is an input type that accepts NpbStaticRouteConfigurationArgs, NpbStaticRouteConfigurationPtr and NpbStaticRouteConfigurationPtrOutput values.
// You can construct a concrete instance of `NpbStaticRouteConfigurationPtrInput` via:
//
//	        NpbStaticRouteConfigurationArgs{...}
//
//	or:
//
//	        nil
type NpbStaticRouteConfigurationPtrInput interface {
	pulumi.Input

	ToNpbStaticRouteConfigurationPtrOutput() NpbStaticRouteConfigurationPtrOutput
	ToNpbStaticRouteConfigurationPtrOutputWithContext(context.Context) NpbStaticRouteConfigurationPtrOutput
}

type npbStaticRouteConfigurationPtrType NpbStaticRouteConfigurationArgs

func NpbStaticRouteConfigurationPtr(v *NpbStaticRouteConfigurationArgs) NpbStaticRouteConfigurationPtrInput {
	return (*npbStaticRouteConfigurationPtrType)(v)
}

func (*npbStaticRouteConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NpbStaticRouteConfiguration)(nil)).Elem()
}

func (i *npbStaticRouteConfigurationPtrType) ToNpbStaticRouteConfigurationPtrOutput() NpbStaticRouteConfigurationPtrOutput {
	return i.ToNpbStaticRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i *npbStaticRouteConfigurationPtrType) ToNpbStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpbStaticRouteConfigurationPtrOutput)
}

// NPB Static Route Configuration properties.
type NpbStaticRouteConfigurationOutput struct{ *pulumi.OutputState }

func (NpbStaticRouteConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpbStaticRouteConfiguration)(nil)).Elem()
}

func (o NpbStaticRouteConfigurationOutput) ToNpbStaticRouteConfigurationOutput() NpbStaticRouteConfigurationOutput {
	return o
}

func (o NpbStaticRouteConfigurationOutput) ToNpbStaticRouteConfigurationOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationOutput {
	return o
}

func (o NpbStaticRouteConfigurationOutput) ToNpbStaticRouteConfigurationPtrOutput() NpbStaticRouteConfigurationPtrOutput {
	return o.ToNpbStaticRouteConfigurationPtrOutputWithContext(context.Background())
}

func (o NpbStaticRouteConfigurationOutput) ToNpbStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NpbStaticRouteConfiguration) *NpbStaticRouteConfiguration {
		return &v
	}).(NpbStaticRouteConfigurationPtrOutput)
}

// BFD Configuration properties.
func (o NpbStaticRouteConfigurationOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v NpbStaticRouteConfiguration) *BfdConfiguration { return v.BfdConfiguration }).(BfdConfigurationPtrOutput)
}

// List of IPv4 Routes.
func (o NpbStaticRouteConfigurationOutput) Ipv4Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v NpbStaticRouteConfiguration) []StaticRouteProperties { return v.Ipv4Routes }).(StaticRoutePropertiesArrayOutput)
}

// List of IPv6 Routes.
func (o NpbStaticRouteConfigurationOutput) Ipv6Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v NpbStaticRouteConfiguration) []StaticRouteProperties { return v.Ipv6Routes }).(StaticRoutePropertiesArrayOutput)
}

type NpbStaticRouteConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NpbStaticRouteConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NpbStaticRouteConfiguration)(nil)).Elem()
}

func (o NpbStaticRouteConfigurationPtrOutput) ToNpbStaticRouteConfigurationPtrOutput() NpbStaticRouteConfigurationPtrOutput {
	return o
}

func (o NpbStaticRouteConfigurationPtrOutput) ToNpbStaticRouteConfigurationPtrOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationPtrOutput {
	return o
}

func (o NpbStaticRouteConfigurationPtrOutput) Elem() NpbStaticRouteConfigurationOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfiguration) NpbStaticRouteConfiguration {
		if v != nil {
			return *v
		}
		var ret NpbStaticRouteConfiguration
		return ret
	}).(NpbStaticRouteConfigurationOutput)
}

// BFD Configuration properties.
func (o NpbStaticRouteConfigurationPtrOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfiguration) *BfdConfiguration {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationPtrOutput)
}

// List of IPv4 Routes.
func (o NpbStaticRouteConfigurationPtrOutput) Ipv4Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfiguration) []StaticRouteProperties {
		if v == nil {
			return nil
		}
		return v.Ipv4Routes
	}).(StaticRoutePropertiesArrayOutput)
}

// List of IPv6 Routes.
func (o NpbStaticRouteConfigurationPtrOutput) Ipv6Routes() StaticRoutePropertiesArrayOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfiguration) []StaticRouteProperties {
		if v == nil {
			return nil
		}
		return v.Ipv6Routes
	}).(StaticRoutePropertiesArrayOutput)
}

// NPB Static Route Configuration properties.
type NpbStaticRouteConfigurationResponse struct {
	// BFD Configuration properties.
	BfdConfiguration *BfdConfigurationResponse `pulumi:"bfdConfiguration"`
	// List of IPv4 Routes.
	Ipv4Routes []StaticRoutePropertiesResponse `pulumi:"ipv4Routes"`
	// List of IPv6 Routes.
	Ipv6Routes []StaticRoutePropertiesResponse `pulumi:"ipv6Routes"`
}

// Defaults sets the appropriate defaults for NpbStaticRouteConfigurationResponse
func (val *NpbStaticRouteConfigurationResponse) Defaults() *NpbStaticRouteConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	return &tmp
}

// NPB Static Route Configuration properties.
type NpbStaticRouteConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NpbStaticRouteConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpbStaticRouteConfigurationResponse)(nil)).Elem()
}

func (o NpbStaticRouteConfigurationResponseOutput) ToNpbStaticRouteConfigurationResponseOutput() NpbStaticRouteConfigurationResponseOutput {
	return o
}

func (o NpbStaticRouteConfigurationResponseOutput) ToNpbStaticRouteConfigurationResponseOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationResponseOutput {
	return o
}

// BFD Configuration properties.
func (o NpbStaticRouteConfigurationResponseOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NpbStaticRouteConfigurationResponse) *BfdConfigurationResponse { return v.BfdConfiguration }).(BfdConfigurationResponsePtrOutput)
}

// List of IPv4 Routes.
func (o NpbStaticRouteConfigurationResponseOutput) Ipv4Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v NpbStaticRouteConfigurationResponse) []StaticRoutePropertiesResponse { return v.Ipv4Routes }).(StaticRoutePropertiesResponseArrayOutput)
}

// List of IPv6 Routes.
func (o NpbStaticRouteConfigurationResponseOutput) Ipv6Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v NpbStaticRouteConfigurationResponse) []StaticRoutePropertiesResponse { return v.Ipv6Routes }).(StaticRoutePropertiesResponseArrayOutput)
}

type NpbStaticRouteConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (NpbStaticRouteConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NpbStaticRouteConfigurationResponse)(nil)).Elem()
}

func (o NpbStaticRouteConfigurationResponsePtrOutput) ToNpbStaticRouteConfigurationResponsePtrOutput() NpbStaticRouteConfigurationResponsePtrOutput {
	return o
}

func (o NpbStaticRouteConfigurationResponsePtrOutput) ToNpbStaticRouteConfigurationResponsePtrOutputWithContext(ctx context.Context) NpbStaticRouteConfigurationResponsePtrOutput {
	return o
}

func (o NpbStaticRouteConfigurationResponsePtrOutput) Elem() NpbStaticRouteConfigurationResponseOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfigurationResponse) NpbStaticRouteConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret NpbStaticRouteConfigurationResponse
		return ret
	}).(NpbStaticRouteConfigurationResponseOutput)
}

// BFD Configuration properties.
func (o NpbStaticRouteConfigurationResponsePtrOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfigurationResponse) *BfdConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// List of IPv4 Routes.
func (o NpbStaticRouteConfigurationResponsePtrOutput) Ipv4Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfigurationResponse) []StaticRoutePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Ipv4Routes
	}).(StaticRoutePropertiesResponseArrayOutput)
}

// List of IPv6 Routes.
func (o NpbStaticRouteConfigurationResponsePtrOutput) Ipv6Routes() StaticRoutePropertiesResponseArrayOutput {
	return o.ApplyT(func(v *NpbStaticRouteConfigurationResponse) []StaticRoutePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Ipv6Routes
	}).(StaticRoutePropertiesResponseArrayOutput)
}

// Port condition that needs to be matched.
type PortCondition struct {
	// Layer4 protocol type that needs to be matched.
	Layer4Protocol string `pulumi:"layer4Protocol"`
	// List of the port Group Names that need to be matched.
	PortGroupNames []string `pulumi:"portGroupNames"`
	// Port type that needs to be matched.
	PortType *string `pulumi:"portType"`
	// List of the Ports that need to be matched.
	Ports []string `pulumi:"ports"`
}

// PortConditionInput is an input type that accepts PortConditionArgs and PortConditionOutput values.
// You can construct a concrete instance of `PortConditionInput` via:
//
//	PortConditionArgs{...}
type PortConditionInput interface {
	pulumi.Input

	ToPortConditionOutput() PortConditionOutput
	ToPortConditionOutputWithContext(context.Context) PortConditionOutput
}

// Port condition that needs to be matched.
type PortConditionArgs struct {
	// Layer4 protocol type that needs to be matched.
	Layer4Protocol pulumi.StringInput `pulumi:"layer4Protocol"`
	// List of the port Group Names that need to be matched.
	PortGroupNames pulumi.StringArrayInput `pulumi:"portGroupNames"`
	// Port type that needs to be matched.
	PortType pulumi.StringPtrInput `pulumi:"portType"`
	// List of the Ports that need to be matched.
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (PortConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortCondition)(nil)).Elem()
}

func (i PortConditionArgs) ToPortConditionOutput() PortConditionOutput {
	return i.ToPortConditionOutputWithContext(context.Background())
}

func (i PortConditionArgs) ToPortConditionOutputWithContext(ctx context.Context) PortConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortConditionOutput)
}

func (i PortConditionArgs) ToPortConditionPtrOutput() PortConditionPtrOutput {
	return i.ToPortConditionPtrOutputWithContext(context.Background())
}

func (i PortConditionArgs) ToPortConditionPtrOutputWithContext(ctx context.Context) PortConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortConditionOutput).ToPortConditionPtrOutputWithContext(ctx)
}

// PortConditionPtrInput is an input type that accepts PortConditionArgs, PortConditionPtr and PortConditionPtrOutput values.
// You can construct a concrete instance of `PortConditionPtrInput` via:
//
//	        PortConditionArgs{...}
//
//	or:
//
//	        nil
type PortConditionPtrInput interface {
	pulumi.Input

	ToPortConditionPtrOutput() PortConditionPtrOutput
	ToPortConditionPtrOutputWithContext(context.Context) PortConditionPtrOutput
}

type portConditionPtrType PortConditionArgs

func PortConditionPtr(v *PortConditionArgs) PortConditionPtrInput {
	return (*portConditionPtrType)(v)
}

func (*portConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PortCondition)(nil)).Elem()
}

func (i *portConditionPtrType) ToPortConditionPtrOutput() PortConditionPtrOutput {
	return i.ToPortConditionPtrOutputWithContext(context.Background())
}

func (i *portConditionPtrType) ToPortConditionPtrOutputWithContext(ctx context.Context) PortConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortConditionPtrOutput)
}

// Port condition that needs to be matched.
type PortConditionOutput struct{ *pulumi.OutputState }

func (PortConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortCondition)(nil)).Elem()
}

func (o PortConditionOutput) ToPortConditionOutput() PortConditionOutput {
	return o
}

func (o PortConditionOutput) ToPortConditionOutputWithContext(ctx context.Context) PortConditionOutput {
	return o
}

func (o PortConditionOutput) ToPortConditionPtrOutput() PortConditionPtrOutput {
	return o.ToPortConditionPtrOutputWithContext(context.Background())
}

func (o PortConditionOutput) ToPortConditionPtrOutputWithContext(ctx context.Context) PortConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PortCondition) *PortCondition {
		return &v
	}).(PortConditionPtrOutput)
}

// Layer4 protocol type that needs to be matched.
func (o PortConditionOutput) Layer4Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v PortCondition) string { return v.Layer4Protocol }).(pulumi.StringOutput)
}

// List of the port Group Names that need to be matched.
func (o PortConditionOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PortCondition) []string { return v.PortGroupNames }).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o PortConditionOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortCondition) *string { return v.PortType }).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o PortConditionOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PortCondition) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type PortConditionPtrOutput struct{ *pulumi.OutputState }

func (PortConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortCondition)(nil)).Elem()
}

func (o PortConditionPtrOutput) ToPortConditionPtrOutput() PortConditionPtrOutput {
	return o
}

func (o PortConditionPtrOutput) ToPortConditionPtrOutputWithContext(ctx context.Context) PortConditionPtrOutput {
	return o
}

func (o PortConditionPtrOutput) Elem() PortConditionOutput {
	return o.ApplyT(func(v *PortCondition) PortCondition {
		if v != nil {
			return *v
		}
		var ret PortCondition
		return ret
	}).(PortConditionOutput)
}

// Layer4 protocol type that needs to be matched.
func (o PortConditionPtrOutput) Layer4Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Layer4Protocol
	}).(pulumi.StringPtrOutput)
}

// List of the port Group Names that need to be matched.
func (o PortConditionPtrOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PortCondition) []string {
		if v == nil {
			return nil
		}
		return v.PortGroupNames
	}).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o PortConditionPtrOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortCondition) *string {
		if v == nil {
			return nil
		}
		return v.PortType
	}).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o PortConditionPtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PortCondition) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

// Port condition that needs to be matched.
type PortConditionResponse struct {
	// Layer4 protocol type that needs to be matched.
	Layer4Protocol string `pulumi:"layer4Protocol"`
	// List of the port Group Names that need to be matched.
	PortGroupNames []string `pulumi:"portGroupNames"`
	// Port type that needs to be matched.
	PortType *string `pulumi:"portType"`
	// List of the Ports that need to be matched.
	Ports []string `pulumi:"ports"`
}

// Port condition that needs to be matched.
type PortConditionResponseOutput struct{ *pulumi.OutputState }

func (PortConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortConditionResponse)(nil)).Elem()
}

func (o PortConditionResponseOutput) ToPortConditionResponseOutput() PortConditionResponseOutput {
	return o
}

func (o PortConditionResponseOutput) ToPortConditionResponseOutputWithContext(ctx context.Context) PortConditionResponseOutput {
	return o
}

// Layer4 protocol type that needs to be matched.
func (o PortConditionResponseOutput) Layer4Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v PortConditionResponse) string { return v.Layer4Protocol }).(pulumi.StringOutput)
}

// List of the port Group Names that need to be matched.
func (o PortConditionResponseOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PortConditionResponse) []string { return v.PortGroupNames }).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o PortConditionResponseOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortConditionResponse) *string { return v.PortType }).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o PortConditionResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PortConditionResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type PortConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (PortConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortConditionResponse)(nil)).Elem()
}

func (o PortConditionResponsePtrOutput) ToPortConditionResponsePtrOutput() PortConditionResponsePtrOutput {
	return o
}

func (o PortConditionResponsePtrOutput) ToPortConditionResponsePtrOutputWithContext(ctx context.Context) PortConditionResponsePtrOutput {
	return o
}

func (o PortConditionResponsePtrOutput) Elem() PortConditionResponseOutput {
	return o.ApplyT(func(v *PortConditionResponse) PortConditionResponse {
		if v != nil {
			return *v
		}
		var ret PortConditionResponse
		return ret
	}).(PortConditionResponseOutput)
}

// Layer4 protocol type that needs to be matched.
func (o PortConditionResponsePtrOutput) Layer4Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortConditionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Layer4Protocol
	}).(pulumi.StringPtrOutput)
}

// List of the port Group Names that need to be matched.
func (o PortConditionResponsePtrOutput) PortGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PortConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.PortGroupNames
	}).(pulumi.StringArrayOutput)
}

// Port type that needs to be matched.
func (o PortConditionResponsePtrOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortType
	}).(pulumi.StringPtrOutput)
}

// List of the Ports that need to be matched.
func (o PortConditionResponsePtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PortConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

// Port Group properties.
type PortGroupProperties struct {
	// The name of the port group.
	Name *string `pulumi:"name"`
	// List of the ports that need to be matched.
	Ports []string `pulumi:"ports"`
}

// PortGroupPropertiesInput is an input type that accepts PortGroupPropertiesArgs and PortGroupPropertiesOutput values.
// You can construct a concrete instance of `PortGroupPropertiesInput` via:
//
//	PortGroupPropertiesArgs{...}
type PortGroupPropertiesInput interface {
	pulumi.Input

	ToPortGroupPropertiesOutput() PortGroupPropertiesOutput
	ToPortGroupPropertiesOutputWithContext(context.Context) PortGroupPropertiesOutput
}

// Port Group properties.
type PortGroupPropertiesArgs struct {
	// The name of the port group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of the ports that need to be matched.
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (PortGroupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortGroupProperties)(nil)).Elem()
}

func (i PortGroupPropertiesArgs) ToPortGroupPropertiesOutput() PortGroupPropertiesOutput {
	return i.ToPortGroupPropertiesOutputWithContext(context.Background())
}

func (i PortGroupPropertiesArgs) ToPortGroupPropertiesOutputWithContext(ctx context.Context) PortGroupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortGroupPropertiesOutput)
}

// PortGroupPropertiesArrayInput is an input type that accepts PortGroupPropertiesArray and PortGroupPropertiesArrayOutput values.
// You can construct a concrete instance of `PortGroupPropertiesArrayInput` via:
//
//	PortGroupPropertiesArray{ PortGroupPropertiesArgs{...} }
type PortGroupPropertiesArrayInput interface {
	pulumi.Input

	ToPortGroupPropertiesArrayOutput() PortGroupPropertiesArrayOutput
	ToPortGroupPropertiesArrayOutputWithContext(context.Context) PortGroupPropertiesArrayOutput
}

type PortGroupPropertiesArray []PortGroupPropertiesInput

func (PortGroupPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortGroupProperties)(nil)).Elem()
}

func (i PortGroupPropertiesArray) ToPortGroupPropertiesArrayOutput() PortGroupPropertiesArrayOutput {
	return i.ToPortGroupPropertiesArrayOutputWithContext(context.Background())
}

func (i PortGroupPropertiesArray) ToPortGroupPropertiesArrayOutputWithContext(ctx context.Context) PortGroupPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortGroupPropertiesArrayOutput)
}

// Port Group properties.
type PortGroupPropertiesOutput struct{ *pulumi.OutputState }

func (PortGroupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortGroupProperties)(nil)).Elem()
}

func (o PortGroupPropertiesOutput) ToPortGroupPropertiesOutput() PortGroupPropertiesOutput {
	return o
}

func (o PortGroupPropertiesOutput) ToPortGroupPropertiesOutputWithContext(ctx context.Context) PortGroupPropertiesOutput {
	return o
}

// The name of the port group.
func (o PortGroupPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortGroupProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of the ports that need to be matched.
func (o PortGroupPropertiesOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PortGroupProperties) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type PortGroupPropertiesArrayOutput struct{ *pulumi.OutputState }

func (PortGroupPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortGroupProperties)(nil)).Elem()
}

func (o PortGroupPropertiesArrayOutput) ToPortGroupPropertiesArrayOutput() PortGroupPropertiesArrayOutput {
	return o
}

func (o PortGroupPropertiesArrayOutput) ToPortGroupPropertiesArrayOutputWithContext(ctx context.Context) PortGroupPropertiesArrayOutput {
	return o
}

func (o PortGroupPropertiesArrayOutput) Index(i pulumi.IntInput) PortGroupPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortGroupProperties {
		return vs[0].([]PortGroupProperties)[vs[1].(int)]
	}).(PortGroupPropertiesOutput)
}

// Port Group properties.
type PortGroupPropertiesResponse struct {
	// The name of the port group.
	Name *string `pulumi:"name"`
	// List of the ports that need to be matched.
	Ports []string `pulumi:"ports"`
}

// Port Group properties.
type PortGroupPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PortGroupPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortGroupPropertiesResponse)(nil)).Elem()
}

func (o PortGroupPropertiesResponseOutput) ToPortGroupPropertiesResponseOutput() PortGroupPropertiesResponseOutput {
	return o
}

func (o PortGroupPropertiesResponseOutput) ToPortGroupPropertiesResponseOutputWithContext(ctx context.Context) PortGroupPropertiesResponseOutput {
	return o
}

// The name of the port group.
func (o PortGroupPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortGroupPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of the ports that need to be matched.
func (o PortGroupPropertiesResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PortGroupPropertiesResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type PortGroupPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (PortGroupPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortGroupPropertiesResponse)(nil)).Elem()
}

func (o PortGroupPropertiesResponseArrayOutput) ToPortGroupPropertiesResponseArrayOutput() PortGroupPropertiesResponseArrayOutput {
	return o
}

func (o PortGroupPropertiesResponseArrayOutput) ToPortGroupPropertiesResponseArrayOutputWithContext(ctx context.Context) PortGroupPropertiesResponseArrayOutput {
	return o
}

func (o PortGroupPropertiesResponseArrayOutput) Index(i pulumi.IntInput) PortGroupPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortGroupPropertiesResponse {
		return vs[0].([]PortGroupPropertiesResponse)[vs[1].(int)]
	}).(PortGroupPropertiesResponseOutput)
}

// Route Policy Statement properties.
type RoutePolicyStatementProperties struct {
	// Route policy action properties.
	Action StatementActionProperties `pulumi:"action"`
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Route policy condition properties.
	Condition StatementConditionProperties `pulumi:"condition"`
	// Sequence to insert to/delete from existing route.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
}

// Defaults sets the appropriate defaults for RoutePolicyStatementProperties
func (val *RoutePolicyStatementProperties) Defaults() *RoutePolicyStatementProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Condition = *tmp.Condition.Defaults()

	return &tmp
}

// RoutePolicyStatementPropertiesInput is an input type that accepts RoutePolicyStatementPropertiesArgs and RoutePolicyStatementPropertiesOutput values.
// You can construct a concrete instance of `RoutePolicyStatementPropertiesInput` via:
//
//	RoutePolicyStatementPropertiesArgs{...}
type RoutePolicyStatementPropertiesInput interface {
	pulumi.Input

	ToRoutePolicyStatementPropertiesOutput() RoutePolicyStatementPropertiesOutput
	ToRoutePolicyStatementPropertiesOutputWithContext(context.Context) RoutePolicyStatementPropertiesOutput
}

// Route Policy Statement properties.
type RoutePolicyStatementPropertiesArgs struct {
	// Route policy action properties.
	Action StatementActionPropertiesInput `pulumi:"action"`
	// Switch configuration description.
	Annotation pulumi.StringPtrInput `pulumi:"annotation"`
	// Route policy condition properties.
	Condition StatementConditionPropertiesInput `pulumi:"condition"`
	// Sequence to insert to/delete from existing route.
	SequenceNumber pulumi.Float64Input `pulumi:"sequenceNumber"`
}

// Defaults sets the appropriate defaults for RoutePolicyStatementPropertiesArgs
func (val *RoutePolicyStatementPropertiesArgs) Defaults() *RoutePolicyStatementPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (RoutePolicyStatementPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutePolicyStatementProperties)(nil)).Elem()
}

func (i RoutePolicyStatementPropertiesArgs) ToRoutePolicyStatementPropertiesOutput() RoutePolicyStatementPropertiesOutput {
	return i.ToRoutePolicyStatementPropertiesOutputWithContext(context.Background())
}

func (i RoutePolicyStatementPropertiesArgs) ToRoutePolicyStatementPropertiesOutputWithContext(ctx context.Context) RoutePolicyStatementPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePolicyStatementPropertiesOutput)
}

// RoutePolicyStatementPropertiesArrayInput is an input type that accepts RoutePolicyStatementPropertiesArray and RoutePolicyStatementPropertiesArrayOutput values.
// You can construct a concrete instance of `RoutePolicyStatementPropertiesArrayInput` via:
//
//	RoutePolicyStatementPropertiesArray{ RoutePolicyStatementPropertiesArgs{...} }
type RoutePolicyStatementPropertiesArrayInput interface {
	pulumi.Input

	ToRoutePolicyStatementPropertiesArrayOutput() RoutePolicyStatementPropertiesArrayOutput
	ToRoutePolicyStatementPropertiesArrayOutputWithContext(context.Context) RoutePolicyStatementPropertiesArrayOutput
}

type RoutePolicyStatementPropertiesArray []RoutePolicyStatementPropertiesInput

func (RoutePolicyStatementPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutePolicyStatementProperties)(nil)).Elem()
}

func (i RoutePolicyStatementPropertiesArray) ToRoutePolicyStatementPropertiesArrayOutput() RoutePolicyStatementPropertiesArrayOutput {
	return i.ToRoutePolicyStatementPropertiesArrayOutputWithContext(context.Background())
}

func (i RoutePolicyStatementPropertiesArray) ToRoutePolicyStatementPropertiesArrayOutputWithContext(ctx context.Context) RoutePolicyStatementPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePolicyStatementPropertiesArrayOutput)
}

// Route Policy Statement properties.
type RoutePolicyStatementPropertiesOutput struct{ *pulumi.OutputState }

func (RoutePolicyStatementPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutePolicyStatementProperties)(nil)).Elem()
}

func (o RoutePolicyStatementPropertiesOutput) ToRoutePolicyStatementPropertiesOutput() RoutePolicyStatementPropertiesOutput {
	return o
}

func (o RoutePolicyStatementPropertiesOutput) ToRoutePolicyStatementPropertiesOutputWithContext(ctx context.Context) RoutePolicyStatementPropertiesOutput {
	return o
}

// Route policy action properties.
func (o RoutePolicyStatementPropertiesOutput) Action() StatementActionPropertiesOutput {
	return o.ApplyT(func(v RoutePolicyStatementProperties) StatementActionProperties { return v.Action }).(StatementActionPropertiesOutput)
}

// Switch configuration description.
func (o RoutePolicyStatementPropertiesOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutePolicyStatementProperties) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Route policy condition properties.
func (o RoutePolicyStatementPropertiesOutput) Condition() StatementConditionPropertiesOutput {
	return o.ApplyT(func(v RoutePolicyStatementProperties) StatementConditionProperties { return v.Condition }).(StatementConditionPropertiesOutput)
}

// Sequence to insert to/delete from existing route.
func (o RoutePolicyStatementPropertiesOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v RoutePolicyStatementProperties) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

type RoutePolicyStatementPropertiesArrayOutput struct{ *pulumi.OutputState }

func (RoutePolicyStatementPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutePolicyStatementProperties)(nil)).Elem()
}

func (o RoutePolicyStatementPropertiesArrayOutput) ToRoutePolicyStatementPropertiesArrayOutput() RoutePolicyStatementPropertiesArrayOutput {
	return o
}

func (o RoutePolicyStatementPropertiesArrayOutput) ToRoutePolicyStatementPropertiesArrayOutputWithContext(ctx context.Context) RoutePolicyStatementPropertiesArrayOutput {
	return o
}

func (o RoutePolicyStatementPropertiesArrayOutput) Index(i pulumi.IntInput) RoutePolicyStatementPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutePolicyStatementProperties {
		return vs[0].([]RoutePolicyStatementProperties)[vs[1].(int)]
	}).(RoutePolicyStatementPropertiesOutput)
}

// Route Policy Statement properties.
type RoutePolicyStatementPropertiesResponse struct {
	// Route policy action properties.
	Action StatementActionPropertiesResponse `pulumi:"action"`
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Route policy condition properties.
	Condition StatementConditionPropertiesResponse `pulumi:"condition"`
	// Sequence to insert to/delete from existing route.
	SequenceNumber float64 `pulumi:"sequenceNumber"`
}

// Defaults sets the appropriate defaults for RoutePolicyStatementPropertiesResponse
func (val *RoutePolicyStatementPropertiesResponse) Defaults() *RoutePolicyStatementPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Condition = *tmp.Condition.Defaults()

	return &tmp
}

// Route Policy Statement properties.
type RoutePolicyStatementPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RoutePolicyStatementPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutePolicyStatementPropertiesResponse)(nil)).Elem()
}

func (o RoutePolicyStatementPropertiesResponseOutput) ToRoutePolicyStatementPropertiesResponseOutput() RoutePolicyStatementPropertiesResponseOutput {
	return o
}

func (o RoutePolicyStatementPropertiesResponseOutput) ToRoutePolicyStatementPropertiesResponseOutputWithContext(ctx context.Context) RoutePolicyStatementPropertiesResponseOutput {
	return o
}

// Route policy action properties.
func (o RoutePolicyStatementPropertiesResponseOutput) Action() StatementActionPropertiesResponseOutput {
	return o.ApplyT(func(v RoutePolicyStatementPropertiesResponse) StatementActionPropertiesResponse { return v.Action }).(StatementActionPropertiesResponseOutput)
}

// Switch configuration description.
func (o RoutePolicyStatementPropertiesResponseOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutePolicyStatementPropertiesResponse) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Route policy condition properties.
func (o RoutePolicyStatementPropertiesResponseOutput) Condition() StatementConditionPropertiesResponseOutput {
	return o.ApplyT(func(v RoutePolicyStatementPropertiesResponse) StatementConditionPropertiesResponse {
		return v.Condition
	}).(StatementConditionPropertiesResponseOutput)
}

// Sequence to insert to/delete from existing route.
func (o RoutePolicyStatementPropertiesResponseOutput) SequenceNumber() pulumi.Float64Output {
	return o.ApplyT(func(v RoutePolicyStatementPropertiesResponse) float64 { return v.SequenceNumber }).(pulumi.Float64Output)
}

type RoutePolicyStatementPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (RoutePolicyStatementPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutePolicyStatementPropertiesResponse)(nil)).Elem()
}

func (o RoutePolicyStatementPropertiesResponseArrayOutput) ToRoutePolicyStatementPropertiesResponseArrayOutput() RoutePolicyStatementPropertiesResponseArrayOutput {
	return o
}

func (o RoutePolicyStatementPropertiesResponseArrayOutput) ToRoutePolicyStatementPropertiesResponseArrayOutputWithContext(ctx context.Context) RoutePolicyStatementPropertiesResponseArrayOutput {
	return o
}

func (o RoutePolicyStatementPropertiesResponseArrayOutput) Index(i pulumi.IntInput) RoutePolicyStatementPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutePolicyStatementPropertiesResponse {
		return vs[0].([]RoutePolicyStatementPropertiesResponse)[vs[1].(int)]
	}).(RoutePolicyStatementPropertiesResponseOutput)
}

// Route Target Configuration.
type RouteTargetInformation struct {
	// Route Targets to be applied for outgoing routes into CE.
	ExportIpv4RouteTargets []string `pulumi:"exportIpv4RouteTargets"`
	// Route Targets to be applied for outgoing routes from CE.
	ExportIpv6RouteTargets []string `pulumi:"exportIpv6RouteTargets"`
	// Route Targets to be applied for incoming routes into CE.
	ImportIpv4RouteTargets []string `pulumi:"importIpv4RouteTargets"`
	// Route Targets to be applied for incoming routes from CE.
	ImportIpv6RouteTargets []string `pulumi:"importIpv6RouteTargets"`
}

// RouteTargetInformationInput is an input type that accepts RouteTargetInformationArgs and RouteTargetInformationOutput values.
// You can construct a concrete instance of `RouteTargetInformationInput` via:
//
//	RouteTargetInformationArgs{...}
type RouteTargetInformationInput interface {
	pulumi.Input

	ToRouteTargetInformationOutput() RouteTargetInformationOutput
	ToRouteTargetInformationOutputWithContext(context.Context) RouteTargetInformationOutput
}

// Route Target Configuration.
type RouteTargetInformationArgs struct {
	// Route Targets to be applied for outgoing routes into CE.
	ExportIpv4RouteTargets pulumi.StringArrayInput `pulumi:"exportIpv4RouteTargets"`
	// Route Targets to be applied for outgoing routes from CE.
	ExportIpv6RouteTargets pulumi.StringArrayInput `pulumi:"exportIpv6RouteTargets"`
	// Route Targets to be applied for incoming routes into CE.
	ImportIpv4RouteTargets pulumi.StringArrayInput `pulumi:"importIpv4RouteTargets"`
	// Route Targets to be applied for incoming routes from CE.
	ImportIpv6RouteTargets pulumi.StringArrayInput `pulumi:"importIpv6RouteTargets"`
}

func (RouteTargetInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTargetInformation)(nil)).Elem()
}

func (i RouteTargetInformationArgs) ToRouteTargetInformationOutput() RouteTargetInformationOutput {
	return i.ToRouteTargetInformationOutputWithContext(context.Background())
}

func (i RouteTargetInformationArgs) ToRouteTargetInformationOutputWithContext(ctx context.Context) RouteTargetInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTargetInformationOutput)
}

func (i RouteTargetInformationArgs) ToRouteTargetInformationPtrOutput() RouteTargetInformationPtrOutput {
	return i.ToRouteTargetInformationPtrOutputWithContext(context.Background())
}

func (i RouteTargetInformationArgs) ToRouteTargetInformationPtrOutputWithContext(ctx context.Context) RouteTargetInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTargetInformationOutput).ToRouteTargetInformationPtrOutputWithContext(ctx)
}

// RouteTargetInformationPtrInput is an input type that accepts RouteTargetInformationArgs, RouteTargetInformationPtr and RouteTargetInformationPtrOutput values.
// You can construct a concrete instance of `RouteTargetInformationPtrInput` via:
//
//	        RouteTargetInformationArgs{...}
//
//	or:
//
//	        nil
type RouteTargetInformationPtrInput interface {
	pulumi.Input

	ToRouteTargetInformationPtrOutput() RouteTargetInformationPtrOutput
	ToRouteTargetInformationPtrOutputWithContext(context.Context) RouteTargetInformationPtrOutput
}

type routeTargetInformationPtrType RouteTargetInformationArgs

func RouteTargetInformationPtr(v *RouteTargetInformationArgs) RouteTargetInformationPtrInput {
	return (*routeTargetInformationPtrType)(v)
}

func (*routeTargetInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTargetInformation)(nil)).Elem()
}

func (i *routeTargetInformationPtrType) ToRouteTargetInformationPtrOutput() RouteTargetInformationPtrOutput {
	return i.ToRouteTargetInformationPtrOutputWithContext(context.Background())
}

func (i *routeTargetInformationPtrType) ToRouteTargetInformationPtrOutputWithContext(ctx context.Context) RouteTargetInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTargetInformationPtrOutput)
}

// Route Target Configuration.
type RouteTargetInformationOutput struct{ *pulumi.OutputState }

func (RouteTargetInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTargetInformation)(nil)).Elem()
}

func (o RouteTargetInformationOutput) ToRouteTargetInformationOutput() RouteTargetInformationOutput {
	return o
}

func (o RouteTargetInformationOutput) ToRouteTargetInformationOutputWithContext(ctx context.Context) RouteTargetInformationOutput {
	return o
}

func (o RouteTargetInformationOutput) ToRouteTargetInformationPtrOutput() RouteTargetInformationPtrOutput {
	return o.ToRouteTargetInformationPtrOutputWithContext(context.Background())
}

func (o RouteTargetInformationOutput) ToRouteTargetInformationPtrOutputWithContext(ctx context.Context) RouteTargetInformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RouteTargetInformation) *RouteTargetInformation {
		return &v
	}).(RouteTargetInformationPtrOutput)
}

// Route Targets to be applied for outgoing routes into CE.
func (o RouteTargetInformationOutput) ExportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformation) []string { return v.ExportIpv4RouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for outgoing routes from CE.
func (o RouteTargetInformationOutput) ExportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformation) []string { return v.ExportIpv6RouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE.
func (o RouteTargetInformationOutput) ImportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformation) []string { return v.ImportIpv4RouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes from CE.
func (o RouteTargetInformationOutput) ImportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformation) []string { return v.ImportIpv6RouteTargets }).(pulumi.StringArrayOutput)
}

type RouteTargetInformationPtrOutput struct{ *pulumi.OutputState }

func (RouteTargetInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTargetInformation)(nil)).Elem()
}

func (o RouteTargetInformationPtrOutput) ToRouteTargetInformationPtrOutput() RouteTargetInformationPtrOutput {
	return o
}

func (o RouteTargetInformationPtrOutput) ToRouteTargetInformationPtrOutputWithContext(ctx context.Context) RouteTargetInformationPtrOutput {
	return o
}

func (o RouteTargetInformationPtrOutput) Elem() RouteTargetInformationOutput {
	return o.ApplyT(func(v *RouteTargetInformation) RouteTargetInformation {
		if v != nil {
			return *v
		}
		var ret RouteTargetInformation
		return ret
	}).(RouteTargetInformationOutput)
}

// Route Targets to be applied for outgoing routes into CE.
func (o RouteTargetInformationPtrOutput) ExportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformation) []string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for outgoing routes from CE.
func (o RouteTargetInformationPtrOutput) ExportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformation) []string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE.
func (o RouteTargetInformationPtrOutput) ImportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformation) []string {
		if v == nil {
			return nil
		}
		return v.ImportIpv4RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes from CE.
func (o RouteTargetInformationPtrOutput) ImportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformation) []string {
		if v == nil {
			return nil
		}
		return v.ImportIpv6RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Target Configuration.
type RouteTargetInformationResponse struct {
	// Route Targets to be applied for outgoing routes into CE.
	ExportIpv4RouteTargets []string `pulumi:"exportIpv4RouteTargets"`
	// Route Targets to be applied for outgoing routes from CE.
	ExportIpv6RouteTargets []string `pulumi:"exportIpv6RouteTargets"`
	// Route Targets to be applied for incoming routes into CE.
	ImportIpv4RouteTargets []string `pulumi:"importIpv4RouteTargets"`
	// Route Targets to be applied for incoming routes from CE.
	ImportIpv6RouteTargets []string `pulumi:"importIpv6RouteTargets"`
}

// Route Target Configuration.
type RouteTargetInformationResponseOutput struct{ *pulumi.OutputState }

func (RouteTargetInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTargetInformationResponse)(nil)).Elem()
}

func (o RouteTargetInformationResponseOutput) ToRouteTargetInformationResponseOutput() RouteTargetInformationResponseOutput {
	return o
}

func (o RouteTargetInformationResponseOutput) ToRouteTargetInformationResponseOutputWithContext(ctx context.Context) RouteTargetInformationResponseOutput {
	return o
}

// Route Targets to be applied for outgoing routes into CE.
func (o RouteTargetInformationResponseOutput) ExportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformationResponse) []string { return v.ExportIpv4RouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for outgoing routes from CE.
func (o RouteTargetInformationResponseOutput) ExportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformationResponse) []string { return v.ExportIpv6RouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE.
func (o RouteTargetInformationResponseOutput) ImportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformationResponse) []string { return v.ImportIpv4RouteTargets }).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes from CE.
func (o RouteTargetInformationResponseOutput) ImportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTargetInformationResponse) []string { return v.ImportIpv6RouteTargets }).(pulumi.StringArrayOutput)
}

type RouteTargetInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (RouteTargetInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTargetInformationResponse)(nil)).Elem()
}

func (o RouteTargetInformationResponsePtrOutput) ToRouteTargetInformationResponsePtrOutput() RouteTargetInformationResponsePtrOutput {
	return o
}

func (o RouteTargetInformationResponsePtrOutput) ToRouteTargetInformationResponsePtrOutputWithContext(ctx context.Context) RouteTargetInformationResponsePtrOutput {
	return o
}

func (o RouteTargetInformationResponsePtrOutput) Elem() RouteTargetInformationResponseOutput {
	return o.ApplyT(func(v *RouteTargetInformationResponse) RouteTargetInformationResponse {
		if v != nil {
			return *v
		}
		var ret RouteTargetInformationResponse
		return ret
	}).(RouteTargetInformationResponseOutput)
}

// Route Targets to be applied for outgoing routes into CE.
func (o RouteTargetInformationResponsePtrOutput) ExportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExportIpv4RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for outgoing routes from CE.
func (o RouteTargetInformationResponsePtrOutput) ExportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExportIpv6RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes into CE.
func (o RouteTargetInformationResponsePtrOutput) ImportIpv4RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImportIpv4RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Route Targets to be applied for incoming routes from CE.
func (o RouteTargetInformationResponsePtrOutput) ImportIpv6RouteTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTargetInformationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImportIpv6RouteTargets
	}).(pulumi.StringArrayOutput)
}

// Rules for the InternetGateways
type RuleProperties struct {
	// Specify action.
	Action string `pulumi:"action"`
	// List of Addresses to be allowed or denied.
	AddressList []string `pulumi:"addressList"`
}

// RulePropertiesInput is an input type that accepts RulePropertiesArgs and RulePropertiesOutput values.
// You can construct a concrete instance of `RulePropertiesInput` via:
//
//	RulePropertiesArgs{...}
type RulePropertiesInput interface {
	pulumi.Input

	ToRulePropertiesOutput() RulePropertiesOutput
	ToRulePropertiesOutputWithContext(context.Context) RulePropertiesOutput
}

// Rules for the InternetGateways
type RulePropertiesArgs struct {
	// Specify action.
	Action pulumi.StringInput `pulumi:"action"`
	// List of Addresses to be allowed or denied.
	AddressList pulumi.StringArrayInput `pulumi:"addressList"`
}

func (RulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleProperties)(nil)).Elem()
}

func (i RulePropertiesArgs) ToRulePropertiesOutput() RulePropertiesOutput {
	return i.ToRulePropertiesOutputWithContext(context.Background())
}

func (i RulePropertiesArgs) ToRulePropertiesOutputWithContext(ctx context.Context) RulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePropertiesOutput)
}

// Rules for the InternetGateways
type RulePropertiesOutput struct{ *pulumi.OutputState }

func (RulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleProperties)(nil)).Elem()
}

func (o RulePropertiesOutput) ToRulePropertiesOutput() RulePropertiesOutput {
	return o
}

func (o RulePropertiesOutput) ToRulePropertiesOutputWithContext(ctx context.Context) RulePropertiesOutput {
	return o
}

// Specify action.
func (o RulePropertiesOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RuleProperties) string { return v.Action }).(pulumi.StringOutput)
}

// List of Addresses to be allowed or denied.
func (o RulePropertiesOutput) AddressList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleProperties) []string { return v.AddressList }).(pulumi.StringArrayOutput)
}

// Rules for the InternetGateways
type RulePropertiesResponse struct {
	// Specify action.
	Action string `pulumi:"action"`
	// List of Addresses to be allowed or denied.
	AddressList []string `pulumi:"addressList"`
}

// Rules for the InternetGateways
type RulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePropertiesResponse)(nil)).Elem()
}

func (o RulePropertiesResponseOutput) ToRulePropertiesResponseOutput() RulePropertiesResponseOutput {
	return o
}

func (o RulePropertiesResponseOutput) ToRulePropertiesResponseOutputWithContext(ctx context.Context) RulePropertiesResponseOutput {
	return o
}

// Specify action.
func (o RulePropertiesResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RulePropertiesResponse) string { return v.Action }).(pulumi.StringOutput)
}

// List of Addresses to be allowed or denied.
func (o RulePropertiesResponseOutput) AddressList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulePropertiesResponse) []string { return v.AddressList }).(pulumi.StringArrayOutput)
}

// Route policy action properties.
type StatementActionProperties struct {
	// Action type. Example: Permit | Deny | Continue.
	ActionType string `pulumi:"actionType"`
	// IP Community Properties.
	IpCommunityProperties *ActionIpCommunityProperties `pulumi:"ipCommunityProperties"`
	// IP Extended Community Properties.
	IpExtendedCommunityProperties *ActionIpExtendedCommunityProperties `pulumi:"ipExtendedCommunityProperties"`
	// Local Preference of the route policy.
	LocalPreference *float64 `pulumi:"localPreference"`
}

// StatementActionPropertiesInput is an input type that accepts StatementActionPropertiesArgs and StatementActionPropertiesOutput values.
// You can construct a concrete instance of `StatementActionPropertiesInput` via:
//
//	StatementActionPropertiesArgs{...}
type StatementActionPropertiesInput interface {
	pulumi.Input

	ToStatementActionPropertiesOutput() StatementActionPropertiesOutput
	ToStatementActionPropertiesOutputWithContext(context.Context) StatementActionPropertiesOutput
}

// Route policy action properties.
type StatementActionPropertiesArgs struct {
	// Action type. Example: Permit | Deny | Continue.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// IP Community Properties.
	IpCommunityProperties ActionIpCommunityPropertiesPtrInput `pulumi:"ipCommunityProperties"`
	// IP Extended Community Properties.
	IpExtendedCommunityProperties ActionIpExtendedCommunityPropertiesPtrInput `pulumi:"ipExtendedCommunityProperties"`
	// Local Preference of the route policy.
	LocalPreference pulumi.Float64PtrInput `pulumi:"localPreference"`
}

func (StatementActionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatementActionProperties)(nil)).Elem()
}

func (i StatementActionPropertiesArgs) ToStatementActionPropertiesOutput() StatementActionPropertiesOutput {
	return i.ToStatementActionPropertiesOutputWithContext(context.Background())
}

func (i StatementActionPropertiesArgs) ToStatementActionPropertiesOutputWithContext(ctx context.Context) StatementActionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatementActionPropertiesOutput)
}

// Route policy action properties.
type StatementActionPropertiesOutput struct{ *pulumi.OutputState }

func (StatementActionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatementActionProperties)(nil)).Elem()
}

func (o StatementActionPropertiesOutput) ToStatementActionPropertiesOutput() StatementActionPropertiesOutput {
	return o
}

func (o StatementActionPropertiesOutput) ToStatementActionPropertiesOutputWithContext(ctx context.Context) StatementActionPropertiesOutput {
	return o
}

// Action type. Example: Permit | Deny | Continue.
func (o StatementActionPropertiesOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v StatementActionProperties) string { return v.ActionType }).(pulumi.StringOutput)
}

// IP Community Properties.
func (o StatementActionPropertiesOutput) IpCommunityProperties() ActionIpCommunityPropertiesPtrOutput {
	return o.ApplyT(func(v StatementActionProperties) *ActionIpCommunityProperties { return v.IpCommunityProperties }).(ActionIpCommunityPropertiesPtrOutput)
}

// IP Extended Community Properties.
func (o StatementActionPropertiesOutput) IpExtendedCommunityProperties() ActionIpExtendedCommunityPropertiesPtrOutput {
	return o.ApplyT(func(v StatementActionProperties) *ActionIpExtendedCommunityProperties {
		return v.IpExtendedCommunityProperties
	}).(ActionIpExtendedCommunityPropertiesPtrOutput)
}

// Local Preference of the route policy.
func (o StatementActionPropertiesOutput) LocalPreference() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StatementActionProperties) *float64 { return v.LocalPreference }).(pulumi.Float64PtrOutput)
}

// Route policy action properties.
type StatementActionPropertiesResponse struct {
	// Action type. Example: Permit | Deny | Continue.
	ActionType string `pulumi:"actionType"`
	// IP Community Properties.
	IpCommunityProperties *ActionIpCommunityPropertiesResponse `pulumi:"ipCommunityProperties"`
	// IP Extended Community Properties.
	IpExtendedCommunityProperties *ActionIpExtendedCommunityPropertiesResponse `pulumi:"ipExtendedCommunityProperties"`
	// Local Preference of the route policy.
	LocalPreference *float64 `pulumi:"localPreference"`
}

// Route policy action properties.
type StatementActionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StatementActionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatementActionPropertiesResponse)(nil)).Elem()
}

func (o StatementActionPropertiesResponseOutput) ToStatementActionPropertiesResponseOutput() StatementActionPropertiesResponseOutput {
	return o
}

func (o StatementActionPropertiesResponseOutput) ToStatementActionPropertiesResponseOutputWithContext(ctx context.Context) StatementActionPropertiesResponseOutput {
	return o
}

// Action type. Example: Permit | Deny | Continue.
func (o StatementActionPropertiesResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v StatementActionPropertiesResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// IP Community Properties.
func (o StatementActionPropertiesResponseOutput) IpCommunityProperties() ActionIpCommunityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v StatementActionPropertiesResponse) *ActionIpCommunityPropertiesResponse {
		return v.IpCommunityProperties
	}).(ActionIpCommunityPropertiesResponsePtrOutput)
}

// IP Extended Community Properties.
func (o StatementActionPropertiesResponseOutput) IpExtendedCommunityProperties() ActionIpExtendedCommunityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v StatementActionPropertiesResponse) *ActionIpExtendedCommunityPropertiesResponse {
		return v.IpExtendedCommunityProperties
	}).(ActionIpExtendedCommunityPropertiesResponsePtrOutput)
}

// Local Preference of the route policy.
func (o StatementActionPropertiesResponseOutput) LocalPreference() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StatementActionPropertiesResponse) *float64 { return v.LocalPreference }).(pulumi.Float64PtrOutput)
}

// Route policy statement condition properties.
type StatementConditionProperties struct {
	// List of IP Community resource IDs.
	IpCommunityIds []string `pulumi:"ipCommunityIds"`
	// List of IP Extended Community resource IDs.
	IpExtendedCommunityIds []string `pulumi:"ipExtendedCommunityIds"`
	// Arm Resource Id of IpPrefix.
	IpPrefixId *string `pulumi:"ipPrefixId"`
	// Type of the condition used.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for StatementConditionProperties
func (val *StatementConditionProperties) Defaults() *StatementConditionProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "Or"
		tmp.Type = &type_
	}
	return &tmp
}

// StatementConditionPropertiesInput is an input type that accepts StatementConditionPropertiesArgs and StatementConditionPropertiesOutput values.
// You can construct a concrete instance of `StatementConditionPropertiesInput` via:
//
//	StatementConditionPropertiesArgs{...}
type StatementConditionPropertiesInput interface {
	pulumi.Input

	ToStatementConditionPropertiesOutput() StatementConditionPropertiesOutput
	ToStatementConditionPropertiesOutputWithContext(context.Context) StatementConditionPropertiesOutput
}

// Route policy statement condition properties.
type StatementConditionPropertiesArgs struct {
	// List of IP Community resource IDs.
	IpCommunityIds pulumi.StringArrayInput `pulumi:"ipCommunityIds"`
	// List of IP Extended Community resource IDs.
	IpExtendedCommunityIds pulumi.StringArrayInput `pulumi:"ipExtendedCommunityIds"`
	// Arm Resource Id of IpPrefix.
	IpPrefixId pulumi.StringPtrInput `pulumi:"ipPrefixId"`
	// Type of the condition used.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for StatementConditionPropertiesArgs
func (val *StatementConditionPropertiesArgs) Defaults() *StatementConditionPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("Or")
	}
	return &tmp
}
func (StatementConditionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatementConditionProperties)(nil)).Elem()
}

func (i StatementConditionPropertiesArgs) ToStatementConditionPropertiesOutput() StatementConditionPropertiesOutput {
	return i.ToStatementConditionPropertiesOutputWithContext(context.Background())
}

func (i StatementConditionPropertiesArgs) ToStatementConditionPropertiesOutputWithContext(ctx context.Context) StatementConditionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatementConditionPropertiesOutput)
}

// Route policy statement condition properties.
type StatementConditionPropertiesOutput struct{ *pulumi.OutputState }

func (StatementConditionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatementConditionProperties)(nil)).Elem()
}

func (o StatementConditionPropertiesOutput) ToStatementConditionPropertiesOutput() StatementConditionPropertiesOutput {
	return o
}

func (o StatementConditionPropertiesOutput) ToStatementConditionPropertiesOutputWithContext(ctx context.Context) StatementConditionPropertiesOutput {
	return o
}

// List of IP Community resource IDs.
func (o StatementConditionPropertiesOutput) IpCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StatementConditionProperties) []string { return v.IpCommunityIds }).(pulumi.StringArrayOutput)
}

// List of IP Extended Community resource IDs.
func (o StatementConditionPropertiesOutput) IpExtendedCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StatementConditionProperties) []string { return v.IpExtendedCommunityIds }).(pulumi.StringArrayOutput)
}

// Arm Resource Id of IpPrefix.
func (o StatementConditionPropertiesOutput) IpPrefixId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatementConditionProperties) *string { return v.IpPrefixId }).(pulumi.StringPtrOutput)
}

// Type of the condition used.
func (o StatementConditionPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatementConditionProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Route policy statement condition properties.
type StatementConditionPropertiesResponse struct {
	// List of IP Community resource IDs.
	IpCommunityIds []string `pulumi:"ipCommunityIds"`
	// List of IP Extended Community resource IDs.
	IpExtendedCommunityIds []string `pulumi:"ipExtendedCommunityIds"`
	// Arm Resource Id of IpPrefix.
	IpPrefixId *string `pulumi:"ipPrefixId"`
	// Type of the condition used.
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for StatementConditionPropertiesResponse
func (val *StatementConditionPropertiesResponse) Defaults() *StatementConditionPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "Or"
		tmp.Type = &type_
	}
	return &tmp
}

// Route policy statement condition properties.
type StatementConditionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StatementConditionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatementConditionPropertiesResponse)(nil)).Elem()
}

func (o StatementConditionPropertiesResponseOutput) ToStatementConditionPropertiesResponseOutput() StatementConditionPropertiesResponseOutput {
	return o
}

func (o StatementConditionPropertiesResponseOutput) ToStatementConditionPropertiesResponseOutputWithContext(ctx context.Context) StatementConditionPropertiesResponseOutput {
	return o
}

// List of IP Community resource IDs.
func (o StatementConditionPropertiesResponseOutput) IpCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StatementConditionPropertiesResponse) []string { return v.IpCommunityIds }).(pulumi.StringArrayOutput)
}

// List of IP Extended Community resource IDs.
func (o StatementConditionPropertiesResponseOutput) IpExtendedCommunityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StatementConditionPropertiesResponse) []string { return v.IpExtendedCommunityIds }).(pulumi.StringArrayOutput)
}

// Arm Resource Id of IpPrefix.
func (o StatementConditionPropertiesResponseOutput) IpPrefixId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatementConditionPropertiesResponse) *string { return v.IpPrefixId }).(pulumi.StringPtrOutput)
}

// Type of the condition used.
func (o StatementConditionPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatementConditionPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Route Properties.
type StaticRouteProperties struct {
	// List of next hop addresses.
	NextHop []string `pulumi:"nextHop"`
	// Prefix of the route.
	Prefix string `pulumi:"prefix"`
}

// StaticRoutePropertiesInput is an input type that accepts StaticRoutePropertiesArgs and StaticRoutePropertiesOutput values.
// You can construct a concrete instance of `StaticRoutePropertiesInput` via:
//
//	StaticRoutePropertiesArgs{...}
type StaticRoutePropertiesInput interface {
	pulumi.Input

	ToStaticRoutePropertiesOutput() StaticRoutePropertiesOutput
	ToStaticRoutePropertiesOutputWithContext(context.Context) StaticRoutePropertiesOutput
}

// Route Properties.
type StaticRoutePropertiesArgs struct {
	// List of next hop addresses.
	NextHop pulumi.StringArrayInput `pulumi:"nextHop"`
	// Prefix of the route.
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (StaticRoutePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteProperties)(nil)).Elem()
}

func (i StaticRoutePropertiesArgs) ToStaticRoutePropertiesOutput() StaticRoutePropertiesOutput {
	return i.ToStaticRoutePropertiesOutputWithContext(context.Background())
}

func (i StaticRoutePropertiesArgs) ToStaticRoutePropertiesOutputWithContext(ctx context.Context) StaticRoutePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRoutePropertiesOutput)
}

// StaticRoutePropertiesArrayInput is an input type that accepts StaticRoutePropertiesArray and StaticRoutePropertiesArrayOutput values.
// You can construct a concrete instance of `StaticRoutePropertiesArrayInput` via:
//
//	StaticRoutePropertiesArray{ StaticRoutePropertiesArgs{...} }
type StaticRoutePropertiesArrayInput interface {
	pulumi.Input

	ToStaticRoutePropertiesArrayOutput() StaticRoutePropertiesArrayOutput
	ToStaticRoutePropertiesArrayOutputWithContext(context.Context) StaticRoutePropertiesArrayOutput
}

type StaticRoutePropertiesArray []StaticRoutePropertiesInput

func (StaticRoutePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteProperties)(nil)).Elem()
}

func (i StaticRoutePropertiesArray) ToStaticRoutePropertiesArrayOutput() StaticRoutePropertiesArrayOutput {
	return i.ToStaticRoutePropertiesArrayOutputWithContext(context.Background())
}

func (i StaticRoutePropertiesArray) ToStaticRoutePropertiesArrayOutputWithContext(ctx context.Context) StaticRoutePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRoutePropertiesArrayOutput)
}

// Route Properties.
type StaticRoutePropertiesOutput struct{ *pulumi.OutputState }

func (StaticRoutePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteProperties)(nil)).Elem()
}

func (o StaticRoutePropertiesOutput) ToStaticRoutePropertiesOutput() StaticRoutePropertiesOutput {
	return o
}

func (o StaticRoutePropertiesOutput) ToStaticRoutePropertiesOutputWithContext(ctx context.Context) StaticRoutePropertiesOutput {
	return o
}

// List of next hop addresses.
func (o StaticRoutePropertiesOutput) NextHop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StaticRouteProperties) []string { return v.NextHop }).(pulumi.StringArrayOutput)
}

// Prefix of the route.
func (o StaticRoutePropertiesOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v StaticRouteProperties) string { return v.Prefix }).(pulumi.StringOutput)
}

type StaticRoutePropertiesArrayOutput struct{ *pulumi.OutputState }

func (StaticRoutePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteProperties)(nil)).Elem()
}

func (o StaticRoutePropertiesArrayOutput) ToStaticRoutePropertiesArrayOutput() StaticRoutePropertiesArrayOutput {
	return o
}

func (o StaticRoutePropertiesArrayOutput) ToStaticRoutePropertiesArrayOutputWithContext(ctx context.Context) StaticRoutePropertiesArrayOutput {
	return o
}

func (o StaticRoutePropertiesArrayOutput) Index(i pulumi.IntInput) StaticRoutePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticRouteProperties {
		return vs[0].([]StaticRouteProperties)[vs[1].(int)]
	}).(StaticRoutePropertiesOutput)
}

// Route Properties.
type StaticRoutePropertiesResponse struct {
	// List of next hop addresses.
	NextHop []string `pulumi:"nextHop"`
	// Prefix of the route.
	Prefix string `pulumi:"prefix"`
}

// Route Properties.
type StaticRoutePropertiesResponseOutput struct{ *pulumi.OutputState }

func (StaticRoutePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRoutePropertiesResponse)(nil)).Elem()
}

func (o StaticRoutePropertiesResponseOutput) ToStaticRoutePropertiesResponseOutput() StaticRoutePropertiesResponseOutput {
	return o
}

func (o StaticRoutePropertiesResponseOutput) ToStaticRoutePropertiesResponseOutputWithContext(ctx context.Context) StaticRoutePropertiesResponseOutput {
	return o
}

// List of next hop addresses.
func (o StaticRoutePropertiesResponseOutput) NextHop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StaticRoutePropertiesResponse) []string { return v.NextHop }).(pulumi.StringArrayOutput)
}

// Prefix of the route.
func (o StaticRoutePropertiesResponseOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v StaticRoutePropertiesResponse) string { return v.Prefix }).(pulumi.StringOutput)
}

type StaticRoutePropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (StaticRoutePropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRoutePropertiesResponse)(nil)).Elem()
}

func (o StaticRoutePropertiesResponseArrayOutput) ToStaticRoutePropertiesResponseArrayOutput() StaticRoutePropertiesResponseArrayOutput {
	return o
}

func (o StaticRoutePropertiesResponseArrayOutput) ToStaticRoutePropertiesResponseArrayOutputWithContext(ctx context.Context) StaticRoutePropertiesResponseArrayOutput {
	return o
}

func (o StaticRoutePropertiesResponseArrayOutput) Index(i pulumi.IntInput) StaticRoutePropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticRoutePropertiesResponse {
		return vs[0].([]StaticRoutePropertiesResponse)[vs[1].(int)]
	}).(StaticRoutePropertiesResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Network and credentials configuration currently applied to terminal server.
type TerminalServerConfiguration struct {
	// Password for the terminal server connection.
	Password string `pulumi:"password"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// Serial Number of Terminal server.
	SerialNumber *string `pulumi:"serialNumber"`
	// Username for the terminal server connection.
	Username string `pulumi:"username"`
}

// TerminalServerConfigurationInput is an input type that accepts TerminalServerConfigurationArgs and TerminalServerConfigurationOutput values.
// You can construct a concrete instance of `TerminalServerConfigurationInput` via:
//
//	TerminalServerConfigurationArgs{...}
type TerminalServerConfigurationInput interface {
	pulumi.Input

	ToTerminalServerConfigurationOutput() TerminalServerConfigurationOutput
	ToTerminalServerConfigurationOutputWithContext(context.Context) TerminalServerConfigurationOutput
}

// Network and credentials configuration currently applied to terminal server.
type TerminalServerConfigurationArgs struct {
	// Password for the terminal server connection.
	Password pulumi.StringInput `pulumi:"password"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix pulumi.StringInput `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix pulumi.StringPtrInput `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix pulumi.StringInput `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix pulumi.StringPtrInput `pulumi:"secondaryIpv6Prefix"`
	// Serial Number of Terminal server.
	SerialNumber pulumi.StringPtrInput `pulumi:"serialNumber"`
	// Username for the terminal server connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (TerminalServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminalServerConfiguration)(nil)).Elem()
}

func (i TerminalServerConfigurationArgs) ToTerminalServerConfigurationOutput() TerminalServerConfigurationOutput {
	return i.ToTerminalServerConfigurationOutputWithContext(context.Background())
}

func (i TerminalServerConfigurationArgs) ToTerminalServerConfigurationOutputWithContext(ctx context.Context) TerminalServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerminalServerConfigurationOutput)
}

// Network and credentials configuration currently applied to terminal server.
type TerminalServerConfigurationOutput struct{ *pulumi.OutputState }

func (TerminalServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminalServerConfiguration)(nil)).Elem()
}

func (o TerminalServerConfigurationOutput) ToTerminalServerConfigurationOutput() TerminalServerConfigurationOutput {
	return o
}

func (o TerminalServerConfigurationOutput) ToTerminalServerConfigurationOutputWithContext(ctx context.Context) TerminalServerConfigurationOutput {
	return o
}

// Password for the terminal server connection.
func (o TerminalServerConfigurationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfiguration) string { return v.Password }).(pulumi.StringOutput)
}

// IPv4 Address Prefix.
func (o TerminalServerConfigurationOutput) PrimaryIpv4Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfiguration) string { return v.PrimaryIpv4Prefix }).(pulumi.StringOutput)
}

// IPv6 Address Prefix.
func (o TerminalServerConfigurationOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminalServerConfiguration) *string { return v.PrimaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o TerminalServerConfigurationOutput) SecondaryIpv4Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfiguration) string { return v.SecondaryIpv4Prefix }).(pulumi.StringOutput)
}

// Secondary IPv6 Address Prefix.
func (o TerminalServerConfigurationOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminalServerConfiguration) *string { return v.SecondaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Serial Number of Terminal server.
func (o TerminalServerConfigurationOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminalServerConfiguration) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// Username for the terminal server connection.
func (o TerminalServerConfigurationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfiguration) string { return v.Username }).(pulumi.StringOutput)
}

// Network and credentials configuration currently applied to terminal server.
type TerminalServerConfigurationResponse struct {
	// ARM Resource ID used for the NetworkDevice.
	NetworkDeviceId string `pulumi:"networkDeviceId"`
	// Password for the terminal server connection.
	Password string `pulumi:"password"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// Serial Number of Terminal server.
	SerialNumber *string `pulumi:"serialNumber"`
	// Username for the terminal server connection.
	Username string `pulumi:"username"`
}

// Network and credentials configuration currently applied to terminal server.
type TerminalServerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (TerminalServerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminalServerConfigurationResponse)(nil)).Elem()
}

func (o TerminalServerConfigurationResponseOutput) ToTerminalServerConfigurationResponseOutput() TerminalServerConfigurationResponseOutput {
	return o
}

func (o TerminalServerConfigurationResponseOutput) ToTerminalServerConfigurationResponseOutputWithContext(ctx context.Context) TerminalServerConfigurationResponseOutput {
	return o
}

// ARM Resource ID used for the NetworkDevice.
func (o TerminalServerConfigurationResponseOutput) NetworkDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) string { return v.NetworkDeviceId }).(pulumi.StringOutput)
}

// Password for the terminal server connection.
func (o TerminalServerConfigurationResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) string { return v.Password }).(pulumi.StringOutput)
}

// IPv4 Address Prefix.
func (o TerminalServerConfigurationResponseOutput) PrimaryIpv4Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) string { return v.PrimaryIpv4Prefix }).(pulumi.StringOutput)
}

// IPv6 Address Prefix.
func (o TerminalServerConfigurationResponseOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) *string { return v.PrimaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o TerminalServerConfigurationResponseOutput) SecondaryIpv4Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) string { return v.SecondaryIpv4Prefix }).(pulumi.StringOutput)
}

// Secondary IPv6 Address Prefix.
func (o TerminalServerConfigurationResponseOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) *string { return v.SecondaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Serial Number of Terminal server.
func (o TerminalServerConfigurationResponseOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// Username for the terminal server connection.
func (o TerminalServerConfigurationResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v TerminalServerConfigurationResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Vlan group properties.
type VlanGroupProperties struct {
	// Vlan group name.
	Name *string `pulumi:"name"`
	// List of vlans.
	Vlans []string `pulumi:"vlans"`
}

// VlanGroupPropertiesInput is an input type that accepts VlanGroupPropertiesArgs and VlanGroupPropertiesOutput values.
// You can construct a concrete instance of `VlanGroupPropertiesInput` via:
//
//	VlanGroupPropertiesArgs{...}
type VlanGroupPropertiesInput interface {
	pulumi.Input

	ToVlanGroupPropertiesOutput() VlanGroupPropertiesOutput
	ToVlanGroupPropertiesOutputWithContext(context.Context) VlanGroupPropertiesOutput
}

// Vlan group properties.
type VlanGroupPropertiesArgs struct {
	// Vlan group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of vlans.
	Vlans pulumi.StringArrayInput `pulumi:"vlans"`
}

func (VlanGroupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanGroupProperties)(nil)).Elem()
}

func (i VlanGroupPropertiesArgs) ToVlanGroupPropertiesOutput() VlanGroupPropertiesOutput {
	return i.ToVlanGroupPropertiesOutputWithContext(context.Background())
}

func (i VlanGroupPropertiesArgs) ToVlanGroupPropertiesOutputWithContext(ctx context.Context) VlanGroupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanGroupPropertiesOutput)
}

// VlanGroupPropertiesArrayInput is an input type that accepts VlanGroupPropertiesArray and VlanGroupPropertiesArrayOutput values.
// You can construct a concrete instance of `VlanGroupPropertiesArrayInput` via:
//
//	VlanGroupPropertiesArray{ VlanGroupPropertiesArgs{...} }
type VlanGroupPropertiesArrayInput interface {
	pulumi.Input

	ToVlanGroupPropertiesArrayOutput() VlanGroupPropertiesArrayOutput
	ToVlanGroupPropertiesArrayOutputWithContext(context.Context) VlanGroupPropertiesArrayOutput
}

type VlanGroupPropertiesArray []VlanGroupPropertiesInput

func (VlanGroupPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanGroupProperties)(nil)).Elem()
}

func (i VlanGroupPropertiesArray) ToVlanGroupPropertiesArrayOutput() VlanGroupPropertiesArrayOutput {
	return i.ToVlanGroupPropertiesArrayOutputWithContext(context.Background())
}

func (i VlanGroupPropertiesArray) ToVlanGroupPropertiesArrayOutputWithContext(ctx context.Context) VlanGroupPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanGroupPropertiesArrayOutput)
}

// Vlan group properties.
type VlanGroupPropertiesOutput struct{ *pulumi.OutputState }

func (VlanGroupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanGroupProperties)(nil)).Elem()
}

func (o VlanGroupPropertiesOutput) ToVlanGroupPropertiesOutput() VlanGroupPropertiesOutput {
	return o
}

func (o VlanGroupPropertiesOutput) ToVlanGroupPropertiesOutputWithContext(ctx context.Context) VlanGroupPropertiesOutput {
	return o
}

// Vlan group name.
func (o VlanGroupPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanGroupProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of vlans.
func (o VlanGroupPropertiesOutput) Vlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanGroupProperties) []string { return v.Vlans }).(pulumi.StringArrayOutput)
}

type VlanGroupPropertiesArrayOutput struct{ *pulumi.OutputState }

func (VlanGroupPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanGroupProperties)(nil)).Elem()
}

func (o VlanGroupPropertiesArrayOutput) ToVlanGroupPropertiesArrayOutput() VlanGroupPropertiesArrayOutput {
	return o
}

func (o VlanGroupPropertiesArrayOutput) ToVlanGroupPropertiesArrayOutputWithContext(ctx context.Context) VlanGroupPropertiesArrayOutput {
	return o
}

func (o VlanGroupPropertiesArrayOutput) Index(i pulumi.IntInput) VlanGroupPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VlanGroupProperties {
		return vs[0].([]VlanGroupProperties)[vs[1].(int)]
	}).(VlanGroupPropertiesOutput)
}

// Vlan group properties.
type VlanGroupPropertiesResponse struct {
	// Vlan group name.
	Name *string `pulumi:"name"`
	// List of vlans.
	Vlans []string `pulumi:"vlans"`
}

// Vlan group properties.
type VlanGroupPropertiesResponseOutput struct{ *pulumi.OutputState }

func (VlanGroupPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanGroupPropertiesResponse)(nil)).Elem()
}

func (o VlanGroupPropertiesResponseOutput) ToVlanGroupPropertiesResponseOutput() VlanGroupPropertiesResponseOutput {
	return o
}

func (o VlanGroupPropertiesResponseOutput) ToVlanGroupPropertiesResponseOutputWithContext(ctx context.Context) VlanGroupPropertiesResponseOutput {
	return o
}

// Vlan group name.
func (o VlanGroupPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VlanGroupPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of vlans.
func (o VlanGroupPropertiesResponseOutput) Vlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanGroupPropertiesResponse) []string { return v.Vlans }).(pulumi.StringArrayOutput)
}

type VlanGroupPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (VlanGroupPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanGroupPropertiesResponse)(nil)).Elem()
}

func (o VlanGroupPropertiesResponseArrayOutput) ToVlanGroupPropertiesResponseArrayOutput() VlanGroupPropertiesResponseArrayOutput {
	return o
}

func (o VlanGroupPropertiesResponseArrayOutput) ToVlanGroupPropertiesResponseArrayOutputWithContext(ctx context.Context) VlanGroupPropertiesResponseArrayOutput {
	return o
}

func (o VlanGroupPropertiesResponseArrayOutput) Index(i pulumi.IntInput) VlanGroupPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VlanGroupPropertiesResponse {
		return vs[0].([]VlanGroupPropertiesResponse)[vs[1].(int)]
	}).(VlanGroupPropertiesResponseOutput)
}

// The vlan match conditions that need to be matched.
type VlanMatchCondition struct {
	// List of inner vlans that need to be matched.
	InnerVlans []string `pulumi:"innerVlans"`
	// List of vlan group names that need to be matched.
	VlanGroupNames []string `pulumi:"vlanGroupNames"`
	// List of vlans that need to be matched.
	Vlans []string `pulumi:"vlans"`
}

// VlanMatchConditionInput is an input type that accepts VlanMatchConditionArgs and VlanMatchConditionOutput values.
// You can construct a concrete instance of `VlanMatchConditionInput` via:
//
//	VlanMatchConditionArgs{...}
type VlanMatchConditionInput interface {
	pulumi.Input

	ToVlanMatchConditionOutput() VlanMatchConditionOutput
	ToVlanMatchConditionOutputWithContext(context.Context) VlanMatchConditionOutput
}

// The vlan match conditions that need to be matched.
type VlanMatchConditionArgs struct {
	// List of inner vlans that need to be matched.
	InnerVlans pulumi.StringArrayInput `pulumi:"innerVlans"`
	// List of vlan group names that need to be matched.
	VlanGroupNames pulumi.StringArrayInput `pulumi:"vlanGroupNames"`
	// List of vlans that need to be matched.
	Vlans pulumi.StringArrayInput `pulumi:"vlans"`
}

func (VlanMatchConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanMatchCondition)(nil)).Elem()
}

func (i VlanMatchConditionArgs) ToVlanMatchConditionOutput() VlanMatchConditionOutput {
	return i.ToVlanMatchConditionOutputWithContext(context.Background())
}

func (i VlanMatchConditionArgs) ToVlanMatchConditionOutputWithContext(ctx context.Context) VlanMatchConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanMatchConditionOutput)
}

func (i VlanMatchConditionArgs) ToVlanMatchConditionPtrOutput() VlanMatchConditionPtrOutput {
	return i.ToVlanMatchConditionPtrOutputWithContext(context.Background())
}

func (i VlanMatchConditionArgs) ToVlanMatchConditionPtrOutputWithContext(ctx context.Context) VlanMatchConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanMatchConditionOutput).ToVlanMatchConditionPtrOutputWithContext(ctx)
}

// VlanMatchConditionPtrInput is an input type that accepts VlanMatchConditionArgs, VlanMatchConditionPtr and VlanMatchConditionPtrOutput values.
// You can construct a concrete instance of `VlanMatchConditionPtrInput` via:
//
//	        VlanMatchConditionArgs{...}
//
//	or:
//
//	        nil
type VlanMatchConditionPtrInput interface {
	pulumi.Input

	ToVlanMatchConditionPtrOutput() VlanMatchConditionPtrOutput
	ToVlanMatchConditionPtrOutputWithContext(context.Context) VlanMatchConditionPtrOutput
}

type vlanMatchConditionPtrType VlanMatchConditionArgs

func VlanMatchConditionPtr(v *VlanMatchConditionArgs) VlanMatchConditionPtrInput {
	return (*vlanMatchConditionPtrType)(v)
}

func (*vlanMatchConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanMatchCondition)(nil)).Elem()
}

func (i *vlanMatchConditionPtrType) ToVlanMatchConditionPtrOutput() VlanMatchConditionPtrOutput {
	return i.ToVlanMatchConditionPtrOutputWithContext(context.Background())
}

func (i *vlanMatchConditionPtrType) ToVlanMatchConditionPtrOutputWithContext(ctx context.Context) VlanMatchConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanMatchConditionPtrOutput)
}

// The vlan match conditions that need to be matched.
type VlanMatchConditionOutput struct{ *pulumi.OutputState }

func (VlanMatchConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanMatchCondition)(nil)).Elem()
}

func (o VlanMatchConditionOutput) ToVlanMatchConditionOutput() VlanMatchConditionOutput {
	return o
}

func (o VlanMatchConditionOutput) ToVlanMatchConditionOutputWithContext(ctx context.Context) VlanMatchConditionOutput {
	return o
}

func (o VlanMatchConditionOutput) ToVlanMatchConditionPtrOutput() VlanMatchConditionPtrOutput {
	return o.ToVlanMatchConditionPtrOutputWithContext(context.Background())
}

func (o VlanMatchConditionOutput) ToVlanMatchConditionPtrOutputWithContext(ctx context.Context) VlanMatchConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VlanMatchCondition) *VlanMatchCondition {
		return &v
	}).(VlanMatchConditionPtrOutput)
}

// List of inner vlans that need to be matched.
func (o VlanMatchConditionOutput) InnerVlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanMatchCondition) []string { return v.InnerVlans }).(pulumi.StringArrayOutput)
}

// List of vlan group names that need to be matched.
func (o VlanMatchConditionOutput) VlanGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanMatchCondition) []string { return v.VlanGroupNames }).(pulumi.StringArrayOutput)
}

// List of vlans that need to be matched.
func (o VlanMatchConditionOutput) Vlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanMatchCondition) []string { return v.Vlans }).(pulumi.StringArrayOutput)
}

type VlanMatchConditionPtrOutput struct{ *pulumi.OutputState }

func (VlanMatchConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanMatchCondition)(nil)).Elem()
}

func (o VlanMatchConditionPtrOutput) ToVlanMatchConditionPtrOutput() VlanMatchConditionPtrOutput {
	return o
}

func (o VlanMatchConditionPtrOutput) ToVlanMatchConditionPtrOutputWithContext(ctx context.Context) VlanMatchConditionPtrOutput {
	return o
}

func (o VlanMatchConditionPtrOutput) Elem() VlanMatchConditionOutput {
	return o.ApplyT(func(v *VlanMatchCondition) VlanMatchCondition {
		if v != nil {
			return *v
		}
		var ret VlanMatchCondition
		return ret
	}).(VlanMatchConditionOutput)
}

// List of inner vlans that need to be matched.
func (o VlanMatchConditionPtrOutput) InnerVlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VlanMatchCondition) []string {
		if v == nil {
			return nil
		}
		return v.InnerVlans
	}).(pulumi.StringArrayOutput)
}

// List of vlan group names that need to be matched.
func (o VlanMatchConditionPtrOutput) VlanGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VlanMatchCondition) []string {
		if v == nil {
			return nil
		}
		return v.VlanGroupNames
	}).(pulumi.StringArrayOutput)
}

// List of vlans that need to be matched.
func (o VlanMatchConditionPtrOutput) Vlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VlanMatchCondition) []string {
		if v == nil {
			return nil
		}
		return v.Vlans
	}).(pulumi.StringArrayOutput)
}

// The vlan match conditions that need to be matched.
type VlanMatchConditionResponse struct {
	// List of inner vlans that need to be matched.
	InnerVlans []string `pulumi:"innerVlans"`
	// List of vlan group names that need to be matched.
	VlanGroupNames []string `pulumi:"vlanGroupNames"`
	// List of vlans that need to be matched.
	Vlans []string `pulumi:"vlans"`
}

// The vlan match conditions that need to be matched.
type VlanMatchConditionResponseOutput struct{ *pulumi.OutputState }

func (VlanMatchConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanMatchConditionResponse)(nil)).Elem()
}

func (o VlanMatchConditionResponseOutput) ToVlanMatchConditionResponseOutput() VlanMatchConditionResponseOutput {
	return o
}

func (o VlanMatchConditionResponseOutput) ToVlanMatchConditionResponseOutputWithContext(ctx context.Context) VlanMatchConditionResponseOutput {
	return o
}

// List of inner vlans that need to be matched.
func (o VlanMatchConditionResponseOutput) InnerVlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanMatchConditionResponse) []string { return v.InnerVlans }).(pulumi.StringArrayOutput)
}

// List of vlan group names that need to be matched.
func (o VlanMatchConditionResponseOutput) VlanGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanMatchConditionResponse) []string { return v.VlanGroupNames }).(pulumi.StringArrayOutput)
}

// List of vlans that need to be matched.
func (o VlanMatchConditionResponseOutput) Vlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VlanMatchConditionResponse) []string { return v.Vlans }).(pulumi.StringArrayOutput)
}

type VlanMatchConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (VlanMatchConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanMatchConditionResponse)(nil)).Elem()
}

func (o VlanMatchConditionResponsePtrOutput) ToVlanMatchConditionResponsePtrOutput() VlanMatchConditionResponsePtrOutput {
	return o
}

func (o VlanMatchConditionResponsePtrOutput) ToVlanMatchConditionResponsePtrOutputWithContext(ctx context.Context) VlanMatchConditionResponsePtrOutput {
	return o
}

func (o VlanMatchConditionResponsePtrOutput) Elem() VlanMatchConditionResponseOutput {
	return o.ApplyT(func(v *VlanMatchConditionResponse) VlanMatchConditionResponse {
		if v != nil {
			return *v
		}
		var ret VlanMatchConditionResponse
		return ret
	}).(VlanMatchConditionResponseOutput)
}

// List of inner vlans that need to be matched.
func (o VlanMatchConditionResponsePtrOutput) InnerVlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VlanMatchConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.InnerVlans
	}).(pulumi.StringArrayOutput)
}

// List of vlan group names that need to be matched.
func (o VlanMatchConditionResponsePtrOutput) VlanGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VlanMatchConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.VlanGroupNames
	}).(pulumi.StringArrayOutput)
}

// List of vlans that need to be matched.
func (o VlanMatchConditionResponsePtrOutput) Vlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VlanMatchConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Vlans
	}).(pulumi.StringArrayOutput)
}

// Network and credential configuration currently applied on terminal server.
type VpnConfigurationProperties struct {
	// ARM Resource ID of the Network To Network Interconnect.
	NetworkToNetworkInterconnectId *string `pulumi:"networkToNetworkInterconnectId"`
	// option A properties
	OptionAProperties *VpnConfigurationPropertiesOptionAProperties `pulumi:"optionAProperties"`
	// option B properties
	OptionBProperties *FabricOptionBProperties `pulumi:"optionBProperties"`
	// Peering option list.
	PeeringOption string `pulumi:"peeringOption"`
}

// Defaults sets the appropriate defaults for VpnConfigurationProperties
func (val *VpnConfigurationProperties) Defaults() *VpnConfigurationProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.OptionAProperties = tmp.OptionAProperties.Defaults()

	return &tmp
}

// VpnConfigurationPropertiesInput is an input type that accepts VpnConfigurationPropertiesArgs and VpnConfigurationPropertiesOutput values.
// You can construct a concrete instance of `VpnConfigurationPropertiesInput` via:
//
//	VpnConfigurationPropertiesArgs{...}
type VpnConfigurationPropertiesInput interface {
	pulumi.Input

	ToVpnConfigurationPropertiesOutput() VpnConfigurationPropertiesOutput
	ToVpnConfigurationPropertiesOutputWithContext(context.Context) VpnConfigurationPropertiesOutput
}

// Network and credential configuration currently applied on terminal server.
type VpnConfigurationPropertiesArgs struct {
	// ARM Resource ID of the Network To Network Interconnect.
	NetworkToNetworkInterconnectId pulumi.StringPtrInput `pulumi:"networkToNetworkInterconnectId"`
	// option A properties
	OptionAProperties VpnConfigurationPropertiesOptionAPropertiesPtrInput `pulumi:"optionAProperties"`
	// option B properties
	OptionBProperties FabricOptionBPropertiesPtrInput `pulumi:"optionBProperties"`
	// Peering option list.
	PeeringOption pulumi.StringInput `pulumi:"peeringOption"`
}

// Defaults sets the appropriate defaults for VpnConfigurationPropertiesArgs
func (val *VpnConfigurationPropertiesArgs) Defaults() *VpnConfigurationPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (VpnConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConfigurationProperties)(nil)).Elem()
}

func (i VpnConfigurationPropertiesArgs) ToVpnConfigurationPropertiesOutput() VpnConfigurationPropertiesOutput {
	return i.ToVpnConfigurationPropertiesOutputWithContext(context.Background())
}

func (i VpnConfigurationPropertiesArgs) ToVpnConfigurationPropertiesOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConfigurationPropertiesOutput)
}

// Network and credential configuration currently applied on terminal server.
type VpnConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (VpnConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConfigurationProperties)(nil)).Elem()
}

func (o VpnConfigurationPropertiesOutput) ToVpnConfigurationPropertiesOutput() VpnConfigurationPropertiesOutput {
	return o
}

func (o VpnConfigurationPropertiesOutput) ToVpnConfigurationPropertiesOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOutput {
	return o
}

// ARM Resource ID of the Network To Network Interconnect.
func (o VpnConfigurationPropertiesOutput) NetworkToNetworkInterconnectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationProperties) *string { return v.NetworkToNetworkInterconnectId }).(pulumi.StringPtrOutput)
}

// option A properties
func (o VpnConfigurationPropertiesOutput) OptionAProperties() VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return o.ApplyT(func(v VpnConfigurationProperties) *VpnConfigurationPropertiesOptionAProperties {
		return v.OptionAProperties
	}).(VpnConfigurationPropertiesOptionAPropertiesPtrOutput)
}

// option B properties
func (o VpnConfigurationPropertiesOutput) OptionBProperties() FabricOptionBPropertiesPtrOutput {
	return o.ApplyT(func(v VpnConfigurationProperties) *FabricOptionBProperties { return v.OptionBProperties }).(FabricOptionBPropertiesPtrOutput)
}

// Peering option list.
func (o VpnConfigurationPropertiesOutput) PeeringOption() pulumi.StringOutput {
	return o.ApplyT(func(v VpnConfigurationProperties) string { return v.PeeringOption }).(pulumi.StringOutput)
}

// option A properties
type VpnConfigurationPropertiesOptionAProperties struct {
	// BFD Configuration properties.
	BfdConfiguration *BfdConfiguration `pulumi:"bfdConfiguration"`
	// MTU to use for option A peering.
	Mtu *int `pulumi:"mtu"`
	// Peer ASN number.Example : 28
	PeerASN float64 `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix *string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix *string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// Vlan Id.Example : 501
	VlanId int `pulumi:"vlanId"`
}

// Defaults sets the appropriate defaults for VpnConfigurationPropertiesOptionAProperties
func (val *VpnConfigurationPropertiesOptionAProperties) Defaults() *VpnConfigurationPropertiesOptionAProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	if tmp.Mtu == nil {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	return &tmp
}

// VpnConfigurationPropertiesOptionAPropertiesInput is an input type that accepts VpnConfigurationPropertiesOptionAPropertiesArgs and VpnConfigurationPropertiesOptionAPropertiesOutput values.
// You can construct a concrete instance of `VpnConfigurationPropertiesOptionAPropertiesInput` via:
//
//	VpnConfigurationPropertiesOptionAPropertiesArgs{...}
type VpnConfigurationPropertiesOptionAPropertiesInput interface {
	pulumi.Input

	ToVpnConfigurationPropertiesOptionAPropertiesOutput() VpnConfigurationPropertiesOptionAPropertiesOutput
	ToVpnConfigurationPropertiesOptionAPropertiesOutputWithContext(context.Context) VpnConfigurationPropertiesOptionAPropertiesOutput
}

// option A properties
type VpnConfigurationPropertiesOptionAPropertiesArgs struct {
	// BFD Configuration properties.
	BfdConfiguration BfdConfigurationPtrInput `pulumi:"bfdConfiguration"`
	// MTU to use for option A peering.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// Peer ASN number.Example : 28
	PeerASN pulumi.Float64Input `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix pulumi.StringPtrInput `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix pulumi.StringPtrInput `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix pulumi.StringPtrInput `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix pulumi.StringPtrInput `pulumi:"secondaryIpv6Prefix"`
	// Vlan Id.Example : 501
	VlanId pulumi.IntInput `pulumi:"vlanId"`
}

// Defaults sets the appropriate defaults for VpnConfigurationPropertiesOptionAPropertiesArgs
func (val *VpnConfigurationPropertiesOptionAPropertiesArgs) Defaults() *VpnConfigurationPropertiesOptionAPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mtu == nil {
		tmp.Mtu = pulumi.IntPtr(1500)
	}
	return &tmp
}
func (VpnConfigurationPropertiesOptionAPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConfigurationPropertiesOptionAProperties)(nil)).Elem()
}

func (i VpnConfigurationPropertiesOptionAPropertiesArgs) ToVpnConfigurationPropertiesOptionAPropertiesOutput() VpnConfigurationPropertiesOptionAPropertiesOutput {
	return i.ToVpnConfigurationPropertiesOptionAPropertiesOutputWithContext(context.Background())
}

func (i VpnConfigurationPropertiesOptionAPropertiesArgs) ToVpnConfigurationPropertiesOptionAPropertiesOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOptionAPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConfigurationPropertiesOptionAPropertiesOutput)
}

func (i VpnConfigurationPropertiesOptionAPropertiesArgs) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutput() VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return i.ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(context.Background())
}

func (i VpnConfigurationPropertiesOptionAPropertiesArgs) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConfigurationPropertiesOptionAPropertiesOutput).ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(ctx)
}

// VpnConfigurationPropertiesOptionAPropertiesPtrInput is an input type that accepts VpnConfigurationPropertiesOptionAPropertiesArgs, VpnConfigurationPropertiesOptionAPropertiesPtr and VpnConfigurationPropertiesOptionAPropertiesPtrOutput values.
// You can construct a concrete instance of `VpnConfigurationPropertiesOptionAPropertiesPtrInput` via:
//
//	        VpnConfigurationPropertiesOptionAPropertiesArgs{...}
//
//	or:
//
//	        nil
type VpnConfigurationPropertiesOptionAPropertiesPtrInput interface {
	pulumi.Input

	ToVpnConfigurationPropertiesOptionAPropertiesPtrOutput() VpnConfigurationPropertiesOptionAPropertiesPtrOutput
	ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(context.Context) VpnConfigurationPropertiesOptionAPropertiesPtrOutput
}

type vpnConfigurationPropertiesOptionAPropertiesPtrType VpnConfigurationPropertiesOptionAPropertiesArgs

func VpnConfigurationPropertiesOptionAPropertiesPtr(v *VpnConfigurationPropertiesOptionAPropertiesArgs) VpnConfigurationPropertiesOptionAPropertiesPtrInput {
	return (*vpnConfigurationPropertiesOptionAPropertiesPtrType)(v)
}

func (*vpnConfigurationPropertiesOptionAPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConfigurationPropertiesOptionAProperties)(nil)).Elem()
}

func (i *vpnConfigurationPropertiesOptionAPropertiesPtrType) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutput() VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return i.ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(context.Background())
}

func (i *vpnConfigurationPropertiesOptionAPropertiesPtrType) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConfigurationPropertiesOptionAPropertiesPtrOutput)
}

// option A properties
type VpnConfigurationPropertiesOptionAPropertiesOutput struct{ *pulumi.OutputState }

func (VpnConfigurationPropertiesOptionAPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConfigurationPropertiesOptionAProperties)(nil)).Elem()
}

func (o VpnConfigurationPropertiesOptionAPropertiesOutput) ToVpnConfigurationPropertiesOptionAPropertiesOutput() VpnConfigurationPropertiesOptionAPropertiesOutput {
	return o
}

func (o VpnConfigurationPropertiesOptionAPropertiesOutput) ToVpnConfigurationPropertiesOptionAPropertiesOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOptionAPropertiesOutput {
	return o
}

func (o VpnConfigurationPropertiesOptionAPropertiesOutput) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutput() VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return o.ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(context.Background())
}

func (o VpnConfigurationPropertiesOptionAPropertiesOutput) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpnConfigurationPropertiesOptionAProperties) *VpnConfigurationPropertiesOptionAProperties {
		return &v
	}).(VpnConfigurationPropertiesOptionAPropertiesPtrOutput)
}

// BFD Configuration properties.
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) *BfdConfiguration { return v.BfdConfiguration }).(BfdConfigurationPtrOutput)
}

// MTU to use for option A peering.
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) float64 { return v.PeerASN }).(pulumi.Float64Output)
}

// IPv4 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) *string { return v.PrimaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) *string { return v.PrimaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) *string { return v.SecondaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) *string { return v.SecondaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Vlan Id.Example : 501
func (o VpnConfigurationPropertiesOptionAPropertiesOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesOptionAProperties) int { return v.VlanId }).(pulumi.IntOutput)
}

type VpnConfigurationPropertiesOptionAPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VpnConfigurationPropertiesOptionAPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConfigurationPropertiesOptionAProperties)(nil)).Elem()
}

func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutput() VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return o
}

func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) ToVpnConfigurationPropertiesOptionAPropertiesPtrOutputWithContext(ctx context.Context) VpnConfigurationPropertiesOptionAPropertiesPtrOutput {
	return o
}

func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) Elem() VpnConfigurationPropertiesOptionAPropertiesOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) VpnConfigurationPropertiesOptionAProperties {
		if v != nil {
			return *v
		}
		var ret VpnConfigurationPropertiesOptionAProperties
		return ret
	}).(VpnConfigurationPropertiesOptionAPropertiesOutput)
}

// BFD Configuration properties.
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) BfdConfiguration() BfdConfigurationPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *BfdConfiguration {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationPtrOutput)
}

// MTU to use for option A peering.
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// IPv4 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Vlan Id.Example : 501
func (o VpnConfigurationPropertiesOptionAPropertiesPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return &v.VlanId
	}).(pulumi.IntPtrOutput)
}

// Network and credential configuration currently applied on terminal server.
type VpnConfigurationPropertiesResponse struct {
	// Administrative state of the resource.
	AdministrativeState string `pulumi:"administrativeState"`
	// ARM Resource ID of the Network To Network Interconnect.
	NetworkToNetworkInterconnectId *string `pulumi:"networkToNetworkInterconnectId"`
	// option A properties
	OptionAProperties *VpnConfigurationPropertiesResponseOptionAProperties `pulumi:"optionAProperties"`
	// option B properties
	OptionBProperties *FabricOptionBPropertiesResponse `pulumi:"optionBProperties"`
	// Peering option list.
	PeeringOption string `pulumi:"peeringOption"`
}

// Defaults sets the appropriate defaults for VpnConfigurationPropertiesResponse
func (val *VpnConfigurationPropertiesResponse) Defaults() *VpnConfigurationPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.OptionAProperties = tmp.OptionAProperties.Defaults()

	return &tmp
}

// Network and credential configuration currently applied on terminal server.
type VpnConfigurationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (VpnConfigurationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConfigurationPropertiesResponse)(nil)).Elem()
}

func (o VpnConfigurationPropertiesResponseOutput) ToVpnConfigurationPropertiesResponseOutput() VpnConfigurationPropertiesResponseOutput {
	return o
}

func (o VpnConfigurationPropertiesResponseOutput) ToVpnConfigurationPropertiesResponseOutputWithContext(ctx context.Context) VpnConfigurationPropertiesResponseOutput {
	return o
}

// Administrative state of the resource.
func (o VpnConfigurationPropertiesResponseOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponse) string { return v.AdministrativeState }).(pulumi.StringOutput)
}

// ARM Resource ID of the Network To Network Interconnect.
func (o VpnConfigurationPropertiesResponseOutput) NetworkToNetworkInterconnectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponse) *string { return v.NetworkToNetworkInterconnectId }).(pulumi.StringPtrOutput)
}

// option A properties
func (o VpnConfigurationPropertiesResponseOutput) OptionAProperties() VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponse) *VpnConfigurationPropertiesResponseOptionAProperties {
		return v.OptionAProperties
	}).(VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput)
}

// option B properties
func (o VpnConfigurationPropertiesResponseOutput) OptionBProperties() FabricOptionBPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponse) *FabricOptionBPropertiesResponse {
		return v.OptionBProperties
	}).(FabricOptionBPropertiesResponsePtrOutput)
}

// Peering option list.
func (o VpnConfigurationPropertiesResponseOutput) PeeringOption() pulumi.StringOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponse) string { return v.PeeringOption }).(pulumi.StringOutput)
}

// option A properties
type VpnConfigurationPropertiesResponseOptionAProperties struct {
	// BFD Configuration properties.
	BfdConfiguration *BfdConfigurationResponse `pulumi:"bfdConfiguration"`
	// MTU to use for option A peering.
	Mtu *int `pulumi:"mtu"`
	// Peer ASN number.Example : 28
	PeerASN float64 `pulumi:"peerASN"`
	// IPv4 Address Prefix.
	PrimaryIpv4Prefix *string `pulumi:"primaryIpv4Prefix"`
	// IPv6 Address Prefix.
	PrimaryIpv6Prefix *string `pulumi:"primaryIpv6Prefix"`
	// Secondary IPv4 Address Prefix.
	SecondaryIpv4Prefix *string `pulumi:"secondaryIpv4Prefix"`
	// Secondary IPv6 Address Prefix.
	SecondaryIpv6Prefix *string `pulumi:"secondaryIpv6Prefix"`
	// Vlan Id.Example : 501
	VlanId int `pulumi:"vlanId"`
}

// Defaults sets the appropriate defaults for VpnConfigurationPropertiesResponseOptionAProperties
func (val *VpnConfigurationPropertiesResponseOptionAProperties) Defaults() *VpnConfigurationPropertiesResponseOptionAProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BfdConfiguration = tmp.BfdConfiguration.Defaults()

	if tmp.Mtu == nil {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	return &tmp
}

// option A properties
type VpnConfigurationPropertiesResponseOptionAPropertiesOutput struct{ *pulumi.OutputState }

func (VpnConfigurationPropertiesResponseOptionAPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnConfigurationPropertiesResponseOptionAProperties)(nil)).Elem()
}

func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) ToVpnConfigurationPropertiesResponseOptionAPropertiesOutput() VpnConfigurationPropertiesResponseOptionAPropertiesOutput {
	return o
}

func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) ToVpnConfigurationPropertiesResponseOptionAPropertiesOutputWithContext(ctx context.Context) VpnConfigurationPropertiesResponseOptionAPropertiesOutput {
	return o
}

// BFD Configuration properties.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) *BfdConfigurationResponse {
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// MTU to use for option A peering.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) PeerASN() pulumi.Float64Output {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) float64 { return v.PeerASN }).(pulumi.Float64Output)
}

// IPv4 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) *string { return v.PrimaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) *string { return v.PrimaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) *string { return v.SecondaryIpv4Prefix }).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) *string { return v.SecondaryIpv6Prefix }).(pulumi.StringPtrOutput)
}

// Vlan Id.Example : 501
func (o VpnConfigurationPropertiesResponseOptionAPropertiesOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v VpnConfigurationPropertiesResponseOptionAProperties) int { return v.VlanId }).(pulumi.IntOutput)
}

type VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConfigurationPropertiesResponseOptionAProperties)(nil)).Elem()
}

func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) ToVpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput() VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput {
	return o
}

func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) ToVpnConfigurationPropertiesResponseOptionAPropertiesPtrOutputWithContext(ctx context.Context) VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput {
	return o
}

func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) Elem() VpnConfigurationPropertiesResponseOptionAPropertiesOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) VpnConfigurationPropertiesResponseOptionAProperties {
		if v != nil {
			return *v
		}
		var ret VpnConfigurationPropertiesResponseOptionAProperties
		return ret
	}).(VpnConfigurationPropertiesResponseOptionAPropertiesOutput)
}

// BFD Configuration properties.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) BfdConfiguration() BfdConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *BfdConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.BfdConfiguration
	}).(BfdConfigurationResponsePtrOutput)
}

// MTU to use for option A peering.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Peer ASN number.Example : 28
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) PeerASN() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *float64 {
		if v == nil {
			return nil
		}
		return &v.PeerASN
	}).(pulumi.Float64PtrOutput)
}

// IPv4 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) PrimaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// IPv6 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) PrimaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv4 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) SecondaryIpv4Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv4Prefix
	}).(pulumi.StringPtrOutput)
}

// Secondary IPv6 Address Prefix.
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) SecondaryIpv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryIpv6Prefix
	}).(pulumi.StringPtrOutput)
}

// Vlan Id.Example : 501
func (o VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnConfigurationPropertiesResponseOptionAProperties) *int {
		if v == nil {
			return nil
		}
		return &v.VlanId
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessControlListActionOutput{})
	pulumi.RegisterOutputType(AccessControlListActionArrayOutput{})
	pulumi.RegisterOutputType(AccessControlListActionResponseOutput{})
	pulumi.RegisterOutputType(AccessControlListActionResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConditionOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConditionArrayOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConditionResponseOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConfigurationOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConfigurationArrayOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AccessControlListMatchConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessControlListPortConditionOutput{})
	pulumi.RegisterOutputType(AccessControlListPortConditionPtrOutput{})
	pulumi.RegisterOutputType(AccessControlListPortConditionResponseOutput{})
	pulumi.RegisterOutputType(AccessControlListPortConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(ActionIpCommunityPropertiesOutput{})
	pulumi.RegisterOutputType(ActionIpCommunityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ActionIpCommunityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ActionIpCommunityPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ActionIpExtendedCommunityPropertiesOutput{})
	pulumi.RegisterOutputType(ActionIpExtendedCommunityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ActionIpExtendedCommunityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ActionIpExtendedCommunityPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AggregateRouteOutput{})
	pulumi.RegisterOutputType(AggregateRouteArrayOutput{})
	pulumi.RegisterOutputType(AggregateRouteConfigurationOutput{})
	pulumi.RegisterOutputType(AggregateRouteConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AggregateRouteConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AggregateRouteConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AggregateRouteResponseOutput{})
	pulumi.RegisterOutputType(AggregateRouteResponseArrayOutput{})
	pulumi.RegisterOutputType(BfdConfigurationOutput{})
	pulumi.RegisterOutputType(BfdConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BfdConfigurationResponseOutput{})
	pulumi.RegisterOutputType(BfdConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CommonDynamicMatchConfigurationOutput{})
	pulumi.RegisterOutputType(CommonDynamicMatchConfigurationArrayOutput{})
	pulumi.RegisterOutputType(CommonDynamicMatchConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CommonDynamicMatchConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetArrayOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetResponseOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetRoutePolicyOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetRoutePolicyPtrOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetRoutePolicyResponseOutput{})
	pulumi.RegisterOutputType(ConnectedSubnetRoutePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ControllerServicesResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyPtrOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyInformationOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyInformationPtrOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyInformationResponseOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyResponseOutput{})
	pulumi.RegisterOutputType(ExportRoutePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ExpressRouteConnectionInformationOutput{})
	pulumi.RegisterOutputType(ExpressRouteConnectionInformationArrayOutput{})
	pulumi.RegisterOutputType(ExpressRouteConnectionInformationResponseOutput{})
	pulumi.RegisterOutputType(ExpressRouteConnectionInformationResponseArrayOutput{})
	pulumi.RegisterOutputType(ExternalNetworkPropertiesOptionAPropertiesOutput{})
	pulumi.RegisterOutputType(ExternalNetworkPropertiesOptionAPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ExternalNetworkPropertiesResponseOptionAPropertiesOutput{})
	pulumi.RegisterOutputType(ExternalNetworkPropertiesResponseOptionAPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FabricOptionBPropertiesOutput{})
	pulumi.RegisterOutputType(FabricOptionBPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FabricOptionBPropertiesResponseOutput{})
	pulumi.RegisterOutputType(FabricOptionBPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyPtrOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyInformationOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyInformationPtrOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyInformationResponseOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyResponseOutput{})
	pulumi.RegisterOutputType(ImportRoutePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesBgpConfigurationOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesBgpConfigurationPtrOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesResponseBgpConfigurationOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesResponseBgpConfigurationPtrOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesResponseStaticRouteConfigurationOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesResponseStaticRouteConfigurationPtrOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesStaticRouteConfigurationOutput{})
	pulumi.RegisterOutputType(InternalNetworkPropertiesStaticRouteConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IpCommunityIdListOutput{})
	pulumi.RegisterOutputType(IpCommunityIdListPtrOutput{})
	pulumi.RegisterOutputType(IpCommunityIdListResponseOutput{})
	pulumi.RegisterOutputType(IpCommunityIdListResponsePtrOutput{})
	pulumi.RegisterOutputType(IpCommunityRuleOutput{})
	pulumi.RegisterOutputType(IpCommunityRuleArrayOutput{})
	pulumi.RegisterOutputType(IpCommunityRuleResponseOutput{})
	pulumi.RegisterOutputType(IpCommunityRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityIdListOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityIdListPtrOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityIdListResponseOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityIdListResponsePtrOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityRuleOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityRuleArrayOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityRuleResponseOutput{})
	pulumi.RegisterOutputType(IpExtendedCommunityRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(IpGroupPropertiesOutput{})
	pulumi.RegisterOutputType(IpGroupPropertiesArrayOutput{})
	pulumi.RegisterOutputType(IpGroupPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IpGroupPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(IpMatchConditionOutput{})
	pulumi.RegisterOutputType(IpMatchConditionPtrOutput{})
	pulumi.RegisterOutputType(IpMatchConditionResponseOutput{})
	pulumi.RegisterOutputType(IpMatchConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(IpPrefixRuleOutput{})
	pulumi.RegisterOutputType(IpPrefixRuleArrayOutput{})
	pulumi.RegisterOutputType(IpPrefixRuleResponseOutput{})
	pulumi.RegisterOutputType(IpPrefixRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(IsolationDomainPropertiesOutput{})
	pulumi.RegisterOutputType(IsolationDomainPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IsolationDomainPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IsolationDomainPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(L3ExportRoutePolicyOutput{})
	pulumi.RegisterOutputType(L3ExportRoutePolicyPtrOutput{})
	pulumi.RegisterOutputType(L3ExportRoutePolicyResponseOutput{})
	pulumi.RegisterOutputType(L3ExportRoutePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(L3OptionBPropertiesOutput{})
	pulumi.RegisterOutputType(L3OptionBPropertiesPtrOutput{})
	pulumi.RegisterOutputType(L3OptionBPropertiesResponseOutput{})
	pulumi.RegisterOutputType(L3OptionBPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(Layer2ConfigurationOutput{})
	pulumi.RegisterOutputType(Layer2ConfigurationPtrOutput{})
	pulumi.RegisterOutputType(Layer2ConfigurationResponseOutput{})
	pulumi.RegisterOutputType(Layer2ConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagementNetworkConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(ManagementNetworkConfigurationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(NeighborAddressOutput{})
	pulumi.RegisterOutputType(NeighborAddressArrayOutput{})
	pulumi.RegisterOutputType(NeighborAddressResponseOutput{})
	pulumi.RegisterOutputType(NeighborAddressResponseArrayOutput{})
	pulumi.RegisterOutputType(NeighborGroupDestinationOutput{})
	pulumi.RegisterOutputType(NeighborGroupDestinationResponseOutput{})
	pulumi.RegisterOutputType(NetworkTapPropertiesDestinationsOutput{})
	pulumi.RegisterOutputType(NetworkTapPropertiesDestinationsArrayOutput{})
	pulumi.RegisterOutputType(NetworkTapPropertiesResponseDestinationsOutput{})
	pulumi.RegisterOutputType(NetworkTapPropertiesResponseDestinationsArrayOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleActionOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleActionArrayOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleActionResponseOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleActionResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConditionOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConditionArrayOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConditionResponseOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConfigurationArrayOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NetworkTapRuleMatchConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NpbStaticRouteConfigurationOutput{})
	pulumi.RegisterOutputType(NpbStaticRouteConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NpbStaticRouteConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NpbStaticRouteConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(PortConditionOutput{})
	pulumi.RegisterOutputType(PortConditionPtrOutput{})
	pulumi.RegisterOutputType(PortConditionResponseOutput{})
	pulumi.RegisterOutputType(PortConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(PortGroupPropertiesOutput{})
	pulumi.RegisterOutputType(PortGroupPropertiesArrayOutput{})
	pulumi.RegisterOutputType(PortGroupPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PortGroupPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(RoutePolicyStatementPropertiesOutput{})
	pulumi.RegisterOutputType(RoutePolicyStatementPropertiesArrayOutput{})
	pulumi.RegisterOutputType(RoutePolicyStatementPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RoutePolicyStatementPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(RouteTargetInformationOutput{})
	pulumi.RegisterOutputType(RouteTargetInformationPtrOutput{})
	pulumi.RegisterOutputType(RouteTargetInformationResponseOutput{})
	pulumi.RegisterOutputType(RouteTargetInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(RulePropertiesOutput{})
	pulumi.RegisterOutputType(RulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(StatementActionPropertiesOutput{})
	pulumi.RegisterOutputType(StatementActionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StatementConditionPropertiesOutput{})
	pulumi.RegisterOutputType(StatementConditionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StaticRoutePropertiesOutput{})
	pulumi.RegisterOutputType(StaticRoutePropertiesArrayOutput{})
	pulumi.RegisterOutputType(StaticRoutePropertiesResponseOutput{})
	pulumi.RegisterOutputType(StaticRoutePropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TerminalServerConfigurationOutput{})
	pulumi.RegisterOutputType(TerminalServerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VlanGroupPropertiesOutput{})
	pulumi.RegisterOutputType(VlanGroupPropertiesArrayOutput{})
	pulumi.RegisterOutputType(VlanGroupPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VlanGroupPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(VlanMatchConditionOutput{})
	pulumi.RegisterOutputType(VlanMatchConditionPtrOutput{})
	pulumi.RegisterOutputType(VlanMatchConditionResponseOutput{})
	pulumi.RegisterOutputType(VlanMatchConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(VpnConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(VpnConfigurationPropertiesOptionAPropertiesOutput{})
	pulumi.RegisterOutputType(VpnConfigurationPropertiesOptionAPropertiesPtrOutput{})
	pulumi.RegisterOutputType(VpnConfigurationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VpnConfigurationPropertiesResponseOptionAPropertiesOutput{})
	pulumi.RegisterOutputType(VpnConfigurationPropertiesResponseOptionAPropertiesPtrOutput{})
}
