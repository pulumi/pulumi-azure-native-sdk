// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230615

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Network To Network Interconnect resource definition.
type NetworkToNetworkInterconnect struct {
	pulumi.CustomResourceState

	// Administrative state of the resource.
	AdministrativeState pulumi.StringOutput `pulumi:"administrativeState"`
	// Configuration state of the resource.
	ConfigurationState pulumi.StringOutput `pulumi:"configurationState"`
	// Egress Acl. ARM resource ID of Access Control Lists.
	EgressAclId pulumi.StringPtrOutput `pulumi:"egressAclId"`
	// Export Route Policy configuration.
	ExportRoutePolicy ExportRoutePolicyInformationResponsePtrOutput `pulumi:"exportRoutePolicy"`
	// Import Route Policy configuration.
	ImportRoutePolicy ImportRoutePolicyInformationResponsePtrOutput `pulumi:"importRoutePolicy"`
	// Ingress Acl. ARM resource ID of Access Control Lists.
	IngressAclId pulumi.StringPtrOutput `pulumi:"ingressAclId"`
	// Configuration to use NNI for Infrastructure Management. Example: True/False.
	IsManagementType pulumi.StringPtrOutput `pulumi:"isManagementType"`
	// Common properties for Layer2 Configuration.
	Layer2Configuration Layer2ConfigurationResponsePtrOutput `pulumi:"layer2Configuration"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of NNI used. Example: CE | NPB
	NniType pulumi.StringPtrOutput `pulumi:"nniType"`
	// NPB Static Route Configuration properties.
	NpbStaticRouteConfiguration NpbStaticRouteConfigurationResponsePtrOutput `pulumi:"npbStaticRouteConfiguration"`
	// Common properties for Layer3Configuration.
	OptionBLayer3Configuration NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput `pulumi:"optionBLayer3Configuration"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Based on this option layer3 parameters are mandatory. Example: True/False
	UseOptionB pulumi.StringOutput `pulumi:"useOptionB"`
}

// NewNetworkToNetworkInterconnect registers a new resource with the given unique name, arguments, and options.
func NewNetworkToNetworkInterconnect(ctx *pulumi.Context,
	name string, args *NetworkToNetworkInterconnectArgs, opts ...pulumi.ResourceOption) (*NetworkToNetworkInterconnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkFabricName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkFabricName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.UseOptionB == nil {
		return nil, errors.New("invalid value for required argument 'UseOptionB'")
	}
	if args.IsManagementType == nil {
		args.IsManagementType = pulumi.StringPtr("True")
	}
	if args.Layer2Configuration != nil {
		args.Layer2Configuration = args.Layer2Configuration.ToLayer2ConfigurationPtrOutput().ApplyT(func(v *Layer2Configuration) *Layer2Configuration { return v.Defaults() }).(Layer2ConfigurationPtrOutput)
	}
	if args.NniType == nil {
		args.NniType = pulumi.StringPtr("CE")
	}
	if args.NpbStaticRouteConfiguration != nil {
		args.NpbStaticRouteConfiguration = args.NpbStaticRouteConfiguration.ToNpbStaticRouteConfigurationPtrOutput().ApplyT(func(v *NpbStaticRouteConfiguration) *NpbStaticRouteConfiguration { return v.Defaults() }).(NpbStaticRouteConfigurationPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:managednetworkfabric:NetworkToNetworkInterconnect"),
		},
		{
			Type: pulumi.String("azure-native:managednetworkfabric/v20230201preview:NetworkToNetworkInterconnect"),
		},
	})
	opts = append(opts, aliases)
	var resource NetworkToNetworkInterconnect
	err := ctx.RegisterResource("azure-native:managednetworkfabric/v20230615:NetworkToNetworkInterconnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkToNetworkInterconnect gets an existing NetworkToNetworkInterconnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkToNetworkInterconnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkToNetworkInterconnectState, opts ...pulumi.ResourceOption) (*NetworkToNetworkInterconnect, error) {
	var resource NetworkToNetworkInterconnect
	err := ctx.ReadResource("azure-native:managednetworkfabric/v20230615:NetworkToNetworkInterconnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkToNetworkInterconnect resources.
type networkToNetworkInterconnectState struct {
}

type NetworkToNetworkInterconnectState struct {
}

func (NetworkToNetworkInterconnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkToNetworkInterconnectState)(nil)).Elem()
}

type networkToNetworkInterconnectArgs struct {
	// Egress Acl. ARM resource ID of Access Control Lists.
	EgressAclId *string `pulumi:"egressAclId"`
	// Export Route Policy configuration.
	ExportRoutePolicy *ExportRoutePolicyInformation `pulumi:"exportRoutePolicy"`
	// Import Route Policy configuration.
	ImportRoutePolicy *ImportRoutePolicyInformation `pulumi:"importRoutePolicy"`
	// Ingress Acl. ARM resource ID of Access Control Lists.
	IngressAclId *string `pulumi:"ingressAclId"`
	// Configuration to use NNI for Infrastructure Management. Example: True/False.
	IsManagementType *string `pulumi:"isManagementType"`
	// Common properties for Layer2 Configuration.
	Layer2Configuration *Layer2Configuration `pulumi:"layer2Configuration"`
	// Name of the Network Fabric.
	NetworkFabricName string `pulumi:"networkFabricName"`
	// Name of the Network to Network Interconnect.
	NetworkToNetworkInterconnectName *string `pulumi:"networkToNetworkInterconnectName"`
	// Type of NNI used. Example: CE | NPB
	NniType *string `pulumi:"nniType"`
	// NPB Static Route Configuration properties.
	NpbStaticRouteConfiguration *NpbStaticRouteConfiguration `pulumi:"npbStaticRouteConfiguration"`
	// Common properties for Layer3Configuration.
	OptionBLayer3Configuration *NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration `pulumi:"optionBLayer3Configuration"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Based on this option layer3 parameters are mandatory. Example: True/False
	UseOptionB string `pulumi:"useOptionB"`
}

// The set of arguments for constructing a NetworkToNetworkInterconnect resource.
type NetworkToNetworkInterconnectArgs struct {
	// Egress Acl. ARM resource ID of Access Control Lists.
	EgressAclId pulumi.StringPtrInput
	// Export Route Policy configuration.
	ExportRoutePolicy ExportRoutePolicyInformationPtrInput
	// Import Route Policy configuration.
	ImportRoutePolicy ImportRoutePolicyInformationPtrInput
	// Ingress Acl. ARM resource ID of Access Control Lists.
	IngressAclId pulumi.StringPtrInput
	// Configuration to use NNI for Infrastructure Management. Example: True/False.
	IsManagementType pulumi.StringPtrInput
	// Common properties for Layer2 Configuration.
	Layer2Configuration Layer2ConfigurationPtrInput
	// Name of the Network Fabric.
	NetworkFabricName pulumi.StringInput
	// Name of the Network to Network Interconnect.
	NetworkToNetworkInterconnectName pulumi.StringPtrInput
	// Type of NNI used. Example: CE | NPB
	NniType pulumi.StringPtrInput
	// NPB Static Route Configuration properties.
	NpbStaticRouteConfiguration NpbStaticRouteConfigurationPtrInput
	// Common properties for Layer3Configuration.
	OptionBLayer3Configuration NetworkToNetworkInterconnectPropertiesOptionBLayer3ConfigurationPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Based on this option layer3 parameters are mandatory. Example: True/False
	UseOptionB pulumi.StringInput
}

func (NetworkToNetworkInterconnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkToNetworkInterconnectArgs)(nil)).Elem()
}

type NetworkToNetworkInterconnectInput interface {
	pulumi.Input

	ToNetworkToNetworkInterconnectOutput() NetworkToNetworkInterconnectOutput
	ToNetworkToNetworkInterconnectOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectOutput
}

func (*NetworkToNetworkInterconnect) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkToNetworkInterconnect)(nil)).Elem()
}

func (i *NetworkToNetworkInterconnect) ToNetworkToNetworkInterconnectOutput() NetworkToNetworkInterconnectOutput {
	return i.ToNetworkToNetworkInterconnectOutputWithContext(context.Background())
}

func (i *NetworkToNetworkInterconnect) ToNetworkToNetworkInterconnectOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkToNetworkInterconnectOutput)
}

type NetworkToNetworkInterconnectOutput struct{ *pulumi.OutputState }

func (NetworkToNetworkInterconnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkToNetworkInterconnect)(nil)).Elem()
}

func (o NetworkToNetworkInterconnectOutput) ToNetworkToNetworkInterconnectOutput() NetworkToNetworkInterconnectOutput {
	return o
}

func (o NetworkToNetworkInterconnectOutput) ToNetworkToNetworkInterconnectOutputWithContext(ctx context.Context) NetworkToNetworkInterconnectOutput {
	return o
}

// Administrative state of the resource.
func (o NetworkToNetworkInterconnectOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringOutput { return v.AdministrativeState }).(pulumi.StringOutput)
}

// Configuration state of the resource.
func (o NetworkToNetworkInterconnectOutput) ConfigurationState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringOutput { return v.ConfigurationState }).(pulumi.StringOutput)
}

// Egress Acl. ARM resource ID of Access Control Lists.
func (o NetworkToNetworkInterconnectOutput) EgressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringPtrOutput { return v.EgressAclId }).(pulumi.StringPtrOutput)
}

// Export Route Policy configuration.
func (o NetworkToNetworkInterconnectOutput) ExportRoutePolicy() ExportRoutePolicyInformationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) ExportRoutePolicyInformationResponsePtrOutput {
		return v.ExportRoutePolicy
	}).(ExportRoutePolicyInformationResponsePtrOutput)
}

// Import Route Policy configuration.
func (o NetworkToNetworkInterconnectOutput) ImportRoutePolicy() ImportRoutePolicyInformationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) ImportRoutePolicyInformationResponsePtrOutput {
		return v.ImportRoutePolicy
	}).(ImportRoutePolicyInformationResponsePtrOutput)
}

// Ingress Acl. ARM resource ID of Access Control Lists.
func (o NetworkToNetworkInterconnectOutput) IngressAclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringPtrOutput { return v.IngressAclId }).(pulumi.StringPtrOutput)
}

// Configuration to use NNI for Infrastructure Management. Example: True/False.
func (o NetworkToNetworkInterconnectOutput) IsManagementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringPtrOutput { return v.IsManagementType }).(pulumi.StringPtrOutput)
}

// Common properties for Layer2 Configuration.
func (o NetworkToNetworkInterconnectOutput) Layer2Configuration() Layer2ConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) Layer2ConfigurationResponsePtrOutput {
		return v.Layer2Configuration
	}).(Layer2ConfigurationResponsePtrOutput)
}

// The name of the resource
func (o NetworkToNetworkInterconnectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of NNI used. Example: CE | NPB
func (o NetworkToNetworkInterconnectOutput) NniType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringPtrOutput { return v.NniType }).(pulumi.StringPtrOutput)
}

// NPB Static Route Configuration properties.
func (o NetworkToNetworkInterconnectOutput) NpbStaticRouteConfiguration() NpbStaticRouteConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) NpbStaticRouteConfigurationResponsePtrOutput {
		return v.NpbStaticRouteConfiguration
	}).(NpbStaticRouteConfigurationResponsePtrOutput)
}

// Common properties for Layer3Configuration.
func (o NetworkToNetworkInterconnectOutput) OptionBLayer3Configuration() NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput {
		return v.OptionBLayer3Configuration
	}).(NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3ConfigurationPtrOutput)
}

// Provisioning state of the resource.
func (o NetworkToNetworkInterconnectOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o NetworkToNetworkInterconnectOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o NetworkToNetworkInterconnectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Based on this option layer3 parameters are mandatory. Example: True/False
func (o NetworkToNetworkInterconnectOutput) UseOptionB() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkToNetworkInterconnect) pulumi.StringOutput { return v.UseOptionB }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkToNetworkInterconnectOutput{})
}
