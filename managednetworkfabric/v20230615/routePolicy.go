// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230615

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The RoutePolicy resource definition.
type RoutePolicy struct {
	pulumi.CustomResourceState

	// AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
	AddressFamilyType pulumi.StringPtrOutput `pulumi:"addressFamilyType"`
	// Administrative state of the resource.
	AdministrativeState pulumi.StringOutput `pulumi:"administrativeState"`
	// Switch configuration description.
	Annotation pulumi.StringPtrOutput `pulumi:"annotation"`
	// Configuration state of the resource.
	ConfigurationState pulumi.StringOutput `pulumi:"configurationState"`
	// Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
	DefaultAction pulumi.StringPtrOutput `pulumi:"defaultAction"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Arm Resource ID of Network Fabric.
	NetworkFabricId pulumi.StringOutput `pulumi:"networkFabricId"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Route Policy statements.
	Statements RoutePolicyStatementPropertiesResponseArrayOutput `pulumi:"statements"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRoutePolicy registers a new resource with the given unique name, arguments, and options.
func NewRoutePolicy(ctx *pulumi.Context,
	name string, args *RoutePolicyArgs, opts ...pulumi.ResourceOption) (*RoutePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkFabricId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkFabricId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Statements == nil {
		return nil, errors.New("invalid value for required argument 'Statements'")
	}
	if args.AddressFamilyType == nil {
		args.AddressFamilyType = pulumi.StringPtr("IPv4")
	}
	if args.DefaultAction == nil {
		args.DefaultAction = pulumi.StringPtr("Deny")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:managednetworkfabric:RoutePolicy"),
		},
		{
			Type: pulumi.String("azure-native:managednetworkfabric/v20230201preview:RoutePolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RoutePolicy
	err := ctx.RegisterResource("azure-native:managednetworkfabric/v20230615:RoutePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutePolicy gets an existing RoutePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutePolicyState, opts ...pulumi.ResourceOption) (*RoutePolicy, error) {
	var resource RoutePolicy
	err := ctx.ReadResource("azure-native:managednetworkfabric/v20230615:RoutePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutePolicy resources.
type routePolicyState struct {
}

type RoutePolicyState struct {
}

func (RoutePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*routePolicyState)(nil)).Elem()
}

type routePolicyArgs struct {
	// AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
	AddressFamilyType *string `pulumi:"addressFamilyType"`
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
	DefaultAction *string `pulumi:"defaultAction"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Arm Resource ID of Network Fabric.
	NetworkFabricId string `pulumi:"networkFabricId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the Route Policy.
	RoutePolicyName *string `pulumi:"routePolicyName"`
	// Route Policy statements.
	Statements []RoutePolicyStatementProperties `pulumi:"statements"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RoutePolicy resource.
type RoutePolicyArgs struct {
	// AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
	AddressFamilyType pulumi.StringPtrInput
	// Switch configuration description.
	Annotation pulumi.StringPtrInput
	// Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
	DefaultAction pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Arm Resource ID of Network Fabric.
	NetworkFabricId pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Name of the Route Policy.
	RoutePolicyName pulumi.StringPtrInput
	// Route Policy statements.
	Statements RoutePolicyStatementPropertiesArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (RoutePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routePolicyArgs)(nil)).Elem()
}

type RoutePolicyInput interface {
	pulumi.Input

	ToRoutePolicyOutput() RoutePolicyOutput
	ToRoutePolicyOutputWithContext(ctx context.Context) RoutePolicyOutput
}

func (*RoutePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutePolicy)(nil)).Elem()
}

func (i *RoutePolicy) ToRoutePolicyOutput() RoutePolicyOutput {
	return i.ToRoutePolicyOutputWithContext(context.Background())
}

func (i *RoutePolicy) ToRoutePolicyOutputWithContext(ctx context.Context) RoutePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePolicyOutput)
}

func (i *RoutePolicy) ToOutput(ctx context.Context) pulumix.Output[*RoutePolicy] {
	return pulumix.Output[*RoutePolicy]{
		OutputState: i.ToRoutePolicyOutputWithContext(ctx).OutputState,
	}
}

type RoutePolicyOutput struct{ *pulumi.OutputState }

func (RoutePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutePolicy)(nil)).Elem()
}

func (o RoutePolicyOutput) ToRoutePolicyOutput() RoutePolicyOutput {
	return o
}

func (o RoutePolicyOutput) ToRoutePolicyOutputWithContext(ctx context.Context) RoutePolicyOutput {
	return o
}

func (o RoutePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*RoutePolicy] {
	return pulumix.Output[*RoutePolicy]{
		OutputState: o.OutputState,
	}
}

// AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
func (o RoutePolicyOutput) AddressFamilyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringPtrOutput { return v.AddressFamilyType }).(pulumi.StringPtrOutput)
}

// Administrative state of the resource.
func (o RoutePolicyOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringOutput { return v.AdministrativeState }).(pulumi.StringOutput)
}

// Switch configuration description.
func (o RoutePolicyOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringPtrOutput { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Configuration state of the resource.
func (o RoutePolicyOutput) ConfigurationState() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringOutput { return v.ConfigurationState }).(pulumi.StringOutput)
}

// Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
func (o RoutePolicyOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringPtrOutput { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o RoutePolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o RoutePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Arm Resource ID of Network Fabric.
func (o RoutePolicyOutput) NetworkFabricId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringOutput { return v.NetworkFabricId }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o RoutePolicyOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Route Policy statements.
func (o RoutePolicyOutput) Statements() RoutePolicyStatementPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *RoutePolicy) RoutePolicyStatementPropertiesResponseArrayOutput { return v.Statements }).(RoutePolicyStatementPropertiesResponseArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o RoutePolicyOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *RoutePolicy) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o RoutePolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o RoutePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RoutePolicyOutput{})
}
