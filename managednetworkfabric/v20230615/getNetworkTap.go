// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230615

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves details of this Network Tap.
func LookupNetworkTap(ctx *pulumi.Context, args *LookupNetworkTapArgs, opts ...pulumi.InvokeOption) (*LookupNetworkTapResult, error) {
	var rv LookupNetworkTapResult
	err := ctx.Invoke("azure-native:managednetworkfabric/v20230615:getNetworkTap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupNetworkTapArgs struct {
	// Name of the Network Tap.
	NetworkTapName string `pulumi:"networkTapName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The Network Tap resource definition.
type LookupNetworkTapResult struct {
	// Administrative state of the resource. Example -Enabled/Disabled
	AdministrativeState string `pulumi:"administrativeState"`
	// Switch configuration description.
	Annotation *string `pulumi:"annotation"`
	// Gets the configurations state of the resource.
	ConfigurationState string `pulumi:"configurationState"`
	// List of destinations to send the filter traffic.
	Destinations []NetworkTapPropertiesResponseDestinations `pulumi:"destinations"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// ARM resource ID of the Network Packet Broker.
	NetworkPacketBrokerId string `pulumi:"networkPacketBrokerId"`
	// Polling type.
	PollingType *string `pulumi:"pollingType"`
	// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
	ProvisioningState string `pulumi:"provisioningState"`
	// Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
	SourceTapRuleId string `pulumi:"sourceTapRuleId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupNetworkTapResult
func (val *LookupNetworkTapResult) Defaults() *LookupNetworkTapResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PollingType == nil {
		pollingType_ := "Pull"
		tmp.PollingType = &pollingType_
	}
	return &tmp
}

func LookupNetworkTapOutput(ctx *pulumi.Context, args LookupNetworkTapOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkTapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkTapResult, error) {
			args := v.(LookupNetworkTapArgs)
			r, err := LookupNetworkTap(ctx, &args, opts...)
			var s LookupNetworkTapResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkTapResultOutput)
}

type LookupNetworkTapOutputArgs struct {
	// Name of the Network Tap.
	NetworkTapName pulumi.StringInput `pulumi:"networkTapName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupNetworkTapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkTapArgs)(nil)).Elem()
}

// The Network Tap resource definition.
type LookupNetworkTapResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkTapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkTapResult)(nil)).Elem()
}

func (o LookupNetworkTapResultOutput) ToLookupNetworkTapResultOutput() LookupNetworkTapResultOutput {
	return o
}

func (o LookupNetworkTapResultOutput) ToLookupNetworkTapResultOutputWithContext(ctx context.Context) LookupNetworkTapResultOutput {
	return o
}

// Administrative state of the resource. Example -Enabled/Disabled
func (o LookupNetworkTapResultOutput) AdministrativeState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.AdministrativeState }).(pulumi.StringOutput)
}

// Switch configuration description.
func (o LookupNetworkTapResultOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Gets the configurations state of the resource.
func (o LookupNetworkTapResultOutput) ConfigurationState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.ConfigurationState }).(pulumi.StringOutput)
}

// List of destinations to send the filter traffic.
func (o LookupNetworkTapResultOutput) Destinations() NetworkTapPropertiesResponseDestinationsArrayOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) []NetworkTapPropertiesResponseDestinations { return v.Destinations }).(NetworkTapPropertiesResponseDestinationsArrayOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupNetworkTapResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupNetworkTapResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupNetworkTapResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.Name }).(pulumi.StringOutput)
}

// ARM resource ID of the Network Packet Broker.
func (o LookupNetworkTapResultOutput) NetworkPacketBrokerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.NetworkPacketBrokerId }).(pulumi.StringOutput)
}

// Polling type.
func (o LookupNetworkTapResultOutput) PollingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) *string { return v.PollingType }).(pulumi.StringPtrOutput)
}

// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
func (o LookupNetworkTapResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
func (o LookupNetworkTapResultOutput) SourceTapRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.SourceTapRuleId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupNetworkTapResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupNetworkTapResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupNetworkTapResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkTapResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkTapResultOutput{})
}
