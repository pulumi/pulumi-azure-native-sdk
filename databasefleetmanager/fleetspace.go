// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasefleetmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A fleetspace.
//
// Uses Azure REST API version 2025-02-01-preview. In version 2.x of the Azure Native provider, it used API version 2025-02-01-preview.
type Fleetspace struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// A Fleetspace properties.
	Properties FleetspacePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFleetspace registers a new resource with the given unique name, arguments, and options.
func NewFleetspace(ctx *pulumi.Context,
	name string, args *FleetspaceArgs, opts ...pulumi.ResourceOption) (*Fleetspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FleetName == nil {
		return nil, errors.New("invalid value for required argument 'FleetName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:databasefleetmanager/v20250201preview:Fleetspace"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Fleetspace
	err := ctx.RegisterResource("azure-native:databasefleetmanager:Fleetspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleetspace gets an existing Fleetspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleetspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetspaceState, opts ...pulumi.ResourceOption) (*Fleetspace, error) {
	var resource Fleetspace
	err := ctx.ReadResource("azure-native:databasefleetmanager:Fleetspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleetspace resources.
type fleetspaceState struct {
}

type FleetspaceState struct {
}

func (FleetspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetspaceState)(nil)).Elem()
}

type fleetspaceArgs struct {
	// Name of the database fleet.
	FleetName string `pulumi:"fleetName"`
	// Name of the fleetspace.
	FleetspaceName *string `pulumi:"fleetspaceName"`
	// A Fleetspace properties.
	Properties *FleetspaceProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Fleetspace resource.
type FleetspaceArgs struct {
	// Name of the database fleet.
	FleetName pulumi.StringInput
	// Name of the fleetspace.
	FleetspaceName pulumi.StringPtrInput
	// A Fleetspace properties.
	Properties FleetspacePropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (FleetspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetspaceArgs)(nil)).Elem()
}

type FleetspaceInput interface {
	pulumi.Input

	ToFleetspaceOutput() FleetspaceOutput
	ToFleetspaceOutputWithContext(ctx context.Context) FleetspaceOutput
}

func (*Fleetspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleetspace)(nil)).Elem()
}

func (i *Fleetspace) ToFleetspaceOutput() FleetspaceOutput {
	return i.ToFleetspaceOutputWithContext(context.Background())
}

func (i *Fleetspace) ToFleetspaceOutputWithContext(ctx context.Context) FleetspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetspaceOutput)
}

type FleetspaceOutput struct{ *pulumi.OutputState }

func (FleetspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleetspace)(nil)).Elem()
}

func (o FleetspaceOutput) ToFleetspaceOutput() FleetspaceOutput {
	return o
}

func (o FleetspaceOutput) ToFleetspaceOutputWithContext(ctx context.Context) FleetspaceOutput {
	return o
}

// The Azure API version of the resource.
func (o FleetspaceOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleetspace) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o FleetspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleetspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A Fleetspace properties.
func (o FleetspaceOutput) Properties() FleetspacePropertiesResponseOutput {
	return o.ApplyT(func(v *Fleetspace) FleetspacePropertiesResponseOutput { return v.Properties }).(FleetspacePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o FleetspaceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Fleetspace) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o FleetspaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleetspace) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FleetspaceOutput{})
}
