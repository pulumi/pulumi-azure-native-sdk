// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250201preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A fleet database.
type FleetDatabase struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Fleet database properties.
	Properties FleetDatabasePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFleetDatabase registers a new resource with the given unique name, arguments, and options.
func NewFleetDatabase(ctx *pulumi.Context,
	name string, args *FleetDatabaseArgs, opts ...pulumi.ResourceOption) (*FleetDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FleetName == nil {
		return nil, errors.New("invalid value for required argument 'FleetName'")
	}
	if args.FleetspaceName == nil {
		return nil, errors.New("invalid value for required argument 'FleetspaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:databasefleetmanager:FleetDatabase"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FleetDatabase
	err := ctx.RegisterResource("azure-native:databasefleetmanager/v20250201preview:FleetDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleetDatabase gets an existing FleetDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetDatabaseState, opts ...pulumi.ResourceOption) (*FleetDatabase, error) {
	var resource FleetDatabase
	err := ctx.ReadResource("azure-native:databasefleetmanager/v20250201preview:FleetDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FleetDatabase resources.
type fleetDatabaseState struct {
}

type FleetDatabaseState struct {
}

func (FleetDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetDatabaseState)(nil)).Elem()
}

type fleetDatabaseArgs struct {
	// Name of the database.
	DatabaseName *string `pulumi:"databaseName"`
	// Name of the database fleet.
	FleetName string `pulumi:"fleetName"`
	// Name of the fleetspace.
	FleetspaceName string `pulumi:"fleetspaceName"`
	// Fleet database properties.
	Properties *FleetDatabaseProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a FleetDatabase resource.
type FleetDatabaseArgs struct {
	// Name of the database.
	DatabaseName pulumi.StringPtrInput
	// Name of the database fleet.
	FleetName pulumi.StringInput
	// Name of the fleetspace.
	FleetspaceName pulumi.StringInput
	// Fleet database properties.
	Properties FleetDatabasePropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (FleetDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetDatabaseArgs)(nil)).Elem()
}

type FleetDatabaseInput interface {
	pulumi.Input

	ToFleetDatabaseOutput() FleetDatabaseOutput
	ToFleetDatabaseOutputWithContext(ctx context.Context) FleetDatabaseOutput
}

func (*FleetDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetDatabase)(nil)).Elem()
}

func (i *FleetDatabase) ToFleetDatabaseOutput() FleetDatabaseOutput {
	return i.ToFleetDatabaseOutputWithContext(context.Background())
}

func (i *FleetDatabase) ToFleetDatabaseOutputWithContext(ctx context.Context) FleetDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetDatabaseOutput)
}

type FleetDatabaseOutput struct{ *pulumi.OutputState }

func (FleetDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetDatabase)(nil)).Elem()
}

func (o FleetDatabaseOutput) ToFleetDatabaseOutput() FleetDatabaseOutput {
	return o
}

func (o FleetDatabaseOutput) ToFleetDatabaseOutputWithContext(ctx context.Context) FleetDatabaseOutput {
	return o
}

// The name of the resource
func (o FleetDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FleetDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Fleet database properties.
func (o FleetDatabaseOutput) Properties() FleetDatabasePropertiesResponseOutput {
	return o.ApplyT(func(v *FleetDatabase) FleetDatabasePropertiesResponseOutput { return v.Properties }).(FleetDatabasePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o FleetDatabaseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *FleetDatabase) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o FleetDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FleetDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FleetDatabaseOutput{})
}
