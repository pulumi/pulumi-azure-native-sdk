// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the full endpoint URL for an event subscription of a namespace topic.
// Azure REST API version: 2024-06-01-preview.
func GetNamespaceTopicEventSubscriptionFullUrl(ctx *pulumi.Context, args *GetNamespaceTopicEventSubscriptionFullUrlArgs, opts ...pulumi.InvokeOption) (*GetNamespaceTopicEventSubscriptionFullUrlResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetNamespaceTopicEventSubscriptionFullUrlResult
	err := ctx.Invoke("azure-native:eventgrid:getNamespaceTopicEventSubscriptionFullUrl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetNamespaceTopicEventSubscriptionFullUrlArgs struct {
	// Name of the event subscription.
	EventSubscriptionName string `pulumi:"eventSubscriptionName"`
	// Name of the namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// The name of the resource group within the user's subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the namespace topic.
	TopicName string `pulumi:"topicName"`
}

// Full endpoint URL of an event subscription
type GetNamespaceTopicEventSubscriptionFullUrlResult struct {
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl *string `pulumi:"endpointUrl"`
}

func GetNamespaceTopicEventSubscriptionFullUrlOutput(ctx *pulumi.Context, args GetNamespaceTopicEventSubscriptionFullUrlOutputArgs, opts ...pulumi.InvokeOption) GetNamespaceTopicEventSubscriptionFullUrlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNamespaceTopicEventSubscriptionFullUrlResult, error) {
			args := v.(GetNamespaceTopicEventSubscriptionFullUrlArgs)
			r, err := GetNamespaceTopicEventSubscriptionFullUrl(ctx, &args, opts...)
			var s GetNamespaceTopicEventSubscriptionFullUrlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNamespaceTopicEventSubscriptionFullUrlResultOutput)
}

type GetNamespaceTopicEventSubscriptionFullUrlOutputArgs struct {
	// Name of the event subscription.
	EventSubscriptionName pulumi.StringInput `pulumi:"eventSubscriptionName"`
	// Name of the namespace.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The name of the resource group within the user's subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the namespace topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetNamespaceTopicEventSubscriptionFullUrlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespaceTopicEventSubscriptionFullUrlArgs)(nil)).Elem()
}

// Full endpoint URL of an event subscription
type GetNamespaceTopicEventSubscriptionFullUrlResultOutput struct{ *pulumi.OutputState }

func (GetNamespaceTopicEventSubscriptionFullUrlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespaceTopicEventSubscriptionFullUrlResult)(nil)).Elem()
}

func (o GetNamespaceTopicEventSubscriptionFullUrlResultOutput) ToGetNamespaceTopicEventSubscriptionFullUrlResultOutput() GetNamespaceTopicEventSubscriptionFullUrlResultOutput {
	return o
}

func (o GetNamespaceTopicEventSubscriptionFullUrlResultOutput) ToGetNamespaceTopicEventSubscriptionFullUrlResultOutputWithContext(ctx context.Context) GetNamespaceTopicEventSubscriptionFullUrlResultOutput {
	return o
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o GetNamespaceTopicEventSubscriptionFullUrlResultOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNamespaceTopicEventSubscriptionFullUrlResult) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNamespaceTopicEventSubscriptionFullUrlResultOutput{})
}
