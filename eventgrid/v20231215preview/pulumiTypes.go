// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231215preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Azure Active Directory Partner Client Authentication
type AzureADPartnerClientAuthentication struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `pulumi:"azureActiveDirectoryTenantId"`
	// Type of client authentication
	// Expected value is 'AzureAD'.
	ClientAuthenticationType string `pulumi:"clientAuthenticationType"`
}

// Defaults sets the appropriate defaults for AzureADPartnerClientAuthentication
func (val *AzureADPartnerClientAuthentication) Defaults() *AzureADPartnerClientAuthentication {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.ClientAuthenticationType) {
		tmp.ClientAuthenticationType = "AzureAD"
	}
	return &tmp
}

// AzureADPartnerClientAuthenticationInput is an input type that accepts AzureADPartnerClientAuthenticationArgs and AzureADPartnerClientAuthenticationOutput values.
// You can construct a concrete instance of `AzureADPartnerClientAuthenticationInput` via:
//
//	AzureADPartnerClientAuthenticationArgs{...}
type AzureADPartnerClientAuthenticationInput interface {
	pulumi.Input

	ToAzureADPartnerClientAuthenticationOutput() AzureADPartnerClientAuthenticationOutput
	ToAzureADPartnerClientAuthenticationOutputWithContext(context.Context) AzureADPartnerClientAuthenticationOutput
}

// Azure Active Directory Partner Client Authentication
type AzureADPartnerClientAuthenticationArgs struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri pulumi.StringPtrInput `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId pulumi.StringPtrInput `pulumi:"azureActiveDirectoryTenantId"`
	// Type of client authentication
	// Expected value is 'AzureAD'.
	ClientAuthenticationType pulumi.StringInput `pulumi:"clientAuthenticationType"`
}

// Defaults sets the appropriate defaults for AzureADPartnerClientAuthenticationArgs
func (val *AzureADPartnerClientAuthenticationArgs) Defaults() *AzureADPartnerClientAuthenticationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClientAuthenticationType == nil {
		tmp.ClientAuthenticationType = pulumi.String("AzureAD")
	}
	return &tmp
}
func (AzureADPartnerClientAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureADPartnerClientAuthentication)(nil)).Elem()
}

func (i AzureADPartnerClientAuthenticationArgs) ToAzureADPartnerClientAuthenticationOutput() AzureADPartnerClientAuthenticationOutput {
	return i.ToAzureADPartnerClientAuthenticationOutputWithContext(context.Background())
}

func (i AzureADPartnerClientAuthenticationArgs) ToAzureADPartnerClientAuthenticationOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureADPartnerClientAuthenticationOutput)
}

func (i AzureADPartnerClientAuthenticationArgs) ToAzureADPartnerClientAuthenticationPtrOutput() AzureADPartnerClientAuthenticationPtrOutput {
	return i.ToAzureADPartnerClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i AzureADPartnerClientAuthenticationArgs) ToAzureADPartnerClientAuthenticationPtrOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureADPartnerClientAuthenticationOutput).ToAzureADPartnerClientAuthenticationPtrOutputWithContext(ctx)
}

// AzureADPartnerClientAuthenticationPtrInput is an input type that accepts AzureADPartnerClientAuthenticationArgs, AzureADPartnerClientAuthenticationPtr and AzureADPartnerClientAuthenticationPtrOutput values.
// You can construct a concrete instance of `AzureADPartnerClientAuthenticationPtrInput` via:
//
//	        AzureADPartnerClientAuthenticationArgs{...}
//
//	or:
//
//	        nil
type AzureADPartnerClientAuthenticationPtrInput interface {
	pulumi.Input

	ToAzureADPartnerClientAuthenticationPtrOutput() AzureADPartnerClientAuthenticationPtrOutput
	ToAzureADPartnerClientAuthenticationPtrOutputWithContext(context.Context) AzureADPartnerClientAuthenticationPtrOutput
}

type azureADPartnerClientAuthenticationPtrType AzureADPartnerClientAuthenticationArgs

func AzureADPartnerClientAuthenticationPtr(v *AzureADPartnerClientAuthenticationArgs) AzureADPartnerClientAuthenticationPtrInput {
	return (*azureADPartnerClientAuthenticationPtrType)(v)
}

func (*azureADPartnerClientAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureADPartnerClientAuthentication)(nil)).Elem()
}

func (i *azureADPartnerClientAuthenticationPtrType) ToAzureADPartnerClientAuthenticationPtrOutput() AzureADPartnerClientAuthenticationPtrOutput {
	return i.ToAzureADPartnerClientAuthenticationPtrOutputWithContext(context.Background())
}

func (i *azureADPartnerClientAuthenticationPtrType) ToAzureADPartnerClientAuthenticationPtrOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureADPartnerClientAuthenticationPtrOutput)
}

// Azure Active Directory Partner Client Authentication
type AzureADPartnerClientAuthenticationOutput struct{ *pulumi.OutputState }

func (AzureADPartnerClientAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureADPartnerClientAuthentication)(nil)).Elem()
}

func (o AzureADPartnerClientAuthenticationOutput) ToAzureADPartnerClientAuthenticationOutput() AzureADPartnerClientAuthenticationOutput {
	return o
}

func (o AzureADPartnerClientAuthenticationOutput) ToAzureADPartnerClientAuthenticationOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationOutput {
	return o
}

func (o AzureADPartnerClientAuthenticationOutput) ToAzureADPartnerClientAuthenticationPtrOutput() AzureADPartnerClientAuthenticationPtrOutput {
	return o.ToAzureADPartnerClientAuthenticationPtrOutputWithContext(context.Background())
}

func (o AzureADPartnerClientAuthenticationOutput) ToAzureADPartnerClientAuthenticationPtrOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureADPartnerClientAuthentication) *AzureADPartnerClientAuthentication {
		return &v
	}).(AzureADPartnerClientAuthenticationPtrOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureADPartnerClientAuthentication) *string { return v.AzureActiveDirectoryApplicationIdOrUri }).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureADPartnerClientAuthentication) *string { return v.AzureActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// Type of client authentication
// Expected value is 'AzureAD'.
func (o AzureADPartnerClientAuthenticationOutput) ClientAuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureADPartnerClientAuthentication) string { return v.ClientAuthenticationType }).(pulumi.StringOutput)
}

type AzureADPartnerClientAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (AzureADPartnerClientAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureADPartnerClientAuthentication)(nil)).Elem()
}

func (o AzureADPartnerClientAuthenticationPtrOutput) ToAzureADPartnerClientAuthenticationPtrOutput() AzureADPartnerClientAuthenticationPtrOutput {
	return o
}

func (o AzureADPartnerClientAuthenticationPtrOutput) ToAzureADPartnerClientAuthenticationPtrOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationPtrOutput {
	return o
}

func (o AzureADPartnerClientAuthenticationPtrOutput) Elem() AzureADPartnerClientAuthenticationOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthentication) AzureADPartnerClientAuthentication {
		if v != nil {
			return *v
		}
		var ret AzureADPartnerClientAuthentication
		return ret
	}).(AzureADPartnerClientAuthenticationOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationPtrOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryApplicationIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationPtrOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// Type of client authentication
// Expected value is 'AzureAD'.
func (o AzureADPartnerClientAuthenticationPtrOutput) ClientAuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.ClientAuthenticationType
	}).(pulumi.StringPtrOutput)
}

// Azure Active Directory Partner Client Authentication
type AzureADPartnerClientAuthenticationResponse struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `pulumi:"azureActiveDirectoryTenantId"`
	// Type of client authentication
	// Expected value is 'AzureAD'.
	ClientAuthenticationType string `pulumi:"clientAuthenticationType"`
}

// Defaults sets the appropriate defaults for AzureADPartnerClientAuthenticationResponse
func (val *AzureADPartnerClientAuthenticationResponse) Defaults() *AzureADPartnerClientAuthenticationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.ClientAuthenticationType) {
		tmp.ClientAuthenticationType = "AzureAD"
	}
	return &tmp
}

// Azure Active Directory Partner Client Authentication
type AzureADPartnerClientAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (AzureADPartnerClientAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureADPartnerClientAuthenticationResponse)(nil)).Elem()
}

func (o AzureADPartnerClientAuthenticationResponseOutput) ToAzureADPartnerClientAuthenticationResponseOutput() AzureADPartnerClientAuthenticationResponseOutput {
	return o
}

func (o AzureADPartnerClientAuthenticationResponseOutput) ToAzureADPartnerClientAuthenticationResponseOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationResponseOutput {
	return o
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationResponseOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureADPartnerClientAuthenticationResponse) *string {
		return v.AzureActiveDirectoryApplicationIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationResponseOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureADPartnerClientAuthenticationResponse) *string { return v.AzureActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// Type of client authentication
// Expected value is 'AzureAD'.
func (o AzureADPartnerClientAuthenticationResponseOutput) ClientAuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureADPartnerClientAuthenticationResponse) string { return v.ClientAuthenticationType }).(pulumi.StringOutput)
}

type AzureADPartnerClientAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureADPartnerClientAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureADPartnerClientAuthenticationResponse)(nil)).Elem()
}

func (o AzureADPartnerClientAuthenticationResponsePtrOutput) ToAzureADPartnerClientAuthenticationResponsePtrOutput() AzureADPartnerClientAuthenticationResponsePtrOutput {
	return o
}

func (o AzureADPartnerClientAuthenticationResponsePtrOutput) ToAzureADPartnerClientAuthenticationResponsePtrOutputWithContext(ctx context.Context) AzureADPartnerClientAuthenticationResponsePtrOutput {
	return o
}

func (o AzureADPartnerClientAuthenticationResponsePtrOutput) Elem() AzureADPartnerClientAuthenticationResponseOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthenticationResponse) AzureADPartnerClientAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret AzureADPartnerClientAuthenticationResponse
		return ret
	}).(AzureADPartnerClientAuthenticationResponseOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationResponsePtrOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryApplicationIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o AzureADPartnerClientAuthenticationResponsePtrOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// Type of client authentication
// Expected value is 'AzureAD'.
func (o AzureADPartnerClientAuthenticationResponsePtrOutput) ClientAuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureADPartnerClientAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientAuthenticationType
	}).(pulumi.StringPtrOutput)
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestination struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'AzureFunction'.
	EndpointType string `pulumi:"endpointType"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AzureFunctionEventSubscriptionDestination
func (val *AzureFunctionEventSubscriptionDestination) Defaults() *AzureFunctionEventSubscriptionDestination {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxEventsPerBatch == nil {
		maxEventsPerBatch_ := 1
		tmp.MaxEventsPerBatch = &maxEventsPerBatch_
	}
	if tmp.PreferredBatchSizeInKilobytes == nil {
		preferredBatchSizeInKilobytes_ := 64
		tmp.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes_
	}
	return &tmp
}

// AzureFunctionEventSubscriptionDestinationInput is an input type that accepts AzureFunctionEventSubscriptionDestinationArgs and AzureFunctionEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `AzureFunctionEventSubscriptionDestinationInput` via:
//
//	AzureFunctionEventSubscriptionDestinationArgs{...}
type AzureFunctionEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToAzureFunctionEventSubscriptionDestinationOutput() AzureFunctionEventSubscriptionDestinationOutput
	ToAzureFunctionEventSubscriptionDestinationOutputWithContext(context.Context) AzureFunctionEventSubscriptionDestinationOutput
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestinationArgs struct {
	// Delivery attribute details.
	DeliveryAttributeMappings pulumi.ArrayInput `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'AzureFunction'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
	// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AzureFunctionEventSubscriptionDestinationArgs
func (val *AzureFunctionEventSubscriptionDestinationArgs) Defaults() *AzureFunctionEventSubscriptionDestinationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxEventsPerBatch == nil {
		tmp.MaxEventsPerBatch = pulumi.IntPtr(1)
	}
	if tmp.PreferredBatchSizeInKilobytes == nil {
		tmp.PreferredBatchSizeInKilobytes = pulumi.IntPtr(64)
	}
	return &tmp
}
func (AzureFunctionEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionEventSubscriptionDestination)(nil)).Elem()
}

func (i AzureFunctionEventSubscriptionDestinationArgs) ToAzureFunctionEventSubscriptionDestinationOutput() AzureFunctionEventSubscriptionDestinationOutput {
	return i.ToAzureFunctionEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i AzureFunctionEventSubscriptionDestinationArgs) ToAzureFunctionEventSubscriptionDestinationOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionEventSubscriptionDestinationOutput)
}

func (i AzureFunctionEventSubscriptionDestinationArgs) ToAzureFunctionEventSubscriptionDestinationPtrOutput() AzureFunctionEventSubscriptionDestinationPtrOutput {
	return i.ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i AzureFunctionEventSubscriptionDestinationArgs) ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionEventSubscriptionDestinationOutput).ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// AzureFunctionEventSubscriptionDestinationPtrInput is an input type that accepts AzureFunctionEventSubscriptionDestinationArgs, AzureFunctionEventSubscriptionDestinationPtr and AzureFunctionEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `AzureFunctionEventSubscriptionDestinationPtrInput` via:
//
//	        AzureFunctionEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type AzureFunctionEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToAzureFunctionEventSubscriptionDestinationPtrOutput() AzureFunctionEventSubscriptionDestinationPtrOutput
	ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(context.Context) AzureFunctionEventSubscriptionDestinationPtrOutput
}

type azureFunctionEventSubscriptionDestinationPtrType AzureFunctionEventSubscriptionDestinationArgs

func AzureFunctionEventSubscriptionDestinationPtr(v *AzureFunctionEventSubscriptionDestinationArgs) AzureFunctionEventSubscriptionDestinationPtrInput {
	return (*azureFunctionEventSubscriptionDestinationPtrType)(v)
}

func (*azureFunctionEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFunctionEventSubscriptionDestination)(nil)).Elem()
}

func (i *azureFunctionEventSubscriptionDestinationPtrType) ToAzureFunctionEventSubscriptionDestinationPtrOutput() AzureFunctionEventSubscriptionDestinationPtrOutput {
	return i.ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *azureFunctionEventSubscriptionDestinationPtrType) ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionEventSubscriptionDestinationPtrOutput)
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (AzureFunctionEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionEventSubscriptionDestination)(nil)).Elem()
}

func (o AzureFunctionEventSubscriptionDestinationOutput) ToAzureFunctionEventSubscriptionDestinationOutput() AzureFunctionEventSubscriptionDestinationOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationOutput) ToAzureFunctionEventSubscriptionDestinationOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationOutput) ToAzureFunctionEventSubscriptionDestinationPtrOutput() AzureFunctionEventSubscriptionDestinationPtrOutput {
	return o.ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o AzureFunctionEventSubscriptionDestinationOutput) ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFunctionEventSubscriptionDestination) *AzureFunctionEventSubscriptionDestination {
		return &v
	}).(AzureFunctionEventSubscriptionDestinationPtrOutput)
}

// Delivery attribute details.
func (o AzureFunctionEventSubscriptionDestinationOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestination) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'AzureFunction'.
func (o AzureFunctionEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Maximum number of events per batch.
func (o AzureFunctionEventSubscriptionDestinationOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestination) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o AzureFunctionEventSubscriptionDestinationOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestination) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
func (o AzureFunctionEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AzureFunctionEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (AzureFunctionEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFunctionEventSubscriptionDestination)(nil)).Elem()
}

func (o AzureFunctionEventSubscriptionDestinationPtrOutput) ToAzureFunctionEventSubscriptionDestinationPtrOutput() AzureFunctionEventSubscriptionDestinationPtrOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationPtrOutput) ToAzureFunctionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationPtrOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationPtrOutput) Elem() AzureFunctionEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestination) AzureFunctionEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret AzureFunctionEventSubscriptionDestination
		return ret
	}).(AzureFunctionEventSubscriptionDestinationOutput)
}

// Delivery attribute details.
func (o AzureFunctionEventSubscriptionDestinationPtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestination) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'AzureFunction'.
func (o AzureFunctionEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o AzureFunctionEventSubscriptionDestinationPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestination) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o AzureFunctionEventSubscriptionDestinationPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestination) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
func (o AzureFunctionEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestinationResponse struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'AzureFunction'.
	EndpointType string `pulumi:"endpointType"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AzureFunctionEventSubscriptionDestinationResponse
func (val *AzureFunctionEventSubscriptionDestinationResponse) Defaults() *AzureFunctionEventSubscriptionDestinationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxEventsPerBatch == nil {
		maxEventsPerBatch_ := 1
		tmp.MaxEventsPerBatch = &maxEventsPerBatch_
	}
	if tmp.PreferredBatchSizeInKilobytes == nil {
		preferredBatchSizeInKilobytes_ := 64
		tmp.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes_
	}
	return &tmp
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o AzureFunctionEventSubscriptionDestinationResponseOutput) ToAzureFunctionEventSubscriptionDestinationResponseOutput() AzureFunctionEventSubscriptionDestinationResponseOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationResponseOutput) ToAzureFunctionEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationResponseOutput {
	return o
}

// Delivery attribute details.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) []interface{} {
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'AzureFunction'.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Maximum number of events per batch.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AzureFunctionEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFunctionEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFunctionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) ToAzureFunctionEventSubscriptionDestinationResponsePtrOutput() AzureFunctionEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) ToAzureFunctionEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) Elem() AzureFunctionEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestinationResponse) AzureFunctionEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret AzureFunctionEventSubscriptionDestinationResponse
		return ret
	}).(AzureFunctionEventSubscriptionDestinationResponseOutput)
}

// Delivery attribute details.
func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestinationResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'AzureFunction'.
func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestinationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestinationResponse) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
func (o AzureFunctionEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// BoolEqualsAdvancedFilterInput is an input type that accepts BoolEqualsAdvancedFilterArgs and BoolEqualsAdvancedFilterOutput values.
// You can construct a concrete instance of `BoolEqualsAdvancedFilterInput` via:
//
//	BoolEqualsAdvancedFilterArgs{...}
type BoolEqualsAdvancedFilterInput interface {
	pulumi.Input

	ToBoolEqualsAdvancedFilterOutput() BoolEqualsAdvancedFilterOutput
	ToBoolEqualsAdvancedFilterOutputWithContext(context.Context) BoolEqualsAdvancedFilterOutput
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The boolean filter value.
	Value pulumi.BoolPtrInput `pulumi:"value"`
}

func (BoolEqualsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsAdvancedFilter)(nil)).Elem()
}

func (i BoolEqualsAdvancedFilterArgs) ToBoolEqualsAdvancedFilterOutput() BoolEqualsAdvancedFilterOutput {
	return i.ToBoolEqualsAdvancedFilterOutputWithContext(context.Background())
}

func (i BoolEqualsAdvancedFilterArgs) ToBoolEqualsAdvancedFilterOutputWithContext(ctx context.Context) BoolEqualsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoolEqualsAdvancedFilterOutput)
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterOutput struct{ *pulumi.OutputState }

func (BoolEqualsAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsAdvancedFilter)(nil)).Elem()
}

func (o BoolEqualsAdvancedFilterOutput) ToBoolEqualsAdvancedFilterOutput() BoolEqualsAdvancedFilterOutput {
	return o
}

func (o BoolEqualsAdvancedFilterOutput) ToBoolEqualsAdvancedFilterOutputWithContext(ctx context.Context) BoolEqualsAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o BoolEqualsAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'BoolEquals'.
func (o BoolEqualsAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The boolean filter value.
func (o BoolEqualsAdvancedFilterOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilter) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (BoolEqualsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsAdvancedFilterResponse)(nil)).Elem()
}

func (o BoolEqualsAdvancedFilterResponseOutput) ToBoolEqualsAdvancedFilterResponseOutput() BoolEqualsAdvancedFilterResponseOutput {
	return o
}

func (o BoolEqualsAdvancedFilterResponseOutput) ToBoolEqualsAdvancedFilterResponseOutputWithContext(ctx context.Context) BoolEqualsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o BoolEqualsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'BoolEquals'.
func (o BoolEqualsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The boolean filter value.
func (o BoolEqualsAdvancedFilterResponseOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilterResponse) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

// BoolEquals Filter.
type BoolEqualsFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// BoolEqualsFilterInput is an input type that accepts BoolEqualsFilterArgs and BoolEqualsFilterOutput values.
// You can construct a concrete instance of `BoolEqualsFilterInput` via:
//
//	BoolEqualsFilterArgs{...}
type BoolEqualsFilterInput interface {
	pulumi.Input

	ToBoolEqualsFilterOutput() BoolEqualsFilterOutput
	ToBoolEqualsFilterOutputWithContext(context.Context) BoolEqualsFilterOutput
}

// BoolEquals Filter.
type BoolEqualsFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The boolean filter value.
	Value pulumi.BoolPtrInput `pulumi:"value"`
}

func (BoolEqualsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsFilter)(nil)).Elem()
}

func (i BoolEqualsFilterArgs) ToBoolEqualsFilterOutput() BoolEqualsFilterOutput {
	return i.ToBoolEqualsFilterOutputWithContext(context.Background())
}

func (i BoolEqualsFilterArgs) ToBoolEqualsFilterOutputWithContext(ctx context.Context) BoolEqualsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoolEqualsFilterOutput)
}

// BoolEquals Filter.
type BoolEqualsFilterOutput struct{ *pulumi.OutputState }

func (BoolEqualsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsFilter)(nil)).Elem()
}

func (o BoolEqualsFilterOutput) ToBoolEqualsFilterOutput() BoolEqualsFilterOutput {
	return o
}

func (o BoolEqualsFilterOutput) ToBoolEqualsFilterOutputWithContext(ctx context.Context) BoolEqualsFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o BoolEqualsFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoolEqualsFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'BoolEquals'.
func (o BoolEqualsFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v BoolEqualsFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The boolean filter value.
func (o BoolEqualsFilterOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoolEqualsFilter) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

// BoolEquals Filter.
type BoolEqualsFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// BoolEquals Filter.
type BoolEqualsFilterResponseOutput struct{ *pulumi.OutputState }

func (BoolEqualsFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsFilterResponse)(nil)).Elem()
}

func (o BoolEqualsFilterResponseOutput) ToBoolEqualsFilterResponseOutput() BoolEqualsFilterResponseOutput {
	return o
}

func (o BoolEqualsFilterResponseOutput) ToBoolEqualsFilterResponseOutputWithContext(ctx context.Context) BoolEqualsFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o BoolEqualsFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoolEqualsFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'BoolEquals'.
func (o BoolEqualsFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v BoolEqualsFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The boolean filter value.
func (o BoolEqualsFilterResponseOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoolEqualsFilterResponse) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

// Client authentication settings for namespace resource.
type ClientAuthenticationSettings struct {
	// Alternative authentication name sources related to client authentication settings for namespace resource.
	AlternativeAuthenticationNameSources []string `pulumi:"alternativeAuthenticationNameSources"`
}

// ClientAuthenticationSettingsInput is an input type that accepts ClientAuthenticationSettingsArgs and ClientAuthenticationSettingsOutput values.
// You can construct a concrete instance of `ClientAuthenticationSettingsInput` via:
//
//	ClientAuthenticationSettingsArgs{...}
type ClientAuthenticationSettingsInput interface {
	pulumi.Input

	ToClientAuthenticationSettingsOutput() ClientAuthenticationSettingsOutput
	ToClientAuthenticationSettingsOutputWithContext(context.Context) ClientAuthenticationSettingsOutput
}

// Client authentication settings for namespace resource.
type ClientAuthenticationSettingsArgs struct {
	// Alternative authentication name sources related to client authentication settings for namespace resource.
	AlternativeAuthenticationNameSources pulumi.StringArrayInput `pulumi:"alternativeAuthenticationNameSources"`
}

func (ClientAuthenticationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientAuthenticationSettings)(nil)).Elem()
}

func (i ClientAuthenticationSettingsArgs) ToClientAuthenticationSettingsOutput() ClientAuthenticationSettingsOutput {
	return i.ToClientAuthenticationSettingsOutputWithContext(context.Background())
}

func (i ClientAuthenticationSettingsArgs) ToClientAuthenticationSettingsOutputWithContext(ctx context.Context) ClientAuthenticationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAuthenticationSettingsOutput)
}

func (i ClientAuthenticationSettingsArgs) ToClientAuthenticationSettingsPtrOutput() ClientAuthenticationSettingsPtrOutput {
	return i.ToClientAuthenticationSettingsPtrOutputWithContext(context.Background())
}

func (i ClientAuthenticationSettingsArgs) ToClientAuthenticationSettingsPtrOutputWithContext(ctx context.Context) ClientAuthenticationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAuthenticationSettingsOutput).ToClientAuthenticationSettingsPtrOutputWithContext(ctx)
}

// ClientAuthenticationSettingsPtrInput is an input type that accepts ClientAuthenticationSettingsArgs, ClientAuthenticationSettingsPtr and ClientAuthenticationSettingsPtrOutput values.
// You can construct a concrete instance of `ClientAuthenticationSettingsPtrInput` via:
//
//	        ClientAuthenticationSettingsArgs{...}
//
//	or:
//
//	        nil
type ClientAuthenticationSettingsPtrInput interface {
	pulumi.Input

	ToClientAuthenticationSettingsPtrOutput() ClientAuthenticationSettingsPtrOutput
	ToClientAuthenticationSettingsPtrOutputWithContext(context.Context) ClientAuthenticationSettingsPtrOutput
}

type clientAuthenticationSettingsPtrType ClientAuthenticationSettingsArgs

func ClientAuthenticationSettingsPtr(v *ClientAuthenticationSettingsArgs) ClientAuthenticationSettingsPtrInput {
	return (*clientAuthenticationSettingsPtrType)(v)
}

func (*clientAuthenticationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientAuthenticationSettings)(nil)).Elem()
}

func (i *clientAuthenticationSettingsPtrType) ToClientAuthenticationSettingsPtrOutput() ClientAuthenticationSettingsPtrOutput {
	return i.ToClientAuthenticationSettingsPtrOutputWithContext(context.Background())
}

func (i *clientAuthenticationSettingsPtrType) ToClientAuthenticationSettingsPtrOutputWithContext(ctx context.Context) ClientAuthenticationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAuthenticationSettingsPtrOutput)
}

// Client authentication settings for namespace resource.
type ClientAuthenticationSettingsOutput struct{ *pulumi.OutputState }

func (ClientAuthenticationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientAuthenticationSettings)(nil)).Elem()
}

func (o ClientAuthenticationSettingsOutput) ToClientAuthenticationSettingsOutput() ClientAuthenticationSettingsOutput {
	return o
}

func (o ClientAuthenticationSettingsOutput) ToClientAuthenticationSettingsOutputWithContext(ctx context.Context) ClientAuthenticationSettingsOutput {
	return o
}

func (o ClientAuthenticationSettingsOutput) ToClientAuthenticationSettingsPtrOutput() ClientAuthenticationSettingsPtrOutput {
	return o.ToClientAuthenticationSettingsPtrOutputWithContext(context.Background())
}

func (o ClientAuthenticationSettingsOutput) ToClientAuthenticationSettingsPtrOutputWithContext(ctx context.Context) ClientAuthenticationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientAuthenticationSettings) *ClientAuthenticationSettings {
		return &v
	}).(ClientAuthenticationSettingsPtrOutput)
}

// Alternative authentication name sources related to client authentication settings for namespace resource.
func (o ClientAuthenticationSettingsOutput) AlternativeAuthenticationNameSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClientAuthenticationSettings) []string { return v.AlternativeAuthenticationNameSources }).(pulumi.StringArrayOutput)
}

type ClientAuthenticationSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClientAuthenticationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientAuthenticationSettings)(nil)).Elem()
}

func (o ClientAuthenticationSettingsPtrOutput) ToClientAuthenticationSettingsPtrOutput() ClientAuthenticationSettingsPtrOutput {
	return o
}

func (o ClientAuthenticationSettingsPtrOutput) ToClientAuthenticationSettingsPtrOutputWithContext(ctx context.Context) ClientAuthenticationSettingsPtrOutput {
	return o
}

func (o ClientAuthenticationSettingsPtrOutput) Elem() ClientAuthenticationSettingsOutput {
	return o.ApplyT(func(v *ClientAuthenticationSettings) ClientAuthenticationSettings {
		if v != nil {
			return *v
		}
		var ret ClientAuthenticationSettings
		return ret
	}).(ClientAuthenticationSettingsOutput)
}

// Alternative authentication name sources related to client authentication settings for namespace resource.
func (o ClientAuthenticationSettingsPtrOutput) AlternativeAuthenticationNameSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClientAuthenticationSettings) []string {
		if v == nil {
			return nil
		}
		return v.AlternativeAuthenticationNameSources
	}).(pulumi.StringArrayOutput)
}

// Client authentication settings for namespace resource.
type ClientAuthenticationSettingsResponse struct {
	// Alternative authentication name sources related to client authentication settings for namespace resource.
	AlternativeAuthenticationNameSources []string `pulumi:"alternativeAuthenticationNameSources"`
}

// Client authentication settings for namespace resource.
type ClientAuthenticationSettingsResponseOutput struct{ *pulumi.OutputState }

func (ClientAuthenticationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientAuthenticationSettingsResponse)(nil)).Elem()
}

func (o ClientAuthenticationSettingsResponseOutput) ToClientAuthenticationSettingsResponseOutput() ClientAuthenticationSettingsResponseOutput {
	return o
}

func (o ClientAuthenticationSettingsResponseOutput) ToClientAuthenticationSettingsResponseOutputWithContext(ctx context.Context) ClientAuthenticationSettingsResponseOutput {
	return o
}

// Alternative authentication name sources related to client authentication settings for namespace resource.
func (o ClientAuthenticationSettingsResponseOutput) AlternativeAuthenticationNameSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClientAuthenticationSettingsResponse) []string { return v.AlternativeAuthenticationNameSources }).(pulumi.StringArrayOutput)
}

type ClientAuthenticationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientAuthenticationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientAuthenticationSettingsResponse)(nil)).Elem()
}

func (o ClientAuthenticationSettingsResponsePtrOutput) ToClientAuthenticationSettingsResponsePtrOutput() ClientAuthenticationSettingsResponsePtrOutput {
	return o
}

func (o ClientAuthenticationSettingsResponsePtrOutput) ToClientAuthenticationSettingsResponsePtrOutputWithContext(ctx context.Context) ClientAuthenticationSettingsResponsePtrOutput {
	return o
}

func (o ClientAuthenticationSettingsResponsePtrOutput) Elem() ClientAuthenticationSettingsResponseOutput {
	return o.ApplyT(func(v *ClientAuthenticationSettingsResponse) ClientAuthenticationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ClientAuthenticationSettingsResponse
		return ret
	}).(ClientAuthenticationSettingsResponseOutput)
}

// Alternative authentication name sources related to client authentication settings for namespace resource.
func (o ClientAuthenticationSettingsResponsePtrOutput) AlternativeAuthenticationNameSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClientAuthenticationSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AlternativeAuthenticationNameSources
	}).(pulumi.StringArrayOutput)
}

// The certificate authentication properties for the client.
type ClientCertificateAuthentication struct {
	// The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.
	AllowedThumbprints []string `pulumi:"allowedThumbprints"`
	// The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.
	ValidationScheme *string `pulumi:"validationScheme"`
}

// ClientCertificateAuthenticationInput is an input type that accepts ClientCertificateAuthenticationArgs and ClientCertificateAuthenticationOutput values.
// You can construct a concrete instance of `ClientCertificateAuthenticationInput` via:
//
//	ClientCertificateAuthenticationArgs{...}
type ClientCertificateAuthenticationInput interface {
	pulumi.Input

	ToClientCertificateAuthenticationOutput() ClientCertificateAuthenticationOutput
	ToClientCertificateAuthenticationOutputWithContext(context.Context) ClientCertificateAuthenticationOutput
}

// The certificate authentication properties for the client.
type ClientCertificateAuthenticationArgs struct {
	// The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.
	AllowedThumbprints pulumi.StringArrayInput `pulumi:"allowedThumbprints"`
	// The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.
	ValidationScheme pulumi.StringPtrInput `pulumi:"validationScheme"`
}

func (ClientCertificateAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateAuthentication)(nil)).Elem()
}

func (i ClientCertificateAuthenticationArgs) ToClientCertificateAuthenticationOutput() ClientCertificateAuthenticationOutput {
	return i.ToClientCertificateAuthenticationOutputWithContext(context.Background())
}

func (i ClientCertificateAuthenticationArgs) ToClientCertificateAuthenticationOutputWithContext(ctx context.Context) ClientCertificateAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateAuthenticationOutput)
}

func (i ClientCertificateAuthenticationArgs) ToClientCertificateAuthenticationPtrOutput() ClientCertificateAuthenticationPtrOutput {
	return i.ToClientCertificateAuthenticationPtrOutputWithContext(context.Background())
}

func (i ClientCertificateAuthenticationArgs) ToClientCertificateAuthenticationPtrOutputWithContext(ctx context.Context) ClientCertificateAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateAuthenticationOutput).ToClientCertificateAuthenticationPtrOutputWithContext(ctx)
}

// ClientCertificateAuthenticationPtrInput is an input type that accepts ClientCertificateAuthenticationArgs, ClientCertificateAuthenticationPtr and ClientCertificateAuthenticationPtrOutput values.
// You can construct a concrete instance of `ClientCertificateAuthenticationPtrInput` via:
//
//	        ClientCertificateAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ClientCertificateAuthenticationPtrInput interface {
	pulumi.Input

	ToClientCertificateAuthenticationPtrOutput() ClientCertificateAuthenticationPtrOutput
	ToClientCertificateAuthenticationPtrOutputWithContext(context.Context) ClientCertificateAuthenticationPtrOutput
}

type clientCertificateAuthenticationPtrType ClientCertificateAuthenticationArgs

func ClientCertificateAuthenticationPtr(v *ClientCertificateAuthenticationArgs) ClientCertificateAuthenticationPtrInput {
	return (*clientCertificateAuthenticationPtrType)(v)
}

func (*clientCertificateAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateAuthentication)(nil)).Elem()
}

func (i *clientCertificateAuthenticationPtrType) ToClientCertificateAuthenticationPtrOutput() ClientCertificateAuthenticationPtrOutput {
	return i.ToClientCertificateAuthenticationPtrOutputWithContext(context.Background())
}

func (i *clientCertificateAuthenticationPtrType) ToClientCertificateAuthenticationPtrOutputWithContext(ctx context.Context) ClientCertificateAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateAuthenticationPtrOutput)
}

// The certificate authentication properties for the client.
type ClientCertificateAuthenticationOutput struct{ *pulumi.OutputState }

func (ClientCertificateAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateAuthentication)(nil)).Elem()
}

func (o ClientCertificateAuthenticationOutput) ToClientCertificateAuthenticationOutput() ClientCertificateAuthenticationOutput {
	return o
}

func (o ClientCertificateAuthenticationOutput) ToClientCertificateAuthenticationOutputWithContext(ctx context.Context) ClientCertificateAuthenticationOutput {
	return o
}

func (o ClientCertificateAuthenticationOutput) ToClientCertificateAuthenticationPtrOutput() ClientCertificateAuthenticationPtrOutput {
	return o.ToClientCertificateAuthenticationPtrOutputWithContext(context.Background())
}

func (o ClientCertificateAuthenticationOutput) ToClientCertificateAuthenticationPtrOutputWithContext(ctx context.Context) ClientCertificateAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientCertificateAuthentication) *ClientCertificateAuthentication {
		return &v
	}).(ClientCertificateAuthenticationPtrOutput)
}

// The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.
func (o ClientCertificateAuthenticationOutput) AllowedThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClientCertificateAuthentication) []string { return v.AllowedThumbprints }).(pulumi.StringArrayOutput)
}

// The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.
func (o ClientCertificateAuthenticationOutput) ValidationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCertificateAuthentication) *string { return v.ValidationScheme }).(pulumi.StringPtrOutput)
}

type ClientCertificateAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ClientCertificateAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateAuthentication)(nil)).Elem()
}

func (o ClientCertificateAuthenticationPtrOutput) ToClientCertificateAuthenticationPtrOutput() ClientCertificateAuthenticationPtrOutput {
	return o
}

func (o ClientCertificateAuthenticationPtrOutput) ToClientCertificateAuthenticationPtrOutputWithContext(ctx context.Context) ClientCertificateAuthenticationPtrOutput {
	return o
}

func (o ClientCertificateAuthenticationPtrOutput) Elem() ClientCertificateAuthenticationOutput {
	return o.ApplyT(func(v *ClientCertificateAuthentication) ClientCertificateAuthentication {
		if v != nil {
			return *v
		}
		var ret ClientCertificateAuthentication
		return ret
	}).(ClientCertificateAuthenticationOutput)
}

// The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.
func (o ClientCertificateAuthenticationPtrOutput) AllowedThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClientCertificateAuthentication) []string {
		if v == nil {
			return nil
		}
		return v.AllowedThumbprints
	}).(pulumi.StringArrayOutput)
}

// The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.
func (o ClientCertificateAuthenticationPtrOutput) ValidationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCertificateAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ValidationScheme
	}).(pulumi.StringPtrOutput)
}

// The certificate authentication properties for the client.
type ClientCertificateAuthenticationResponse struct {
	// The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.
	AllowedThumbprints []string `pulumi:"allowedThumbprints"`
	// The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.
	ValidationScheme *string `pulumi:"validationScheme"`
}

// The certificate authentication properties for the client.
type ClientCertificateAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (ClientCertificateAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateAuthenticationResponse)(nil)).Elem()
}

func (o ClientCertificateAuthenticationResponseOutput) ToClientCertificateAuthenticationResponseOutput() ClientCertificateAuthenticationResponseOutput {
	return o
}

func (o ClientCertificateAuthenticationResponseOutput) ToClientCertificateAuthenticationResponseOutputWithContext(ctx context.Context) ClientCertificateAuthenticationResponseOutput {
	return o
}

// The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.
func (o ClientCertificateAuthenticationResponseOutput) AllowedThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClientCertificateAuthenticationResponse) []string { return v.AllowedThumbprints }).(pulumi.StringArrayOutput)
}

// The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.
func (o ClientCertificateAuthenticationResponseOutput) ValidationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCertificateAuthenticationResponse) *string { return v.ValidationScheme }).(pulumi.StringPtrOutput)
}

type ClientCertificateAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientCertificateAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateAuthenticationResponse)(nil)).Elem()
}

func (o ClientCertificateAuthenticationResponsePtrOutput) ToClientCertificateAuthenticationResponsePtrOutput() ClientCertificateAuthenticationResponsePtrOutput {
	return o
}

func (o ClientCertificateAuthenticationResponsePtrOutput) ToClientCertificateAuthenticationResponsePtrOutputWithContext(ctx context.Context) ClientCertificateAuthenticationResponsePtrOutput {
	return o
}

func (o ClientCertificateAuthenticationResponsePtrOutput) Elem() ClientCertificateAuthenticationResponseOutput {
	return o.ApplyT(func(v *ClientCertificateAuthenticationResponse) ClientCertificateAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret ClientCertificateAuthenticationResponse
		return ret
	}).(ClientCertificateAuthenticationResponseOutput)
}

// The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.
func (o ClientCertificateAuthenticationResponsePtrOutput) AllowedThumbprints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClientCertificateAuthenticationResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedThumbprints
	}).(pulumi.StringArrayOutput)
}

// The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.
func (o ClientCertificateAuthenticationResponsePtrOutput) ValidationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCertificateAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValidationScheme
	}).(pulumi.StringPtrOutput)
}

// ConnectionState information.
type ConnectionState struct {
	// Actions required (if any).
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of the connection state.
	Description *string `pulumi:"description"`
	// Status of the connection.
	Status *string `pulumi:"status"`
}

// ConnectionStateInput is an input type that accepts ConnectionStateArgs and ConnectionStateOutput values.
// You can construct a concrete instance of `ConnectionStateInput` via:
//
//	ConnectionStateArgs{...}
type ConnectionStateInput interface {
	pulumi.Input

	ToConnectionStateOutput() ConnectionStateOutput
	ToConnectionStateOutputWithContext(context.Context) ConnectionStateOutput
}

// ConnectionState information.
type ConnectionStateArgs struct {
	// Actions required (if any).
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// Description of the connection state.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Status of the connection.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionState)(nil)).Elem()
}

func (i ConnectionStateArgs) ToConnectionStateOutput() ConnectionStateOutput {
	return i.ToConnectionStateOutputWithContext(context.Background())
}

func (i ConnectionStateArgs) ToConnectionStateOutputWithContext(ctx context.Context) ConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStateOutput)
}

func (i ConnectionStateArgs) ToConnectionStatePtrOutput() ConnectionStatePtrOutput {
	return i.ToConnectionStatePtrOutputWithContext(context.Background())
}

func (i ConnectionStateArgs) ToConnectionStatePtrOutputWithContext(ctx context.Context) ConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStateOutput).ToConnectionStatePtrOutputWithContext(ctx)
}

// ConnectionStatePtrInput is an input type that accepts ConnectionStateArgs, ConnectionStatePtr and ConnectionStatePtrOutput values.
// You can construct a concrete instance of `ConnectionStatePtrInput` via:
//
//	        ConnectionStateArgs{...}
//
//	or:
//
//	        nil
type ConnectionStatePtrInput interface {
	pulumi.Input

	ToConnectionStatePtrOutput() ConnectionStatePtrOutput
	ToConnectionStatePtrOutputWithContext(context.Context) ConnectionStatePtrOutput
}

type connectionStatePtrType ConnectionStateArgs

func ConnectionStatePtr(v *ConnectionStateArgs) ConnectionStatePtrInput {
	return (*connectionStatePtrType)(v)
}

func (*connectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionState)(nil)).Elem()
}

func (i *connectionStatePtrType) ToConnectionStatePtrOutput() ConnectionStatePtrOutput {
	return i.ToConnectionStatePtrOutputWithContext(context.Background())
}

func (i *connectionStatePtrType) ToConnectionStatePtrOutputWithContext(ctx context.Context) ConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePtrOutput)
}

// ConnectionState information.
type ConnectionStateOutput struct{ *pulumi.OutputState }

func (ConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionState)(nil)).Elem()
}

func (o ConnectionStateOutput) ToConnectionStateOutput() ConnectionStateOutput {
	return o
}

func (o ConnectionStateOutput) ToConnectionStateOutputWithContext(ctx context.Context) ConnectionStateOutput {
	return o
}

func (o ConnectionStateOutput) ToConnectionStatePtrOutput() ConnectionStatePtrOutput {
	return o.ToConnectionStatePtrOutputWithContext(context.Background())
}

func (o ConnectionStateOutput) ToConnectionStatePtrOutputWithContext(ctx context.Context) ConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionState) *ConnectionState {
		return &v
	}).(ConnectionStatePtrOutput)
}

// Actions required (if any).
func (o ConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of the connection state.
func (o ConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of the connection.
func (o ConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionState)(nil)).Elem()
}

func (o ConnectionStatePtrOutput) ToConnectionStatePtrOutput() ConnectionStatePtrOutput {
	return o
}

func (o ConnectionStatePtrOutput) ToConnectionStatePtrOutputWithContext(ctx context.Context) ConnectionStatePtrOutput {
	return o
}

func (o ConnectionStatePtrOutput) Elem() ConnectionStateOutput {
	return o.ApplyT(func(v *ConnectionState) ConnectionState {
		if v != nil {
			return *v
		}
		var ret ConnectionState
		return ret
	}).(ConnectionStateOutput)
}

// Actions required (if any).
func (o ConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of the connection state.
func (o ConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of the connection.
func (o ConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// ConnectionState information.
type ConnectionStateResponse struct {
	// Actions required (if any).
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of the connection state.
	Description *string `pulumi:"description"`
	// Status of the connection.
	Status *string `pulumi:"status"`
}

// ConnectionState information.
type ConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStateResponse)(nil)).Elem()
}

func (o ConnectionStateResponseOutput) ToConnectionStateResponseOutput() ConnectionStateResponseOutput {
	return o
}

func (o ConnectionStateResponseOutput) ToConnectionStateResponseOutputWithContext(ctx context.Context) ConnectionStateResponseOutput {
	return o
}

// Actions required (if any).
func (o ConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of the connection state.
func (o ConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of the connection.
func (o ConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStateResponse)(nil)).Elem()
}

func (o ConnectionStateResponsePtrOutput) ToConnectionStateResponsePtrOutput() ConnectionStateResponsePtrOutput {
	return o
}

func (o ConnectionStateResponsePtrOutput) ToConnectionStateResponsePtrOutputWithContext(ctx context.Context) ConnectionStateResponsePtrOutput {
	return o
}

func (o ConnectionStateResponsePtrOutput) Elem() ConnectionStateResponseOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) ConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret ConnectionStateResponse
		return ret
	}).(ConnectionStateResponseOutput)
}

// Actions required (if any).
func (o ConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of the connection state.
func (o ConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of the connection.
func (o ConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Information about the deadletter destination with resource identity.
type DeadLetterWithResourceIdentity struct {
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestination *StorageBlobDeadLetterDestination `pulumi:"deadLetterDestination"`
	// The identity to use when dead-lettering events.
	Identity *EventSubscriptionIdentity `pulumi:"identity"`
}

// DeadLetterWithResourceIdentityInput is an input type that accepts DeadLetterWithResourceIdentityArgs and DeadLetterWithResourceIdentityOutput values.
// You can construct a concrete instance of `DeadLetterWithResourceIdentityInput` via:
//
//	DeadLetterWithResourceIdentityArgs{...}
type DeadLetterWithResourceIdentityInput interface {
	pulumi.Input

	ToDeadLetterWithResourceIdentityOutput() DeadLetterWithResourceIdentityOutput
	ToDeadLetterWithResourceIdentityOutputWithContext(context.Context) DeadLetterWithResourceIdentityOutput
}

// Information about the deadletter destination with resource identity.
type DeadLetterWithResourceIdentityArgs struct {
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestination StorageBlobDeadLetterDestinationPtrInput `pulumi:"deadLetterDestination"`
	// The identity to use when dead-lettering events.
	Identity EventSubscriptionIdentityPtrInput `pulumi:"identity"`
}

func (DeadLetterWithResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterWithResourceIdentity)(nil)).Elem()
}

func (i DeadLetterWithResourceIdentityArgs) ToDeadLetterWithResourceIdentityOutput() DeadLetterWithResourceIdentityOutput {
	return i.ToDeadLetterWithResourceIdentityOutputWithContext(context.Background())
}

func (i DeadLetterWithResourceIdentityArgs) ToDeadLetterWithResourceIdentityOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterWithResourceIdentityOutput)
}

func (i DeadLetterWithResourceIdentityArgs) ToDeadLetterWithResourceIdentityPtrOutput() DeadLetterWithResourceIdentityPtrOutput {
	return i.ToDeadLetterWithResourceIdentityPtrOutputWithContext(context.Background())
}

func (i DeadLetterWithResourceIdentityArgs) ToDeadLetterWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterWithResourceIdentityOutput).ToDeadLetterWithResourceIdentityPtrOutputWithContext(ctx)
}

// DeadLetterWithResourceIdentityPtrInput is an input type that accepts DeadLetterWithResourceIdentityArgs, DeadLetterWithResourceIdentityPtr and DeadLetterWithResourceIdentityPtrOutput values.
// You can construct a concrete instance of `DeadLetterWithResourceIdentityPtrInput` via:
//
//	        DeadLetterWithResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type DeadLetterWithResourceIdentityPtrInput interface {
	pulumi.Input

	ToDeadLetterWithResourceIdentityPtrOutput() DeadLetterWithResourceIdentityPtrOutput
	ToDeadLetterWithResourceIdentityPtrOutputWithContext(context.Context) DeadLetterWithResourceIdentityPtrOutput
}

type deadLetterWithResourceIdentityPtrType DeadLetterWithResourceIdentityArgs

func DeadLetterWithResourceIdentityPtr(v *DeadLetterWithResourceIdentityArgs) DeadLetterWithResourceIdentityPtrInput {
	return (*deadLetterWithResourceIdentityPtrType)(v)
}

func (*deadLetterWithResourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterWithResourceIdentity)(nil)).Elem()
}

func (i *deadLetterWithResourceIdentityPtrType) ToDeadLetterWithResourceIdentityPtrOutput() DeadLetterWithResourceIdentityPtrOutput {
	return i.ToDeadLetterWithResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *deadLetterWithResourceIdentityPtrType) ToDeadLetterWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterWithResourceIdentityPtrOutput)
}

// Information about the deadletter destination with resource identity.
type DeadLetterWithResourceIdentityOutput struct{ *pulumi.OutputState }

func (DeadLetterWithResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterWithResourceIdentity)(nil)).Elem()
}

func (o DeadLetterWithResourceIdentityOutput) ToDeadLetterWithResourceIdentityOutput() DeadLetterWithResourceIdentityOutput {
	return o
}

func (o DeadLetterWithResourceIdentityOutput) ToDeadLetterWithResourceIdentityOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityOutput {
	return o
}

func (o DeadLetterWithResourceIdentityOutput) ToDeadLetterWithResourceIdentityPtrOutput() DeadLetterWithResourceIdentityPtrOutput {
	return o.ToDeadLetterWithResourceIdentityPtrOutputWithContext(context.Background())
}

func (o DeadLetterWithResourceIdentityOutput) ToDeadLetterWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeadLetterWithResourceIdentity) *DeadLetterWithResourceIdentity {
		return &v
	}).(DeadLetterWithResourceIdentityPtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeadLetterWithResourceIdentityOutput) DeadLetterDestination() StorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v DeadLetterWithResourceIdentity) *StorageBlobDeadLetterDestination {
		return v.DeadLetterDestination
	}).(StorageBlobDeadLetterDestinationPtrOutput)
}

// The identity to use when dead-lettering events.
func (o DeadLetterWithResourceIdentityOutput) Identity() EventSubscriptionIdentityPtrOutput {
	return o.ApplyT(func(v DeadLetterWithResourceIdentity) *EventSubscriptionIdentity { return v.Identity }).(EventSubscriptionIdentityPtrOutput)
}

type DeadLetterWithResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (DeadLetterWithResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterWithResourceIdentity)(nil)).Elem()
}

func (o DeadLetterWithResourceIdentityPtrOutput) ToDeadLetterWithResourceIdentityPtrOutput() DeadLetterWithResourceIdentityPtrOutput {
	return o
}

func (o DeadLetterWithResourceIdentityPtrOutput) ToDeadLetterWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityPtrOutput {
	return o
}

func (o DeadLetterWithResourceIdentityPtrOutput) Elem() DeadLetterWithResourceIdentityOutput {
	return o.ApplyT(func(v *DeadLetterWithResourceIdentity) DeadLetterWithResourceIdentity {
		if v != nil {
			return *v
		}
		var ret DeadLetterWithResourceIdentity
		return ret
	}).(DeadLetterWithResourceIdentityOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeadLetterWithResourceIdentityPtrOutput) DeadLetterDestination() StorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v *DeadLetterWithResourceIdentity) *StorageBlobDeadLetterDestination {
		if v == nil {
			return nil
		}
		return v.DeadLetterDestination
	}).(StorageBlobDeadLetterDestinationPtrOutput)
}

// The identity to use when dead-lettering events.
func (o DeadLetterWithResourceIdentityPtrOutput) Identity() EventSubscriptionIdentityPtrOutput {
	return o.ApplyT(func(v *DeadLetterWithResourceIdentity) *EventSubscriptionIdentity {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(EventSubscriptionIdentityPtrOutput)
}

// Information about the deadletter destination with resource identity.
type DeadLetterWithResourceIdentityResponse struct {
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestination *StorageBlobDeadLetterDestinationResponse `pulumi:"deadLetterDestination"`
	// The identity to use when dead-lettering events.
	Identity *EventSubscriptionIdentityResponse `pulumi:"identity"`
}

// Information about the deadletter destination with resource identity.
type DeadLetterWithResourceIdentityResponseOutput struct{ *pulumi.OutputState }

func (DeadLetterWithResourceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterWithResourceIdentityResponse)(nil)).Elem()
}

func (o DeadLetterWithResourceIdentityResponseOutput) ToDeadLetterWithResourceIdentityResponseOutput() DeadLetterWithResourceIdentityResponseOutput {
	return o
}

func (o DeadLetterWithResourceIdentityResponseOutput) ToDeadLetterWithResourceIdentityResponseOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityResponseOutput {
	return o
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeadLetterWithResourceIdentityResponseOutput) DeadLetterDestination() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v DeadLetterWithResourceIdentityResponse) *StorageBlobDeadLetterDestinationResponse {
		return v.DeadLetterDestination
	}).(StorageBlobDeadLetterDestinationResponsePtrOutput)
}

// The identity to use when dead-lettering events.
func (o DeadLetterWithResourceIdentityResponseOutput) Identity() EventSubscriptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v DeadLetterWithResourceIdentityResponse) *EventSubscriptionIdentityResponse { return v.Identity }).(EventSubscriptionIdentityResponsePtrOutput)
}

type DeadLetterWithResourceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (DeadLetterWithResourceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterWithResourceIdentityResponse)(nil)).Elem()
}

func (o DeadLetterWithResourceIdentityResponsePtrOutput) ToDeadLetterWithResourceIdentityResponsePtrOutput() DeadLetterWithResourceIdentityResponsePtrOutput {
	return o
}

func (o DeadLetterWithResourceIdentityResponsePtrOutput) ToDeadLetterWithResourceIdentityResponsePtrOutputWithContext(ctx context.Context) DeadLetterWithResourceIdentityResponsePtrOutput {
	return o
}

func (o DeadLetterWithResourceIdentityResponsePtrOutput) Elem() DeadLetterWithResourceIdentityResponseOutput {
	return o.ApplyT(func(v *DeadLetterWithResourceIdentityResponse) DeadLetterWithResourceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret DeadLetterWithResourceIdentityResponse
		return ret
	}).(DeadLetterWithResourceIdentityResponseOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeadLetterWithResourceIdentityResponsePtrOutput) DeadLetterDestination() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v *DeadLetterWithResourceIdentityResponse) *StorageBlobDeadLetterDestinationResponse {
		if v == nil {
			return nil
		}
		return v.DeadLetterDestination
	}).(StorageBlobDeadLetterDestinationResponsePtrOutput)
}

// The identity to use when dead-lettering events.
func (o DeadLetterWithResourceIdentityResponsePtrOutput) Identity() EventSubscriptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v *DeadLetterWithResourceIdentityResponse) *EventSubscriptionIdentityResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(EventSubscriptionIdentityResponsePtrOutput)
}

// Properties of the delivery configuration information of the event subscription.
type DeliveryConfiguration struct {
	// Delivery mode of the event subscription.
	DeliveryMode *string `pulumi:"deliveryMode"`
	// This property should be populated when deliveryMode is push and represents information about the push subscription.
	Push *PushInfo `pulumi:"push"`
	// This property should be populated when deliveryMode is queue and represents information about the queue subscription.
	Queue *QueueInfo `pulumi:"queue"`
}

// DeliveryConfigurationInput is an input type that accepts DeliveryConfigurationArgs and DeliveryConfigurationOutput values.
// You can construct a concrete instance of `DeliveryConfigurationInput` via:
//
//	DeliveryConfigurationArgs{...}
type DeliveryConfigurationInput interface {
	pulumi.Input

	ToDeliveryConfigurationOutput() DeliveryConfigurationOutput
	ToDeliveryConfigurationOutputWithContext(context.Context) DeliveryConfigurationOutput
}

// Properties of the delivery configuration information of the event subscription.
type DeliveryConfigurationArgs struct {
	// Delivery mode of the event subscription.
	DeliveryMode pulumi.StringPtrInput `pulumi:"deliveryMode"`
	// This property should be populated when deliveryMode is push and represents information about the push subscription.
	Push PushInfoPtrInput `pulumi:"push"`
	// This property should be populated when deliveryMode is queue and represents information about the queue subscription.
	Queue QueueInfoPtrInput `pulumi:"queue"`
}

func (DeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryConfiguration)(nil)).Elem()
}

func (i DeliveryConfigurationArgs) ToDeliveryConfigurationOutput() DeliveryConfigurationOutput {
	return i.ToDeliveryConfigurationOutputWithContext(context.Background())
}

func (i DeliveryConfigurationArgs) ToDeliveryConfigurationOutputWithContext(ctx context.Context) DeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryConfigurationOutput)
}

func (i DeliveryConfigurationArgs) ToDeliveryConfigurationPtrOutput() DeliveryConfigurationPtrOutput {
	return i.ToDeliveryConfigurationPtrOutputWithContext(context.Background())
}

func (i DeliveryConfigurationArgs) ToDeliveryConfigurationPtrOutputWithContext(ctx context.Context) DeliveryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryConfigurationOutput).ToDeliveryConfigurationPtrOutputWithContext(ctx)
}

// DeliveryConfigurationPtrInput is an input type that accepts DeliveryConfigurationArgs, DeliveryConfigurationPtr and DeliveryConfigurationPtrOutput values.
// You can construct a concrete instance of `DeliveryConfigurationPtrInput` via:
//
//	        DeliveryConfigurationArgs{...}
//
//	or:
//
//	        nil
type DeliveryConfigurationPtrInput interface {
	pulumi.Input

	ToDeliveryConfigurationPtrOutput() DeliveryConfigurationPtrOutput
	ToDeliveryConfigurationPtrOutputWithContext(context.Context) DeliveryConfigurationPtrOutput
}

type deliveryConfigurationPtrType DeliveryConfigurationArgs

func DeliveryConfigurationPtr(v *DeliveryConfigurationArgs) DeliveryConfigurationPtrInput {
	return (*deliveryConfigurationPtrType)(v)
}

func (*deliveryConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryConfiguration)(nil)).Elem()
}

func (i *deliveryConfigurationPtrType) ToDeliveryConfigurationPtrOutput() DeliveryConfigurationPtrOutput {
	return i.ToDeliveryConfigurationPtrOutputWithContext(context.Background())
}

func (i *deliveryConfigurationPtrType) ToDeliveryConfigurationPtrOutputWithContext(ctx context.Context) DeliveryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryConfigurationPtrOutput)
}

// Properties of the delivery configuration information of the event subscription.
type DeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (DeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryConfiguration)(nil)).Elem()
}

func (o DeliveryConfigurationOutput) ToDeliveryConfigurationOutput() DeliveryConfigurationOutput {
	return o
}

func (o DeliveryConfigurationOutput) ToDeliveryConfigurationOutputWithContext(ctx context.Context) DeliveryConfigurationOutput {
	return o
}

func (o DeliveryConfigurationOutput) ToDeliveryConfigurationPtrOutput() DeliveryConfigurationPtrOutput {
	return o.ToDeliveryConfigurationPtrOutputWithContext(context.Background())
}

func (o DeliveryConfigurationOutput) ToDeliveryConfigurationPtrOutputWithContext(ctx context.Context) DeliveryConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeliveryConfiguration) *DeliveryConfiguration {
		return &v
	}).(DeliveryConfigurationPtrOutput)
}

// Delivery mode of the event subscription.
func (o DeliveryConfigurationOutput) DeliveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeliveryConfiguration) *string { return v.DeliveryMode }).(pulumi.StringPtrOutput)
}

// This property should be populated when deliveryMode is push and represents information about the push subscription.
func (o DeliveryConfigurationOutput) Push() PushInfoPtrOutput {
	return o.ApplyT(func(v DeliveryConfiguration) *PushInfo { return v.Push }).(PushInfoPtrOutput)
}

// This property should be populated when deliveryMode is queue and represents information about the queue subscription.
func (o DeliveryConfigurationOutput) Queue() QueueInfoPtrOutput {
	return o.ApplyT(func(v DeliveryConfiguration) *QueueInfo { return v.Queue }).(QueueInfoPtrOutput)
}

type DeliveryConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DeliveryConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryConfiguration)(nil)).Elem()
}

func (o DeliveryConfigurationPtrOutput) ToDeliveryConfigurationPtrOutput() DeliveryConfigurationPtrOutput {
	return o
}

func (o DeliveryConfigurationPtrOutput) ToDeliveryConfigurationPtrOutputWithContext(ctx context.Context) DeliveryConfigurationPtrOutput {
	return o
}

func (o DeliveryConfigurationPtrOutput) Elem() DeliveryConfigurationOutput {
	return o.ApplyT(func(v *DeliveryConfiguration) DeliveryConfiguration {
		if v != nil {
			return *v
		}
		var ret DeliveryConfiguration
		return ret
	}).(DeliveryConfigurationOutput)
}

// Delivery mode of the event subscription.
func (o DeliveryConfigurationPtrOutput) DeliveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeliveryConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DeliveryMode
	}).(pulumi.StringPtrOutput)
}

// This property should be populated when deliveryMode is push and represents information about the push subscription.
func (o DeliveryConfigurationPtrOutput) Push() PushInfoPtrOutput {
	return o.ApplyT(func(v *DeliveryConfiguration) *PushInfo {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PushInfoPtrOutput)
}

// This property should be populated when deliveryMode is queue and represents information about the queue subscription.
func (o DeliveryConfigurationPtrOutput) Queue() QueueInfoPtrOutput {
	return o.ApplyT(func(v *DeliveryConfiguration) *QueueInfo {
		if v == nil {
			return nil
		}
		return v.Queue
	}).(QueueInfoPtrOutput)
}

// Properties of the delivery configuration information of the event subscription.
type DeliveryConfigurationResponse struct {
	// Delivery mode of the event subscription.
	DeliveryMode *string `pulumi:"deliveryMode"`
	// This property should be populated when deliveryMode is push and represents information about the push subscription.
	Push *PushInfoResponse `pulumi:"push"`
	// This property should be populated when deliveryMode is queue and represents information about the queue subscription.
	Queue *QueueInfoResponse `pulumi:"queue"`
}

// Properties of the delivery configuration information of the event subscription.
type DeliveryConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeliveryConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryConfigurationResponse)(nil)).Elem()
}

func (o DeliveryConfigurationResponseOutput) ToDeliveryConfigurationResponseOutput() DeliveryConfigurationResponseOutput {
	return o
}

func (o DeliveryConfigurationResponseOutput) ToDeliveryConfigurationResponseOutputWithContext(ctx context.Context) DeliveryConfigurationResponseOutput {
	return o
}

// Delivery mode of the event subscription.
func (o DeliveryConfigurationResponseOutput) DeliveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeliveryConfigurationResponse) *string { return v.DeliveryMode }).(pulumi.StringPtrOutput)
}

// This property should be populated when deliveryMode is push and represents information about the push subscription.
func (o DeliveryConfigurationResponseOutput) Push() PushInfoResponsePtrOutput {
	return o.ApplyT(func(v DeliveryConfigurationResponse) *PushInfoResponse { return v.Push }).(PushInfoResponsePtrOutput)
}

// This property should be populated when deliveryMode is queue and represents information about the queue subscription.
func (o DeliveryConfigurationResponseOutput) Queue() QueueInfoResponsePtrOutput {
	return o.ApplyT(func(v DeliveryConfigurationResponse) *QueueInfoResponse { return v.Queue }).(QueueInfoResponsePtrOutput)
}

type DeliveryConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeliveryConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryConfigurationResponse)(nil)).Elem()
}

func (o DeliveryConfigurationResponsePtrOutput) ToDeliveryConfigurationResponsePtrOutput() DeliveryConfigurationResponsePtrOutput {
	return o
}

func (o DeliveryConfigurationResponsePtrOutput) ToDeliveryConfigurationResponsePtrOutputWithContext(ctx context.Context) DeliveryConfigurationResponsePtrOutput {
	return o
}

func (o DeliveryConfigurationResponsePtrOutput) Elem() DeliveryConfigurationResponseOutput {
	return o.ApplyT(func(v *DeliveryConfigurationResponse) DeliveryConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DeliveryConfigurationResponse
		return ret
	}).(DeliveryConfigurationResponseOutput)
}

// Delivery mode of the event subscription.
func (o DeliveryConfigurationResponsePtrOutput) DeliveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeliveryConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeliveryMode
	}).(pulumi.StringPtrOutput)
}

// This property should be populated when deliveryMode is push and represents information about the push subscription.
func (o DeliveryConfigurationResponsePtrOutput) Push() PushInfoResponsePtrOutput {
	return o.ApplyT(func(v *DeliveryConfigurationResponse) *PushInfoResponse {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PushInfoResponsePtrOutput)
}

// This property should be populated when deliveryMode is queue and represents information about the queue subscription.
func (o DeliveryConfigurationResponsePtrOutput) Queue() QueueInfoResponsePtrOutput {
	return o.ApplyT(func(v *DeliveryConfigurationResponse) *QueueInfoResponse {
		if v == nil {
			return nil
		}
		return v.Queue
	}).(QueueInfoResponsePtrOutput)
}

// Information about the delivery for an event subscription with resource identity.
type DeliveryWithResourceIdentity struct {
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
	Destination interface{} `pulumi:"destination"`
	// The identity to use when delivering events.
	Identity *EventSubscriptionIdentity `pulumi:"identity"`
}

// DeliveryWithResourceIdentityInput is an input type that accepts DeliveryWithResourceIdentityArgs and DeliveryWithResourceIdentityOutput values.
// You can construct a concrete instance of `DeliveryWithResourceIdentityInput` via:
//
//	DeliveryWithResourceIdentityArgs{...}
type DeliveryWithResourceIdentityInput interface {
	pulumi.Input

	ToDeliveryWithResourceIdentityOutput() DeliveryWithResourceIdentityOutput
	ToDeliveryWithResourceIdentityOutputWithContext(context.Context) DeliveryWithResourceIdentityOutput
}

// Information about the delivery for an event subscription with resource identity.
type DeliveryWithResourceIdentityArgs struct {
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
	Destination pulumi.Input `pulumi:"destination"`
	// The identity to use when delivering events.
	Identity EventSubscriptionIdentityPtrInput `pulumi:"identity"`
}

func (DeliveryWithResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryWithResourceIdentity)(nil)).Elem()
}

func (i DeliveryWithResourceIdentityArgs) ToDeliveryWithResourceIdentityOutput() DeliveryWithResourceIdentityOutput {
	return i.ToDeliveryWithResourceIdentityOutputWithContext(context.Background())
}

func (i DeliveryWithResourceIdentityArgs) ToDeliveryWithResourceIdentityOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryWithResourceIdentityOutput)
}

func (i DeliveryWithResourceIdentityArgs) ToDeliveryWithResourceIdentityPtrOutput() DeliveryWithResourceIdentityPtrOutput {
	return i.ToDeliveryWithResourceIdentityPtrOutputWithContext(context.Background())
}

func (i DeliveryWithResourceIdentityArgs) ToDeliveryWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryWithResourceIdentityOutput).ToDeliveryWithResourceIdentityPtrOutputWithContext(ctx)
}

// DeliveryWithResourceIdentityPtrInput is an input type that accepts DeliveryWithResourceIdentityArgs, DeliveryWithResourceIdentityPtr and DeliveryWithResourceIdentityPtrOutput values.
// You can construct a concrete instance of `DeliveryWithResourceIdentityPtrInput` via:
//
//	        DeliveryWithResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type DeliveryWithResourceIdentityPtrInput interface {
	pulumi.Input

	ToDeliveryWithResourceIdentityPtrOutput() DeliveryWithResourceIdentityPtrOutput
	ToDeliveryWithResourceIdentityPtrOutputWithContext(context.Context) DeliveryWithResourceIdentityPtrOutput
}

type deliveryWithResourceIdentityPtrType DeliveryWithResourceIdentityArgs

func DeliveryWithResourceIdentityPtr(v *DeliveryWithResourceIdentityArgs) DeliveryWithResourceIdentityPtrInput {
	return (*deliveryWithResourceIdentityPtrType)(v)
}

func (*deliveryWithResourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryWithResourceIdentity)(nil)).Elem()
}

func (i *deliveryWithResourceIdentityPtrType) ToDeliveryWithResourceIdentityPtrOutput() DeliveryWithResourceIdentityPtrOutput {
	return i.ToDeliveryWithResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *deliveryWithResourceIdentityPtrType) ToDeliveryWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryWithResourceIdentityPtrOutput)
}

// Information about the delivery for an event subscription with resource identity.
type DeliveryWithResourceIdentityOutput struct{ *pulumi.OutputState }

func (DeliveryWithResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryWithResourceIdentity)(nil)).Elem()
}

func (o DeliveryWithResourceIdentityOutput) ToDeliveryWithResourceIdentityOutput() DeliveryWithResourceIdentityOutput {
	return o
}

func (o DeliveryWithResourceIdentityOutput) ToDeliveryWithResourceIdentityOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityOutput {
	return o
}

func (o DeliveryWithResourceIdentityOutput) ToDeliveryWithResourceIdentityPtrOutput() DeliveryWithResourceIdentityPtrOutput {
	return o.ToDeliveryWithResourceIdentityPtrOutputWithContext(context.Background())
}

func (o DeliveryWithResourceIdentityOutput) ToDeliveryWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeliveryWithResourceIdentity) *DeliveryWithResourceIdentity {
		return &v
	}).(DeliveryWithResourceIdentityPtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeliveryWithResourceIdentityOutput) Destination() pulumi.AnyOutput {
	return o.ApplyT(func(v DeliveryWithResourceIdentity) interface{} { return v.Destination }).(pulumi.AnyOutput)
}

// The identity to use when delivering events.
func (o DeliveryWithResourceIdentityOutput) Identity() EventSubscriptionIdentityPtrOutput {
	return o.ApplyT(func(v DeliveryWithResourceIdentity) *EventSubscriptionIdentity { return v.Identity }).(EventSubscriptionIdentityPtrOutput)
}

type DeliveryWithResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (DeliveryWithResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryWithResourceIdentity)(nil)).Elem()
}

func (o DeliveryWithResourceIdentityPtrOutput) ToDeliveryWithResourceIdentityPtrOutput() DeliveryWithResourceIdentityPtrOutput {
	return o
}

func (o DeliveryWithResourceIdentityPtrOutput) ToDeliveryWithResourceIdentityPtrOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityPtrOutput {
	return o
}

func (o DeliveryWithResourceIdentityPtrOutput) Elem() DeliveryWithResourceIdentityOutput {
	return o.ApplyT(func(v *DeliveryWithResourceIdentity) DeliveryWithResourceIdentity {
		if v != nil {
			return *v
		}
		var ret DeliveryWithResourceIdentity
		return ret
	}).(DeliveryWithResourceIdentityOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeliveryWithResourceIdentityPtrOutput) Destination() pulumi.AnyOutput {
	return o.ApplyT(func(v *DeliveryWithResourceIdentity) interface{} {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.AnyOutput)
}

// The identity to use when delivering events.
func (o DeliveryWithResourceIdentityPtrOutput) Identity() EventSubscriptionIdentityPtrOutput {
	return o.ApplyT(func(v *DeliveryWithResourceIdentity) *EventSubscriptionIdentity {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(EventSubscriptionIdentityPtrOutput)
}

// Information about the delivery for an event subscription with resource identity.
type DeliveryWithResourceIdentityResponse struct {
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
	Destination interface{} `pulumi:"destination"`
	// The identity to use when delivering events.
	Identity *EventSubscriptionIdentityResponse `pulumi:"identity"`
}

// Information about the delivery for an event subscription with resource identity.
type DeliveryWithResourceIdentityResponseOutput struct{ *pulumi.OutputState }

func (DeliveryWithResourceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryWithResourceIdentityResponse)(nil)).Elem()
}

func (o DeliveryWithResourceIdentityResponseOutput) ToDeliveryWithResourceIdentityResponseOutput() DeliveryWithResourceIdentityResponseOutput {
	return o
}

func (o DeliveryWithResourceIdentityResponseOutput) ToDeliveryWithResourceIdentityResponseOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityResponseOutput {
	return o
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeliveryWithResourceIdentityResponseOutput) Destination() pulumi.AnyOutput {
	return o.ApplyT(func(v DeliveryWithResourceIdentityResponse) interface{} { return v.Destination }).(pulumi.AnyOutput)
}

// The identity to use when delivering events.
func (o DeliveryWithResourceIdentityResponseOutput) Identity() EventSubscriptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v DeliveryWithResourceIdentityResponse) *EventSubscriptionIdentityResponse { return v.Identity }).(EventSubscriptionIdentityResponsePtrOutput)
}

type DeliveryWithResourceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (DeliveryWithResourceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryWithResourceIdentityResponse)(nil)).Elem()
}

func (o DeliveryWithResourceIdentityResponsePtrOutput) ToDeliveryWithResourceIdentityResponsePtrOutput() DeliveryWithResourceIdentityResponsePtrOutput {
	return o
}

func (o DeliveryWithResourceIdentityResponsePtrOutput) ToDeliveryWithResourceIdentityResponsePtrOutputWithContext(ctx context.Context) DeliveryWithResourceIdentityResponsePtrOutput {
	return o
}

func (o DeliveryWithResourceIdentityResponsePtrOutput) Elem() DeliveryWithResourceIdentityResponseOutput {
	return o.ApplyT(func(v *DeliveryWithResourceIdentityResponse) DeliveryWithResourceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret DeliveryWithResourceIdentityResponse
		return ret
	}).(DeliveryWithResourceIdentityResponseOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
func (o DeliveryWithResourceIdentityResponsePtrOutput) Destination() pulumi.AnyOutput {
	return o.ApplyT(func(v *DeliveryWithResourceIdentityResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.AnyOutput)
}

// The identity to use when delivering events.
func (o DeliveryWithResourceIdentityResponsePtrOutput) Identity() EventSubscriptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v *DeliveryWithResourceIdentityResponse) *EventSubscriptionIdentityResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(EventSubscriptionIdentityResponsePtrOutput)
}

// Dynamic delivery attribute mapping details.
type DynamicDeliveryAttributeMapping struct {
	// Name of the delivery attribute or header.
	Name *string `pulumi:"name"`
	// JSON path in the event which contains attribute value.
	SourceField *string `pulumi:"sourceField"`
	// Type of the delivery attribute or header name.
	// Expected value is 'Dynamic'.
	Type string `pulumi:"type"`
}

// DynamicDeliveryAttributeMappingInput is an input type that accepts DynamicDeliveryAttributeMappingArgs and DynamicDeliveryAttributeMappingOutput values.
// You can construct a concrete instance of `DynamicDeliveryAttributeMappingInput` via:
//
//	DynamicDeliveryAttributeMappingArgs{...}
type DynamicDeliveryAttributeMappingInput interface {
	pulumi.Input

	ToDynamicDeliveryAttributeMappingOutput() DynamicDeliveryAttributeMappingOutput
	ToDynamicDeliveryAttributeMappingOutputWithContext(context.Context) DynamicDeliveryAttributeMappingOutput
}

// Dynamic delivery attribute mapping details.
type DynamicDeliveryAttributeMappingArgs struct {
	// Name of the delivery attribute or header.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// JSON path in the event which contains attribute value.
	SourceField pulumi.StringPtrInput `pulumi:"sourceField"`
	// Type of the delivery attribute or header name.
	// Expected value is 'Dynamic'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicDeliveryAttributeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicDeliveryAttributeMapping)(nil)).Elem()
}

func (i DynamicDeliveryAttributeMappingArgs) ToDynamicDeliveryAttributeMappingOutput() DynamicDeliveryAttributeMappingOutput {
	return i.ToDynamicDeliveryAttributeMappingOutputWithContext(context.Background())
}

func (i DynamicDeliveryAttributeMappingArgs) ToDynamicDeliveryAttributeMappingOutputWithContext(ctx context.Context) DynamicDeliveryAttributeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicDeliveryAttributeMappingOutput)
}

// Dynamic delivery attribute mapping details.
type DynamicDeliveryAttributeMappingOutput struct{ *pulumi.OutputState }

func (DynamicDeliveryAttributeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicDeliveryAttributeMapping)(nil)).Elem()
}

func (o DynamicDeliveryAttributeMappingOutput) ToDynamicDeliveryAttributeMappingOutput() DynamicDeliveryAttributeMappingOutput {
	return o
}

func (o DynamicDeliveryAttributeMappingOutput) ToDynamicDeliveryAttributeMappingOutputWithContext(ctx context.Context) DynamicDeliveryAttributeMappingOutput {
	return o
}

// Name of the delivery attribute or header.
func (o DynamicDeliveryAttributeMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicDeliveryAttributeMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// JSON path in the event which contains attribute value.
func (o DynamicDeliveryAttributeMappingOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicDeliveryAttributeMapping) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

// Type of the delivery attribute or header name.
// Expected value is 'Dynamic'.
func (o DynamicDeliveryAttributeMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicDeliveryAttributeMapping) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamic delivery attribute mapping details.
type DynamicDeliveryAttributeMappingResponse struct {
	// Name of the delivery attribute or header.
	Name *string `pulumi:"name"`
	// JSON path in the event which contains attribute value.
	SourceField *string `pulumi:"sourceField"`
	// Type of the delivery attribute or header name.
	// Expected value is 'Dynamic'.
	Type string `pulumi:"type"`
}

// Dynamic delivery attribute mapping details.
type DynamicDeliveryAttributeMappingResponseOutput struct{ *pulumi.OutputState }

func (DynamicDeliveryAttributeMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicDeliveryAttributeMappingResponse)(nil)).Elem()
}

func (o DynamicDeliveryAttributeMappingResponseOutput) ToDynamicDeliveryAttributeMappingResponseOutput() DynamicDeliveryAttributeMappingResponseOutput {
	return o
}

func (o DynamicDeliveryAttributeMappingResponseOutput) ToDynamicDeliveryAttributeMappingResponseOutputWithContext(ctx context.Context) DynamicDeliveryAttributeMappingResponseOutput {
	return o
}

// Name of the delivery attribute or header.
func (o DynamicDeliveryAttributeMappingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicDeliveryAttributeMappingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// JSON path in the event which contains attribute value.
func (o DynamicDeliveryAttributeMappingResponseOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicDeliveryAttributeMappingResponse) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

// Type of the delivery attribute or header name.
// Expected value is 'Dynamic'.
func (o DynamicDeliveryAttributeMappingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicDeliveryAttributeMappingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DynamicRoutingEnrichment struct {
	// Dynamic routing enrichment key.
	Key *string `pulumi:"key"`
	// Dynamic routing enrichment value.
	Value *string `pulumi:"value"`
}

// DynamicRoutingEnrichmentInput is an input type that accepts DynamicRoutingEnrichmentArgs and DynamicRoutingEnrichmentOutput values.
// You can construct a concrete instance of `DynamicRoutingEnrichmentInput` via:
//
//	DynamicRoutingEnrichmentArgs{...}
type DynamicRoutingEnrichmentInput interface {
	pulumi.Input

	ToDynamicRoutingEnrichmentOutput() DynamicRoutingEnrichmentOutput
	ToDynamicRoutingEnrichmentOutputWithContext(context.Context) DynamicRoutingEnrichmentOutput
}

type DynamicRoutingEnrichmentArgs struct {
	// Dynamic routing enrichment key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Dynamic routing enrichment value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DynamicRoutingEnrichmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicRoutingEnrichment)(nil)).Elem()
}

func (i DynamicRoutingEnrichmentArgs) ToDynamicRoutingEnrichmentOutput() DynamicRoutingEnrichmentOutput {
	return i.ToDynamicRoutingEnrichmentOutputWithContext(context.Background())
}

func (i DynamicRoutingEnrichmentArgs) ToDynamicRoutingEnrichmentOutputWithContext(ctx context.Context) DynamicRoutingEnrichmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicRoutingEnrichmentOutput)
}

// DynamicRoutingEnrichmentArrayInput is an input type that accepts DynamicRoutingEnrichmentArray and DynamicRoutingEnrichmentArrayOutput values.
// You can construct a concrete instance of `DynamicRoutingEnrichmentArrayInput` via:
//
//	DynamicRoutingEnrichmentArray{ DynamicRoutingEnrichmentArgs{...} }
type DynamicRoutingEnrichmentArrayInput interface {
	pulumi.Input

	ToDynamicRoutingEnrichmentArrayOutput() DynamicRoutingEnrichmentArrayOutput
	ToDynamicRoutingEnrichmentArrayOutputWithContext(context.Context) DynamicRoutingEnrichmentArrayOutput
}

type DynamicRoutingEnrichmentArray []DynamicRoutingEnrichmentInput

func (DynamicRoutingEnrichmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicRoutingEnrichment)(nil)).Elem()
}

func (i DynamicRoutingEnrichmentArray) ToDynamicRoutingEnrichmentArrayOutput() DynamicRoutingEnrichmentArrayOutput {
	return i.ToDynamicRoutingEnrichmentArrayOutputWithContext(context.Background())
}

func (i DynamicRoutingEnrichmentArray) ToDynamicRoutingEnrichmentArrayOutputWithContext(ctx context.Context) DynamicRoutingEnrichmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicRoutingEnrichmentArrayOutput)
}

type DynamicRoutingEnrichmentOutput struct{ *pulumi.OutputState }

func (DynamicRoutingEnrichmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicRoutingEnrichment)(nil)).Elem()
}

func (o DynamicRoutingEnrichmentOutput) ToDynamicRoutingEnrichmentOutput() DynamicRoutingEnrichmentOutput {
	return o
}

func (o DynamicRoutingEnrichmentOutput) ToDynamicRoutingEnrichmentOutputWithContext(ctx context.Context) DynamicRoutingEnrichmentOutput {
	return o
}

// Dynamic routing enrichment key.
func (o DynamicRoutingEnrichmentOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicRoutingEnrichment) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Dynamic routing enrichment value.
func (o DynamicRoutingEnrichmentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicRoutingEnrichment) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DynamicRoutingEnrichmentArrayOutput struct{ *pulumi.OutputState }

func (DynamicRoutingEnrichmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicRoutingEnrichment)(nil)).Elem()
}

func (o DynamicRoutingEnrichmentArrayOutput) ToDynamicRoutingEnrichmentArrayOutput() DynamicRoutingEnrichmentArrayOutput {
	return o
}

func (o DynamicRoutingEnrichmentArrayOutput) ToDynamicRoutingEnrichmentArrayOutputWithContext(ctx context.Context) DynamicRoutingEnrichmentArrayOutput {
	return o
}

func (o DynamicRoutingEnrichmentArrayOutput) Index(i pulumi.IntInput) DynamicRoutingEnrichmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicRoutingEnrichment {
		return vs[0].([]DynamicRoutingEnrichment)[vs[1].(int)]
	}).(DynamicRoutingEnrichmentOutput)
}

type DynamicRoutingEnrichmentResponse struct {
	// Dynamic routing enrichment key.
	Key *string `pulumi:"key"`
	// Dynamic routing enrichment value.
	Value *string `pulumi:"value"`
}

type DynamicRoutingEnrichmentResponseOutput struct{ *pulumi.OutputState }

func (DynamicRoutingEnrichmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicRoutingEnrichmentResponse)(nil)).Elem()
}

func (o DynamicRoutingEnrichmentResponseOutput) ToDynamicRoutingEnrichmentResponseOutput() DynamicRoutingEnrichmentResponseOutput {
	return o
}

func (o DynamicRoutingEnrichmentResponseOutput) ToDynamicRoutingEnrichmentResponseOutputWithContext(ctx context.Context) DynamicRoutingEnrichmentResponseOutput {
	return o
}

// Dynamic routing enrichment key.
func (o DynamicRoutingEnrichmentResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicRoutingEnrichmentResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Dynamic routing enrichment value.
func (o DynamicRoutingEnrichmentResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicRoutingEnrichmentResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DynamicRoutingEnrichmentResponseArrayOutput struct{ *pulumi.OutputState }

func (DynamicRoutingEnrichmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicRoutingEnrichmentResponse)(nil)).Elem()
}

func (o DynamicRoutingEnrichmentResponseArrayOutput) ToDynamicRoutingEnrichmentResponseArrayOutput() DynamicRoutingEnrichmentResponseArrayOutput {
	return o
}

func (o DynamicRoutingEnrichmentResponseArrayOutput) ToDynamicRoutingEnrichmentResponseArrayOutputWithContext(ctx context.Context) DynamicRoutingEnrichmentResponseArrayOutput {
	return o
}

func (o DynamicRoutingEnrichmentResponseArrayOutput) Index(i pulumi.IntInput) DynamicRoutingEnrichmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicRoutingEnrichmentResponse {
		return vs[0].([]DynamicRoutingEnrichmentResponse)[vs[1].(int)]
	}).(DynamicRoutingEnrichmentResponseOutput)
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestination struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'EventHub'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// EventHubEventSubscriptionDestinationInput is an input type that accepts EventHubEventSubscriptionDestinationArgs and EventHubEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `EventHubEventSubscriptionDestinationInput` via:
//
//	EventHubEventSubscriptionDestinationArgs{...}
type EventHubEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput
	ToEventHubEventSubscriptionDestinationOutputWithContext(context.Context) EventHubEventSubscriptionDestinationOutput
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestinationArgs struct {
	// Delivery attribute details.
	DeliveryAttributeMappings pulumi.ArrayInput `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'EventHub'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (EventHubEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestination)(nil)).Elem()
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput {
	return i.ToEventHubEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubEventSubscriptionDestinationOutput)
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationPtrOutput() EventHubEventSubscriptionDestinationPtrOutput {
	return i.ToEventHubEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubEventSubscriptionDestinationOutput).ToEventHubEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// EventHubEventSubscriptionDestinationPtrInput is an input type that accepts EventHubEventSubscriptionDestinationArgs, EventHubEventSubscriptionDestinationPtr and EventHubEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `EventHubEventSubscriptionDestinationPtrInput` via:
//
//	        EventHubEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type EventHubEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToEventHubEventSubscriptionDestinationPtrOutput() EventHubEventSubscriptionDestinationPtrOutput
	ToEventHubEventSubscriptionDestinationPtrOutputWithContext(context.Context) EventHubEventSubscriptionDestinationPtrOutput
}

type eventHubEventSubscriptionDestinationPtrType EventHubEventSubscriptionDestinationArgs

func EventHubEventSubscriptionDestinationPtr(v *EventHubEventSubscriptionDestinationArgs) EventHubEventSubscriptionDestinationPtrInput {
	return (*eventHubEventSubscriptionDestinationPtrType)(v)
}

func (*eventHubEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubEventSubscriptionDestination)(nil)).Elem()
}

func (i *eventHubEventSubscriptionDestinationPtrType) ToEventHubEventSubscriptionDestinationPtrOutput() EventHubEventSubscriptionDestinationPtrOutput {
	return i.ToEventHubEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventHubEventSubscriptionDestinationPtrType) ToEventHubEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubEventSubscriptionDestinationPtrOutput)
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventHubEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestination)(nil)).Elem()
}

func (o EventHubEventSubscriptionDestinationOutput) ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationOutput) ToEventHubEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationOutput) ToEventHubEventSubscriptionDestinationPtrOutput() EventHubEventSubscriptionDestinationPtrOutput {
	return o.ToEventHubEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o EventHubEventSubscriptionDestinationOutput) ToEventHubEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubEventSubscriptionDestination) *EventHubEventSubscriptionDestination {
		return &v
	}).(EventHubEventSubscriptionDestinationPtrOutput)
}

// Delivery attribute details.
func (o EventHubEventSubscriptionDestinationOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestination) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'EventHub'.
func (o EventHubEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
func (o EventHubEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type EventHubEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventHubEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubEventSubscriptionDestination)(nil)).Elem()
}

func (o EventHubEventSubscriptionDestinationPtrOutput) ToEventHubEventSubscriptionDestinationPtrOutput() EventHubEventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationPtrOutput) ToEventHubEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationPtrOutput) Elem() EventHubEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestination) EventHubEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret EventHubEventSubscriptionDestination
		return ret
	}).(EventHubEventSubscriptionDestinationOutput)
}

// Delivery attribute details.
func (o EventHubEventSubscriptionDestinationPtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestination) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'EventHub'.
func (o EventHubEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
func (o EventHubEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestinationResponse struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'EventHub'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventHubEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventHubEventSubscriptionDestinationResponseOutput) ToEventHubEventSubscriptionDestinationResponseOutput() EventHubEventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationResponseOutput) ToEventHubEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationResponseOutput {
	return o
}

// Delivery attribute details.
func (o EventHubEventSubscriptionDestinationResponseOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestinationResponse) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'EventHub'.
func (o EventHubEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
func (o EventHubEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type EventHubEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (EventHubEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventHubEventSubscriptionDestinationResponsePtrOutput) ToEventHubEventSubscriptionDestinationResponsePtrOutput() EventHubEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationResponsePtrOutput) ToEventHubEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationResponsePtrOutput) Elem() EventHubEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestinationResponse) EventHubEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret EventHubEventSubscriptionDestinationResponse
		return ret
	}).(EventHubEventSubscriptionDestinationResponseOutput)
}

// Delivery attribute details.
func (o EventHubEventSubscriptionDestinationResponsePtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestinationResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'EventHub'.
func (o EventHubEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
func (o EventHubEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilter struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []interface{} `pulumi:"advancedFilters"`
	// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
	EnableAdvancedFilteringOnArrays *bool `pulumi:"enableAdvancedFilteringOnArrays"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// Defaults sets the appropriate defaults for EventSubscriptionFilter
func (val *EventSubscriptionFilter) Defaults() *EventSubscriptionFilter {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSubjectCaseSensitive == nil {
		isSubjectCaseSensitive_ := false
		tmp.IsSubjectCaseSensitive = &isSubjectCaseSensitive_
	}
	return &tmp
}

// EventSubscriptionFilterInput is an input type that accepts EventSubscriptionFilterArgs and EventSubscriptionFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterInput` via:
//
//	EventSubscriptionFilterArgs{...}
type EventSubscriptionFilterInput interface {
	pulumi.Input

	ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput
	ToEventSubscriptionFilterOutputWithContext(context.Context) EventSubscriptionFilterOutput
}

// Filter for the Event Subscription.
type EventSubscriptionFilterArgs struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters pulumi.ArrayInput `pulumi:"advancedFilters"`
	// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
	EnableAdvancedFilteringOnArrays pulumi.BoolPtrInput `pulumi:"enableAdvancedFilteringOnArrays"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

// Defaults sets the appropriate defaults for EventSubscriptionFilterArgs
func (val *EventSubscriptionFilterArgs) Defaults() *EventSubscriptionFilterArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSubjectCaseSensitive == nil {
		tmp.IsSubjectCaseSensitive = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EventSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return i.ToEventSubscriptionFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput)
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput).ToEventSubscriptionFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionFilterPtrInput is an input type that accepts EventSubscriptionFilterArgs, EventSubscriptionFilterPtr and EventSubscriptionFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterPtrInput` via:
//
//	        EventSubscriptionFilterArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput
	ToEventSubscriptionFilterPtrOutputWithContext(context.Context) EventSubscriptionFilterPtrOutput
}

type eventSubscriptionFilterPtrType EventSubscriptionFilterArgs

func EventSubscriptionFilterPtr(v *EventSubscriptionFilterArgs) EventSubscriptionFilterPtrInput {
	return (*eventSubscriptionFilterPtrType)(v)
}

func (*eventSubscriptionFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionFilter) *EventSubscriptionFilter {
		return &v
	}).(EventSubscriptionFilterPtrOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []interface{} { return v.AdvancedFilters }).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
func (o EventSubscriptionFilterOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *bool { return v.EnableAdvancedFilteringOnArrays }).(pulumi.BoolPtrOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) Elem() EventSubscriptionFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) EventSubscriptionFilter {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionFilter
		return ret
	}).(EventSubscriptionFilterOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterPtrOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []interface{} {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
func (o EventSubscriptionFilterPtrOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAdvancedFilteringOnArrays
	}).(pulumi.BoolPtrOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterPtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterPtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilterResponse struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []interface{} `pulumi:"advancedFilters"`
	// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
	EnableAdvancedFilteringOnArrays *bool `pulumi:"enableAdvancedFilteringOnArrays"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// Defaults sets the appropriate defaults for EventSubscriptionFilterResponse
func (val *EventSubscriptionFilterResponse) Defaults() *EventSubscriptionFilterResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSubjectCaseSensitive == nil {
		isSubjectCaseSensitive_ := false
		tmp.IsSubjectCaseSensitive = &isSubjectCaseSensitive_
	}
	return &tmp
}

// Filter for the Event Subscription.
type EventSubscriptionFilterResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return o
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponseOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []interface{} { return v.AdvancedFilters }).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
func (o EventSubscriptionFilterResponseOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *bool { return v.EnableAdvancedFilteringOnArrays }).(pulumi.BoolPtrOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponseOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponseOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) Elem() EventSubscriptionFilterResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) EventSubscriptionFilterResponse {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionFilterResponse
		return ret
	}).(EventSubscriptionFilterResponseOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponsePtrOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
func (o EventSubscriptionFilterResponsePtrOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAdvancedFilteringOnArrays
	}).(pulumi.BoolPtrOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponsePtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponsePtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// The identity information with the event subscription.
type EventSubscriptionIdentity struct {
	// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
	Type *string `pulumi:"type"`
	// The user identity associated with the resource.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// EventSubscriptionIdentityInput is an input type that accepts EventSubscriptionIdentityArgs and EventSubscriptionIdentityOutput values.
// You can construct a concrete instance of `EventSubscriptionIdentityInput` via:
//
//	EventSubscriptionIdentityArgs{...}
type EventSubscriptionIdentityInput interface {
	pulumi.Input

	ToEventSubscriptionIdentityOutput() EventSubscriptionIdentityOutput
	ToEventSubscriptionIdentityOutputWithContext(context.Context) EventSubscriptionIdentityOutput
}

// The identity information with the event subscription.
type EventSubscriptionIdentityArgs struct {
	// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The user identity associated with the resource.
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (EventSubscriptionIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionIdentity)(nil)).Elem()
}

func (i EventSubscriptionIdentityArgs) ToEventSubscriptionIdentityOutput() EventSubscriptionIdentityOutput {
	return i.ToEventSubscriptionIdentityOutputWithContext(context.Background())
}

func (i EventSubscriptionIdentityArgs) ToEventSubscriptionIdentityOutputWithContext(ctx context.Context) EventSubscriptionIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionIdentityOutput)
}

func (i EventSubscriptionIdentityArgs) ToEventSubscriptionIdentityPtrOutput() EventSubscriptionIdentityPtrOutput {
	return i.ToEventSubscriptionIdentityPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionIdentityArgs) ToEventSubscriptionIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionIdentityOutput).ToEventSubscriptionIdentityPtrOutputWithContext(ctx)
}

// EventSubscriptionIdentityPtrInput is an input type that accepts EventSubscriptionIdentityArgs, EventSubscriptionIdentityPtr and EventSubscriptionIdentityPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionIdentityPtrInput` via:
//
//	        EventSubscriptionIdentityArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionIdentityPtrInput interface {
	pulumi.Input

	ToEventSubscriptionIdentityPtrOutput() EventSubscriptionIdentityPtrOutput
	ToEventSubscriptionIdentityPtrOutputWithContext(context.Context) EventSubscriptionIdentityPtrOutput
}

type eventSubscriptionIdentityPtrType EventSubscriptionIdentityArgs

func EventSubscriptionIdentityPtr(v *EventSubscriptionIdentityArgs) EventSubscriptionIdentityPtrInput {
	return (*eventSubscriptionIdentityPtrType)(v)
}

func (*eventSubscriptionIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionIdentity)(nil)).Elem()
}

func (i *eventSubscriptionIdentityPtrType) ToEventSubscriptionIdentityPtrOutput() EventSubscriptionIdentityPtrOutput {
	return i.ToEventSubscriptionIdentityPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionIdentityPtrType) ToEventSubscriptionIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionIdentityPtrOutput)
}

// The identity information with the event subscription.
type EventSubscriptionIdentityOutput struct{ *pulumi.OutputState }

func (EventSubscriptionIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionIdentity)(nil)).Elem()
}

func (o EventSubscriptionIdentityOutput) ToEventSubscriptionIdentityOutput() EventSubscriptionIdentityOutput {
	return o
}

func (o EventSubscriptionIdentityOutput) ToEventSubscriptionIdentityOutputWithContext(ctx context.Context) EventSubscriptionIdentityOutput {
	return o
}

func (o EventSubscriptionIdentityOutput) ToEventSubscriptionIdentityPtrOutput() EventSubscriptionIdentityPtrOutput {
	return o.ToEventSubscriptionIdentityPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionIdentityOutput) ToEventSubscriptionIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionIdentity) *EventSubscriptionIdentity {
		return &v
	}).(EventSubscriptionIdentityPtrOutput)
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o EventSubscriptionIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionIdentityOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionIdentity) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type EventSubscriptionIdentityPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionIdentity)(nil)).Elem()
}

func (o EventSubscriptionIdentityPtrOutput) ToEventSubscriptionIdentityPtrOutput() EventSubscriptionIdentityPtrOutput {
	return o
}

func (o EventSubscriptionIdentityPtrOutput) ToEventSubscriptionIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionIdentityPtrOutput {
	return o
}

func (o EventSubscriptionIdentityPtrOutput) Elem() EventSubscriptionIdentityOutput {
	return o.ApplyT(func(v *EventSubscriptionIdentity) EventSubscriptionIdentity {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionIdentity
		return ret
	}).(EventSubscriptionIdentityOutput)
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o EventSubscriptionIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionIdentityPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// The identity information with the event subscription.
type EventSubscriptionIdentityResponse struct {
	// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
	Type *string `pulumi:"type"`
	// The user identity associated with the resource.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// The identity information with the event subscription.
type EventSubscriptionIdentityResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionIdentityResponse)(nil)).Elem()
}

func (o EventSubscriptionIdentityResponseOutput) ToEventSubscriptionIdentityResponseOutput() EventSubscriptionIdentityResponseOutput {
	return o
}

func (o EventSubscriptionIdentityResponseOutput) ToEventSubscriptionIdentityResponseOutputWithContext(ctx context.Context) EventSubscriptionIdentityResponseOutput {
	return o
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o EventSubscriptionIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionIdentityResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionIdentityResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type EventSubscriptionIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionIdentityResponse)(nil)).Elem()
}

func (o EventSubscriptionIdentityResponsePtrOutput) ToEventSubscriptionIdentityResponsePtrOutput() EventSubscriptionIdentityResponsePtrOutput {
	return o
}

func (o EventSubscriptionIdentityResponsePtrOutput) ToEventSubscriptionIdentityResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionIdentityResponsePtrOutput {
	return o
}

func (o EventSubscriptionIdentityResponsePtrOutput) Elem() EventSubscriptionIdentityResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionIdentityResponse) EventSubscriptionIdentityResponse {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionIdentityResponse
		return ret
	}).(EventSubscriptionIdentityResponseOutput)
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o EventSubscriptionIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionIdentityResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// The event type information for Channels.
type EventTypeInfo struct {
	// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
	// An example of a valid inline event name is "Contoso.OrderCreated".
	// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
	InlineEventTypes map[string]InlineEventProperties `pulumi:"inlineEventTypes"`
	// The kind of event type used.
	Kind *string `pulumi:"kind"`
}

// EventTypeInfoInput is an input type that accepts EventTypeInfoArgs and EventTypeInfoOutput values.
// You can construct a concrete instance of `EventTypeInfoInput` via:
//
//	EventTypeInfoArgs{...}
type EventTypeInfoInput interface {
	pulumi.Input

	ToEventTypeInfoOutput() EventTypeInfoOutput
	ToEventTypeInfoOutputWithContext(context.Context) EventTypeInfoOutput
}

// The event type information for Channels.
type EventTypeInfoArgs struct {
	// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
	// An example of a valid inline event name is "Contoso.OrderCreated".
	// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
	InlineEventTypes InlineEventPropertiesMapInput `pulumi:"inlineEventTypes"`
	// The kind of event type used.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (EventTypeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeInfo)(nil)).Elem()
}

func (i EventTypeInfoArgs) ToEventTypeInfoOutput() EventTypeInfoOutput {
	return i.ToEventTypeInfoOutputWithContext(context.Background())
}

func (i EventTypeInfoArgs) ToEventTypeInfoOutputWithContext(ctx context.Context) EventTypeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeInfoOutput)
}

func (i EventTypeInfoArgs) ToEventTypeInfoPtrOutput() EventTypeInfoPtrOutput {
	return i.ToEventTypeInfoPtrOutputWithContext(context.Background())
}

func (i EventTypeInfoArgs) ToEventTypeInfoPtrOutputWithContext(ctx context.Context) EventTypeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeInfoOutput).ToEventTypeInfoPtrOutputWithContext(ctx)
}

// EventTypeInfoPtrInput is an input type that accepts EventTypeInfoArgs, EventTypeInfoPtr and EventTypeInfoPtrOutput values.
// You can construct a concrete instance of `EventTypeInfoPtrInput` via:
//
//	        EventTypeInfoArgs{...}
//
//	or:
//
//	        nil
type EventTypeInfoPtrInput interface {
	pulumi.Input

	ToEventTypeInfoPtrOutput() EventTypeInfoPtrOutput
	ToEventTypeInfoPtrOutputWithContext(context.Context) EventTypeInfoPtrOutput
}

type eventTypeInfoPtrType EventTypeInfoArgs

func EventTypeInfoPtr(v *EventTypeInfoArgs) EventTypeInfoPtrInput {
	return (*eventTypeInfoPtrType)(v)
}

func (*eventTypeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTypeInfo)(nil)).Elem()
}

func (i *eventTypeInfoPtrType) ToEventTypeInfoPtrOutput() EventTypeInfoPtrOutput {
	return i.ToEventTypeInfoPtrOutputWithContext(context.Background())
}

func (i *eventTypeInfoPtrType) ToEventTypeInfoPtrOutputWithContext(ctx context.Context) EventTypeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeInfoPtrOutput)
}

// The event type information for Channels.
type EventTypeInfoOutput struct{ *pulumi.OutputState }

func (EventTypeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeInfo)(nil)).Elem()
}

func (o EventTypeInfoOutput) ToEventTypeInfoOutput() EventTypeInfoOutput {
	return o
}

func (o EventTypeInfoOutput) ToEventTypeInfoOutputWithContext(ctx context.Context) EventTypeInfoOutput {
	return o
}

func (o EventTypeInfoOutput) ToEventTypeInfoPtrOutput() EventTypeInfoPtrOutput {
	return o.ToEventTypeInfoPtrOutputWithContext(context.Background())
}

func (o EventTypeInfoOutput) ToEventTypeInfoPtrOutputWithContext(ctx context.Context) EventTypeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTypeInfo) *EventTypeInfo {
		return &v
	}).(EventTypeInfoPtrOutput)
}

// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
// An example of a valid inline event name is "Contoso.OrderCreated".
// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
func (o EventTypeInfoOutput) InlineEventTypes() InlineEventPropertiesMapOutput {
	return o.ApplyT(func(v EventTypeInfo) map[string]InlineEventProperties { return v.InlineEventTypes }).(InlineEventPropertiesMapOutput)
}

// The kind of event type used.
func (o EventTypeInfoOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeInfo) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type EventTypeInfoPtrOutput struct{ *pulumi.OutputState }

func (EventTypeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTypeInfo)(nil)).Elem()
}

func (o EventTypeInfoPtrOutput) ToEventTypeInfoPtrOutput() EventTypeInfoPtrOutput {
	return o
}

func (o EventTypeInfoPtrOutput) ToEventTypeInfoPtrOutputWithContext(ctx context.Context) EventTypeInfoPtrOutput {
	return o
}

func (o EventTypeInfoPtrOutput) Elem() EventTypeInfoOutput {
	return o.ApplyT(func(v *EventTypeInfo) EventTypeInfo {
		if v != nil {
			return *v
		}
		var ret EventTypeInfo
		return ret
	}).(EventTypeInfoOutput)
}

// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
// An example of a valid inline event name is "Contoso.OrderCreated".
// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
func (o EventTypeInfoPtrOutput) InlineEventTypes() InlineEventPropertiesMapOutput {
	return o.ApplyT(func(v *EventTypeInfo) map[string]InlineEventProperties {
		if v == nil {
			return nil
		}
		return v.InlineEventTypes
	}).(InlineEventPropertiesMapOutput)
}

// The kind of event type used.
func (o EventTypeInfoPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTypeInfo) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The event type information for Channels.
type EventTypeInfoResponse struct {
	// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
	// An example of a valid inline event name is "Contoso.OrderCreated".
	// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
	InlineEventTypes map[string]InlineEventPropertiesResponse `pulumi:"inlineEventTypes"`
	// The kind of event type used.
	Kind *string `pulumi:"kind"`
}

// The event type information for Channels.
type EventTypeInfoResponseOutput struct{ *pulumi.OutputState }

func (EventTypeInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeInfoResponse)(nil)).Elem()
}

func (o EventTypeInfoResponseOutput) ToEventTypeInfoResponseOutput() EventTypeInfoResponseOutput {
	return o
}

func (o EventTypeInfoResponseOutput) ToEventTypeInfoResponseOutputWithContext(ctx context.Context) EventTypeInfoResponseOutput {
	return o
}

// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
// An example of a valid inline event name is "Contoso.OrderCreated".
// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
func (o EventTypeInfoResponseOutput) InlineEventTypes() InlineEventPropertiesResponseMapOutput {
	return o.ApplyT(func(v EventTypeInfoResponse) map[string]InlineEventPropertiesResponse { return v.InlineEventTypes }).(InlineEventPropertiesResponseMapOutput)
}

// The kind of event type used.
func (o EventTypeInfoResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeInfoResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type EventTypeInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (EventTypeInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTypeInfoResponse)(nil)).Elem()
}

func (o EventTypeInfoResponsePtrOutput) ToEventTypeInfoResponsePtrOutput() EventTypeInfoResponsePtrOutput {
	return o
}

func (o EventTypeInfoResponsePtrOutput) ToEventTypeInfoResponsePtrOutputWithContext(ctx context.Context) EventTypeInfoResponsePtrOutput {
	return o
}

func (o EventTypeInfoResponsePtrOutput) Elem() EventTypeInfoResponseOutput {
	return o.ApplyT(func(v *EventTypeInfoResponse) EventTypeInfoResponse {
		if v != nil {
			return *v
		}
		var ret EventTypeInfoResponse
		return ret
	}).(EventTypeInfoResponseOutput)
}

// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
// An example of a valid inline event name is "Contoso.OrderCreated".
// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
func (o EventTypeInfoResponsePtrOutput) InlineEventTypes() InlineEventPropertiesResponseMapOutput {
	return o.ApplyT(func(v *EventTypeInfoResponse) map[string]InlineEventPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.InlineEventTypes
	}).(InlineEventPropertiesResponseMapOutput)
}

// The kind of event type used.
func (o EventTypeInfoResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTypeInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Definition of an Extended Location
type ExtendedLocation struct {
	// Fully qualified name of the extended location.
	Name *string `pulumi:"name"`
	// Type of the extended location.
	Type *string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// Definition of an Extended Location
type ExtendedLocationArgs struct {
	// Fully qualified name of the extended location.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the extended location.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

// Definition of an Extended Location
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

// Fully qualified name of the extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// Fully qualified name of the extended location.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Type of the extended location.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Definition of an Extended Location
type ExtendedLocationResponse struct {
	// Fully qualified name of the extended location.
	Name *string `pulumi:"name"`
	// Type of the extended location.
	Type *string `pulumi:"type"`
}

// Definition of an Extended Location
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// Fully qualified name of the extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// Fully qualified name of the extended location.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Type of the extended location.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Filters configuration for the Event Subscription.
type FiltersConfiguration struct {
	// An array of filters that are used for filtering event subscriptions.
	Filters []interface{} `pulumi:"filters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
}

// FiltersConfigurationInput is an input type that accepts FiltersConfigurationArgs and FiltersConfigurationOutput values.
// You can construct a concrete instance of `FiltersConfigurationInput` via:
//
//	FiltersConfigurationArgs{...}
type FiltersConfigurationInput interface {
	pulumi.Input

	ToFiltersConfigurationOutput() FiltersConfigurationOutput
	ToFiltersConfigurationOutputWithContext(context.Context) FiltersConfigurationOutput
}

// Filters configuration for the Event Subscription.
type FiltersConfigurationArgs struct {
	// An array of filters that are used for filtering event subscriptions.
	Filters pulumi.ArrayInput `pulumi:"filters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
}

func (FiltersConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FiltersConfiguration)(nil)).Elem()
}

func (i FiltersConfigurationArgs) ToFiltersConfigurationOutput() FiltersConfigurationOutput {
	return i.ToFiltersConfigurationOutputWithContext(context.Background())
}

func (i FiltersConfigurationArgs) ToFiltersConfigurationOutputWithContext(ctx context.Context) FiltersConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersConfigurationOutput)
}

func (i FiltersConfigurationArgs) ToFiltersConfigurationPtrOutput() FiltersConfigurationPtrOutput {
	return i.ToFiltersConfigurationPtrOutputWithContext(context.Background())
}

func (i FiltersConfigurationArgs) ToFiltersConfigurationPtrOutputWithContext(ctx context.Context) FiltersConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersConfigurationOutput).ToFiltersConfigurationPtrOutputWithContext(ctx)
}

// FiltersConfigurationPtrInput is an input type that accepts FiltersConfigurationArgs, FiltersConfigurationPtr and FiltersConfigurationPtrOutput values.
// You can construct a concrete instance of `FiltersConfigurationPtrInput` via:
//
//	        FiltersConfigurationArgs{...}
//
//	or:
//
//	        nil
type FiltersConfigurationPtrInput interface {
	pulumi.Input

	ToFiltersConfigurationPtrOutput() FiltersConfigurationPtrOutput
	ToFiltersConfigurationPtrOutputWithContext(context.Context) FiltersConfigurationPtrOutput
}

type filtersConfigurationPtrType FiltersConfigurationArgs

func FiltersConfigurationPtr(v *FiltersConfigurationArgs) FiltersConfigurationPtrInput {
	return (*filtersConfigurationPtrType)(v)
}

func (*filtersConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FiltersConfiguration)(nil)).Elem()
}

func (i *filtersConfigurationPtrType) ToFiltersConfigurationPtrOutput() FiltersConfigurationPtrOutput {
	return i.ToFiltersConfigurationPtrOutputWithContext(context.Background())
}

func (i *filtersConfigurationPtrType) ToFiltersConfigurationPtrOutputWithContext(ctx context.Context) FiltersConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersConfigurationPtrOutput)
}

// Filters configuration for the Event Subscription.
type FiltersConfigurationOutput struct{ *pulumi.OutputState }

func (FiltersConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FiltersConfiguration)(nil)).Elem()
}

func (o FiltersConfigurationOutput) ToFiltersConfigurationOutput() FiltersConfigurationOutput {
	return o
}

func (o FiltersConfigurationOutput) ToFiltersConfigurationOutputWithContext(ctx context.Context) FiltersConfigurationOutput {
	return o
}

func (o FiltersConfigurationOutput) ToFiltersConfigurationPtrOutput() FiltersConfigurationPtrOutput {
	return o.ToFiltersConfigurationPtrOutputWithContext(context.Background())
}

func (o FiltersConfigurationOutput) ToFiltersConfigurationPtrOutputWithContext(ctx context.Context) FiltersConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FiltersConfiguration) *FiltersConfiguration {
		return &v
	}).(FiltersConfigurationPtrOutput)
}

// An array of filters that are used for filtering event subscriptions.
func (o FiltersConfigurationOutput) Filters() pulumi.ArrayOutput {
	return o.ApplyT(func(v FiltersConfiguration) []interface{} { return v.Filters }).(pulumi.ArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o FiltersConfigurationOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FiltersConfiguration) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

type FiltersConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FiltersConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FiltersConfiguration)(nil)).Elem()
}

func (o FiltersConfigurationPtrOutput) ToFiltersConfigurationPtrOutput() FiltersConfigurationPtrOutput {
	return o
}

func (o FiltersConfigurationPtrOutput) ToFiltersConfigurationPtrOutputWithContext(ctx context.Context) FiltersConfigurationPtrOutput {
	return o
}

func (o FiltersConfigurationPtrOutput) Elem() FiltersConfigurationOutput {
	return o.ApplyT(func(v *FiltersConfiguration) FiltersConfiguration {
		if v != nil {
			return *v
		}
		var ret FiltersConfiguration
		return ret
	}).(FiltersConfigurationOutput)
}

// An array of filters that are used for filtering event subscriptions.
func (o FiltersConfigurationPtrOutput) Filters() pulumi.ArrayOutput {
	return o.ApplyT(func(v *FiltersConfiguration) []interface{} {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(pulumi.ArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o FiltersConfigurationPtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FiltersConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Filters configuration for the Event Subscription.
type FiltersConfigurationResponse struct {
	// An array of filters that are used for filtering event subscriptions.
	Filters []interface{} `pulumi:"filters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
}

// Filters configuration for the Event Subscription.
type FiltersConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FiltersConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FiltersConfigurationResponse)(nil)).Elem()
}

func (o FiltersConfigurationResponseOutput) ToFiltersConfigurationResponseOutput() FiltersConfigurationResponseOutput {
	return o
}

func (o FiltersConfigurationResponseOutput) ToFiltersConfigurationResponseOutputWithContext(ctx context.Context) FiltersConfigurationResponseOutput {
	return o
}

// An array of filters that are used for filtering event subscriptions.
func (o FiltersConfigurationResponseOutput) Filters() pulumi.ArrayOutput {
	return o.ApplyT(func(v FiltersConfigurationResponse) []interface{} { return v.Filters }).(pulumi.ArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o FiltersConfigurationResponseOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FiltersConfigurationResponse) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

type FiltersConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FiltersConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FiltersConfigurationResponse)(nil)).Elem()
}

func (o FiltersConfigurationResponsePtrOutput) ToFiltersConfigurationResponsePtrOutput() FiltersConfigurationResponsePtrOutput {
	return o
}

func (o FiltersConfigurationResponsePtrOutput) ToFiltersConfigurationResponsePtrOutputWithContext(ctx context.Context) FiltersConfigurationResponsePtrOutput {
	return o
}

func (o FiltersConfigurationResponsePtrOutput) Elem() FiltersConfigurationResponseOutput {
	return o.ApplyT(func(v *FiltersConfigurationResponse) FiltersConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret FiltersConfigurationResponse
		return ret
	}).(FiltersConfigurationResponseOutput)
}

// An array of filters that are used for filtering event subscriptions.
func (o FiltersConfigurationResponsePtrOutput) Filters() pulumi.ArrayOutput {
	return o.ApplyT(func(v *FiltersConfigurationResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(pulumi.ArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o FiltersConfigurationResponsePtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FiltersConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestination struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'HybridConnection'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// HybridConnectionEventSubscriptionDestinationInput is an input type that accepts HybridConnectionEventSubscriptionDestinationArgs and HybridConnectionEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `HybridConnectionEventSubscriptionDestinationInput` via:
//
//	HybridConnectionEventSubscriptionDestinationArgs{...}
type HybridConnectionEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput
	ToHybridConnectionEventSubscriptionDestinationOutputWithContext(context.Context) HybridConnectionEventSubscriptionDestinationOutput
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationArgs struct {
	// Delivery attribute details.
	DeliveryAttributeMappings pulumi.ArrayInput `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'HybridConnection'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (HybridConnectionEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestination)(nil)).Elem()
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput {
	return i.ToHybridConnectionEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionEventSubscriptionDestinationOutput)
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationPtrOutput() HybridConnectionEventSubscriptionDestinationPtrOutput {
	return i.ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionEventSubscriptionDestinationOutput).ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// HybridConnectionEventSubscriptionDestinationPtrInput is an input type that accepts HybridConnectionEventSubscriptionDestinationArgs, HybridConnectionEventSubscriptionDestinationPtr and HybridConnectionEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `HybridConnectionEventSubscriptionDestinationPtrInput` via:
//
//	        HybridConnectionEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type HybridConnectionEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToHybridConnectionEventSubscriptionDestinationPtrOutput() HybridConnectionEventSubscriptionDestinationPtrOutput
	ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(context.Context) HybridConnectionEventSubscriptionDestinationPtrOutput
}

type hybridConnectionEventSubscriptionDestinationPtrType HybridConnectionEventSubscriptionDestinationArgs

func HybridConnectionEventSubscriptionDestinationPtr(v *HybridConnectionEventSubscriptionDestinationArgs) HybridConnectionEventSubscriptionDestinationPtrInput {
	return (*hybridConnectionEventSubscriptionDestinationPtrType)(v)
}

func (*hybridConnectionEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionEventSubscriptionDestination)(nil)).Elem()
}

func (i *hybridConnectionEventSubscriptionDestinationPtrType) ToHybridConnectionEventSubscriptionDestinationPtrOutput() HybridConnectionEventSubscriptionDestinationPtrOutput {
	return i.ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *hybridConnectionEventSubscriptionDestinationPtrType) ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionEventSubscriptionDestinationPtrOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (HybridConnectionEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestination)(nil)).Elem()
}

func (o HybridConnectionEventSubscriptionDestinationOutput) ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationOutput) ToHybridConnectionEventSubscriptionDestinationOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationOutput) ToHybridConnectionEventSubscriptionDestinationPtrOutput() HybridConnectionEventSubscriptionDestinationPtrOutput {
	return o.ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o HybridConnectionEventSubscriptionDestinationOutput) ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HybridConnectionEventSubscriptionDestination) *HybridConnectionEventSubscriptionDestination {
		return &v
	}).(HybridConnectionEventSubscriptionDestinationPtrOutput)
}

// Delivery attribute details.
func (o HybridConnectionEventSubscriptionDestinationOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestination) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'HybridConnection'.
func (o HybridConnectionEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
func (o HybridConnectionEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type HybridConnectionEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (HybridConnectionEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionEventSubscriptionDestination)(nil)).Elem()
}

func (o HybridConnectionEventSubscriptionDestinationPtrOutput) ToHybridConnectionEventSubscriptionDestinationPtrOutput() HybridConnectionEventSubscriptionDestinationPtrOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationPtrOutput) ToHybridConnectionEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationPtrOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationPtrOutput) Elem() HybridConnectionEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestination) HybridConnectionEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret HybridConnectionEventSubscriptionDestination
		return ret
	}).(HybridConnectionEventSubscriptionDestinationOutput)
}

// Delivery attribute details.
func (o HybridConnectionEventSubscriptionDestinationPtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestination) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'HybridConnection'.
func (o HybridConnectionEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
func (o HybridConnectionEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationResponse struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'HybridConnection'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (HybridConnectionEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ToHybridConnectionEventSubscriptionDestinationResponseOutput() HybridConnectionEventSubscriptionDestinationResponseOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ToHybridConnectionEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationResponseOutput {
	return o
}

// Delivery attribute details.
func (o HybridConnectionEventSubscriptionDestinationResponseOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestinationResponse) []interface{} {
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'HybridConnection'.
func (o HybridConnectionEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type HybridConnectionEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (HybridConnectionEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o HybridConnectionEventSubscriptionDestinationResponsePtrOutput) ToHybridConnectionEventSubscriptionDestinationResponsePtrOutput() HybridConnectionEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationResponsePtrOutput) ToHybridConnectionEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationResponsePtrOutput) Elem() HybridConnectionEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestinationResponse) HybridConnectionEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret HybridConnectionEventSubscriptionDestinationResponse
		return ret
	}).(HybridConnectionEventSubscriptionDestinationResponseOutput)
}

// Delivery attribute details.
func (o HybridConnectionEventSubscriptionDestinationResponsePtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestinationResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'HybridConnection'.
func (o HybridConnectionEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
func (o HybridConnectionEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The identity information for the resource.
type IdentityInfo struct {
	// The principal ID of resource identity.
	PrincipalId *string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId *string `pulumi:"tenantId"`
	// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	// This property is currently not used and reserved for future usage.
	UserAssignedIdentities map[string]UserIdentityProperties `pulumi:"userAssignedIdentities"`
}

// IdentityInfoInput is an input type that accepts IdentityInfoArgs and IdentityInfoOutput values.
// You can construct a concrete instance of `IdentityInfoInput` via:
//
//	IdentityInfoArgs{...}
type IdentityInfoInput interface {
	pulumi.Input

	ToIdentityInfoOutput() IdentityInfoOutput
	ToIdentityInfoOutputWithContext(context.Context) IdentityInfoOutput
}

// The identity information for the resource.
type IdentityInfoArgs struct {
	// The principal ID of resource identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	// This property is currently not used and reserved for future usage.
	UserAssignedIdentities UserIdentityPropertiesMapInput `pulumi:"userAssignedIdentities"`
}

func (IdentityInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityInfo)(nil)).Elem()
}

func (i IdentityInfoArgs) ToIdentityInfoOutput() IdentityInfoOutput {
	return i.ToIdentityInfoOutputWithContext(context.Background())
}

func (i IdentityInfoArgs) ToIdentityInfoOutputWithContext(ctx context.Context) IdentityInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityInfoOutput)
}

func (i IdentityInfoArgs) ToIdentityInfoPtrOutput() IdentityInfoPtrOutput {
	return i.ToIdentityInfoPtrOutputWithContext(context.Background())
}

func (i IdentityInfoArgs) ToIdentityInfoPtrOutputWithContext(ctx context.Context) IdentityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityInfoOutput).ToIdentityInfoPtrOutputWithContext(ctx)
}

// IdentityInfoPtrInput is an input type that accepts IdentityInfoArgs, IdentityInfoPtr and IdentityInfoPtrOutput values.
// You can construct a concrete instance of `IdentityInfoPtrInput` via:
//
//	        IdentityInfoArgs{...}
//
//	or:
//
//	        nil
type IdentityInfoPtrInput interface {
	pulumi.Input

	ToIdentityInfoPtrOutput() IdentityInfoPtrOutput
	ToIdentityInfoPtrOutputWithContext(context.Context) IdentityInfoPtrOutput
}

type identityInfoPtrType IdentityInfoArgs

func IdentityInfoPtr(v *IdentityInfoArgs) IdentityInfoPtrInput {
	return (*identityInfoPtrType)(v)
}

func (*identityInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityInfo)(nil)).Elem()
}

func (i *identityInfoPtrType) ToIdentityInfoPtrOutput() IdentityInfoPtrOutput {
	return i.ToIdentityInfoPtrOutputWithContext(context.Background())
}

func (i *identityInfoPtrType) ToIdentityInfoPtrOutputWithContext(ctx context.Context) IdentityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityInfoPtrOutput)
}

// The identity information for the resource.
type IdentityInfoOutput struct{ *pulumi.OutputState }

func (IdentityInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityInfo)(nil)).Elem()
}

func (o IdentityInfoOutput) ToIdentityInfoOutput() IdentityInfoOutput {
	return o
}

func (o IdentityInfoOutput) ToIdentityInfoOutputWithContext(ctx context.Context) IdentityInfoOutput {
	return o
}

func (o IdentityInfoOutput) ToIdentityInfoPtrOutput() IdentityInfoPtrOutput {
	return o.ToIdentityInfoPtrOutputWithContext(context.Background())
}

func (o IdentityInfoOutput) ToIdentityInfoPtrOutputWithContext(ctx context.Context) IdentityInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityInfo) *IdentityInfo {
		return &v
	}).(IdentityInfoPtrOutput)
}

// The principal ID of resource identity.
func (o IdentityInfoOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityInfo) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityInfoOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityInfo) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o IdentityInfoOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityInfo) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
// This property is currently not used and reserved for future usage.
func (o IdentityInfoOutput) UserAssignedIdentities() UserIdentityPropertiesMapOutput {
	return o.ApplyT(func(v IdentityInfo) map[string]UserIdentityProperties { return v.UserAssignedIdentities }).(UserIdentityPropertiesMapOutput)
}

type IdentityInfoPtrOutput struct{ *pulumi.OutputState }

func (IdentityInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityInfo)(nil)).Elem()
}

func (o IdentityInfoPtrOutput) ToIdentityInfoPtrOutput() IdentityInfoPtrOutput {
	return o
}

func (o IdentityInfoPtrOutput) ToIdentityInfoPtrOutputWithContext(ctx context.Context) IdentityInfoPtrOutput {
	return o
}

func (o IdentityInfoPtrOutput) Elem() IdentityInfoOutput {
	return o.ApplyT(func(v *IdentityInfo) IdentityInfo {
		if v != nil {
			return *v
		}
		var ret IdentityInfo
		return ret
	}).(IdentityInfoOutput)
}

// The principal ID of resource identity.
func (o IdentityInfoPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityInfoPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o IdentityInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
// This property is currently not used and reserved for future usage.
func (o IdentityInfoPtrOutput) UserAssignedIdentities() UserIdentityPropertiesMapOutput {
	return o.ApplyT(func(v *IdentityInfo) map[string]UserIdentityProperties {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesMapOutput)
}

// The identity information for the resource.
type IdentityInfoResponse struct {
	// The principal ID of resource identity.
	PrincipalId *string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId *string `pulumi:"tenantId"`
	// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	// This property is currently not used and reserved for future usage.
	UserAssignedIdentities map[string]UserIdentityPropertiesResponse `pulumi:"userAssignedIdentities"`
}

// The identity information for the resource.
type IdentityInfoResponseOutput struct{ *pulumi.OutputState }

func (IdentityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityInfoResponse)(nil)).Elem()
}

func (o IdentityInfoResponseOutput) ToIdentityInfoResponseOutput() IdentityInfoResponseOutput {
	return o
}

func (o IdentityInfoResponseOutput) ToIdentityInfoResponseOutputWithContext(ctx context.Context) IdentityInfoResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityInfoResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityInfoResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityInfoResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityInfoResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o IdentityInfoResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityInfoResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
// This property is currently not used and reserved for future usage.
func (o IdentityInfoResponseOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v IdentityInfoResponse) map[string]UserIdentityPropertiesResponse {
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesResponseMapOutput)
}

type IdentityInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityInfoResponse)(nil)).Elem()
}

func (o IdentityInfoResponsePtrOutput) ToIdentityInfoResponsePtrOutput() IdentityInfoResponsePtrOutput {
	return o
}

func (o IdentityInfoResponsePtrOutput) ToIdentityInfoResponsePtrOutputWithContext(ctx context.Context) IdentityInfoResponsePtrOutput {
	return o
}

func (o IdentityInfoResponsePtrOutput) Elem() IdentityInfoResponseOutput {
	return o.ApplyT(func(v *IdentityInfoResponse) IdentityInfoResponse {
		if v != nil {
			return *v
		}
		var ret IdentityInfoResponse
		return ret
	}).(IdentityInfoResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityInfoResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityInfoResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
func (o IdentityInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
// This property is currently not used and reserved for future usage.
func (o IdentityInfoResponsePtrOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v *IdentityInfoResponse) map[string]UserIdentityPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesResponseMapOutput)
}

type InboundIpRule struct {
	// Action to perform based on the match or no match of the IpMask.
	Action *string `pulumi:"action"`
	// IP Address in CIDR notation e.g., 10.0.0.0/8.
	IpMask *string `pulumi:"ipMask"`
}

// InboundIpRuleInput is an input type that accepts InboundIpRuleArgs and InboundIpRuleOutput values.
// You can construct a concrete instance of `InboundIpRuleInput` via:
//
//	InboundIpRuleArgs{...}
type InboundIpRuleInput interface {
	pulumi.Input

	ToInboundIpRuleOutput() InboundIpRuleOutput
	ToInboundIpRuleOutputWithContext(context.Context) InboundIpRuleOutput
}

type InboundIpRuleArgs struct {
	// Action to perform based on the match or no match of the IpMask.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// IP Address in CIDR notation e.g., 10.0.0.0/8.
	IpMask pulumi.StringPtrInput `pulumi:"ipMask"`
}

func (InboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundIpRule)(nil)).Elem()
}

func (i InboundIpRuleArgs) ToInboundIpRuleOutput() InboundIpRuleOutput {
	return i.ToInboundIpRuleOutputWithContext(context.Background())
}

func (i InboundIpRuleArgs) ToInboundIpRuleOutputWithContext(ctx context.Context) InboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundIpRuleOutput)
}

// InboundIpRuleArrayInput is an input type that accepts InboundIpRuleArray and InboundIpRuleArrayOutput values.
// You can construct a concrete instance of `InboundIpRuleArrayInput` via:
//
//	InboundIpRuleArray{ InboundIpRuleArgs{...} }
type InboundIpRuleArrayInput interface {
	pulumi.Input

	ToInboundIpRuleArrayOutput() InboundIpRuleArrayOutput
	ToInboundIpRuleArrayOutputWithContext(context.Context) InboundIpRuleArrayOutput
}

type InboundIpRuleArray []InboundIpRuleInput

func (InboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundIpRule)(nil)).Elem()
}

func (i InboundIpRuleArray) ToInboundIpRuleArrayOutput() InboundIpRuleArrayOutput {
	return i.ToInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i InboundIpRuleArray) ToInboundIpRuleArrayOutputWithContext(ctx context.Context) InboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundIpRuleArrayOutput)
}

type InboundIpRuleOutput struct{ *pulumi.OutputState }

func (InboundIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundIpRule)(nil)).Elem()
}

func (o InboundIpRuleOutput) ToInboundIpRuleOutput() InboundIpRuleOutput {
	return o
}

func (o InboundIpRuleOutput) ToInboundIpRuleOutputWithContext(ctx context.Context) InboundIpRuleOutput {
	return o
}

// Action to perform based on the match or no match of the IpMask.
func (o InboundIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// IP Address in CIDR notation e.g., 10.0.0.0/8.
func (o InboundIpRuleOutput) IpMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundIpRule) *string { return v.IpMask }).(pulumi.StringPtrOutput)
}

type InboundIpRuleArrayOutput struct{ *pulumi.OutputState }

func (InboundIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundIpRule)(nil)).Elem()
}

func (o InboundIpRuleArrayOutput) ToInboundIpRuleArrayOutput() InboundIpRuleArrayOutput {
	return o
}

func (o InboundIpRuleArrayOutput) ToInboundIpRuleArrayOutputWithContext(ctx context.Context) InboundIpRuleArrayOutput {
	return o
}

func (o InboundIpRuleArrayOutput) Index(i pulumi.IntInput) InboundIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundIpRule {
		return vs[0].([]InboundIpRule)[vs[1].(int)]
	}).(InboundIpRuleOutput)
}

type InboundIpRuleResponse struct {
	// Action to perform based on the match or no match of the IpMask.
	Action *string `pulumi:"action"`
	// IP Address in CIDR notation e.g., 10.0.0.0/8.
	IpMask *string `pulumi:"ipMask"`
}

type InboundIpRuleResponseOutput struct{ *pulumi.OutputState }

func (InboundIpRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundIpRuleResponse)(nil)).Elem()
}

func (o InboundIpRuleResponseOutput) ToInboundIpRuleResponseOutput() InboundIpRuleResponseOutput {
	return o
}

func (o InboundIpRuleResponseOutput) ToInboundIpRuleResponseOutputWithContext(ctx context.Context) InboundIpRuleResponseOutput {
	return o
}

// Action to perform based on the match or no match of the IpMask.
func (o InboundIpRuleResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundIpRuleResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// IP Address in CIDR notation e.g., 10.0.0.0/8.
func (o InboundIpRuleResponseOutput) IpMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundIpRuleResponse) *string { return v.IpMask }).(pulumi.StringPtrOutput)
}

type InboundIpRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (InboundIpRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundIpRuleResponse)(nil)).Elem()
}

func (o InboundIpRuleResponseArrayOutput) ToInboundIpRuleResponseArrayOutput() InboundIpRuleResponseArrayOutput {
	return o
}

func (o InboundIpRuleResponseArrayOutput) ToInboundIpRuleResponseArrayOutputWithContext(ctx context.Context) InboundIpRuleResponseArrayOutput {
	return o
}

func (o InboundIpRuleResponseArrayOutput) Index(i pulumi.IntInput) InboundIpRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundIpRuleResponse {
		return vs[0].([]InboundIpRuleResponse)[vs[1].(int)]
	}).(InboundIpRuleResponseOutput)
}

// Additional information about every inline event.
type InlineEventProperties struct {
	// The dataSchemaUrl for the inline event.
	DataSchemaUrl *string `pulumi:"dataSchemaUrl"`
	// The description for the inline event.
	Description *string `pulumi:"description"`
	// The displayName for the inline event.
	DisplayName *string `pulumi:"displayName"`
	// The documentationUrl for the inline event.
	DocumentationUrl *string `pulumi:"documentationUrl"`
}

// InlineEventPropertiesInput is an input type that accepts InlineEventPropertiesArgs and InlineEventPropertiesOutput values.
// You can construct a concrete instance of `InlineEventPropertiesInput` via:
//
//	InlineEventPropertiesArgs{...}
type InlineEventPropertiesInput interface {
	pulumi.Input

	ToInlineEventPropertiesOutput() InlineEventPropertiesOutput
	ToInlineEventPropertiesOutputWithContext(context.Context) InlineEventPropertiesOutput
}

// Additional information about every inline event.
type InlineEventPropertiesArgs struct {
	// The dataSchemaUrl for the inline event.
	DataSchemaUrl pulumi.StringPtrInput `pulumi:"dataSchemaUrl"`
	// The description for the inline event.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The displayName for the inline event.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The documentationUrl for the inline event.
	DocumentationUrl pulumi.StringPtrInput `pulumi:"documentationUrl"`
}

func (InlineEventPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineEventProperties)(nil)).Elem()
}

func (i InlineEventPropertiesArgs) ToInlineEventPropertiesOutput() InlineEventPropertiesOutput {
	return i.ToInlineEventPropertiesOutputWithContext(context.Background())
}

func (i InlineEventPropertiesArgs) ToInlineEventPropertiesOutputWithContext(ctx context.Context) InlineEventPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineEventPropertiesOutput)
}

// InlineEventPropertiesMapInput is an input type that accepts InlineEventPropertiesMap and InlineEventPropertiesMapOutput values.
// You can construct a concrete instance of `InlineEventPropertiesMapInput` via:
//
//	InlineEventPropertiesMap{ "key": InlineEventPropertiesArgs{...} }
type InlineEventPropertiesMapInput interface {
	pulumi.Input

	ToInlineEventPropertiesMapOutput() InlineEventPropertiesMapOutput
	ToInlineEventPropertiesMapOutputWithContext(context.Context) InlineEventPropertiesMapOutput
}

type InlineEventPropertiesMap map[string]InlineEventPropertiesInput

func (InlineEventPropertiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InlineEventProperties)(nil)).Elem()
}

func (i InlineEventPropertiesMap) ToInlineEventPropertiesMapOutput() InlineEventPropertiesMapOutput {
	return i.ToInlineEventPropertiesMapOutputWithContext(context.Background())
}

func (i InlineEventPropertiesMap) ToInlineEventPropertiesMapOutputWithContext(ctx context.Context) InlineEventPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineEventPropertiesMapOutput)
}

// Additional information about every inline event.
type InlineEventPropertiesOutput struct{ *pulumi.OutputState }

func (InlineEventPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineEventProperties)(nil)).Elem()
}

func (o InlineEventPropertiesOutput) ToInlineEventPropertiesOutput() InlineEventPropertiesOutput {
	return o
}

func (o InlineEventPropertiesOutput) ToInlineEventPropertiesOutputWithContext(ctx context.Context) InlineEventPropertiesOutput {
	return o
}

// The dataSchemaUrl for the inline event.
func (o InlineEventPropertiesOutput) DataSchemaUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventProperties) *string { return v.DataSchemaUrl }).(pulumi.StringPtrOutput)
}

// The description for the inline event.
func (o InlineEventPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The displayName for the inline event.
func (o InlineEventPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The documentationUrl for the inline event.
func (o InlineEventPropertiesOutput) DocumentationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventProperties) *string { return v.DocumentationUrl }).(pulumi.StringPtrOutput)
}

type InlineEventPropertiesMapOutput struct{ *pulumi.OutputState }

func (InlineEventPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InlineEventProperties)(nil)).Elem()
}

func (o InlineEventPropertiesMapOutput) ToInlineEventPropertiesMapOutput() InlineEventPropertiesMapOutput {
	return o
}

func (o InlineEventPropertiesMapOutput) ToInlineEventPropertiesMapOutputWithContext(ctx context.Context) InlineEventPropertiesMapOutput {
	return o
}

func (o InlineEventPropertiesMapOutput) MapIndex(k pulumi.StringInput) InlineEventPropertiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InlineEventProperties {
		return vs[0].(map[string]InlineEventProperties)[vs[1].(string)]
	}).(InlineEventPropertiesOutput)
}

// Additional information about every inline event.
type InlineEventPropertiesResponse struct {
	// The dataSchemaUrl for the inline event.
	DataSchemaUrl *string `pulumi:"dataSchemaUrl"`
	// The description for the inline event.
	Description *string `pulumi:"description"`
	// The displayName for the inline event.
	DisplayName *string `pulumi:"displayName"`
	// The documentationUrl for the inline event.
	DocumentationUrl *string `pulumi:"documentationUrl"`
}

// Additional information about every inline event.
type InlineEventPropertiesResponseOutput struct{ *pulumi.OutputState }

func (InlineEventPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineEventPropertiesResponse)(nil)).Elem()
}

func (o InlineEventPropertiesResponseOutput) ToInlineEventPropertiesResponseOutput() InlineEventPropertiesResponseOutput {
	return o
}

func (o InlineEventPropertiesResponseOutput) ToInlineEventPropertiesResponseOutputWithContext(ctx context.Context) InlineEventPropertiesResponseOutput {
	return o
}

// The dataSchemaUrl for the inline event.
func (o InlineEventPropertiesResponseOutput) DataSchemaUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventPropertiesResponse) *string { return v.DataSchemaUrl }).(pulumi.StringPtrOutput)
}

// The description for the inline event.
func (o InlineEventPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The displayName for the inline event.
func (o InlineEventPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The documentationUrl for the inline event.
func (o InlineEventPropertiesResponseOutput) DocumentationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineEventPropertiesResponse) *string { return v.DocumentationUrl }).(pulumi.StringPtrOutput)
}

type InlineEventPropertiesResponseMapOutput struct{ *pulumi.OutputState }

func (InlineEventPropertiesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InlineEventPropertiesResponse)(nil)).Elem()
}

func (o InlineEventPropertiesResponseMapOutput) ToInlineEventPropertiesResponseMapOutput() InlineEventPropertiesResponseMapOutput {
	return o
}

func (o InlineEventPropertiesResponseMapOutput) ToInlineEventPropertiesResponseMapOutputWithContext(ctx context.Context) InlineEventPropertiesResponseMapOutput {
	return o
}

func (o InlineEventPropertiesResponseMapOutput) MapIndex(k pulumi.StringInput) InlineEventPropertiesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InlineEventPropertiesResponse {
		return vs[0].(map[string]InlineEventPropertiesResponse)[vs[1].(string)]
	}).(InlineEventPropertiesResponseOutput)
}

// IsNotNull Advanced Filter.
type IsNotNullAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNotNullAdvancedFilterInput is an input type that accepts IsNotNullAdvancedFilterArgs and IsNotNullAdvancedFilterOutput values.
// You can construct a concrete instance of `IsNotNullAdvancedFilterInput` via:
//
//	IsNotNullAdvancedFilterArgs{...}
type IsNotNullAdvancedFilterInput interface {
	pulumi.Input

	ToIsNotNullAdvancedFilterOutput() IsNotNullAdvancedFilterOutput
	ToIsNotNullAdvancedFilterOutputWithContext(context.Context) IsNotNullAdvancedFilterOutput
}

// IsNotNull Advanced Filter.
type IsNotNullAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (IsNotNullAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNotNullAdvancedFilter)(nil)).Elem()
}

func (i IsNotNullAdvancedFilterArgs) ToIsNotNullAdvancedFilterOutput() IsNotNullAdvancedFilterOutput {
	return i.ToIsNotNullAdvancedFilterOutputWithContext(context.Background())
}

func (i IsNotNullAdvancedFilterArgs) ToIsNotNullAdvancedFilterOutputWithContext(ctx context.Context) IsNotNullAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsNotNullAdvancedFilterOutput)
}

// IsNotNull Advanced Filter.
type IsNotNullAdvancedFilterOutput struct{ *pulumi.OutputState }

func (IsNotNullAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNotNullAdvancedFilter)(nil)).Elem()
}

func (o IsNotNullAdvancedFilterOutput) ToIsNotNullAdvancedFilterOutput() IsNotNullAdvancedFilterOutput {
	return o
}

func (o IsNotNullAdvancedFilterOutput) ToIsNotNullAdvancedFilterOutputWithContext(ctx context.Context) IsNotNullAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNotNullAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNotNullAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNotNull'.
func (o IsNotNullAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNotNullAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// IsNotNull Advanced Filter.
type IsNotNullAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNotNull Advanced Filter.
type IsNotNullAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (IsNotNullAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNotNullAdvancedFilterResponse)(nil)).Elem()
}

func (o IsNotNullAdvancedFilterResponseOutput) ToIsNotNullAdvancedFilterResponseOutput() IsNotNullAdvancedFilterResponseOutput {
	return o
}

func (o IsNotNullAdvancedFilterResponseOutput) ToIsNotNullAdvancedFilterResponseOutputWithContext(ctx context.Context) IsNotNullAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNotNullAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNotNullAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNotNull'.
func (o IsNotNullAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNotNullAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// IsNotNull Filter.
type IsNotNullFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNotNullFilterInput is an input type that accepts IsNotNullFilterArgs and IsNotNullFilterOutput values.
// You can construct a concrete instance of `IsNotNullFilterInput` via:
//
//	IsNotNullFilterArgs{...}
type IsNotNullFilterInput interface {
	pulumi.Input

	ToIsNotNullFilterOutput() IsNotNullFilterOutput
	ToIsNotNullFilterOutputWithContext(context.Context) IsNotNullFilterOutput
}

// IsNotNull Filter.
type IsNotNullFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (IsNotNullFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNotNullFilter)(nil)).Elem()
}

func (i IsNotNullFilterArgs) ToIsNotNullFilterOutput() IsNotNullFilterOutput {
	return i.ToIsNotNullFilterOutputWithContext(context.Background())
}

func (i IsNotNullFilterArgs) ToIsNotNullFilterOutputWithContext(ctx context.Context) IsNotNullFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsNotNullFilterOutput)
}

// IsNotNull Filter.
type IsNotNullFilterOutput struct{ *pulumi.OutputState }

func (IsNotNullFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNotNullFilter)(nil)).Elem()
}

func (o IsNotNullFilterOutput) ToIsNotNullFilterOutput() IsNotNullFilterOutput {
	return o
}

func (o IsNotNullFilterOutput) ToIsNotNullFilterOutputWithContext(ctx context.Context) IsNotNullFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNotNullFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNotNullFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNotNull'.
func (o IsNotNullFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNotNullFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// IsNotNull Filter.
type IsNotNullFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNotNull Filter.
type IsNotNullFilterResponseOutput struct{ *pulumi.OutputState }

func (IsNotNullFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNotNullFilterResponse)(nil)).Elem()
}

func (o IsNotNullFilterResponseOutput) ToIsNotNullFilterResponseOutput() IsNotNullFilterResponseOutput {
	return o
}

func (o IsNotNullFilterResponseOutput) ToIsNotNullFilterResponseOutputWithContext(ctx context.Context) IsNotNullFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNotNullFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNotNullFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNotNull'.
func (o IsNotNullFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNotNullFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// IsNullOrUndefined Advanced Filter.
type IsNullOrUndefinedAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNullOrUndefinedAdvancedFilterInput is an input type that accepts IsNullOrUndefinedAdvancedFilterArgs and IsNullOrUndefinedAdvancedFilterOutput values.
// You can construct a concrete instance of `IsNullOrUndefinedAdvancedFilterInput` via:
//
//	IsNullOrUndefinedAdvancedFilterArgs{...}
type IsNullOrUndefinedAdvancedFilterInput interface {
	pulumi.Input

	ToIsNullOrUndefinedAdvancedFilterOutput() IsNullOrUndefinedAdvancedFilterOutput
	ToIsNullOrUndefinedAdvancedFilterOutputWithContext(context.Context) IsNullOrUndefinedAdvancedFilterOutput
}

// IsNullOrUndefined Advanced Filter.
type IsNullOrUndefinedAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (IsNullOrUndefinedAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNullOrUndefinedAdvancedFilter)(nil)).Elem()
}

func (i IsNullOrUndefinedAdvancedFilterArgs) ToIsNullOrUndefinedAdvancedFilterOutput() IsNullOrUndefinedAdvancedFilterOutput {
	return i.ToIsNullOrUndefinedAdvancedFilterOutputWithContext(context.Background())
}

func (i IsNullOrUndefinedAdvancedFilterArgs) ToIsNullOrUndefinedAdvancedFilterOutputWithContext(ctx context.Context) IsNullOrUndefinedAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsNullOrUndefinedAdvancedFilterOutput)
}

// IsNullOrUndefined Advanced Filter.
type IsNullOrUndefinedAdvancedFilterOutput struct{ *pulumi.OutputState }

func (IsNullOrUndefinedAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNullOrUndefinedAdvancedFilter)(nil)).Elem()
}

func (o IsNullOrUndefinedAdvancedFilterOutput) ToIsNullOrUndefinedAdvancedFilterOutput() IsNullOrUndefinedAdvancedFilterOutput {
	return o
}

func (o IsNullOrUndefinedAdvancedFilterOutput) ToIsNullOrUndefinedAdvancedFilterOutputWithContext(ctx context.Context) IsNullOrUndefinedAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNullOrUndefinedAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNullOrUndefinedAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNullOrUndefined'.
func (o IsNullOrUndefinedAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNullOrUndefinedAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// IsNullOrUndefined Advanced Filter.
type IsNullOrUndefinedAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNullOrUndefined Advanced Filter.
type IsNullOrUndefinedAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (IsNullOrUndefinedAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNullOrUndefinedAdvancedFilterResponse)(nil)).Elem()
}

func (o IsNullOrUndefinedAdvancedFilterResponseOutput) ToIsNullOrUndefinedAdvancedFilterResponseOutput() IsNullOrUndefinedAdvancedFilterResponseOutput {
	return o
}

func (o IsNullOrUndefinedAdvancedFilterResponseOutput) ToIsNullOrUndefinedAdvancedFilterResponseOutputWithContext(ctx context.Context) IsNullOrUndefinedAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNullOrUndefinedAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNullOrUndefinedAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNullOrUndefined'.
func (o IsNullOrUndefinedAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNullOrUndefinedAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// IsNullOrUndefined Filter.
type IsNullOrUndefinedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNullOrUndefinedFilterInput is an input type that accepts IsNullOrUndefinedFilterArgs and IsNullOrUndefinedFilterOutput values.
// You can construct a concrete instance of `IsNullOrUndefinedFilterInput` via:
//
//	IsNullOrUndefinedFilterArgs{...}
type IsNullOrUndefinedFilterInput interface {
	pulumi.Input

	ToIsNullOrUndefinedFilterOutput() IsNullOrUndefinedFilterOutput
	ToIsNullOrUndefinedFilterOutputWithContext(context.Context) IsNullOrUndefinedFilterOutput
}

// IsNullOrUndefined Filter.
type IsNullOrUndefinedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (IsNullOrUndefinedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNullOrUndefinedFilter)(nil)).Elem()
}

func (i IsNullOrUndefinedFilterArgs) ToIsNullOrUndefinedFilterOutput() IsNullOrUndefinedFilterOutput {
	return i.ToIsNullOrUndefinedFilterOutputWithContext(context.Background())
}

func (i IsNullOrUndefinedFilterArgs) ToIsNullOrUndefinedFilterOutputWithContext(ctx context.Context) IsNullOrUndefinedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsNullOrUndefinedFilterOutput)
}

// IsNullOrUndefined Filter.
type IsNullOrUndefinedFilterOutput struct{ *pulumi.OutputState }

func (IsNullOrUndefinedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNullOrUndefinedFilter)(nil)).Elem()
}

func (o IsNullOrUndefinedFilterOutput) ToIsNullOrUndefinedFilterOutput() IsNullOrUndefinedFilterOutput {
	return o
}

func (o IsNullOrUndefinedFilterOutput) ToIsNullOrUndefinedFilterOutputWithContext(ctx context.Context) IsNullOrUndefinedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNullOrUndefinedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNullOrUndefinedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNullOrUndefined'.
func (o IsNullOrUndefinedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNullOrUndefinedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// IsNullOrUndefined Filter.
type IsNullOrUndefinedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNullOrUndefined Filter.
type IsNullOrUndefinedFilterResponseOutput struct{ *pulumi.OutputState }

func (IsNullOrUndefinedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IsNullOrUndefinedFilterResponse)(nil)).Elem()
}

func (o IsNullOrUndefinedFilterResponseOutput) ToIsNullOrUndefinedFilterResponseOutput() IsNullOrUndefinedFilterResponseOutput {
	return o
}

func (o IsNullOrUndefinedFilterResponseOutput) ToIsNullOrUndefinedFilterResponseOutputWithContext(ctx context.Context) IsNullOrUndefinedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o IsNullOrUndefinedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IsNullOrUndefinedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'IsNullOrUndefined'.
func (o IsNullOrUndefinedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v IsNullOrUndefinedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonField struct {
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// JsonFieldInput is an input type that accepts JsonFieldArgs and JsonFieldOutput values.
// You can construct a concrete instance of `JsonFieldInput` via:
//
//	JsonFieldArgs{...}
type JsonFieldInput interface {
	pulumi.Input

	ToJsonFieldOutput() JsonFieldOutput
	ToJsonFieldOutputWithContext(context.Context) JsonFieldOutput
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonFieldArgs struct {
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField pulumi.StringPtrInput `pulumi:"sourceField"`
}

func (JsonFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonField)(nil)).Elem()
}

func (i JsonFieldArgs) ToJsonFieldOutput() JsonFieldOutput {
	return i.ToJsonFieldOutputWithContext(context.Background())
}

func (i JsonFieldArgs) ToJsonFieldOutputWithContext(ctx context.Context) JsonFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldOutput)
}

func (i JsonFieldArgs) ToJsonFieldPtrOutput() JsonFieldPtrOutput {
	return i.ToJsonFieldPtrOutputWithContext(context.Background())
}

func (i JsonFieldArgs) ToJsonFieldPtrOutputWithContext(ctx context.Context) JsonFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldOutput).ToJsonFieldPtrOutputWithContext(ctx)
}

// JsonFieldPtrInput is an input type that accepts JsonFieldArgs, JsonFieldPtr and JsonFieldPtrOutput values.
// You can construct a concrete instance of `JsonFieldPtrInput` via:
//
//	        JsonFieldArgs{...}
//
//	or:
//
//	        nil
type JsonFieldPtrInput interface {
	pulumi.Input

	ToJsonFieldPtrOutput() JsonFieldPtrOutput
	ToJsonFieldPtrOutputWithContext(context.Context) JsonFieldPtrOutput
}

type jsonFieldPtrType JsonFieldArgs

func JsonFieldPtr(v *JsonFieldArgs) JsonFieldPtrInput {
	return (*jsonFieldPtrType)(v)
}

func (*jsonFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonField)(nil)).Elem()
}

func (i *jsonFieldPtrType) ToJsonFieldPtrOutput() JsonFieldPtrOutput {
	return i.ToJsonFieldPtrOutputWithContext(context.Background())
}

func (i *jsonFieldPtrType) ToJsonFieldPtrOutputWithContext(ctx context.Context) JsonFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonFieldOutput struct{ *pulumi.OutputState }

func (JsonFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonField)(nil)).Elem()
}

func (o JsonFieldOutput) ToJsonFieldOutput() JsonFieldOutput {
	return o
}

func (o JsonFieldOutput) ToJsonFieldOutputWithContext(ctx context.Context) JsonFieldOutput {
	return o
}

func (o JsonFieldOutput) ToJsonFieldPtrOutput() JsonFieldPtrOutput {
	return o.ToJsonFieldPtrOutputWithContext(context.Background())
}

func (o JsonFieldOutput) ToJsonFieldPtrOutputWithContext(ctx context.Context) JsonFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonField) *JsonField {
		return &v
	}).(JsonFieldPtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonField) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

type JsonFieldPtrOutput struct{ *pulumi.OutputState }

func (JsonFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonField)(nil)).Elem()
}

func (o JsonFieldPtrOutput) ToJsonFieldPtrOutput() JsonFieldPtrOutput {
	return o
}

func (o JsonFieldPtrOutput) ToJsonFieldPtrOutputWithContext(ctx context.Context) JsonFieldPtrOutput {
	return o
}

func (o JsonFieldPtrOutput) Elem() JsonFieldOutput {
	return o.ApplyT(func(v *JsonField) JsonField {
		if v != nil {
			return *v
		}
		var ret JsonField
		return ret
	}).(JsonFieldOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldPtrOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonField) *string {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(pulumi.StringPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonFieldResponse struct {
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonFieldResponseOutput struct{ *pulumi.OutputState }

func (JsonFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFieldResponse)(nil)).Elem()
}

func (o JsonFieldResponseOutput) ToJsonFieldResponseOutput() JsonFieldResponseOutput {
	return o
}

func (o JsonFieldResponseOutput) ToJsonFieldResponseOutputWithContext(ctx context.Context) JsonFieldResponseOutput {
	return o
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldResponseOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldResponse) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

type JsonFieldResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonFieldResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFieldResponse)(nil)).Elem()
}

func (o JsonFieldResponsePtrOutput) ToJsonFieldResponsePtrOutput() JsonFieldResponsePtrOutput {
	return o
}

func (o JsonFieldResponsePtrOutput) ToJsonFieldResponsePtrOutputWithContext(ctx context.Context) JsonFieldResponsePtrOutput {
	return o
}

func (o JsonFieldResponsePtrOutput) Elem() JsonFieldResponseOutput {
	return o.ApplyT(func(v *JsonFieldResponse) JsonFieldResponse {
		if v != nil {
			return *v
		}
		var ret JsonFieldResponse
		return ret
	}).(JsonFieldResponseOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldResponsePtrOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(pulumi.StringPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefault struct {
	// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
	DefaultValue *string `pulumi:"defaultValue"`
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// JsonFieldWithDefaultInput is an input type that accepts JsonFieldWithDefaultArgs and JsonFieldWithDefaultOutput values.
// You can construct a concrete instance of `JsonFieldWithDefaultInput` via:
//
//	JsonFieldWithDefaultArgs{...}
type JsonFieldWithDefaultInput interface {
	pulumi.Input

	ToJsonFieldWithDefaultOutput() JsonFieldWithDefaultOutput
	ToJsonFieldWithDefaultOutputWithContext(context.Context) JsonFieldWithDefaultOutput
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefaultArgs struct {
	// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField pulumi.StringPtrInput `pulumi:"sourceField"`
}

func (JsonFieldWithDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFieldWithDefault)(nil)).Elem()
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultOutput() JsonFieldWithDefaultOutput {
	return i.ToJsonFieldWithDefaultOutputWithContext(context.Background())
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultOutputWithContext(ctx context.Context) JsonFieldWithDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldWithDefaultOutput)
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput {
	return i.ToJsonFieldWithDefaultPtrOutputWithContext(context.Background())
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultPtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldWithDefaultOutput).ToJsonFieldWithDefaultPtrOutputWithContext(ctx)
}

// JsonFieldWithDefaultPtrInput is an input type that accepts JsonFieldWithDefaultArgs, JsonFieldWithDefaultPtr and JsonFieldWithDefaultPtrOutput values.
// You can construct a concrete instance of `JsonFieldWithDefaultPtrInput` via:
//
//	        JsonFieldWithDefaultArgs{...}
//
//	or:
//
//	        nil
type JsonFieldWithDefaultPtrInput interface {
	pulumi.Input

	ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput
	ToJsonFieldWithDefaultPtrOutputWithContext(context.Context) JsonFieldWithDefaultPtrOutput
}

type jsonFieldWithDefaultPtrType JsonFieldWithDefaultArgs

func JsonFieldWithDefaultPtr(v *JsonFieldWithDefaultArgs) JsonFieldWithDefaultPtrInput {
	return (*jsonFieldWithDefaultPtrType)(v)
}

func (*jsonFieldWithDefaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFieldWithDefault)(nil)).Elem()
}

func (i *jsonFieldWithDefaultPtrType) ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput {
	return i.ToJsonFieldWithDefaultPtrOutputWithContext(context.Background())
}

func (i *jsonFieldWithDefaultPtrType) ToJsonFieldWithDefaultPtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldWithDefaultPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefaultOutput struct{ *pulumi.OutputState }

func (JsonFieldWithDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFieldWithDefault)(nil)).Elem()
}

func (o JsonFieldWithDefaultOutput) ToJsonFieldWithDefaultOutput() JsonFieldWithDefaultOutput {
	return o
}

func (o JsonFieldWithDefaultOutput) ToJsonFieldWithDefaultOutputWithContext(ctx context.Context) JsonFieldWithDefaultOutput {
	return o
}

func (o JsonFieldWithDefaultOutput) ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput {
	return o.ToJsonFieldWithDefaultPtrOutputWithContext(context.Background())
}

func (o JsonFieldWithDefaultOutput) ToJsonFieldWithDefaultPtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonFieldWithDefault) *JsonFieldWithDefault {
		return &v
	}).(JsonFieldWithDefaultPtrOutput)
}

// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
func (o JsonFieldWithDefaultOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldWithDefault) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldWithDefaultOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldWithDefault) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

type JsonFieldWithDefaultPtrOutput struct{ *pulumi.OutputState }

func (JsonFieldWithDefaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFieldWithDefault)(nil)).Elem()
}

func (o JsonFieldWithDefaultPtrOutput) ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput {
	return o
}

func (o JsonFieldWithDefaultPtrOutput) ToJsonFieldWithDefaultPtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultPtrOutput {
	return o
}

func (o JsonFieldWithDefaultPtrOutput) Elem() JsonFieldWithDefaultOutput {
	return o.ApplyT(func(v *JsonFieldWithDefault) JsonFieldWithDefault {
		if v != nil {
			return *v
		}
		var ret JsonFieldWithDefault
		return ret
	}).(JsonFieldWithDefaultOutput)
}

// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
func (o JsonFieldWithDefaultPtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldWithDefault) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldWithDefaultPtrOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldWithDefault) *string {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(pulumi.StringPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefaultResponse struct {
	// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
	DefaultValue *string `pulumi:"defaultValue"`
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefaultResponseOutput struct{ *pulumi.OutputState }

func (JsonFieldWithDefaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFieldWithDefaultResponse)(nil)).Elem()
}

func (o JsonFieldWithDefaultResponseOutput) ToJsonFieldWithDefaultResponseOutput() JsonFieldWithDefaultResponseOutput {
	return o
}

func (o JsonFieldWithDefaultResponseOutput) ToJsonFieldWithDefaultResponseOutputWithContext(ctx context.Context) JsonFieldWithDefaultResponseOutput {
	return o
}

// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
func (o JsonFieldWithDefaultResponseOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldWithDefaultResponse) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldWithDefaultResponseOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldWithDefaultResponse) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

type JsonFieldWithDefaultResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonFieldWithDefaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFieldWithDefaultResponse)(nil)).Elem()
}

func (o JsonFieldWithDefaultResponsePtrOutput) ToJsonFieldWithDefaultResponsePtrOutput() JsonFieldWithDefaultResponsePtrOutput {
	return o
}

func (o JsonFieldWithDefaultResponsePtrOutput) ToJsonFieldWithDefaultResponsePtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultResponsePtrOutput {
	return o
}

func (o JsonFieldWithDefaultResponsePtrOutput) Elem() JsonFieldWithDefaultResponseOutput {
	return o.ApplyT(func(v *JsonFieldWithDefaultResponse) JsonFieldWithDefaultResponse {
		if v != nil {
			return *v
		}
		var ret JsonFieldWithDefaultResponse
		return ret
	}).(JsonFieldWithDefaultResponseOutput)
}

// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
func (o JsonFieldWithDefaultResponsePtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldWithDefaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldWithDefaultResponsePtrOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldWithDefaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(pulumi.StringPtrOutput)
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMapping struct {
	// The mapping information for the DataVersion property of the Event Grid Event.
	DataVersion *JsonFieldWithDefault `pulumi:"dataVersion"`
	// The mapping information for the EventTime property of the Event Grid Event.
	EventTime *JsonField `pulumi:"eventTime"`
	// The mapping information for the EventType property of the Event Grid Event.
	EventType *JsonFieldWithDefault `pulumi:"eventType"`
	// The mapping information for the Id property of the Event Grid Event.
	Id *JsonField `pulumi:"id"`
	// Type of the custom mapping
	// Expected value is 'Json'.
	InputSchemaMappingType string `pulumi:"inputSchemaMappingType"`
	// The mapping information for the Subject property of the Event Grid Event.
	Subject *JsonFieldWithDefault `pulumi:"subject"`
	// The mapping information for the Topic property of the Event Grid Event.
	Topic *JsonField `pulumi:"topic"`
}

// JsonInputSchemaMappingInput is an input type that accepts JsonInputSchemaMappingArgs and JsonInputSchemaMappingOutput values.
// You can construct a concrete instance of `JsonInputSchemaMappingInput` via:
//
//	JsonInputSchemaMappingArgs{...}
type JsonInputSchemaMappingInput interface {
	pulumi.Input

	ToJsonInputSchemaMappingOutput() JsonInputSchemaMappingOutput
	ToJsonInputSchemaMappingOutputWithContext(context.Context) JsonInputSchemaMappingOutput
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMappingArgs struct {
	// The mapping information for the DataVersion property of the Event Grid Event.
	DataVersion JsonFieldWithDefaultPtrInput `pulumi:"dataVersion"`
	// The mapping information for the EventTime property of the Event Grid Event.
	EventTime JsonFieldPtrInput `pulumi:"eventTime"`
	// The mapping information for the EventType property of the Event Grid Event.
	EventType JsonFieldWithDefaultPtrInput `pulumi:"eventType"`
	// The mapping information for the Id property of the Event Grid Event.
	Id JsonFieldPtrInput `pulumi:"id"`
	// Type of the custom mapping
	// Expected value is 'Json'.
	InputSchemaMappingType pulumi.StringInput `pulumi:"inputSchemaMappingType"`
	// The mapping information for the Subject property of the Event Grid Event.
	Subject JsonFieldWithDefaultPtrInput `pulumi:"subject"`
	// The mapping information for the Topic property of the Event Grid Event.
	Topic JsonFieldPtrInput `pulumi:"topic"`
}

func (JsonInputSchemaMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonInputSchemaMapping)(nil)).Elem()
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingOutput() JsonInputSchemaMappingOutput {
	return i.ToJsonInputSchemaMappingOutputWithContext(context.Background())
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingOutputWithContext(ctx context.Context) JsonInputSchemaMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonInputSchemaMappingOutput)
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput {
	return i.ToJsonInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingPtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonInputSchemaMappingOutput).ToJsonInputSchemaMappingPtrOutputWithContext(ctx)
}

// JsonInputSchemaMappingPtrInput is an input type that accepts JsonInputSchemaMappingArgs, JsonInputSchemaMappingPtr and JsonInputSchemaMappingPtrOutput values.
// You can construct a concrete instance of `JsonInputSchemaMappingPtrInput` via:
//
//	        JsonInputSchemaMappingArgs{...}
//
//	or:
//
//	        nil
type JsonInputSchemaMappingPtrInput interface {
	pulumi.Input

	ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput
	ToJsonInputSchemaMappingPtrOutputWithContext(context.Context) JsonInputSchemaMappingPtrOutput
}

type jsonInputSchemaMappingPtrType JsonInputSchemaMappingArgs

func JsonInputSchemaMappingPtr(v *JsonInputSchemaMappingArgs) JsonInputSchemaMappingPtrInput {
	return (*jsonInputSchemaMappingPtrType)(v)
}

func (*jsonInputSchemaMappingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonInputSchemaMapping)(nil)).Elem()
}

func (i *jsonInputSchemaMappingPtrType) ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput {
	return i.ToJsonInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (i *jsonInputSchemaMappingPtrType) ToJsonInputSchemaMappingPtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonInputSchemaMappingPtrOutput)
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMappingOutput struct{ *pulumi.OutputState }

func (JsonInputSchemaMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonInputSchemaMapping)(nil)).Elem()
}

func (o JsonInputSchemaMappingOutput) ToJsonInputSchemaMappingOutput() JsonInputSchemaMappingOutput {
	return o
}

func (o JsonInputSchemaMappingOutput) ToJsonInputSchemaMappingOutputWithContext(ctx context.Context) JsonInputSchemaMappingOutput {
	return o
}

func (o JsonInputSchemaMappingOutput) ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput {
	return o.ToJsonInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (o JsonInputSchemaMappingOutput) ToJsonInputSchemaMappingPtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonInputSchemaMapping) *JsonInputSchemaMapping {
		return &v
	}).(JsonInputSchemaMappingPtrOutput)
}

// The mapping information for the DataVersion property of the Event Grid Event.
func (o JsonInputSchemaMappingOutput) DataVersion() JsonFieldWithDefaultPtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMapping) *JsonFieldWithDefault { return v.DataVersion }).(JsonFieldWithDefaultPtrOutput)
}

// The mapping information for the EventTime property of the Event Grid Event.
func (o JsonInputSchemaMappingOutput) EventTime() JsonFieldPtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMapping) *JsonField { return v.EventTime }).(JsonFieldPtrOutput)
}

// The mapping information for the EventType property of the Event Grid Event.
func (o JsonInputSchemaMappingOutput) EventType() JsonFieldWithDefaultPtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMapping) *JsonFieldWithDefault { return v.EventType }).(JsonFieldWithDefaultPtrOutput)
}

// The mapping information for the Id property of the Event Grid Event.
func (o JsonInputSchemaMappingOutput) Id() JsonFieldPtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMapping) *JsonField { return v.Id }).(JsonFieldPtrOutput)
}

// Type of the custom mapping
// Expected value is 'Json'.
func (o JsonInputSchemaMappingOutput) InputSchemaMappingType() pulumi.StringOutput {
	return o.ApplyT(func(v JsonInputSchemaMapping) string { return v.InputSchemaMappingType }).(pulumi.StringOutput)
}

// The mapping information for the Subject property of the Event Grid Event.
func (o JsonInputSchemaMappingOutput) Subject() JsonFieldWithDefaultPtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMapping) *JsonFieldWithDefault { return v.Subject }).(JsonFieldWithDefaultPtrOutput)
}

// The mapping information for the Topic property of the Event Grid Event.
func (o JsonInputSchemaMappingOutput) Topic() JsonFieldPtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMapping) *JsonField { return v.Topic }).(JsonFieldPtrOutput)
}

type JsonInputSchemaMappingPtrOutput struct{ *pulumi.OutputState }

func (JsonInputSchemaMappingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonInputSchemaMapping)(nil)).Elem()
}

func (o JsonInputSchemaMappingPtrOutput) ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput {
	return o
}

func (o JsonInputSchemaMappingPtrOutput) ToJsonInputSchemaMappingPtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingPtrOutput {
	return o
}

func (o JsonInputSchemaMappingPtrOutput) Elem() JsonInputSchemaMappingOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) JsonInputSchemaMapping {
		if v != nil {
			return *v
		}
		var ret JsonInputSchemaMapping
		return ret
	}).(JsonInputSchemaMappingOutput)
}

// The mapping information for the DataVersion property of the Event Grid Event.
func (o JsonInputSchemaMappingPtrOutput) DataVersion() JsonFieldWithDefaultPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) *JsonFieldWithDefault {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(JsonFieldWithDefaultPtrOutput)
}

// The mapping information for the EventTime property of the Event Grid Event.
func (o JsonInputSchemaMappingPtrOutput) EventTime() JsonFieldPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) *JsonField {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(JsonFieldPtrOutput)
}

// The mapping information for the EventType property of the Event Grid Event.
func (o JsonInputSchemaMappingPtrOutput) EventType() JsonFieldWithDefaultPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) *JsonFieldWithDefault {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(JsonFieldWithDefaultPtrOutput)
}

// The mapping information for the Id property of the Event Grid Event.
func (o JsonInputSchemaMappingPtrOutput) Id() JsonFieldPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) *JsonField {
		if v == nil {
			return nil
		}
		return v.Id
	}).(JsonFieldPtrOutput)
}

// Type of the custom mapping
// Expected value is 'Json'.
func (o JsonInputSchemaMappingPtrOutput) InputSchemaMappingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) *string {
		if v == nil {
			return nil
		}
		return &v.InputSchemaMappingType
	}).(pulumi.StringPtrOutput)
}

// The mapping information for the Subject property of the Event Grid Event.
func (o JsonInputSchemaMappingPtrOutput) Subject() JsonFieldWithDefaultPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) *JsonFieldWithDefault {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(JsonFieldWithDefaultPtrOutput)
}

// The mapping information for the Topic property of the Event Grid Event.
func (o JsonInputSchemaMappingPtrOutput) Topic() JsonFieldPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMapping) *JsonField {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(JsonFieldPtrOutput)
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMappingResponse struct {
	// The mapping information for the DataVersion property of the Event Grid Event.
	DataVersion *JsonFieldWithDefaultResponse `pulumi:"dataVersion"`
	// The mapping information for the EventTime property of the Event Grid Event.
	EventTime *JsonFieldResponse `pulumi:"eventTime"`
	// The mapping information for the EventType property of the Event Grid Event.
	EventType *JsonFieldWithDefaultResponse `pulumi:"eventType"`
	// The mapping information for the Id property of the Event Grid Event.
	Id *JsonFieldResponse `pulumi:"id"`
	// Type of the custom mapping
	// Expected value is 'Json'.
	InputSchemaMappingType string `pulumi:"inputSchemaMappingType"`
	// The mapping information for the Subject property of the Event Grid Event.
	Subject *JsonFieldWithDefaultResponse `pulumi:"subject"`
	// The mapping information for the Topic property of the Event Grid Event.
	Topic *JsonFieldResponse `pulumi:"topic"`
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMappingResponseOutput struct{ *pulumi.OutputState }

func (JsonInputSchemaMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonInputSchemaMappingResponse)(nil)).Elem()
}

func (o JsonInputSchemaMappingResponseOutput) ToJsonInputSchemaMappingResponseOutput() JsonInputSchemaMappingResponseOutput {
	return o
}

func (o JsonInputSchemaMappingResponseOutput) ToJsonInputSchemaMappingResponseOutputWithContext(ctx context.Context) JsonInputSchemaMappingResponseOutput {
	return o
}

// The mapping information for the DataVersion property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) DataVersion() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse { return v.DataVersion }).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the EventTime property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) EventTime() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldResponse { return v.EventTime }).(JsonFieldResponsePtrOutput)
}

// The mapping information for the EventType property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) EventType() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse { return v.EventType }).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Id property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) Id() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldResponse { return v.Id }).(JsonFieldResponsePtrOutput)
}

// Type of the custom mapping
// Expected value is 'Json'.
func (o JsonInputSchemaMappingResponseOutput) InputSchemaMappingType() pulumi.StringOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) string { return v.InputSchemaMappingType }).(pulumi.StringOutput)
}

// The mapping information for the Subject property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) Subject() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse { return v.Subject }).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Topic property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) Topic() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldResponse { return v.Topic }).(JsonFieldResponsePtrOutput)
}

type JsonInputSchemaMappingResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonInputSchemaMappingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonInputSchemaMappingResponse)(nil)).Elem()
}

func (o JsonInputSchemaMappingResponsePtrOutput) ToJsonInputSchemaMappingResponsePtrOutput() JsonInputSchemaMappingResponsePtrOutput {
	return o
}

func (o JsonInputSchemaMappingResponsePtrOutput) ToJsonInputSchemaMappingResponsePtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingResponsePtrOutput {
	return o
}

func (o JsonInputSchemaMappingResponsePtrOutput) Elem() JsonInputSchemaMappingResponseOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) JsonInputSchemaMappingResponse {
		if v != nil {
			return *v
		}
		var ret JsonInputSchemaMappingResponse
		return ret
	}).(JsonInputSchemaMappingResponseOutput)
}

// The mapping information for the DataVersion property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) DataVersion() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the EventTime property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) EventTime() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldResponse {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(JsonFieldResponsePtrOutput)
}

// The mapping information for the EventType property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) EventType() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Id property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) Id() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldResponse {
		if v == nil {
			return nil
		}
		return v.Id
	}).(JsonFieldResponsePtrOutput)
}

// Type of the custom mapping
// Expected value is 'Json'.
func (o JsonInputSchemaMappingResponsePtrOutput) InputSchemaMappingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InputSchemaMappingType
	}).(pulumi.StringPtrOutput)
}

// The mapping information for the Subject property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) Subject() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Topic property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) Topic() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldResponse {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(JsonFieldResponsePtrOutput)
}

// Information about the Monitor Alert destination for an event subscription.
type MonitorAlertEventSubscriptionDestination struct {
	// The list of ARM Ids of Action Groups that will be triggered on every Alert fired through this event subscription.
	// Each resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Insights/actionGroups/{ActionGroupName}.
	ActionGroups []string `pulumi:"actionGroups"`
	// The description that will be attached to every Alert fired through this event subscription.
	Description *string `pulumi:"description"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'MonitorAlert'.
	EndpointType string `pulumi:"endpointType"`
	// The severity that will be attached to every Alert fired through this event subscription.
	// This field must be provided.
	Severity *string `pulumi:"severity"`
}

// MonitorAlertEventSubscriptionDestinationInput is an input type that accepts MonitorAlertEventSubscriptionDestinationArgs and MonitorAlertEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `MonitorAlertEventSubscriptionDestinationInput` via:
//
//	MonitorAlertEventSubscriptionDestinationArgs{...}
type MonitorAlertEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToMonitorAlertEventSubscriptionDestinationOutput() MonitorAlertEventSubscriptionDestinationOutput
	ToMonitorAlertEventSubscriptionDestinationOutputWithContext(context.Context) MonitorAlertEventSubscriptionDestinationOutput
}

// Information about the Monitor Alert destination for an event subscription.
type MonitorAlertEventSubscriptionDestinationArgs struct {
	// The list of ARM Ids of Action Groups that will be triggered on every Alert fired through this event subscription.
	// Each resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Insights/actionGroups/{ActionGroupName}.
	ActionGroups pulumi.StringArrayInput `pulumi:"actionGroups"`
	// The description that will be attached to every Alert fired through this event subscription.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'MonitorAlert'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The severity that will be attached to every Alert fired through this event subscription.
	// This field must be provided.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (MonitorAlertEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorAlertEventSubscriptionDestination)(nil)).Elem()
}

func (i MonitorAlertEventSubscriptionDestinationArgs) ToMonitorAlertEventSubscriptionDestinationOutput() MonitorAlertEventSubscriptionDestinationOutput {
	return i.ToMonitorAlertEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i MonitorAlertEventSubscriptionDestinationArgs) ToMonitorAlertEventSubscriptionDestinationOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorAlertEventSubscriptionDestinationOutput)
}

func (i MonitorAlertEventSubscriptionDestinationArgs) ToMonitorAlertEventSubscriptionDestinationPtrOutput() MonitorAlertEventSubscriptionDestinationPtrOutput {
	return i.ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i MonitorAlertEventSubscriptionDestinationArgs) ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorAlertEventSubscriptionDestinationOutput).ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// MonitorAlertEventSubscriptionDestinationPtrInput is an input type that accepts MonitorAlertEventSubscriptionDestinationArgs, MonitorAlertEventSubscriptionDestinationPtr and MonitorAlertEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `MonitorAlertEventSubscriptionDestinationPtrInput` via:
//
//	        MonitorAlertEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type MonitorAlertEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToMonitorAlertEventSubscriptionDestinationPtrOutput() MonitorAlertEventSubscriptionDestinationPtrOutput
	ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(context.Context) MonitorAlertEventSubscriptionDestinationPtrOutput
}

type monitorAlertEventSubscriptionDestinationPtrType MonitorAlertEventSubscriptionDestinationArgs

func MonitorAlertEventSubscriptionDestinationPtr(v *MonitorAlertEventSubscriptionDestinationArgs) MonitorAlertEventSubscriptionDestinationPtrInput {
	return (*monitorAlertEventSubscriptionDestinationPtrType)(v)
}

func (*monitorAlertEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorAlertEventSubscriptionDestination)(nil)).Elem()
}

func (i *monitorAlertEventSubscriptionDestinationPtrType) ToMonitorAlertEventSubscriptionDestinationPtrOutput() MonitorAlertEventSubscriptionDestinationPtrOutput {
	return i.ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *monitorAlertEventSubscriptionDestinationPtrType) ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorAlertEventSubscriptionDestinationPtrOutput)
}

// Information about the Monitor Alert destination for an event subscription.
type MonitorAlertEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (MonitorAlertEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorAlertEventSubscriptionDestination)(nil)).Elem()
}

func (o MonitorAlertEventSubscriptionDestinationOutput) ToMonitorAlertEventSubscriptionDestinationOutput() MonitorAlertEventSubscriptionDestinationOutput {
	return o
}

func (o MonitorAlertEventSubscriptionDestinationOutput) ToMonitorAlertEventSubscriptionDestinationOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationOutput {
	return o
}

func (o MonitorAlertEventSubscriptionDestinationOutput) ToMonitorAlertEventSubscriptionDestinationPtrOutput() MonitorAlertEventSubscriptionDestinationPtrOutput {
	return o.ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o MonitorAlertEventSubscriptionDestinationOutput) ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorAlertEventSubscriptionDestination) *MonitorAlertEventSubscriptionDestination {
		return &v
	}).(MonitorAlertEventSubscriptionDestinationPtrOutput)
}

// The list of ARM Ids of Action Groups that will be triggered on every Alert fired through this event subscription.
// Each resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Insights/actionGroups/{ActionGroupName}.
func (o MonitorAlertEventSubscriptionDestinationOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestination) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// The description that will be attached to every Alert fired through this event subscription.
func (o MonitorAlertEventSubscriptionDestinationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestination) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'MonitorAlert'.
func (o MonitorAlertEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The severity that will be attached to every Alert fired through this event subscription.
// This field must be provided.
func (o MonitorAlertEventSubscriptionDestinationOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestination) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type MonitorAlertEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (MonitorAlertEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorAlertEventSubscriptionDestination)(nil)).Elem()
}

func (o MonitorAlertEventSubscriptionDestinationPtrOutput) ToMonitorAlertEventSubscriptionDestinationPtrOutput() MonitorAlertEventSubscriptionDestinationPtrOutput {
	return o
}

func (o MonitorAlertEventSubscriptionDestinationPtrOutput) ToMonitorAlertEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationPtrOutput {
	return o
}

func (o MonitorAlertEventSubscriptionDestinationPtrOutput) Elem() MonitorAlertEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestination) MonitorAlertEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret MonitorAlertEventSubscriptionDestination
		return ret
	}).(MonitorAlertEventSubscriptionDestinationOutput)
}

// The list of ARM Ids of Action Groups that will be triggered on every Alert fired through this event subscription.
// Each resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Insights/actionGroups/{ActionGroupName}.
func (o MonitorAlertEventSubscriptionDestinationPtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestination) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// The description that will be attached to every Alert fired through this event subscription.
func (o MonitorAlertEventSubscriptionDestinationPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'MonitorAlert'.
func (o MonitorAlertEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The severity that will be attached to every Alert fired through this event subscription.
// This field must be provided.
func (o MonitorAlertEventSubscriptionDestinationPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// Information about the Monitor Alert destination for an event subscription.
type MonitorAlertEventSubscriptionDestinationResponse struct {
	// The list of ARM Ids of Action Groups that will be triggered on every Alert fired through this event subscription.
	// Each resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Insights/actionGroups/{ActionGroupName}.
	ActionGroups []string `pulumi:"actionGroups"`
	// The description that will be attached to every Alert fired through this event subscription.
	Description *string `pulumi:"description"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'MonitorAlert'.
	EndpointType string `pulumi:"endpointType"`
	// The severity that will be attached to every Alert fired through this event subscription.
	// This field must be provided.
	Severity *string `pulumi:"severity"`
}

// Information about the Monitor Alert destination for an event subscription.
type MonitorAlertEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (MonitorAlertEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorAlertEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o MonitorAlertEventSubscriptionDestinationResponseOutput) ToMonitorAlertEventSubscriptionDestinationResponseOutput() MonitorAlertEventSubscriptionDestinationResponseOutput {
	return o
}

func (o MonitorAlertEventSubscriptionDestinationResponseOutput) ToMonitorAlertEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationResponseOutput {
	return o
}

// The list of ARM Ids of Action Groups that will be triggered on every Alert fired through this event subscription.
// Each resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Insights/actionGroups/{ActionGroupName}.
func (o MonitorAlertEventSubscriptionDestinationResponseOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestinationResponse) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// The description that will be attached to every Alert fired through this event subscription.
func (o MonitorAlertEventSubscriptionDestinationResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestinationResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'MonitorAlert'.
func (o MonitorAlertEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The severity that will be attached to every Alert fired through this event subscription.
// This field must be provided.
func (o MonitorAlertEventSubscriptionDestinationResponseOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorAlertEventSubscriptionDestinationResponse) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type MonitorAlertEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitorAlertEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorAlertEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o MonitorAlertEventSubscriptionDestinationResponsePtrOutput) ToMonitorAlertEventSubscriptionDestinationResponsePtrOutput() MonitorAlertEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o MonitorAlertEventSubscriptionDestinationResponsePtrOutput) ToMonitorAlertEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) MonitorAlertEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o MonitorAlertEventSubscriptionDestinationResponsePtrOutput) Elem() MonitorAlertEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestinationResponse) MonitorAlertEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret MonitorAlertEventSubscriptionDestinationResponse
		return ret
	}).(MonitorAlertEventSubscriptionDestinationResponseOutput)
}

// The list of ARM Ids of Action Groups that will be triggered on every Alert fired through this event subscription.
// Each resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Insights/actionGroups/{ActionGroupName}.
func (o MonitorAlertEventSubscriptionDestinationResponsePtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestinationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// The description that will be attached to every Alert fired through this event subscription.
func (o MonitorAlertEventSubscriptionDestinationResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'MonitorAlert'.
func (o MonitorAlertEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The severity that will be attached to every Alert fired through this event subscription.
// This field must be provided.
func (o MonitorAlertEventSubscriptionDestinationResponsePtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorAlertEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// Represents available Sku pricing tiers.
type NamespaceSku struct {
	// Specifies the number of Throughput Units that defines the capacity for the namespace. The property default value is
	// 1 which signifies 1 Throughput Unit = 1MB/s ingress and 2MB/s egress per namespace. Min capacity is 1 and
	// max allowed capacity is 20.
	Capacity *int `pulumi:"capacity"`
	// The name of the SKU.
	Name *string `pulumi:"name"`
}

// NamespaceSkuInput is an input type that accepts NamespaceSkuArgs and NamespaceSkuOutput values.
// You can construct a concrete instance of `NamespaceSkuInput` via:
//
//	NamespaceSkuArgs{...}
type NamespaceSkuInput interface {
	pulumi.Input

	ToNamespaceSkuOutput() NamespaceSkuOutput
	ToNamespaceSkuOutputWithContext(context.Context) NamespaceSkuOutput
}

// Represents available Sku pricing tiers.
type NamespaceSkuArgs struct {
	// Specifies the number of Throughput Units that defines the capacity for the namespace. The property default value is
	// 1 which signifies 1 Throughput Unit = 1MB/s ingress and 2MB/s egress per namespace. Min capacity is 1 and
	// max allowed capacity is 20.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The name of the SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NamespaceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSku)(nil)).Elem()
}

func (i NamespaceSkuArgs) ToNamespaceSkuOutput() NamespaceSkuOutput {
	return i.ToNamespaceSkuOutputWithContext(context.Background())
}

func (i NamespaceSkuArgs) ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSkuOutput)
}

func (i NamespaceSkuArgs) ToNamespaceSkuPtrOutput() NamespaceSkuPtrOutput {
	return i.ToNamespaceSkuPtrOutputWithContext(context.Background())
}

func (i NamespaceSkuArgs) ToNamespaceSkuPtrOutputWithContext(ctx context.Context) NamespaceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSkuOutput).ToNamespaceSkuPtrOutputWithContext(ctx)
}

// NamespaceSkuPtrInput is an input type that accepts NamespaceSkuArgs, NamespaceSkuPtr and NamespaceSkuPtrOutput values.
// You can construct a concrete instance of `NamespaceSkuPtrInput` via:
//
//	        NamespaceSkuArgs{...}
//
//	or:
//
//	        nil
type NamespaceSkuPtrInput interface {
	pulumi.Input

	ToNamespaceSkuPtrOutput() NamespaceSkuPtrOutput
	ToNamespaceSkuPtrOutputWithContext(context.Context) NamespaceSkuPtrOutput
}

type namespaceSkuPtrType NamespaceSkuArgs

func NamespaceSkuPtr(v *NamespaceSkuArgs) NamespaceSkuPtrInput {
	return (*namespaceSkuPtrType)(v)
}

func (*namespaceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSku)(nil)).Elem()
}

func (i *namespaceSkuPtrType) ToNamespaceSkuPtrOutput() NamespaceSkuPtrOutput {
	return i.ToNamespaceSkuPtrOutputWithContext(context.Background())
}

func (i *namespaceSkuPtrType) ToNamespaceSkuPtrOutputWithContext(ctx context.Context) NamespaceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSkuPtrOutput)
}

// Represents available Sku pricing tiers.
type NamespaceSkuOutput struct{ *pulumi.OutputState }

func (NamespaceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSku)(nil)).Elem()
}

func (o NamespaceSkuOutput) ToNamespaceSkuOutput() NamespaceSkuOutput {
	return o
}

func (o NamespaceSkuOutput) ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput {
	return o
}

func (o NamespaceSkuOutput) ToNamespaceSkuPtrOutput() NamespaceSkuPtrOutput {
	return o.ToNamespaceSkuPtrOutputWithContext(context.Background())
}

func (o NamespaceSkuOutput) ToNamespaceSkuPtrOutputWithContext(ctx context.Context) NamespaceSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceSku) *NamespaceSku {
		return &v
	}).(NamespaceSkuPtrOutput)
}

// Specifies the number of Throughput Units that defines the capacity for the namespace. The property default value is
// 1 which signifies 1 Throughput Unit = 1MB/s ingress and 2MB/s egress per namespace. Min capacity is 1 and
// max allowed capacity is 20.
func (o NamespaceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamespaceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The name of the SKU.
func (o NamespaceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NamespaceSkuPtrOutput struct{ *pulumi.OutputState }

func (NamespaceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSku)(nil)).Elem()
}

func (o NamespaceSkuPtrOutput) ToNamespaceSkuPtrOutput() NamespaceSkuPtrOutput {
	return o
}

func (o NamespaceSkuPtrOutput) ToNamespaceSkuPtrOutputWithContext(ctx context.Context) NamespaceSkuPtrOutput {
	return o
}

func (o NamespaceSkuPtrOutput) Elem() NamespaceSkuOutput {
	return o.ApplyT(func(v *NamespaceSku) NamespaceSku {
		if v != nil {
			return *v
		}
		var ret NamespaceSku
		return ret
	}).(NamespaceSkuOutput)
}

// Specifies the number of Throughput Units that defines the capacity for the namespace. The property default value is
// 1 which signifies 1 Throughput Unit = 1MB/s ingress and 2MB/s egress per namespace. Min capacity is 1 and
// max allowed capacity is 20.
func (o NamespaceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NamespaceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The name of the SKU.
func (o NamespaceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Represents available Sku pricing tiers.
type NamespaceSkuResponse struct {
	// Specifies the number of Throughput Units that defines the capacity for the namespace. The property default value is
	// 1 which signifies 1 Throughput Unit = 1MB/s ingress and 2MB/s egress per namespace. Min capacity is 1 and
	// max allowed capacity is 20.
	Capacity *int `pulumi:"capacity"`
	// The name of the SKU.
	Name *string `pulumi:"name"`
}

// Represents available Sku pricing tiers.
type NamespaceSkuResponseOutput struct{ *pulumi.OutputState }

func (NamespaceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSkuResponse)(nil)).Elem()
}

func (o NamespaceSkuResponseOutput) ToNamespaceSkuResponseOutput() NamespaceSkuResponseOutput {
	return o
}

func (o NamespaceSkuResponseOutput) ToNamespaceSkuResponseOutputWithContext(ctx context.Context) NamespaceSkuResponseOutput {
	return o
}

// Specifies the number of Throughput Units that defines the capacity for the namespace. The property default value is
// 1 which signifies 1 Throughput Unit = 1MB/s ingress and 2MB/s egress per namespace. Min capacity is 1 and
// max allowed capacity is 20.
func (o NamespaceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamespaceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The name of the SKU.
func (o NamespaceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NamespaceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (NamespaceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceSkuResponse)(nil)).Elem()
}

func (o NamespaceSkuResponsePtrOutput) ToNamespaceSkuResponsePtrOutput() NamespaceSkuResponsePtrOutput {
	return o
}

func (o NamespaceSkuResponsePtrOutput) ToNamespaceSkuResponsePtrOutputWithContext(ctx context.Context) NamespaceSkuResponsePtrOutput {
	return o
}

func (o NamespaceSkuResponsePtrOutput) Elem() NamespaceSkuResponseOutput {
	return o.ApplyT(func(v *NamespaceSkuResponse) NamespaceSkuResponse {
		if v != nil {
			return *v
		}
		var ret NamespaceSkuResponse
		return ret
	}).(NamespaceSkuResponseOutput)
}

// Specifies the number of Throughput Units that defines the capacity for the namespace. The property default value is
// 1 which signifies 1 Throughput Unit = 1MB/s ingress and 2MB/s egress per namespace. Min capacity is 1 and
// max allowed capacity is 20.
func (o NamespaceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NamespaceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The name of the SKU.
func (o NamespaceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Information about the Namespace Topic destination for an event subscription.
type NamespaceTopicEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'NamespaceTopic'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure resource Id that represents the endpoint of the Event Grid Namespace Topic destination of an event subscription.
	// This field is required and the Namespace Topic resource listed must already exist.
	// The resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.EventGrid/namespaces/{NamespaceName}/topics/{TopicName}.
	ResourceId *string `pulumi:"resourceId"`
}

// NamespaceTopicEventSubscriptionDestinationInput is an input type that accepts NamespaceTopicEventSubscriptionDestinationArgs and NamespaceTopicEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `NamespaceTopicEventSubscriptionDestinationInput` via:
//
//	NamespaceTopicEventSubscriptionDestinationArgs{...}
type NamespaceTopicEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToNamespaceTopicEventSubscriptionDestinationOutput() NamespaceTopicEventSubscriptionDestinationOutput
	ToNamespaceTopicEventSubscriptionDestinationOutputWithContext(context.Context) NamespaceTopicEventSubscriptionDestinationOutput
}

// Information about the Namespace Topic destination for an event subscription.
type NamespaceTopicEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'NamespaceTopic'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure resource Id that represents the endpoint of the Event Grid Namespace Topic destination of an event subscription.
	// This field is required and the Namespace Topic resource listed must already exist.
	// The resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.EventGrid/namespaces/{NamespaceName}/topics/{TopicName}.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (NamespaceTopicEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTopicEventSubscriptionDestination)(nil)).Elem()
}

func (i NamespaceTopicEventSubscriptionDestinationArgs) ToNamespaceTopicEventSubscriptionDestinationOutput() NamespaceTopicEventSubscriptionDestinationOutput {
	return i.ToNamespaceTopicEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i NamespaceTopicEventSubscriptionDestinationArgs) ToNamespaceTopicEventSubscriptionDestinationOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTopicEventSubscriptionDestinationOutput)
}

func (i NamespaceTopicEventSubscriptionDestinationArgs) ToNamespaceTopicEventSubscriptionDestinationPtrOutput() NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return i.ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i NamespaceTopicEventSubscriptionDestinationArgs) ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTopicEventSubscriptionDestinationOutput).ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// NamespaceTopicEventSubscriptionDestinationPtrInput is an input type that accepts NamespaceTopicEventSubscriptionDestinationArgs, NamespaceTopicEventSubscriptionDestinationPtr and NamespaceTopicEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `NamespaceTopicEventSubscriptionDestinationPtrInput` via:
//
//	        NamespaceTopicEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type NamespaceTopicEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToNamespaceTopicEventSubscriptionDestinationPtrOutput() NamespaceTopicEventSubscriptionDestinationPtrOutput
	ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(context.Context) NamespaceTopicEventSubscriptionDestinationPtrOutput
}

type namespaceTopicEventSubscriptionDestinationPtrType NamespaceTopicEventSubscriptionDestinationArgs

func NamespaceTopicEventSubscriptionDestinationPtr(v *NamespaceTopicEventSubscriptionDestinationArgs) NamespaceTopicEventSubscriptionDestinationPtrInput {
	return (*namespaceTopicEventSubscriptionDestinationPtrType)(v)
}

func (*namespaceTopicEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTopicEventSubscriptionDestination)(nil)).Elem()
}

func (i *namespaceTopicEventSubscriptionDestinationPtrType) ToNamespaceTopicEventSubscriptionDestinationPtrOutput() NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return i.ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *namespaceTopicEventSubscriptionDestinationPtrType) ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTopicEventSubscriptionDestinationPtrOutput)
}

// Information about the Namespace Topic destination for an event subscription.
type NamespaceTopicEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (NamespaceTopicEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTopicEventSubscriptionDestination)(nil)).Elem()
}

func (o NamespaceTopicEventSubscriptionDestinationOutput) ToNamespaceTopicEventSubscriptionDestinationOutput() NamespaceTopicEventSubscriptionDestinationOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionDestinationOutput) ToNamespaceTopicEventSubscriptionDestinationOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionDestinationOutput) ToNamespaceTopicEventSubscriptionDestinationPtrOutput() NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return o.ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o NamespaceTopicEventSubscriptionDestinationOutput) ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceTopicEventSubscriptionDestination) *NamespaceTopicEventSubscriptionDestination {
		return &v
	}).(NamespaceTopicEventSubscriptionDestinationPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'NamespaceTopic'.
func (o NamespaceTopicEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceTopicEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure resource Id that represents the endpoint of the Event Grid Namespace Topic destination of an event subscription.
// This field is required and the Namespace Topic resource listed must already exist.
// The resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.EventGrid/namespaces/{NamespaceName}/topics/{TopicName}.
func (o NamespaceTopicEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTopicEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type NamespaceTopicEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (NamespaceTopicEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTopicEventSubscriptionDestination)(nil)).Elem()
}

func (o NamespaceTopicEventSubscriptionDestinationPtrOutput) ToNamespaceTopicEventSubscriptionDestinationPtrOutput() NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionDestinationPtrOutput) ToNamespaceTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationPtrOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionDestinationPtrOutput) Elem() NamespaceTopicEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscriptionDestination) NamespaceTopicEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret NamespaceTopicEventSubscriptionDestination
		return ret
	}).(NamespaceTopicEventSubscriptionDestinationOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'NamespaceTopic'.
func (o NamespaceTopicEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure resource Id that represents the endpoint of the Event Grid Namespace Topic destination of an event subscription.
// This field is required and the Namespace Topic resource listed must already exist.
// The resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.EventGrid/namespaces/{NamespaceName}/topics/{TopicName}.
func (o NamespaceTopicEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the Namespace Topic destination for an event subscription.
type NamespaceTopicEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'NamespaceTopic'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure resource Id that represents the endpoint of the Event Grid Namespace Topic destination of an event subscription.
	// This field is required and the Namespace Topic resource listed must already exist.
	// The resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.EventGrid/namespaces/{NamespaceName}/topics/{TopicName}.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the Namespace Topic destination for an event subscription.
type NamespaceTopicEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (NamespaceTopicEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceTopicEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o NamespaceTopicEventSubscriptionDestinationResponseOutput) ToNamespaceTopicEventSubscriptionDestinationResponseOutput() NamespaceTopicEventSubscriptionDestinationResponseOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionDestinationResponseOutput) ToNamespaceTopicEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'NamespaceTopic'.
func (o NamespaceTopicEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceTopicEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure resource Id that represents the endpoint of the Event Grid Namespace Topic destination of an event subscription.
// This field is required and the Namespace Topic resource listed must already exist.
// The resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.EventGrid/namespaces/{NamespaceName}/topics/{TopicName}.
func (o NamespaceTopicEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceTopicEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type NamespaceTopicEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (NamespaceTopicEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTopicEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o NamespaceTopicEventSubscriptionDestinationResponsePtrOutput) ToNamespaceTopicEventSubscriptionDestinationResponsePtrOutput() NamespaceTopicEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionDestinationResponsePtrOutput) ToNamespaceTopicEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionDestinationResponsePtrOutput) Elem() NamespaceTopicEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscriptionDestinationResponse) NamespaceTopicEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret NamespaceTopicEventSubscriptionDestinationResponse
		return ret
	}).(NamespaceTopicEventSubscriptionDestinationResponseOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'NamespaceTopic'.
func (o NamespaceTopicEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure resource Id that represents the endpoint of the Event Grid Namespace Topic destination of an event subscription.
// This field is required and the Namespace Topic resource listed must already exist.
// The resource ARM Id should follow this pattern: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.EventGrid/namespaces/{NamespaceName}/topics/{TopicName}.
func (o NamespaceTopicEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanAdvancedFilterInput is an input type that accepts NumberGreaterThanAdvancedFilterArgs and NumberGreaterThanAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberGreaterThanAdvancedFilterInput` via:
//
//	NumberGreaterThanAdvancedFilterArgs{...}
type NumberGreaterThanAdvancedFilterInput interface {
	pulumi.Input

	ToNumberGreaterThanAdvancedFilterOutput() NumberGreaterThanAdvancedFilterOutput
	ToNumberGreaterThanAdvancedFilterOutputWithContext(context.Context) NumberGreaterThanAdvancedFilterOutput
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberGreaterThanAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanAdvancedFilter)(nil)).Elem()
}

func (i NumberGreaterThanAdvancedFilterArgs) ToNumberGreaterThanAdvancedFilterOutput() NumberGreaterThanAdvancedFilterOutput {
	return i.ToNumberGreaterThanAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberGreaterThanAdvancedFilterArgs) ToNumberGreaterThanAdvancedFilterOutputWithContext(ctx context.Context) NumberGreaterThanAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberGreaterThanAdvancedFilterOutput)
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanAdvancedFilter)(nil)).Elem()
}

func (o NumberGreaterThanAdvancedFilterOutput) ToNumberGreaterThanAdvancedFilterOutput() NumberGreaterThanAdvancedFilterOutput {
	return o
}

func (o NumberGreaterThanAdvancedFilterOutput) ToNumberGreaterThanAdvancedFilterOutputWithContext(ctx context.Context) NumberGreaterThanAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThan'.
func (o NumberGreaterThanAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanAdvancedFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberGreaterThanAdvancedFilterResponseOutput) ToNumberGreaterThanAdvancedFilterResponseOutput() NumberGreaterThanAdvancedFilterResponseOutput {
	return o
}

func (o NumberGreaterThanAdvancedFilterResponseOutput) ToNumberGreaterThanAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberGreaterThanAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThan'.
func (o NumberGreaterThanAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThan Filter.
type NumberGreaterThanFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanFilterInput is an input type that accepts NumberGreaterThanFilterArgs and NumberGreaterThanFilterOutput values.
// You can construct a concrete instance of `NumberGreaterThanFilterInput` via:
//
//	NumberGreaterThanFilterArgs{...}
type NumberGreaterThanFilterInput interface {
	pulumi.Input

	ToNumberGreaterThanFilterOutput() NumberGreaterThanFilterOutput
	ToNumberGreaterThanFilterOutputWithContext(context.Context) NumberGreaterThanFilterOutput
}

// NumberGreaterThan Filter.
type NumberGreaterThanFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberGreaterThanFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanFilter)(nil)).Elem()
}

func (i NumberGreaterThanFilterArgs) ToNumberGreaterThanFilterOutput() NumberGreaterThanFilterOutput {
	return i.ToNumberGreaterThanFilterOutputWithContext(context.Background())
}

func (i NumberGreaterThanFilterArgs) ToNumberGreaterThanFilterOutputWithContext(ctx context.Context) NumberGreaterThanFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberGreaterThanFilterOutput)
}

// NumberGreaterThan Filter.
type NumberGreaterThanFilterOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanFilter)(nil)).Elem()
}

func (o NumberGreaterThanFilterOutput) ToNumberGreaterThanFilterOutput() NumberGreaterThanFilterOutput {
	return o
}

func (o NumberGreaterThanFilterOutput) ToNumberGreaterThanFilterOutputWithContext(ctx context.Context) NumberGreaterThanFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThan'.
func (o NumberGreaterThanFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThan Filter.
type NumberGreaterThanFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThan Filter.
type NumberGreaterThanFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanFilterResponse)(nil)).Elem()
}

func (o NumberGreaterThanFilterResponseOutput) ToNumberGreaterThanFilterResponseOutput() NumberGreaterThanFilterResponseOutput {
	return o
}

func (o NumberGreaterThanFilterResponseOutput) ToNumberGreaterThanFilterResponseOutputWithContext(ctx context.Context) NumberGreaterThanFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThan'.
func (o NumberGreaterThanFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEqualsAdvancedFilterInput is an input type that accepts NumberGreaterThanOrEqualsAdvancedFilterArgs and NumberGreaterThanOrEqualsAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberGreaterThanOrEqualsAdvancedFilterInput` via:
//
//	NumberGreaterThanOrEqualsAdvancedFilterArgs{...}
type NumberGreaterThanOrEqualsAdvancedFilterInput interface {
	pulumi.Input

	ToNumberGreaterThanOrEqualsAdvancedFilterOutput() NumberGreaterThanOrEqualsAdvancedFilterOutput
	ToNumberGreaterThanOrEqualsAdvancedFilterOutputWithContext(context.Context) NumberGreaterThanOrEqualsAdvancedFilterOutput
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberGreaterThanOrEqualsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsAdvancedFilter)(nil)).Elem()
}

func (i NumberGreaterThanOrEqualsAdvancedFilterArgs) ToNumberGreaterThanOrEqualsAdvancedFilterOutput() NumberGreaterThanOrEqualsAdvancedFilterOutput {
	return i.ToNumberGreaterThanOrEqualsAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberGreaterThanOrEqualsAdvancedFilterArgs) ToNumberGreaterThanOrEqualsAdvancedFilterOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberGreaterThanOrEqualsAdvancedFilterOutput)
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanOrEqualsAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsAdvancedFilter)(nil)).Elem()
}

func (o NumberGreaterThanOrEqualsAdvancedFilterOutput) ToNumberGreaterThanOrEqualsAdvancedFilterOutput() NumberGreaterThanOrEqualsAdvancedFilterOutput {
	return o
}

func (o NumberGreaterThanOrEqualsAdvancedFilterOutput) ToNumberGreaterThanOrEqualsAdvancedFilterOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanOrEqualsAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThanOrEquals'.
func (o NumberGreaterThanOrEqualsAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanOrEqualsAdvancedFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) ToNumberGreaterThanOrEqualsAdvancedFilterResponseOutput() NumberGreaterThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) ToNumberGreaterThanOrEqualsAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThanOrEquals'.
func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThanOrEquals Filter.
type NumberGreaterThanOrEqualsFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEqualsFilterInput is an input type that accepts NumberGreaterThanOrEqualsFilterArgs and NumberGreaterThanOrEqualsFilterOutput values.
// You can construct a concrete instance of `NumberGreaterThanOrEqualsFilterInput` via:
//
//	NumberGreaterThanOrEqualsFilterArgs{...}
type NumberGreaterThanOrEqualsFilterInput interface {
	pulumi.Input

	ToNumberGreaterThanOrEqualsFilterOutput() NumberGreaterThanOrEqualsFilterOutput
	ToNumberGreaterThanOrEqualsFilterOutputWithContext(context.Context) NumberGreaterThanOrEqualsFilterOutput
}

// NumberGreaterThanOrEquals Filter.
type NumberGreaterThanOrEqualsFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberGreaterThanOrEqualsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsFilter)(nil)).Elem()
}

func (i NumberGreaterThanOrEqualsFilterArgs) ToNumberGreaterThanOrEqualsFilterOutput() NumberGreaterThanOrEqualsFilterOutput {
	return i.ToNumberGreaterThanOrEqualsFilterOutputWithContext(context.Background())
}

func (i NumberGreaterThanOrEqualsFilterArgs) ToNumberGreaterThanOrEqualsFilterOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberGreaterThanOrEqualsFilterOutput)
}

// NumberGreaterThanOrEquals Filter.
type NumberGreaterThanOrEqualsFilterOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanOrEqualsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsFilter)(nil)).Elem()
}

func (o NumberGreaterThanOrEqualsFilterOutput) ToNumberGreaterThanOrEqualsFilterOutput() NumberGreaterThanOrEqualsFilterOutput {
	return o
}

func (o NumberGreaterThanOrEqualsFilterOutput) ToNumberGreaterThanOrEqualsFilterOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanOrEqualsFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThanOrEquals'.
func (o NumberGreaterThanOrEqualsFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanOrEqualsFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThanOrEquals Filter.
type NumberGreaterThanOrEqualsFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEquals Filter.
type NumberGreaterThanOrEqualsFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanOrEqualsFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsFilterResponse)(nil)).Elem()
}

func (o NumberGreaterThanOrEqualsFilterResponseOutput) ToNumberGreaterThanOrEqualsFilterResponseOutput() NumberGreaterThanOrEqualsFilterResponseOutput {
	return o
}

func (o NumberGreaterThanOrEqualsFilterResponseOutput) ToNumberGreaterThanOrEqualsFilterResponseOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanOrEqualsFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberGreaterThanOrEquals'.
func (o NumberGreaterThanOrEqualsFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanOrEqualsFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberInAdvancedFilterInput is an input type that accepts NumberInAdvancedFilterArgs and NumberInAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberInAdvancedFilterInput` via:
//
//	NumberInAdvancedFilterArgs{...}
type NumberInAdvancedFilterInput interface {
	pulumi.Input

	ToNumberInAdvancedFilterOutput() NumberInAdvancedFilterOutput
	ToNumberInAdvancedFilterOutputWithContext(context.Context) NumberInAdvancedFilterOutput
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (NumberInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInAdvancedFilter)(nil)).Elem()
}

func (i NumberInAdvancedFilterArgs) ToNumberInAdvancedFilterOutput() NumberInAdvancedFilterOutput {
	return i.ToNumberInAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberInAdvancedFilterArgs) ToNumberInAdvancedFilterOutputWithContext(ctx context.Context) NumberInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberInAdvancedFilterOutput)
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberInAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInAdvancedFilter)(nil)).Elem()
}

func (o NumberInAdvancedFilterOutput) ToNumberInAdvancedFilterOutput() NumberInAdvancedFilterOutput {
	return o
}

func (o NumberInAdvancedFilterOutput) ToNumberInAdvancedFilterOutputWithContext(ctx context.Context) NumberInAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberIn'.
func (o NumberInAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInAdvancedFilterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberInAdvancedFilter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberInAdvancedFilterResponseOutput) ToNumberInAdvancedFilterResponseOutput() NumberInAdvancedFilterResponseOutput {
	return o
}

func (o NumberInAdvancedFilterResponseOutput) ToNumberInAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberIn'.
func (o NumberInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInAdvancedFilterResponseOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberInAdvancedFilterResponse) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberIn Filter.
type NumberInFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberInFilterInput is an input type that accepts NumberInFilterArgs and NumberInFilterOutput values.
// You can construct a concrete instance of `NumberInFilterInput` via:
//
//	NumberInFilterArgs{...}
type NumberInFilterInput interface {
	pulumi.Input

	ToNumberInFilterOutput() NumberInFilterOutput
	ToNumberInFilterOutputWithContext(context.Context) NumberInFilterOutput
}

// NumberIn Filter.
type NumberInFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (NumberInFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInFilter)(nil)).Elem()
}

func (i NumberInFilterArgs) ToNumberInFilterOutput() NumberInFilterOutput {
	return i.ToNumberInFilterOutputWithContext(context.Background())
}

func (i NumberInFilterArgs) ToNumberInFilterOutputWithContext(ctx context.Context) NumberInFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberInFilterOutput)
}

// NumberIn Filter.
type NumberInFilterOutput struct{ *pulumi.OutputState }

func (NumberInFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInFilter)(nil)).Elem()
}

func (o NumberInFilterOutput) ToNumberInFilterOutput() NumberInFilterOutput {
	return o
}

func (o NumberInFilterOutput) ToNumberInFilterOutputWithContext(ctx context.Context) NumberInFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberIn'.
func (o NumberInFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInFilterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberInFilter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberIn Filter.
type NumberInFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberIn Filter.
type NumberInFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberInFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInFilterResponse)(nil)).Elem()
}

func (o NumberInFilterResponseOutput) ToNumberInFilterResponseOutput() NumberInFilterResponseOutput {
	return o
}

func (o NumberInFilterResponseOutput) ToNumberInFilterResponseOutputWithContext(ctx context.Context) NumberInFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberIn'.
func (o NumberInFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInFilterResponseOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberInFilterResponse) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberInRange Advanced Filter.
type NumberInRangeAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberInRangeAdvancedFilterInput is an input type that accepts NumberInRangeAdvancedFilterArgs and NumberInRangeAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberInRangeAdvancedFilterInput` via:
//
//	NumberInRangeAdvancedFilterArgs{...}
type NumberInRangeAdvancedFilterInput interface {
	pulumi.Input

	ToNumberInRangeAdvancedFilterOutput() NumberInRangeAdvancedFilterOutput
	ToNumberInRangeAdvancedFilterOutputWithContext(context.Context) NumberInRangeAdvancedFilterOutput
}

// NumberInRange Advanced Filter.
type NumberInRangeAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayArrayInput `pulumi:"values"`
}

func (NumberInRangeAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInRangeAdvancedFilter)(nil)).Elem()
}

func (i NumberInRangeAdvancedFilterArgs) ToNumberInRangeAdvancedFilterOutput() NumberInRangeAdvancedFilterOutput {
	return i.ToNumberInRangeAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberInRangeAdvancedFilterArgs) ToNumberInRangeAdvancedFilterOutputWithContext(ctx context.Context) NumberInRangeAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberInRangeAdvancedFilterOutput)
}

// NumberInRange Advanced Filter.
type NumberInRangeAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberInRangeAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInRangeAdvancedFilter)(nil)).Elem()
}

func (o NumberInRangeAdvancedFilterOutput) ToNumberInRangeAdvancedFilterOutput() NumberInRangeAdvancedFilterOutput {
	return o
}

func (o NumberInRangeAdvancedFilterOutput) ToNumberInRangeAdvancedFilterOutputWithContext(ctx context.Context) NumberInRangeAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInRangeAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInRangeAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberInRange'.
func (o NumberInRangeAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInRangeAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInRangeAdvancedFilterOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberInRangeAdvancedFilter) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// NumberInRange Advanced Filter.
type NumberInRangeAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberInRange Advanced Filter.
type NumberInRangeAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberInRangeAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInRangeAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberInRangeAdvancedFilterResponseOutput) ToNumberInRangeAdvancedFilterResponseOutput() NumberInRangeAdvancedFilterResponseOutput {
	return o
}

func (o NumberInRangeAdvancedFilterResponseOutput) ToNumberInRangeAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberInRangeAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInRangeAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInRangeAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberInRange'.
func (o NumberInRangeAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInRangeAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInRangeAdvancedFilterResponseOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberInRangeAdvancedFilterResponse) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// NumberInRange Filter.
type NumberInRangeFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberInRangeFilterInput is an input type that accepts NumberInRangeFilterArgs and NumberInRangeFilterOutput values.
// You can construct a concrete instance of `NumberInRangeFilterInput` via:
//
//	NumberInRangeFilterArgs{...}
type NumberInRangeFilterInput interface {
	pulumi.Input

	ToNumberInRangeFilterOutput() NumberInRangeFilterOutput
	ToNumberInRangeFilterOutputWithContext(context.Context) NumberInRangeFilterOutput
}

// NumberInRange Filter.
type NumberInRangeFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayArrayInput `pulumi:"values"`
}

func (NumberInRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInRangeFilter)(nil)).Elem()
}

func (i NumberInRangeFilterArgs) ToNumberInRangeFilterOutput() NumberInRangeFilterOutput {
	return i.ToNumberInRangeFilterOutputWithContext(context.Background())
}

func (i NumberInRangeFilterArgs) ToNumberInRangeFilterOutputWithContext(ctx context.Context) NumberInRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberInRangeFilterOutput)
}

// NumberInRange Filter.
type NumberInRangeFilterOutput struct{ *pulumi.OutputState }

func (NumberInRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInRangeFilter)(nil)).Elem()
}

func (o NumberInRangeFilterOutput) ToNumberInRangeFilterOutput() NumberInRangeFilterOutput {
	return o
}

func (o NumberInRangeFilterOutput) ToNumberInRangeFilterOutputWithContext(ctx context.Context) NumberInRangeFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInRangeFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInRangeFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberInRange'.
func (o NumberInRangeFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInRangeFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInRangeFilterOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberInRangeFilter) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// NumberInRange Filter.
type NumberInRangeFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberInRange Filter.
type NumberInRangeFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberInRangeFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInRangeFilterResponse)(nil)).Elem()
}

func (o NumberInRangeFilterResponseOutput) ToNumberInRangeFilterResponseOutput() NumberInRangeFilterResponseOutput {
	return o
}

func (o NumberInRangeFilterResponseOutput) ToNumberInRangeFilterResponseOutputWithContext(ctx context.Context) NumberInRangeFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInRangeFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInRangeFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberInRange'.
func (o NumberInRangeFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInRangeFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInRangeFilterResponseOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberInRangeFilterResponse) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanAdvancedFilterInput is an input type that accepts NumberLessThanAdvancedFilterArgs and NumberLessThanAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberLessThanAdvancedFilterInput` via:
//
//	NumberLessThanAdvancedFilterArgs{...}
type NumberLessThanAdvancedFilterInput interface {
	pulumi.Input

	ToNumberLessThanAdvancedFilterOutput() NumberLessThanAdvancedFilterOutput
	ToNumberLessThanAdvancedFilterOutputWithContext(context.Context) NumberLessThanAdvancedFilterOutput
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberLessThanAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanAdvancedFilter)(nil)).Elem()
}

func (i NumberLessThanAdvancedFilterArgs) ToNumberLessThanAdvancedFilterOutput() NumberLessThanAdvancedFilterOutput {
	return i.ToNumberLessThanAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberLessThanAdvancedFilterArgs) ToNumberLessThanAdvancedFilterOutputWithContext(ctx context.Context) NumberLessThanAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberLessThanAdvancedFilterOutput)
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberLessThanAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanAdvancedFilter)(nil)).Elem()
}

func (o NumberLessThanAdvancedFilterOutput) ToNumberLessThanAdvancedFilterOutput() NumberLessThanAdvancedFilterOutput {
	return o
}

func (o NumberLessThanAdvancedFilterOutput) ToNumberLessThanAdvancedFilterOutputWithContext(ctx context.Context) NumberLessThanAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThan'.
func (o NumberLessThanAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanAdvancedFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberLessThanAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberLessThanAdvancedFilterResponseOutput) ToNumberLessThanAdvancedFilterResponseOutput() NumberLessThanAdvancedFilterResponseOutput {
	return o
}

func (o NumberLessThanAdvancedFilterResponseOutput) ToNumberLessThanAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberLessThanAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThan'.
func (o NumberLessThanAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThan Filter.
type NumberLessThanFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanFilterInput is an input type that accepts NumberLessThanFilterArgs and NumberLessThanFilterOutput values.
// You can construct a concrete instance of `NumberLessThanFilterInput` via:
//
//	NumberLessThanFilterArgs{...}
type NumberLessThanFilterInput interface {
	pulumi.Input

	ToNumberLessThanFilterOutput() NumberLessThanFilterOutput
	ToNumberLessThanFilterOutputWithContext(context.Context) NumberLessThanFilterOutput
}

// NumberLessThan Filter.
type NumberLessThanFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberLessThanFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanFilter)(nil)).Elem()
}

func (i NumberLessThanFilterArgs) ToNumberLessThanFilterOutput() NumberLessThanFilterOutput {
	return i.ToNumberLessThanFilterOutputWithContext(context.Background())
}

func (i NumberLessThanFilterArgs) ToNumberLessThanFilterOutputWithContext(ctx context.Context) NumberLessThanFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberLessThanFilterOutput)
}

// NumberLessThan Filter.
type NumberLessThanFilterOutput struct{ *pulumi.OutputState }

func (NumberLessThanFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanFilter)(nil)).Elem()
}

func (o NumberLessThanFilterOutput) ToNumberLessThanFilterOutput() NumberLessThanFilterOutput {
	return o
}

func (o NumberLessThanFilterOutput) ToNumberLessThanFilterOutputWithContext(ctx context.Context) NumberLessThanFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThan'.
func (o NumberLessThanFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThan Filter.
type NumberLessThanFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThan Filter.
type NumberLessThanFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberLessThanFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanFilterResponse)(nil)).Elem()
}

func (o NumberLessThanFilterResponseOutput) ToNumberLessThanFilterResponseOutput() NumberLessThanFilterResponseOutput {
	return o
}

func (o NumberLessThanFilterResponseOutput) ToNumberLessThanFilterResponseOutputWithContext(ctx context.Context) NumberLessThanFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThan'.
func (o NumberLessThanFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEqualsAdvancedFilterInput is an input type that accepts NumberLessThanOrEqualsAdvancedFilterArgs and NumberLessThanOrEqualsAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberLessThanOrEqualsAdvancedFilterInput` via:
//
//	NumberLessThanOrEqualsAdvancedFilterArgs{...}
type NumberLessThanOrEqualsAdvancedFilterInput interface {
	pulumi.Input

	ToNumberLessThanOrEqualsAdvancedFilterOutput() NumberLessThanOrEqualsAdvancedFilterOutput
	ToNumberLessThanOrEqualsAdvancedFilterOutputWithContext(context.Context) NumberLessThanOrEqualsAdvancedFilterOutput
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberLessThanOrEqualsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsAdvancedFilter)(nil)).Elem()
}

func (i NumberLessThanOrEqualsAdvancedFilterArgs) ToNumberLessThanOrEqualsAdvancedFilterOutput() NumberLessThanOrEqualsAdvancedFilterOutput {
	return i.ToNumberLessThanOrEqualsAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberLessThanOrEqualsAdvancedFilterArgs) ToNumberLessThanOrEqualsAdvancedFilterOutputWithContext(ctx context.Context) NumberLessThanOrEqualsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberLessThanOrEqualsAdvancedFilterOutput)
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberLessThanOrEqualsAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsAdvancedFilter)(nil)).Elem()
}

func (o NumberLessThanOrEqualsAdvancedFilterOutput) ToNumberLessThanOrEqualsAdvancedFilterOutput() NumberLessThanOrEqualsAdvancedFilterOutput {
	return o
}

func (o NumberLessThanOrEqualsAdvancedFilterOutput) ToNumberLessThanOrEqualsAdvancedFilterOutputWithContext(ctx context.Context) NumberLessThanOrEqualsAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanOrEqualsAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThanOrEquals'.
func (o NumberLessThanOrEqualsAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanOrEqualsAdvancedFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberLessThanOrEqualsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) ToNumberLessThanOrEqualsAdvancedFilterResponseOutput() NumberLessThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) ToNumberLessThanOrEqualsAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberLessThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThanOrEquals'.
func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThanOrEquals Filter.
type NumberLessThanOrEqualsFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEqualsFilterInput is an input type that accepts NumberLessThanOrEqualsFilterArgs and NumberLessThanOrEqualsFilterOutput values.
// You can construct a concrete instance of `NumberLessThanOrEqualsFilterInput` via:
//
//	NumberLessThanOrEqualsFilterArgs{...}
type NumberLessThanOrEqualsFilterInput interface {
	pulumi.Input

	ToNumberLessThanOrEqualsFilterOutput() NumberLessThanOrEqualsFilterOutput
	ToNumberLessThanOrEqualsFilterOutputWithContext(context.Context) NumberLessThanOrEqualsFilterOutput
}

// NumberLessThanOrEquals Filter.
type NumberLessThanOrEqualsFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberLessThanOrEqualsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsFilter)(nil)).Elem()
}

func (i NumberLessThanOrEqualsFilterArgs) ToNumberLessThanOrEqualsFilterOutput() NumberLessThanOrEqualsFilterOutput {
	return i.ToNumberLessThanOrEqualsFilterOutputWithContext(context.Background())
}

func (i NumberLessThanOrEqualsFilterArgs) ToNumberLessThanOrEqualsFilterOutputWithContext(ctx context.Context) NumberLessThanOrEqualsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberLessThanOrEqualsFilterOutput)
}

// NumberLessThanOrEquals Filter.
type NumberLessThanOrEqualsFilterOutput struct{ *pulumi.OutputState }

func (NumberLessThanOrEqualsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsFilter)(nil)).Elem()
}

func (o NumberLessThanOrEqualsFilterOutput) ToNumberLessThanOrEqualsFilterOutput() NumberLessThanOrEqualsFilterOutput {
	return o
}

func (o NumberLessThanOrEqualsFilterOutput) ToNumberLessThanOrEqualsFilterOutputWithContext(ctx context.Context) NumberLessThanOrEqualsFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanOrEqualsFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThanOrEquals'.
func (o NumberLessThanOrEqualsFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanOrEqualsFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThanOrEquals Filter.
type NumberLessThanOrEqualsFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEquals Filter.
type NumberLessThanOrEqualsFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberLessThanOrEqualsFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsFilterResponse)(nil)).Elem()
}

func (o NumberLessThanOrEqualsFilterResponseOutput) ToNumberLessThanOrEqualsFilterResponseOutput() NumberLessThanOrEqualsFilterResponseOutput {
	return o
}

func (o NumberLessThanOrEqualsFilterResponseOutput) ToNumberLessThanOrEqualsFilterResponseOutputWithContext(ctx context.Context) NumberLessThanOrEqualsFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanOrEqualsFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberLessThanOrEquals'.
func (o NumberLessThanOrEqualsFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanOrEqualsFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotInAdvancedFilterInput is an input type that accepts NumberNotInAdvancedFilterArgs and NumberNotInAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberNotInAdvancedFilterInput` via:
//
//	NumberNotInAdvancedFilterArgs{...}
type NumberNotInAdvancedFilterInput interface {
	pulumi.Input

	ToNumberNotInAdvancedFilterOutput() NumberNotInAdvancedFilterOutput
	ToNumberNotInAdvancedFilterOutputWithContext(context.Context) NumberNotInAdvancedFilterOutput
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (NumberNotInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInAdvancedFilter)(nil)).Elem()
}

func (i NumberNotInAdvancedFilterArgs) ToNumberNotInAdvancedFilterOutput() NumberNotInAdvancedFilterOutput {
	return i.ToNumberNotInAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberNotInAdvancedFilterArgs) ToNumberNotInAdvancedFilterOutputWithContext(ctx context.Context) NumberNotInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberNotInAdvancedFilterOutput)
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberNotInAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInAdvancedFilter)(nil)).Elem()
}

func (o NumberNotInAdvancedFilterOutput) ToNumberNotInAdvancedFilterOutput() NumberNotInAdvancedFilterOutput {
	return o
}

func (o NumberNotInAdvancedFilterOutput) ToNumberNotInAdvancedFilterOutputWithContext(ctx context.Context) NumberNotInAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotIn'.
func (o NumberNotInAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInAdvancedFilterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberNotInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberNotInAdvancedFilterResponseOutput) ToNumberNotInAdvancedFilterResponseOutput() NumberNotInAdvancedFilterResponseOutput {
	return o
}

func (o NumberNotInAdvancedFilterResponseOutput) ToNumberNotInAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberNotInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotIn'.
func (o NumberNotInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInAdvancedFilterResponseOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilterResponse) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberNotIn Filter.
type NumberNotInFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotInFilterInput is an input type that accepts NumberNotInFilterArgs and NumberNotInFilterOutput values.
// You can construct a concrete instance of `NumberNotInFilterInput` via:
//
//	NumberNotInFilterArgs{...}
type NumberNotInFilterInput interface {
	pulumi.Input

	ToNumberNotInFilterOutput() NumberNotInFilterOutput
	ToNumberNotInFilterOutputWithContext(context.Context) NumberNotInFilterOutput
}

// NumberNotIn Filter.
type NumberNotInFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (NumberNotInFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInFilter)(nil)).Elem()
}

func (i NumberNotInFilterArgs) ToNumberNotInFilterOutput() NumberNotInFilterOutput {
	return i.ToNumberNotInFilterOutputWithContext(context.Background())
}

func (i NumberNotInFilterArgs) ToNumberNotInFilterOutputWithContext(ctx context.Context) NumberNotInFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberNotInFilterOutput)
}

// NumberNotIn Filter.
type NumberNotInFilterOutput struct{ *pulumi.OutputState }

func (NumberNotInFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInFilter)(nil)).Elem()
}

func (o NumberNotInFilterOutput) ToNumberNotInFilterOutput() NumberNotInFilterOutput {
	return o
}

func (o NumberNotInFilterOutput) ToNumberNotInFilterOutputWithContext(ctx context.Context) NumberNotInFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotIn'.
func (o NumberNotInFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInFilterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberNotInFilter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberNotIn Filter.
type NumberNotInFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotIn Filter.
type NumberNotInFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberNotInFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInFilterResponse)(nil)).Elem()
}

func (o NumberNotInFilterResponseOutput) ToNumberNotInFilterResponseOutput() NumberNotInFilterResponseOutput {
	return o
}

func (o NumberNotInFilterResponseOutput) ToNumberNotInFilterResponseOutputWithContext(ctx context.Context) NumberNotInFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotIn'.
func (o NumberNotInFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInFilterResponseOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberNotInFilterResponse) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberNotInRange Advanced Filter.
type NumberNotInRangeAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberNotInRangeAdvancedFilterInput is an input type that accepts NumberNotInRangeAdvancedFilterArgs and NumberNotInRangeAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberNotInRangeAdvancedFilterInput` via:
//
//	NumberNotInRangeAdvancedFilterArgs{...}
type NumberNotInRangeAdvancedFilterInput interface {
	pulumi.Input

	ToNumberNotInRangeAdvancedFilterOutput() NumberNotInRangeAdvancedFilterOutput
	ToNumberNotInRangeAdvancedFilterOutputWithContext(context.Context) NumberNotInRangeAdvancedFilterOutput
}

// NumberNotInRange Advanced Filter.
type NumberNotInRangeAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayArrayInput `pulumi:"values"`
}

func (NumberNotInRangeAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInRangeAdvancedFilter)(nil)).Elem()
}

func (i NumberNotInRangeAdvancedFilterArgs) ToNumberNotInRangeAdvancedFilterOutput() NumberNotInRangeAdvancedFilterOutput {
	return i.ToNumberNotInRangeAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberNotInRangeAdvancedFilterArgs) ToNumberNotInRangeAdvancedFilterOutputWithContext(ctx context.Context) NumberNotInRangeAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberNotInRangeAdvancedFilterOutput)
}

// NumberNotInRange Advanced Filter.
type NumberNotInRangeAdvancedFilterOutput struct{ *pulumi.OutputState }

func (NumberNotInRangeAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInRangeAdvancedFilter)(nil)).Elem()
}

func (o NumberNotInRangeAdvancedFilterOutput) ToNumberNotInRangeAdvancedFilterOutput() NumberNotInRangeAdvancedFilterOutput {
	return o
}

func (o NumberNotInRangeAdvancedFilterOutput) ToNumberNotInRangeAdvancedFilterOutputWithContext(ctx context.Context) NumberNotInRangeAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInRangeAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInRangeAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotInRange'.
func (o NumberNotInRangeAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInRangeAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInRangeAdvancedFilterOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberNotInRangeAdvancedFilter) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// NumberNotInRange Advanced Filter.
type NumberNotInRangeAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberNotInRange Advanced Filter.
type NumberNotInRangeAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberNotInRangeAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInRangeAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberNotInRangeAdvancedFilterResponseOutput) ToNumberNotInRangeAdvancedFilterResponseOutput() NumberNotInRangeAdvancedFilterResponseOutput {
	return o
}

func (o NumberNotInRangeAdvancedFilterResponseOutput) ToNumberNotInRangeAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberNotInRangeAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInRangeAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInRangeAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotInRange'.
func (o NumberNotInRangeAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInRangeAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInRangeAdvancedFilterResponseOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberNotInRangeAdvancedFilterResponse) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// NumberNotInRange Filter.
type NumberNotInRangeFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberNotInRangeFilterInput is an input type that accepts NumberNotInRangeFilterArgs and NumberNotInRangeFilterOutput values.
// You can construct a concrete instance of `NumberNotInRangeFilterInput` via:
//
//	NumberNotInRangeFilterArgs{...}
type NumberNotInRangeFilterInput interface {
	pulumi.Input

	ToNumberNotInRangeFilterOutput() NumberNotInRangeFilterOutput
	ToNumberNotInRangeFilterOutputWithContext(context.Context) NumberNotInRangeFilterOutput
}

// NumberNotInRange Filter.
type NumberNotInRangeFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayArrayInput `pulumi:"values"`
}

func (NumberNotInRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInRangeFilter)(nil)).Elem()
}

func (i NumberNotInRangeFilterArgs) ToNumberNotInRangeFilterOutput() NumberNotInRangeFilterOutput {
	return i.ToNumberNotInRangeFilterOutputWithContext(context.Background())
}

func (i NumberNotInRangeFilterArgs) ToNumberNotInRangeFilterOutputWithContext(ctx context.Context) NumberNotInRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberNotInRangeFilterOutput)
}

// NumberNotInRange Filter.
type NumberNotInRangeFilterOutput struct{ *pulumi.OutputState }

func (NumberNotInRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInRangeFilter)(nil)).Elem()
}

func (o NumberNotInRangeFilterOutput) ToNumberNotInRangeFilterOutput() NumberNotInRangeFilterOutput {
	return o
}

func (o NumberNotInRangeFilterOutput) ToNumberNotInRangeFilterOutputWithContext(ctx context.Context) NumberNotInRangeFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInRangeFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInRangeFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotInRange'.
func (o NumberNotInRangeFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInRangeFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInRangeFilterOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberNotInRangeFilter) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// NumberNotInRange Filter.
type NumberNotInRangeFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberNotInRange Filter.
type NumberNotInRangeFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberNotInRangeFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInRangeFilterResponse)(nil)).Elem()
}

func (o NumberNotInRangeFilterResponseOutput) ToNumberNotInRangeFilterResponseOutput() NumberNotInRangeFilterResponseOutput {
	return o
}

func (o NumberNotInRangeFilterResponseOutput) ToNumberNotInRangeFilterResponseOutputWithContext(ctx context.Context) NumberNotInRangeFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInRangeFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInRangeFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'NumberNotInRange'.
func (o NumberNotInRangeFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInRangeFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInRangeFilterResponseOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v NumberNotInRangeFilterResponse) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

// Information about the partner.
type Partner struct {
	// Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's
	// context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
	// If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
	AuthorizationExpirationTimeInUtc *string `pulumi:"authorizationExpirationTimeInUtc"`
	// The partner name.
	PartnerName *string `pulumi:"partnerName"`
	// The immutableId of the corresponding partner registration.
	PartnerRegistrationImmutableId *string `pulumi:"partnerRegistrationImmutableId"`
}

// PartnerInput is an input type that accepts PartnerArgs and PartnerOutput values.
// You can construct a concrete instance of `PartnerInput` via:
//
//	PartnerArgs{...}
type PartnerInput interface {
	pulumi.Input

	ToPartnerOutput() PartnerOutput
	ToPartnerOutputWithContext(context.Context) PartnerOutput
}

// Information about the partner.
type PartnerArgs struct {
	// Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's
	// context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
	// If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
	AuthorizationExpirationTimeInUtc pulumi.StringPtrInput `pulumi:"authorizationExpirationTimeInUtc"`
	// The partner name.
	PartnerName pulumi.StringPtrInput `pulumi:"partnerName"`
	// The immutableId of the corresponding partner registration.
	PartnerRegistrationImmutableId pulumi.StringPtrInput `pulumi:"partnerRegistrationImmutableId"`
}

func (PartnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Partner)(nil)).Elem()
}

func (i PartnerArgs) ToPartnerOutput() PartnerOutput {
	return i.ToPartnerOutputWithContext(context.Background())
}

func (i PartnerArgs) ToPartnerOutputWithContext(ctx context.Context) PartnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerOutput)
}

// PartnerArrayInput is an input type that accepts PartnerArray and PartnerArrayOutput values.
// You can construct a concrete instance of `PartnerArrayInput` via:
//
//	PartnerArray{ PartnerArgs{...} }
type PartnerArrayInput interface {
	pulumi.Input

	ToPartnerArrayOutput() PartnerArrayOutput
	ToPartnerArrayOutputWithContext(context.Context) PartnerArrayOutput
}

type PartnerArray []PartnerInput

func (PartnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Partner)(nil)).Elem()
}

func (i PartnerArray) ToPartnerArrayOutput() PartnerArrayOutput {
	return i.ToPartnerArrayOutputWithContext(context.Background())
}

func (i PartnerArray) ToPartnerArrayOutputWithContext(ctx context.Context) PartnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerArrayOutput)
}

// Information about the partner.
type PartnerOutput struct{ *pulumi.OutputState }

func (PartnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Partner)(nil)).Elem()
}

func (o PartnerOutput) ToPartnerOutput() PartnerOutput {
	return o
}

func (o PartnerOutput) ToPartnerOutputWithContext(ctx context.Context) PartnerOutput {
	return o
}

// Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's
// context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
// If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
func (o PartnerOutput) AuthorizationExpirationTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Partner) *string { return v.AuthorizationExpirationTimeInUtc }).(pulumi.StringPtrOutput)
}

// The partner name.
func (o PartnerOutput) PartnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Partner) *string { return v.PartnerName }).(pulumi.StringPtrOutput)
}

// The immutableId of the corresponding partner registration.
func (o PartnerOutput) PartnerRegistrationImmutableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Partner) *string { return v.PartnerRegistrationImmutableId }).(pulumi.StringPtrOutput)
}

type PartnerArrayOutput struct{ *pulumi.OutputState }

func (PartnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Partner)(nil)).Elem()
}

func (o PartnerArrayOutput) ToPartnerArrayOutput() PartnerArrayOutput {
	return o
}

func (o PartnerArrayOutput) ToPartnerArrayOutputWithContext(ctx context.Context) PartnerArrayOutput {
	return o
}

func (o PartnerArrayOutput) Index(i pulumi.IntInput) PartnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Partner {
		return vs[0].([]Partner)[vs[1].(int)]
	}).(PartnerOutput)
}

// The partner authorization details.
type PartnerAuthorization struct {
	// The list of authorized partners.
	AuthorizedPartnersList []Partner `pulumi:"authorizedPartnersList"`
	// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
	// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
	DefaultMaximumExpirationTimeInDays *int `pulumi:"defaultMaximumExpirationTimeInDays"`
}

// PartnerAuthorizationInput is an input type that accepts PartnerAuthorizationArgs and PartnerAuthorizationOutput values.
// You can construct a concrete instance of `PartnerAuthorizationInput` via:
//
//	PartnerAuthorizationArgs{...}
type PartnerAuthorizationInput interface {
	pulumi.Input

	ToPartnerAuthorizationOutput() PartnerAuthorizationOutput
	ToPartnerAuthorizationOutputWithContext(context.Context) PartnerAuthorizationOutput
}

// The partner authorization details.
type PartnerAuthorizationArgs struct {
	// The list of authorized partners.
	AuthorizedPartnersList PartnerArrayInput `pulumi:"authorizedPartnersList"`
	// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
	// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
	DefaultMaximumExpirationTimeInDays pulumi.IntPtrInput `pulumi:"defaultMaximumExpirationTimeInDays"`
}

func (PartnerAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerAuthorization)(nil)).Elem()
}

func (i PartnerAuthorizationArgs) ToPartnerAuthorizationOutput() PartnerAuthorizationOutput {
	return i.ToPartnerAuthorizationOutputWithContext(context.Background())
}

func (i PartnerAuthorizationArgs) ToPartnerAuthorizationOutputWithContext(ctx context.Context) PartnerAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerAuthorizationOutput)
}

func (i PartnerAuthorizationArgs) ToPartnerAuthorizationPtrOutput() PartnerAuthorizationPtrOutput {
	return i.ToPartnerAuthorizationPtrOutputWithContext(context.Background())
}

func (i PartnerAuthorizationArgs) ToPartnerAuthorizationPtrOutputWithContext(ctx context.Context) PartnerAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerAuthorizationOutput).ToPartnerAuthorizationPtrOutputWithContext(ctx)
}

// PartnerAuthorizationPtrInput is an input type that accepts PartnerAuthorizationArgs, PartnerAuthorizationPtr and PartnerAuthorizationPtrOutput values.
// You can construct a concrete instance of `PartnerAuthorizationPtrInput` via:
//
//	        PartnerAuthorizationArgs{...}
//
//	or:
//
//	        nil
type PartnerAuthorizationPtrInput interface {
	pulumi.Input

	ToPartnerAuthorizationPtrOutput() PartnerAuthorizationPtrOutput
	ToPartnerAuthorizationPtrOutputWithContext(context.Context) PartnerAuthorizationPtrOutput
}

type partnerAuthorizationPtrType PartnerAuthorizationArgs

func PartnerAuthorizationPtr(v *PartnerAuthorizationArgs) PartnerAuthorizationPtrInput {
	return (*partnerAuthorizationPtrType)(v)
}

func (*partnerAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerAuthorization)(nil)).Elem()
}

func (i *partnerAuthorizationPtrType) ToPartnerAuthorizationPtrOutput() PartnerAuthorizationPtrOutput {
	return i.ToPartnerAuthorizationPtrOutputWithContext(context.Background())
}

func (i *partnerAuthorizationPtrType) ToPartnerAuthorizationPtrOutputWithContext(ctx context.Context) PartnerAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerAuthorizationPtrOutput)
}

// The partner authorization details.
type PartnerAuthorizationOutput struct{ *pulumi.OutputState }

func (PartnerAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerAuthorization)(nil)).Elem()
}

func (o PartnerAuthorizationOutput) ToPartnerAuthorizationOutput() PartnerAuthorizationOutput {
	return o
}

func (o PartnerAuthorizationOutput) ToPartnerAuthorizationOutputWithContext(ctx context.Context) PartnerAuthorizationOutput {
	return o
}

func (o PartnerAuthorizationOutput) ToPartnerAuthorizationPtrOutput() PartnerAuthorizationPtrOutput {
	return o.ToPartnerAuthorizationPtrOutputWithContext(context.Background())
}

func (o PartnerAuthorizationOutput) ToPartnerAuthorizationPtrOutputWithContext(ctx context.Context) PartnerAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnerAuthorization) *PartnerAuthorization {
		return &v
	}).(PartnerAuthorizationPtrOutput)
}

// The list of authorized partners.
func (o PartnerAuthorizationOutput) AuthorizedPartnersList() PartnerArrayOutput {
	return o.ApplyT(func(v PartnerAuthorization) []Partner { return v.AuthorizedPartnersList }).(PartnerArrayOutput)
}

// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
func (o PartnerAuthorizationOutput) DefaultMaximumExpirationTimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PartnerAuthorization) *int { return v.DefaultMaximumExpirationTimeInDays }).(pulumi.IntPtrOutput)
}

type PartnerAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (PartnerAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerAuthorization)(nil)).Elem()
}

func (o PartnerAuthorizationPtrOutput) ToPartnerAuthorizationPtrOutput() PartnerAuthorizationPtrOutput {
	return o
}

func (o PartnerAuthorizationPtrOutput) ToPartnerAuthorizationPtrOutputWithContext(ctx context.Context) PartnerAuthorizationPtrOutput {
	return o
}

func (o PartnerAuthorizationPtrOutput) Elem() PartnerAuthorizationOutput {
	return o.ApplyT(func(v *PartnerAuthorization) PartnerAuthorization {
		if v != nil {
			return *v
		}
		var ret PartnerAuthorization
		return ret
	}).(PartnerAuthorizationOutput)
}

// The list of authorized partners.
func (o PartnerAuthorizationPtrOutput) AuthorizedPartnersList() PartnerArrayOutput {
	return o.ApplyT(func(v *PartnerAuthorization) []Partner {
		if v == nil {
			return nil
		}
		return v.AuthorizedPartnersList
	}).(PartnerArrayOutput)
}

// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
func (o PartnerAuthorizationPtrOutput) DefaultMaximumExpirationTimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PartnerAuthorization) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMaximumExpirationTimeInDays
	}).(pulumi.IntPtrOutput)
}

// The partner authorization details.
type PartnerAuthorizationResponse struct {
	// The list of authorized partners.
	AuthorizedPartnersList []PartnerResponse `pulumi:"authorizedPartnersList"`
	// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
	// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
	DefaultMaximumExpirationTimeInDays *int `pulumi:"defaultMaximumExpirationTimeInDays"`
}

// The partner authorization details.
type PartnerAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (PartnerAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerAuthorizationResponse)(nil)).Elem()
}

func (o PartnerAuthorizationResponseOutput) ToPartnerAuthorizationResponseOutput() PartnerAuthorizationResponseOutput {
	return o
}

func (o PartnerAuthorizationResponseOutput) ToPartnerAuthorizationResponseOutputWithContext(ctx context.Context) PartnerAuthorizationResponseOutput {
	return o
}

// The list of authorized partners.
func (o PartnerAuthorizationResponseOutput) AuthorizedPartnersList() PartnerResponseArrayOutput {
	return o.ApplyT(func(v PartnerAuthorizationResponse) []PartnerResponse { return v.AuthorizedPartnersList }).(PartnerResponseArrayOutput)
}

// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
func (o PartnerAuthorizationResponseOutput) DefaultMaximumExpirationTimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PartnerAuthorizationResponse) *int { return v.DefaultMaximumExpirationTimeInDays }).(pulumi.IntPtrOutput)
}

type PartnerAuthorizationResponsePtrOutput struct{ *pulumi.OutputState }

func (PartnerAuthorizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerAuthorizationResponse)(nil)).Elem()
}

func (o PartnerAuthorizationResponsePtrOutput) ToPartnerAuthorizationResponsePtrOutput() PartnerAuthorizationResponsePtrOutput {
	return o
}

func (o PartnerAuthorizationResponsePtrOutput) ToPartnerAuthorizationResponsePtrOutputWithContext(ctx context.Context) PartnerAuthorizationResponsePtrOutput {
	return o
}

func (o PartnerAuthorizationResponsePtrOutput) Elem() PartnerAuthorizationResponseOutput {
	return o.ApplyT(func(v *PartnerAuthorizationResponse) PartnerAuthorizationResponse {
		if v != nil {
			return *v
		}
		var ret PartnerAuthorizationResponse
		return ret
	}).(PartnerAuthorizationResponseOutput)
}

// The list of authorized partners.
func (o PartnerAuthorizationResponsePtrOutput) AuthorizedPartnersList() PartnerResponseArrayOutput {
	return o.ApplyT(func(v *PartnerAuthorizationResponse) []PartnerResponse {
		if v == nil {
			return nil
		}
		return v.AuthorizedPartnersList
	}).(PartnerResponseArrayOutput)
}

// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
func (o PartnerAuthorizationResponsePtrOutput) DefaultMaximumExpirationTimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PartnerAuthorizationResponse) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMaximumExpirationTimeInDays
	}).(pulumi.IntPtrOutput)
}

type PartnerEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'PartnerDestination'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of a Partner Destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// PartnerEventSubscriptionDestinationInput is an input type that accepts PartnerEventSubscriptionDestinationArgs and PartnerEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `PartnerEventSubscriptionDestinationInput` via:
//
//	PartnerEventSubscriptionDestinationArgs{...}
type PartnerEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToPartnerEventSubscriptionDestinationOutput() PartnerEventSubscriptionDestinationOutput
	ToPartnerEventSubscriptionDestinationOutputWithContext(context.Context) PartnerEventSubscriptionDestinationOutput
}

type PartnerEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'PartnerDestination'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of a Partner Destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (PartnerEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerEventSubscriptionDestination)(nil)).Elem()
}

func (i PartnerEventSubscriptionDestinationArgs) ToPartnerEventSubscriptionDestinationOutput() PartnerEventSubscriptionDestinationOutput {
	return i.ToPartnerEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i PartnerEventSubscriptionDestinationArgs) ToPartnerEventSubscriptionDestinationOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerEventSubscriptionDestinationOutput)
}

func (i PartnerEventSubscriptionDestinationArgs) ToPartnerEventSubscriptionDestinationPtrOutput() PartnerEventSubscriptionDestinationPtrOutput {
	return i.ToPartnerEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i PartnerEventSubscriptionDestinationArgs) ToPartnerEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerEventSubscriptionDestinationOutput).ToPartnerEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// PartnerEventSubscriptionDestinationPtrInput is an input type that accepts PartnerEventSubscriptionDestinationArgs, PartnerEventSubscriptionDestinationPtr and PartnerEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `PartnerEventSubscriptionDestinationPtrInput` via:
//
//	        PartnerEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type PartnerEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToPartnerEventSubscriptionDestinationPtrOutput() PartnerEventSubscriptionDestinationPtrOutput
	ToPartnerEventSubscriptionDestinationPtrOutputWithContext(context.Context) PartnerEventSubscriptionDestinationPtrOutput
}

type partnerEventSubscriptionDestinationPtrType PartnerEventSubscriptionDestinationArgs

func PartnerEventSubscriptionDestinationPtr(v *PartnerEventSubscriptionDestinationArgs) PartnerEventSubscriptionDestinationPtrInput {
	return (*partnerEventSubscriptionDestinationPtrType)(v)
}

func (*partnerEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerEventSubscriptionDestination)(nil)).Elem()
}

func (i *partnerEventSubscriptionDestinationPtrType) ToPartnerEventSubscriptionDestinationPtrOutput() PartnerEventSubscriptionDestinationPtrOutput {
	return i.ToPartnerEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *partnerEventSubscriptionDestinationPtrType) ToPartnerEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerEventSubscriptionDestinationPtrOutput)
}

type PartnerEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (PartnerEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerEventSubscriptionDestination)(nil)).Elem()
}

func (o PartnerEventSubscriptionDestinationOutput) ToPartnerEventSubscriptionDestinationOutput() PartnerEventSubscriptionDestinationOutput {
	return o
}

func (o PartnerEventSubscriptionDestinationOutput) ToPartnerEventSubscriptionDestinationOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationOutput {
	return o
}

func (o PartnerEventSubscriptionDestinationOutput) ToPartnerEventSubscriptionDestinationPtrOutput() PartnerEventSubscriptionDestinationPtrOutput {
	return o.ToPartnerEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o PartnerEventSubscriptionDestinationOutput) ToPartnerEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnerEventSubscriptionDestination) *PartnerEventSubscriptionDestination {
		return &v
	}).(PartnerEventSubscriptionDestinationPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'PartnerDestination'.
func (o PartnerEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v PartnerEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of a Partner Destination of an event subscription.
func (o PartnerEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type PartnerEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (PartnerEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerEventSubscriptionDestination)(nil)).Elem()
}

func (o PartnerEventSubscriptionDestinationPtrOutput) ToPartnerEventSubscriptionDestinationPtrOutput() PartnerEventSubscriptionDestinationPtrOutput {
	return o
}

func (o PartnerEventSubscriptionDestinationPtrOutput) ToPartnerEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationPtrOutput {
	return o
}

func (o PartnerEventSubscriptionDestinationPtrOutput) Elem() PartnerEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *PartnerEventSubscriptionDestination) PartnerEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret PartnerEventSubscriptionDestination
		return ret
	}).(PartnerEventSubscriptionDestinationOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'PartnerDestination'.
func (o PartnerEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of a Partner Destination of an event subscription.
func (o PartnerEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

type PartnerEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'PartnerDestination'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of a Partner Destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

type PartnerEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (PartnerEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o PartnerEventSubscriptionDestinationResponseOutput) ToPartnerEventSubscriptionDestinationResponseOutput() PartnerEventSubscriptionDestinationResponseOutput {
	return o
}

func (o PartnerEventSubscriptionDestinationResponseOutput) ToPartnerEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'PartnerDestination'.
func (o PartnerEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v PartnerEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of a Partner Destination of an event subscription.
func (o PartnerEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type PartnerEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (PartnerEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o PartnerEventSubscriptionDestinationResponsePtrOutput) ToPartnerEventSubscriptionDestinationResponsePtrOutput() PartnerEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o PartnerEventSubscriptionDestinationResponsePtrOutput) ToPartnerEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) PartnerEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o PartnerEventSubscriptionDestinationResponsePtrOutput) Elem() PartnerEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *PartnerEventSubscriptionDestinationResponse) PartnerEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret PartnerEventSubscriptionDestinationResponse
		return ret
	}).(PartnerEventSubscriptionDestinationResponseOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'PartnerDestination'.
func (o PartnerEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of a Partner Destination of an event subscription.
func (o PartnerEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the partner.
type PartnerResponse struct {
	// Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's
	// context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
	// If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
	AuthorizationExpirationTimeInUtc *string `pulumi:"authorizationExpirationTimeInUtc"`
	// The partner name.
	PartnerName *string `pulumi:"partnerName"`
	// The immutableId of the corresponding partner registration.
	PartnerRegistrationImmutableId *string `pulumi:"partnerRegistrationImmutableId"`
}

// Information about the partner.
type PartnerResponseOutput struct{ *pulumi.OutputState }

func (PartnerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerResponse)(nil)).Elem()
}

func (o PartnerResponseOutput) ToPartnerResponseOutput() PartnerResponseOutput {
	return o
}

func (o PartnerResponseOutput) ToPartnerResponseOutputWithContext(ctx context.Context) PartnerResponseOutput {
	return o
}

// Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's
// context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
// If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
func (o PartnerResponseOutput) AuthorizationExpirationTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerResponse) *string { return v.AuthorizationExpirationTimeInUtc }).(pulumi.StringPtrOutput)
}

// The partner name.
func (o PartnerResponseOutput) PartnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerResponse) *string { return v.PartnerName }).(pulumi.StringPtrOutput)
}

// The immutableId of the corresponding partner registration.
func (o PartnerResponseOutput) PartnerRegistrationImmutableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerResponse) *string { return v.PartnerRegistrationImmutableId }).(pulumi.StringPtrOutput)
}

type PartnerResponseArrayOutput struct{ *pulumi.OutputState }

func (PartnerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartnerResponse)(nil)).Elem()
}

func (o PartnerResponseArrayOutput) ToPartnerResponseArrayOutput() PartnerResponseArrayOutput {
	return o
}

func (o PartnerResponseArrayOutput) ToPartnerResponseArrayOutputWithContext(ctx context.Context) PartnerResponseArrayOutput {
	return o
}

func (o PartnerResponseArrayOutput) Index(i pulumi.IntInput) PartnerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartnerResponse {
		return vs[0].([]PartnerResponse)[vs[1].(int)]
	}).(PartnerResponseOutput)
}

// Properties of the corresponding partner topic of a Channel.
type PartnerTopicInfo struct {
	// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
	// created under this Azure subscription.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
	// subscriber to view different types of events that are published.
	EventTypeInfo *EventTypeInfo `pulumi:"eventTypeInfo"`
	// Name of the partner topic associated with the channel.
	Name *string `pulumi:"name"`
	// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
	// created under this resource group.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The source information is provided by the publisher to determine the scope or context from which the events
	// are originating. This information can be used by the subscriber during the approval process of the
	// created partner topic.
	Source *string `pulumi:"source"`
}

// PartnerTopicInfoInput is an input type that accepts PartnerTopicInfoArgs and PartnerTopicInfoOutput values.
// You can construct a concrete instance of `PartnerTopicInfoInput` via:
//
//	PartnerTopicInfoArgs{...}
type PartnerTopicInfoInput interface {
	pulumi.Input

	ToPartnerTopicInfoOutput() PartnerTopicInfoOutput
	ToPartnerTopicInfoOutputWithContext(context.Context) PartnerTopicInfoOutput
}

// Properties of the corresponding partner topic of a Channel.
type PartnerTopicInfoArgs struct {
	// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
	// created under this Azure subscription.
	AzureSubscriptionId pulumi.StringPtrInput `pulumi:"azureSubscriptionId"`
	// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
	// subscriber to view different types of events that are published.
	EventTypeInfo EventTypeInfoPtrInput `pulumi:"eventTypeInfo"`
	// Name of the partner topic associated with the channel.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
	// created under this resource group.
	ResourceGroupName pulumi.StringPtrInput `pulumi:"resourceGroupName"`
	// The source information is provided by the publisher to determine the scope or context from which the events
	// are originating. This information can be used by the subscriber during the approval process of the
	// created partner topic.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (PartnerTopicInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerTopicInfo)(nil)).Elem()
}

func (i PartnerTopicInfoArgs) ToPartnerTopicInfoOutput() PartnerTopicInfoOutput {
	return i.ToPartnerTopicInfoOutputWithContext(context.Background())
}

func (i PartnerTopicInfoArgs) ToPartnerTopicInfoOutputWithContext(ctx context.Context) PartnerTopicInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerTopicInfoOutput)
}

func (i PartnerTopicInfoArgs) ToPartnerTopicInfoPtrOutput() PartnerTopicInfoPtrOutput {
	return i.ToPartnerTopicInfoPtrOutputWithContext(context.Background())
}

func (i PartnerTopicInfoArgs) ToPartnerTopicInfoPtrOutputWithContext(ctx context.Context) PartnerTopicInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerTopicInfoOutput).ToPartnerTopicInfoPtrOutputWithContext(ctx)
}

// PartnerTopicInfoPtrInput is an input type that accepts PartnerTopicInfoArgs, PartnerTopicInfoPtr and PartnerTopicInfoPtrOutput values.
// You can construct a concrete instance of `PartnerTopicInfoPtrInput` via:
//
//	        PartnerTopicInfoArgs{...}
//
//	or:
//
//	        nil
type PartnerTopicInfoPtrInput interface {
	pulumi.Input

	ToPartnerTopicInfoPtrOutput() PartnerTopicInfoPtrOutput
	ToPartnerTopicInfoPtrOutputWithContext(context.Context) PartnerTopicInfoPtrOutput
}

type partnerTopicInfoPtrType PartnerTopicInfoArgs

func PartnerTopicInfoPtr(v *PartnerTopicInfoArgs) PartnerTopicInfoPtrInput {
	return (*partnerTopicInfoPtrType)(v)
}

func (*partnerTopicInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerTopicInfo)(nil)).Elem()
}

func (i *partnerTopicInfoPtrType) ToPartnerTopicInfoPtrOutput() PartnerTopicInfoPtrOutput {
	return i.ToPartnerTopicInfoPtrOutputWithContext(context.Background())
}

func (i *partnerTopicInfoPtrType) ToPartnerTopicInfoPtrOutputWithContext(ctx context.Context) PartnerTopicInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerTopicInfoPtrOutput)
}

// Properties of the corresponding partner topic of a Channel.
type PartnerTopicInfoOutput struct{ *pulumi.OutputState }

func (PartnerTopicInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerTopicInfo)(nil)).Elem()
}

func (o PartnerTopicInfoOutput) ToPartnerTopicInfoOutput() PartnerTopicInfoOutput {
	return o
}

func (o PartnerTopicInfoOutput) ToPartnerTopicInfoOutputWithContext(ctx context.Context) PartnerTopicInfoOutput {
	return o
}

func (o PartnerTopicInfoOutput) ToPartnerTopicInfoPtrOutput() PartnerTopicInfoPtrOutput {
	return o.ToPartnerTopicInfoPtrOutputWithContext(context.Background())
}

func (o PartnerTopicInfoOutput) ToPartnerTopicInfoPtrOutputWithContext(ctx context.Context) PartnerTopicInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnerTopicInfo) *PartnerTopicInfo {
		return &v
	}).(PartnerTopicInfoPtrOutput)
}

// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
// created under this Azure subscription.
func (o PartnerTopicInfoOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfo) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
// subscriber to view different types of events that are published.
func (o PartnerTopicInfoOutput) EventTypeInfo() EventTypeInfoPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfo) *EventTypeInfo { return v.EventTypeInfo }).(EventTypeInfoPtrOutput)
}

// Name of the partner topic associated with the channel.
func (o PartnerTopicInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
// created under this resource group.
func (o PartnerTopicInfoOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfo) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

// The source information is provided by the publisher to determine the scope or context from which the events
// are originating. This information can be used by the subscriber during the approval process of the
// created partner topic.
func (o PartnerTopicInfoOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfo) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type PartnerTopicInfoPtrOutput struct{ *pulumi.OutputState }

func (PartnerTopicInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerTopicInfo)(nil)).Elem()
}

func (o PartnerTopicInfoPtrOutput) ToPartnerTopicInfoPtrOutput() PartnerTopicInfoPtrOutput {
	return o
}

func (o PartnerTopicInfoPtrOutput) ToPartnerTopicInfoPtrOutputWithContext(ctx context.Context) PartnerTopicInfoPtrOutput {
	return o
}

func (o PartnerTopicInfoPtrOutput) Elem() PartnerTopicInfoOutput {
	return o.ApplyT(func(v *PartnerTopicInfo) PartnerTopicInfo {
		if v != nil {
			return *v
		}
		var ret PartnerTopicInfo
		return ret
	}).(PartnerTopicInfoOutput)
}

// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
// created under this Azure subscription.
func (o PartnerTopicInfoPtrOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfo) *string {
		if v == nil {
			return nil
		}
		return v.AzureSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
// subscriber to view different types of events that are published.
func (o PartnerTopicInfoPtrOutput) EventTypeInfo() EventTypeInfoPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfo) *EventTypeInfo {
		if v == nil {
			return nil
		}
		return v.EventTypeInfo
	}).(EventTypeInfoPtrOutput)
}

// Name of the partner topic associated with the channel.
func (o PartnerTopicInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
// created under this resource group.
func (o PartnerTopicInfoPtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfo) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// The source information is provided by the publisher to determine the scope or context from which the events
// are originating. This information can be used by the subscriber during the approval process of the
// created partner topic.
func (o PartnerTopicInfoPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfo) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Properties of the corresponding partner topic of a Channel.
type PartnerTopicInfoResponse struct {
	// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
	// created under this Azure subscription.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
	// subscriber to view different types of events that are published.
	EventTypeInfo *EventTypeInfoResponse `pulumi:"eventTypeInfo"`
	// Name of the partner topic associated with the channel.
	Name *string `pulumi:"name"`
	// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
	// created under this resource group.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The source information is provided by the publisher to determine the scope or context from which the events
	// are originating. This information can be used by the subscriber during the approval process of the
	// created partner topic.
	Source *string `pulumi:"source"`
}

// Properties of the corresponding partner topic of a Channel.
type PartnerTopicInfoResponseOutput struct{ *pulumi.OutputState }

func (PartnerTopicInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerTopicInfoResponse)(nil)).Elem()
}

func (o PartnerTopicInfoResponseOutput) ToPartnerTopicInfoResponseOutput() PartnerTopicInfoResponseOutput {
	return o
}

func (o PartnerTopicInfoResponseOutput) ToPartnerTopicInfoResponseOutputWithContext(ctx context.Context) PartnerTopicInfoResponseOutput {
	return o
}

// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
// created under this Azure subscription.
func (o PartnerTopicInfoResponseOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfoResponse) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
// subscriber to view different types of events that are published.
func (o PartnerTopicInfoResponseOutput) EventTypeInfo() EventTypeInfoResponsePtrOutput {
	return o.ApplyT(func(v PartnerTopicInfoResponse) *EventTypeInfoResponse { return v.EventTypeInfo }).(EventTypeInfoResponsePtrOutput)
}

// Name of the partner topic associated with the channel.
func (o PartnerTopicInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
// created under this resource group.
func (o PartnerTopicInfoResponseOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfoResponse) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

// The source information is provided by the publisher to determine the scope or context from which the events
// are originating. This information can be used by the subscriber during the approval process of the
// created partner topic.
func (o PartnerTopicInfoResponseOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnerTopicInfoResponse) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type PartnerTopicInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PartnerTopicInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerTopicInfoResponse)(nil)).Elem()
}

func (o PartnerTopicInfoResponsePtrOutput) ToPartnerTopicInfoResponsePtrOutput() PartnerTopicInfoResponsePtrOutput {
	return o
}

func (o PartnerTopicInfoResponsePtrOutput) ToPartnerTopicInfoResponsePtrOutputWithContext(ctx context.Context) PartnerTopicInfoResponsePtrOutput {
	return o
}

func (o PartnerTopicInfoResponsePtrOutput) Elem() PartnerTopicInfoResponseOutput {
	return o.ApplyT(func(v *PartnerTopicInfoResponse) PartnerTopicInfoResponse {
		if v != nil {
			return *v
		}
		var ret PartnerTopicInfoResponse
		return ret
	}).(PartnerTopicInfoResponseOutput)
}

// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
// created under this Azure subscription.
func (o PartnerTopicInfoResponsePtrOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
// subscriber to view different types of events that are published.
func (o PartnerTopicInfoResponsePtrOutput) EventTypeInfo() EventTypeInfoResponsePtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfoResponse) *EventTypeInfoResponse {
		if v == nil {
			return nil
		}
		return v.EventTypeInfo
	}).(EventTypeInfoResponsePtrOutput)
}

// Name of the partner topic associated with the channel.
func (o PartnerTopicInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
// created under this resource group.
func (o PartnerTopicInfoResponsePtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// The source information is provided by the publisher to determine the scope or context from which the events
// are originating. This information can be used by the subscriber during the approval process of the
// created partner topic.
func (o PartnerTopicInfoResponsePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerTopicInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// PrivateEndpoint information.
type PrivateEndpoint struct {
	// The ARM identifier for Private Endpoint.
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//	PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// PrivateEndpoint information.
type PrivateEndpointArgs struct {
	// The ARM identifier for Private Endpoint.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//	        PrivateEndpointArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// PrivateEndpoint information.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// The ARM identifier for Private Endpoint.
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint {
		if v != nil {
			return *v
		}
		var ret PrivateEndpoint
		return ret
	}).(PrivateEndpointOutput)
}

// The ARM identifier for Private Endpoint.
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateEndpointConnectionType struct {
	// GroupIds from the private link service resource.
	GroupIds []string `pulumi:"groupIds"`
	// The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpoint `pulumi:"privateEndpoint"`
	// Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionState `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the Private Endpoint Connection.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// PrivateEndpointConnectionTypeInput is an input type that accepts PrivateEndpointConnectionTypeArgs and PrivateEndpointConnectionTypeOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionTypeInput` via:
//
//	PrivateEndpointConnectionTypeArgs{...}
type PrivateEndpointConnectionTypeInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput
	ToPrivateEndpointConnectionTypeOutputWithContext(context.Context) PrivateEndpointConnectionTypeOutput
}

type PrivateEndpointConnectionTypeArgs struct {
	// GroupIds from the private link service resource.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// The Private Endpoint resource for this Connection.
	PrivateEndpoint PrivateEndpointPtrInput `pulumi:"privateEndpoint"`
	// Details about the state of the connection.
	PrivateLinkServiceConnectionState ConnectionStatePtrInput `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the Private Endpoint Connection.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (PrivateEndpointConnectionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionType)(nil)).Elem()
}

func (i PrivateEndpointConnectionTypeArgs) ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput {
	return i.ToPrivateEndpointConnectionTypeOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionTypeArgs) ToPrivateEndpointConnectionTypeOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionTypeOutput)
}

// PrivateEndpointConnectionTypeArrayInput is an input type that accepts PrivateEndpointConnectionTypeArray and PrivateEndpointConnectionTypeArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionTypeArrayInput` via:
//
//	PrivateEndpointConnectionTypeArray{ PrivateEndpointConnectionTypeArgs{...} }
type PrivateEndpointConnectionTypeArrayInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionTypeArrayOutput() PrivateEndpointConnectionTypeArrayOutput
	ToPrivateEndpointConnectionTypeArrayOutputWithContext(context.Context) PrivateEndpointConnectionTypeArrayOutput
}

type PrivateEndpointConnectionTypeArray []PrivateEndpointConnectionTypeInput

func (PrivateEndpointConnectionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionType)(nil)).Elem()
}

func (i PrivateEndpointConnectionTypeArray) ToPrivateEndpointConnectionTypeArrayOutput() PrivateEndpointConnectionTypeArrayOutput {
	return i.ToPrivateEndpointConnectionTypeArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionTypeArray) ToPrivateEndpointConnectionTypeArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionTypeArrayOutput)
}

type PrivateEndpointConnectionTypeOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionType)(nil)).Elem()
}

func (o PrivateEndpointConnectionTypeOutput) ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput {
	return o
}

func (o PrivateEndpointConnectionTypeOutput) ToPrivateEndpointConnectionTypeOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeOutput {
	return o
}

// GroupIds from the private link service resource.
func (o PrivateEndpointConnectionTypeOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionType) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The Private Endpoint resource for this Connection.
func (o PrivateEndpointConnectionTypeOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionType) *PrivateEndpoint { return v.PrivateEndpoint }).(PrivateEndpointPtrOutput)
}

// Details about the state of the connection.
func (o PrivateEndpointConnectionTypeOutput) PrivateLinkServiceConnectionState() ConnectionStatePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionType) *ConnectionState { return v.PrivateLinkServiceConnectionState }).(ConnectionStatePtrOutput)
}

// Provisioning state of the Private Endpoint Connection.
func (o PrivateEndpointConnectionTypeOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionType) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type PrivateEndpointConnectionTypeArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionType)(nil)).Elem()
}

func (o PrivateEndpointConnectionTypeArrayOutput) ToPrivateEndpointConnectionTypeArrayOutput() PrivateEndpointConnectionTypeArrayOutput {
	return o
}

func (o PrivateEndpointConnectionTypeArrayOutput) ToPrivateEndpointConnectionTypeArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeArrayOutput {
	return o
}

func (o PrivateEndpointConnectionTypeArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionType {
		return vs[0].([]PrivateEndpointConnectionType)[vs[1].(int)]
	}).(PrivateEndpointConnectionTypeOutput)
}

type PrivateEndpointConnectionResponse struct {
	// GroupIds from the private link service resource.
	GroupIds []string `pulumi:"groupIds"`
	// Fully qualified identifier of the resource.
	Id string `pulumi:"id"`
	// Name of the resource.
	Name string `pulumi:"name"`
	// The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the Private Endpoint Connection.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Type of the resource.
	Type string `pulumi:"type"`
}

type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// GroupIds from the private link service resource.
func (o PrivateEndpointConnectionResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// Fully qualified identifier of the resource.
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The Private Endpoint resource for this Connection.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// Details about the state of the connection.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() ConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *ConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(ConnectionStateResponsePtrOutput)
}

// Provisioning state of the Private Endpoint Connection.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Type of the resource.
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// PrivateEndpoint information.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint.
	Id *string `pulumi:"id"`
}

// PrivateEndpoint information.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint.
func (o PrivateEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint.
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Properties of the destination info for event subscription supporting push.
type PushInfo struct {
	// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
	// Uses the managed identity setup on the parent resource (namely, namespace) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestinationWithResourceIdentity *DeadLetterWithResourceIdentity `pulumi:"deadLetterDestinationWithResourceIdentity"`
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeliveryWithResourceIdentity *DeliveryWithResourceIdentity `pulumi:"deliveryWithResourceIdentity"`
	// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
	// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
	//     - (n) is replaced by the value of each time element that follows the (n).
	//     - P is the duration (or Period) designator and is always placed at the beginning of the duration.
	//     - Y is the year designator, and it follows the value for the number of years.
	//     - M is the month designator, and it follows the value for the number of months.
	//     - W is the week designator, and it follows the value for the number of weeks.
	//     - D is the day designator, and it follows the value for the number of days.
	//     - T is the time designator, and it precedes the time components.
	//     - H is the hour designator, and it follows the value for the number of hours.
	//     - M is the minute designator, and it follows the value for the number of minutes.
	//     - S is the second designator, and it follows the value for the number of seconds.
	// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
	// by topic’s EventRetentionInDays value. The followings are examples of valid values:
	//     - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
	//     - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
	EventTimeToLive *string `pulumi:"eventTimeToLive"`
	// The maximum delivery count of the events.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
}

// PushInfoInput is an input type that accepts PushInfoArgs and PushInfoOutput values.
// You can construct a concrete instance of `PushInfoInput` via:
//
//	PushInfoArgs{...}
type PushInfoInput interface {
	pulumi.Input

	ToPushInfoOutput() PushInfoOutput
	ToPushInfoOutputWithContext(context.Context) PushInfoOutput
}

// Properties of the destination info for event subscription supporting push.
type PushInfoArgs struct {
	// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
	// Uses the managed identity setup on the parent resource (namely, namespace) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestinationWithResourceIdentity DeadLetterWithResourceIdentityPtrInput `pulumi:"deadLetterDestinationWithResourceIdentity"`
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeliveryWithResourceIdentity DeliveryWithResourceIdentityPtrInput `pulumi:"deliveryWithResourceIdentity"`
	// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
	// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
	//     - (n) is replaced by the value of each time element that follows the (n).
	//     - P is the duration (or Period) designator and is always placed at the beginning of the duration.
	//     - Y is the year designator, and it follows the value for the number of years.
	//     - M is the month designator, and it follows the value for the number of months.
	//     - W is the week designator, and it follows the value for the number of weeks.
	//     - D is the day designator, and it follows the value for the number of days.
	//     - T is the time designator, and it precedes the time components.
	//     - H is the hour designator, and it follows the value for the number of hours.
	//     - M is the minute designator, and it follows the value for the number of minutes.
	//     - S is the second designator, and it follows the value for the number of seconds.
	// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
	// by topic’s EventRetentionInDays value. The followings are examples of valid values:
	//     - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
	//     - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
	EventTimeToLive pulumi.StringPtrInput `pulumi:"eventTimeToLive"`
	// The maximum delivery count of the events.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
}

func (PushInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PushInfo)(nil)).Elem()
}

func (i PushInfoArgs) ToPushInfoOutput() PushInfoOutput {
	return i.ToPushInfoOutputWithContext(context.Background())
}

func (i PushInfoArgs) ToPushInfoOutputWithContext(ctx context.Context) PushInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushInfoOutput)
}

func (i PushInfoArgs) ToPushInfoPtrOutput() PushInfoPtrOutput {
	return i.ToPushInfoPtrOutputWithContext(context.Background())
}

func (i PushInfoArgs) ToPushInfoPtrOutputWithContext(ctx context.Context) PushInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushInfoOutput).ToPushInfoPtrOutputWithContext(ctx)
}

// PushInfoPtrInput is an input type that accepts PushInfoArgs, PushInfoPtr and PushInfoPtrOutput values.
// You can construct a concrete instance of `PushInfoPtrInput` via:
//
//	        PushInfoArgs{...}
//
//	or:
//
//	        nil
type PushInfoPtrInput interface {
	pulumi.Input

	ToPushInfoPtrOutput() PushInfoPtrOutput
	ToPushInfoPtrOutputWithContext(context.Context) PushInfoPtrOutput
}

type pushInfoPtrType PushInfoArgs

func PushInfoPtr(v *PushInfoArgs) PushInfoPtrInput {
	return (*pushInfoPtrType)(v)
}

func (*pushInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PushInfo)(nil)).Elem()
}

func (i *pushInfoPtrType) ToPushInfoPtrOutput() PushInfoPtrOutput {
	return i.ToPushInfoPtrOutputWithContext(context.Background())
}

func (i *pushInfoPtrType) ToPushInfoPtrOutputWithContext(ctx context.Context) PushInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushInfoPtrOutput)
}

// Properties of the destination info for event subscription supporting push.
type PushInfoOutput struct{ *pulumi.OutputState }

func (PushInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushInfo)(nil)).Elem()
}

func (o PushInfoOutput) ToPushInfoOutput() PushInfoOutput {
	return o
}

func (o PushInfoOutput) ToPushInfoOutputWithContext(ctx context.Context) PushInfoOutput {
	return o
}

func (o PushInfoOutput) ToPushInfoPtrOutput() PushInfoPtrOutput {
	return o.ToPushInfoPtrOutputWithContext(context.Background())
}

func (o PushInfoOutput) ToPushInfoPtrOutputWithContext(ctx context.Context) PushInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PushInfo) *PushInfo {
		return &v
	}).(PushInfoPtrOutput)
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, namespace) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityPtrOutput {
	return o.ApplyT(func(v PushInfo) *DeadLetterWithResourceIdentity { return v.DeadLetterDestinationWithResourceIdentity }).(DeadLetterWithResourceIdentityPtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoOutput) DeliveryWithResourceIdentity() DeliveryWithResourceIdentityPtrOutput {
	return o.ApplyT(func(v PushInfo) *DeliveryWithResourceIdentity { return v.DeliveryWithResourceIdentity }).(DeliveryWithResourceIdentityPtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o PushInfoOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushInfo) *string { return v.EventTimeToLive }).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o PushInfoOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PushInfo) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

type PushInfoPtrOutput struct{ *pulumi.OutputState }

func (PushInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushInfo)(nil)).Elem()
}

func (o PushInfoPtrOutput) ToPushInfoPtrOutput() PushInfoPtrOutput {
	return o
}

func (o PushInfoPtrOutput) ToPushInfoPtrOutputWithContext(ctx context.Context) PushInfoPtrOutput {
	return o
}

func (o PushInfoPtrOutput) Elem() PushInfoOutput {
	return o.ApplyT(func(v *PushInfo) PushInfo {
		if v != nil {
			return *v
		}
		var ret PushInfo
		return ret
	}).(PushInfoOutput)
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, namespace) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoPtrOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityPtrOutput {
	return o.ApplyT(func(v *PushInfo) *DeadLetterWithResourceIdentity {
		if v == nil {
			return nil
		}
		return v.DeadLetterDestinationWithResourceIdentity
	}).(DeadLetterWithResourceIdentityPtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoPtrOutput) DeliveryWithResourceIdentity() DeliveryWithResourceIdentityPtrOutput {
	return o.ApplyT(func(v *PushInfo) *DeliveryWithResourceIdentity {
		if v == nil {
			return nil
		}
		return v.DeliveryWithResourceIdentity
	}).(DeliveryWithResourceIdentityPtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o PushInfoPtrOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushInfo) *string {
		if v == nil {
			return nil
		}
		return v.EventTimeToLive
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o PushInfoPtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PushInfo) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Properties of the destination info for event subscription supporting push.
type PushInfoResponse struct {
	// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
	// Uses the managed identity setup on the parent resource (namely, namespace) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestinationWithResourceIdentity *DeadLetterWithResourceIdentityResponse `pulumi:"deadLetterDestinationWithResourceIdentity"`
	// Information about the destination where events have to be delivered for the event subscription.
	// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeliveryWithResourceIdentity *DeliveryWithResourceIdentityResponse `pulumi:"deliveryWithResourceIdentity"`
	// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
	// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
	//     - (n) is replaced by the value of each time element that follows the (n).
	//     - P is the duration (or Period) designator and is always placed at the beginning of the duration.
	//     - Y is the year designator, and it follows the value for the number of years.
	//     - M is the month designator, and it follows the value for the number of months.
	//     - W is the week designator, and it follows the value for the number of weeks.
	//     - D is the day designator, and it follows the value for the number of days.
	//     - T is the time designator, and it precedes the time components.
	//     - H is the hour designator, and it follows the value for the number of hours.
	//     - M is the minute designator, and it follows the value for the number of minutes.
	//     - S is the second designator, and it follows the value for the number of seconds.
	// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
	// by topic’s EventRetentionInDays value. The followings are examples of valid values:
	//     - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
	//     - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
	EventTimeToLive *string `pulumi:"eventTimeToLive"`
	// The maximum delivery count of the events.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
}

// Properties of the destination info for event subscription supporting push.
type PushInfoResponseOutput struct{ *pulumi.OutputState }

func (PushInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushInfoResponse)(nil)).Elem()
}

func (o PushInfoResponseOutput) ToPushInfoResponseOutput() PushInfoResponseOutput {
	return o
}

func (o PushInfoResponseOutput) ToPushInfoResponseOutputWithContext(ctx context.Context) PushInfoResponseOutput {
	return o
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, namespace) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoResponseOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v PushInfoResponse) *DeadLetterWithResourceIdentityResponse {
		return v.DeadLetterDestinationWithResourceIdentity
	}).(DeadLetterWithResourceIdentityResponsePtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoResponseOutput) DeliveryWithResourceIdentity() DeliveryWithResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v PushInfoResponse) *DeliveryWithResourceIdentityResponse { return v.DeliveryWithResourceIdentity }).(DeliveryWithResourceIdentityResponsePtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o PushInfoResponseOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushInfoResponse) *string { return v.EventTimeToLive }).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o PushInfoResponseOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PushInfoResponse) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

type PushInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PushInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushInfoResponse)(nil)).Elem()
}

func (o PushInfoResponsePtrOutput) ToPushInfoResponsePtrOutput() PushInfoResponsePtrOutput {
	return o
}

func (o PushInfoResponsePtrOutput) ToPushInfoResponsePtrOutputWithContext(ctx context.Context) PushInfoResponsePtrOutput {
	return o
}

func (o PushInfoResponsePtrOutput) Elem() PushInfoResponseOutput {
	return o.ApplyT(func(v *PushInfoResponse) PushInfoResponse {
		if v != nil {
			return *v
		}
		var ret PushInfoResponse
		return ret
	}).(PushInfoResponseOutput)
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, namespace) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoResponsePtrOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *PushInfoResponse) *DeadLetterWithResourceIdentityResponse {
		if v == nil {
			return nil
		}
		return v.DeadLetterDestinationWithResourceIdentity
	}).(DeadLetterWithResourceIdentityResponsePtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o PushInfoResponsePtrOutput) DeliveryWithResourceIdentity() DeliveryWithResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *PushInfoResponse) *DeliveryWithResourceIdentityResponse {
		if v == nil {
			return nil
		}
		return v.DeliveryWithResourceIdentity
	}).(DeliveryWithResourceIdentityResponsePtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o PushInfoResponsePtrOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventTimeToLive
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o PushInfoResponsePtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PushInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Properties of the Queue info for event subscription.
type QueueInfo struct {
	// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
	// Uses the managed identity setup on the parent resource (namely, topic) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestinationWithResourceIdentity *DeadLetterWithResourceIdentity `pulumi:"deadLetterDestinationWithResourceIdentity"`
	// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
	// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
	//     - (n) is replaced by the value of each time element that follows the (n).
	//     - P is the duration (or Period) designator and is always placed at the beginning of the duration.
	//     - Y is the year designator, and it follows the value for the number of years.
	//     - M is the month designator, and it follows the value for the number of months.
	//     - W is the week designator, and it follows the value for the number of weeks.
	//     - D is the day designator, and it follows the value for the number of days.
	//     - T is the time designator, and it precedes the time components.
	//     - H is the hour designator, and it follows the value for the number of hours.
	//     - M is the minute designator, and it follows the value for the number of minutes.
	//     - S is the second designator, and it follows the value for the number of seconds.
	// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
	// by topic’s EventRetentionInDays value. The followings are examples of valid values:
	//     - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
	//     - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
	EventTimeToLive *string `pulumi:"eventTimeToLive"`
	// The maximum delivery count of the events.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.
	// If this time elapsed after a message has been received by the client and not transitioned into accepted (not processed), released or rejected,
	// the message is available for redelivery. This is an optional field, where default is 60 seconds, minimum is 60 seconds and maximum is 300 seconds.
	ReceiveLockDurationInSeconds *int `pulumi:"receiveLockDurationInSeconds"`
}

// QueueInfoInput is an input type that accepts QueueInfoArgs and QueueInfoOutput values.
// You can construct a concrete instance of `QueueInfoInput` via:
//
//	QueueInfoArgs{...}
type QueueInfoInput interface {
	pulumi.Input

	ToQueueInfoOutput() QueueInfoOutput
	ToQueueInfoOutputWithContext(context.Context) QueueInfoOutput
}

// Properties of the Queue info for event subscription.
type QueueInfoArgs struct {
	// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
	// Uses the managed identity setup on the parent resource (namely, topic) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestinationWithResourceIdentity DeadLetterWithResourceIdentityPtrInput `pulumi:"deadLetterDestinationWithResourceIdentity"`
	// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
	// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
	//     - (n) is replaced by the value of each time element that follows the (n).
	//     - P is the duration (or Period) designator and is always placed at the beginning of the duration.
	//     - Y is the year designator, and it follows the value for the number of years.
	//     - M is the month designator, and it follows the value for the number of months.
	//     - W is the week designator, and it follows the value for the number of weeks.
	//     - D is the day designator, and it follows the value for the number of days.
	//     - T is the time designator, and it precedes the time components.
	//     - H is the hour designator, and it follows the value for the number of hours.
	//     - M is the minute designator, and it follows the value for the number of minutes.
	//     - S is the second designator, and it follows the value for the number of seconds.
	// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
	// by topic’s EventRetentionInDays value. The followings are examples of valid values:
	//     - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
	//     - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
	EventTimeToLive pulumi.StringPtrInput `pulumi:"eventTimeToLive"`
	// The maximum delivery count of the events.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.
	// If this time elapsed after a message has been received by the client and not transitioned into accepted (not processed), released or rejected,
	// the message is available for redelivery. This is an optional field, where default is 60 seconds, minimum is 60 seconds and maximum is 300 seconds.
	ReceiveLockDurationInSeconds pulumi.IntPtrInput `pulumi:"receiveLockDurationInSeconds"`
}

func (QueueInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueInfo)(nil)).Elem()
}

func (i QueueInfoArgs) ToQueueInfoOutput() QueueInfoOutput {
	return i.ToQueueInfoOutputWithContext(context.Background())
}

func (i QueueInfoArgs) ToQueueInfoOutputWithContext(ctx context.Context) QueueInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueInfoOutput)
}

func (i QueueInfoArgs) ToQueueInfoPtrOutput() QueueInfoPtrOutput {
	return i.ToQueueInfoPtrOutputWithContext(context.Background())
}

func (i QueueInfoArgs) ToQueueInfoPtrOutputWithContext(ctx context.Context) QueueInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueInfoOutput).ToQueueInfoPtrOutputWithContext(ctx)
}

// QueueInfoPtrInput is an input type that accepts QueueInfoArgs, QueueInfoPtr and QueueInfoPtrOutput values.
// You can construct a concrete instance of `QueueInfoPtrInput` via:
//
//	        QueueInfoArgs{...}
//
//	or:
//
//	        nil
type QueueInfoPtrInput interface {
	pulumi.Input

	ToQueueInfoPtrOutput() QueueInfoPtrOutput
	ToQueueInfoPtrOutputWithContext(context.Context) QueueInfoPtrOutput
}

type queueInfoPtrType QueueInfoArgs

func QueueInfoPtr(v *QueueInfoArgs) QueueInfoPtrInput {
	return (*queueInfoPtrType)(v)
}

func (*queueInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueInfo)(nil)).Elem()
}

func (i *queueInfoPtrType) ToQueueInfoPtrOutput() QueueInfoPtrOutput {
	return i.ToQueueInfoPtrOutputWithContext(context.Background())
}

func (i *queueInfoPtrType) ToQueueInfoPtrOutputWithContext(ctx context.Context) QueueInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueInfoPtrOutput)
}

// Properties of the Queue info for event subscription.
type QueueInfoOutput struct{ *pulumi.OutputState }

func (QueueInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueInfo)(nil)).Elem()
}

func (o QueueInfoOutput) ToQueueInfoOutput() QueueInfoOutput {
	return o
}

func (o QueueInfoOutput) ToQueueInfoOutputWithContext(ctx context.Context) QueueInfoOutput {
	return o
}

func (o QueueInfoOutput) ToQueueInfoPtrOutput() QueueInfoPtrOutput {
	return o.ToQueueInfoPtrOutputWithContext(context.Background())
}

func (o QueueInfoOutput) ToQueueInfoPtrOutputWithContext(ctx context.Context) QueueInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueueInfo) *QueueInfo {
		return &v
	}).(QueueInfoPtrOutput)
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, topic) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o QueueInfoOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityPtrOutput {
	return o.ApplyT(func(v QueueInfo) *DeadLetterWithResourceIdentity { return v.DeadLetterDestinationWithResourceIdentity }).(DeadLetterWithResourceIdentityPtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o QueueInfoOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueInfo) *string { return v.EventTimeToLive }).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o QueueInfoOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueInfo) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.
// If this time elapsed after a message has been received by the client and not transitioned into accepted (not processed), released or rejected,
// the message is available for redelivery. This is an optional field, where default is 60 seconds, minimum is 60 seconds and maximum is 300 seconds.
func (o QueueInfoOutput) ReceiveLockDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueInfo) *int { return v.ReceiveLockDurationInSeconds }).(pulumi.IntPtrOutput)
}

type QueueInfoPtrOutput struct{ *pulumi.OutputState }

func (QueueInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueInfo)(nil)).Elem()
}

func (o QueueInfoPtrOutput) ToQueueInfoPtrOutput() QueueInfoPtrOutput {
	return o
}

func (o QueueInfoPtrOutput) ToQueueInfoPtrOutputWithContext(ctx context.Context) QueueInfoPtrOutput {
	return o
}

func (o QueueInfoPtrOutput) Elem() QueueInfoOutput {
	return o.ApplyT(func(v *QueueInfo) QueueInfo {
		if v != nil {
			return *v
		}
		var ret QueueInfo
		return ret
	}).(QueueInfoOutput)
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, topic) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o QueueInfoPtrOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityPtrOutput {
	return o.ApplyT(func(v *QueueInfo) *DeadLetterWithResourceIdentity {
		if v == nil {
			return nil
		}
		return v.DeadLetterDestinationWithResourceIdentity
	}).(DeadLetterWithResourceIdentityPtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o QueueInfoPtrOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueInfo) *string {
		if v == nil {
			return nil
		}
		return v.EventTimeToLive
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o QueueInfoPtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueInfo) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.
// If this time elapsed after a message has been received by the client and not transitioned into accepted (not processed), released or rejected,
// the message is available for redelivery. This is an optional field, where default is 60 seconds, minimum is 60 seconds and maximum is 300 seconds.
func (o QueueInfoPtrOutput) ReceiveLockDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueInfo) *int {
		if v == nil {
			return nil
		}
		return v.ReceiveLockDurationInSeconds
	}).(pulumi.IntPtrOutput)
}

// Properties of the Queue info for event subscription.
type QueueInfoResponse struct {
	// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
	// Uses the managed identity setup on the parent resource (namely, topic) to acquire the authentication tokens being used during delivery / dead-lettering.
	DeadLetterDestinationWithResourceIdentity *DeadLetterWithResourceIdentityResponse `pulumi:"deadLetterDestinationWithResourceIdentity"`
	// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
	// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
	//     - (n) is replaced by the value of each time element that follows the (n).
	//     - P is the duration (or Period) designator and is always placed at the beginning of the duration.
	//     - Y is the year designator, and it follows the value for the number of years.
	//     - M is the month designator, and it follows the value for the number of months.
	//     - W is the week designator, and it follows the value for the number of weeks.
	//     - D is the day designator, and it follows the value for the number of days.
	//     - T is the time designator, and it precedes the time components.
	//     - H is the hour designator, and it follows the value for the number of hours.
	//     - M is the minute designator, and it follows the value for the number of minutes.
	//     - S is the second designator, and it follows the value for the number of seconds.
	// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
	// by topic’s EventRetentionInDays value. The followings are examples of valid values:
	//     - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
	//     - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
	EventTimeToLive *string `pulumi:"eventTimeToLive"`
	// The maximum delivery count of the events.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.
	// If this time elapsed after a message has been received by the client and not transitioned into accepted (not processed), released or rejected,
	// the message is available for redelivery. This is an optional field, where default is 60 seconds, minimum is 60 seconds and maximum is 300 seconds.
	ReceiveLockDurationInSeconds *int `pulumi:"receiveLockDurationInSeconds"`
}

// Properties of the Queue info for event subscription.
type QueueInfoResponseOutput struct{ *pulumi.OutputState }

func (QueueInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueInfoResponse)(nil)).Elem()
}

func (o QueueInfoResponseOutput) ToQueueInfoResponseOutput() QueueInfoResponseOutput {
	return o
}

func (o QueueInfoResponseOutput) ToQueueInfoResponseOutputWithContext(ctx context.Context) QueueInfoResponseOutput {
	return o
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, topic) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o QueueInfoResponseOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v QueueInfoResponse) *DeadLetterWithResourceIdentityResponse {
		return v.DeadLetterDestinationWithResourceIdentity
	}).(DeadLetterWithResourceIdentityResponsePtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o QueueInfoResponseOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueInfoResponse) *string { return v.EventTimeToLive }).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o QueueInfoResponseOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueInfoResponse) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.
// If this time elapsed after a message has been received by the client and not transitioned into accepted (not processed), released or rejected,
// the message is available for redelivery. This is an optional field, where default is 60 seconds, minimum is 60 seconds and maximum is 300 seconds.
func (o QueueInfoResponseOutput) ReceiveLockDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueInfoResponse) *int { return v.ReceiveLockDurationInSeconds }).(pulumi.IntPtrOutput)
}

type QueueInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (QueueInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueInfoResponse)(nil)).Elem()
}

func (o QueueInfoResponsePtrOutput) ToQueueInfoResponsePtrOutput() QueueInfoResponsePtrOutput {
	return o
}

func (o QueueInfoResponsePtrOutput) ToQueueInfoResponsePtrOutputWithContext(ctx context.Context) QueueInfoResponsePtrOutput {
	return o
}

func (o QueueInfoResponsePtrOutput) Elem() QueueInfoResponseOutput {
	return o.ApplyT(func(v *QueueInfoResponse) QueueInfoResponse {
		if v != nil {
			return *v
		}
		var ret QueueInfoResponse
		return ret
	}).(QueueInfoResponseOutput)
}

// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
// Uses the managed identity setup on the parent resource (namely, topic) to acquire the authentication tokens being used during delivery / dead-lettering.
func (o QueueInfoResponsePtrOutput) DeadLetterDestinationWithResourceIdentity() DeadLetterWithResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *QueueInfoResponse) *DeadLetterWithResourceIdentityResponse {
		if v == nil {
			return nil
		}
		return v.DeadLetterDestinationWithResourceIdentity
	}).(DeadLetterWithResourceIdentityResponsePtrOutput)
}

// Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.
// This duration value is expressed using the following format: \'P(n)Y(n)M(n)DT(n)H(n)M(n)S\', where:
//   - (n) is replaced by the value of each time element that follows the (n).
//   - P is the duration (or Period) designator and is always placed at the beginning of the duration.
//   - Y is the year designator, and it follows the value for the number of years.
//   - M is the month designator, and it follows the value for the number of months.
//   - W is the week designator, and it follows the value for the number of weeks.
//   - D is the day designator, and it follows the value for the number of days.
//   - T is the time designator, and it precedes the time components.
//   - H is the hour designator, and it follows the value for the number of hours.
//   - M is the minute designator, and it follows the value for the number of minutes.
//   - S is the second designator, and it follows the value for the number of seconds.
//
// This duration value cannot be set greater than the topic’s EventRetentionInDays. It is is an optional field where its minimum value is 1 minute, and its maximum is determined
// by topic’s EventRetentionInDays value. The followings are examples of valid values:
//   - \'P0DT23H12M\' or \'PT23H12M\': for duration of 23 hours and 12 minutes.
//   - \'P1D\' or \'P1DT0H0M0S\': for duration of 1 day.
func (o QueueInfoResponsePtrOutput) EventTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventTimeToLive
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count of the events.
func (o QueueInfoResponsePtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.
// If this time elapsed after a message has been received by the client and not transitioned into accepted (not processed), released or rejected,
// the message is available for redelivery. This is an optional field, where default is 60 seconds, minimum is 60 seconds and maximum is 300 seconds.
func (o QueueInfoResponsePtrOutput) ReceiveLockDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReceiveLockDurationInSeconds
	}).(pulumi.IntPtrOutput)
}

// The change history of the resource move.
type ResourceMoveChangeHistory struct {
	// Azure subscription ID of the resource.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// UTC timestamp of when the resource was changed.
	ChangedTimeUtc *string `pulumi:"changedTimeUtc"`
	// Azure Resource Group of the resource.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

// ResourceMoveChangeHistoryInput is an input type that accepts ResourceMoveChangeHistoryArgs and ResourceMoveChangeHistoryOutput values.
// You can construct a concrete instance of `ResourceMoveChangeHistoryInput` via:
//
//	ResourceMoveChangeHistoryArgs{...}
type ResourceMoveChangeHistoryInput interface {
	pulumi.Input

	ToResourceMoveChangeHistoryOutput() ResourceMoveChangeHistoryOutput
	ToResourceMoveChangeHistoryOutputWithContext(context.Context) ResourceMoveChangeHistoryOutput
}

// The change history of the resource move.
type ResourceMoveChangeHistoryArgs struct {
	// Azure subscription ID of the resource.
	AzureSubscriptionId pulumi.StringPtrInput `pulumi:"azureSubscriptionId"`
	// UTC timestamp of when the resource was changed.
	ChangedTimeUtc pulumi.StringPtrInput `pulumi:"changedTimeUtc"`
	// Azure Resource Group of the resource.
	ResourceGroupName pulumi.StringPtrInput `pulumi:"resourceGroupName"`
}

func (ResourceMoveChangeHistoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMoveChangeHistory)(nil)).Elem()
}

func (i ResourceMoveChangeHistoryArgs) ToResourceMoveChangeHistoryOutput() ResourceMoveChangeHistoryOutput {
	return i.ToResourceMoveChangeHistoryOutputWithContext(context.Background())
}

func (i ResourceMoveChangeHistoryArgs) ToResourceMoveChangeHistoryOutputWithContext(ctx context.Context) ResourceMoveChangeHistoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMoveChangeHistoryOutput)
}

// ResourceMoveChangeHistoryArrayInput is an input type that accepts ResourceMoveChangeHistoryArray and ResourceMoveChangeHistoryArrayOutput values.
// You can construct a concrete instance of `ResourceMoveChangeHistoryArrayInput` via:
//
//	ResourceMoveChangeHistoryArray{ ResourceMoveChangeHistoryArgs{...} }
type ResourceMoveChangeHistoryArrayInput interface {
	pulumi.Input

	ToResourceMoveChangeHistoryArrayOutput() ResourceMoveChangeHistoryArrayOutput
	ToResourceMoveChangeHistoryArrayOutputWithContext(context.Context) ResourceMoveChangeHistoryArrayOutput
}

type ResourceMoveChangeHistoryArray []ResourceMoveChangeHistoryInput

func (ResourceMoveChangeHistoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMoveChangeHistory)(nil)).Elem()
}

func (i ResourceMoveChangeHistoryArray) ToResourceMoveChangeHistoryArrayOutput() ResourceMoveChangeHistoryArrayOutput {
	return i.ToResourceMoveChangeHistoryArrayOutputWithContext(context.Background())
}

func (i ResourceMoveChangeHistoryArray) ToResourceMoveChangeHistoryArrayOutputWithContext(ctx context.Context) ResourceMoveChangeHistoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMoveChangeHistoryArrayOutput)
}

// The change history of the resource move.
type ResourceMoveChangeHistoryOutput struct{ *pulumi.OutputState }

func (ResourceMoveChangeHistoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMoveChangeHistory)(nil)).Elem()
}

func (o ResourceMoveChangeHistoryOutput) ToResourceMoveChangeHistoryOutput() ResourceMoveChangeHistoryOutput {
	return o
}

func (o ResourceMoveChangeHistoryOutput) ToResourceMoveChangeHistoryOutputWithContext(ctx context.Context) ResourceMoveChangeHistoryOutput {
	return o
}

// Azure subscription ID of the resource.
func (o ResourceMoveChangeHistoryOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveChangeHistory) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// UTC timestamp of when the resource was changed.
func (o ResourceMoveChangeHistoryOutput) ChangedTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveChangeHistory) *string { return v.ChangedTimeUtc }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the resource.
func (o ResourceMoveChangeHistoryOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveChangeHistory) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

type ResourceMoveChangeHistoryArrayOutput struct{ *pulumi.OutputState }

func (ResourceMoveChangeHistoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMoveChangeHistory)(nil)).Elem()
}

func (o ResourceMoveChangeHistoryArrayOutput) ToResourceMoveChangeHistoryArrayOutput() ResourceMoveChangeHistoryArrayOutput {
	return o
}

func (o ResourceMoveChangeHistoryArrayOutput) ToResourceMoveChangeHistoryArrayOutputWithContext(ctx context.Context) ResourceMoveChangeHistoryArrayOutput {
	return o
}

func (o ResourceMoveChangeHistoryArrayOutput) Index(i pulumi.IntInput) ResourceMoveChangeHistoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceMoveChangeHistory {
		return vs[0].([]ResourceMoveChangeHistory)[vs[1].(int)]
	}).(ResourceMoveChangeHistoryOutput)
}

// The change history of the resource move.
type ResourceMoveChangeHistoryResponse struct {
	// Azure subscription ID of the resource.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// UTC timestamp of when the resource was changed.
	ChangedTimeUtc *string `pulumi:"changedTimeUtc"`
	// Azure Resource Group of the resource.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

// The change history of the resource move.
type ResourceMoveChangeHistoryResponseOutput struct{ *pulumi.OutputState }

func (ResourceMoveChangeHistoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMoveChangeHistoryResponse)(nil)).Elem()
}

func (o ResourceMoveChangeHistoryResponseOutput) ToResourceMoveChangeHistoryResponseOutput() ResourceMoveChangeHistoryResponseOutput {
	return o
}

func (o ResourceMoveChangeHistoryResponseOutput) ToResourceMoveChangeHistoryResponseOutputWithContext(ctx context.Context) ResourceMoveChangeHistoryResponseOutput {
	return o
}

// Azure subscription ID of the resource.
func (o ResourceMoveChangeHistoryResponseOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveChangeHistoryResponse) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// UTC timestamp of when the resource was changed.
func (o ResourceMoveChangeHistoryResponseOutput) ChangedTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveChangeHistoryResponse) *string { return v.ChangedTimeUtc }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the resource.
func (o ResourceMoveChangeHistoryResponseOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveChangeHistoryResponse) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

type ResourceMoveChangeHistoryResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceMoveChangeHistoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMoveChangeHistoryResponse)(nil)).Elem()
}

func (o ResourceMoveChangeHistoryResponseArrayOutput) ToResourceMoveChangeHistoryResponseArrayOutput() ResourceMoveChangeHistoryResponseArrayOutput {
	return o
}

func (o ResourceMoveChangeHistoryResponseArrayOutput) ToResourceMoveChangeHistoryResponseArrayOutputWithContext(ctx context.Context) ResourceMoveChangeHistoryResponseArrayOutput {
	return o
}

func (o ResourceMoveChangeHistoryResponseArrayOutput) Index(i pulumi.IntInput) ResourceMoveChangeHistoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceMoveChangeHistoryResponse {
		return vs[0].([]ResourceMoveChangeHistoryResponse)[vs[1].(int)]
	}).(ResourceMoveChangeHistoryResponseOutput)
}

// Describes an EventGrid Resource Sku.
type ResourceSku struct {
	// The Sku name of the resource. The possible values are: Basic or Premium.
	Name *string `pulumi:"name"`
}

// Defaults sets the appropriate defaults for ResourceSku
func (val *ResourceSku) Defaults() *ResourceSku {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		name_ := "Basic"
		tmp.Name = &name_
	}
	return &tmp
}

// ResourceSkuInput is an input type that accepts ResourceSkuArgs and ResourceSkuOutput values.
// You can construct a concrete instance of `ResourceSkuInput` via:
//
//	ResourceSkuArgs{...}
type ResourceSkuInput interface {
	pulumi.Input

	ToResourceSkuOutput() ResourceSkuOutput
	ToResourceSkuOutputWithContext(context.Context) ResourceSkuOutput
}

// Describes an EventGrid Resource Sku.
type ResourceSkuArgs struct {
	// The Sku name of the resource. The possible values are: Basic or Premium.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

// Defaults sets the appropriate defaults for ResourceSkuArgs
func (val *ResourceSkuArgs) Defaults() *ResourceSkuArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		tmp.Name = pulumi.StringPtr("Basic")
	}
	return &tmp
}
func (ResourceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (i ResourceSkuArgs) ToResourceSkuOutput() ResourceSkuOutput {
	return i.ToResourceSkuOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput)
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput).ToResourceSkuPtrOutputWithContext(ctx)
}

// ResourceSkuPtrInput is an input type that accepts ResourceSkuArgs, ResourceSkuPtr and ResourceSkuPtrOutput values.
// You can construct a concrete instance of `ResourceSkuPtrInput` via:
//
//	        ResourceSkuArgs{...}
//
//	or:
//
//	        nil
type ResourceSkuPtrInput interface {
	pulumi.Input

	ToResourceSkuPtrOutput() ResourceSkuPtrOutput
	ToResourceSkuPtrOutputWithContext(context.Context) ResourceSkuPtrOutput
}

type resourceSkuPtrType ResourceSkuArgs

func ResourceSkuPtr(v *ResourceSkuArgs) ResourceSkuPtrInput {
	return (*resourceSkuPtrType)(v)
}

func (*resourceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuPtrOutput)
}

// Describes an EventGrid Resource Sku.
type ResourceSkuOutput struct{ *pulumi.OutputState }

func (ResourceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (o ResourceSkuOutput) ToResourceSkuOutput() ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSku) *ResourceSku {
		return &v
	}).(ResourceSkuPtrOutput)
}

// The Sku name of the resource. The possible values are: Basic or Premium.
func (o ResourceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceSkuPtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) Elem() ResourceSkuOutput {
	return o.ApplyT(func(v *ResourceSku) ResourceSku {
		if v != nil {
			return *v
		}
		var ret ResourceSku
		return ret
	}).(ResourceSkuOutput)
}

// The Sku name of the resource. The possible values are: Basic or Premium.
func (o ResourceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Describes an EventGrid Resource Sku.
type ResourceSkuResponse struct {
	// The Sku name of the resource. The possible values are: Basic or Premium.
	Name *string `pulumi:"name"`
}

// Defaults sets the appropriate defaults for ResourceSkuResponse
func (val *ResourceSkuResponse) Defaults() *ResourceSkuResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		name_ := "Basic"
		tmp.Name = &name_
	}
	return &tmp
}

// Describes an EventGrid Resource Sku.
type ResourceSkuResponseOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutput() ResourceSkuResponseOutput {
	return o
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutputWithContext(ctx context.Context) ResourceSkuResponseOutput {
	return o
}

// The Sku name of the resource. The possible values are: Basic or Premium.
func (o ResourceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutputWithContext(ctx context.Context) ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) Elem() ResourceSkuResponseOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) ResourceSkuResponse {
		if v != nil {
			return *v
		}
		var ret ResourceSkuResponse
		return ret
	}).(ResourceSkuResponseOutput)
}

// The Sku name of the resource. The possible values are: Basic or Premium.
func (o ResourceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicy struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// Defaults sets the appropriate defaults for RetryPolicy
func (val *RetryPolicy) Defaults() *RetryPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EventTimeToLiveInMinutes == nil {
		eventTimeToLiveInMinutes_ := 1440
		tmp.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes_
	}
	if tmp.MaxDeliveryAttempts == nil {
		maxDeliveryAttempts_ := 30
		tmp.MaxDeliveryAttempts = &maxDeliveryAttempts_
	}
	return &tmp
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//	RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Information about the retry policy for an event subscription.
type RetryPolicyArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

// Defaults sets the appropriate defaults for RetryPolicyArgs
func (val *RetryPolicyArgs) Defaults() *RetryPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EventTimeToLiveInMinutes == nil {
		tmp.EventTimeToLiveInMinutes = pulumi.IntPtr(1440)
	}
	if tmp.MaxDeliveryAttempts == nil {
		tmp.MaxDeliveryAttempts = pulumi.IntPtr(30)
	}
	return &tmp
}
func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//	        RetryPolicyArgs{...}
//
//	or:
//
//	        nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicyOutput struct{ *pulumi.OutputState }

func (RetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyOutput) ToRetryPolicyOutput() RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetryPolicy) *RetryPolicy {
		return &v
	}).(RetryPolicyPtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) Elem() RetryPolicyOutput {
	return o.ApplyT(func(v *RetryPolicy) RetryPolicy {
		if v != nil {
			return *v
		}
		var ret RetryPolicy
		return ret
	}).(RetryPolicyOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyPtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicyResponse struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// Defaults sets the appropriate defaults for RetryPolicyResponse
func (val *RetryPolicyResponse) Defaults() *RetryPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EventTimeToLiveInMinutes == nil {
		eventTimeToLiveInMinutes_ := 1440
		tmp.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes_
	}
	if tmp.MaxDeliveryAttempts == nil {
		maxDeliveryAttempts_ := 30
		tmp.MaxDeliveryAttempts = &maxDeliveryAttempts_
	}
	return &tmp
}

// Information about the retry policy for an event subscription.
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponseOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponseOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RetryPolicyResponse
		return ret
	}).(RetryPolicyResponseOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponsePtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponsePtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

type RoutingEnrichments struct {
	Dynamic []DynamicRoutingEnrichment      `pulumi:"dynamic"`
	Static  []StaticStringRoutingEnrichment `pulumi:"static"`
}

// RoutingEnrichmentsInput is an input type that accepts RoutingEnrichmentsArgs and RoutingEnrichmentsOutput values.
// You can construct a concrete instance of `RoutingEnrichmentsInput` via:
//
//	RoutingEnrichmentsArgs{...}
type RoutingEnrichmentsInput interface {
	pulumi.Input

	ToRoutingEnrichmentsOutput() RoutingEnrichmentsOutput
	ToRoutingEnrichmentsOutputWithContext(context.Context) RoutingEnrichmentsOutput
}

type RoutingEnrichmentsArgs struct {
	Dynamic DynamicRoutingEnrichmentArrayInput      `pulumi:"dynamic"`
	Static  StaticStringRoutingEnrichmentArrayInput `pulumi:"static"`
}

func (RoutingEnrichmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingEnrichments)(nil)).Elem()
}

func (i RoutingEnrichmentsArgs) ToRoutingEnrichmentsOutput() RoutingEnrichmentsOutput {
	return i.ToRoutingEnrichmentsOutputWithContext(context.Background())
}

func (i RoutingEnrichmentsArgs) ToRoutingEnrichmentsOutputWithContext(ctx context.Context) RoutingEnrichmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingEnrichmentsOutput)
}

func (i RoutingEnrichmentsArgs) ToRoutingEnrichmentsPtrOutput() RoutingEnrichmentsPtrOutput {
	return i.ToRoutingEnrichmentsPtrOutputWithContext(context.Background())
}

func (i RoutingEnrichmentsArgs) ToRoutingEnrichmentsPtrOutputWithContext(ctx context.Context) RoutingEnrichmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingEnrichmentsOutput).ToRoutingEnrichmentsPtrOutputWithContext(ctx)
}

// RoutingEnrichmentsPtrInput is an input type that accepts RoutingEnrichmentsArgs, RoutingEnrichmentsPtr and RoutingEnrichmentsPtrOutput values.
// You can construct a concrete instance of `RoutingEnrichmentsPtrInput` via:
//
//	        RoutingEnrichmentsArgs{...}
//
//	or:
//
//	        nil
type RoutingEnrichmentsPtrInput interface {
	pulumi.Input

	ToRoutingEnrichmentsPtrOutput() RoutingEnrichmentsPtrOutput
	ToRoutingEnrichmentsPtrOutputWithContext(context.Context) RoutingEnrichmentsPtrOutput
}

type routingEnrichmentsPtrType RoutingEnrichmentsArgs

func RoutingEnrichmentsPtr(v *RoutingEnrichmentsArgs) RoutingEnrichmentsPtrInput {
	return (*routingEnrichmentsPtrType)(v)
}

func (*routingEnrichmentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingEnrichments)(nil)).Elem()
}

func (i *routingEnrichmentsPtrType) ToRoutingEnrichmentsPtrOutput() RoutingEnrichmentsPtrOutput {
	return i.ToRoutingEnrichmentsPtrOutputWithContext(context.Background())
}

func (i *routingEnrichmentsPtrType) ToRoutingEnrichmentsPtrOutputWithContext(ctx context.Context) RoutingEnrichmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingEnrichmentsPtrOutput)
}

type RoutingEnrichmentsOutput struct{ *pulumi.OutputState }

func (RoutingEnrichmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingEnrichments)(nil)).Elem()
}

func (o RoutingEnrichmentsOutput) ToRoutingEnrichmentsOutput() RoutingEnrichmentsOutput {
	return o
}

func (o RoutingEnrichmentsOutput) ToRoutingEnrichmentsOutputWithContext(ctx context.Context) RoutingEnrichmentsOutput {
	return o
}

func (o RoutingEnrichmentsOutput) ToRoutingEnrichmentsPtrOutput() RoutingEnrichmentsPtrOutput {
	return o.ToRoutingEnrichmentsPtrOutputWithContext(context.Background())
}

func (o RoutingEnrichmentsOutput) ToRoutingEnrichmentsPtrOutputWithContext(ctx context.Context) RoutingEnrichmentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutingEnrichments) *RoutingEnrichments {
		return &v
	}).(RoutingEnrichmentsPtrOutput)
}

func (o RoutingEnrichmentsOutput) Dynamic() DynamicRoutingEnrichmentArrayOutput {
	return o.ApplyT(func(v RoutingEnrichments) []DynamicRoutingEnrichment { return v.Dynamic }).(DynamicRoutingEnrichmentArrayOutput)
}

func (o RoutingEnrichmentsOutput) Static() StaticStringRoutingEnrichmentArrayOutput {
	return o.ApplyT(func(v RoutingEnrichments) []StaticStringRoutingEnrichment { return v.Static }).(StaticStringRoutingEnrichmentArrayOutput)
}

type RoutingEnrichmentsPtrOutput struct{ *pulumi.OutputState }

func (RoutingEnrichmentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingEnrichments)(nil)).Elem()
}

func (o RoutingEnrichmentsPtrOutput) ToRoutingEnrichmentsPtrOutput() RoutingEnrichmentsPtrOutput {
	return o
}

func (o RoutingEnrichmentsPtrOutput) ToRoutingEnrichmentsPtrOutputWithContext(ctx context.Context) RoutingEnrichmentsPtrOutput {
	return o
}

func (o RoutingEnrichmentsPtrOutput) Elem() RoutingEnrichmentsOutput {
	return o.ApplyT(func(v *RoutingEnrichments) RoutingEnrichments {
		if v != nil {
			return *v
		}
		var ret RoutingEnrichments
		return ret
	}).(RoutingEnrichmentsOutput)
}

func (o RoutingEnrichmentsPtrOutput) Dynamic() DynamicRoutingEnrichmentArrayOutput {
	return o.ApplyT(func(v *RoutingEnrichments) []DynamicRoutingEnrichment {
		if v == nil {
			return nil
		}
		return v.Dynamic
	}).(DynamicRoutingEnrichmentArrayOutput)
}

func (o RoutingEnrichmentsPtrOutput) Static() StaticStringRoutingEnrichmentArrayOutput {
	return o.ApplyT(func(v *RoutingEnrichments) []StaticStringRoutingEnrichment {
		if v == nil {
			return nil
		}
		return v.Static
	}).(StaticStringRoutingEnrichmentArrayOutput)
}

type RoutingEnrichmentsResponse struct {
	Dynamic []DynamicRoutingEnrichmentResponse      `pulumi:"dynamic"`
	Static  []StaticStringRoutingEnrichmentResponse `pulumi:"static"`
}

type RoutingEnrichmentsResponseOutput struct{ *pulumi.OutputState }

func (RoutingEnrichmentsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingEnrichmentsResponse)(nil)).Elem()
}

func (o RoutingEnrichmentsResponseOutput) ToRoutingEnrichmentsResponseOutput() RoutingEnrichmentsResponseOutput {
	return o
}

func (o RoutingEnrichmentsResponseOutput) ToRoutingEnrichmentsResponseOutputWithContext(ctx context.Context) RoutingEnrichmentsResponseOutput {
	return o
}

func (o RoutingEnrichmentsResponseOutput) Dynamic() DynamicRoutingEnrichmentResponseArrayOutput {
	return o.ApplyT(func(v RoutingEnrichmentsResponse) []DynamicRoutingEnrichmentResponse { return v.Dynamic }).(DynamicRoutingEnrichmentResponseArrayOutput)
}

func (o RoutingEnrichmentsResponseOutput) Static() StaticStringRoutingEnrichmentResponseArrayOutput {
	return o.ApplyT(func(v RoutingEnrichmentsResponse) []StaticStringRoutingEnrichmentResponse { return v.Static }).(StaticStringRoutingEnrichmentResponseArrayOutput)
}

type RoutingEnrichmentsResponsePtrOutput struct{ *pulumi.OutputState }

func (RoutingEnrichmentsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingEnrichmentsResponse)(nil)).Elem()
}

func (o RoutingEnrichmentsResponsePtrOutput) ToRoutingEnrichmentsResponsePtrOutput() RoutingEnrichmentsResponsePtrOutput {
	return o
}

func (o RoutingEnrichmentsResponsePtrOutput) ToRoutingEnrichmentsResponsePtrOutputWithContext(ctx context.Context) RoutingEnrichmentsResponsePtrOutput {
	return o
}

func (o RoutingEnrichmentsResponsePtrOutput) Elem() RoutingEnrichmentsResponseOutput {
	return o.ApplyT(func(v *RoutingEnrichmentsResponse) RoutingEnrichmentsResponse {
		if v != nil {
			return *v
		}
		var ret RoutingEnrichmentsResponse
		return ret
	}).(RoutingEnrichmentsResponseOutput)
}

func (o RoutingEnrichmentsResponsePtrOutput) Dynamic() DynamicRoutingEnrichmentResponseArrayOutput {
	return o.ApplyT(func(v *RoutingEnrichmentsResponse) []DynamicRoutingEnrichmentResponse {
		if v == nil {
			return nil
		}
		return v.Dynamic
	}).(DynamicRoutingEnrichmentResponseArrayOutput)
}

func (o RoutingEnrichmentsResponsePtrOutput) Static() StaticStringRoutingEnrichmentResponseArrayOutput {
	return o.ApplyT(func(v *RoutingEnrichmentsResponse) []StaticStringRoutingEnrichmentResponse {
		if v == nil {
			return nil
		}
		return v.Static
	}).(StaticStringRoutingEnrichmentResponseArrayOutput)
}

// Routing identity info for topic spaces configuration.
type RoutingIdentityInfo struct {
	Type                 *string `pulumi:"type"`
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// RoutingIdentityInfoInput is an input type that accepts RoutingIdentityInfoArgs and RoutingIdentityInfoOutput values.
// You can construct a concrete instance of `RoutingIdentityInfoInput` via:
//
//	RoutingIdentityInfoArgs{...}
type RoutingIdentityInfoInput interface {
	pulumi.Input

	ToRoutingIdentityInfoOutput() RoutingIdentityInfoOutput
	ToRoutingIdentityInfoOutputWithContext(context.Context) RoutingIdentityInfoOutput
}

// Routing identity info for topic spaces configuration.
type RoutingIdentityInfoArgs struct {
	Type                 pulumi.StringPtrInput `pulumi:"type"`
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (RoutingIdentityInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingIdentityInfo)(nil)).Elem()
}

func (i RoutingIdentityInfoArgs) ToRoutingIdentityInfoOutput() RoutingIdentityInfoOutput {
	return i.ToRoutingIdentityInfoOutputWithContext(context.Background())
}

func (i RoutingIdentityInfoArgs) ToRoutingIdentityInfoOutputWithContext(ctx context.Context) RoutingIdentityInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingIdentityInfoOutput)
}

func (i RoutingIdentityInfoArgs) ToRoutingIdentityInfoPtrOutput() RoutingIdentityInfoPtrOutput {
	return i.ToRoutingIdentityInfoPtrOutputWithContext(context.Background())
}

func (i RoutingIdentityInfoArgs) ToRoutingIdentityInfoPtrOutputWithContext(ctx context.Context) RoutingIdentityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingIdentityInfoOutput).ToRoutingIdentityInfoPtrOutputWithContext(ctx)
}

// RoutingIdentityInfoPtrInput is an input type that accepts RoutingIdentityInfoArgs, RoutingIdentityInfoPtr and RoutingIdentityInfoPtrOutput values.
// You can construct a concrete instance of `RoutingIdentityInfoPtrInput` via:
//
//	        RoutingIdentityInfoArgs{...}
//
//	or:
//
//	        nil
type RoutingIdentityInfoPtrInput interface {
	pulumi.Input

	ToRoutingIdentityInfoPtrOutput() RoutingIdentityInfoPtrOutput
	ToRoutingIdentityInfoPtrOutputWithContext(context.Context) RoutingIdentityInfoPtrOutput
}

type routingIdentityInfoPtrType RoutingIdentityInfoArgs

func RoutingIdentityInfoPtr(v *RoutingIdentityInfoArgs) RoutingIdentityInfoPtrInput {
	return (*routingIdentityInfoPtrType)(v)
}

func (*routingIdentityInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingIdentityInfo)(nil)).Elem()
}

func (i *routingIdentityInfoPtrType) ToRoutingIdentityInfoPtrOutput() RoutingIdentityInfoPtrOutput {
	return i.ToRoutingIdentityInfoPtrOutputWithContext(context.Background())
}

func (i *routingIdentityInfoPtrType) ToRoutingIdentityInfoPtrOutputWithContext(ctx context.Context) RoutingIdentityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingIdentityInfoPtrOutput)
}

// Routing identity info for topic spaces configuration.
type RoutingIdentityInfoOutput struct{ *pulumi.OutputState }

func (RoutingIdentityInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingIdentityInfo)(nil)).Elem()
}

func (o RoutingIdentityInfoOutput) ToRoutingIdentityInfoOutput() RoutingIdentityInfoOutput {
	return o
}

func (o RoutingIdentityInfoOutput) ToRoutingIdentityInfoOutputWithContext(ctx context.Context) RoutingIdentityInfoOutput {
	return o
}

func (o RoutingIdentityInfoOutput) ToRoutingIdentityInfoPtrOutput() RoutingIdentityInfoPtrOutput {
	return o.ToRoutingIdentityInfoPtrOutputWithContext(context.Background())
}

func (o RoutingIdentityInfoOutput) ToRoutingIdentityInfoPtrOutputWithContext(ctx context.Context) RoutingIdentityInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutingIdentityInfo) *RoutingIdentityInfo {
		return &v
	}).(RoutingIdentityInfoPtrOutput)
}

func (o RoutingIdentityInfoOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingIdentityInfo) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o RoutingIdentityInfoOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingIdentityInfo) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type RoutingIdentityInfoPtrOutput struct{ *pulumi.OutputState }

func (RoutingIdentityInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingIdentityInfo)(nil)).Elem()
}

func (o RoutingIdentityInfoPtrOutput) ToRoutingIdentityInfoPtrOutput() RoutingIdentityInfoPtrOutput {
	return o
}

func (o RoutingIdentityInfoPtrOutput) ToRoutingIdentityInfoPtrOutputWithContext(ctx context.Context) RoutingIdentityInfoPtrOutput {
	return o
}

func (o RoutingIdentityInfoPtrOutput) Elem() RoutingIdentityInfoOutput {
	return o.ApplyT(func(v *RoutingIdentityInfo) RoutingIdentityInfo {
		if v != nil {
			return *v
		}
		var ret RoutingIdentityInfo
		return ret
	}).(RoutingIdentityInfoOutput)
}

func (o RoutingIdentityInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingIdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func (o RoutingIdentityInfoPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingIdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Routing identity info for topic spaces configuration.
type RoutingIdentityInfoResponse struct {
	Type                 *string `pulumi:"type"`
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Routing identity info for topic spaces configuration.
type RoutingIdentityInfoResponseOutput struct{ *pulumi.OutputState }

func (RoutingIdentityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingIdentityInfoResponse)(nil)).Elem()
}

func (o RoutingIdentityInfoResponseOutput) ToRoutingIdentityInfoResponseOutput() RoutingIdentityInfoResponseOutput {
	return o
}

func (o RoutingIdentityInfoResponseOutput) ToRoutingIdentityInfoResponseOutputWithContext(ctx context.Context) RoutingIdentityInfoResponseOutput {
	return o
}

func (o RoutingIdentityInfoResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingIdentityInfoResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o RoutingIdentityInfoResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingIdentityInfoResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type RoutingIdentityInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (RoutingIdentityInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingIdentityInfoResponse)(nil)).Elem()
}

func (o RoutingIdentityInfoResponsePtrOutput) ToRoutingIdentityInfoResponsePtrOutput() RoutingIdentityInfoResponsePtrOutput {
	return o
}

func (o RoutingIdentityInfoResponsePtrOutput) ToRoutingIdentityInfoResponsePtrOutputWithContext(ctx context.Context) RoutingIdentityInfoResponsePtrOutput {
	return o
}

func (o RoutingIdentityInfoResponsePtrOutput) Elem() RoutingIdentityInfoResponseOutput {
	return o.ApplyT(func(v *RoutingIdentityInfoResponse) RoutingIdentityInfoResponse {
		if v != nil {
			return *v
		}
		var ret RoutingIdentityInfoResponse
		return ret
	}).(RoutingIdentityInfoResponseOutput)
}

func (o RoutingIdentityInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingIdentityInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func (o RoutingIdentityInfoResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingIdentityInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestination struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'ServiceBusQueue'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// ServiceBusQueueEventSubscriptionDestinationInput is an input type that accepts ServiceBusQueueEventSubscriptionDestinationArgs and ServiceBusQueueEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `ServiceBusQueueEventSubscriptionDestinationInput` via:
//
//	ServiceBusQueueEventSubscriptionDestinationArgs{...}
type ServiceBusQueueEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToServiceBusQueueEventSubscriptionDestinationOutput() ServiceBusQueueEventSubscriptionDestinationOutput
	ToServiceBusQueueEventSubscriptionDestinationOutputWithContext(context.Context) ServiceBusQueueEventSubscriptionDestinationOutput
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestinationArgs struct {
	// Delivery attribute details.
	DeliveryAttributeMappings pulumi.ArrayInput `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'ServiceBusQueue'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ServiceBusQueueEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueEventSubscriptionDestination)(nil)).Elem()
}

func (i ServiceBusQueueEventSubscriptionDestinationArgs) ToServiceBusQueueEventSubscriptionDestinationOutput() ServiceBusQueueEventSubscriptionDestinationOutput {
	return i.ToServiceBusQueueEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i ServiceBusQueueEventSubscriptionDestinationArgs) ToServiceBusQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusQueueEventSubscriptionDestinationOutput)
}

func (i ServiceBusQueueEventSubscriptionDestinationArgs) ToServiceBusQueueEventSubscriptionDestinationPtrOutput() ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return i.ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i ServiceBusQueueEventSubscriptionDestinationArgs) ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusQueueEventSubscriptionDestinationOutput).ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// ServiceBusQueueEventSubscriptionDestinationPtrInput is an input type that accepts ServiceBusQueueEventSubscriptionDestinationArgs, ServiceBusQueueEventSubscriptionDestinationPtr and ServiceBusQueueEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `ServiceBusQueueEventSubscriptionDestinationPtrInput` via:
//
//	        ServiceBusQueueEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type ServiceBusQueueEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToServiceBusQueueEventSubscriptionDestinationPtrOutput() ServiceBusQueueEventSubscriptionDestinationPtrOutput
	ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(context.Context) ServiceBusQueueEventSubscriptionDestinationPtrOutput
}

type serviceBusQueueEventSubscriptionDestinationPtrType ServiceBusQueueEventSubscriptionDestinationArgs

func ServiceBusQueueEventSubscriptionDestinationPtr(v *ServiceBusQueueEventSubscriptionDestinationArgs) ServiceBusQueueEventSubscriptionDestinationPtrInput {
	return (*serviceBusQueueEventSubscriptionDestinationPtrType)(v)
}

func (*serviceBusQueueEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusQueueEventSubscriptionDestination)(nil)).Elem()
}

func (i *serviceBusQueueEventSubscriptionDestinationPtrType) ToServiceBusQueueEventSubscriptionDestinationPtrOutput() ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return i.ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *serviceBusQueueEventSubscriptionDestinationPtrType) ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusQueueEventSubscriptionDestinationPtrOutput)
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueEventSubscriptionDestination)(nil)).Elem()
}

func (o ServiceBusQueueEventSubscriptionDestinationOutput) ToServiceBusQueueEventSubscriptionDestinationOutput() ServiceBusQueueEventSubscriptionDestinationOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationOutput) ToServiceBusQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationOutput) ToServiceBusQueueEventSubscriptionDestinationPtrOutput() ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return o.ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o ServiceBusQueueEventSubscriptionDestinationOutput) ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceBusQueueEventSubscriptionDestination) *ServiceBusQueueEventSubscriptionDestination {
		return &v
	}).(ServiceBusQueueEventSubscriptionDestinationPtrOutput)
}

// Delivery attribute details.
func (o ServiceBusQueueEventSubscriptionDestinationOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestination) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusQueue'.
func (o ServiceBusQueueEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
func (o ServiceBusQueueEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ServiceBusQueueEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusQueueEventSubscriptionDestination)(nil)).Elem()
}

func (o ServiceBusQueueEventSubscriptionDestinationPtrOutput) ToServiceBusQueueEventSubscriptionDestinationPtrOutput() ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationPtrOutput) ToServiceBusQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationPtrOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationPtrOutput) Elem() ServiceBusQueueEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestination) ServiceBusQueueEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret ServiceBusQueueEventSubscriptionDestination
		return ret
	}).(ServiceBusQueueEventSubscriptionDestinationOutput)
}

// Delivery attribute details.
func (o ServiceBusQueueEventSubscriptionDestinationPtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestination) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusQueue'.
func (o ServiceBusQueueEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
func (o ServiceBusQueueEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestinationResponse struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'ServiceBusQueue'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) ToServiceBusQueueEventSubscriptionDestinationResponseOutput() ServiceBusQueueEventSubscriptionDestinationResponseOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) ToServiceBusQueueEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationResponseOutput {
	return o
}

// Delivery attribute details.
func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestinationResponse) []interface{} {
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusQueue'.
func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput) ToServiceBusQueueEventSubscriptionDestinationResponsePtrOutput() ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput) ToServiceBusQueueEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput) Elem() ServiceBusQueueEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestinationResponse) ServiceBusQueueEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret ServiceBusQueueEventSubscriptionDestinationResponse
		return ret
	}).(ServiceBusQueueEventSubscriptionDestinationResponseOutput)
}

// Delivery attribute details.
func (o ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestinationResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusQueue'.
func (o ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
func (o ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestination struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'ServiceBusTopic'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// ServiceBusTopicEventSubscriptionDestinationInput is an input type that accepts ServiceBusTopicEventSubscriptionDestinationArgs and ServiceBusTopicEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `ServiceBusTopicEventSubscriptionDestinationInput` via:
//
//	ServiceBusTopicEventSubscriptionDestinationArgs{...}
type ServiceBusTopicEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToServiceBusTopicEventSubscriptionDestinationOutput() ServiceBusTopicEventSubscriptionDestinationOutput
	ToServiceBusTopicEventSubscriptionDestinationOutputWithContext(context.Context) ServiceBusTopicEventSubscriptionDestinationOutput
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestinationArgs struct {
	// Delivery attribute details.
	DeliveryAttributeMappings pulumi.ArrayInput `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'ServiceBusTopic'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ServiceBusTopicEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicEventSubscriptionDestination)(nil)).Elem()
}

func (i ServiceBusTopicEventSubscriptionDestinationArgs) ToServiceBusTopicEventSubscriptionDestinationOutput() ServiceBusTopicEventSubscriptionDestinationOutput {
	return i.ToServiceBusTopicEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i ServiceBusTopicEventSubscriptionDestinationArgs) ToServiceBusTopicEventSubscriptionDestinationOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusTopicEventSubscriptionDestinationOutput)
}

func (i ServiceBusTopicEventSubscriptionDestinationArgs) ToServiceBusTopicEventSubscriptionDestinationPtrOutput() ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return i.ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i ServiceBusTopicEventSubscriptionDestinationArgs) ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusTopicEventSubscriptionDestinationOutput).ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// ServiceBusTopicEventSubscriptionDestinationPtrInput is an input type that accepts ServiceBusTopicEventSubscriptionDestinationArgs, ServiceBusTopicEventSubscriptionDestinationPtr and ServiceBusTopicEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `ServiceBusTopicEventSubscriptionDestinationPtrInput` via:
//
//	        ServiceBusTopicEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type ServiceBusTopicEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToServiceBusTopicEventSubscriptionDestinationPtrOutput() ServiceBusTopicEventSubscriptionDestinationPtrOutput
	ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(context.Context) ServiceBusTopicEventSubscriptionDestinationPtrOutput
}

type serviceBusTopicEventSubscriptionDestinationPtrType ServiceBusTopicEventSubscriptionDestinationArgs

func ServiceBusTopicEventSubscriptionDestinationPtr(v *ServiceBusTopicEventSubscriptionDestinationArgs) ServiceBusTopicEventSubscriptionDestinationPtrInput {
	return (*serviceBusTopicEventSubscriptionDestinationPtrType)(v)
}

func (*serviceBusTopicEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusTopicEventSubscriptionDestination)(nil)).Elem()
}

func (i *serviceBusTopicEventSubscriptionDestinationPtrType) ToServiceBusTopicEventSubscriptionDestinationPtrOutput() ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return i.ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *serviceBusTopicEventSubscriptionDestinationPtrType) ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusTopicEventSubscriptionDestinationPtrOutput)
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicEventSubscriptionDestination)(nil)).Elem()
}

func (o ServiceBusTopicEventSubscriptionDestinationOutput) ToServiceBusTopicEventSubscriptionDestinationOutput() ServiceBusTopicEventSubscriptionDestinationOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationOutput) ToServiceBusTopicEventSubscriptionDestinationOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationOutput) ToServiceBusTopicEventSubscriptionDestinationPtrOutput() ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return o.ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o ServiceBusTopicEventSubscriptionDestinationOutput) ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceBusTopicEventSubscriptionDestination) *ServiceBusTopicEventSubscriptionDestination {
		return &v
	}).(ServiceBusTopicEventSubscriptionDestinationPtrOutput)
}

// Delivery attribute details.
func (o ServiceBusTopicEventSubscriptionDestinationOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestination) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusTopic'.
func (o ServiceBusTopicEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
func (o ServiceBusTopicEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ServiceBusTopicEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusTopicEventSubscriptionDestination)(nil)).Elem()
}

func (o ServiceBusTopicEventSubscriptionDestinationPtrOutput) ToServiceBusTopicEventSubscriptionDestinationPtrOutput() ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationPtrOutput) ToServiceBusTopicEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationPtrOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationPtrOutput) Elem() ServiceBusTopicEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestination) ServiceBusTopicEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret ServiceBusTopicEventSubscriptionDestination
		return ret
	}).(ServiceBusTopicEventSubscriptionDestinationOutput)
}

// Delivery attribute details.
func (o ServiceBusTopicEventSubscriptionDestinationPtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestination) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusTopic'.
func (o ServiceBusTopicEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
func (o ServiceBusTopicEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestinationResponse struct {
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'ServiceBusTopic'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) ToServiceBusTopicEventSubscriptionDestinationResponseOutput() ServiceBusTopicEventSubscriptionDestinationResponseOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) ToServiceBusTopicEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationResponseOutput {
	return o
}

// Delivery attribute details.
func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestinationResponse) []interface{} {
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusTopic'.
func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusTopicEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput) ToServiceBusTopicEventSubscriptionDestinationResponsePtrOutput() ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput) ToServiceBusTopicEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput) Elem() ServiceBusTopicEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestinationResponse) ServiceBusTopicEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret ServiceBusTopicEventSubscriptionDestinationResponse
		return ret
	}).(ServiceBusTopicEventSubscriptionDestinationResponseOutput)
}

// Delivery attribute details.
func (o ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestinationResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'ServiceBusTopic'.
func (o ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
func (o ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Static delivery attribute mapping details.
type StaticDeliveryAttributeMapping struct {
	// Boolean flag to tell if the attribute contains sensitive information .
	IsSecret *bool `pulumi:"isSecret"`
	// Name of the delivery attribute or header.
	Name *string `pulumi:"name"`
	// Type of the delivery attribute or header name.
	// Expected value is 'Static'.
	Type string `pulumi:"type"`
	// Value of the delivery attribute.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for StaticDeliveryAttributeMapping
func (val *StaticDeliveryAttributeMapping) Defaults() *StaticDeliveryAttributeMapping {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// StaticDeliveryAttributeMappingInput is an input type that accepts StaticDeliveryAttributeMappingArgs and StaticDeliveryAttributeMappingOutput values.
// You can construct a concrete instance of `StaticDeliveryAttributeMappingInput` via:
//
//	StaticDeliveryAttributeMappingArgs{...}
type StaticDeliveryAttributeMappingInput interface {
	pulumi.Input

	ToStaticDeliveryAttributeMappingOutput() StaticDeliveryAttributeMappingOutput
	ToStaticDeliveryAttributeMappingOutputWithContext(context.Context) StaticDeliveryAttributeMappingOutput
}

// Static delivery attribute mapping details.
type StaticDeliveryAttributeMappingArgs struct {
	// Boolean flag to tell if the attribute contains sensitive information .
	IsSecret pulumi.BoolPtrInput `pulumi:"isSecret"`
	// Name of the delivery attribute or header.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the delivery attribute or header name.
	// Expected value is 'Static'.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of the delivery attribute.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for StaticDeliveryAttributeMappingArgs
func (val *StaticDeliveryAttributeMappingArgs) Defaults() *StaticDeliveryAttributeMappingArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		tmp.IsSecret = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (StaticDeliveryAttributeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticDeliveryAttributeMapping)(nil)).Elem()
}

func (i StaticDeliveryAttributeMappingArgs) ToStaticDeliveryAttributeMappingOutput() StaticDeliveryAttributeMappingOutput {
	return i.ToStaticDeliveryAttributeMappingOutputWithContext(context.Background())
}

func (i StaticDeliveryAttributeMappingArgs) ToStaticDeliveryAttributeMappingOutputWithContext(ctx context.Context) StaticDeliveryAttributeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticDeliveryAttributeMappingOutput)
}

// Static delivery attribute mapping details.
type StaticDeliveryAttributeMappingOutput struct{ *pulumi.OutputState }

func (StaticDeliveryAttributeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticDeliveryAttributeMapping)(nil)).Elem()
}

func (o StaticDeliveryAttributeMappingOutput) ToStaticDeliveryAttributeMappingOutput() StaticDeliveryAttributeMappingOutput {
	return o
}

func (o StaticDeliveryAttributeMappingOutput) ToStaticDeliveryAttributeMappingOutputWithContext(ctx context.Context) StaticDeliveryAttributeMappingOutput {
	return o
}

// Boolean flag to tell if the attribute contains sensitive information .
func (o StaticDeliveryAttributeMappingOutput) GetIsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMapping) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// Name of the delivery attribute or header.
func (o StaticDeliveryAttributeMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the delivery attribute or header name.
// Expected value is 'Static'.
func (o StaticDeliveryAttributeMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMapping) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the delivery attribute.
func (o StaticDeliveryAttributeMappingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMapping) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Static delivery attribute mapping details.
type StaticDeliveryAttributeMappingResponse struct {
	// Boolean flag to tell if the attribute contains sensitive information .
	IsSecret *bool `pulumi:"isSecret"`
	// Name of the delivery attribute or header.
	Name *string `pulumi:"name"`
	// Type of the delivery attribute or header name.
	// Expected value is 'Static'.
	Type string `pulumi:"type"`
	// Value of the delivery attribute.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for StaticDeliveryAttributeMappingResponse
func (val *StaticDeliveryAttributeMappingResponse) Defaults() *StaticDeliveryAttributeMappingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecret == nil {
		isSecret_ := false
		tmp.IsSecret = &isSecret_
	}
	return &tmp
}

// Static delivery attribute mapping details.
type StaticDeliveryAttributeMappingResponseOutput struct{ *pulumi.OutputState }

func (StaticDeliveryAttributeMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticDeliveryAttributeMappingResponse)(nil)).Elem()
}

func (o StaticDeliveryAttributeMappingResponseOutput) ToStaticDeliveryAttributeMappingResponseOutput() StaticDeliveryAttributeMappingResponseOutput {
	return o
}

func (o StaticDeliveryAttributeMappingResponseOutput) ToStaticDeliveryAttributeMappingResponseOutputWithContext(ctx context.Context) StaticDeliveryAttributeMappingResponseOutput {
	return o
}

// Boolean flag to tell if the attribute contains sensitive information .
func (o StaticDeliveryAttributeMappingResponseOutput) GetIsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMappingResponse) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// Name of the delivery attribute or header.
func (o StaticDeliveryAttributeMappingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMappingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the delivery attribute or header name.
// Expected value is 'Static'.
func (o StaticDeliveryAttributeMappingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMappingResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of the delivery attribute.
func (o StaticDeliveryAttributeMappingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticDeliveryAttributeMappingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StaticStringRoutingEnrichment struct {
	// Static routing enrichment key.
	Key *string `pulumi:"key"`
	// String type routing enrichment value.
	Value *string `pulumi:"value"`
	// Static routing enrichment value type. For e.g. this property value can be 'String'.
	// Expected value is 'String'.
	ValueType string `pulumi:"valueType"`
}

// StaticStringRoutingEnrichmentInput is an input type that accepts StaticStringRoutingEnrichmentArgs and StaticStringRoutingEnrichmentOutput values.
// You can construct a concrete instance of `StaticStringRoutingEnrichmentInput` via:
//
//	StaticStringRoutingEnrichmentArgs{...}
type StaticStringRoutingEnrichmentInput interface {
	pulumi.Input

	ToStaticStringRoutingEnrichmentOutput() StaticStringRoutingEnrichmentOutput
	ToStaticStringRoutingEnrichmentOutputWithContext(context.Context) StaticStringRoutingEnrichmentOutput
}

type StaticStringRoutingEnrichmentArgs struct {
	// Static routing enrichment key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// String type routing enrichment value.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Static routing enrichment value type. For e.g. this property value can be 'String'.
	// Expected value is 'String'.
	ValueType pulumi.StringInput `pulumi:"valueType"`
}

func (StaticStringRoutingEnrichmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticStringRoutingEnrichment)(nil)).Elem()
}

func (i StaticStringRoutingEnrichmentArgs) ToStaticStringRoutingEnrichmentOutput() StaticStringRoutingEnrichmentOutput {
	return i.ToStaticStringRoutingEnrichmentOutputWithContext(context.Background())
}

func (i StaticStringRoutingEnrichmentArgs) ToStaticStringRoutingEnrichmentOutputWithContext(ctx context.Context) StaticStringRoutingEnrichmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticStringRoutingEnrichmentOutput)
}

// StaticStringRoutingEnrichmentArrayInput is an input type that accepts StaticStringRoutingEnrichmentArray and StaticStringRoutingEnrichmentArrayOutput values.
// You can construct a concrete instance of `StaticStringRoutingEnrichmentArrayInput` via:
//
//	StaticStringRoutingEnrichmentArray{ StaticStringRoutingEnrichmentArgs{...} }
type StaticStringRoutingEnrichmentArrayInput interface {
	pulumi.Input

	ToStaticStringRoutingEnrichmentArrayOutput() StaticStringRoutingEnrichmentArrayOutput
	ToStaticStringRoutingEnrichmentArrayOutputWithContext(context.Context) StaticStringRoutingEnrichmentArrayOutput
}

type StaticStringRoutingEnrichmentArray []StaticStringRoutingEnrichmentInput

func (StaticStringRoutingEnrichmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticStringRoutingEnrichment)(nil)).Elem()
}

func (i StaticStringRoutingEnrichmentArray) ToStaticStringRoutingEnrichmentArrayOutput() StaticStringRoutingEnrichmentArrayOutput {
	return i.ToStaticStringRoutingEnrichmentArrayOutputWithContext(context.Background())
}

func (i StaticStringRoutingEnrichmentArray) ToStaticStringRoutingEnrichmentArrayOutputWithContext(ctx context.Context) StaticStringRoutingEnrichmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticStringRoutingEnrichmentArrayOutput)
}

type StaticStringRoutingEnrichmentOutput struct{ *pulumi.OutputState }

func (StaticStringRoutingEnrichmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticStringRoutingEnrichment)(nil)).Elem()
}

func (o StaticStringRoutingEnrichmentOutput) ToStaticStringRoutingEnrichmentOutput() StaticStringRoutingEnrichmentOutput {
	return o
}

func (o StaticStringRoutingEnrichmentOutput) ToStaticStringRoutingEnrichmentOutputWithContext(ctx context.Context) StaticStringRoutingEnrichmentOutput {
	return o
}

// Static routing enrichment key.
func (o StaticStringRoutingEnrichmentOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticStringRoutingEnrichment) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// String type routing enrichment value.
func (o StaticStringRoutingEnrichmentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticStringRoutingEnrichment) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Static routing enrichment value type. For e.g. this property value can be 'String'.
// Expected value is 'String'.
func (o StaticStringRoutingEnrichmentOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v StaticStringRoutingEnrichment) string { return v.ValueType }).(pulumi.StringOutput)
}

type StaticStringRoutingEnrichmentArrayOutput struct{ *pulumi.OutputState }

func (StaticStringRoutingEnrichmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticStringRoutingEnrichment)(nil)).Elem()
}

func (o StaticStringRoutingEnrichmentArrayOutput) ToStaticStringRoutingEnrichmentArrayOutput() StaticStringRoutingEnrichmentArrayOutput {
	return o
}

func (o StaticStringRoutingEnrichmentArrayOutput) ToStaticStringRoutingEnrichmentArrayOutputWithContext(ctx context.Context) StaticStringRoutingEnrichmentArrayOutput {
	return o
}

func (o StaticStringRoutingEnrichmentArrayOutput) Index(i pulumi.IntInput) StaticStringRoutingEnrichmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticStringRoutingEnrichment {
		return vs[0].([]StaticStringRoutingEnrichment)[vs[1].(int)]
	}).(StaticStringRoutingEnrichmentOutput)
}

type StaticStringRoutingEnrichmentResponse struct {
	// Static routing enrichment key.
	Key *string `pulumi:"key"`
	// String type routing enrichment value.
	Value *string `pulumi:"value"`
	// Static routing enrichment value type. For e.g. this property value can be 'String'.
	// Expected value is 'String'.
	ValueType string `pulumi:"valueType"`
}

type StaticStringRoutingEnrichmentResponseOutput struct{ *pulumi.OutputState }

func (StaticStringRoutingEnrichmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticStringRoutingEnrichmentResponse)(nil)).Elem()
}

func (o StaticStringRoutingEnrichmentResponseOutput) ToStaticStringRoutingEnrichmentResponseOutput() StaticStringRoutingEnrichmentResponseOutput {
	return o
}

func (o StaticStringRoutingEnrichmentResponseOutput) ToStaticStringRoutingEnrichmentResponseOutputWithContext(ctx context.Context) StaticStringRoutingEnrichmentResponseOutput {
	return o
}

// Static routing enrichment key.
func (o StaticStringRoutingEnrichmentResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticStringRoutingEnrichmentResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// String type routing enrichment value.
func (o StaticStringRoutingEnrichmentResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticStringRoutingEnrichmentResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Static routing enrichment value type. For e.g. this property value can be 'String'.
// Expected value is 'String'.
func (o StaticStringRoutingEnrichmentResponseOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v StaticStringRoutingEnrichmentResponse) string { return v.ValueType }).(pulumi.StringOutput)
}

type StaticStringRoutingEnrichmentResponseArrayOutput struct{ *pulumi.OutputState }

func (StaticStringRoutingEnrichmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticStringRoutingEnrichmentResponse)(nil)).Elem()
}

func (o StaticStringRoutingEnrichmentResponseArrayOutput) ToStaticStringRoutingEnrichmentResponseArrayOutput() StaticStringRoutingEnrichmentResponseArrayOutput {
	return o
}

func (o StaticStringRoutingEnrichmentResponseArrayOutput) ToStaticStringRoutingEnrichmentResponseArrayOutputWithContext(ctx context.Context) StaticStringRoutingEnrichmentResponseArrayOutput {
	return o
}

func (o StaticStringRoutingEnrichmentResponseArrayOutput) Index(i pulumi.IntInput) StaticStringRoutingEnrichmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticStringRoutingEnrichmentResponse {
		return vs[0].([]StaticStringRoutingEnrichmentResponse)[vs[1].(int)]
	}).(StaticStringRoutingEnrichmentResponseOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestination struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName *string `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	// Expected value is 'StorageBlob'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events
	ResourceId *string `pulumi:"resourceId"`
}

// StorageBlobDeadLetterDestinationInput is an input type that accepts StorageBlobDeadLetterDestinationArgs and StorageBlobDeadLetterDestinationOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationInput` via:
//
//	StorageBlobDeadLetterDestinationArgs{...}
type StorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput
	ToStorageBlobDeadLetterDestinationOutputWithContext(context.Context) StorageBlobDeadLetterDestinationOutput
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationArgs struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName pulumi.StringPtrInput `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	// Expected value is 'StorageBlob'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput {
	return i.ToStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationOutput)
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return i.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationOutput).ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

// StorageBlobDeadLetterDestinationPtrInput is an input type that accepts StorageBlobDeadLetterDestinationArgs, StorageBlobDeadLetterDestinationPtr and StorageBlobDeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationPtrInput` via:
//
//	        StorageBlobDeadLetterDestinationArgs{...}
//
//	or:
//
//	        nil
type StorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput
	ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) StorageBlobDeadLetterDestinationPtrOutput
}

type storageBlobDeadLetterDestinationPtrType StorageBlobDeadLetterDestinationArgs

func StorageBlobDeadLetterDestinationPtr(v *StorageBlobDeadLetterDestinationArgs) StorageBlobDeadLetterDestinationPtrInput {
	return (*storageBlobDeadLetterDestinationPtrType)(v)
}

func (*storageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *storageBlobDeadLetterDestinationPtrType) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return i.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *storageBlobDeadLetterDestinationPtrType) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationPtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return o.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageBlobDeadLetterDestination) *StorageBlobDeadLetterDestination {
		return &v
	}).(StorageBlobDeadLetterDestinationPtrOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestination) *string { return v.BlobContainerName }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
// Expected value is 'StorageBlob'.
func (o StorageBlobDeadLetterDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationPtrOutput) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationPtrOutput) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationPtrOutput) Elem() StorageBlobDeadLetterDestinationOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) StorageBlobDeadLetterDestination {
		if v != nil {
			return *v
		}
		var ret StorageBlobDeadLetterDestination
		return ret
	}).(StorageBlobDeadLetterDestinationOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationPtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
// Expected value is 'StorageBlob'.
func (o StorageBlobDeadLetterDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationResponse struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName *string `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	// Expected value is 'StorageBlob'.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponseOutput() StorageBlobDeadLetterDestinationResponseOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponseOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponseOutput {
	return o
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponseOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *string { return v.BlobContainerName }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
// Expected value is 'StorageBlob'.
func (o StorageBlobDeadLetterDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDeadLetterDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) Elem() StorageBlobDeadLetterDestinationResponseOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) StorageBlobDeadLetterDestinationResponse {
		if v != nil {
			return *v
		}
		var ret StorageBlobDeadLetterDestinationResponse
		return ret
	}).(StorageBlobDeadLetterDestinationResponseOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
// Expected value is 'StorageBlob'.
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'StorageQueue'.
	EndpointType string `pulumi:"endpointType"`
	// Storage queue message time to live in seconds. This value cannot be zero or negative with the exception of using -1 to indicate that the Time To Live of the message is Infinite.
	QueueMessageTimeToLiveInSeconds *float64 `pulumi:"queueMessageTimeToLiveInSeconds"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName *string `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// StorageQueueEventSubscriptionDestinationInput is an input type that accepts StorageQueueEventSubscriptionDestinationArgs and StorageQueueEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `StorageQueueEventSubscriptionDestinationInput` via:
//
//	StorageQueueEventSubscriptionDestinationArgs{...}
type StorageQueueEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput
	ToStorageQueueEventSubscriptionDestinationOutputWithContext(context.Context) StorageQueueEventSubscriptionDestinationOutput
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'StorageQueue'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// Storage queue message time to live in seconds. This value cannot be zero or negative with the exception of using -1 to indicate that the Time To Live of the message is Infinite.
	QueueMessageTimeToLiveInSeconds pulumi.Float64PtrInput `pulumi:"queueMessageTimeToLiveInSeconds"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageQueueEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestination)(nil)).Elem()
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput {
	return i.ToStorageQueueEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageQueueEventSubscriptionDestinationOutput)
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationPtrOutput() StorageQueueEventSubscriptionDestinationPtrOutput {
	return i.ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageQueueEventSubscriptionDestinationOutput).ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// StorageQueueEventSubscriptionDestinationPtrInput is an input type that accepts StorageQueueEventSubscriptionDestinationArgs, StorageQueueEventSubscriptionDestinationPtr and StorageQueueEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `StorageQueueEventSubscriptionDestinationPtrInput` via:
//
//	        StorageQueueEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type StorageQueueEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToStorageQueueEventSubscriptionDestinationPtrOutput() StorageQueueEventSubscriptionDestinationPtrOutput
	ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(context.Context) StorageQueueEventSubscriptionDestinationPtrOutput
}

type storageQueueEventSubscriptionDestinationPtrType StorageQueueEventSubscriptionDestinationArgs

func StorageQueueEventSubscriptionDestinationPtr(v *StorageQueueEventSubscriptionDestinationArgs) StorageQueueEventSubscriptionDestinationPtrInput {
	return (*storageQueueEventSubscriptionDestinationPtrType)(v)
}

func (*storageQueueEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageQueueEventSubscriptionDestination)(nil)).Elem()
}

func (i *storageQueueEventSubscriptionDestinationPtrType) ToStorageQueueEventSubscriptionDestinationPtrOutput() StorageQueueEventSubscriptionDestinationPtrOutput {
	return i.ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *storageQueueEventSubscriptionDestinationPtrType) ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageQueueEventSubscriptionDestinationPtrOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (StorageQueueEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestination)(nil)).Elem()
}

func (o StorageQueueEventSubscriptionDestinationOutput) ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationOutput) ToStorageQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationOutput) ToStorageQueueEventSubscriptionDestinationPtrOutput() StorageQueueEventSubscriptionDestinationPtrOutput {
	return o.ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o StorageQueueEventSubscriptionDestinationOutput) ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageQueueEventSubscriptionDestination) *StorageQueueEventSubscriptionDestination {
		return &v
	}).(StorageQueueEventSubscriptionDestinationPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'StorageQueue'.
func (o StorageQueueEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Storage queue message time to live in seconds. This value cannot be zero or negative with the exception of using -1 to indicate that the Time To Live of the message is Infinite.
func (o StorageQueueEventSubscriptionDestinationOutput) QueueMessageTimeToLiveInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestination) *float64 { return v.QueueMessageTimeToLiveInSeconds }).(pulumi.Float64PtrOutput)
}

// The name of the Storage queue under a storage account that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestination) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageQueueEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (StorageQueueEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageQueueEventSubscriptionDestination)(nil)).Elem()
}

func (o StorageQueueEventSubscriptionDestinationPtrOutput) ToStorageQueueEventSubscriptionDestinationPtrOutput() StorageQueueEventSubscriptionDestinationPtrOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationPtrOutput) ToStorageQueueEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationPtrOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationPtrOutput) Elem() StorageQueueEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestination) StorageQueueEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret StorageQueueEventSubscriptionDestination
		return ret
	}).(StorageQueueEventSubscriptionDestinationOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'StorageQueue'.
func (o StorageQueueEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Storage queue message time to live in seconds. This value cannot be zero or negative with the exception of using -1 to indicate that the Time To Live of the message is Infinite.
func (o StorageQueueEventSubscriptionDestinationPtrOutput) QueueMessageTimeToLiveInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestination) *float64 {
		if v == nil {
			return nil
		}
		return v.QueueMessageTimeToLiveInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The name of the Storage queue under a storage account that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.QueueName
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'StorageQueue'.
	EndpointType string `pulumi:"endpointType"`
	// Storage queue message time to live in seconds. This value cannot be zero or negative with the exception of using -1 to indicate that the Time To Live of the message is Infinite.
	QueueMessageTimeToLiveInSeconds *float64 `pulumi:"queueMessageTimeToLiveInSeconds"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName *string `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageQueueEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o StorageQueueEventSubscriptionDestinationResponseOutput) ToStorageQueueEventSubscriptionDestinationResponseOutput() StorageQueueEventSubscriptionDestinationResponseOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationResponseOutput) ToStorageQueueEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'StorageQueue'.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Storage queue message time to live in seconds. This value cannot be zero or negative with the exception of using -1 to indicate that the Time To Live of the message is Infinite.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) QueueMessageTimeToLiveInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) *float64 {
		return v.QueueMessageTimeToLiveInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The name of the Storage queue under a storage account that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageQueueEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageQueueEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o StorageQueueEventSubscriptionDestinationResponsePtrOutput) ToStorageQueueEventSubscriptionDestinationResponsePtrOutput() StorageQueueEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationResponsePtrOutput) ToStorageQueueEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationResponsePtrOutput) Elem() StorageQueueEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestinationResponse) StorageQueueEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret StorageQueueEventSubscriptionDestinationResponse
		return ret
	}).(StorageQueueEventSubscriptionDestinationResponseOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'StorageQueue'.
func (o StorageQueueEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Storage queue message time to live in seconds. This value cannot be zero or negative with the exception of using -1 to indicate that the Time To Live of the message is Infinite.
func (o StorageQueueEventSubscriptionDestinationResponsePtrOutput) QueueMessageTimeToLiveInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestinationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.QueueMessageTimeToLiveInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The name of the Storage queue under a storage account that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponsePtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueueName
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageQueueEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringBeginsWithAdvancedFilterInput is an input type that accepts StringBeginsWithAdvancedFilterArgs and StringBeginsWithAdvancedFilterOutput values.
// You can construct a concrete instance of `StringBeginsWithAdvancedFilterInput` via:
//
//	StringBeginsWithAdvancedFilterArgs{...}
type StringBeginsWithAdvancedFilterInput interface {
	pulumi.Input

	ToStringBeginsWithAdvancedFilterOutput() StringBeginsWithAdvancedFilterOutput
	ToStringBeginsWithAdvancedFilterOutputWithContext(context.Context) StringBeginsWithAdvancedFilterOutput
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringBeginsWithAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithAdvancedFilter)(nil)).Elem()
}

func (i StringBeginsWithAdvancedFilterArgs) ToStringBeginsWithAdvancedFilterOutput() StringBeginsWithAdvancedFilterOutput {
	return i.ToStringBeginsWithAdvancedFilterOutputWithContext(context.Background())
}

func (i StringBeginsWithAdvancedFilterArgs) ToStringBeginsWithAdvancedFilterOutputWithContext(ctx context.Context) StringBeginsWithAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringBeginsWithAdvancedFilterOutput)
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringBeginsWithAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithAdvancedFilter)(nil)).Elem()
}

func (o StringBeginsWithAdvancedFilterOutput) ToStringBeginsWithAdvancedFilterOutput() StringBeginsWithAdvancedFilterOutput {
	return o
}

func (o StringBeginsWithAdvancedFilterOutput) ToStringBeginsWithAdvancedFilterOutputWithContext(ctx context.Context) StringBeginsWithAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringBeginsWithAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringBeginsWith'.
func (o StringBeginsWithAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringBeginsWithAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringBeginsWithAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithAdvancedFilterResponse)(nil)).Elem()
}

func (o StringBeginsWithAdvancedFilterResponseOutput) ToStringBeginsWithAdvancedFilterResponseOutput() StringBeginsWithAdvancedFilterResponseOutput {
	return o
}

func (o StringBeginsWithAdvancedFilterResponseOutput) ToStringBeginsWithAdvancedFilterResponseOutputWithContext(ctx context.Context) StringBeginsWithAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringBeginsWithAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringBeginsWith'.
func (o StringBeginsWithAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringBeginsWithAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringBeginsWith Filter.
type StringBeginsWithFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringBeginsWithFilterInput is an input type that accepts StringBeginsWithFilterArgs and StringBeginsWithFilterOutput values.
// You can construct a concrete instance of `StringBeginsWithFilterInput` via:
//
//	StringBeginsWithFilterArgs{...}
type StringBeginsWithFilterInput interface {
	pulumi.Input

	ToStringBeginsWithFilterOutput() StringBeginsWithFilterOutput
	ToStringBeginsWithFilterOutputWithContext(context.Context) StringBeginsWithFilterOutput
}

// StringBeginsWith Filter.
type StringBeginsWithFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringBeginsWithFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithFilter)(nil)).Elem()
}

func (i StringBeginsWithFilterArgs) ToStringBeginsWithFilterOutput() StringBeginsWithFilterOutput {
	return i.ToStringBeginsWithFilterOutputWithContext(context.Background())
}

func (i StringBeginsWithFilterArgs) ToStringBeginsWithFilterOutputWithContext(ctx context.Context) StringBeginsWithFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringBeginsWithFilterOutput)
}

// StringBeginsWith Filter.
type StringBeginsWithFilterOutput struct{ *pulumi.OutputState }

func (StringBeginsWithFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithFilter)(nil)).Elem()
}

func (o StringBeginsWithFilterOutput) ToStringBeginsWithFilterOutput() StringBeginsWithFilterOutput {
	return o
}

func (o StringBeginsWithFilterOutput) ToStringBeginsWithFilterOutputWithContext(ctx context.Context) StringBeginsWithFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringBeginsWithFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringBeginsWithFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringBeginsWith'.
func (o StringBeginsWithFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringBeginsWithFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringBeginsWithFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringBeginsWithFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringBeginsWith Filter.
type StringBeginsWithFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringBeginsWith Filter.
type StringBeginsWithFilterResponseOutput struct{ *pulumi.OutputState }

func (StringBeginsWithFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithFilterResponse)(nil)).Elem()
}

func (o StringBeginsWithFilterResponseOutput) ToStringBeginsWithFilterResponseOutput() StringBeginsWithFilterResponseOutput {
	return o
}

func (o StringBeginsWithFilterResponseOutput) ToStringBeginsWithFilterResponseOutputWithContext(ctx context.Context) StringBeginsWithFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringBeginsWithFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringBeginsWithFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringBeginsWith'.
func (o StringBeginsWithFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringBeginsWithFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringBeginsWithFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringBeginsWithFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContainsAdvancedFilterInput is an input type that accepts StringContainsAdvancedFilterArgs and StringContainsAdvancedFilterOutput values.
// You can construct a concrete instance of `StringContainsAdvancedFilterInput` via:
//
//	StringContainsAdvancedFilterArgs{...}
type StringContainsAdvancedFilterInput interface {
	pulumi.Input

	ToStringContainsAdvancedFilterOutput() StringContainsAdvancedFilterOutput
	ToStringContainsAdvancedFilterOutputWithContext(context.Context) StringContainsAdvancedFilterOutput
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringContainsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsAdvancedFilter)(nil)).Elem()
}

func (i StringContainsAdvancedFilterArgs) ToStringContainsAdvancedFilterOutput() StringContainsAdvancedFilterOutput {
	return i.ToStringContainsAdvancedFilterOutputWithContext(context.Background())
}

func (i StringContainsAdvancedFilterArgs) ToStringContainsAdvancedFilterOutputWithContext(ctx context.Context) StringContainsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringContainsAdvancedFilterOutput)
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringContainsAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsAdvancedFilter)(nil)).Elem()
}

func (o StringContainsAdvancedFilterOutput) ToStringContainsAdvancedFilterOutput() StringContainsAdvancedFilterOutput {
	return o
}

func (o StringContainsAdvancedFilterOutput) ToStringContainsAdvancedFilterOutputWithContext(ctx context.Context) StringContainsAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringContainsAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringContains'.
func (o StringContainsAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringContainsAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringContainsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsAdvancedFilterResponse)(nil)).Elem()
}

func (o StringContainsAdvancedFilterResponseOutput) ToStringContainsAdvancedFilterResponseOutput() StringContainsAdvancedFilterResponseOutput {
	return o
}

func (o StringContainsAdvancedFilterResponseOutput) ToStringContainsAdvancedFilterResponseOutputWithContext(ctx context.Context) StringContainsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringContainsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringContains'.
func (o StringContainsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringContainsAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringContains Filter.
type StringContainsFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContainsFilterInput is an input type that accepts StringContainsFilterArgs and StringContainsFilterOutput values.
// You can construct a concrete instance of `StringContainsFilterInput` via:
//
//	StringContainsFilterArgs{...}
type StringContainsFilterInput interface {
	pulumi.Input

	ToStringContainsFilterOutput() StringContainsFilterOutput
	ToStringContainsFilterOutputWithContext(context.Context) StringContainsFilterOutput
}

// StringContains Filter.
type StringContainsFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringContainsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsFilter)(nil)).Elem()
}

func (i StringContainsFilterArgs) ToStringContainsFilterOutput() StringContainsFilterOutput {
	return i.ToStringContainsFilterOutputWithContext(context.Background())
}

func (i StringContainsFilterArgs) ToStringContainsFilterOutputWithContext(ctx context.Context) StringContainsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringContainsFilterOutput)
}

// StringContains Filter.
type StringContainsFilterOutput struct{ *pulumi.OutputState }

func (StringContainsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsFilter)(nil)).Elem()
}

func (o StringContainsFilterOutput) ToStringContainsFilterOutput() StringContainsFilterOutput {
	return o
}

func (o StringContainsFilterOutput) ToStringContainsFilterOutputWithContext(ctx context.Context) StringContainsFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringContainsFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringContainsFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringContains'.
func (o StringContainsFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringContainsFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringContainsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringContainsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringContains Filter.
type StringContainsFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContains Filter.
type StringContainsFilterResponseOutput struct{ *pulumi.OutputState }

func (StringContainsFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsFilterResponse)(nil)).Elem()
}

func (o StringContainsFilterResponseOutput) ToStringContainsFilterResponseOutput() StringContainsFilterResponseOutput {
	return o
}

func (o StringContainsFilterResponseOutput) ToStringContainsFilterResponseOutputWithContext(ctx context.Context) StringContainsFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringContainsFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringContainsFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringContains'.
func (o StringContainsFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringContainsFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringContainsFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringContainsFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWithAdvancedFilterInput is an input type that accepts StringEndsWithAdvancedFilterArgs and StringEndsWithAdvancedFilterOutput values.
// You can construct a concrete instance of `StringEndsWithAdvancedFilterInput` via:
//
//	StringEndsWithAdvancedFilterArgs{...}
type StringEndsWithAdvancedFilterInput interface {
	pulumi.Input

	ToStringEndsWithAdvancedFilterOutput() StringEndsWithAdvancedFilterOutput
	ToStringEndsWithAdvancedFilterOutputWithContext(context.Context) StringEndsWithAdvancedFilterOutput
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringEndsWithAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithAdvancedFilter)(nil)).Elem()
}

func (i StringEndsWithAdvancedFilterArgs) ToStringEndsWithAdvancedFilterOutput() StringEndsWithAdvancedFilterOutput {
	return i.ToStringEndsWithAdvancedFilterOutputWithContext(context.Background())
}

func (i StringEndsWithAdvancedFilterArgs) ToStringEndsWithAdvancedFilterOutputWithContext(ctx context.Context) StringEndsWithAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringEndsWithAdvancedFilterOutput)
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringEndsWithAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithAdvancedFilter)(nil)).Elem()
}

func (o StringEndsWithAdvancedFilterOutput) ToStringEndsWithAdvancedFilterOutput() StringEndsWithAdvancedFilterOutput {
	return o
}

func (o StringEndsWithAdvancedFilterOutput) ToStringEndsWithAdvancedFilterOutputWithContext(ctx context.Context) StringEndsWithAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringEndsWithAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringEndsWith'.
func (o StringEndsWithAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringEndsWithAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringEndsWithAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithAdvancedFilterResponse)(nil)).Elem()
}

func (o StringEndsWithAdvancedFilterResponseOutput) ToStringEndsWithAdvancedFilterResponseOutput() StringEndsWithAdvancedFilterResponseOutput {
	return o
}

func (o StringEndsWithAdvancedFilterResponseOutput) ToStringEndsWithAdvancedFilterResponseOutputWithContext(ctx context.Context) StringEndsWithAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringEndsWithAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringEndsWith'.
func (o StringEndsWithAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringEndsWithAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringEndsWith Filter.
type StringEndsWithFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWithFilterInput is an input type that accepts StringEndsWithFilterArgs and StringEndsWithFilterOutput values.
// You can construct a concrete instance of `StringEndsWithFilterInput` via:
//
//	StringEndsWithFilterArgs{...}
type StringEndsWithFilterInput interface {
	pulumi.Input

	ToStringEndsWithFilterOutput() StringEndsWithFilterOutput
	ToStringEndsWithFilterOutputWithContext(context.Context) StringEndsWithFilterOutput
}

// StringEndsWith Filter.
type StringEndsWithFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringEndsWithFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithFilter)(nil)).Elem()
}

func (i StringEndsWithFilterArgs) ToStringEndsWithFilterOutput() StringEndsWithFilterOutput {
	return i.ToStringEndsWithFilterOutputWithContext(context.Background())
}

func (i StringEndsWithFilterArgs) ToStringEndsWithFilterOutputWithContext(ctx context.Context) StringEndsWithFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringEndsWithFilterOutput)
}

// StringEndsWith Filter.
type StringEndsWithFilterOutput struct{ *pulumi.OutputState }

func (StringEndsWithFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithFilter)(nil)).Elem()
}

func (o StringEndsWithFilterOutput) ToStringEndsWithFilterOutput() StringEndsWithFilterOutput {
	return o
}

func (o StringEndsWithFilterOutput) ToStringEndsWithFilterOutputWithContext(ctx context.Context) StringEndsWithFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringEndsWithFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringEndsWithFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringEndsWith'.
func (o StringEndsWithFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringEndsWithFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringEndsWithFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringEndsWithFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringEndsWith Filter.
type StringEndsWithFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWith Filter.
type StringEndsWithFilterResponseOutput struct{ *pulumi.OutputState }

func (StringEndsWithFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithFilterResponse)(nil)).Elem()
}

func (o StringEndsWithFilterResponseOutput) ToStringEndsWithFilterResponseOutput() StringEndsWithFilterResponseOutput {
	return o
}

func (o StringEndsWithFilterResponseOutput) ToStringEndsWithFilterResponseOutputWithContext(ctx context.Context) StringEndsWithFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringEndsWithFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringEndsWithFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringEndsWith'.
func (o StringEndsWithFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringEndsWithFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringEndsWithFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringEndsWithFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringIn Advanced Filter.
type StringInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringInAdvancedFilterInput is an input type that accepts StringInAdvancedFilterArgs and StringInAdvancedFilterOutput values.
// You can construct a concrete instance of `StringInAdvancedFilterInput` via:
//
//	StringInAdvancedFilterArgs{...}
type StringInAdvancedFilterInput interface {
	pulumi.Input

	ToStringInAdvancedFilterOutput() StringInAdvancedFilterOutput
	ToStringInAdvancedFilterOutputWithContext(context.Context) StringInAdvancedFilterOutput
}

// StringIn Advanced Filter.
type StringInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInAdvancedFilter)(nil)).Elem()
}

func (i StringInAdvancedFilterArgs) ToStringInAdvancedFilterOutput() StringInAdvancedFilterOutput {
	return i.ToStringInAdvancedFilterOutputWithContext(context.Background())
}

func (i StringInAdvancedFilterArgs) ToStringInAdvancedFilterOutputWithContext(ctx context.Context) StringInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringInAdvancedFilterOutput)
}

// StringIn Advanced Filter.
type StringInAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringInAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInAdvancedFilter)(nil)).Elem()
}

func (o StringInAdvancedFilterOutput) ToStringInAdvancedFilterOutput() StringInAdvancedFilterOutput {
	return o
}

func (o StringInAdvancedFilterOutput) ToStringInAdvancedFilterOutputWithContext(ctx context.Context) StringInAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringInAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringInAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringIn'.
func (o StringInAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringInAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringInAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringInAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringIn Advanced Filter.
type StringInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringIn Advanced Filter.
type StringInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInAdvancedFilterResponse)(nil)).Elem()
}

func (o StringInAdvancedFilterResponseOutput) ToStringInAdvancedFilterResponseOutput() StringInAdvancedFilterResponseOutput {
	return o
}

func (o StringInAdvancedFilterResponseOutput) ToStringInAdvancedFilterResponseOutputWithContext(ctx context.Context) StringInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringIn'.
func (o StringInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringInAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringInAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringIn Filter.
type StringInFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringInFilterInput is an input type that accepts StringInFilterArgs and StringInFilterOutput values.
// You can construct a concrete instance of `StringInFilterInput` via:
//
//	StringInFilterArgs{...}
type StringInFilterInput interface {
	pulumi.Input

	ToStringInFilterOutput() StringInFilterOutput
	ToStringInFilterOutputWithContext(context.Context) StringInFilterOutput
}

// StringIn Filter.
type StringInFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringInFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInFilter)(nil)).Elem()
}

func (i StringInFilterArgs) ToStringInFilterOutput() StringInFilterOutput {
	return i.ToStringInFilterOutputWithContext(context.Background())
}

func (i StringInFilterArgs) ToStringInFilterOutputWithContext(ctx context.Context) StringInFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringInFilterOutput)
}

// StringIn Filter.
type StringInFilterOutput struct{ *pulumi.OutputState }

func (StringInFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInFilter)(nil)).Elem()
}

func (o StringInFilterOutput) ToStringInFilterOutput() StringInFilterOutput {
	return o
}

func (o StringInFilterOutput) ToStringInFilterOutputWithContext(ctx context.Context) StringInFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringInFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringInFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringIn'.
func (o StringInFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringInFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringInFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringInFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringIn Filter.
type StringInFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringIn Filter.
type StringInFilterResponseOutput struct{ *pulumi.OutputState }

func (StringInFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInFilterResponse)(nil)).Elem()
}

func (o StringInFilterResponseOutput) ToStringInFilterResponseOutput() StringInFilterResponseOutput {
	return o
}

func (o StringInFilterResponseOutput) ToStringInFilterResponseOutputWithContext(ctx context.Context) StringInFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringInFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringInFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringIn'.
func (o StringInFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringInFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringInFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringInFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotBeginsWith Advanced Filter.
type StringNotBeginsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotBeginsWithAdvancedFilterInput is an input type that accepts StringNotBeginsWithAdvancedFilterArgs and StringNotBeginsWithAdvancedFilterOutput values.
// You can construct a concrete instance of `StringNotBeginsWithAdvancedFilterInput` via:
//
//	StringNotBeginsWithAdvancedFilterArgs{...}
type StringNotBeginsWithAdvancedFilterInput interface {
	pulumi.Input

	ToStringNotBeginsWithAdvancedFilterOutput() StringNotBeginsWithAdvancedFilterOutput
	ToStringNotBeginsWithAdvancedFilterOutputWithContext(context.Context) StringNotBeginsWithAdvancedFilterOutput
}

// StringNotBeginsWith Advanced Filter.
type StringNotBeginsWithAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotBeginsWithAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotBeginsWithAdvancedFilter)(nil)).Elem()
}

func (i StringNotBeginsWithAdvancedFilterArgs) ToStringNotBeginsWithAdvancedFilterOutput() StringNotBeginsWithAdvancedFilterOutput {
	return i.ToStringNotBeginsWithAdvancedFilterOutputWithContext(context.Background())
}

func (i StringNotBeginsWithAdvancedFilterArgs) ToStringNotBeginsWithAdvancedFilterOutputWithContext(ctx context.Context) StringNotBeginsWithAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotBeginsWithAdvancedFilterOutput)
}

// StringNotBeginsWith Advanced Filter.
type StringNotBeginsWithAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringNotBeginsWithAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotBeginsWithAdvancedFilter)(nil)).Elem()
}

func (o StringNotBeginsWithAdvancedFilterOutput) ToStringNotBeginsWithAdvancedFilterOutput() StringNotBeginsWithAdvancedFilterOutput {
	return o
}

func (o StringNotBeginsWithAdvancedFilterOutput) ToStringNotBeginsWithAdvancedFilterOutputWithContext(ctx context.Context) StringNotBeginsWithAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotBeginsWithAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotBeginsWithAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotBeginsWith'.
func (o StringNotBeginsWithAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotBeginsWithAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotBeginsWithAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotBeginsWithAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotBeginsWith Advanced Filter.
type StringNotBeginsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotBeginsWith Advanced Filter.
type StringNotBeginsWithAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotBeginsWithAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotBeginsWithAdvancedFilterResponse)(nil)).Elem()
}

func (o StringNotBeginsWithAdvancedFilterResponseOutput) ToStringNotBeginsWithAdvancedFilterResponseOutput() StringNotBeginsWithAdvancedFilterResponseOutput {
	return o
}

func (o StringNotBeginsWithAdvancedFilterResponseOutput) ToStringNotBeginsWithAdvancedFilterResponseOutputWithContext(ctx context.Context) StringNotBeginsWithAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotBeginsWithAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotBeginsWithAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotBeginsWith'.
func (o StringNotBeginsWithAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotBeginsWithAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotBeginsWithAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotBeginsWithAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotBeginsWith Filter.
type StringNotBeginsWithFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotBeginsWithFilterInput is an input type that accepts StringNotBeginsWithFilterArgs and StringNotBeginsWithFilterOutput values.
// You can construct a concrete instance of `StringNotBeginsWithFilterInput` via:
//
//	StringNotBeginsWithFilterArgs{...}
type StringNotBeginsWithFilterInput interface {
	pulumi.Input

	ToStringNotBeginsWithFilterOutput() StringNotBeginsWithFilterOutput
	ToStringNotBeginsWithFilterOutputWithContext(context.Context) StringNotBeginsWithFilterOutput
}

// StringNotBeginsWith Filter.
type StringNotBeginsWithFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotBeginsWithFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotBeginsWithFilter)(nil)).Elem()
}

func (i StringNotBeginsWithFilterArgs) ToStringNotBeginsWithFilterOutput() StringNotBeginsWithFilterOutput {
	return i.ToStringNotBeginsWithFilterOutputWithContext(context.Background())
}

func (i StringNotBeginsWithFilterArgs) ToStringNotBeginsWithFilterOutputWithContext(ctx context.Context) StringNotBeginsWithFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotBeginsWithFilterOutput)
}

// StringNotBeginsWith Filter.
type StringNotBeginsWithFilterOutput struct{ *pulumi.OutputState }

func (StringNotBeginsWithFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotBeginsWithFilter)(nil)).Elem()
}

func (o StringNotBeginsWithFilterOutput) ToStringNotBeginsWithFilterOutput() StringNotBeginsWithFilterOutput {
	return o
}

func (o StringNotBeginsWithFilterOutput) ToStringNotBeginsWithFilterOutputWithContext(ctx context.Context) StringNotBeginsWithFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotBeginsWithFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotBeginsWithFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotBeginsWith'.
func (o StringNotBeginsWithFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotBeginsWithFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotBeginsWithFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotBeginsWithFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotBeginsWith Filter.
type StringNotBeginsWithFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotBeginsWith Filter.
type StringNotBeginsWithFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotBeginsWithFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotBeginsWithFilterResponse)(nil)).Elem()
}

func (o StringNotBeginsWithFilterResponseOutput) ToStringNotBeginsWithFilterResponseOutput() StringNotBeginsWithFilterResponseOutput {
	return o
}

func (o StringNotBeginsWithFilterResponseOutput) ToStringNotBeginsWithFilterResponseOutputWithContext(ctx context.Context) StringNotBeginsWithFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotBeginsWithFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotBeginsWithFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotBeginsWith'.
func (o StringNotBeginsWithFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotBeginsWithFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotBeginsWithFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotBeginsWithFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotContains Advanced Filter.
type StringNotContainsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotContainsAdvancedFilterInput is an input type that accepts StringNotContainsAdvancedFilterArgs and StringNotContainsAdvancedFilterOutput values.
// You can construct a concrete instance of `StringNotContainsAdvancedFilterInput` via:
//
//	StringNotContainsAdvancedFilterArgs{...}
type StringNotContainsAdvancedFilterInput interface {
	pulumi.Input

	ToStringNotContainsAdvancedFilterOutput() StringNotContainsAdvancedFilterOutput
	ToStringNotContainsAdvancedFilterOutputWithContext(context.Context) StringNotContainsAdvancedFilterOutput
}

// StringNotContains Advanced Filter.
type StringNotContainsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotContainsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotContainsAdvancedFilter)(nil)).Elem()
}

func (i StringNotContainsAdvancedFilterArgs) ToStringNotContainsAdvancedFilterOutput() StringNotContainsAdvancedFilterOutput {
	return i.ToStringNotContainsAdvancedFilterOutputWithContext(context.Background())
}

func (i StringNotContainsAdvancedFilterArgs) ToStringNotContainsAdvancedFilterOutputWithContext(ctx context.Context) StringNotContainsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotContainsAdvancedFilterOutput)
}

// StringNotContains Advanced Filter.
type StringNotContainsAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringNotContainsAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotContainsAdvancedFilter)(nil)).Elem()
}

func (o StringNotContainsAdvancedFilterOutput) ToStringNotContainsAdvancedFilterOutput() StringNotContainsAdvancedFilterOutput {
	return o
}

func (o StringNotContainsAdvancedFilterOutput) ToStringNotContainsAdvancedFilterOutputWithContext(ctx context.Context) StringNotContainsAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotContainsAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotContainsAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotContains'.
func (o StringNotContainsAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotContainsAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotContainsAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotContainsAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotContains Advanced Filter.
type StringNotContainsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotContains Advanced Filter.
type StringNotContainsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotContainsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotContainsAdvancedFilterResponse)(nil)).Elem()
}

func (o StringNotContainsAdvancedFilterResponseOutput) ToStringNotContainsAdvancedFilterResponseOutput() StringNotContainsAdvancedFilterResponseOutput {
	return o
}

func (o StringNotContainsAdvancedFilterResponseOutput) ToStringNotContainsAdvancedFilterResponseOutputWithContext(ctx context.Context) StringNotContainsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotContainsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotContainsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotContains'.
func (o StringNotContainsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotContainsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotContainsAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotContainsAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotContains Filter.
type StringNotContainsFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotContainsFilterInput is an input type that accepts StringNotContainsFilterArgs and StringNotContainsFilterOutput values.
// You can construct a concrete instance of `StringNotContainsFilterInput` via:
//
//	StringNotContainsFilterArgs{...}
type StringNotContainsFilterInput interface {
	pulumi.Input

	ToStringNotContainsFilterOutput() StringNotContainsFilterOutput
	ToStringNotContainsFilterOutputWithContext(context.Context) StringNotContainsFilterOutput
}

// StringNotContains Filter.
type StringNotContainsFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotContainsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotContainsFilter)(nil)).Elem()
}

func (i StringNotContainsFilterArgs) ToStringNotContainsFilterOutput() StringNotContainsFilterOutput {
	return i.ToStringNotContainsFilterOutputWithContext(context.Background())
}

func (i StringNotContainsFilterArgs) ToStringNotContainsFilterOutputWithContext(ctx context.Context) StringNotContainsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotContainsFilterOutput)
}

// StringNotContains Filter.
type StringNotContainsFilterOutput struct{ *pulumi.OutputState }

func (StringNotContainsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotContainsFilter)(nil)).Elem()
}

func (o StringNotContainsFilterOutput) ToStringNotContainsFilterOutput() StringNotContainsFilterOutput {
	return o
}

func (o StringNotContainsFilterOutput) ToStringNotContainsFilterOutputWithContext(ctx context.Context) StringNotContainsFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotContainsFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotContainsFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotContains'.
func (o StringNotContainsFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotContainsFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotContainsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotContainsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotContains Filter.
type StringNotContainsFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotContains Filter.
type StringNotContainsFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotContainsFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotContainsFilterResponse)(nil)).Elem()
}

func (o StringNotContainsFilterResponseOutput) ToStringNotContainsFilterResponseOutput() StringNotContainsFilterResponseOutput {
	return o
}

func (o StringNotContainsFilterResponseOutput) ToStringNotContainsFilterResponseOutputWithContext(ctx context.Context) StringNotContainsFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotContainsFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotContainsFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotContains'.
func (o StringNotContainsFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotContainsFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotContainsFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotContainsFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotEndsWith Advanced Filter.
type StringNotEndsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotEndsWithAdvancedFilterInput is an input type that accepts StringNotEndsWithAdvancedFilterArgs and StringNotEndsWithAdvancedFilterOutput values.
// You can construct a concrete instance of `StringNotEndsWithAdvancedFilterInput` via:
//
//	StringNotEndsWithAdvancedFilterArgs{...}
type StringNotEndsWithAdvancedFilterInput interface {
	pulumi.Input

	ToStringNotEndsWithAdvancedFilterOutput() StringNotEndsWithAdvancedFilterOutput
	ToStringNotEndsWithAdvancedFilterOutputWithContext(context.Context) StringNotEndsWithAdvancedFilterOutput
}

// StringNotEndsWith Advanced Filter.
type StringNotEndsWithAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotEndsWithAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotEndsWithAdvancedFilter)(nil)).Elem()
}

func (i StringNotEndsWithAdvancedFilterArgs) ToStringNotEndsWithAdvancedFilterOutput() StringNotEndsWithAdvancedFilterOutput {
	return i.ToStringNotEndsWithAdvancedFilterOutputWithContext(context.Background())
}

func (i StringNotEndsWithAdvancedFilterArgs) ToStringNotEndsWithAdvancedFilterOutputWithContext(ctx context.Context) StringNotEndsWithAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotEndsWithAdvancedFilterOutput)
}

// StringNotEndsWith Advanced Filter.
type StringNotEndsWithAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringNotEndsWithAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotEndsWithAdvancedFilter)(nil)).Elem()
}

func (o StringNotEndsWithAdvancedFilterOutput) ToStringNotEndsWithAdvancedFilterOutput() StringNotEndsWithAdvancedFilterOutput {
	return o
}

func (o StringNotEndsWithAdvancedFilterOutput) ToStringNotEndsWithAdvancedFilterOutputWithContext(ctx context.Context) StringNotEndsWithAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotEndsWithAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotEndsWithAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotEndsWith'.
func (o StringNotEndsWithAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotEndsWithAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotEndsWithAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotEndsWithAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotEndsWith Advanced Filter.
type StringNotEndsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotEndsWith Advanced Filter.
type StringNotEndsWithAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotEndsWithAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotEndsWithAdvancedFilterResponse)(nil)).Elem()
}

func (o StringNotEndsWithAdvancedFilterResponseOutput) ToStringNotEndsWithAdvancedFilterResponseOutput() StringNotEndsWithAdvancedFilterResponseOutput {
	return o
}

func (o StringNotEndsWithAdvancedFilterResponseOutput) ToStringNotEndsWithAdvancedFilterResponseOutputWithContext(ctx context.Context) StringNotEndsWithAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotEndsWithAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotEndsWithAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotEndsWith'.
func (o StringNotEndsWithAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotEndsWithAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotEndsWithAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotEndsWithAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotEndsWith Filter.
type StringNotEndsWithFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotEndsWithFilterInput is an input type that accepts StringNotEndsWithFilterArgs and StringNotEndsWithFilterOutput values.
// You can construct a concrete instance of `StringNotEndsWithFilterInput` via:
//
//	StringNotEndsWithFilterArgs{...}
type StringNotEndsWithFilterInput interface {
	pulumi.Input

	ToStringNotEndsWithFilterOutput() StringNotEndsWithFilterOutput
	ToStringNotEndsWithFilterOutputWithContext(context.Context) StringNotEndsWithFilterOutput
}

// StringNotEndsWith Filter.
type StringNotEndsWithFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotEndsWithFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotEndsWithFilter)(nil)).Elem()
}

func (i StringNotEndsWithFilterArgs) ToStringNotEndsWithFilterOutput() StringNotEndsWithFilterOutput {
	return i.ToStringNotEndsWithFilterOutputWithContext(context.Background())
}

func (i StringNotEndsWithFilterArgs) ToStringNotEndsWithFilterOutputWithContext(ctx context.Context) StringNotEndsWithFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotEndsWithFilterOutput)
}

// StringNotEndsWith Filter.
type StringNotEndsWithFilterOutput struct{ *pulumi.OutputState }

func (StringNotEndsWithFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotEndsWithFilter)(nil)).Elem()
}

func (o StringNotEndsWithFilterOutput) ToStringNotEndsWithFilterOutput() StringNotEndsWithFilterOutput {
	return o
}

func (o StringNotEndsWithFilterOutput) ToStringNotEndsWithFilterOutputWithContext(ctx context.Context) StringNotEndsWithFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotEndsWithFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotEndsWithFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotEndsWith'.
func (o StringNotEndsWithFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotEndsWithFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotEndsWithFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotEndsWithFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotEndsWith Filter.
type StringNotEndsWithFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotEndsWith Filter.
type StringNotEndsWithFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotEndsWithFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotEndsWithFilterResponse)(nil)).Elem()
}

func (o StringNotEndsWithFilterResponseOutput) ToStringNotEndsWithFilterResponseOutput() StringNotEndsWithFilterResponseOutput {
	return o
}

func (o StringNotEndsWithFilterResponseOutput) ToStringNotEndsWithFilterResponseOutputWithContext(ctx context.Context) StringNotEndsWithFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotEndsWithFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotEndsWithFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotEndsWith'.
func (o StringNotEndsWithFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotEndsWithFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotEndsWithFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotEndsWithFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotInAdvancedFilterInput is an input type that accepts StringNotInAdvancedFilterArgs and StringNotInAdvancedFilterOutput values.
// You can construct a concrete instance of `StringNotInAdvancedFilterInput` via:
//
//	StringNotInAdvancedFilterArgs{...}
type StringNotInAdvancedFilterInput interface {
	pulumi.Input

	ToStringNotInAdvancedFilterOutput() StringNotInAdvancedFilterOutput
	ToStringNotInAdvancedFilterOutputWithContext(context.Context) StringNotInAdvancedFilterOutput
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInAdvancedFilter)(nil)).Elem()
}

func (i StringNotInAdvancedFilterArgs) ToStringNotInAdvancedFilterOutput() StringNotInAdvancedFilterOutput {
	return i.ToStringNotInAdvancedFilterOutputWithContext(context.Background())
}

func (i StringNotInAdvancedFilterArgs) ToStringNotInAdvancedFilterOutputWithContext(ctx context.Context) StringNotInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotInAdvancedFilterOutput)
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterOutput struct{ *pulumi.OutputState }

func (StringNotInAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInAdvancedFilter)(nil)).Elem()
}

func (o StringNotInAdvancedFilterOutput) ToStringNotInAdvancedFilterOutput() StringNotInAdvancedFilterOutput {
	return o
}

func (o StringNotInAdvancedFilterOutput) ToStringNotInAdvancedFilterOutputWithContext(ctx context.Context) StringNotInAdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotInAdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotIn'.
func (o StringNotInAdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotInAdvancedFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInAdvancedFilterResponse)(nil)).Elem()
}

func (o StringNotInAdvancedFilterResponseOutput) ToStringNotInAdvancedFilterResponseOutput() StringNotInAdvancedFilterResponseOutput {
	return o
}

func (o StringNotInAdvancedFilterResponseOutput) ToStringNotInAdvancedFilterResponseOutputWithContext(ctx context.Context) StringNotInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotIn'.
func (o StringNotInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotInAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotIn Filter.
type StringNotInFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotInFilterInput is an input type that accepts StringNotInFilterArgs and StringNotInFilterOutput values.
// You can construct a concrete instance of `StringNotInFilterInput` via:
//
//	StringNotInFilterArgs{...}
type StringNotInFilterInput interface {
	pulumi.Input

	ToStringNotInFilterOutput() StringNotInFilterOutput
	ToStringNotInFilterOutputWithContext(context.Context) StringNotInFilterOutput
}

// StringNotIn Filter.
type StringNotInFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotInFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInFilter)(nil)).Elem()
}

func (i StringNotInFilterArgs) ToStringNotInFilterOutput() StringNotInFilterOutput {
	return i.ToStringNotInFilterOutputWithContext(context.Background())
}

func (i StringNotInFilterArgs) ToStringNotInFilterOutputWithContext(ctx context.Context) StringNotInFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotInFilterOutput)
}

// StringNotIn Filter.
type StringNotInFilterOutput struct{ *pulumi.OutputState }

func (StringNotInFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInFilter)(nil)).Elem()
}

func (o StringNotInFilterOutput) ToStringNotInFilterOutput() StringNotInFilterOutput {
	return o
}

func (o StringNotInFilterOutput) ToStringNotInFilterOutputWithContext(ctx context.Context) StringNotInFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotInFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotInFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotIn'.
func (o StringNotInFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotInFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotInFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotInFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotIn Filter.
type StringNotInFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotIn Filter.
type StringNotInFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotInFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInFilterResponse)(nil)).Elem()
}

func (o StringNotInFilterResponseOutput) ToStringNotInFilterResponseOutput() StringNotInFilterResponseOutput {
	return o
}

func (o StringNotInFilterResponseOutput) ToStringNotInFilterResponseOutputWithContext(ctx context.Context) StringNotInFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotInFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotInFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
// Expected value is 'StringNotIn'.
func (o StringNotInFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotInFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotInFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotInFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Properties of the Topic Spaces Configuration.
type TopicSpacesConfiguration struct {
	// Client authentication settings for topic spaces configuration.
	ClientAuthentication *ClientAuthenticationSettings `pulumi:"clientAuthentication"`
	// The maximum number of sessions per authentication name. The property default value is 1.
	// Min allowed value is 1 and max allowed value is 100.
	MaximumClientSessionsPerAuthenticationName *int `pulumi:"maximumClientSessionsPerAuthenticationName"`
	// The maximum session expiry in hours. The property default value is 1 hour.
	// Min allowed value is 1 hour and max allowed value is 8 hours.
	MaximumSessionExpiryInHours *int `pulumi:"maximumSessionExpiryInHours"`
	// Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.
	// This property should be in the following format '/subscriptions/{subId}/resourcegroups/{resourceGroupName}/providers/microsoft.EventGrid/topics/{topicName}'.
	// This topic should reside in the same region where namespace is located.
	RouteTopicResourceId *string `pulumi:"routeTopicResourceId"`
	// Routing enrichments for topic spaces configuration
	RoutingEnrichments *RoutingEnrichments `pulumi:"routingEnrichments"`
	// Routing identity info for topic spaces configuration.
	RoutingIdentityInfo *RoutingIdentityInfo `pulumi:"routingIdentityInfo"`
	// Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.
	State *string `pulumi:"state"`
}

// Defaults sets the appropriate defaults for TopicSpacesConfiguration
func (val *TopicSpacesConfiguration) Defaults() *TopicSpacesConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.State == nil {
		state_ := "Disabled"
		tmp.State = &state_
	}
	return &tmp
}

// TopicSpacesConfigurationInput is an input type that accepts TopicSpacesConfigurationArgs and TopicSpacesConfigurationOutput values.
// You can construct a concrete instance of `TopicSpacesConfigurationInput` via:
//
//	TopicSpacesConfigurationArgs{...}
type TopicSpacesConfigurationInput interface {
	pulumi.Input

	ToTopicSpacesConfigurationOutput() TopicSpacesConfigurationOutput
	ToTopicSpacesConfigurationOutputWithContext(context.Context) TopicSpacesConfigurationOutput
}

// Properties of the Topic Spaces Configuration.
type TopicSpacesConfigurationArgs struct {
	// Client authentication settings for topic spaces configuration.
	ClientAuthentication ClientAuthenticationSettingsPtrInput `pulumi:"clientAuthentication"`
	// The maximum number of sessions per authentication name. The property default value is 1.
	// Min allowed value is 1 and max allowed value is 100.
	MaximumClientSessionsPerAuthenticationName pulumi.IntPtrInput `pulumi:"maximumClientSessionsPerAuthenticationName"`
	// The maximum session expiry in hours. The property default value is 1 hour.
	// Min allowed value is 1 hour and max allowed value is 8 hours.
	MaximumSessionExpiryInHours pulumi.IntPtrInput `pulumi:"maximumSessionExpiryInHours"`
	// Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.
	// This property should be in the following format '/subscriptions/{subId}/resourcegroups/{resourceGroupName}/providers/microsoft.EventGrid/topics/{topicName}'.
	// This topic should reside in the same region where namespace is located.
	RouteTopicResourceId pulumi.StringPtrInput `pulumi:"routeTopicResourceId"`
	// Routing enrichments for topic spaces configuration
	RoutingEnrichments RoutingEnrichmentsPtrInput `pulumi:"routingEnrichments"`
	// Routing identity info for topic spaces configuration.
	RoutingIdentityInfo RoutingIdentityInfoPtrInput `pulumi:"routingIdentityInfo"`
	// Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.
	State pulumi.StringPtrInput `pulumi:"state"`
}

// Defaults sets the appropriate defaults for TopicSpacesConfigurationArgs
func (val *TopicSpacesConfigurationArgs) Defaults() *TopicSpacesConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.State == nil {
		tmp.State = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (TopicSpacesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpacesConfiguration)(nil)).Elem()
}

func (i TopicSpacesConfigurationArgs) ToTopicSpacesConfigurationOutput() TopicSpacesConfigurationOutput {
	return i.ToTopicSpacesConfigurationOutputWithContext(context.Background())
}

func (i TopicSpacesConfigurationArgs) ToTopicSpacesConfigurationOutputWithContext(ctx context.Context) TopicSpacesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpacesConfigurationOutput)
}

func (i TopicSpacesConfigurationArgs) ToTopicSpacesConfigurationPtrOutput() TopicSpacesConfigurationPtrOutput {
	return i.ToTopicSpacesConfigurationPtrOutputWithContext(context.Background())
}

func (i TopicSpacesConfigurationArgs) ToTopicSpacesConfigurationPtrOutputWithContext(ctx context.Context) TopicSpacesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpacesConfigurationOutput).ToTopicSpacesConfigurationPtrOutputWithContext(ctx)
}

// TopicSpacesConfigurationPtrInput is an input type that accepts TopicSpacesConfigurationArgs, TopicSpacesConfigurationPtr and TopicSpacesConfigurationPtrOutput values.
// You can construct a concrete instance of `TopicSpacesConfigurationPtrInput` via:
//
//	        TopicSpacesConfigurationArgs{...}
//
//	or:
//
//	        nil
type TopicSpacesConfigurationPtrInput interface {
	pulumi.Input

	ToTopicSpacesConfigurationPtrOutput() TopicSpacesConfigurationPtrOutput
	ToTopicSpacesConfigurationPtrOutputWithContext(context.Context) TopicSpacesConfigurationPtrOutput
}

type topicSpacesConfigurationPtrType TopicSpacesConfigurationArgs

func TopicSpacesConfigurationPtr(v *TopicSpacesConfigurationArgs) TopicSpacesConfigurationPtrInput {
	return (*topicSpacesConfigurationPtrType)(v)
}

func (*topicSpacesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpacesConfiguration)(nil)).Elem()
}

func (i *topicSpacesConfigurationPtrType) ToTopicSpacesConfigurationPtrOutput() TopicSpacesConfigurationPtrOutput {
	return i.ToTopicSpacesConfigurationPtrOutputWithContext(context.Background())
}

func (i *topicSpacesConfigurationPtrType) ToTopicSpacesConfigurationPtrOutputWithContext(ctx context.Context) TopicSpacesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSpacesConfigurationPtrOutput)
}

// Properties of the Topic Spaces Configuration.
type TopicSpacesConfigurationOutput struct{ *pulumi.OutputState }

func (TopicSpacesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpacesConfiguration)(nil)).Elem()
}

func (o TopicSpacesConfigurationOutput) ToTopicSpacesConfigurationOutput() TopicSpacesConfigurationOutput {
	return o
}

func (o TopicSpacesConfigurationOutput) ToTopicSpacesConfigurationOutputWithContext(ctx context.Context) TopicSpacesConfigurationOutput {
	return o
}

func (o TopicSpacesConfigurationOutput) ToTopicSpacesConfigurationPtrOutput() TopicSpacesConfigurationPtrOutput {
	return o.ToTopicSpacesConfigurationPtrOutputWithContext(context.Background())
}

func (o TopicSpacesConfigurationOutput) ToTopicSpacesConfigurationPtrOutputWithContext(ctx context.Context) TopicSpacesConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSpacesConfiguration) *TopicSpacesConfiguration {
		return &v
	}).(TopicSpacesConfigurationPtrOutput)
}

// Client authentication settings for topic spaces configuration.
func (o TopicSpacesConfigurationOutput) ClientAuthentication() ClientAuthenticationSettingsPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfiguration) *ClientAuthenticationSettings { return v.ClientAuthentication }).(ClientAuthenticationSettingsPtrOutput)
}

// The maximum number of sessions per authentication name. The property default value is 1.
// Min allowed value is 1 and max allowed value is 100.
func (o TopicSpacesConfigurationOutput) MaximumClientSessionsPerAuthenticationName() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfiguration) *int { return v.MaximumClientSessionsPerAuthenticationName }).(pulumi.IntPtrOutput)
}

// The maximum session expiry in hours. The property default value is 1 hour.
// Min allowed value is 1 hour and max allowed value is 8 hours.
func (o TopicSpacesConfigurationOutput) MaximumSessionExpiryInHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfiguration) *int { return v.MaximumSessionExpiryInHours }).(pulumi.IntPtrOutput)
}

// Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.
// This property should be in the following format '/subscriptions/{subId}/resourcegroups/{resourceGroupName}/providers/microsoft.EventGrid/topics/{topicName}'.
// This topic should reside in the same region where namespace is located.
func (o TopicSpacesConfigurationOutput) RouteTopicResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfiguration) *string { return v.RouteTopicResourceId }).(pulumi.StringPtrOutput)
}

// Routing enrichments for topic spaces configuration
func (o TopicSpacesConfigurationOutput) RoutingEnrichments() RoutingEnrichmentsPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfiguration) *RoutingEnrichments { return v.RoutingEnrichments }).(RoutingEnrichmentsPtrOutput)
}

// Routing identity info for topic spaces configuration.
func (o TopicSpacesConfigurationOutput) RoutingIdentityInfo() RoutingIdentityInfoPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfiguration) *RoutingIdentityInfo { return v.RoutingIdentityInfo }).(RoutingIdentityInfoPtrOutput)
}

// Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.
func (o TopicSpacesConfigurationOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfiguration) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TopicSpacesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TopicSpacesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpacesConfiguration)(nil)).Elem()
}

func (o TopicSpacesConfigurationPtrOutput) ToTopicSpacesConfigurationPtrOutput() TopicSpacesConfigurationPtrOutput {
	return o
}

func (o TopicSpacesConfigurationPtrOutput) ToTopicSpacesConfigurationPtrOutputWithContext(ctx context.Context) TopicSpacesConfigurationPtrOutput {
	return o
}

func (o TopicSpacesConfigurationPtrOutput) Elem() TopicSpacesConfigurationOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) TopicSpacesConfiguration {
		if v != nil {
			return *v
		}
		var ret TopicSpacesConfiguration
		return ret
	}).(TopicSpacesConfigurationOutput)
}

// Client authentication settings for topic spaces configuration.
func (o TopicSpacesConfigurationPtrOutput) ClientAuthentication() ClientAuthenticationSettingsPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) *ClientAuthenticationSettings {
		if v == nil {
			return nil
		}
		return v.ClientAuthentication
	}).(ClientAuthenticationSettingsPtrOutput)
}

// The maximum number of sessions per authentication name. The property default value is 1.
// Min allowed value is 1 and max allowed value is 100.
func (o TopicSpacesConfigurationPtrOutput) MaximumClientSessionsPerAuthenticationName() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaximumClientSessionsPerAuthenticationName
	}).(pulumi.IntPtrOutput)
}

// The maximum session expiry in hours. The property default value is 1 hour.
// Min allowed value is 1 hour and max allowed value is 8 hours.
func (o TopicSpacesConfigurationPtrOutput) MaximumSessionExpiryInHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaximumSessionExpiryInHours
	}).(pulumi.IntPtrOutput)
}

// Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.
// This property should be in the following format '/subscriptions/{subId}/resourcegroups/{resourceGroupName}/providers/microsoft.EventGrid/topics/{topicName}'.
// This topic should reside in the same region where namespace is located.
func (o TopicSpacesConfigurationPtrOutput) RouteTopicResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RouteTopicResourceId
	}).(pulumi.StringPtrOutput)
}

// Routing enrichments for topic spaces configuration
func (o TopicSpacesConfigurationPtrOutput) RoutingEnrichments() RoutingEnrichmentsPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) *RoutingEnrichments {
		if v == nil {
			return nil
		}
		return v.RoutingEnrichments
	}).(RoutingEnrichmentsPtrOutput)
}

// Routing identity info for topic spaces configuration.
func (o TopicSpacesConfigurationPtrOutput) RoutingIdentityInfo() RoutingIdentityInfoPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) *RoutingIdentityInfo {
		if v == nil {
			return nil
		}
		return v.RoutingIdentityInfo
	}).(RoutingIdentityInfoPtrOutput)
}

// Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.
func (o TopicSpacesConfigurationPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Properties of the Topic Spaces Configuration.
type TopicSpacesConfigurationResponse struct {
	// Client authentication settings for topic spaces configuration.
	ClientAuthentication *ClientAuthenticationSettingsResponse `pulumi:"clientAuthentication"`
	// The endpoint for the topic spaces configuration. This is a read-only property.
	Hostname string `pulumi:"hostname"`
	// The maximum number of sessions per authentication name. The property default value is 1.
	// Min allowed value is 1 and max allowed value is 100.
	MaximumClientSessionsPerAuthenticationName *int `pulumi:"maximumClientSessionsPerAuthenticationName"`
	// The maximum session expiry in hours. The property default value is 1 hour.
	// Min allowed value is 1 hour and max allowed value is 8 hours.
	MaximumSessionExpiryInHours *int `pulumi:"maximumSessionExpiryInHours"`
	// Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.
	// This property should be in the following format '/subscriptions/{subId}/resourcegroups/{resourceGroupName}/providers/microsoft.EventGrid/topics/{topicName}'.
	// This topic should reside in the same region where namespace is located.
	RouteTopicResourceId *string `pulumi:"routeTopicResourceId"`
	// Routing enrichments for topic spaces configuration
	RoutingEnrichments *RoutingEnrichmentsResponse `pulumi:"routingEnrichments"`
	// Routing identity info for topic spaces configuration.
	RoutingIdentityInfo *RoutingIdentityInfoResponse `pulumi:"routingIdentityInfo"`
	// Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.
	State *string `pulumi:"state"`
}

// Defaults sets the appropriate defaults for TopicSpacesConfigurationResponse
func (val *TopicSpacesConfigurationResponse) Defaults() *TopicSpacesConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.State == nil {
		state_ := "Disabled"
		tmp.State = &state_
	}
	return &tmp
}

// Properties of the Topic Spaces Configuration.
type TopicSpacesConfigurationResponseOutput struct{ *pulumi.OutputState }

func (TopicSpacesConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSpacesConfigurationResponse)(nil)).Elem()
}

func (o TopicSpacesConfigurationResponseOutput) ToTopicSpacesConfigurationResponseOutput() TopicSpacesConfigurationResponseOutput {
	return o
}

func (o TopicSpacesConfigurationResponseOutput) ToTopicSpacesConfigurationResponseOutputWithContext(ctx context.Context) TopicSpacesConfigurationResponseOutput {
	return o
}

// Client authentication settings for topic spaces configuration.
func (o TopicSpacesConfigurationResponseOutput) ClientAuthentication() ClientAuthenticationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) *ClientAuthenticationSettingsResponse {
		return v.ClientAuthentication
	}).(ClientAuthenticationSettingsResponsePtrOutput)
}

// The endpoint for the topic spaces configuration. This is a read-only property.
func (o TopicSpacesConfigurationResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// The maximum number of sessions per authentication name. The property default value is 1.
// Min allowed value is 1 and max allowed value is 100.
func (o TopicSpacesConfigurationResponseOutput) MaximumClientSessionsPerAuthenticationName() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) *int { return v.MaximumClientSessionsPerAuthenticationName }).(pulumi.IntPtrOutput)
}

// The maximum session expiry in hours. The property default value is 1 hour.
// Min allowed value is 1 hour and max allowed value is 8 hours.
func (o TopicSpacesConfigurationResponseOutput) MaximumSessionExpiryInHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) *int { return v.MaximumSessionExpiryInHours }).(pulumi.IntPtrOutput)
}

// Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.
// This property should be in the following format '/subscriptions/{subId}/resourcegroups/{resourceGroupName}/providers/microsoft.EventGrid/topics/{topicName}'.
// This topic should reside in the same region where namespace is located.
func (o TopicSpacesConfigurationResponseOutput) RouteTopicResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) *string { return v.RouteTopicResourceId }).(pulumi.StringPtrOutput)
}

// Routing enrichments for topic spaces configuration
func (o TopicSpacesConfigurationResponseOutput) RoutingEnrichments() RoutingEnrichmentsResponsePtrOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) *RoutingEnrichmentsResponse { return v.RoutingEnrichments }).(RoutingEnrichmentsResponsePtrOutput)
}

// Routing identity info for topic spaces configuration.
func (o TopicSpacesConfigurationResponseOutput) RoutingIdentityInfo() RoutingIdentityInfoResponsePtrOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) *RoutingIdentityInfoResponse { return v.RoutingIdentityInfo }).(RoutingIdentityInfoResponsePtrOutput)
}

// Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.
func (o TopicSpacesConfigurationResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSpacesConfigurationResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TopicSpacesConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (TopicSpacesConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSpacesConfigurationResponse)(nil)).Elem()
}

func (o TopicSpacesConfigurationResponsePtrOutput) ToTopicSpacesConfigurationResponsePtrOutput() TopicSpacesConfigurationResponsePtrOutput {
	return o
}

func (o TopicSpacesConfigurationResponsePtrOutput) ToTopicSpacesConfigurationResponsePtrOutputWithContext(ctx context.Context) TopicSpacesConfigurationResponsePtrOutput {
	return o
}

func (o TopicSpacesConfigurationResponsePtrOutput) Elem() TopicSpacesConfigurationResponseOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) TopicSpacesConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret TopicSpacesConfigurationResponse
		return ret
	}).(TopicSpacesConfigurationResponseOutput)
}

// Client authentication settings for topic spaces configuration.
func (o TopicSpacesConfigurationResponsePtrOutput) ClientAuthentication() ClientAuthenticationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *ClientAuthenticationSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ClientAuthentication
	}).(ClientAuthenticationSettingsResponsePtrOutput)
}

// The endpoint for the topic spaces configuration. This is a read-only property.
func (o TopicSpacesConfigurationResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The maximum number of sessions per authentication name. The property default value is 1.
// Min allowed value is 1 and max allowed value is 100.
func (o TopicSpacesConfigurationResponsePtrOutput) MaximumClientSessionsPerAuthenticationName() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaximumClientSessionsPerAuthenticationName
	}).(pulumi.IntPtrOutput)
}

// The maximum session expiry in hours. The property default value is 1 hour.
// Min allowed value is 1 hour and max allowed value is 8 hours.
func (o TopicSpacesConfigurationResponsePtrOutput) MaximumSessionExpiryInHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaximumSessionExpiryInHours
	}).(pulumi.IntPtrOutput)
}

// Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.
// This property should be in the following format '/subscriptions/{subId}/resourcegroups/{resourceGroupName}/providers/microsoft.EventGrid/topics/{topicName}'.
// This topic should reside in the same region where namespace is located.
func (o TopicSpacesConfigurationResponsePtrOutput) RouteTopicResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RouteTopicResourceId
	}).(pulumi.StringPtrOutput)
}

// Routing enrichments for topic spaces configuration
func (o TopicSpacesConfigurationResponsePtrOutput) RoutingEnrichments() RoutingEnrichmentsResponsePtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *RoutingEnrichmentsResponse {
		if v == nil {
			return nil
		}
		return v.RoutingEnrichments
	}).(RoutingEnrichmentsResponsePtrOutput)
}

// Routing identity info for topic spaces configuration.
func (o TopicSpacesConfigurationResponsePtrOutput) RoutingIdentityInfo() RoutingIdentityInfoResponsePtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *RoutingIdentityInfoResponse {
		if v == nil {
			return nil
		}
		return v.RoutingIdentityInfo
	}).(RoutingIdentityInfoResponsePtrOutput)
}

// Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.
func (o TopicSpacesConfigurationResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSpacesConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Properties of the Topics Configuration.
type TopicsConfigurationResponse struct {
	// The hostname for the topics configuration. This is a read-only property.
	Hostname string `pulumi:"hostname"`
}

// Properties of the Topics Configuration.
type TopicsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (TopicsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsConfigurationResponse)(nil)).Elem()
}

func (o TopicsConfigurationResponseOutput) ToTopicsConfigurationResponseOutput() TopicsConfigurationResponseOutput {
	return o
}

func (o TopicsConfigurationResponseOutput) ToTopicsConfigurationResponseOutputWithContext(ctx context.Context) TopicsConfigurationResponseOutput {
	return o
}

// The hostname for the topics configuration. This is a read-only property.
func (o TopicsConfigurationResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsConfigurationResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

type TopicsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (TopicsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicsConfigurationResponse)(nil)).Elem()
}

func (o TopicsConfigurationResponsePtrOutput) ToTopicsConfigurationResponsePtrOutput() TopicsConfigurationResponsePtrOutput {
	return o
}

func (o TopicsConfigurationResponsePtrOutput) ToTopicsConfigurationResponsePtrOutputWithContext(ctx context.Context) TopicsConfigurationResponsePtrOutput {
	return o
}

func (o TopicsConfigurationResponsePtrOutput) Elem() TopicsConfigurationResponseOutput {
	return o.ApplyT(func(v *TopicsConfigurationResponse) TopicsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret TopicsConfigurationResponse
		return ret
	}).(TopicsConfigurationResponseOutput)
}

// The hostname for the topics configuration. This is a read-only property.
func (o TopicsConfigurationResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The information about the user identity.
type UserIdentityProperties struct {
	// The client id of user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId *string `pulumi:"principalId"`
}

// UserIdentityPropertiesInput is an input type that accepts UserIdentityPropertiesArgs and UserIdentityPropertiesOutput values.
// You can construct a concrete instance of `UserIdentityPropertiesInput` via:
//
//	UserIdentityPropertiesArgs{...}
type UserIdentityPropertiesInput interface {
	pulumi.Input

	ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput
	ToUserIdentityPropertiesOutputWithContext(context.Context) UserIdentityPropertiesOutput
}

// The information about the user identity.
type UserIdentityPropertiesArgs struct {
	// The client id of user assigned identity.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (UserIdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityProperties)(nil)).Elem()
}

func (i UserIdentityPropertiesArgs) ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput {
	return i.ToUserIdentityPropertiesOutputWithContext(context.Background())
}

func (i UserIdentityPropertiesArgs) ToUserIdentityPropertiesOutputWithContext(ctx context.Context) UserIdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPropertiesOutput)
}

// UserIdentityPropertiesMapInput is an input type that accepts UserIdentityPropertiesMap and UserIdentityPropertiesMapOutput values.
// You can construct a concrete instance of `UserIdentityPropertiesMapInput` via:
//
//	UserIdentityPropertiesMap{ "key": UserIdentityPropertiesArgs{...} }
type UserIdentityPropertiesMapInput interface {
	pulumi.Input

	ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput
	ToUserIdentityPropertiesMapOutputWithContext(context.Context) UserIdentityPropertiesMapOutput
}

type UserIdentityPropertiesMap map[string]UserIdentityPropertiesInput

func (UserIdentityPropertiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityProperties)(nil)).Elem()
}

func (i UserIdentityPropertiesMap) ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput {
	return i.ToUserIdentityPropertiesMapOutputWithContext(context.Background())
}

func (i UserIdentityPropertiesMap) ToUserIdentityPropertiesMapOutputWithContext(ctx context.Context) UserIdentityPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPropertiesMapOutput)
}

// The information about the user identity.
type UserIdentityPropertiesOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityProperties)(nil)).Elem()
}

func (o UserIdentityPropertiesOutput) ToUserIdentityPropertiesOutput() UserIdentityPropertiesOutput {
	return o
}

func (o UserIdentityPropertiesOutput) ToUserIdentityPropertiesOutputWithContext(ctx context.Context) UserIdentityPropertiesOutput {
	return o
}

// The client id of user assigned identity.
func (o UserIdentityPropertiesOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityProperties) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The principal id of user assigned identity.
func (o UserIdentityPropertiesOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityProperties) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityPropertiesMapOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityProperties)(nil)).Elem()
}

func (o UserIdentityPropertiesMapOutput) ToUserIdentityPropertiesMapOutput() UserIdentityPropertiesMapOutput {
	return o
}

func (o UserIdentityPropertiesMapOutput) ToUserIdentityPropertiesMapOutputWithContext(ctx context.Context) UserIdentityPropertiesMapOutput {
	return o
}

func (o UserIdentityPropertiesMapOutput) MapIndex(k pulumi.StringInput) UserIdentityPropertiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityProperties {
		return vs[0].(map[string]UserIdentityProperties)[vs[1].(string)]
	}).(UserIdentityPropertiesOutput)
}

// The information about the user identity.
type UserIdentityPropertiesResponse struct {
	// The client id of user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId *string `pulumi:"principalId"`
}

// The information about the user identity.
type UserIdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutput() UserIdentityPropertiesResponseOutput {
	return o
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseOutput {
	return o
}

// The client id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The principal id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityPropertiesResponseMapOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutput() UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) MapIndex(k pulumi.StringInput) UserIdentityPropertiesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityPropertiesResponse {
		return vs[0].(map[string]UserIdentityPropertiesResponse)[vs[1].(string)]
	}).(UserIdentityPropertiesResponseOutput)
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestination struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `pulumi:"azureActiveDirectoryTenantId"`
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'WebHook'.
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Minimum TLS version that should be supported by webhook endpoint
	MinimumTlsVersionAllowed *string `pulumi:"minimumTlsVersionAllowed"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// Defaults sets the appropriate defaults for WebHookEventSubscriptionDestination
func (val *WebHookEventSubscriptionDestination) Defaults() *WebHookEventSubscriptionDestination {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxEventsPerBatch == nil {
		maxEventsPerBatch_ := 1
		tmp.MaxEventsPerBatch = &maxEventsPerBatch_
	}
	if tmp.PreferredBatchSizeInKilobytes == nil {
		preferredBatchSizeInKilobytes_ := 64
		tmp.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes_
	}
	return &tmp
}

// WebHookEventSubscriptionDestinationInput is an input type that accepts WebHookEventSubscriptionDestinationArgs and WebHookEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `WebHookEventSubscriptionDestinationInput` via:
//
//	WebHookEventSubscriptionDestinationArgs{...}
type WebHookEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput
	ToWebHookEventSubscriptionDestinationOutputWithContext(context.Context) WebHookEventSubscriptionDestinationOutput
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestinationArgs struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri pulumi.StringPtrInput `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId pulumi.StringPtrInput `pulumi:"azureActiveDirectoryTenantId"`
	// Delivery attribute details.
	DeliveryAttributeMappings pulumi.ArrayInput `pulumi:"deliveryAttributeMappings"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'WebHook'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Minimum TLS version that should be supported by webhook endpoint
	MinimumTlsVersionAllowed pulumi.StringPtrInput `pulumi:"minimumTlsVersionAllowed"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
}

// Defaults sets the appropriate defaults for WebHookEventSubscriptionDestinationArgs
func (val *WebHookEventSubscriptionDestinationArgs) Defaults() *WebHookEventSubscriptionDestinationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxEventsPerBatch == nil {
		tmp.MaxEventsPerBatch = pulumi.IntPtr(1)
	}
	if tmp.PreferredBatchSizeInKilobytes == nil {
		tmp.PreferredBatchSizeInKilobytes = pulumi.IntPtr(64)
	}
	return &tmp
}
func (WebHookEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestination)(nil)).Elem()
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput {
	return i.ToWebHookEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookEventSubscriptionDestinationOutput)
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationPtrOutput() WebHookEventSubscriptionDestinationPtrOutput {
	return i.ToWebHookEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookEventSubscriptionDestinationOutput).ToWebHookEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// WebHookEventSubscriptionDestinationPtrInput is an input type that accepts WebHookEventSubscriptionDestinationArgs, WebHookEventSubscriptionDestinationPtr and WebHookEventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `WebHookEventSubscriptionDestinationPtrInput` via:
//
//	        WebHookEventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type WebHookEventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToWebHookEventSubscriptionDestinationPtrOutput() WebHookEventSubscriptionDestinationPtrOutput
	ToWebHookEventSubscriptionDestinationPtrOutputWithContext(context.Context) WebHookEventSubscriptionDestinationPtrOutput
}

type webHookEventSubscriptionDestinationPtrType WebHookEventSubscriptionDestinationArgs

func WebHookEventSubscriptionDestinationPtr(v *WebHookEventSubscriptionDestinationArgs) WebHookEventSubscriptionDestinationPtrInput {
	return (*webHookEventSubscriptionDestinationPtrType)(v)
}

func (*webHookEventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebHookEventSubscriptionDestination)(nil)).Elem()
}

func (i *webHookEventSubscriptionDestinationPtrType) ToWebHookEventSubscriptionDestinationPtrOutput() WebHookEventSubscriptionDestinationPtrOutput {
	return i.ToWebHookEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *webHookEventSubscriptionDestinationPtrType) ToWebHookEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookEventSubscriptionDestinationPtrOutput)
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (WebHookEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestination)(nil)).Elem()
}

func (o WebHookEventSubscriptionDestinationOutput) ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationOutput) ToWebHookEventSubscriptionDestinationOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationOutput) ToWebHookEventSubscriptionDestinationPtrOutput() WebHookEventSubscriptionDestinationPtrOutput {
	return o.ToWebHookEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o WebHookEventSubscriptionDestinationOutput) ToWebHookEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebHookEventSubscriptionDestination) *WebHookEventSubscriptionDestination {
		return &v
	}).(WebHookEventSubscriptionDestinationPtrOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) *string { return v.AzureActiveDirectoryApplicationIdOrUri }).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) *string { return v.AzureActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// Delivery attribute details.
func (o WebHookEventSubscriptionDestinationOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'WebHook'.
func (o WebHookEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o WebHookEventSubscriptionDestinationOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Minimum TLS version that should be supported by webhook endpoint
func (o WebHookEventSubscriptionDestinationOutput) MinimumTlsVersionAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) *string { return v.MinimumTlsVersionAllowed }).(pulumi.StringPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o WebHookEventSubscriptionDestinationOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

type WebHookEventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (WebHookEventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebHookEventSubscriptionDestination)(nil)).Elem()
}

func (o WebHookEventSubscriptionDestinationPtrOutput) ToWebHookEventSubscriptionDestinationPtrOutput() WebHookEventSubscriptionDestinationPtrOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationPtrOutput) ToWebHookEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationPtrOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationPtrOutput) Elem() WebHookEventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) WebHookEventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret WebHookEventSubscriptionDestination
		return ret
	}).(WebHookEventSubscriptionDestinationOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationPtrOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryApplicationIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationPtrOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// Delivery attribute details.
func (o WebHookEventSubscriptionDestinationPtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'WebHook'.
func (o WebHookEventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationPtrOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.EndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o WebHookEventSubscriptionDestinationPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Minimum TLS version that should be supported by webhook endpoint
func (o WebHookEventSubscriptionDestinationPtrOutput) MinimumTlsVersionAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.MinimumTlsVersionAllowed
	}).(pulumi.StringPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o WebHookEventSubscriptionDestinationPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestination) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestinationResponse struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `pulumi:"azureActiveDirectoryTenantId"`
	// Delivery attribute details.
	DeliveryAttributeMappings []interface{} `pulumi:"deliveryAttributeMappings"`
	// The base URL that represents the endpoint of the destination of an event subscription.
	EndpointBaseUrl string `pulumi:"endpointBaseUrl"`
	// Type of the endpoint for the event subscription destination.
	// Expected value is 'WebHook'.
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Minimum TLS version that should be supported by webhook endpoint
	MinimumTlsVersionAllowed *string `pulumi:"minimumTlsVersionAllowed"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// Defaults sets the appropriate defaults for WebHookEventSubscriptionDestinationResponse
func (val *WebHookEventSubscriptionDestinationResponse) Defaults() *WebHookEventSubscriptionDestinationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxEventsPerBatch == nil {
		maxEventsPerBatch_ := 1
		tmp.MaxEventsPerBatch = &maxEventsPerBatch_
	}
	if tmp.PreferredBatchSizeInKilobytes == nil {
		preferredBatchSizeInKilobytes_ := 64
		tmp.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes_
	}
	return &tmp
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (WebHookEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o WebHookEventSubscriptionDestinationResponseOutput) ToWebHookEventSubscriptionDestinationResponseOutput() WebHookEventSubscriptionDestinationResponseOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationResponseOutput) ToWebHookEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationResponseOutput {
	return o
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationResponseOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string {
		return v.AzureActiveDirectoryApplicationIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationResponseOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string { return v.AzureActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// Delivery attribute details.
func (o WebHookEventSubscriptionDestinationResponseOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) []interface{} { return v.DeliveryAttributeMappings }).(pulumi.ArrayOutput)
}

// The base URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) string { return v.EndpointBaseUrl }).(pulumi.StringOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'WebHook'.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o WebHookEventSubscriptionDestinationResponseOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Minimum TLS version that should be supported by webhook endpoint
func (o WebHookEventSubscriptionDestinationResponseOutput) MinimumTlsVersionAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string { return v.MinimumTlsVersionAllowed }).(pulumi.StringPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o WebHookEventSubscriptionDestinationResponseOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

type WebHookEventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (WebHookEventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebHookEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o WebHookEventSubscriptionDestinationResponsePtrOutput) ToWebHookEventSubscriptionDestinationResponsePtrOutput() WebHookEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationResponsePtrOutput) ToWebHookEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationResponsePtrOutput) Elem() WebHookEventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) WebHookEventSubscriptionDestinationResponse {
		if v != nil {
			return *v
		}
		var ret WebHookEventSubscriptionDestinationResponse
		return ret
	}).(WebHookEventSubscriptionDestinationResponseOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryApplicationIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// Delivery attribute details.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) DeliveryAttributeMappings() pulumi.ArrayOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.DeliveryAttributeMappings
	}).(pulumi.ArrayOutput)
}

// The base URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) EndpointBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointBaseUrl
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the event subscription destination.
// Expected value is 'WebHook'.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Minimum TLS version that should be supported by webhook endpoint
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) MinimumTlsVersionAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.MinimumTlsVersionAllowed
	}).(pulumi.StringPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o WebHookEventSubscriptionDestinationResponsePtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebHookEventSubscriptionDestinationResponse) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// Information about the WebHook of the partner destination.
type WebhookPartnerDestinationInfo struct {
	// Azure subscription ID of the subscriber. The partner destination associated with the channel will be
	// created under this Azure subscription.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// Partner client authentication
	ClientAuthentication *AzureADPartnerClientAuthentication `pulumi:"clientAuthentication"`
	// The base URL that represents the endpoint of the partner destination.
	EndpointBaseUrl *string `pulumi:"endpointBaseUrl"`
	// Additional context of the partner destination endpoint.
	EndpointServiceContext *string `pulumi:"endpointServiceContext"`
	// Type of the endpoint for the partner destination
	// Expected value is 'WebHook'.
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the partner destination.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// Name of the partner destination associated with the channel.
	Name *string `pulumi:"name"`
	// Azure Resource Group of the subscriber. The partner destination associated with the channel will be
	// created under this resource group.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Change history of the resource move.
	ResourceMoveChangeHistory []ResourceMoveChangeHistory `pulumi:"resourceMoveChangeHistory"`
}

// Defaults sets the appropriate defaults for WebhookPartnerDestinationInfo
func (val *WebhookPartnerDestinationInfo) Defaults() *WebhookPartnerDestinationInfo {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ClientAuthentication = tmp.ClientAuthentication.Defaults()

	if utilities.IsZero(tmp.EndpointType) {
		tmp.EndpointType = "WebHook"
	}
	return &tmp
}

// WebhookPartnerDestinationInfoInput is an input type that accepts WebhookPartnerDestinationInfoArgs and WebhookPartnerDestinationInfoOutput values.
// You can construct a concrete instance of `WebhookPartnerDestinationInfoInput` via:
//
//	WebhookPartnerDestinationInfoArgs{...}
type WebhookPartnerDestinationInfoInput interface {
	pulumi.Input

	ToWebhookPartnerDestinationInfoOutput() WebhookPartnerDestinationInfoOutput
	ToWebhookPartnerDestinationInfoOutputWithContext(context.Context) WebhookPartnerDestinationInfoOutput
}

// Information about the WebHook of the partner destination.
type WebhookPartnerDestinationInfoArgs struct {
	// Azure subscription ID of the subscriber. The partner destination associated with the channel will be
	// created under this Azure subscription.
	AzureSubscriptionId pulumi.StringPtrInput `pulumi:"azureSubscriptionId"`
	// Partner client authentication
	ClientAuthentication AzureADPartnerClientAuthenticationPtrInput `pulumi:"clientAuthentication"`
	// The base URL that represents the endpoint of the partner destination.
	EndpointBaseUrl pulumi.StringPtrInput `pulumi:"endpointBaseUrl"`
	// Additional context of the partner destination endpoint.
	EndpointServiceContext pulumi.StringPtrInput `pulumi:"endpointServiceContext"`
	// Type of the endpoint for the partner destination
	// Expected value is 'WebHook'.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The URL that represents the endpoint of the partner destination.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
	// Name of the partner destination associated with the channel.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Azure Resource Group of the subscriber. The partner destination associated with the channel will be
	// created under this resource group.
	ResourceGroupName pulumi.StringPtrInput `pulumi:"resourceGroupName"`
	// Change history of the resource move.
	ResourceMoveChangeHistory ResourceMoveChangeHistoryArrayInput `pulumi:"resourceMoveChangeHistory"`
}

// Defaults sets the appropriate defaults for WebhookPartnerDestinationInfoArgs
func (val *WebhookPartnerDestinationInfoArgs) Defaults() *WebhookPartnerDestinationInfoArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.EndpointType == nil {
		tmp.EndpointType = pulumi.String("WebHook")
	}
	return &tmp
}
func (WebhookPartnerDestinationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookPartnerDestinationInfo)(nil)).Elem()
}

func (i WebhookPartnerDestinationInfoArgs) ToWebhookPartnerDestinationInfoOutput() WebhookPartnerDestinationInfoOutput {
	return i.ToWebhookPartnerDestinationInfoOutputWithContext(context.Background())
}

func (i WebhookPartnerDestinationInfoArgs) ToWebhookPartnerDestinationInfoOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookPartnerDestinationInfoOutput)
}

func (i WebhookPartnerDestinationInfoArgs) ToWebhookPartnerDestinationInfoPtrOutput() WebhookPartnerDestinationInfoPtrOutput {
	return i.ToWebhookPartnerDestinationInfoPtrOutputWithContext(context.Background())
}

func (i WebhookPartnerDestinationInfoArgs) ToWebhookPartnerDestinationInfoPtrOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookPartnerDestinationInfoOutput).ToWebhookPartnerDestinationInfoPtrOutputWithContext(ctx)
}

// WebhookPartnerDestinationInfoPtrInput is an input type that accepts WebhookPartnerDestinationInfoArgs, WebhookPartnerDestinationInfoPtr and WebhookPartnerDestinationInfoPtrOutput values.
// You can construct a concrete instance of `WebhookPartnerDestinationInfoPtrInput` via:
//
//	        WebhookPartnerDestinationInfoArgs{...}
//
//	or:
//
//	        nil
type WebhookPartnerDestinationInfoPtrInput interface {
	pulumi.Input

	ToWebhookPartnerDestinationInfoPtrOutput() WebhookPartnerDestinationInfoPtrOutput
	ToWebhookPartnerDestinationInfoPtrOutputWithContext(context.Context) WebhookPartnerDestinationInfoPtrOutput
}

type webhookPartnerDestinationInfoPtrType WebhookPartnerDestinationInfoArgs

func WebhookPartnerDestinationInfoPtr(v *WebhookPartnerDestinationInfoArgs) WebhookPartnerDestinationInfoPtrInput {
	return (*webhookPartnerDestinationInfoPtrType)(v)
}

func (*webhookPartnerDestinationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookPartnerDestinationInfo)(nil)).Elem()
}

func (i *webhookPartnerDestinationInfoPtrType) ToWebhookPartnerDestinationInfoPtrOutput() WebhookPartnerDestinationInfoPtrOutput {
	return i.ToWebhookPartnerDestinationInfoPtrOutputWithContext(context.Background())
}

func (i *webhookPartnerDestinationInfoPtrType) ToWebhookPartnerDestinationInfoPtrOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookPartnerDestinationInfoPtrOutput)
}

// Information about the WebHook of the partner destination.
type WebhookPartnerDestinationInfoOutput struct{ *pulumi.OutputState }

func (WebhookPartnerDestinationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookPartnerDestinationInfo)(nil)).Elem()
}

func (o WebhookPartnerDestinationInfoOutput) ToWebhookPartnerDestinationInfoOutput() WebhookPartnerDestinationInfoOutput {
	return o
}

func (o WebhookPartnerDestinationInfoOutput) ToWebhookPartnerDestinationInfoOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoOutput {
	return o
}

func (o WebhookPartnerDestinationInfoOutput) ToWebhookPartnerDestinationInfoPtrOutput() WebhookPartnerDestinationInfoPtrOutput {
	return o.ToWebhookPartnerDestinationInfoPtrOutputWithContext(context.Background())
}

func (o WebhookPartnerDestinationInfoOutput) ToWebhookPartnerDestinationInfoPtrOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookPartnerDestinationInfo) *WebhookPartnerDestinationInfo {
		return &v
	}).(WebhookPartnerDestinationInfoPtrOutput)
}

// Azure subscription ID of the subscriber. The partner destination associated with the channel will be
// created under this Azure subscription.
func (o WebhookPartnerDestinationInfoOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// Partner client authentication
func (o WebhookPartnerDestinationInfoOutput) ClientAuthentication() AzureADPartnerClientAuthenticationPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) *AzureADPartnerClientAuthentication {
		return v.ClientAuthentication
	}).(AzureADPartnerClientAuthenticationPtrOutput)
}

// The base URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoOutput) EndpointBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) *string { return v.EndpointBaseUrl }).(pulumi.StringPtrOutput)
}

// Additional context of the partner destination endpoint.
func (o WebhookPartnerDestinationInfoOutput) EndpointServiceContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) *string { return v.EndpointServiceContext }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the partner destination
// Expected value is 'WebHook'.
func (o WebhookPartnerDestinationInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// Name of the partner destination associated with the channel.
func (o WebhookPartnerDestinationInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner destination associated with the channel will be
// created under this resource group.
func (o WebhookPartnerDestinationInfoOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

// Change history of the resource move.
func (o WebhookPartnerDestinationInfoOutput) ResourceMoveChangeHistory() ResourceMoveChangeHistoryArrayOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfo) []ResourceMoveChangeHistory { return v.ResourceMoveChangeHistory }).(ResourceMoveChangeHistoryArrayOutput)
}

type WebhookPartnerDestinationInfoPtrOutput struct{ *pulumi.OutputState }

func (WebhookPartnerDestinationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookPartnerDestinationInfo)(nil)).Elem()
}

func (o WebhookPartnerDestinationInfoPtrOutput) ToWebhookPartnerDestinationInfoPtrOutput() WebhookPartnerDestinationInfoPtrOutput {
	return o
}

func (o WebhookPartnerDestinationInfoPtrOutput) ToWebhookPartnerDestinationInfoPtrOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoPtrOutput {
	return o
}

func (o WebhookPartnerDestinationInfoPtrOutput) Elem() WebhookPartnerDestinationInfoOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) WebhookPartnerDestinationInfo {
		if v != nil {
			return *v
		}
		var ret WebhookPartnerDestinationInfo
		return ret
	}).(WebhookPartnerDestinationInfoOutput)
}

// Azure subscription ID of the subscriber. The partner destination associated with the channel will be
// created under this Azure subscription.
func (o WebhookPartnerDestinationInfoPtrOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *string {
		if v == nil {
			return nil
		}
		return v.AzureSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Partner client authentication
func (o WebhookPartnerDestinationInfoPtrOutput) ClientAuthentication() AzureADPartnerClientAuthenticationPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *AzureADPartnerClientAuthentication {
		if v == nil {
			return nil
		}
		return v.ClientAuthentication
	}).(AzureADPartnerClientAuthenticationPtrOutput)
}

// The base URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoPtrOutput) EndpointBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *string {
		if v == nil {
			return nil
		}
		return v.EndpointBaseUrl
	}).(pulumi.StringPtrOutput)
}

// Additional context of the partner destination endpoint.
func (o WebhookPartnerDestinationInfoPtrOutput) EndpointServiceContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *string {
		if v == nil {
			return nil
		}
		return v.EndpointServiceContext
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the partner destination
// Expected value is 'WebHook'.
func (o WebhookPartnerDestinationInfoPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoPtrOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *string {
		if v == nil {
			return nil
		}
		return v.EndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Name of the partner destination associated with the channel.
func (o WebhookPartnerDestinationInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner destination associated with the channel will be
// created under this resource group.
func (o WebhookPartnerDestinationInfoPtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// Change history of the resource move.
func (o WebhookPartnerDestinationInfoPtrOutput) ResourceMoveChangeHistory() ResourceMoveChangeHistoryArrayOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfo) []ResourceMoveChangeHistory {
		if v == nil {
			return nil
		}
		return v.ResourceMoveChangeHistory
	}).(ResourceMoveChangeHistoryArrayOutput)
}

// Information about the WebHook of the partner destination.
type WebhookPartnerDestinationInfoResponse struct {
	// Azure subscription ID of the subscriber. The partner destination associated with the channel will be
	// created under this Azure subscription.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// Partner client authentication
	ClientAuthentication *AzureADPartnerClientAuthenticationResponse `pulumi:"clientAuthentication"`
	// The base URL that represents the endpoint of the partner destination.
	EndpointBaseUrl *string `pulumi:"endpointBaseUrl"`
	// Additional context of the partner destination endpoint.
	EndpointServiceContext *string `pulumi:"endpointServiceContext"`
	// Type of the endpoint for the partner destination
	// Expected value is 'WebHook'.
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the partner destination.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// Name of the partner destination associated with the channel.
	Name *string `pulumi:"name"`
	// Azure Resource Group of the subscriber. The partner destination associated with the channel will be
	// created under this resource group.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Change history of the resource move.
	ResourceMoveChangeHistory []ResourceMoveChangeHistoryResponse `pulumi:"resourceMoveChangeHistory"`
}

// Defaults sets the appropriate defaults for WebhookPartnerDestinationInfoResponse
func (val *WebhookPartnerDestinationInfoResponse) Defaults() *WebhookPartnerDestinationInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ClientAuthentication = tmp.ClientAuthentication.Defaults()

	if utilities.IsZero(tmp.EndpointType) {
		tmp.EndpointType = "WebHook"
	}
	return &tmp
}

// Information about the WebHook of the partner destination.
type WebhookPartnerDestinationInfoResponseOutput struct{ *pulumi.OutputState }

func (WebhookPartnerDestinationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookPartnerDestinationInfoResponse)(nil)).Elem()
}

func (o WebhookPartnerDestinationInfoResponseOutput) ToWebhookPartnerDestinationInfoResponseOutput() WebhookPartnerDestinationInfoResponseOutput {
	return o
}

func (o WebhookPartnerDestinationInfoResponseOutput) ToWebhookPartnerDestinationInfoResponseOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoResponseOutput {
	return o
}

// Azure subscription ID of the subscriber. The partner destination associated with the channel will be
// created under this Azure subscription.
func (o WebhookPartnerDestinationInfoResponseOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// Partner client authentication
func (o WebhookPartnerDestinationInfoResponseOutput) ClientAuthentication() AzureADPartnerClientAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) *AzureADPartnerClientAuthenticationResponse {
		return v.ClientAuthentication
	}).(AzureADPartnerClientAuthenticationResponsePtrOutput)
}

// The base URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoResponseOutput) EndpointBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) *string { return v.EndpointBaseUrl }).(pulumi.StringPtrOutput)
}

// Additional context of the partner destination endpoint.
func (o WebhookPartnerDestinationInfoResponseOutput) EndpointServiceContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) *string { return v.EndpointServiceContext }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the partner destination
// Expected value is 'WebHook'.
func (o WebhookPartnerDestinationInfoResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoResponseOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// Name of the partner destination associated with the channel.
func (o WebhookPartnerDestinationInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner destination associated with the channel will be
// created under this resource group.
func (o WebhookPartnerDestinationInfoResponseOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

// Change history of the resource move.
func (o WebhookPartnerDestinationInfoResponseOutput) ResourceMoveChangeHistory() ResourceMoveChangeHistoryResponseArrayOutput {
	return o.ApplyT(func(v WebhookPartnerDestinationInfoResponse) []ResourceMoveChangeHistoryResponse {
		return v.ResourceMoveChangeHistory
	}).(ResourceMoveChangeHistoryResponseArrayOutput)
}

type WebhookPartnerDestinationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (WebhookPartnerDestinationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookPartnerDestinationInfoResponse)(nil)).Elem()
}

func (o WebhookPartnerDestinationInfoResponsePtrOutput) ToWebhookPartnerDestinationInfoResponsePtrOutput() WebhookPartnerDestinationInfoResponsePtrOutput {
	return o
}

func (o WebhookPartnerDestinationInfoResponsePtrOutput) ToWebhookPartnerDestinationInfoResponsePtrOutputWithContext(ctx context.Context) WebhookPartnerDestinationInfoResponsePtrOutput {
	return o
}

func (o WebhookPartnerDestinationInfoResponsePtrOutput) Elem() WebhookPartnerDestinationInfoResponseOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) WebhookPartnerDestinationInfoResponse {
		if v != nil {
			return *v
		}
		var ret WebhookPartnerDestinationInfoResponse
		return ret
	}).(WebhookPartnerDestinationInfoResponseOutput)
}

// Azure subscription ID of the subscriber. The partner destination associated with the channel will be
// created under this Azure subscription.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Partner client authentication
func (o WebhookPartnerDestinationInfoResponsePtrOutput) ClientAuthentication() AzureADPartnerClientAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *AzureADPartnerClientAuthenticationResponse {
		if v == nil {
			return nil
		}
		return v.ClientAuthentication
	}).(AzureADPartnerClientAuthenticationResponsePtrOutput)
}

// The base URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) EndpointBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointBaseUrl
	}).(pulumi.StringPtrOutput)
}

// Additional context of the partner destination endpoint.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) EndpointServiceContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointServiceContext
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the partner destination
// Expected value is 'WebHook'.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The URL that represents the endpoint of the partner destination.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Name of the partner destination associated with the channel.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the subscriber. The partner destination associated with the channel will be
// created under this resource group.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// Change history of the resource move.
func (o WebhookPartnerDestinationInfoResponsePtrOutput) ResourceMoveChangeHistory() ResourceMoveChangeHistoryResponseArrayOutput {
	return o.ApplyT(func(v *WebhookPartnerDestinationInfoResponse) []ResourceMoveChangeHistoryResponse {
		if v == nil {
			return nil
		}
		return v.ResourceMoveChangeHistory
	}).(ResourceMoveChangeHistoryResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureADPartnerClientAuthenticationOutput{})
	pulumi.RegisterOutputType(AzureADPartnerClientAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(AzureADPartnerClientAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(AzureADPartnerClientAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureFunctionEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(AzureFunctionEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(AzureFunctionEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(BoolEqualsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(BoolEqualsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(BoolEqualsFilterOutput{})
	pulumi.RegisterOutputType(BoolEqualsFilterResponseOutput{})
	pulumi.RegisterOutputType(ClientAuthenticationSettingsOutput{})
	pulumi.RegisterOutputType(ClientAuthenticationSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClientAuthenticationSettingsResponseOutput{})
	pulumi.RegisterOutputType(ClientAuthenticationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ClientCertificateAuthenticationOutput{})
	pulumi.RegisterOutputType(ClientCertificateAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ClientCertificateAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(ClientCertificateAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectionStateOutput{})
	pulumi.RegisterOutputType(ConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(ConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(DeadLetterWithResourceIdentityOutput{})
	pulumi.RegisterOutputType(DeadLetterWithResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(DeadLetterWithResourceIdentityResponseOutput{})
	pulumi.RegisterOutputType(DeadLetterWithResourceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(DeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(DeliveryConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeliveryConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DeliveryConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DeliveryWithResourceIdentityOutput{})
	pulumi.RegisterOutputType(DeliveryWithResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(DeliveryWithResourceIdentityResponseOutput{})
	pulumi.RegisterOutputType(DeliveryWithResourceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(DynamicDeliveryAttributeMappingOutput{})
	pulumi.RegisterOutputType(DynamicDeliveryAttributeMappingResponseOutput{})
	pulumi.RegisterOutputType(DynamicRoutingEnrichmentOutput{})
	pulumi.RegisterOutputType(DynamicRoutingEnrichmentArrayOutput{})
	pulumi.RegisterOutputType(DynamicRoutingEnrichmentResponseOutput{})
	pulumi.RegisterOutputType(DynamicRoutingEnrichmentResponseArrayOutput{})
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionIdentityOutput{})
	pulumi.RegisterOutputType(EventSubscriptionIdentityPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionIdentityResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(EventTypeInfoOutput{})
	pulumi.RegisterOutputType(EventTypeInfoPtrOutput{})
	pulumi.RegisterOutputType(EventTypeInfoResponseOutput{})
	pulumi.RegisterOutputType(EventTypeInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(FiltersConfigurationOutput{})
	pulumi.RegisterOutputType(FiltersConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FiltersConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FiltersConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityInfoOutput{})
	pulumi.RegisterOutputType(IdentityInfoPtrOutput{})
	pulumi.RegisterOutputType(IdentityInfoResponseOutput{})
	pulumi.RegisterOutputType(IdentityInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(InboundIpRuleOutput{})
	pulumi.RegisterOutputType(InboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(InboundIpRuleResponseOutput{})
	pulumi.RegisterOutputType(InboundIpRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(InlineEventPropertiesOutput{})
	pulumi.RegisterOutputType(InlineEventPropertiesMapOutput{})
	pulumi.RegisterOutputType(InlineEventPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InlineEventPropertiesResponseMapOutput{})
	pulumi.RegisterOutputType(IsNotNullAdvancedFilterOutput{})
	pulumi.RegisterOutputType(IsNotNullAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(IsNotNullFilterOutput{})
	pulumi.RegisterOutputType(IsNotNullFilterResponseOutput{})
	pulumi.RegisterOutputType(IsNullOrUndefinedAdvancedFilterOutput{})
	pulumi.RegisterOutputType(IsNullOrUndefinedAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(IsNullOrUndefinedFilterOutput{})
	pulumi.RegisterOutputType(IsNullOrUndefinedFilterResponseOutput{})
	pulumi.RegisterOutputType(JsonFieldOutput{})
	pulumi.RegisterOutputType(JsonFieldPtrOutput{})
	pulumi.RegisterOutputType(JsonFieldResponseOutput{})
	pulumi.RegisterOutputType(JsonFieldResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultPtrOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultResponseOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingPtrOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingResponseOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorAlertEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(MonitorAlertEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(MonitorAlertEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(MonitorAlertEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(NamespaceSkuOutput{})
	pulumi.RegisterOutputType(NamespaceSkuPtrOutput{})
	pulumi.RegisterOutputType(NamespaceSkuResponseOutput{})
	pulumi.RegisterOutputType(NamespaceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(NamespaceTopicEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(NamespaceTopicEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(NamespaceTopicEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(NamespaceTopicEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanFilterOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanOrEqualsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanOrEqualsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanOrEqualsFilterOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanOrEqualsFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberInFilterOutput{})
	pulumi.RegisterOutputType(NumberInFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberInRangeAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberInRangeAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberInRangeFilterOutput{})
	pulumi.RegisterOutputType(NumberInRangeFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberLessThanAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberLessThanAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberLessThanFilterOutput{})
	pulumi.RegisterOutputType(NumberLessThanFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberLessThanOrEqualsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberLessThanOrEqualsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberLessThanOrEqualsFilterOutput{})
	pulumi.RegisterOutputType(NumberLessThanOrEqualsFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberNotInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberNotInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberNotInFilterOutput{})
	pulumi.RegisterOutputType(NumberNotInFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberNotInRangeAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberNotInRangeAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberNotInRangeFilterOutput{})
	pulumi.RegisterOutputType(NumberNotInRangeFilterResponseOutput{})
	pulumi.RegisterOutputType(PartnerOutput{})
	pulumi.RegisterOutputType(PartnerArrayOutput{})
	pulumi.RegisterOutputType(PartnerAuthorizationOutput{})
	pulumi.RegisterOutputType(PartnerAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(PartnerAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(PartnerAuthorizationResponsePtrOutput{})
	pulumi.RegisterOutputType(PartnerEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(PartnerEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(PartnerEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(PartnerEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(PartnerResponseOutput{})
	pulumi.RegisterOutputType(PartnerResponseArrayOutput{})
	pulumi.RegisterOutputType(PartnerTopicInfoOutput{})
	pulumi.RegisterOutputType(PartnerTopicInfoPtrOutput{})
	pulumi.RegisterOutputType(PartnerTopicInfoResponseOutput{})
	pulumi.RegisterOutputType(PartnerTopicInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionTypeOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionTypeArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PushInfoOutput{})
	pulumi.RegisterOutputType(PushInfoPtrOutput{})
	pulumi.RegisterOutputType(PushInfoResponseOutput{})
	pulumi.RegisterOutputType(PushInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(QueueInfoOutput{})
	pulumi.RegisterOutputType(QueueInfoPtrOutput{})
	pulumi.RegisterOutputType(QueueInfoResponseOutput{})
	pulumi.RegisterOutputType(QueueInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceMoveChangeHistoryOutput{})
	pulumi.RegisterOutputType(ResourceMoveChangeHistoryArrayOutput{})
	pulumi.RegisterOutputType(ResourceMoveChangeHistoryResponseOutput{})
	pulumi.RegisterOutputType(ResourceMoveChangeHistoryResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceSkuOutput{})
	pulumi.RegisterOutputType(ResourceSkuPtrOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponseOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RoutingEnrichmentsOutput{})
	pulumi.RegisterOutputType(RoutingEnrichmentsPtrOutput{})
	pulumi.RegisterOutputType(RoutingEnrichmentsResponseOutput{})
	pulumi.RegisterOutputType(RoutingEnrichmentsResponsePtrOutput{})
	pulumi.RegisterOutputType(RoutingIdentityInfoOutput{})
	pulumi.RegisterOutputType(RoutingIdentityInfoPtrOutput{})
	pulumi.RegisterOutputType(RoutingIdentityInfoResponseOutput{})
	pulumi.RegisterOutputType(RoutingIdentityInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(StaticDeliveryAttributeMappingOutput{})
	pulumi.RegisterOutputType(StaticDeliveryAttributeMappingResponseOutput{})
	pulumi.RegisterOutputType(StaticStringRoutingEnrichmentOutput{})
	pulumi.RegisterOutputType(StaticStringRoutingEnrichmentArrayOutput{})
	pulumi.RegisterOutputType(StaticStringRoutingEnrichmentResponseOutput{})
	pulumi.RegisterOutputType(StaticStringRoutingEnrichmentResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(StringBeginsWithAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringBeginsWithAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringBeginsWithFilterOutput{})
	pulumi.RegisterOutputType(StringBeginsWithFilterResponseOutput{})
	pulumi.RegisterOutputType(StringContainsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringContainsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringContainsFilterOutput{})
	pulumi.RegisterOutputType(StringContainsFilterResponseOutput{})
	pulumi.RegisterOutputType(StringEndsWithAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringEndsWithAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringEndsWithFilterOutput{})
	pulumi.RegisterOutputType(StringEndsWithFilterResponseOutput{})
	pulumi.RegisterOutputType(StringInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringInFilterOutput{})
	pulumi.RegisterOutputType(StringInFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotBeginsWithAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringNotBeginsWithAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotBeginsWithFilterOutput{})
	pulumi.RegisterOutputType(StringNotBeginsWithFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotContainsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringNotContainsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotContainsFilterOutput{})
	pulumi.RegisterOutputType(StringNotContainsFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotEndsWithAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringNotEndsWithAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotEndsWithFilterOutput{})
	pulumi.RegisterOutputType(StringNotEndsWithFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringNotInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotInFilterOutput{})
	pulumi.RegisterOutputType(StringNotInFilterResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TopicSpacesConfigurationOutput{})
	pulumi.RegisterOutputType(TopicSpacesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TopicSpacesConfigurationResponseOutput{})
	pulumi.RegisterOutputType(TopicSpacesConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(TopicsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(TopicsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesMapOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseMapOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(WebhookPartnerDestinationInfoOutput{})
	pulumi.RegisterOutputType(WebhookPartnerDestinationInfoPtrOutput{})
	pulumi.RegisterOutputType(WebhookPartnerDestinationInfoResponseOutput{})
	pulumi.RegisterOutputType(WebhookPartnerDestinationInfoResponsePtrOutput{})
}
