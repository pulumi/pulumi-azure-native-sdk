// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Client group resource.
// Azure REST API version: 2023-06-01-preview.
//
// Other available API versions: 2023-12-15-preview.
type ClientGroup struct {
	pulumi.CustomResourceState

	// Description for the Client Group resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the ClientGroup resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The grouping query for the clients.
	// Example : attributes.keyName IN ['a', 'b', 'c'].
	Query pulumi.StringPtrOutput `pulumi:"query"`
	// The system metadata relating to the ClientGroup resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewClientGroup registers a new resource with the given unique name, arguments, and options.
func NewClientGroup(ctx *pulumi.Context,
	name string, args *ClientGroupArgs, opts ...pulumi.ResourceOption) (*ClientGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventgrid/v20230601preview:ClientGroup"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20231215preview:ClientGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClientGroup
	err := ctx.RegisterResource("azure-native:eventgrid:ClientGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientGroup gets an existing ClientGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientGroupState, opts ...pulumi.ResourceOption) (*ClientGroup, error) {
	var resource ClientGroup
	err := ctx.ReadResource("azure-native:eventgrid:ClientGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientGroup resources.
type clientGroupState struct {
}

type ClientGroupState struct {
}

func (ClientGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientGroupState)(nil)).Elem()
}

type clientGroupArgs struct {
	// The client group name.
	ClientGroupName *string `pulumi:"clientGroupName"`
	// Description for the Client Group resource.
	Description *string `pulumi:"description"`
	// Name of the namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// The grouping query for the clients.
	// Example : attributes.keyName IN ['a', 'b', 'c'].
	Query *string `pulumi:"query"`
	// The name of the resource group within the user's subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ClientGroup resource.
type ClientGroupArgs struct {
	// The client group name.
	ClientGroupName pulumi.StringPtrInput
	// Description for the Client Group resource.
	Description pulumi.StringPtrInput
	// Name of the namespace.
	NamespaceName pulumi.StringInput
	// The grouping query for the clients.
	// Example : attributes.keyName IN ['a', 'b', 'c'].
	Query pulumi.StringPtrInput
	// The name of the resource group within the user's subscription.
	ResourceGroupName pulumi.StringInput
}

func (ClientGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientGroupArgs)(nil)).Elem()
}

type ClientGroupInput interface {
	pulumi.Input

	ToClientGroupOutput() ClientGroupOutput
	ToClientGroupOutputWithContext(ctx context.Context) ClientGroupOutput
}

func (*ClientGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientGroup)(nil)).Elem()
}

func (i *ClientGroup) ToClientGroupOutput() ClientGroupOutput {
	return i.ToClientGroupOutputWithContext(context.Background())
}

func (i *ClientGroup) ToClientGroupOutputWithContext(ctx context.Context) ClientGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientGroupOutput)
}

type ClientGroupOutput struct{ *pulumi.OutputState }

func (ClientGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientGroup)(nil)).Elem()
}

func (o ClientGroupOutput) ToClientGroupOutput() ClientGroupOutput {
	return o
}

func (o ClientGroupOutput) ToClientGroupOutputWithContext(ctx context.Context) ClientGroupOutput {
	return o
}

// Description for the Client Group resource.
func (o ClientGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o ClientGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the ClientGroup resource.
func (o ClientGroupOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGroup) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The grouping query for the clients.
// Example : attributes.keyName IN ['a', 'b', 'c'].
func (o ClientGroupOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientGroup) pulumi.StringPtrOutput { return v.Query }).(pulumi.StringPtrOutput)
}

// The system metadata relating to the ClientGroup resource.
func (o ClientGroupOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ClientGroup) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Type of the resource.
func (o ClientGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ClientGroupOutput{})
}
