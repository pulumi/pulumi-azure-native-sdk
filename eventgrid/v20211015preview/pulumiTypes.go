// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211015preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'BoolEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// Properties of the destination of an event channel.
type EventChannelDestination struct {
	// Azure subscription ID of the customer creating the event channel. The partner topic
	// associated with the event channel will be created under this Azure subscription.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// Name of the partner topic associated with the event channel.
	PartnerTopicName *string `pulumi:"partnerTopicName"`
	// Azure Resource Group of the customer creating the event channel. The partner topic
	// associated with the event channel will be created under this resource group.
	ResourceGroup *string `pulumi:"resourceGroup"`
}

// EventChannelDestinationInput is an input type that accepts EventChannelDestinationArgs and EventChannelDestinationOutput values.
// You can construct a concrete instance of `EventChannelDestinationInput` via:
//
//	EventChannelDestinationArgs{...}
type EventChannelDestinationInput interface {
	pulumi.Input

	ToEventChannelDestinationOutput() EventChannelDestinationOutput
	ToEventChannelDestinationOutputWithContext(context.Context) EventChannelDestinationOutput
}

// Properties of the destination of an event channel.
type EventChannelDestinationArgs struct {
	// Azure subscription ID of the customer creating the event channel. The partner topic
	// associated with the event channel will be created under this Azure subscription.
	AzureSubscriptionId pulumi.StringPtrInput `pulumi:"azureSubscriptionId"`
	// Name of the partner topic associated with the event channel.
	PartnerTopicName pulumi.StringPtrInput `pulumi:"partnerTopicName"`
	// Azure Resource Group of the customer creating the event channel. The partner topic
	// associated with the event channel will be created under this resource group.
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
}

func (EventChannelDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelDestination)(nil)).Elem()
}

func (i EventChannelDestinationArgs) ToEventChannelDestinationOutput() EventChannelDestinationOutput {
	return i.ToEventChannelDestinationOutputWithContext(context.Background())
}

func (i EventChannelDestinationArgs) ToEventChannelDestinationOutputWithContext(ctx context.Context) EventChannelDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelDestinationOutput)
}

func (i EventChannelDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[EventChannelDestination] {
	return pulumix.Output[EventChannelDestination]{
		OutputState: i.ToEventChannelDestinationOutputWithContext(ctx).OutputState,
	}
}

func (i EventChannelDestinationArgs) ToEventChannelDestinationPtrOutput() EventChannelDestinationPtrOutput {
	return i.ToEventChannelDestinationPtrOutputWithContext(context.Background())
}

func (i EventChannelDestinationArgs) ToEventChannelDestinationPtrOutputWithContext(ctx context.Context) EventChannelDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelDestinationOutput).ToEventChannelDestinationPtrOutputWithContext(ctx)
}

// EventChannelDestinationPtrInput is an input type that accepts EventChannelDestinationArgs, EventChannelDestinationPtr and EventChannelDestinationPtrOutput values.
// You can construct a concrete instance of `EventChannelDestinationPtrInput` via:
//
//	        EventChannelDestinationArgs{...}
//
//	or:
//
//	        nil
type EventChannelDestinationPtrInput interface {
	pulumi.Input

	ToEventChannelDestinationPtrOutput() EventChannelDestinationPtrOutput
	ToEventChannelDestinationPtrOutputWithContext(context.Context) EventChannelDestinationPtrOutput
}

type eventChannelDestinationPtrType EventChannelDestinationArgs

func EventChannelDestinationPtr(v *EventChannelDestinationArgs) EventChannelDestinationPtrInput {
	return (*eventChannelDestinationPtrType)(v)
}

func (*eventChannelDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelDestination)(nil)).Elem()
}

func (i *eventChannelDestinationPtrType) ToEventChannelDestinationPtrOutput() EventChannelDestinationPtrOutput {
	return i.ToEventChannelDestinationPtrOutputWithContext(context.Background())
}

func (i *eventChannelDestinationPtrType) ToEventChannelDestinationPtrOutputWithContext(ctx context.Context) EventChannelDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelDestinationPtrOutput)
}

func (i *eventChannelDestinationPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventChannelDestination] {
	return pulumix.Output[*EventChannelDestination]{
		OutputState: i.ToEventChannelDestinationPtrOutputWithContext(ctx).OutputState,
	}
}

// Properties of the destination of an event channel.
type EventChannelDestinationOutput struct{ *pulumi.OutputState }

func (EventChannelDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelDestination)(nil)).Elem()
}

func (o EventChannelDestinationOutput) ToEventChannelDestinationOutput() EventChannelDestinationOutput {
	return o
}

func (o EventChannelDestinationOutput) ToEventChannelDestinationOutputWithContext(ctx context.Context) EventChannelDestinationOutput {
	return o
}

func (o EventChannelDestinationOutput) ToEventChannelDestinationPtrOutput() EventChannelDestinationPtrOutput {
	return o.ToEventChannelDestinationPtrOutputWithContext(context.Background())
}

func (o EventChannelDestinationOutput) ToEventChannelDestinationPtrOutputWithContext(ctx context.Context) EventChannelDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventChannelDestination) *EventChannelDestination {
		return &v
	}).(EventChannelDestinationPtrOutput)
}

func (o EventChannelDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventChannelDestination] {
	return pulumix.Output[EventChannelDestination]{
		OutputState: o.OutputState,
	}
}

// Azure subscription ID of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this Azure subscription.
func (o EventChannelDestinationOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelDestination) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// Name of the partner topic associated with the event channel.
func (o EventChannelDestinationOutput) PartnerTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelDestination) *string { return v.PartnerTopicName }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this resource group.
func (o EventChannelDestinationOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelDestination) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

type EventChannelDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventChannelDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelDestination)(nil)).Elem()
}

func (o EventChannelDestinationPtrOutput) ToEventChannelDestinationPtrOutput() EventChannelDestinationPtrOutput {
	return o
}

func (o EventChannelDestinationPtrOutput) ToEventChannelDestinationPtrOutputWithContext(ctx context.Context) EventChannelDestinationPtrOutput {
	return o
}

func (o EventChannelDestinationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventChannelDestination] {
	return pulumix.Output[*EventChannelDestination]{
		OutputState: o.OutputState,
	}
}

func (o EventChannelDestinationPtrOutput) Elem() EventChannelDestinationOutput {
	return o.ApplyT(func(v *EventChannelDestination) EventChannelDestination {
		if v != nil {
			return *v
		}
		var ret EventChannelDestination
		return ret
	}).(EventChannelDestinationOutput)
}

// Azure subscription ID of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this Azure subscription.
func (o EventChannelDestinationPtrOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelDestination) *string {
		if v == nil {
			return nil
		}
		return v.AzureSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Name of the partner topic associated with the event channel.
func (o EventChannelDestinationPtrOutput) PartnerTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelDestination) *string {
		if v == nil {
			return nil
		}
		return v.PartnerTopicName
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this resource group.
func (o EventChannelDestinationPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Properties of the destination of an event channel.
type EventChannelDestinationResponse struct {
	// Azure subscription ID of the customer creating the event channel. The partner topic
	// associated with the event channel will be created under this Azure subscription.
	AzureSubscriptionId *string `pulumi:"azureSubscriptionId"`
	// Name of the partner topic associated with the event channel.
	PartnerTopicName *string `pulumi:"partnerTopicName"`
	// Azure Resource Group of the customer creating the event channel. The partner topic
	// associated with the event channel will be created under this resource group.
	ResourceGroup *string `pulumi:"resourceGroup"`
}

// Properties of the destination of an event channel.
type EventChannelDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventChannelDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelDestinationResponse)(nil)).Elem()
}

func (o EventChannelDestinationResponseOutput) ToEventChannelDestinationResponseOutput() EventChannelDestinationResponseOutput {
	return o
}

func (o EventChannelDestinationResponseOutput) ToEventChannelDestinationResponseOutputWithContext(ctx context.Context) EventChannelDestinationResponseOutput {
	return o
}

func (o EventChannelDestinationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventChannelDestinationResponse] {
	return pulumix.Output[EventChannelDestinationResponse]{
		OutputState: o.OutputState,
	}
}

// Azure subscription ID of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this Azure subscription.
func (o EventChannelDestinationResponseOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelDestinationResponse) *string { return v.AzureSubscriptionId }).(pulumi.StringPtrOutput)
}

// Name of the partner topic associated with the event channel.
func (o EventChannelDestinationResponseOutput) PartnerTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelDestinationResponse) *string { return v.PartnerTopicName }).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this resource group.
func (o EventChannelDestinationResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelDestinationResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

type EventChannelDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (EventChannelDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelDestinationResponse)(nil)).Elem()
}

func (o EventChannelDestinationResponsePtrOutput) ToEventChannelDestinationResponsePtrOutput() EventChannelDestinationResponsePtrOutput {
	return o
}

func (o EventChannelDestinationResponsePtrOutput) ToEventChannelDestinationResponsePtrOutputWithContext(ctx context.Context) EventChannelDestinationResponsePtrOutput {
	return o
}

func (o EventChannelDestinationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventChannelDestinationResponse] {
	return pulumix.Output[*EventChannelDestinationResponse]{
		OutputState: o.OutputState,
	}
}

func (o EventChannelDestinationResponsePtrOutput) Elem() EventChannelDestinationResponseOutput {
	return o.ApplyT(func(v *EventChannelDestinationResponse) EventChannelDestinationResponse {
		if v != nil {
			return *v
		}
		var ret EventChannelDestinationResponse
		return ret
	}).(EventChannelDestinationResponseOutput)
}

// Azure subscription ID of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this Azure subscription.
func (o EventChannelDestinationResponsePtrOutput) AzureSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Name of the partner topic associated with the event channel.
func (o EventChannelDestinationResponsePtrOutput) PartnerTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PartnerTopicName
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Group of the customer creating the event channel. The partner topic
// associated with the event channel will be created under this resource group.
func (o EventChannelDestinationResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Channel.
type EventChannelFilter struct {
	// An array of advanced filters that are used for filtering event channels.
	AdvancedFilters []interface{} `pulumi:"advancedFilters"`
	// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. The default value is either false or null.
	EnableAdvancedFilteringOnArrays *bool `pulumi:"enableAdvancedFilteringOnArrays"`
}

// Defaults sets the appropriate defaults for EventChannelFilter
func (val *EventChannelFilter) Defaults() *EventChannelFilter {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableAdvancedFilteringOnArrays == nil {
		enableAdvancedFilteringOnArrays_ := false
		tmp.EnableAdvancedFilteringOnArrays = &enableAdvancedFilteringOnArrays_
	}
	return &tmp
}

// EventChannelFilterInput is an input type that accepts EventChannelFilterArgs and EventChannelFilterOutput values.
// You can construct a concrete instance of `EventChannelFilterInput` via:
//
//	EventChannelFilterArgs{...}
type EventChannelFilterInput interface {
	pulumi.Input

	ToEventChannelFilterOutput() EventChannelFilterOutput
	ToEventChannelFilterOutputWithContext(context.Context) EventChannelFilterOutput
}

// Filter for the Event Channel.
type EventChannelFilterArgs struct {
	// An array of advanced filters that are used for filtering event channels.
	AdvancedFilters pulumi.ArrayInput `pulumi:"advancedFilters"`
	// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. The default value is either false or null.
	EnableAdvancedFilteringOnArrays pulumi.BoolPtrInput `pulumi:"enableAdvancedFilteringOnArrays"`
}

// Defaults sets the appropriate defaults for EventChannelFilterArgs
func (val *EventChannelFilterArgs) Defaults() *EventChannelFilterArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableAdvancedFilteringOnArrays == nil {
		tmp.EnableAdvancedFilteringOnArrays = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EventChannelFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelFilter)(nil)).Elem()
}

func (i EventChannelFilterArgs) ToEventChannelFilterOutput() EventChannelFilterOutput {
	return i.ToEventChannelFilterOutputWithContext(context.Background())
}

func (i EventChannelFilterArgs) ToEventChannelFilterOutputWithContext(ctx context.Context) EventChannelFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelFilterOutput)
}

func (i EventChannelFilterArgs) ToOutput(ctx context.Context) pulumix.Output[EventChannelFilter] {
	return pulumix.Output[EventChannelFilter]{
		OutputState: i.ToEventChannelFilterOutputWithContext(ctx).OutputState,
	}
}

func (i EventChannelFilterArgs) ToEventChannelFilterPtrOutput() EventChannelFilterPtrOutput {
	return i.ToEventChannelFilterPtrOutputWithContext(context.Background())
}

func (i EventChannelFilterArgs) ToEventChannelFilterPtrOutputWithContext(ctx context.Context) EventChannelFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelFilterOutput).ToEventChannelFilterPtrOutputWithContext(ctx)
}

// EventChannelFilterPtrInput is an input type that accepts EventChannelFilterArgs, EventChannelFilterPtr and EventChannelFilterPtrOutput values.
// You can construct a concrete instance of `EventChannelFilterPtrInput` via:
//
//	        EventChannelFilterArgs{...}
//
//	or:
//
//	        nil
type EventChannelFilterPtrInput interface {
	pulumi.Input

	ToEventChannelFilterPtrOutput() EventChannelFilterPtrOutput
	ToEventChannelFilterPtrOutputWithContext(context.Context) EventChannelFilterPtrOutput
}

type eventChannelFilterPtrType EventChannelFilterArgs

func EventChannelFilterPtr(v *EventChannelFilterArgs) EventChannelFilterPtrInput {
	return (*eventChannelFilterPtrType)(v)
}

func (*eventChannelFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelFilter)(nil)).Elem()
}

func (i *eventChannelFilterPtrType) ToEventChannelFilterPtrOutput() EventChannelFilterPtrOutput {
	return i.ToEventChannelFilterPtrOutputWithContext(context.Background())
}

func (i *eventChannelFilterPtrType) ToEventChannelFilterPtrOutputWithContext(ctx context.Context) EventChannelFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelFilterPtrOutput)
}

func (i *eventChannelFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventChannelFilter] {
	return pulumix.Output[*EventChannelFilter]{
		OutputState: i.ToEventChannelFilterPtrOutputWithContext(ctx).OutputState,
	}
}

// Filter for the Event Channel.
type EventChannelFilterOutput struct{ *pulumi.OutputState }

func (EventChannelFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelFilter)(nil)).Elem()
}

func (o EventChannelFilterOutput) ToEventChannelFilterOutput() EventChannelFilterOutput {
	return o
}

func (o EventChannelFilterOutput) ToEventChannelFilterOutputWithContext(ctx context.Context) EventChannelFilterOutput {
	return o
}

func (o EventChannelFilterOutput) ToEventChannelFilterPtrOutput() EventChannelFilterPtrOutput {
	return o.ToEventChannelFilterPtrOutputWithContext(context.Background())
}

func (o EventChannelFilterOutput) ToEventChannelFilterPtrOutputWithContext(ctx context.Context) EventChannelFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventChannelFilter) *EventChannelFilter {
		return &v
	}).(EventChannelFilterPtrOutput)
}

func (o EventChannelFilterOutput) ToOutput(ctx context.Context) pulumix.Output[EventChannelFilter] {
	return pulumix.Output[EventChannelFilter]{
		OutputState: o.OutputState,
	}
}

// An array of advanced filters that are used for filtering event channels.
func (o EventChannelFilterOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v EventChannelFilter) []interface{} { return v.AdvancedFilters }).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. The default value is either false or null.
func (o EventChannelFilterOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventChannelFilter) *bool { return v.EnableAdvancedFilteringOnArrays }).(pulumi.BoolPtrOutput)
}

type EventChannelFilterPtrOutput struct{ *pulumi.OutputState }

func (EventChannelFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelFilter)(nil)).Elem()
}

func (o EventChannelFilterPtrOutput) ToEventChannelFilterPtrOutput() EventChannelFilterPtrOutput {
	return o
}

func (o EventChannelFilterPtrOutput) ToEventChannelFilterPtrOutputWithContext(ctx context.Context) EventChannelFilterPtrOutput {
	return o
}

func (o EventChannelFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventChannelFilter] {
	return pulumix.Output[*EventChannelFilter]{
		OutputState: o.OutputState,
	}
}

func (o EventChannelFilterPtrOutput) Elem() EventChannelFilterOutput {
	return o.ApplyT(func(v *EventChannelFilter) EventChannelFilter {
		if v != nil {
			return *v
		}
		var ret EventChannelFilter
		return ret
	}).(EventChannelFilterOutput)
}

// An array of advanced filters that are used for filtering event channels.
func (o EventChannelFilterPtrOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v *EventChannelFilter) []interface{} {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. The default value is either false or null.
func (o EventChannelFilterPtrOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventChannelFilter) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAdvancedFilteringOnArrays
	}).(pulumi.BoolPtrOutput)
}

// Filter for the Event Channel.
type EventChannelFilterResponse struct {
	// An array of advanced filters that are used for filtering event channels.
	AdvancedFilters []interface{} `pulumi:"advancedFilters"`
	// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. The default value is either false or null.
	EnableAdvancedFilteringOnArrays *bool `pulumi:"enableAdvancedFilteringOnArrays"`
}

// Defaults sets the appropriate defaults for EventChannelFilterResponse
func (val *EventChannelFilterResponse) Defaults() *EventChannelFilterResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableAdvancedFilteringOnArrays == nil {
		enableAdvancedFilteringOnArrays_ := false
		tmp.EnableAdvancedFilteringOnArrays = &enableAdvancedFilteringOnArrays_
	}
	return &tmp
}

// Filter for the Event Channel.
type EventChannelFilterResponseOutput struct{ *pulumi.OutputState }

func (EventChannelFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelFilterResponse)(nil)).Elem()
}

func (o EventChannelFilterResponseOutput) ToEventChannelFilterResponseOutput() EventChannelFilterResponseOutput {
	return o
}

func (o EventChannelFilterResponseOutput) ToEventChannelFilterResponseOutputWithContext(ctx context.Context) EventChannelFilterResponseOutput {
	return o
}

func (o EventChannelFilterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventChannelFilterResponse] {
	return pulumix.Output[EventChannelFilterResponse]{
		OutputState: o.OutputState,
	}
}

// An array of advanced filters that are used for filtering event channels.
func (o EventChannelFilterResponseOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v EventChannelFilterResponse) []interface{} { return v.AdvancedFilters }).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. The default value is either false or null.
func (o EventChannelFilterResponseOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventChannelFilterResponse) *bool { return v.EnableAdvancedFilteringOnArrays }).(pulumi.BoolPtrOutput)
}

type EventChannelFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EventChannelFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelFilterResponse)(nil)).Elem()
}

func (o EventChannelFilterResponsePtrOutput) ToEventChannelFilterResponsePtrOutput() EventChannelFilterResponsePtrOutput {
	return o
}

func (o EventChannelFilterResponsePtrOutput) ToEventChannelFilterResponsePtrOutputWithContext(ctx context.Context) EventChannelFilterResponsePtrOutput {
	return o
}

func (o EventChannelFilterResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventChannelFilterResponse] {
	return pulumix.Output[*EventChannelFilterResponse]{
		OutputState: o.OutputState,
	}
}

func (o EventChannelFilterResponsePtrOutput) Elem() EventChannelFilterResponseOutput {
	return o.ApplyT(func(v *EventChannelFilterResponse) EventChannelFilterResponse {
		if v != nil {
			return *v
		}
		var ret EventChannelFilterResponse
		return ret
	}).(EventChannelFilterResponseOutput)
}

// An array of advanced filters that are used for filtering event channels.
func (o EventChannelFilterResponsePtrOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v *EventChannelFilterResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(pulumi.ArrayOutput)
}

// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. The default value is either false or null.
func (o EventChannelFilterResponsePtrOutput) EnableAdvancedFilteringOnArrays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventChannelFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAdvancedFilteringOnArrays
	}).(pulumi.BoolPtrOutput)
}

// Properties of the source of an event channel.
type EventChannelSource struct {
	// The identifier of the resource that's the source of the events.
	// This represents a unique resource in the partner's resource model.
	Source *string `pulumi:"source"`
}

// EventChannelSourceInput is an input type that accepts EventChannelSourceArgs and EventChannelSourceOutput values.
// You can construct a concrete instance of `EventChannelSourceInput` via:
//
//	EventChannelSourceArgs{...}
type EventChannelSourceInput interface {
	pulumi.Input

	ToEventChannelSourceOutput() EventChannelSourceOutput
	ToEventChannelSourceOutputWithContext(context.Context) EventChannelSourceOutput
}

// Properties of the source of an event channel.
type EventChannelSourceArgs struct {
	// The identifier of the resource that's the source of the events.
	// This represents a unique resource in the partner's resource model.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (EventChannelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelSource)(nil)).Elem()
}

func (i EventChannelSourceArgs) ToEventChannelSourceOutput() EventChannelSourceOutput {
	return i.ToEventChannelSourceOutputWithContext(context.Background())
}

func (i EventChannelSourceArgs) ToEventChannelSourceOutputWithContext(ctx context.Context) EventChannelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelSourceOutput)
}

func (i EventChannelSourceArgs) ToOutput(ctx context.Context) pulumix.Output[EventChannelSource] {
	return pulumix.Output[EventChannelSource]{
		OutputState: i.ToEventChannelSourceOutputWithContext(ctx).OutputState,
	}
}

func (i EventChannelSourceArgs) ToEventChannelSourcePtrOutput() EventChannelSourcePtrOutput {
	return i.ToEventChannelSourcePtrOutputWithContext(context.Background())
}

func (i EventChannelSourceArgs) ToEventChannelSourcePtrOutputWithContext(ctx context.Context) EventChannelSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelSourceOutput).ToEventChannelSourcePtrOutputWithContext(ctx)
}

// EventChannelSourcePtrInput is an input type that accepts EventChannelSourceArgs, EventChannelSourcePtr and EventChannelSourcePtrOutput values.
// You can construct a concrete instance of `EventChannelSourcePtrInput` via:
//
//	        EventChannelSourceArgs{...}
//
//	or:
//
//	        nil
type EventChannelSourcePtrInput interface {
	pulumi.Input

	ToEventChannelSourcePtrOutput() EventChannelSourcePtrOutput
	ToEventChannelSourcePtrOutputWithContext(context.Context) EventChannelSourcePtrOutput
}

type eventChannelSourcePtrType EventChannelSourceArgs

func EventChannelSourcePtr(v *EventChannelSourceArgs) EventChannelSourcePtrInput {
	return (*eventChannelSourcePtrType)(v)
}

func (*eventChannelSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelSource)(nil)).Elem()
}

func (i *eventChannelSourcePtrType) ToEventChannelSourcePtrOutput() EventChannelSourcePtrOutput {
	return i.ToEventChannelSourcePtrOutputWithContext(context.Background())
}

func (i *eventChannelSourcePtrType) ToEventChannelSourcePtrOutputWithContext(ctx context.Context) EventChannelSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventChannelSourcePtrOutput)
}

func (i *eventChannelSourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*EventChannelSource] {
	return pulumix.Output[*EventChannelSource]{
		OutputState: i.ToEventChannelSourcePtrOutputWithContext(ctx).OutputState,
	}
}

// Properties of the source of an event channel.
type EventChannelSourceOutput struct{ *pulumi.OutputState }

func (EventChannelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelSource)(nil)).Elem()
}

func (o EventChannelSourceOutput) ToEventChannelSourceOutput() EventChannelSourceOutput {
	return o
}

func (o EventChannelSourceOutput) ToEventChannelSourceOutputWithContext(ctx context.Context) EventChannelSourceOutput {
	return o
}

func (o EventChannelSourceOutput) ToEventChannelSourcePtrOutput() EventChannelSourcePtrOutput {
	return o.ToEventChannelSourcePtrOutputWithContext(context.Background())
}

func (o EventChannelSourceOutput) ToEventChannelSourcePtrOutputWithContext(ctx context.Context) EventChannelSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventChannelSource) *EventChannelSource {
		return &v
	}).(EventChannelSourcePtrOutput)
}

func (o EventChannelSourceOutput) ToOutput(ctx context.Context) pulumix.Output[EventChannelSource] {
	return pulumix.Output[EventChannelSource]{
		OutputState: o.OutputState,
	}
}

// The identifier of the resource that's the source of the events.
// This represents a unique resource in the partner's resource model.
func (o EventChannelSourceOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelSource) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type EventChannelSourcePtrOutput struct{ *pulumi.OutputState }

func (EventChannelSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelSource)(nil)).Elem()
}

func (o EventChannelSourcePtrOutput) ToEventChannelSourcePtrOutput() EventChannelSourcePtrOutput {
	return o
}

func (o EventChannelSourcePtrOutput) ToEventChannelSourcePtrOutputWithContext(ctx context.Context) EventChannelSourcePtrOutput {
	return o
}

func (o EventChannelSourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventChannelSource] {
	return pulumix.Output[*EventChannelSource]{
		OutputState: o.OutputState,
	}
}

func (o EventChannelSourcePtrOutput) Elem() EventChannelSourceOutput {
	return o.ApplyT(func(v *EventChannelSource) EventChannelSource {
		if v != nil {
			return *v
		}
		var ret EventChannelSource
		return ret
	}).(EventChannelSourceOutput)
}

// The identifier of the resource that's the source of the events.
// This represents a unique resource in the partner's resource model.
func (o EventChannelSourcePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelSource) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Properties of the source of an event channel.
type EventChannelSourceResponse struct {
	// The identifier of the resource that's the source of the events.
	// This represents a unique resource in the partner's resource model.
	Source *string `pulumi:"source"`
}

// Properties of the source of an event channel.
type EventChannelSourceResponseOutput struct{ *pulumi.OutputState }

func (EventChannelSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventChannelSourceResponse)(nil)).Elem()
}

func (o EventChannelSourceResponseOutput) ToEventChannelSourceResponseOutput() EventChannelSourceResponseOutput {
	return o
}

func (o EventChannelSourceResponseOutput) ToEventChannelSourceResponseOutputWithContext(ctx context.Context) EventChannelSourceResponseOutput {
	return o
}

func (o EventChannelSourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventChannelSourceResponse] {
	return pulumix.Output[EventChannelSourceResponse]{
		OutputState: o.OutputState,
	}
}

// The identifier of the resource that's the source of the events.
// This represents a unique resource in the partner's resource model.
func (o EventChannelSourceResponseOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventChannelSourceResponse) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type EventChannelSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (EventChannelSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventChannelSourceResponse)(nil)).Elem()
}

func (o EventChannelSourceResponsePtrOutput) ToEventChannelSourceResponsePtrOutput() EventChannelSourceResponsePtrOutput {
	return o
}

func (o EventChannelSourceResponsePtrOutput) ToEventChannelSourceResponsePtrOutputWithContext(ctx context.Context) EventChannelSourceResponsePtrOutput {
	return o
}

func (o EventChannelSourceResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventChannelSourceResponse] {
	return pulumix.Output[*EventChannelSourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o EventChannelSourceResponsePtrOutput) Elem() EventChannelSourceResponseOutput {
	return o.ApplyT(func(v *EventChannelSourceResponse) EventChannelSourceResponse {
		if v != nil {
			return *v
		}
		var ret EventChannelSourceResponse
		return ret
	}).(EventChannelSourceResponseOutput)
}

// The identifier of the resource that's the source of the events.
// This represents a unique resource in the partner's resource model.
func (o EventChannelSourceResponsePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventChannelSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// IsNotNull Advanced Filter.
type IsNotNullAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNotNull Advanced Filter.
type IsNotNullAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNotNull'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNullOrUndefined Advanced Filter.
type IsNullOrUndefinedAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType string `pulumi:"operatorType"`
}

// IsNullOrUndefined Advanced Filter.
type IsNullOrUndefinedAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'IsNullOrUndefined'.
	OperatorType string `pulumi:"operatorType"`
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberGreaterThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberInRange Advanced Filter.
type NumberInRangeAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberInRange Advanced Filter.
type NumberInRangeAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThan'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberLessThanOrEquals'.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotInRange Advanced Filter.
type NumberNotInRangeAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// NumberNotInRange Advanced Filter.
type NumberNotInRangeAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'NumberNotInRange'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values [][]float64 `pulumi:"values"`
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringIn Advanced Filter.
type StringInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringIn Advanced Filter.
type StringInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotBeginsWith Advanced Filter.
type StringNotBeginsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotBeginsWith Advanced Filter.
type StringNotBeginsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotBeginsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotContains Advanced Filter.
type StringNotContainsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotContains Advanced Filter.
type StringNotContainsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotContains'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotEndsWith Advanced Filter.
type StringNotEndsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotEndsWith Advanced Filter.
type StringNotEndsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotEndsWith'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	// Expected value is 'StringNotIn'.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EventChannelDestinationOutput{})
	pulumi.RegisterOutputType(EventChannelDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventChannelDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventChannelDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(EventChannelFilterOutput{})
	pulumi.RegisterOutputType(EventChannelFilterPtrOutput{})
	pulumi.RegisterOutputType(EventChannelFilterResponseOutput{})
	pulumi.RegisterOutputType(EventChannelFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(EventChannelSourceOutput{})
	pulumi.RegisterOutputType(EventChannelSourcePtrOutput{})
	pulumi.RegisterOutputType(EventChannelSourceResponseOutput{})
	pulumi.RegisterOutputType(EventChannelSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
