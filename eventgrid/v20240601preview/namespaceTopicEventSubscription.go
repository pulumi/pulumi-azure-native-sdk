// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240601preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Event Subscription.
type NamespaceTopicEventSubscription struct {
	pulumi.CustomResourceState

	// Information about the delivery configuration of the event subscription.
	DeliveryConfiguration DeliveryConfigurationResponsePtrOutput `pulumi:"deliveryConfiguration"`
	// The event delivery schema for the event subscription.
	EventDeliverySchema pulumi.StringPtrOutput `pulumi:"eventDeliverySchema"`
	// Expiration time of the event subscription.
	ExpirationTimeUtc pulumi.StringPtrOutput `pulumi:"expirationTimeUtc"`
	// Information about the filter for the event subscription.
	FiltersConfiguration FiltersConfigurationResponsePtrOutput `pulumi:"filtersConfiguration"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the event subscription.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The system metadata relating to Event Subscription resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNamespaceTopicEventSubscription registers a new resource with the given unique name, arguments, and options.
func NewNamespaceTopicEventSubscription(ctx *pulumi.Context,
	name string, args *NamespaceTopicEventSubscriptionArgs, opts ...pulumi.ResourceOption) (*NamespaceTopicEventSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventgrid:NamespaceTopicEventSubscription"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20230601preview:NamespaceTopicEventSubscription"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20231215preview:NamespaceTopicEventSubscription"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource NamespaceTopicEventSubscription
	err := ctx.RegisterResource("azure-native:eventgrid/v20240601preview:NamespaceTopicEventSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceTopicEventSubscription gets an existing NamespaceTopicEventSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceTopicEventSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceTopicEventSubscriptionState, opts ...pulumi.ResourceOption) (*NamespaceTopicEventSubscription, error) {
	var resource NamespaceTopicEventSubscription
	err := ctx.ReadResource("azure-native:eventgrid/v20240601preview:NamespaceTopicEventSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceTopicEventSubscription resources.
type namespaceTopicEventSubscriptionState struct {
}

type NamespaceTopicEventSubscriptionState struct {
}

func (NamespaceTopicEventSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceTopicEventSubscriptionState)(nil)).Elem()
}

type namespaceTopicEventSubscriptionArgs struct {
	// Information about the delivery configuration of the event subscription.
	DeliveryConfiguration *DeliveryConfiguration `pulumi:"deliveryConfiguration"`
	// The event delivery schema for the event subscription.
	EventDeliverySchema *string `pulumi:"eventDeliverySchema"`
	// Name of the event subscription to be created. Event subscription names must be between 3 and 50 characters in length and use alphanumeric letters only.
	EventSubscriptionName *string `pulumi:"eventSubscriptionName"`
	// Expiration time of the event subscription.
	ExpirationTimeUtc *string `pulumi:"expirationTimeUtc"`
	// Information about the filter for the event subscription.
	FiltersConfiguration *FiltersConfiguration `pulumi:"filtersConfiguration"`
	// Name of the namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// The name of the resource group within the user's subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the namespace topic.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a NamespaceTopicEventSubscription resource.
type NamespaceTopicEventSubscriptionArgs struct {
	// Information about the delivery configuration of the event subscription.
	DeliveryConfiguration DeliveryConfigurationPtrInput
	// The event delivery schema for the event subscription.
	EventDeliverySchema pulumi.StringPtrInput
	// Name of the event subscription to be created. Event subscription names must be between 3 and 50 characters in length and use alphanumeric letters only.
	EventSubscriptionName pulumi.StringPtrInput
	// Expiration time of the event subscription.
	ExpirationTimeUtc pulumi.StringPtrInput
	// Information about the filter for the event subscription.
	FiltersConfiguration FiltersConfigurationPtrInput
	// Name of the namespace.
	NamespaceName pulumi.StringInput
	// The name of the resource group within the user's subscription.
	ResourceGroupName pulumi.StringInput
	// Name of the namespace topic.
	TopicName pulumi.StringInput
}

func (NamespaceTopicEventSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceTopicEventSubscriptionArgs)(nil)).Elem()
}

type NamespaceTopicEventSubscriptionInput interface {
	pulumi.Input

	ToNamespaceTopicEventSubscriptionOutput() NamespaceTopicEventSubscriptionOutput
	ToNamespaceTopicEventSubscriptionOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionOutput
}

func (*NamespaceTopicEventSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTopicEventSubscription)(nil)).Elem()
}

func (i *NamespaceTopicEventSubscription) ToNamespaceTopicEventSubscriptionOutput() NamespaceTopicEventSubscriptionOutput {
	return i.ToNamespaceTopicEventSubscriptionOutputWithContext(context.Background())
}

func (i *NamespaceTopicEventSubscription) ToNamespaceTopicEventSubscriptionOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTopicEventSubscriptionOutput)
}

type NamespaceTopicEventSubscriptionOutput struct{ *pulumi.OutputState }

func (NamespaceTopicEventSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceTopicEventSubscription)(nil)).Elem()
}

func (o NamespaceTopicEventSubscriptionOutput) ToNamespaceTopicEventSubscriptionOutput() NamespaceTopicEventSubscriptionOutput {
	return o
}

func (o NamespaceTopicEventSubscriptionOutput) ToNamespaceTopicEventSubscriptionOutputWithContext(ctx context.Context) NamespaceTopicEventSubscriptionOutput {
	return o
}

// Information about the delivery configuration of the event subscription.
func (o NamespaceTopicEventSubscriptionOutput) DeliveryConfiguration() DeliveryConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) DeliveryConfigurationResponsePtrOutput {
		return v.DeliveryConfiguration
	}).(DeliveryConfigurationResponsePtrOutput)
}

// The event delivery schema for the event subscription.
func (o NamespaceTopicEventSubscriptionOutput) EventDeliverySchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) pulumi.StringPtrOutput { return v.EventDeliverySchema }).(pulumi.StringPtrOutput)
}

// Expiration time of the event subscription.
func (o NamespaceTopicEventSubscriptionOutput) ExpirationTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) pulumi.StringPtrOutput { return v.ExpirationTimeUtc }).(pulumi.StringPtrOutput)
}

// Information about the filter for the event subscription.
func (o NamespaceTopicEventSubscriptionOutput) FiltersConfiguration() FiltersConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) FiltersConfigurationResponsePtrOutput {
		return v.FiltersConfiguration
	}).(FiltersConfigurationResponsePtrOutput)
}

// Name of the resource.
func (o NamespaceTopicEventSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the event subscription.
func (o NamespaceTopicEventSubscriptionOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The system metadata relating to Event Subscription resource.
func (o NamespaceTopicEventSubscriptionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Type of the resource.
func (o NamespaceTopicEventSubscriptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceTopicEventSubscription) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(NamespaceTopicEventSubscriptionOutput{})
}
