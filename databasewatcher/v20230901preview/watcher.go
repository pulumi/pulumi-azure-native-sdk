// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The DatabaseWatcherProviderHub resource.
type Watcher struct {
	pulumi.CustomResourceState

	// The data store for collected monitoring data.
	Datastore DatastoreResponsePtrOutput `pulumi:"datastore"`
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the resource watcher.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The monitoring collection status of the watcher.
	Status pulumi.StringOutput `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWatcher registers a new resource with the given unique name, arguments, and options.
func NewWatcher(ctx *pulumi.Context,
	name string, args *WatcherArgs, opts ...pulumi.ResourceOption) (*Watcher, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:databasewatcher:Watcher"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Watcher
	err := ctx.RegisterResource("azure-native:databasewatcher/v20230901preview:Watcher", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWatcher gets an existing Watcher resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWatcher(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WatcherState, opts ...pulumi.ResourceOption) (*Watcher, error) {
	var resource Watcher
	err := ctx.ReadResource("azure-native:databasewatcher/v20230901preview:Watcher", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Watcher resources.
type watcherState struct {
}

type WatcherState struct {
}

func (WatcherState) ElementType() reflect.Type {
	return reflect.TypeOf((*watcherState)(nil)).Elem()
}

type watcherArgs struct {
	// The data store for collected monitoring data.
	Datastore *Datastore `pulumi:"datastore"`
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The database watcher name.
	WatcherName *string `pulumi:"watcherName"`
}

// The set of arguments for constructing a Watcher resource.
type WatcherArgs struct {
	// The data store for collected monitoring data.
	Datastore DatastorePtrInput
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The database watcher name.
	WatcherName pulumi.StringPtrInput
}

func (WatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*watcherArgs)(nil)).Elem()
}

type WatcherInput interface {
	pulumi.Input

	ToWatcherOutput() WatcherOutput
	ToWatcherOutputWithContext(ctx context.Context) WatcherOutput
}

func (*Watcher) ElementType() reflect.Type {
	return reflect.TypeOf((**Watcher)(nil)).Elem()
}

func (i *Watcher) ToWatcherOutput() WatcherOutput {
	return i.ToWatcherOutputWithContext(context.Background())
}

func (i *Watcher) ToWatcherOutputWithContext(ctx context.Context) WatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatcherOutput)
}

type WatcherOutput struct{ *pulumi.OutputState }

func (WatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Watcher)(nil)).Elem()
}

func (o WatcherOutput) ToWatcherOutput() WatcherOutput {
	return o
}

func (o WatcherOutput) ToWatcherOutputWithContext(ctx context.Context) WatcherOutput {
	return o
}

// The data store for collected monitoring data.
func (o WatcherOutput) Datastore() DatastoreResponsePtrOutput {
	return o.ApplyT(func(v *Watcher) DatastoreResponsePtrOutput { return v.Datastore }).(DatastoreResponsePtrOutput)
}

// The managed service identities assigned to this resource.
func (o WatcherOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *Watcher) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o WatcherOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o WatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the resource watcher.
func (o WatcherOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The monitoring collection status of the watcher.
func (o WatcherOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o WatcherOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Watcher) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o WatcherOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WatcherOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WatcherOutput{})
}
