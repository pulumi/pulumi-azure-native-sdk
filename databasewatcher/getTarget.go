// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasewatcher

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a Target
//
// Uses Azure REST API version 2024-10-01-preview.
//
// Other available API versions: 2023-09-01-preview, 2024-07-19-preview, 2025-01-02. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native databasewatcher [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupTarget(ctx *pulumi.Context, args *LookupTargetArgs, opts ...pulumi.InvokeOption) (*LookupTargetResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupTargetResult
	err := ctx.Invoke("azure-native:databasewatcher:getTarget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTargetArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The target resource name.
	TargetName string `pulumi:"targetName"`
	// The database watcher name.
	WatcherName string `pulumi:"watcherName"`
}

// Concrete proxy resource types can be created by aliasing this type using a specific property type.
type LookupTargetResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// The FQDN host name of the server to use in the connection string when connecting to a target. For example, for an Azure SQL logical server in the Azure commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an Azure SQL managed instance in the Azure commercial cloud, the value might be 'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be specified separately.
	ConnectionServerName string `pulumi:"connectionServerName"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of authentication to use when connecting to a target.
	TargetAuthenticationType string `pulumi:"targetAuthenticationType"`
	// Discriminator property for TargetProperties.
	TargetType string `pulumi:"targetType"`
	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault *VaultSecretResponse `pulumi:"targetVault"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupTargetOutput(ctx *pulumi.Context, args LookupTargetOutputArgs, opts ...pulumi.InvokeOption) LookupTargetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTargetResultOutput, error) {
			args := v.(LookupTargetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:databasewatcher:getTarget", args, LookupTargetResultOutput{}, options).(LookupTargetResultOutput), nil
		}).(LookupTargetResultOutput)
}

type LookupTargetOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The target resource name.
	TargetName pulumi.StringInput `pulumi:"targetName"`
	// The database watcher name.
	WatcherName pulumi.StringInput `pulumi:"watcherName"`
}

func (LookupTargetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTargetArgs)(nil)).Elem()
}

// Concrete proxy resource types can be created by aliasing this type using a specific property type.
type LookupTargetResultOutput struct{ *pulumi.OutputState }

func (LookupTargetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTargetResult)(nil)).Elem()
}

func (o LookupTargetResultOutput) ToLookupTargetResultOutput() LookupTargetResultOutput {
	return o
}

func (o LookupTargetResultOutput) ToLookupTargetResultOutputWithContext(ctx context.Context) LookupTargetResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupTargetResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The FQDN host name of the server to use in the connection string when connecting to a target. For example, for an Azure SQL logical server in the Azure commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an Azure SQL managed instance in the Azure commercial cloud, the value might be 'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be specified separately.
func (o LookupTargetResultOutput) ConnectionServerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.ConnectionServerName }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupTargetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupTargetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o LookupTargetResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupTargetResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupTargetResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of authentication to use when connecting to a target.
func (o LookupTargetResultOutput) TargetAuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.TargetAuthenticationType }).(pulumi.StringOutput)
}

// Discriminator property for TargetProperties.
func (o LookupTargetResultOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.TargetType }).(pulumi.StringOutput)
}

// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
func (o LookupTargetResultOutput) TargetVault() VaultSecretResponsePtrOutput {
	return o.ApplyT(func(v LookupTargetResult) *VaultSecretResponse { return v.TargetVault }).(VaultSecretResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupTargetResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTargetResultOutput{})
}
