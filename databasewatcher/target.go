// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasewatcher

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Concrete proxy resource types can be created by aliasing this type using a specific property type.
// Azure REST API version: 2023-09-01-preview.
type Target struct {
	pulumi.CustomResourceState

	// The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
	ConnectionServerName pulumi.StringOutput `pulumi:"connectionServerName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of authentication to use when connecting to a target.
	TargetAuthenticationType pulumi.StringOutput `pulumi:"targetAuthenticationType"`
	// The target collection status.
	TargetCollectionStatus pulumi.StringPtrOutput `pulumi:"targetCollectionStatus"`
	// Discriminator property for TargetProperties.
	TargetType pulumi.StringOutput `pulumi:"targetType"`
	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault VaultSecretResponsePtrOutput `pulumi:"targetVault"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTarget registers a new resource with the given unique name, arguments, and options.
func NewTarget(ctx *pulumi.Context,
	name string, args *TargetArgs, opts ...pulumi.ResourceOption) (*Target, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionServerName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionServerName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TargetAuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'TargetAuthenticationType'")
	}
	if args.TargetType == nil {
		return nil, errors.New("invalid value for required argument 'TargetType'")
	}
	if args.WatcherName == nil {
		return nil, errors.New("invalid value for required argument 'WatcherName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:databasewatcher/v20230901preview:Target"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Target
	err := ctx.RegisterResource("azure-native:databasewatcher:Target", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTarget gets an existing Target resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetState, opts ...pulumi.ResourceOption) (*Target, error) {
	var resource Target
	err := ctx.ReadResource("azure-native:databasewatcher:Target", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Target resources.
type targetState struct {
}

type TargetState struct {
}

func (TargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetState)(nil)).Elem()
}

type targetArgs struct {
	// The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
	ConnectionServerName string `pulumi:"connectionServerName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The type of authentication to use when connecting to a target.
	TargetAuthenticationType string `pulumi:"targetAuthenticationType"`
	// The target collection status.
	TargetCollectionStatus *string `pulumi:"targetCollectionStatus"`
	// The target resource name.
	TargetName *string `pulumi:"targetName"`
	// Discriminator property for TargetProperties.
	TargetType string `pulumi:"targetType"`
	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault *VaultSecret `pulumi:"targetVault"`
	// The database watcher name.
	WatcherName string `pulumi:"watcherName"`
}

// The set of arguments for constructing a Target resource.
type TargetArgs struct {
	// The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
	ConnectionServerName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The type of authentication to use when connecting to a target.
	TargetAuthenticationType pulumi.StringInput
	// The target collection status.
	TargetCollectionStatus pulumi.StringPtrInput
	// The target resource name.
	TargetName pulumi.StringPtrInput
	// Discriminator property for TargetProperties.
	TargetType pulumi.StringInput
	// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
	TargetVault VaultSecretPtrInput
	// The database watcher name.
	WatcherName pulumi.StringInput
}

func (TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetArgs)(nil)).Elem()
}

type TargetInput interface {
	pulumi.Input

	ToTargetOutput() TargetOutput
	ToTargetOutputWithContext(ctx context.Context) TargetOutput
}

func (*Target) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (i *Target) ToTargetOutput() TargetOutput {
	return i.ToTargetOutputWithContext(context.Background())
}

func (i *Target) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOutput)
}

type TargetOutput struct{ *pulumi.OutputState }

func (TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (o TargetOutput) ToTargetOutput() TargetOutput {
	return o
}

func (o TargetOutput) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return o
}

// The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
func (o TargetOutput) ConnectionServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.ConnectionServerName }).(pulumi.StringOutput)
}

// The name of the resource
func (o TargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o TargetOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o TargetOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Target) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of authentication to use when connecting to a target.
func (o TargetOutput) TargetAuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.TargetAuthenticationType }).(pulumi.StringOutput)
}

// The target collection status.
func (o TargetOutput) TargetCollectionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.StringPtrOutput { return v.TargetCollectionStatus }).(pulumi.StringPtrOutput)
}

// Discriminator property for TargetProperties.
func (o TargetOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.TargetType }).(pulumi.StringOutput)
}

// To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
func (o TargetOutput) TargetVault() VaultSecretResponsePtrOutput {
	return o.ApplyT(func(v *Target) VaultSecretResponsePtrOutput { return v.TargetVault }).(VaultSecretResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o TargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TargetOutput{})
}
