// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasewatcher

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The properties of a data store.
type Datastore struct {
	// The Azure ResourceId of an Azure Data Explorer cluster.
	AdxClusterResourceId *string `pulumi:"adxClusterResourceId"`
	// The Kusto cluster display name.
	KustoClusterDisplayName *string `pulumi:"kustoClusterDisplayName"`
	// The Kusto cluster URI.
	KustoClusterUri string `pulumi:"kustoClusterUri"`
	// The Kusto data ingestion URI.
	KustoDataIngestionUri string `pulumi:"kustoDataIngestionUri"`
	// The name of a Kusto database.
	KustoDatabaseName string `pulumi:"kustoDatabaseName"`
	// The Kusto management URL.
	KustoManagementUrl string `pulumi:"kustoManagementUrl"`
	// The type of a Kusto offering.
	KustoOfferingType string `pulumi:"kustoOfferingType"`
}

// DatastoreInput is an input type that accepts DatastoreArgs and DatastoreOutput values.
// You can construct a concrete instance of `DatastoreInput` via:
//
//	DatastoreArgs{...}
type DatastoreInput interface {
	pulumi.Input

	ToDatastoreOutput() DatastoreOutput
	ToDatastoreOutputWithContext(context.Context) DatastoreOutput
}

// The properties of a data store.
type DatastoreArgs struct {
	// The Azure ResourceId of an Azure Data Explorer cluster.
	AdxClusterResourceId pulumi.StringPtrInput `pulumi:"adxClusterResourceId"`
	// The Kusto cluster display name.
	KustoClusterDisplayName pulumi.StringPtrInput `pulumi:"kustoClusterDisplayName"`
	// The Kusto cluster URI.
	KustoClusterUri pulumi.StringInput `pulumi:"kustoClusterUri"`
	// The Kusto data ingestion URI.
	KustoDataIngestionUri pulumi.StringInput `pulumi:"kustoDataIngestionUri"`
	// The name of a Kusto database.
	KustoDatabaseName pulumi.StringInput `pulumi:"kustoDatabaseName"`
	// The Kusto management URL.
	KustoManagementUrl pulumi.StringInput `pulumi:"kustoManagementUrl"`
	// The type of a Kusto offering.
	KustoOfferingType pulumi.StringInput `pulumi:"kustoOfferingType"`
}

func (DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Datastore)(nil)).Elem()
}

func (i DatastoreArgs) ToDatastoreOutput() DatastoreOutput {
	return i.ToDatastoreOutputWithContext(context.Background())
}

func (i DatastoreArgs) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreOutput)
}

func (i DatastoreArgs) ToDatastorePtrOutput() DatastorePtrOutput {
	return i.ToDatastorePtrOutputWithContext(context.Background())
}

func (i DatastoreArgs) ToDatastorePtrOutputWithContext(ctx context.Context) DatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreOutput).ToDatastorePtrOutputWithContext(ctx)
}

// DatastorePtrInput is an input type that accepts DatastoreArgs, DatastorePtr and DatastorePtrOutput values.
// You can construct a concrete instance of `DatastorePtrInput` via:
//
//	        DatastoreArgs{...}
//
//	or:
//
//	        nil
type DatastorePtrInput interface {
	pulumi.Input

	ToDatastorePtrOutput() DatastorePtrOutput
	ToDatastorePtrOutputWithContext(context.Context) DatastorePtrOutput
}

type datastorePtrType DatastoreArgs

func DatastorePtr(v *DatastoreArgs) DatastorePtrInput {
	return (*datastorePtrType)(v)
}

func (*datastorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (i *datastorePtrType) ToDatastorePtrOutput() DatastorePtrOutput {
	return i.ToDatastorePtrOutputWithContext(context.Background())
}

func (i *datastorePtrType) ToDatastorePtrOutputWithContext(ctx context.Context) DatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastorePtrOutput)
}

// The properties of a data store.
type DatastoreOutput struct{ *pulumi.OutputState }

func (DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Datastore)(nil)).Elem()
}

func (o DatastoreOutput) ToDatastoreOutput() DatastoreOutput {
	return o
}

func (o DatastoreOutput) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return o
}

func (o DatastoreOutput) ToDatastorePtrOutput() DatastorePtrOutput {
	return o.ToDatastorePtrOutputWithContext(context.Background())
}

func (o DatastoreOutput) ToDatastorePtrOutputWithContext(ctx context.Context) DatastorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Datastore) *Datastore {
		return &v
	}).(DatastorePtrOutput)
}

// The Azure ResourceId of an Azure Data Explorer cluster.
func (o DatastoreOutput) AdxClusterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Datastore) *string { return v.AdxClusterResourceId }).(pulumi.StringPtrOutput)
}

// The Kusto cluster display name.
func (o DatastoreOutput) KustoClusterDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Datastore) *string { return v.KustoClusterDisplayName }).(pulumi.StringPtrOutput)
}

// The Kusto cluster URI.
func (o DatastoreOutput) KustoClusterUri() pulumi.StringOutput {
	return o.ApplyT(func(v Datastore) string { return v.KustoClusterUri }).(pulumi.StringOutput)
}

// The Kusto data ingestion URI.
func (o DatastoreOutput) KustoDataIngestionUri() pulumi.StringOutput {
	return o.ApplyT(func(v Datastore) string { return v.KustoDataIngestionUri }).(pulumi.StringOutput)
}

// The name of a Kusto database.
func (o DatastoreOutput) KustoDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v Datastore) string { return v.KustoDatabaseName }).(pulumi.StringOutput)
}

// The Kusto management URL.
func (o DatastoreOutput) KustoManagementUrl() pulumi.StringOutput {
	return o.ApplyT(func(v Datastore) string { return v.KustoManagementUrl }).(pulumi.StringOutput)
}

// The type of a Kusto offering.
func (o DatastoreOutput) KustoOfferingType() pulumi.StringOutput {
	return o.ApplyT(func(v Datastore) string { return v.KustoOfferingType }).(pulumi.StringOutput)
}

type DatastorePtrOutput struct{ *pulumi.OutputState }

func (DatastorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (o DatastorePtrOutput) ToDatastorePtrOutput() DatastorePtrOutput {
	return o
}

func (o DatastorePtrOutput) ToDatastorePtrOutputWithContext(ctx context.Context) DatastorePtrOutput {
	return o
}

func (o DatastorePtrOutput) Elem() DatastoreOutput {
	return o.ApplyT(func(v *Datastore) Datastore {
		if v != nil {
			return *v
		}
		var ret Datastore
		return ret
	}).(DatastoreOutput)
}

// The Azure ResourceId of an Azure Data Explorer cluster.
func (o DatastorePtrOutput) AdxClusterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) *string {
		if v == nil {
			return nil
		}
		return v.AdxClusterResourceId
	}).(pulumi.StringPtrOutput)
}

// The Kusto cluster display name.
func (o DatastorePtrOutput) KustoClusterDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) *string {
		if v == nil {
			return nil
		}
		return v.KustoClusterDisplayName
	}).(pulumi.StringPtrOutput)
}

// The Kusto cluster URI.
func (o DatastorePtrOutput) KustoClusterUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) *string {
		if v == nil {
			return nil
		}
		return &v.KustoClusterUri
	}).(pulumi.StringPtrOutput)
}

// The Kusto data ingestion URI.
func (o DatastorePtrOutput) KustoDataIngestionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) *string {
		if v == nil {
			return nil
		}
		return &v.KustoDataIngestionUri
	}).(pulumi.StringPtrOutput)
}

// The name of a Kusto database.
func (o DatastorePtrOutput) KustoDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) *string {
		if v == nil {
			return nil
		}
		return &v.KustoDatabaseName
	}).(pulumi.StringPtrOutput)
}

// The Kusto management URL.
func (o DatastorePtrOutput) KustoManagementUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) *string {
		if v == nil {
			return nil
		}
		return &v.KustoManagementUrl
	}).(pulumi.StringPtrOutput)
}

// The type of a Kusto offering.
func (o DatastorePtrOutput) KustoOfferingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) *string {
		if v == nil {
			return nil
		}
		return &v.KustoOfferingType
	}).(pulumi.StringPtrOutput)
}

// The properties of a data store.
type DatastoreResponse struct {
	// The Azure ResourceId of an Azure Data Explorer cluster.
	AdxClusterResourceId *string `pulumi:"adxClusterResourceId"`
	// The Kusto cluster display name.
	KustoClusterDisplayName *string `pulumi:"kustoClusterDisplayName"`
	// The Kusto cluster URI.
	KustoClusterUri string `pulumi:"kustoClusterUri"`
	// The Kusto data ingestion URI.
	KustoDataIngestionUri string `pulumi:"kustoDataIngestionUri"`
	// The name of a Kusto database.
	KustoDatabaseName string `pulumi:"kustoDatabaseName"`
	// The Kusto management URL.
	KustoManagementUrl string `pulumi:"kustoManagementUrl"`
	// The type of a Kusto offering.
	KustoOfferingType string `pulumi:"kustoOfferingType"`
}

// The properties of a data store.
type DatastoreResponseOutput struct{ *pulumi.OutputState }

func (DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreResponse)(nil)).Elem()
}

func (o DatastoreResponseOutput) ToDatastoreResponseOutput() DatastoreResponseOutput {
	return o
}

func (o DatastoreResponseOutput) ToDatastoreResponseOutputWithContext(ctx context.Context) DatastoreResponseOutput {
	return o
}

// The Azure ResourceId of an Azure Data Explorer cluster.
func (o DatastoreResponseOutput) AdxClusterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.AdxClusterResourceId }).(pulumi.StringPtrOutput)
}

// The Kusto cluster display name.
func (o DatastoreResponseOutput) KustoClusterDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.KustoClusterDisplayName }).(pulumi.StringPtrOutput)
}

// The Kusto cluster URI.
func (o DatastoreResponseOutput) KustoClusterUri() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.KustoClusterUri }).(pulumi.StringOutput)
}

// The Kusto data ingestion URI.
func (o DatastoreResponseOutput) KustoDataIngestionUri() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.KustoDataIngestionUri }).(pulumi.StringOutput)
}

// The name of a Kusto database.
func (o DatastoreResponseOutput) KustoDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.KustoDatabaseName }).(pulumi.StringOutput)
}

// The Kusto management URL.
func (o DatastoreResponseOutput) KustoManagementUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.KustoManagementUrl }).(pulumi.StringOutput)
}

// The type of a Kusto offering.
func (o DatastoreResponseOutput) KustoOfferingType() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.KustoOfferingType }).(pulumi.StringOutput)
}

type DatastoreResponsePtrOutput struct{ *pulumi.OutputState }

func (DatastoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreResponse)(nil)).Elem()
}

func (o DatastoreResponsePtrOutput) ToDatastoreResponsePtrOutput() DatastoreResponsePtrOutput {
	return o
}

func (o DatastoreResponsePtrOutput) ToDatastoreResponsePtrOutputWithContext(ctx context.Context) DatastoreResponsePtrOutput {
	return o
}

func (o DatastoreResponsePtrOutput) Elem() DatastoreResponseOutput {
	return o.ApplyT(func(v *DatastoreResponse) DatastoreResponse {
		if v != nil {
			return *v
		}
		var ret DatastoreResponse
		return ret
	}).(DatastoreResponseOutput)
}

// The Azure ResourceId of an Azure Data Explorer cluster.
func (o DatastoreResponsePtrOutput) AdxClusterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdxClusterResourceId
	}).(pulumi.StringPtrOutput)
}

// The Kusto cluster display name.
func (o DatastoreResponsePtrOutput) KustoClusterDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreResponse) *string {
		if v == nil {
			return nil
		}
		return v.KustoClusterDisplayName
	}).(pulumi.StringPtrOutput)
}

// The Kusto cluster URI.
func (o DatastoreResponsePtrOutput) KustoClusterUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KustoClusterUri
	}).(pulumi.StringPtrOutput)
}

// The Kusto data ingestion URI.
func (o DatastoreResponsePtrOutput) KustoDataIngestionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KustoDataIngestionUri
	}).(pulumi.StringPtrOutput)
}

// The name of a Kusto database.
func (o DatastoreResponsePtrOutput) KustoDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KustoDatabaseName
	}).(pulumi.StringPtrOutput)
}

// The Kusto management URL.
func (o DatastoreResponsePtrOutput) KustoManagementUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KustoManagementUrl
	}).(pulumi.StringPtrOutput)
}

// The type of a Kusto offering.
func (o DatastoreResponsePtrOutput) KustoOfferingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KustoOfferingType
	}).(pulumi.StringPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// The vault specific details required if using SQL authentication to connect to a target.
type VaultSecret struct {
	// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
	AkvResourceId *string `pulumi:"akvResourceId"`
	// The path to the Key Vault secret storing the password for authentication to a target.
	AkvTargetPassword *string `pulumi:"akvTargetPassword"`
	// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
	AkvTargetUser *string `pulumi:"akvTargetUser"`
}

// VaultSecretInput is an input type that accepts VaultSecretArgs and VaultSecretOutput values.
// You can construct a concrete instance of `VaultSecretInput` via:
//
//	VaultSecretArgs{...}
type VaultSecretInput interface {
	pulumi.Input

	ToVaultSecretOutput() VaultSecretOutput
	ToVaultSecretOutputWithContext(context.Context) VaultSecretOutput
}

// The vault specific details required if using SQL authentication to connect to a target.
type VaultSecretArgs struct {
	// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
	AkvResourceId pulumi.StringPtrInput `pulumi:"akvResourceId"`
	// The path to the Key Vault secret storing the password for authentication to a target.
	AkvTargetPassword pulumi.StringPtrInput `pulumi:"akvTargetPassword"`
	// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
	AkvTargetUser pulumi.StringPtrInput `pulumi:"akvTargetUser"`
}

func (VaultSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecret)(nil)).Elem()
}

func (i VaultSecretArgs) ToVaultSecretOutput() VaultSecretOutput {
	return i.ToVaultSecretOutputWithContext(context.Background())
}

func (i VaultSecretArgs) ToVaultSecretOutputWithContext(ctx context.Context) VaultSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultSecretOutput)
}

func (i VaultSecretArgs) ToVaultSecretPtrOutput() VaultSecretPtrOutput {
	return i.ToVaultSecretPtrOutputWithContext(context.Background())
}

func (i VaultSecretArgs) ToVaultSecretPtrOutputWithContext(ctx context.Context) VaultSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultSecretOutput).ToVaultSecretPtrOutputWithContext(ctx)
}

// VaultSecretPtrInput is an input type that accepts VaultSecretArgs, VaultSecretPtr and VaultSecretPtrOutput values.
// You can construct a concrete instance of `VaultSecretPtrInput` via:
//
//	        VaultSecretArgs{...}
//
//	or:
//
//	        nil
type VaultSecretPtrInput interface {
	pulumi.Input

	ToVaultSecretPtrOutput() VaultSecretPtrOutput
	ToVaultSecretPtrOutputWithContext(context.Context) VaultSecretPtrOutput
}

type vaultSecretPtrType VaultSecretArgs

func VaultSecretPtr(v *VaultSecretArgs) VaultSecretPtrInput {
	return (*vaultSecretPtrType)(v)
}

func (*vaultSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultSecret)(nil)).Elem()
}

func (i *vaultSecretPtrType) ToVaultSecretPtrOutput() VaultSecretPtrOutput {
	return i.ToVaultSecretPtrOutputWithContext(context.Background())
}

func (i *vaultSecretPtrType) ToVaultSecretPtrOutputWithContext(ctx context.Context) VaultSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultSecretPtrOutput)
}

// The vault specific details required if using SQL authentication to connect to a target.
type VaultSecretOutput struct{ *pulumi.OutputState }

func (VaultSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecret)(nil)).Elem()
}

func (o VaultSecretOutput) ToVaultSecretOutput() VaultSecretOutput {
	return o
}

func (o VaultSecretOutput) ToVaultSecretOutputWithContext(ctx context.Context) VaultSecretOutput {
	return o
}

func (o VaultSecretOutput) ToVaultSecretPtrOutput() VaultSecretPtrOutput {
	return o.ToVaultSecretPtrOutputWithContext(context.Background())
}

func (o VaultSecretOutput) ToVaultSecretPtrOutputWithContext(ctx context.Context) VaultSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultSecret) *VaultSecret {
		return &v
	}).(VaultSecretPtrOutput)
}

// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
func (o VaultSecretOutput) AkvResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultSecret) *string { return v.AkvResourceId }).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the password for authentication to a target.
func (o VaultSecretOutput) AkvTargetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultSecret) *string { return v.AkvTargetPassword }).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
func (o VaultSecretOutput) AkvTargetUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultSecret) *string { return v.AkvTargetUser }).(pulumi.StringPtrOutput)
}

type VaultSecretPtrOutput struct{ *pulumi.OutputState }

func (VaultSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultSecret)(nil)).Elem()
}

func (o VaultSecretPtrOutput) ToVaultSecretPtrOutput() VaultSecretPtrOutput {
	return o
}

func (o VaultSecretPtrOutput) ToVaultSecretPtrOutputWithContext(ctx context.Context) VaultSecretPtrOutput {
	return o
}

func (o VaultSecretPtrOutput) Elem() VaultSecretOutput {
	return o.ApplyT(func(v *VaultSecret) VaultSecret {
		if v != nil {
			return *v
		}
		var ret VaultSecret
		return ret
	}).(VaultSecretOutput)
}

// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
func (o VaultSecretPtrOutput) AkvResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultSecret) *string {
		if v == nil {
			return nil
		}
		return v.AkvResourceId
	}).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the password for authentication to a target.
func (o VaultSecretPtrOutput) AkvTargetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultSecret) *string {
		if v == nil {
			return nil
		}
		return v.AkvTargetPassword
	}).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
func (o VaultSecretPtrOutput) AkvTargetUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultSecret) *string {
		if v == nil {
			return nil
		}
		return v.AkvTargetUser
	}).(pulumi.StringPtrOutput)
}

// The vault specific details required if using SQL authentication to connect to a target.
type VaultSecretResponse struct {
	// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
	AkvResourceId *string `pulumi:"akvResourceId"`
	// The path to the Key Vault secret storing the password for authentication to a target.
	AkvTargetPassword *string `pulumi:"akvTargetPassword"`
	// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
	AkvTargetUser *string `pulumi:"akvTargetUser"`
}

// The vault specific details required if using SQL authentication to connect to a target.
type VaultSecretResponseOutput struct{ *pulumi.OutputState }

func (VaultSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecretResponse)(nil)).Elem()
}

func (o VaultSecretResponseOutput) ToVaultSecretResponseOutput() VaultSecretResponseOutput {
	return o
}

func (o VaultSecretResponseOutput) ToVaultSecretResponseOutputWithContext(ctx context.Context) VaultSecretResponseOutput {
	return o
}

// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
func (o VaultSecretResponseOutput) AkvResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultSecretResponse) *string { return v.AkvResourceId }).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the password for authentication to a target.
func (o VaultSecretResponseOutput) AkvTargetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultSecretResponse) *string { return v.AkvTargetPassword }).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
func (o VaultSecretResponseOutput) AkvTargetUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultSecretResponse) *string { return v.AkvTargetUser }).(pulumi.StringPtrOutput)
}

type VaultSecretResponsePtrOutput struct{ *pulumi.OutputState }

func (VaultSecretResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultSecretResponse)(nil)).Elem()
}

func (o VaultSecretResponsePtrOutput) ToVaultSecretResponsePtrOutput() VaultSecretResponsePtrOutput {
	return o
}

func (o VaultSecretResponsePtrOutput) ToVaultSecretResponsePtrOutputWithContext(ctx context.Context) VaultSecretResponsePtrOutput {
	return o
}

func (o VaultSecretResponsePtrOutput) Elem() VaultSecretResponseOutput {
	return o.ApplyT(func(v *VaultSecretResponse) VaultSecretResponse {
		if v != nil {
			return *v
		}
		var ret VaultSecretResponse
		return ret
	}).(VaultSecretResponseOutput)
}

// The Azure ResourceId of the Key Vault instance storing database authentication secrets.
func (o VaultSecretResponsePtrOutput) AkvResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.AkvResourceId
	}).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the password for authentication to a target.
func (o VaultSecretResponsePtrOutput) AkvTargetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.AkvTargetPassword
	}).(pulumi.StringPtrOutput)
}

// The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a target.
func (o VaultSecretResponsePtrOutput) AkvTargetUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.AkvTargetUser
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DatastoreOutput{})
	pulumi.RegisterOutputType(DatastorePtrOutput{})
	pulumi.RegisterOutputType(DatastoreResponseOutput{})
	pulumi.RegisterOutputType(DatastoreResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(VaultSecretOutput{})
	pulumi.RegisterOutputType(VaultSecretPtrOutput{})
	pulumi.RegisterOutputType(VaultSecretResponseOutput{})
	pulumi.RegisterOutputType(VaultSecretResponsePtrOutput{})
}
