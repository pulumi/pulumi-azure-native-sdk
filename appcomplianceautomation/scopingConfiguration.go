// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appcomplianceautomation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A class represent an AppComplianceAutomation scoping configuration resource.
// Azure REST API version: 2024-06-27. Prior API version in Azure Native 2.x: 2024-06-27.
type ScopingConfiguration struct {
	pulumi.CustomResourceState

	// List of scoping question answers.
	Answers ScopingAnswerResponseArrayOutput `pulumi:"answers"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure lifecycle management
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewScopingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewScopingConfiguration(ctx *pulumi.Context,
	name string, args *ScopingConfigurationArgs, opts ...pulumi.ResourceOption) (*ScopingConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReportName == nil {
		return nil, errors.New("invalid value for required argument 'ReportName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:appcomplianceautomation/v20240627:ScopingConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ScopingConfiguration
	err := ctx.RegisterResource("azure-native:appcomplianceautomation:ScopingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopingConfiguration gets an existing ScopingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopingConfigurationState, opts ...pulumi.ResourceOption) (*ScopingConfiguration, error) {
	var resource ScopingConfiguration
	err := ctx.ReadResource("azure-native:appcomplianceautomation:ScopingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopingConfiguration resources.
type scopingConfigurationState struct {
}

type ScopingConfigurationState struct {
}

func (ScopingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopingConfigurationState)(nil)).Elem()
}

type scopingConfigurationArgs struct {
	// List of scoping question answers.
	Answers []ScopingAnswer `pulumi:"answers"`
	// Report Name.
	ReportName string `pulumi:"reportName"`
	// The scoping configuration of the specific report.
	ScopingConfigurationName *string `pulumi:"scopingConfigurationName"`
}

// The set of arguments for constructing a ScopingConfiguration resource.
type ScopingConfigurationArgs struct {
	// List of scoping question answers.
	Answers ScopingAnswerArrayInput
	// Report Name.
	ReportName pulumi.StringInput
	// The scoping configuration of the specific report.
	ScopingConfigurationName pulumi.StringPtrInput
}

func (ScopingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopingConfigurationArgs)(nil)).Elem()
}

type ScopingConfigurationInput interface {
	pulumi.Input

	ToScopingConfigurationOutput() ScopingConfigurationOutput
	ToScopingConfigurationOutputWithContext(ctx context.Context) ScopingConfigurationOutput
}

func (*ScopingConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopingConfiguration)(nil)).Elem()
}

func (i *ScopingConfiguration) ToScopingConfigurationOutput() ScopingConfigurationOutput {
	return i.ToScopingConfigurationOutputWithContext(context.Background())
}

func (i *ScopingConfiguration) ToScopingConfigurationOutputWithContext(ctx context.Context) ScopingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopingConfigurationOutput)
}

type ScopingConfigurationOutput struct{ *pulumi.OutputState }

func (ScopingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopingConfiguration)(nil)).Elem()
}

func (o ScopingConfigurationOutput) ToScopingConfigurationOutput() ScopingConfigurationOutput {
	return o
}

func (o ScopingConfigurationOutput) ToScopingConfigurationOutputWithContext(ctx context.Context) ScopingConfigurationOutput {
	return o
}

// List of scoping question answers.
func (o ScopingConfigurationOutput) Answers() ScopingAnswerResponseArrayOutput {
	return o.ApplyT(func(v *ScopingConfiguration) ScopingAnswerResponseArrayOutput { return v.Answers }).(ScopingAnswerResponseArrayOutput)
}

// The Azure API version of the resource.
func (o ScopingConfigurationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopingConfiguration) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o ScopingConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopingConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure lifecycle management
func (o ScopingConfigurationOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopingConfiguration) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ScopingConfigurationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ScopingConfiguration) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ScopingConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopingConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ScopingConfigurationOutput{})
}
