// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appcomplianceautomation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A class represent an AppComplianceAutomation evidence resource.
//
// Uses Azure REST API version 2024-06-27.
type Evidence struct {
	pulumi.CustomResourceState

	// Control id.
	ControlId pulumi.StringPtrOutput `pulumi:"controlId"`
	// Evidence type.
	EvidenceType pulumi.StringPtrOutput `pulumi:"evidenceType"`
	// Extra data considered as evidence.
	ExtraData pulumi.StringPtrOutput `pulumi:"extraData"`
	// The path of the file in storage.
	FilePath pulumi.StringOutput `pulumi:"filePath"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure lifecycle management
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Responsibility id.
	ResponsibilityId pulumi.StringPtrOutput `pulumi:"responsibilityId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEvidence registers a new resource with the given unique name, arguments, and options.
func NewEvidence(ctx *pulumi.Context,
	name string, args *EvidenceArgs, opts ...pulumi.ResourceOption) (*Evidence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilePath == nil {
		return nil, errors.New("invalid value for required argument 'FilePath'")
	}
	if args.ReportName == nil {
		return nil, errors.New("invalid value for required argument 'ReportName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:appcomplianceautomation/v20240627:Evidence"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Evidence
	err := ctx.RegisterResource("azure-native:appcomplianceautomation:Evidence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvidence gets an existing Evidence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvidence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvidenceState, opts ...pulumi.ResourceOption) (*Evidence, error) {
	var resource Evidence
	err := ctx.ReadResource("azure-native:appcomplianceautomation:Evidence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Evidence resources.
type evidenceState struct {
}

type EvidenceState struct {
}

func (EvidenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*evidenceState)(nil)).Elem()
}

type evidenceArgs struct {
	// Control id.
	ControlId *string `pulumi:"controlId"`
	// The evidence name.
	EvidenceName *string `pulumi:"evidenceName"`
	// Evidence type.
	EvidenceType *string `pulumi:"evidenceType"`
	// Extra data considered as evidence.
	ExtraData *string `pulumi:"extraData"`
	// The path of the file in storage.
	FilePath string `pulumi:"filePath"`
	// The offerGuid which mapping to the reports.
	OfferGuid *string `pulumi:"offerGuid"`
	// The tenant id of the report creator.
	ReportCreatorTenantId *string `pulumi:"reportCreatorTenantId"`
	// Report Name.
	ReportName string `pulumi:"reportName"`
	// Responsibility id.
	ResponsibilityId *string `pulumi:"responsibilityId"`
}

// The set of arguments for constructing a Evidence resource.
type EvidenceArgs struct {
	// Control id.
	ControlId pulumi.StringPtrInput
	// The evidence name.
	EvidenceName pulumi.StringPtrInput
	// Evidence type.
	EvidenceType pulumi.StringPtrInput
	// Extra data considered as evidence.
	ExtraData pulumi.StringPtrInput
	// The path of the file in storage.
	FilePath pulumi.StringInput
	// The offerGuid which mapping to the reports.
	OfferGuid pulumi.StringPtrInput
	// The tenant id of the report creator.
	ReportCreatorTenantId pulumi.StringPtrInput
	// Report Name.
	ReportName pulumi.StringInput
	// Responsibility id.
	ResponsibilityId pulumi.StringPtrInput
}

func (EvidenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evidenceArgs)(nil)).Elem()
}

type EvidenceInput interface {
	pulumi.Input

	ToEvidenceOutput() EvidenceOutput
	ToEvidenceOutputWithContext(ctx context.Context) EvidenceOutput
}

func (*Evidence) ElementType() reflect.Type {
	return reflect.TypeOf((**Evidence)(nil)).Elem()
}

func (i *Evidence) ToEvidenceOutput() EvidenceOutput {
	return i.ToEvidenceOutputWithContext(context.Background())
}

func (i *Evidence) ToEvidenceOutputWithContext(ctx context.Context) EvidenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvidenceOutput)
}

type EvidenceOutput struct{ *pulumi.OutputState }

func (EvidenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Evidence)(nil)).Elem()
}

func (o EvidenceOutput) ToEvidenceOutput() EvidenceOutput {
	return o
}

func (o EvidenceOutput) ToEvidenceOutputWithContext(ctx context.Context) EvidenceOutput {
	return o
}

// Control id.
func (o EvidenceOutput) ControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringPtrOutput { return v.ControlId }).(pulumi.StringPtrOutput)
}

// Evidence type.
func (o EvidenceOutput) EvidenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringPtrOutput { return v.EvidenceType }).(pulumi.StringPtrOutput)
}

// Extra data considered as evidence.
func (o EvidenceOutput) ExtraData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringPtrOutput { return v.ExtraData }).(pulumi.StringPtrOutput)
}

// The path of the file in storage.
func (o EvidenceOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringOutput { return v.FilePath }).(pulumi.StringOutput)
}

// The name of the resource
func (o EvidenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure lifecycle management
func (o EvidenceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Responsibility id.
func (o EvidenceOutput) ResponsibilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringPtrOutput { return v.ResponsibilityId }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EvidenceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Evidence) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EvidenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Evidence) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EvidenceOutput{})
}
