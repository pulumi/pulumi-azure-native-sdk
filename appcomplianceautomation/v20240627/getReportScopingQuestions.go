// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240627

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fix the AppComplianceAutomation report error. e.g: App Compliance Automation Tool service unregistered, automation removed.
func GetReportScopingQuestions(ctx *pulumi.Context, args *GetReportScopingQuestionsArgs, opts ...pulumi.InvokeOption) (*GetReportScopingQuestionsResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetReportScopingQuestionsResult
	err := ctx.Invoke("azure-native:appcomplianceautomation/v20240627:getReportScopingQuestions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetReportScopingQuestionsArgs struct {
	// Report Name.
	ReportName string `pulumi:"reportName"`
}

// Scoping question list.
type GetReportScopingQuestionsResult struct {
	// List of scoping questions.
	Questions []ScopingQuestionResponse `pulumi:"questions"`
}

func GetReportScopingQuestionsOutput(ctx *pulumi.Context, args GetReportScopingQuestionsOutputArgs, opts ...pulumi.InvokeOption) GetReportScopingQuestionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReportScopingQuestionsResultOutput, error) {
			args := v.(GetReportScopingQuestionsArgs)
			opts = utilities.PkgInvokeDefaultOpts(opts)
			var rv GetReportScopingQuestionsResult
			secret, err := ctx.InvokePackageRaw("azure-native:appcomplianceautomation/v20240627:getReportScopingQuestions", args, &rv, "", opts...)
			if err != nil {
				return GetReportScopingQuestionsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetReportScopingQuestionsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetReportScopingQuestionsResultOutput), nil
			}
			return output, nil
		}).(GetReportScopingQuestionsResultOutput)
}

type GetReportScopingQuestionsOutputArgs struct {
	// Report Name.
	ReportName pulumi.StringInput `pulumi:"reportName"`
}

func (GetReportScopingQuestionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportScopingQuestionsArgs)(nil)).Elem()
}

// Scoping question list.
type GetReportScopingQuestionsResultOutput struct{ *pulumi.OutputState }

func (GetReportScopingQuestionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReportScopingQuestionsResult)(nil)).Elem()
}

func (o GetReportScopingQuestionsResultOutput) ToGetReportScopingQuestionsResultOutput() GetReportScopingQuestionsResultOutput {
	return o
}

func (o GetReportScopingQuestionsResultOutput) ToGetReportScopingQuestionsResultOutputWithContext(ctx context.Context) GetReportScopingQuestionsResultOutput {
	return o
}

// List of scoping questions.
func (o GetReportScopingQuestionsResultOutput) Questions() ScopingQuestionResponseArrayOutput {
	return o.ApplyT(func(v GetReportScopingQuestionsResult) []ScopingQuestionResponse { return v.Questions }).(ScopingQuestionResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReportScopingQuestionsResultOutput{})
}
