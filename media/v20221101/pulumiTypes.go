// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Akamai access control
type AkamaiAccessControl struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList []AkamaiSignatureHeaderAuthenticationKey `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

// AkamaiAccessControlInput is an input type that accepts AkamaiAccessControlArgs and AkamaiAccessControlOutput values.
// You can construct a concrete instance of `AkamaiAccessControlInput` via:
//
//	AkamaiAccessControlArgs{...}
type AkamaiAccessControlInput interface {
	pulumi.Input

	ToAkamaiAccessControlOutput() AkamaiAccessControlOutput
	ToAkamaiAccessControlOutputWithContext(context.Context) AkamaiAccessControlOutput
}

// Akamai access control
type AkamaiAccessControlArgs struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList AkamaiSignatureHeaderAuthenticationKeyArrayInput `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

func (AkamaiAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControl)(nil)).Elem()
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlOutput() AkamaiAccessControlOutput {
	return i.ToAkamaiAccessControlOutputWithContext(context.Background())
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlOutputWithContext(ctx context.Context) AkamaiAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlOutput)
}

func (i AkamaiAccessControlArgs) ToOutput(ctx context.Context) pulumix.Output[AkamaiAccessControl] {
	return pulumix.Output[AkamaiAccessControl]{
		OutputState: i.ToAkamaiAccessControlOutputWithContext(ctx).OutputState,
	}
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return i.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlOutput).ToAkamaiAccessControlPtrOutputWithContext(ctx)
}

// AkamaiAccessControlPtrInput is an input type that accepts AkamaiAccessControlArgs, AkamaiAccessControlPtr and AkamaiAccessControlPtrOutput values.
// You can construct a concrete instance of `AkamaiAccessControlPtrInput` via:
//
//	        AkamaiAccessControlArgs{...}
//
//	or:
//
//	        nil
type AkamaiAccessControlPtrInput interface {
	pulumi.Input

	ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput
	ToAkamaiAccessControlPtrOutputWithContext(context.Context) AkamaiAccessControlPtrOutput
}

type akamaiAccessControlPtrType AkamaiAccessControlArgs

func AkamaiAccessControlPtr(v *AkamaiAccessControlArgs) AkamaiAccessControlPtrInput {
	return (*akamaiAccessControlPtrType)(v)
}

func (*akamaiAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControl)(nil)).Elem()
}

func (i *akamaiAccessControlPtrType) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return i.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (i *akamaiAccessControlPtrType) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlPtrOutput)
}

func (i *akamaiAccessControlPtrType) ToOutput(ctx context.Context) pulumix.Output[*AkamaiAccessControl] {
	return pulumix.Output[*AkamaiAccessControl]{
		OutputState: i.ToAkamaiAccessControlPtrOutputWithContext(ctx).OutputState,
	}
}

// Akamai access control
type AkamaiAccessControlOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControl)(nil)).Elem()
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlOutput() AkamaiAccessControlOutput {
	return o
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlOutputWithContext(ctx context.Context) AkamaiAccessControlOutput {
	return o
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return o.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AkamaiAccessControl) *AkamaiAccessControl {
		return &v
	}).(AkamaiAccessControlPtrOutput)
}

func (o AkamaiAccessControlOutput) ToOutput(ctx context.Context) pulumix.Output[AkamaiAccessControl] {
	return pulumix.Output[AkamaiAccessControl]{
		OutputState: o.OutputState,
	}
}

// authentication key list
func (o AkamaiAccessControlOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v AkamaiAccessControl) []AkamaiSignatureHeaderAuthenticationKey {
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

type AkamaiAccessControlPtrOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControl)(nil)).Elem()
}

func (o AkamaiAccessControlPtrOutput) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return o
}

func (o AkamaiAccessControlPtrOutput) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return o
}

func (o AkamaiAccessControlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AkamaiAccessControl] {
	return pulumix.Output[*AkamaiAccessControl]{
		OutputState: o.OutputState,
	}
}

func (o AkamaiAccessControlPtrOutput) Elem() AkamaiAccessControlOutput {
	return o.ApplyT(func(v *AkamaiAccessControl) AkamaiAccessControl {
		if v != nil {
			return *v
		}
		var ret AkamaiAccessControl
		return ret
	}).(AkamaiAccessControlOutput)
}

// authentication key list
func (o AkamaiAccessControlPtrOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v *AkamaiAccessControl) []AkamaiSignatureHeaderAuthenticationKey {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// Akamai access control
type AkamaiAccessControlResponse struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList []AkamaiSignatureHeaderAuthenticationKeyResponse `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

// Akamai access control
type AkamaiAccessControlResponseOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControlResponse)(nil)).Elem()
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponseOutput() AkamaiAccessControlResponseOutput {
	return o
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponseOutputWithContext(ctx context.Context) AkamaiAccessControlResponseOutput {
	return o
}

func (o AkamaiAccessControlResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AkamaiAccessControlResponse] {
	return pulumix.Output[AkamaiAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

// authentication key list
func (o AkamaiAccessControlResponseOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o.ApplyT(func(v AkamaiAccessControlResponse) []AkamaiSignatureHeaderAuthenticationKeyResponse {
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

type AkamaiAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControlResponse)(nil)).Elem()
}

func (o AkamaiAccessControlResponsePtrOutput) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return o
}

func (o AkamaiAccessControlResponsePtrOutput) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return o
}

func (o AkamaiAccessControlResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AkamaiAccessControlResponse] {
	return pulumix.Output[*AkamaiAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

func (o AkamaiAccessControlResponsePtrOutput) Elem() AkamaiAccessControlResponseOutput {
	return o.ApplyT(func(v *AkamaiAccessControlResponse) AkamaiAccessControlResponse {
		if v != nil {
			return *v
		}
		var ret AkamaiAccessControlResponse
		return ret
	}).(AkamaiAccessControlResponseOutput)
}

// authentication key list
func (o AkamaiAccessControlResponsePtrOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o.ApplyT(func(v *AkamaiAccessControlResponse) []AkamaiSignatureHeaderAuthenticationKeyResponse {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKey struct {
	// authentication key
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// identifier of the key
	Identifier *string `pulumi:"identifier"`
}

// AkamaiSignatureHeaderAuthenticationKeyInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyArgs and AkamaiSignatureHeaderAuthenticationKeyOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyInput` via:
//
//	AkamaiSignatureHeaderAuthenticationKeyArgs{...}
type AkamaiSignatureHeaderAuthenticationKeyInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput
	ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyArgs struct {
	// authentication key
	Base64Key pulumi.StringPtrInput `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// identifier of the key
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (AkamaiSignatureHeaderAuthenticationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyArgs) ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyArgs) ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyOutput)
}

func (i AkamaiSignatureHeaderAuthenticationKeyArgs) ToOutput(ctx context.Context) pulumix.Output[AkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[AkamaiSignatureHeaderAuthenticationKey]{
		OutputState: i.ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx).OutputState,
	}
}

// AkamaiSignatureHeaderAuthenticationKeyArrayInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyArray and AkamaiSignatureHeaderAuthenticationKeyArrayOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyArrayInput` via:
//
//	AkamaiSignatureHeaderAuthenticationKeyArray{ AkamaiSignatureHeaderAuthenticationKeyArgs{...} }
type AkamaiSignatureHeaderAuthenticationKeyArrayInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput
	ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput
}

type AkamaiSignatureHeaderAuthenticationKeyArray []AkamaiSignatureHeaderAuthenticationKeyInput

func (AkamaiSignatureHeaderAuthenticationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyArray) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyArray) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

func (i AkamaiSignatureHeaderAuthenticationKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]AkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[[]AkamaiSignatureHeaderAuthenticationKey]{
		OutputState: i.ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyOutput) ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyOutput) ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyOutput) ToOutput(ctx context.Context) pulumix.Output[AkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[AkamaiSignatureHeaderAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

// authentication key
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Base64Key }).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// identifier of the key
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type AkamaiSignatureHeaderAuthenticationKeyArrayOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[[]AkamaiSignatureHeaderAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) Index(i pulumi.IntInput) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AkamaiSignatureHeaderAuthenticationKey {
		return vs[0].([]AkamaiSignatureHeaderAuthenticationKey)[vs[1].(int)]
	}).(AkamaiSignatureHeaderAuthenticationKeyOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponse struct {
	// authentication key
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// identifier of the key
	Identifier *string `pulumi:"identifier"`
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponseOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutput() AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AkamaiSignatureHeaderAuthenticationKeyResponse] {
	return pulumix.Output[AkamaiSignatureHeaderAuthenticationKeyResponse]{
		OutputState: o.OutputState,
	}
}

// authentication key
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Base64Key }).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// identifier of the key
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AkamaiSignatureHeaderAuthenticationKeyResponse] {
	return pulumix.Output[[]AkamaiSignatureHeaderAuthenticationKeyResponse]{
		OutputState: o.OutputState,
	}
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) Index(i pulumi.IntInput) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AkamaiSignatureHeaderAuthenticationKeyResponse {
		return vs[0].([]AkamaiSignatureHeaderAuthenticationKeyResponse)[vs[1].(int)]
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseOutput)
}

// The streaming endpoint current sku.
type ArmStreamingEndpointCurrentSku struct {
	// The streaming endpoint sku capacity.
	Capacity *int `pulumi:"capacity"`
}

// ArmStreamingEndpointCurrentSkuInput is an input type that accepts ArmStreamingEndpointCurrentSkuArgs and ArmStreamingEndpointCurrentSkuOutput values.
// You can construct a concrete instance of `ArmStreamingEndpointCurrentSkuInput` via:
//
//	ArmStreamingEndpointCurrentSkuArgs{...}
type ArmStreamingEndpointCurrentSkuInput interface {
	pulumi.Input

	ToArmStreamingEndpointCurrentSkuOutput() ArmStreamingEndpointCurrentSkuOutput
	ToArmStreamingEndpointCurrentSkuOutputWithContext(context.Context) ArmStreamingEndpointCurrentSkuOutput
}

// The streaming endpoint current sku.
type ArmStreamingEndpointCurrentSkuArgs struct {
	// The streaming endpoint sku capacity.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
}

func (ArmStreamingEndpointCurrentSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmStreamingEndpointCurrentSku)(nil)).Elem()
}

func (i ArmStreamingEndpointCurrentSkuArgs) ToArmStreamingEndpointCurrentSkuOutput() ArmStreamingEndpointCurrentSkuOutput {
	return i.ToArmStreamingEndpointCurrentSkuOutputWithContext(context.Background())
}

func (i ArmStreamingEndpointCurrentSkuArgs) ToArmStreamingEndpointCurrentSkuOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmStreamingEndpointCurrentSkuOutput)
}

func (i ArmStreamingEndpointCurrentSkuArgs) ToOutput(ctx context.Context) pulumix.Output[ArmStreamingEndpointCurrentSku] {
	return pulumix.Output[ArmStreamingEndpointCurrentSku]{
		OutputState: i.ToArmStreamingEndpointCurrentSkuOutputWithContext(ctx).OutputState,
	}
}

func (i ArmStreamingEndpointCurrentSkuArgs) ToArmStreamingEndpointCurrentSkuPtrOutput() ArmStreamingEndpointCurrentSkuPtrOutput {
	return i.ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(context.Background())
}

func (i ArmStreamingEndpointCurrentSkuArgs) ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmStreamingEndpointCurrentSkuOutput).ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(ctx)
}

// ArmStreamingEndpointCurrentSkuPtrInput is an input type that accepts ArmStreamingEndpointCurrentSkuArgs, ArmStreamingEndpointCurrentSkuPtr and ArmStreamingEndpointCurrentSkuPtrOutput values.
// You can construct a concrete instance of `ArmStreamingEndpointCurrentSkuPtrInput` via:
//
//	        ArmStreamingEndpointCurrentSkuArgs{...}
//
//	or:
//
//	        nil
type ArmStreamingEndpointCurrentSkuPtrInput interface {
	pulumi.Input

	ToArmStreamingEndpointCurrentSkuPtrOutput() ArmStreamingEndpointCurrentSkuPtrOutput
	ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(context.Context) ArmStreamingEndpointCurrentSkuPtrOutput
}

type armStreamingEndpointCurrentSkuPtrType ArmStreamingEndpointCurrentSkuArgs

func ArmStreamingEndpointCurrentSkuPtr(v *ArmStreamingEndpointCurrentSkuArgs) ArmStreamingEndpointCurrentSkuPtrInput {
	return (*armStreamingEndpointCurrentSkuPtrType)(v)
}

func (*armStreamingEndpointCurrentSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmStreamingEndpointCurrentSku)(nil)).Elem()
}

func (i *armStreamingEndpointCurrentSkuPtrType) ToArmStreamingEndpointCurrentSkuPtrOutput() ArmStreamingEndpointCurrentSkuPtrOutput {
	return i.ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(context.Background())
}

func (i *armStreamingEndpointCurrentSkuPtrType) ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmStreamingEndpointCurrentSkuPtrOutput)
}

func (i *armStreamingEndpointCurrentSkuPtrType) ToOutput(ctx context.Context) pulumix.Output[*ArmStreamingEndpointCurrentSku] {
	return pulumix.Output[*ArmStreamingEndpointCurrentSku]{
		OutputState: i.ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(ctx).OutputState,
	}
}

// The streaming endpoint current sku.
type ArmStreamingEndpointCurrentSkuOutput struct{ *pulumi.OutputState }

func (ArmStreamingEndpointCurrentSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmStreamingEndpointCurrentSku)(nil)).Elem()
}

func (o ArmStreamingEndpointCurrentSkuOutput) ToArmStreamingEndpointCurrentSkuOutput() ArmStreamingEndpointCurrentSkuOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuOutput) ToArmStreamingEndpointCurrentSkuOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuOutput) ToArmStreamingEndpointCurrentSkuPtrOutput() ArmStreamingEndpointCurrentSkuPtrOutput {
	return o.ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(context.Background())
}

func (o ArmStreamingEndpointCurrentSkuOutput) ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArmStreamingEndpointCurrentSku) *ArmStreamingEndpointCurrentSku {
		return &v
	}).(ArmStreamingEndpointCurrentSkuPtrOutput)
}

func (o ArmStreamingEndpointCurrentSkuOutput) ToOutput(ctx context.Context) pulumix.Output[ArmStreamingEndpointCurrentSku] {
	return pulumix.Output[ArmStreamingEndpointCurrentSku]{
		OutputState: o.OutputState,
	}
}

// The streaming endpoint sku capacity.
func (o ArmStreamingEndpointCurrentSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmStreamingEndpointCurrentSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

type ArmStreamingEndpointCurrentSkuPtrOutput struct{ *pulumi.OutputState }

func (ArmStreamingEndpointCurrentSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmStreamingEndpointCurrentSku)(nil)).Elem()
}

func (o ArmStreamingEndpointCurrentSkuPtrOutput) ToArmStreamingEndpointCurrentSkuPtrOutput() ArmStreamingEndpointCurrentSkuPtrOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuPtrOutput) ToArmStreamingEndpointCurrentSkuPtrOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuPtrOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ArmStreamingEndpointCurrentSku] {
	return pulumix.Output[*ArmStreamingEndpointCurrentSku]{
		OutputState: o.OutputState,
	}
}

func (o ArmStreamingEndpointCurrentSkuPtrOutput) Elem() ArmStreamingEndpointCurrentSkuOutput {
	return o.ApplyT(func(v *ArmStreamingEndpointCurrentSku) ArmStreamingEndpointCurrentSku {
		if v != nil {
			return *v
		}
		var ret ArmStreamingEndpointCurrentSku
		return ret
	}).(ArmStreamingEndpointCurrentSkuOutput)
}

// The streaming endpoint sku capacity.
func (o ArmStreamingEndpointCurrentSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmStreamingEndpointCurrentSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The streaming endpoint current sku.
type ArmStreamingEndpointCurrentSkuResponse struct {
	// The streaming endpoint sku capacity.
	Capacity *int `pulumi:"capacity"`
	// The streaming endpoint sku name.
	Name string `pulumi:"name"`
}

// The streaming endpoint current sku.
type ArmStreamingEndpointCurrentSkuResponseOutput struct{ *pulumi.OutputState }

func (ArmStreamingEndpointCurrentSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmStreamingEndpointCurrentSkuResponse)(nil)).Elem()
}

func (o ArmStreamingEndpointCurrentSkuResponseOutput) ToArmStreamingEndpointCurrentSkuResponseOutput() ArmStreamingEndpointCurrentSkuResponseOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuResponseOutput) ToArmStreamingEndpointCurrentSkuResponseOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuResponseOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ArmStreamingEndpointCurrentSkuResponse] {
	return pulumix.Output[ArmStreamingEndpointCurrentSkuResponse]{
		OutputState: o.OutputState,
	}
}

// The streaming endpoint sku capacity.
func (o ArmStreamingEndpointCurrentSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmStreamingEndpointCurrentSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The streaming endpoint sku name.
func (o ArmStreamingEndpointCurrentSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArmStreamingEndpointCurrentSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ArmStreamingEndpointCurrentSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmStreamingEndpointCurrentSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmStreamingEndpointCurrentSkuResponse)(nil)).Elem()
}

func (o ArmStreamingEndpointCurrentSkuResponsePtrOutput) ToArmStreamingEndpointCurrentSkuResponsePtrOutput() ArmStreamingEndpointCurrentSkuResponsePtrOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuResponsePtrOutput) ToArmStreamingEndpointCurrentSkuResponsePtrOutputWithContext(ctx context.Context) ArmStreamingEndpointCurrentSkuResponsePtrOutput {
	return o
}

func (o ArmStreamingEndpointCurrentSkuResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ArmStreamingEndpointCurrentSkuResponse] {
	return pulumix.Output[*ArmStreamingEndpointCurrentSkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o ArmStreamingEndpointCurrentSkuResponsePtrOutput) Elem() ArmStreamingEndpointCurrentSkuResponseOutput {
	return o.ApplyT(func(v *ArmStreamingEndpointCurrentSkuResponse) ArmStreamingEndpointCurrentSkuResponse {
		if v != nil {
			return *v
		}
		var ret ArmStreamingEndpointCurrentSkuResponse
		return ret
	}).(ArmStreamingEndpointCurrentSkuResponseOutput)
}

// The streaming endpoint sku capacity.
func (o ArmStreamingEndpointCurrentSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmStreamingEndpointCurrentSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The streaming endpoint sku name.
func (o ArmStreamingEndpointCurrentSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmStreamingEndpointCurrentSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The client access policy.
type CrossSiteAccessPolicies struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// CrossSiteAccessPoliciesInput is an input type that accepts CrossSiteAccessPoliciesArgs and CrossSiteAccessPoliciesOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesInput` via:
//
//	CrossSiteAccessPoliciesArgs{...}
type CrossSiteAccessPoliciesInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput
	ToCrossSiteAccessPoliciesOutputWithContext(context.Context) CrossSiteAccessPoliciesOutput
}

// The client access policy.
type CrossSiteAccessPoliciesArgs struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (CrossSiteAccessPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPolicies)(nil)).Elem()
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput {
	return i.ToCrossSiteAccessPoliciesOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesOutput)
}

func (i CrossSiteAccessPoliciesArgs) ToOutput(ctx context.Context) pulumix.Output[CrossSiteAccessPolicies] {
	return pulumix.Output[CrossSiteAccessPolicies]{
		OutputState: i.ToCrossSiteAccessPoliciesOutputWithContext(ctx).OutputState,
	}
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return i.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesOutput).ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx)
}

// CrossSiteAccessPoliciesPtrInput is an input type that accepts CrossSiteAccessPoliciesArgs, CrossSiteAccessPoliciesPtr and CrossSiteAccessPoliciesPtrOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesPtrInput` via:
//
//	        CrossSiteAccessPoliciesArgs{...}
//
//	or:
//
//	        nil
type CrossSiteAccessPoliciesPtrInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput
	ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Context) CrossSiteAccessPoliciesPtrOutput
}

type crossSiteAccessPoliciesPtrType CrossSiteAccessPoliciesArgs

func CrossSiteAccessPoliciesPtr(v *CrossSiteAccessPoliciesArgs) CrossSiteAccessPoliciesPtrInput {
	return (*crossSiteAccessPoliciesPtrType)(v)
}

func (*crossSiteAccessPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPolicies)(nil)).Elem()
}

func (i *crossSiteAccessPoliciesPtrType) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return i.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (i *crossSiteAccessPoliciesPtrType) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesPtrOutput)
}

func (i *crossSiteAccessPoliciesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CrossSiteAccessPolicies] {
	return pulumix.Output[*CrossSiteAccessPolicies]{
		OutputState: i.ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx).OutputState,
	}
}

// The client access policy.
type CrossSiteAccessPoliciesOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPolicies)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput {
	return o
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesOutput {
	return o
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return o.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrossSiteAccessPolicies) *CrossSiteAccessPolicies {
		return &v
	}).(CrossSiteAccessPoliciesPtrOutput)
}

func (o CrossSiteAccessPoliciesOutput) ToOutput(ctx context.Context) pulumix.Output[CrossSiteAccessPolicies] {
	return pulumix.Output[CrossSiteAccessPolicies]{
		OutputState: o.OutputState,
	}
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type CrossSiteAccessPoliciesPtrOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPolicies)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesPtrOutput) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesPtrOutput) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CrossSiteAccessPolicies] {
	return pulumix.Output[*CrossSiteAccessPolicies]{
		OutputState: o.OutputState,
	}
}

func (o CrossSiteAccessPoliciesPtrOutput) Elem() CrossSiteAccessPoliciesOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) CrossSiteAccessPolicies {
		if v != nil {
			return *v
		}
		var ret CrossSiteAccessPolicies
		return ret
	}).(CrossSiteAccessPoliciesOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesPtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesPtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

// The client access policy.
type CrossSiteAccessPoliciesResponse struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// The client access policy.
type CrossSiteAccessPoliciesResponseOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponseOutput() CrossSiteAccessPoliciesResponseOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponseOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponseOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CrossSiteAccessPoliciesResponse] {
	return pulumix.Output[CrossSiteAccessPoliciesResponse]{
		OutputState: o.OutputState,
	}
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponseOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponseOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type CrossSiteAccessPoliciesResponsePtrOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CrossSiteAccessPoliciesResponse] {
	return pulumix.Output[*CrossSiteAccessPoliciesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) Elem() CrossSiteAccessPoliciesResponseOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) CrossSiteAccessPoliciesResponse {
		if v != nil {
			return *v
		}
		var ret CrossSiteAccessPoliciesResponse
		return ret
	}).(CrossSiteAccessPoliciesResponseOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponsePtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponsePtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type Hls struct {
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
	FragmentsPerTsSegment *int `pulumi:"fragmentsPerTsSegment"`
}

// HlsInput is an input type that accepts HlsArgs and HlsOutput values.
// You can construct a concrete instance of `HlsInput` via:
//
//	HlsArgs{...}
type HlsInput interface {
	pulumi.Input

	ToHlsOutput() HlsOutput
	ToHlsOutputWithContext(context.Context) HlsOutput
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsArgs struct {
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
	FragmentsPerTsSegment pulumi.IntPtrInput `pulumi:"fragmentsPerTsSegment"`
}

func (HlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hls)(nil)).Elem()
}

func (i HlsArgs) ToHlsOutput() HlsOutput {
	return i.ToHlsOutputWithContext(context.Background())
}

func (i HlsArgs) ToHlsOutputWithContext(ctx context.Context) HlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsOutput)
}

func (i HlsArgs) ToOutput(ctx context.Context) pulumix.Output[Hls] {
	return pulumix.Output[Hls]{
		OutputState: i.ToHlsOutputWithContext(ctx).OutputState,
	}
}

func (i HlsArgs) ToHlsPtrOutput() HlsPtrOutput {
	return i.ToHlsPtrOutputWithContext(context.Background())
}

func (i HlsArgs) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsOutput).ToHlsPtrOutputWithContext(ctx)
}

// HlsPtrInput is an input type that accepts HlsArgs, HlsPtr and HlsPtrOutput values.
// You can construct a concrete instance of `HlsPtrInput` via:
//
//	        HlsArgs{...}
//
//	or:
//
//	        nil
type HlsPtrInput interface {
	pulumi.Input

	ToHlsPtrOutput() HlsPtrOutput
	ToHlsPtrOutputWithContext(context.Context) HlsPtrOutput
}

type hlsPtrType HlsArgs

func HlsPtr(v *HlsArgs) HlsPtrInput {
	return (*hlsPtrType)(v)
}

func (*hlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hls)(nil)).Elem()
}

func (i *hlsPtrType) ToHlsPtrOutput() HlsPtrOutput {
	return i.ToHlsPtrOutputWithContext(context.Background())
}

func (i *hlsPtrType) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsPtrOutput)
}

func (i *hlsPtrType) ToOutput(ctx context.Context) pulumix.Output[*Hls] {
	return pulumix.Output[*Hls]{
		OutputState: i.ToHlsPtrOutputWithContext(ctx).OutputState,
	}
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsOutput struct{ *pulumi.OutputState }

func (HlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hls)(nil)).Elem()
}

func (o HlsOutput) ToHlsOutput() HlsOutput {
	return o
}

func (o HlsOutput) ToHlsOutputWithContext(ctx context.Context) HlsOutput {
	return o
}

func (o HlsOutput) ToHlsPtrOutput() HlsPtrOutput {
	return o.ToHlsPtrOutputWithContext(context.Background())
}

func (o HlsOutput) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Hls) *Hls {
		return &v
	}).(HlsPtrOutput)
}

func (o HlsOutput) ToOutput(ctx context.Context) pulumix.Output[Hls] {
	return pulumix.Output[Hls]{
		OutputState: o.OutputState,
	}
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Hls) *int { return v.FragmentsPerTsSegment }).(pulumi.IntPtrOutput)
}

type HlsPtrOutput struct{ *pulumi.OutputState }

func (HlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hls)(nil)).Elem()
}

func (o HlsPtrOutput) ToHlsPtrOutput() HlsPtrOutput {
	return o
}

func (o HlsPtrOutput) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return o
}

func (o HlsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Hls] {
	return pulumix.Output[*Hls]{
		OutputState: o.OutputState,
	}
}

func (o HlsPtrOutput) Elem() HlsOutput {
	return o.ApplyT(func(v *Hls) Hls {
		if v != nil {
			return *v
		}
		var ret Hls
		return ret
	}).(HlsOutput)
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsPtrOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Hls) *int {
		if v == nil {
			return nil
		}
		return v.FragmentsPerTsSegment
	}).(pulumi.IntPtrOutput)
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsResponse struct {
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
	FragmentsPerTsSegment *int `pulumi:"fragmentsPerTsSegment"`
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsResponseOutput struct{ *pulumi.OutputState }

func (HlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HlsResponse)(nil)).Elem()
}

func (o HlsResponseOutput) ToHlsResponseOutput() HlsResponseOutput {
	return o
}

func (o HlsResponseOutput) ToHlsResponseOutputWithContext(ctx context.Context) HlsResponseOutput {
	return o
}

func (o HlsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HlsResponse] {
	return pulumix.Output[HlsResponse]{
		OutputState: o.OutputState,
	}
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsResponseOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HlsResponse) *int { return v.FragmentsPerTsSegment }).(pulumi.IntPtrOutput)
}

type HlsResponsePtrOutput struct{ *pulumi.OutputState }

func (HlsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HlsResponse)(nil)).Elem()
}

func (o HlsResponsePtrOutput) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return o
}

func (o HlsResponsePtrOutput) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return o
}

func (o HlsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HlsResponse] {
	return pulumix.Output[*HlsResponse]{
		OutputState: o.OutputState,
	}
}

func (o HlsResponsePtrOutput) Elem() HlsResponseOutput {
	return o.ApplyT(func(v *HlsResponse) HlsResponse {
		if v != nil {
			return *v
		}
		var ret HlsResponse
		return ret
	}).(HlsResponseOutput)
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsResponsePtrOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HlsResponse) *int {
		if v == nil {
			return nil
		}
		return v.FragmentsPerTsSegment
	}).(pulumi.IntPtrOutput)
}

// The IP access control.
type IPAccessControl struct {
	// The IP allow list.
	Allow []IPRange `pulumi:"allow"`
}

// IPAccessControlInput is an input type that accepts IPAccessControlArgs and IPAccessControlOutput values.
// You can construct a concrete instance of `IPAccessControlInput` via:
//
//	IPAccessControlArgs{...}
type IPAccessControlInput interface {
	pulumi.Input

	ToIPAccessControlOutput() IPAccessControlOutput
	ToIPAccessControlOutputWithContext(context.Context) IPAccessControlOutput
}

// The IP access control.
type IPAccessControlArgs struct {
	// The IP allow list.
	Allow IPRangeArrayInput `pulumi:"allow"`
}

func (IPAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControl)(nil)).Elem()
}

func (i IPAccessControlArgs) ToIPAccessControlOutput() IPAccessControlOutput {
	return i.ToIPAccessControlOutputWithContext(context.Background())
}

func (i IPAccessControlArgs) ToIPAccessControlOutputWithContext(ctx context.Context) IPAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlOutput)
}

func (i IPAccessControlArgs) ToOutput(ctx context.Context) pulumix.Output[IPAccessControl] {
	return pulumix.Output[IPAccessControl]{
		OutputState: i.ToIPAccessControlOutputWithContext(ctx).OutputState,
	}
}

func (i IPAccessControlArgs) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return i.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (i IPAccessControlArgs) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlOutput).ToIPAccessControlPtrOutputWithContext(ctx)
}

// IPAccessControlPtrInput is an input type that accepts IPAccessControlArgs, IPAccessControlPtr and IPAccessControlPtrOutput values.
// You can construct a concrete instance of `IPAccessControlPtrInput` via:
//
//	        IPAccessControlArgs{...}
//
//	or:
//
//	        nil
type IPAccessControlPtrInput interface {
	pulumi.Input

	ToIPAccessControlPtrOutput() IPAccessControlPtrOutput
	ToIPAccessControlPtrOutputWithContext(context.Context) IPAccessControlPtrOutput
}

type ipaccessControlPtrType IPAccessControlArgs

func IPAccessControlPtr(v *IPAccessControlArgs) IPAccessControlPtrInput {
	return (*ipaccessControlPtrType)(v)
}

func (*ipaccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControl)(nil)).Elem()
}

func (i *ipaccessControlPtrType) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return i.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (i *ipaccessControlPtrType) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlPtrOutput)
}

func (i *ipaccessControlPtrType) ToOutput(ctx context.Context) pulumix.Output[*IPAccessControl] {
	return pulumix.Output[*IPAccessControl]{
		OutputState: i.ToIPAccessControlPtrOutputWithContext(ctx).OutputState,
	}
}

// The IP access control.
type IPAccessControlOutput struct{ *pulumi.OutputState }

func (IPAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControl)(nil)).Elem()
}

func (o IPAccessControlOutput) ToIPAccessControlOutput() IPAccessControlOutput {
	return o
}

func (o IPAccessControlOutput) ToIPAccessControlOutputWithContext(ctx context.Context) IPAccessControlOutput {
	return o
}

func (o IPAccessControlOutput) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return o.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (o IPAccessControlOutput) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IPAccessControl) *IPAccessControl {
		return &v
	}).(IPAccessControlPtrOutput)
}

func (o IPAccessControlOutput) ToOutput(ctx context.Context) pulumix.Output[IPAccessControl] {
	return pulumix.Output[IPAccessControl]{
		OutputState: o.OutputState,
	}
}

// The IP allow list.
func (o IPAccessControlOutput) Allow() IPRangeArrayOutput {
	return o.ApplyT(func(v IPAccessControl) []IPRange { return v.Allow }).(IPRangeArrayOutput)
}

type IPAccessControlPtrOutput struct{ *pulumi.OutputState }

func (IPAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControl)(nil)).Elem()
}

func (o IPAccessControlPtrOutput) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return o
}

func (o IPAccessControlPtrOutput) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return o
}

func (o IPAccessControlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IPAccessControl] {
	return pulumix.Output[*IPAccessControl]{
		OutputState: o.OutputState,
	}
}

func (o IPAccessControlPtrOutput) Elem() IPAccessControlOutput {
	return o.ApplyT(func(v *IPAccessControl) IPAccessControl {
		if v != nil {
			return *v
		}
		var ret IPAccessControl
		return ret
	}).(IPAccessControlOutput)
}

// The IP allow list.
func (o IPAccessControlPtrOutput) Allow() IPRangeArrayOutput {
	return o.ApplyT(func(v *IPAccessControl) []IPRange {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(IPRangeArrayOutput)
}

// The IP access control.
type IPAccessControlResponse struct {
	// The IP allow list.
	Allow []IPRangeResponse `pulumi:"allow"`
}

// The IP access control.
type IPAccessControlResponseOutput struct{ *pulumi.OutputState }

func (IPAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControlResponse)(nil)).Elem()
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponseOutput() IPAccessControlResponseOutput {
	return o
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponseOutputWithContext(ctx context.Context) IPAccessControlResponseOutput {
	return o
}

func (o IPAccessControlResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IPAccessControlResponse] {
	return pulumix.Output[IPAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

// The IP allow list.
func (o IPAccessControlResponseOutput) Allow() IPRangeResponseArrayOutput {
	return o.ApplyT(func(v IPAccessControlResponse) []IPRangeResponse { return v.Allow }).(IPRangeResponseArrayOutput)
}

type IPAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (IPAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControlResponse)(nil)).Elem()
}

func (o IPAccessControlResponsePtrOutput) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return o
}

func (o IPAccessControlResponsePtrOutput) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return o
}

func (o IPAccessControlResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IPAccessControlResponse] {
	return pulumix.Output[*IPAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

func (o IPAccessControlResponsePtrOutput) Elem() IPAccessControlResponseOutput {
	return o.ApplyT(func(v *IPAccessControlResponse) IPAccessControlResponse {
		if v != nil {
			return *v
		}
		var ret IPAccessControlResponse
		return ret
	}).(IPAccessControlResponseOutput)
}

// The IP allow list.
func (o IPAccessControlResponsePtrOutput) Allow() IPRangeResponseArrayOutput {
	return o.ApplyT(func(v *IPAccessControlResponse) []IPRangeResponse {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(IPRangeResponseArrayOutput)
}

// The IP address range in the CIDR scheme.
type IPRange struct {
	// The IP address.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// IPRangeInput is an input type that accepts IPRangeArgs and IPRangeOutput values.
// You can construct a concrete instance of `IPRangeInput` via:
//
//	IPRangeArgs{...}
type IPRangeInput interface {
	pulumi.Input

	ToIPRangeOutput() IPRangeOutput
	ToIPRangeOutputWithContext(context.Context) IPRangeOutput
}

// The IP address range in the CIDR scheme.
type IPRangeArgs struct {
	// The IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (IPRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRange)(nil)).Elem()
}

func (i IPRangeArgs) ToIPRangeOutput() IPRangeOutput {
	return i.ToIPRangeOutputWithContext(context.Background())
}

func (i IPRangeArgs) ToIPRangeOutputWithContext(ctx context.Context) IPRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeOutput)
}

func (i IPRangeArgs) ToOutput(ctx context.Context) pulumix.Output[IPRange] {
	return pulumix.Output[IPRange]{
		OutputState: i.ToIPRangeOutputWithContext(ctx).OutputState,
	}
}

// IPRangeArrayInput is an input type that accepts IPRangeArray and IPRangeArrayOutput values.
// You can construct a concrete instance of `IPRangeArrayInput` via:
//
//	IPRangeArray{ IPRangeArgs{...} }
type IPRangeArrayInput interface {
	pulumi.Input

	ToIPRangeArrayOutput() IPRangeArrayOutput
	ToIPRangeArrayOutputWithContext(context.Context) IPRangeArrayOutput
}

type IPRangeArray []IPRangeInput

func (IPRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRange)(nil)).Elem()
}

func (i IPRangeArray) ToIPRangeArrayOutput() IPRangeArrayOutput {
	return i.ToIPRangeArrayOutputWithContext(context.Background())
}

func (i IPRangeArray) ToIPRangeArrayOutputWithContext(ctx context.Context) IPRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeArrayOutput)
}

func (i IPRangeArray) ToOutput(ctx context.Context) pulumix.Output[[]IPRange] {
	return pulumix.Output[[]IPRange]{
		OutputState: i.ToIPRangeArrayOutputWithContext(ctx).OutputState,
	}
}

// The IP address range in the CIDR scheme.
type IPRangeOutput struct{ *pulumi.OutputState }

func (IPRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRange)(nil)).Elem()
}

func (o IPRangeOutput) ToIPRangeOutput() IPRangeOutput {
	return o
}

func (o IPRangeOutput) ToIPRangeOutputWithContext(ctx context.Context) IPRangeOutput {
	return o
}

func (o IPRangeOutput) ToOutput(ctx context.Context) pulumix.Output[IPRange] {
	return pulumix.Output[IPRange]{
		OutputState: o.OutputState,
	}
}

// The IP address.
func (o IPRangeOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRange) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o IPRangeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRange) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o IPRangeOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IPRange) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type IPRangeArrayOutput struct{ *pulumi.OutputState }

func (IPRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRange)(nil)).Elem()
}

func (o IPRangeArrayOutput) ToIPRangeArrayOutput() IPRangeArrayOutput {
	return o
}

func (o IPRangeArrayOutput) ToIPRangeArrayOutputWithContext(ctx context.Context) IPRangeArrayOutput {
	return o
}

func (o IPRangeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IPRange] {
	return pulumix.Output[[]IPRange]{
		OutputState: o.OutputState,
	}
}

func (o IPRangeArrayOutput) Index(i pulumi.IntInput) IPRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRange {
		return vs[0].([]IPRange)[vs[1].(int)]
	}).(IPRangeOutput)
}

// The IP address range in the CIDR scheme.
type IPRangeResponse struct {
	// The IP address.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// The IP address range in the CIDR scheme.
type IPRangeResponseOutput struct{ *pulumi.OutputState }

func (IPRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRangeResponse)(nil)).Elem()
}

func (o IPRangeResponseOutput) ToIPRangeResponseOutput() IPRangeResponseOutput {
	return o
}

func (o IPRangeResponseOutput) ToIPRangeResponseOutputWithContext(ctx context.Context) IPRangeResponseOutput {
	return o
}

func (o IPRangeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IPRangeResponse] {
	return pulumix.Output[IPRangeResponse]{
		OutputState: o.OutputState,
	}
}

// The IP address.
func (o IPRangeResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o IPRangeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o IPRangeResponseOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type IPRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (IPRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRangeResponse)(nil)).Elem()
}

func (o IPRangeResponseArrayOutput) ToIPRangeResponseArrayOutput() IPRangeResponseArrayOutput {
	return o
}

func (o IPRangeResponseArrayOutput) ToIPRangeResponseArrayOutputWithContext(ctx context.Context) IPRangeResponseArrayOutput {
	return o
}

func (o IPRangeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IPRangeResponse] {
	return pulumix.Output[[]IPRangeResponse]{
		OutputState: o.OutputState,
	}
}

func (o IPRangeResponseArrayOutput) Index(i pulumi.IntInput) IPRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRangeResponse {
		return vs[0].([]IPRangeResponse)[vs[1].(int)]
	}).(IPRangeResponseOutput)
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncoding struct {
	// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
	EncodingType *string `pulumi:"encodingType"`
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName *string `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
	StretchMode *string `pulumi:"stretchMode"`
}

// LiveEventEncodingInput is an input type that accepts LiveEventEncodingArgs and LiveEventEncodingOutput values.
// You can construct a concrete instance of `LiveEventEncodingInput` via:
//
//	LiveEventEncodingArgs{...}
type LiveEventEncodingInput interface {
	pulumi.Input

	ToLiveEventEncodingOutput() LiveEventEncodingOutput
	ToLiveEventEncodingOutputWithContext(context.Context) LiveEventEncodingOutput
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingArgs struct {
	// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
	EncodingType pulumi.StringPtrInput `pulumi:"encodingType"`
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName pulumi.StringPtrInput `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
}

func (LiveEventEncodingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return i.ToLiveEventEncodingOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput)
}

func (i LiveEventEncodingArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventEncoding] {
	return pulumix.Output[LiveEventEncoding]{
		OutputState: i.ToLiveEventEncodingOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput).ToLiveEventEncodingPtrOutputWithContext(ctx)
}

// LiveEventEncodingPtrInput is an input type that accepts LiveEventEncodingArgs, LiveEventEncodingPtr and LiveEventEncodingPtrOutput values.
// You can construct a concrete instance of `LiveEventEncodingPtrInput` via:
//
//	        LiveEventEncodingArgs{...}
//
//	or:
//
//	        nil
type LiveEventEncodingPtrInput interface {
	pulumi.Input

	ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput
	ToLiveEventEncodingPtrOutputWithContext(context.Context) LiveEventEncodingPtrOutput
}

type liveEventEncodingPtrType LiveEventEncodingArgs

func LiveEventEncodingPtr(v *LiveEventEncodingArgs) LiveEventEncodingPtrInput {
	return (*liveEventEncodingPtrType)(v)
}

func (*liveEventEncodingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingPtrOutput)
}

func (i *liveEventEncodingPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventEncoding] {
	return pulumix.Output[*LiveEventEncoding]{
		OutputState: i.ToLiveEventEncodingPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventEncoding) *LiveEventEncoding {
		return &v
	}).(LiveEventEncodingPtrOutput)
}

func (o LiveEventEncodingOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventEncoding] {
	return pulumix.Output[LiveEventEncoding]{
		OutputState: o.OutputState,
	}
}

// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

type LiveEventEncodingPtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventEncoding] {
	return pulumix.Output[*LiveEventEncoding]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventEncodingPtrOutput) Elem() LiveEventEncodingOutput {
	return o.ApplyT(func(v *LiveEventEncoding) LiveEventEncoding {
		if v != nil {
			return *v
		}
		var ret LiveEventEncoding
		return ret
	}).(LiveEventEncodingOutput)
}

// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingPtrOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.EncodingType
	}).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingPtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingPtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingPtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingResponse struct {
	// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
	EncodingType *string `pulumi:"encodingType"`
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName *string `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
	StretchMode *string `pulumi:"stretchMode"`
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingResponseOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncodingResponse)(nil)).Elem()
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponseOutput() LiveEventEncodingResponseOutput {
	return o
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponseOutputWithContext(ctx context.Context) LiveEventEncodingResponseOutput {
	return o
}

func (o LiveEventEncodingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventEncodingResponse] {
	return pulumix.Output[LiveEventEncodingResponse]{
		OutputState: o.OutputState,
	}
}

// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingResponseOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingResponseOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingResponseOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingResponseOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

type LiveEventEncodingResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncodingResponse)(nil)).Elem()
}

func (o LiveEventEncodingResponsePtrOutput) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return o
}

func (o LiveEventEncodingResponsePtrOutput) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return o
}

func (o LiveEventEncodingResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventEncodingResponse] {
	return pulumix.Output[*LiveEventEncodingResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventEncodingResponsePtrOutput) Elem() LiveEventEncodingResponseOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) LiveEventEncodingResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventEncodingResponse
		return ret
	}).(LiveEventEncodingResponseOutput)
}

// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingResponsePtrOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncodingType
	}).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingResponsePtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingResponsePtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingResponsePtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// The live event endpoint.
type LiveEventEndpoint struct {
	// The endpoint protocol.
	Protocol *string `pulumi:"protocol"`
	// The endpoint URL.
	Url *string `pulumi:"url"`
}

// LiveEventEndpointInput is an input type that accepts LiveEventEndpointArgs and LiveEventEndpointOutput values.
// You can construct a concrete instance of `LiveEventEndpointInput` via:
//
//	LiveEventEndpointArgs{...}
type LiveEventEndpointInput interface {
	pulumi.Input

	ToLiveEventEndpointOutput() LiveEventEndpointOutput
	ToLiveEventEndpointOutputWithContext(context.Context) LiveEventEndpointOutput
}

// The live event endpoint.
type LiveEventEndpointArgs struct {
	// The endpoint protocol.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The endpoint URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpoint)(nil)).Elem()
}

func (i LiveEventEndpointArgs) ToLiveEventEndpointOutput() LiveEventEndpointOutput {
	return i.ToLiveEventEndpointOutputWithContext(context.Background())
}

func (i LiveEventEndpointArgs) ToLiveEventEndpointOutputWithContext(ctx context.Context) LiveEventEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointOutput)
}

func (i LiveEventEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventEndpoint] {
	return pulumix.Output[LiveEventEndpoint]{
		OutputState: i.ToLiveEventEndpointOutputWithContext(ctx).OutputState,
	}
}

// LiveEventEndpointArrayInput is an input type that accepts LiveEventEndpointArray and LiveEventEndpointArrayOutput values.
// You can construct a concrete instance of `LiveEventEndpointArrayInput` via:
//
//	LiveEventEndpointArray{ LiveEventEndpointArgs{...} }
type LiveEventEndpointArrayInput interface {
	pulumi.Input

	ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput
	ToLiveEventEndpointArrayOutputWithContext(context.Context) LiveEventEndpointArrayOutput
}

type LiveEventEndpointArray []LiveEventEndpointInput

func (LiveEventEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpoint)(nil)).Elem()
}

func (i LiveEventEndpointArray) ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput {
	return i.ToLiveEventEndpointArrayOutputWithContext(context.Background())
}

func (i LiveEventEndpointArray) ToLiveEventEndpointArrayOutputWithContext(ctx context.Context) LiveEventEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointArrayOutput)
}

func (i LiveEventEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventEndpoint] {
	return pulumix.Output[[]LiveEventEndpoint]{
		OutputState: i.ToLiveEventEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

// The live event endpoint.
type LiveEventEndpointOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpoint)(nil)).Elem()
}

func (o LiveEventEndpointOutput) ToLiveEventEndpointOutput() LiveEventEndpointOutput {
	return o
}

func (o LiveEventEndpointOutput) ToLiveEventEndpointOutputWithContext(ctx context.Context) LiveEventEndpointOutput {
	return o
}

func (o LiveEventEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventEndpoint] {
	return pulumix.Output[LiveEventEndpoint]{
		OutputState: o.OutputState,
	}
}

// The endpoint protocol.
func (o LiveEventEndpointOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpoint) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The endpoint URL.
func (o LiveEventEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventEndpointArrayOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpoint)(nil)).Elem()
}

func (o LiveEventEndpointArrayOutput) ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput {
	return o
}

func (o LiveEventEndpointArrayOutput) ToLiveEventEndpointArrayOutputWithContext(ctx context.Context) LiveEventEndpointArrayOutput {
	return o
}

func (o LiveEventEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventEndpoint] {
	return pulumix.Output[[]LiveEventEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventEndpointArrayOutput) Index(i pulumi.IntInput) LiveEventEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventEndpoint {
		return vs[0].([]LiveEventEndpoint)[vs[1].(int)]
	}).(LiveEventEndpointOutput)
}

// The live event endpoint.
type LiveEventEndpointResponse struct {
	// The endpoint protocol.
	Protocol *string `pulumi:"protocol"`
	// The endpoint URL.
	Url *string `pulumi:"url"`
}

// The live event endpoint.
type LiveEventEndpointResponseOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpointResponse)(nil)).Elem()
}

func (o LiveEventEndpointResponseOutput) ToLiveEventEndpointResponseOutput() LiveEventEndpointResponseOutput {
	return o
}

func (o LiveEventEndpointResponseOutput) ToLiveEventEndpointResponseOutputWithContext(ctx context.Context) LiveEventEndpointResponseOutput {
	return o
}

func (o LiveEventEndpointResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventEndpointResponse] {
	return pulumix.Output[LiveEventEndpointResponse]{
		OutputState: o.OutputState,
	}
}

// The endpoint protocol.
func (o LiveEventEndpointResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpointResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The endpoint URL.
func (o LiveEventEndpointResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpointResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpointResponse)(nil)).Elem()
}

func (o LiveEventEndpointResponseArrayOutput) ToLiveEventEndpointResponseArrayOutput() LiveEventEndpointResponseArrayOutput {
	return o
}

func (o LiveEventEndpointResponseArrayOutput) ToLiveEventEndpointResponseArrayOutputWithContext(ctx context.Context) LiveEventEndpointResponseArrayOutput {
	return o
}

func (o LiveEventEndpointResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventEndpointResponse] {
	return pulumix.Output[[]LiveEventEndpointResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventEndpointResponseArrayOutput) Index(i pulumi.IntInput) LiveEventEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventEndpointResponse {
		return vs[0].([]LiveEventEndpointResponse)[vs[1].(int)]
	}).(LiveEventEndpointResponseOutput)
}

// The live event ingest interruption data.
type LiveEventIngestInterruptionResponse struct {
	// UTC time of interruption start, encoder disconnected.
	Begin *string `pulumi:"begin"`
	// Duration of interruption in ISO 8601 time. For example, use PT1H30M to indicate 1 hour and 30 minutes.
	Duration *string `pulumi:"duration"`
	// UTC time of interruption end, encoder re-connected.
	End *string `pulumi:"end"`
	// Interruption reason.
	Reason *string `pulumi:"reason"`
}

// The live event ingest interruption data.
type LiveEventIngestInterruptionResponseOutput struct{ *pulumi.OutputState }

func (LiveEventIngestInterruptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventIngestInterruptionResponse)(nil)).Elem()
}

func (o LiveEventIngestInterruptionResponseOutput) ToLiveEventIngestInterruptionResponseOutput() LiveEventIngestInterruptionResponseOutput {
	return o
}

func (o LiveEventIngestInterruptionResponseOutput) ToLiveEventIngestInterruptionResponseOutputWithContext(ctx context.Context) LiveEventIngestInterruptionResponseOutput {
	return o
}

func (o LiveEventIngestInterruptionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventIngestInterruptionResponse] {
	return pulumix.Output[LiveEventIngestInterruptionResponse]{
		OutputState: o.OutputState,
	}
}

// UTC time of interruption start, encoder disconnected.
func (o LiveEventIngestInterruptionResponseOutput) Begin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestInterruptionResponse) *string { return v.Begin }).(pulumi.StringPtrOutput)
}

// Duration of interruption in ISO 8601 time. For example, use PT1H30M to indicate 1 hour and 30 minutes.
func (o LiveEventIngestInterruptionResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestInterruptionResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// UTC time of interruption end, encoder re-connected.
func (o LiveEventIngestInterruptionResponseOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestInterruptionResponse) *string { return v.End }).(pulumi.StringPtrOutput)
}

// Interruption reason.
func (o LiveEventIngestInterruptionResponseOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestInterruptionResponse) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type LiveEventIngestInterruptionResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventIngestInterruptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventIngestInterruptionResponse)(nil)).Elem()
}

func (o LiveEventIngestInterruptionResponseArrayOutput) ToLiveEventIngestInterruptionResponseArrayOutput() LiveEventIngestInterruptionResponseArrayOutput {
	return o
}

func (o LiveEventIngestInterruptionResponseArrayOutput) ToLiveEventIngestInterruptionResponseArrayOutputWithContext(ctx context.Context) LiveEventIngestInterruptionResponseArrayOutput {
	return o
}

func (o LiveEventIngestInterruptionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventIngestInterruptionResponse] {
	return pulumix.Output[[]LiveEventIngestInterruptionResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventIngestInterruptionResponseArrayOutput) Index(i pulumi.IntInput) LiveEventIngestInterruptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventIngestInterruptionResponse {
		return vs[0].([]LiveEventIngestInterruptionResponse)[vs[1].(int)]
	}).(LiveEventIngestInterruptionResponseOutput)
}

// The live event ingestion telemetry data.
type LiveEventIngestionResponse struct {
	// Ingestion begin time in UTC.
	Begin *string `pulumi:"begin"`
	// Ingestion end time in UTC. Empty if it's not stopped yet.
	End *string `pulumi:"end"`
	// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
	EndReason *string `pulumi:"endReason"`
	// IngestInterruption entry list.
	IngestInterruptions []LiveEventIngestInterruptionResponse `pulumi:"ingestInterruptions"`
	// Ingestion stream name.
	StreamName *string `pulumi:"streamName"`
}

// The live event ingestion telemetry data.
type LiveEventIngestionResponseOutput struct{ *pulumi.OutputState }

func (LiveEventIngestionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventIngestionResponse)(nil)).Elem()
}

func (o LiveEventIngestionResponseOutput) ToLiveEventIngestionResponseOutput() LiveEventIngestionResponseOutput {
	return o
}

func (o LiveEventIngestionResponseOutput) ToLiveEventIngestionResponseOutputWithContext(ctx context.Context) LiveEventIngestionResponseOutput {
	return o
}

func (o LiveEventIngestionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventIngestionResponse] {
	return pulumix.Output[LiveEventIngestionResponse]{
		OutputState: o.OutputState,
	}
}

// Ingestion begin time in UTC.
func (o LiveEventIngestionResponseOutput) Begin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestionResponse) *string { return v.Begin }).(pulumi.StringPtrOutput)
}

// Ingestion end time in UTC. Empty if it's not stopped yet.
func (o LiveEventIngestionResponseOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestionResponse) *string { return v.End }).(pulumi.StringPtrOutput)
}

// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
func (o LiveEventIngestionResponseOutput) EndReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestionResponse) *string { return v.EndReason }).(pulumi.StringPtrOutput)
}

// IngestInterruption entry list.
func (o LiveEventIngestionResponseOutput) IngestInterruptions() LiveEventIngestInterruptionResponseArrayOutput {
	return o.ApplyT(func(v LiveEventIngestionResponse) []LiveEventIngestInterruptionResponse { return v.IngestInterruptions }).(LiveEventIngestInterruptionResponseArrayOutput)
}

// Ingestion stream name.
func (o LiveEventIngestionResponseOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventIngestionResponse) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

type LiveEventIngestionResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventIngestionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventIngestionResponse)(nil)).Elem()
}

func (o LiveEventIngestionResponsePtrOutput) ToLiveEventIngestionResponsePtrOutput() LiveEventIngestionResponsePtrOutput {
	return o
}

func (o LiveEventIngestionResponsePtrOutput) ToLiveEventIngestionResponsePtrOutputWithContext(ctx context.Context) LiveEventIngestionResponsePtrOutput {
	return o
}

func (o LiveEventIngestionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventIngestionResponse] {
	return pulumix.Output[*LiveEventIngestionResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventIngestionResponsePtrOutput) Elem() LiveEventIngestionResponseOutput {
	return o.ApplyT(func(v *LiveEventIngestionResponse) LiveEventIngestionResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventIngestionResponse
		return ret
	}).(LiveEventIngestionResponseOutput)
}

// Ingestion begin time in UTC.
func (o LiveEventIngestionResponsePtrOutput) Begin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventIngestionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Begin
	}).(pulumi.StringPtrOutput)
}

// Ingestion end time in UTC. Empty if it's not stopped yet.
func (o LiveEventIngestionResponsePtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventIngestionResponse) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// Reason why ingestion stops. Empty if it's not stopped yet. E.g) Service Stopped. No Ingestion.
func (o LiveEventIngestionResponsePtrOutput) EndReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventIngestionResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndReason
	}).(pulumi.StringPtrOutput)
}

// IngestInterruption entry list.
func (o LiveEventIngestionResponsePtrOutput) IngestInterruptions() LiveEventIngestInterruptionResponseArrayOutput {
	return o.ApplyT(func(v *LiveEventIngestionResponse) []LiveEventIngestInterruptionResponse {
		if v == nil {
			return nil
		}
		return v.IngestInterruptions
	}).(LiveEventIngestInterruptionResponseArrayOutput)
}

// Ingestion stream name.
func (o LiveEventIngestionResponsePtrOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventIngestionResponse) *string {
		if v == nil {
			return nil
		}
		return v.StreamName
	}).(pulumi.StringPtrOutput)
}

// The live event input.
type LiveEventInputType struct {
	// Access control for live event input.
	AccessControl *LiveEventInputAccessControl `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
	AccessToken *string `pulumi:"accessToken"`
	// The input endpoints for the live event.
	Endpoints []LiveEventEndpoint `pulumi:"endpoints"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
	KeyFrameIntervalDuration *string `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. This is specified at creation time and cannot be updated.
	StreamingProtocol string `pulumi:"streamingProtocol"`
	// The metadata endpoints for the live event.
	TimedMetadataEndpoints []LiveEventTimedMetadataEndpoint `pulumi:"timedMetadataEndpoints"`
}

// LiveEventInputTypeInput is an input type that accepts LiveEventInputTypeArgs and LiveEventInputTypeOutput values.
// You can construct a concrete instance of `LiveEventInputTypeInput` via:
//
//	LiveEventInputTypeArgs{...}
type LiveEventInputTypeInput interface {
	pulumi.Input

	ToLiveEventInputTypeOutput() LiveEventInputTypeOutput
	ToLiveEventInputTypeOutputWithContext(context.Context) LiveEventInputTypeOutput
}

// The live event input.
type LiveEventInputTypeArgs struct {
	// Access control for live event input.
	AccessControl LiveEventInputAccessControlPtrInput `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// The input endpoints for the live event.
	Endpoints LiveEventEndpointArrayInput `pulumi:"endpoints"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
	KeyFrameIntervalDuration pulumi.StringPtrInput `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. This is specified at creation time and cannot be updated.
	StreamingProtocol pulumi.StringInput `pulumi:"streamingProtocol"`
	// The metadata endpoints for the live event.
	TimedMetadataEndpoints LiveEventTimedMetadataEndpointArrayInput `pulumi:"timedMetadataEndpoints"`
}

func (LiveEventInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputType)(nil)).Elem()
}

func (i LiveEventInputTypeArgs) ToLiveEventInputTypeOutput() LiveEventInputTypeOutput {
	return i.ToLiveEventInputTypeOutputWithContext(context.Background())
}

func (i LiveEventInputTypeArgs) ToLiveEventInputTypeOutputWithContext(ctx context.Context) LiveEventInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTypeOutput)
}

func (i LiveEventInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputType] {
	return pulumix.Output[LiveEventInputType]{
		OutputState: i.ToLiveEventInputTypeOutputWithContext(ctx).OutputState,
	}
}

// The live event input.
type LiveEventInputTypeOutput struct{ *pulumi.OutputState }

func (LiveEventInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputType)(nil)).Elem()
}

func (o LiveEventInputTypeOutput) ToLiveEventInputTypeOutput() LiveEventInputTypeOutput {
	return o
}

func (o LiveEventInputTypeOutput) ToLiveEventInputTypeOutputWithContext(ctx context.Context) LiveEventInputTypeOutput {
	return o
}

func (o LiveEventInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputType] {
	return pulumix.Output[LiveEventInputType]{
		OutputState: o.OutputState,
	}
}

// Access control for live event input.
func (o LiveEventInputTypeOutput) AccessControl() LiveEventInputAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInputType) *LiveEventInputAccessControl { return v.AccessControl }).(LiveEventInputAccessControlPtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
func (o LiveEventInputTypeOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputType) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// The input endpoints for the live event.
func (o LiveEventInputTypeOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventInputType) []LiveEventEndpoint { return v.Endpoints }).(LiveEventEndpointArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
func (o LiveEventInputTypeOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputType) *string { return v.KeyFrameIntervalDuration }).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. This is specified at creation time and cannot be updated.
func (o LiveEventInputTypeOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventInputType) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

// The metadata endpoints for the live event.
func (o LiveEventInputTypeOutput) TimedMetadataEndpoints() LiveEventTimedMetadataEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventInputType) []LiveEventTimedMetadataEndpoint { return v.TimedMetadataEndpoints }).(LiveEventTimedMetadataEndpointArrayOutput)
}

// The IP access control for live event input.
type LiveEventInputAccessControl struct {
	// The IP access control properties.
	Ip *IPAccessControl `pulumi:"ip"`
}

// LiveEventInputAccessControlInput is an input type that accepts LiveEventInputAccessControlArgs and LiveEventInputAccessControlOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlInput` via:
//
//	LiveEventInputAccessControlArgs{...}
type LiveEventInputAccessControlInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput
	ToLiveEventInputAccessControlOutputWithContext(context.Context) LiveEventInputAccessControlOutput
}

// The IP access control for live event input.
type LiveEventInputAccessControlArgs struct {
	// The IP access control properties.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (LiveEventInputAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControl)(nil)).Elem()
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput {
	return i.ToLiveEventInputAccessControlOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlOutputWithContext(ctx context.Context) LiveEventInputAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlOutput)
}

func (i LiveEventInputAccessControlArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputAccessControl] {
	return pulumix.Output[LiveEventInputAccessControl]{
		OutputState: i.ToLiveEventInputAccessControlOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return i.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlOutput).ToLiveEventInputAccessControlPtrOutputWithContext(ctx)
}

// LiveEventInputAccessControlPtrInput is an input type that accepts LiveEventInputAccessControlArgs, LiveEventInputAccessControlPtr and LiveEventInputAccessControlPtrOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlPtrInput` via:
//
//	        LiveEventInputAccessControlArgs{...}
//
//	or:
//
//	        nil
type LiveEventInputAccessControlPtrInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput
	ToLiveEventInputAccessControlPtrOutputWithContext(context.Context) LiveEventInputAccessControlPtrOutput
}

type liveEventInputAccessControlPtrType LiveEventInputAccessControlArgs

func LiveEventInputAccessControlPtr(v *LiveEventInputAccessControlArgs) LiveEventInputAccessControlPtrInput {
	return (*liveEventInputAccessControlPtrType)(v)
}

func (*liveEventInputAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControl)(nil)).Elem()
}

func (i *liveEventInputAccessControlPtrType) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return i.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (i *liveEventInputAccessControlPtrType) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlPtrOutput)
}

func (i *liveEventInputAccessControlPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventInputAccessControl] {
	return pulumix.Output[*LiveEventInputAccessControl]{
		OutputState: i.ToLiveEventInputAccessControlPtrOutputWithContext(ctx).OutputState,
	}
}

// The IP access control for live event input.
type LiveEventInputAccessControlOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControl)(nil)).Elem()
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput {
	return o
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlOutputWithContext(ctx context.Context) LiveEventInputAccessControlOutput {
	return o
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return o.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventInputAccessControl) *LiveEventInputAccessControl {
		return &v
	}).(LiveEventInputAccessControlPtrOutput)
}

func (o LiveEventInputAccessControlOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputAccessControl] {
	return pulumix.Output[LiveEventInputAccessControl]{
		OutputState: o.OutputState,
	}
}

// The IP access control properties.
func (o LiveEventInputAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type LiveEventInputAccessControlPtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControl)(nil)).Elem()
}

func (o LiveEventInputAccessControlPtrOutput) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return o
}

func (o LiveEventInputAccessControlPtrOutput) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return o
}

func (o LiveEventInputAccessControlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventInputAccessControl] {
	return pulumix.Output[*LiveEventInputAccessControl]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputAccessControlPtrOutput) Elem() LiveEventInputAccessControlOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControl) LiveEventInputAccessControl {
		if v != nil {
			return *v
		}
		var ret LiveEventInputAccessControl
		return ret
	}).(LiveEventInputAccessControlOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// The IP access control for live event input.
type LiveEventInputAccessControlResponse struct {
	// The IP access control properties.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// The IP access control for live event input.
type LiveEventInputAccessControlResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponseOutput() LiveEventInputAccessControlResponseOutput {
	return o
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponseOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponseOutput {
	return o
}

func (o LiveEventInputAccessControlResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputAccessControlResponse] {
	return pulumix.Output[LiveEventInputAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

// The IP access control properties.
func (o LiveEventInputAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type LiveEventInputAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (o LiveEventInputAccessControlResponsePtrOutput) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventInputAccessControlResponsePtrOutput) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventInputAccessControlResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventInputAccessControlResponse] {
	return pulumix.Output[*LiveEventInputAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputAccessControlResponsePtrOutput) Elem() LiveEventInputAccessControlResponseOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControlResponse) LiveEventInputAccessControlResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventInputAccessControlResponse
		return ret
	}).(LiveEventInputAccessControlResponseOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// The live event input.
type LiveEventInputResponse struct {
	// Access control for live event input.
	AccessControl *LiveEventInputAccessControlResponse `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
	AccessToken *string `pulumi:"accessToken"`
	// The input endpoints for the live event.
	Endpoints []LiveEventEndpointResponse `pulumi:"endpoints"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
	KeyFrameIntervalDuration *string `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. This is specified at creation time and cannot be updated.
	StreamingProtocol string `pulumi:"streamingProtocol"`
	// The metadata endpoints for the live event.
	TimedMetadataEndpoints []LiveEventTimedMetadataEndpointResponse `pulumi:"timedMetadataEndpoints"`
}

// The live event input.
type LiveEventInputResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputResponse)(nil)).Elem()
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponseOutput() LiveEventInputResponseOutput {
	return o
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponseOutputWithContext(ctx context.Context) LiveEventInputResponseOutput {
	return o
}

func (o LiveEventInputResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputResponse] {
	return pulumix.Output[LiveEventInputResponse]{
		OutputState: o.OutputState,
	}
}

// Access control for live event input.
func (o LiveEventInputResponseOutput) AccessControl() LiveEventInputAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *LiveEventInputAccessControlResponse { return v.AccessControl }).(LiveEventInputAccessControlResponsePtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
func (o LiveEventInputResponseOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// The input endpoints for the live event.
func (o LiveEventInputResponseOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v LiveEventInputResponse) []LiveEventEndpointResponse { return v.Endpoints }).(LiveEventEndpointResponseArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
func (o LiveEventInputResponseOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *string { return v.KeyFrameIntervalDuration }).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. This is specified at creation time and cannot be updated.
func (o LiveEventInputResponseOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventInputResponse) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

// The metadata endpoints for the live event.
func (o LiveEventInputResponseOutput) TimedMetadataEndpoints() LiveEventTimedMetadataEndpointResponseArrayOutput {
	return o.ApplyT(func(v LiveEventInputResponse) []LiveEventTimedMetadataEndpointResponse {
		return v.TimedMetadataEndpoints
	}).(LiveEventTimedMetadataEndpointResponseArrayOutput)
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelection struct {
	// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
	Operation *string `pulumi:"operation"`
	// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
	Property *string `pulumi:"property"`
	// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
	Value *string `pulumi:"value"`
}

// LiveEventInputTrackSelectionInput is an input type that accepts LiveEventInputTrackSelectionArgs and LiveEventInputTrackSelectionOutput values.
// You can construct a concrete instance of `LiveEventInputTrackSelectionInput` via:
//
//	LiveEventInputTrackSelectionArgs{...}
type LiveEventInputTrackSelectionInput interface {
	pulumi.Input

	ToLiveEventInputTrackSelectionOutput() LiveEventInputTrackSelectionOutput
	ToLiveEventInputTrackSelectionOutputWithContext(context.Context) LiveEventInputTrackSelectionOutput
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionArgs struct {
	// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
	Property pulumi.StringPtrInput `pulumi:"property"`
	// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LiveEventInputTrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputTrackSelection)(nil)).Elem()
}

func (i LiveEventInputTrackSelectionArgs) ToLiveEventInputTrackSelectionOutput() LiveEventInputTrackSelectionOutput {
	return i.ToLiveEventInputTrackSelectionOutputWithContext(context.Background())
}

func (i LiveEventInputTrackSelectionArgs) ToLiveEventInputTrackSelectionOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTrackSelectionOutput)
}

func (i LiveEventInputTrackSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputTrackSelection] {
	return pulumix.Output[LiveEventInputTrackSelection]{
		OutputState: i.ToLiveEventInputTrackSelectionOutputWithContext(ctx).OutputState,
	}
}

// LiveEventInputTrackSelectionArrayInput is an input type that accepts LiveEventInputTrackSelectionArray and LiveEventInputTrackSelectionArrayOutput values.
// You can construct a concrete instance of `LiveEventInputTrackSelectionArrayInput` via:
//
//	LiveEventInputTrackSelectionArray{ LiveEventInputTrackSelectionArgs{...} }
type LiveEventInputTrackSelectionArrayInput interface {
	pulumi.Input

	ToLiveEventInputTrackSelectionArrayOutput() LiveEventInputTrackSelectionArrayOutput
	ToLiveEventInputTrackSelectionArrayOutputWithContext(context.Context) LiveEventInputTrackSelectionArrayOutput
}

type LiveEventInputTrackSelectionArray []LiveEventInputTrackSelectionInput

func (LiveEventInputTrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputTrackSelection)(nil)).Elem()
}

func (i LiveEventInputTrackSelectionArray) ToLiveEventInputTrackSelectionArrayOutput() LiveEventInputTrackSelectionArrayOutput {
	return i.ToLiveEventInputTrackSelectionArrayOutputWithContext(context.Background())
}

func (i LiveEventInputTrackSelectionArray) ToLiveEventInputTrackSelectionArrayOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTrackSelectionArrayOutput)
}

func (i LiveEventInputTrackSelectionArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventInputTrackSelection] {
	return pulumix.Output[[]LiveEventInputTrackSelection]{
		OutputState: i.ToLiveEventInputTrackSelectionArrayOutputWithContext(ctx).OutputState,
	}
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputTrackSelection)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionOutput) ToLiveEventInputTrackSelectionOutput() LiveEventInputTrackSelectionOutput {
	return o
}

func (o LiveEventInputTrackSelectionOutput) ToLiveEventInputTrackSelectionOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionOutput {
	return o
}

func (o LiveEventInputTrackSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputTrackSelection] {
	return pulumix.Output[LiveEventInputTrackSelection]{
		OutputState: o.OutputState,
	}
}

// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelection) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelection) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelection) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LiveEventInputTrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputTrackSelection)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionArrayOutput) ToLiveEventInputTrackSelectionArrayOutput() LiveEventInputTrackSelectionArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionArrayOutput) ToLiveEventInputTrackSelectionArrayOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventInputTrackSelection] {
	return pulumix.Output[[]LiveEventInputTrackSelection]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputTrackSelectionArrayOutput) Index(i pulumi.IntInput) LiveEventInputTrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventInputTrackSelection {
		return vs[0].([]LiveEventInputTrackSelection)[vs[1].(int)]
	}).(LiveEventInputTrackSelectionOutput)
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionResponse struct {
	// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
	Operation *string `pulumi:"operation"`
	// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
	Property *string `pulumi:"property"`
	// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
	Value *string `pulumi:"value"`
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputTrackSelectionResponse)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionResponseOutput) ToLiveEventInputTrackSelectionResponseOutput() LiveEventInputTrackSelectionResponseOutput {
	return o
}

func (o LiveEventInputTrackSelectionResponseOutput) ToLiveEventInputTrackSelectionResponseOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionResponseOutput {
	return o
}

func (o LiveEventInputTrackSelectionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputTrackSelectionResponse] {
	return pulumix.Output[LiveEventInputTrackSelectionResponse]{
		OutputState: o.OutputState,
	}
}

// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionResponseOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelectionResponse) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionResponseOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelectionResponse) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelectionResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LiveEventInputTrackSelectionResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputTrackSelectionResponse)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionResponseArrayOutput) ToLiveEventInputTrackSelectionResponseArrayOutput() LiveEventInputTrackSelectionResponseArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionResponseArrayOutput) ToLiveEventInputTrackSelectionResponseArrayOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionResponseArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventInputTrackSelectionResponse] {
	return pulumix.Output[[]LiveEventInputTrackSelectionResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputTrackSelectionResponseArrayOutput) Index(i pulumi.IntInput) LiveEventInputTrackSelectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventInputTrackSelectionResponse {
		return vs[0].([]LiveEventInputTrackSelectionResponse)[vs[1].(int)]
	}).(LiveEventInputTrackSelectionResponseOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrack struct {
	// The output track name. This property is reserved for future use, any value set on this property will be ignored.
	TrackName string `pulumi:"trackName"`
}

// LiveEventOutputTranscriptionTrackInput is an input type that accepts LiveEventOutputTranscriptionTrackArgs and LiveEventOutputTranscriptionTrackOutput values.
// You can construct a concrete instance of `LiveEventOutputTranscriptionTrackInput` via:
//
//	LiveEventOutputTranscriptionTrackArgs{...}
type LiveEventOutputTranscriptionTrackInput interface {
	pulumi.Input

	ToLiveEventOutputTranscriptionTrackOutput() LiveEventOutputTranscriptionTrackOutput
	ToLiveEventOutputTranscriptionTrackOutputWithContext(context.Context) LiveEventOutputTranscriptionTrackOutput
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackArgs struct {
	// The output track name. This property is reserved for future use, any value set on this property will be ignored.
	TrackName pulumi.StringInput `pulumi:"trackName"`
}

func (LiveEventOutputTranscriptionTrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackOutput() LiveEventOutputTranscriptionTrackOutput {
	return i.ToLiveEventOutputTranscriptionTrackOutputWithContext(context.Background())
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackOutput)
}

func (i LiveEventOutputTranscriptionTrackArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventOutputTranscriptionTrack] {
	return pulumix.Output[LiveEventOutputTranscriptionTrack]{
		OutputState: i.ToLiveEventOutputTranscriptionTrackOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return i.ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Background())
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackOutput).ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx)
}

// LiveEventOutputTranscriptionTrackPtrInput is an input type that accepts LiveEventOutputTranscriptionTrackArgs, LiveEventOutputTranscriptionTrackPtr and LiveEventOutputTranscriptionTrackPtrOutput values.
// You can construct a concrete instance of `LiveEventOutputTranscriptionTrackPtrInput` via:
//
//	        LiveEventOutputTranscriptionTrackArgs{...}
//
//	or:
//
//	        nil
type LiveEventOutputTranscriptionTrackPtrInput interface {
	pulumi.Input

	ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput
	ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Context) LiveEventOutputTranscriptionTrackPtrOutput
}

type liveEventOutputTranscriptionTrackPtrType LiveEventOutputTranscriptionTrackArgs

func LiveEventOutputTranscriptionTrackPtr(v *LiveEventOutputTranscriptionTrackArgs) LiveEventOutputTranscriptionTrackPtrInput {
	return (*liveEventOutputTranscriptionTrackPtrType)(v)
}

func (*liveEventOutputTranscriptionTrackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (i *liveEventOutputTranscriptionTrackPtrType) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return i.ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Background())
}

func (i *liveEventOutputTranscriptionTrackPtrType) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackPtrOutput)
}

func (i *liveEventOutputTranscriptionTrackPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventOutputTranscriptionTrack] {
	return pulumix.Output[*LiveEventOutputTranscriptionTrack]{
		OutputState: i.ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackOutput() LiveEventOutputTranscriptionTrackOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return o.ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Background())
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventOutputTranscriptionTrack) *LiveEventOutputTranscriptionTrack {
		return &v
	}).(LiveEventOutputTranscriptionTrackPtrOutput)
}

func (o LiveEventOutputTranscriptionTrackOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventOutputTranscriptionTrack] {
	return pulumix.Output[LiveEventOutputTranscriptionTrack]{
		OutputState: o.OutputState,
	}
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackOutput) TrackName() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventOutputTranscriptionTrack) string { return v.TrackName }).(pulumi.StringOutput)
}

type LiveEventOutputTranscriptionTrackPtrOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackPtrOutput) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackPtrOutput) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventOutputTranscriptionTrack] {
	return pulumix.Output[*LiveEventOutputTranscriptionTrack]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventOutputTranscriptionTrackPtrOutput) Elem() LiveEventOutputTranscriptionTrackOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrack) LiveEventOutputTranscriptionTrack {
		if v != nil {
			return *v
		}
		var ret LiveEventOutputTranscriptionTrack
		return ret
	}).(LiveEventOutputTranscriptionTrackOutput)
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackPtrOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrack) *string {
		if v == nil {
			return nil
		}
		return &v.TrackName
	}).(pulumi.StringPtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackResponse struct {
	// The output track name. This property is reserved for future use, any value set on this property will be ignored.
	TrackName string `pulumi:"trackName"`
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackResponseOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputTranscriptionTrackResponse)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackResponseOutput) ToLiveEventOutputTranscriptionTrackResponseOutput() LiveEventOutputTranscriptionTrackResponseOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponseOutput) ToLiveEventOutputTranscriptionTrackResponseOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponseOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventOutputTranscriptionTrackResponse] {
	return pulumix.Output[LiveEventOutputTranscriptionTrackResponse]{
		OutputState: o.OutputState,
	}
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackResponseOutput) TrackName() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventOutputTranscriptionTrackResponse) string { return v.TrackName }).(pulumi.StringOutput)
}

type LiveEventOutputTranscriptionTrackResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputTranscriptionTrackResponse)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) ToLiveEventOutputTranscriptionTrackResponsePtrOutput() LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventOutputTranscriptionTrackResponse] {
	return pulumix.Output[*LiveEventOutputTranscriptionTrackResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) Elem() LiveEventOutputTranscriptionTrackResponseOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrackResponse) LiveEventOutputTranscriptionTrackResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventOutputTranscriptionTrackResponse
		return ret
	}).(LiveEventOutputTranscriptionTrackResponseOutput)
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrackResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TrackName
	}).(pulumi.StringPtrOutput)
}

// Live event preview settings.
type LiveEventPreview struct {
	// The access control for live event preview.
	AccessControl *LiveEventPreviewAccessControl `pulumi:"accessControl"`
	// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId *string `pulumi:"alternativeMediaId"`
	// The endpoints for preview. Do not share the preview URL with the live event audience.
	Endpoints []LiveEventEndpoint `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
	PreviewLocator *string `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
}

// LiveEventPreviewInput is an input type that accepts LiveEventPreviewArgs and LiveEventPreviewOutput values.
// You can construct a concrete instance of `LiveEventPreviewInput` via:
//
//	LiveEventPreviewArgs{...}
type LiveEventPreviewInput interface {
	pulumi.Input

	ToLiveEventPreviewOutput() LiveEventPreviewOutput
	ToLiveEventPreviewOutputWithContext(context.Context) LiveEventPreviewOutput
}

// Live event preview settings.
type LiveEventPreviewArgs struct {
	// The access control for live event preview.
	AccessControl LiveEventPreviewAccessControlPtrInput `pulumi:"accessControl"`
	// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId pulumi.StringPtrInput `pulumi:"alternativeMediaId"`
	// The endpoints for preview. Do not share the preview URL with the live event audience.
	Endpoints LiveEventEndpointArrayInput `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
	PreviewLocator pulumi.StringPtrInput `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
	StreamingPolicyName pulumi.StringPtrInput `pulumi:"streamingPolicyName"`
}

func (LiveEventPreviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return i.ToLiveEventPreviewOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput)
}

func (i LiveEventPreviewArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreview] {
	return pulumix.Output[LiveEventPreview]{
		OutputState: i.ToLiveEventPreviewOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput).ToLiveEventPreviewPtrOutputWithContext(ctx)
}

// LiveEventPreviewPtrInput is an input type that accepts LiveEventPreviewArgs, LiveEventPreviewPtr and LiveEventPreviewPtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewPtrInput` via:
//
//	        LiveEventPreviewArgs{...}
//
//	or:
//
//	        nil
type LiveEventPreviewPtrInput interface {
	pulumi.Input

	ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput
	ToLiveEventPreviewPtrOutputWithContext(context.Context) LiveEventPreviewPtrOutput
}

type liveEventPreviewPtrType LiveEventPreviewArgs

func LiveEventPreviewPtr(v *LiveEventPreviewArgs) LiveEventPreviewPtrInput {
	return (*liveEventPreviewPtrType)(v)
}

func (*liveEventPreviewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewPtrOutput)
}

func (i *liveEventPreviewPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreview] {
	return pulumix.Output[*LiveEventPreview]{
		OutputState: i.ToLiveEventPreviewPtrOutputWithContext(ctx).OutputState,
	}
}

// Live event preview settings.
type LiveEventPreviewOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventPreview) *LiveEventPreview {
		return &v
	}).(LiveEventPreviewPtrOutput)
}

func (o LiveEventPreviewOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreview] {
	return pulumix.Output[LiveEventPreview]{
		OutputState: o.OutputState,
	}
}

// The access control for live event preview.
func (o LiveEventPreviewOutput) AccessControl() LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *LiveEventPreviewAccessControl { return v.AccessControl }).(LiveEventPreviewAccessControlPtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventPreview) []LiveEventEndpoint { return v.Endpoints }).(LiveEventEndpointArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.PreviewLocator }).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.StreamingPolicyName }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewPtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreview] {
	return pulumix.Output[*LiveEventPreview]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewPtrOutput) Elem() LiveEventPreviewOutput {
	return o.ApplyT(func(v *LiveEventPreview) LiveEventPreview {
		if v != nil {
			return *v
		}
		var ret LiveEventPreview
		return ret
	}).(LiveEventPreviewOutput)
}

// The access control for live event preview.
func (o LiveEventPreviewPtrOutput) AccessControl() LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *LiveEventPreviewAccessControl {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventPreviewAccessControlPtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewPtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewPtrOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v *LiveEventPreview) []LiveEventEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewPtrOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.PreviewLocator
	}).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewPtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControl struct {
	// The IP access control properties.
	Ip *IPAccessControl `pulumi:"ip"`
}

// LiveEventPreviewAccessControlInput is an input type that accepts LiveEventPreviewAccessControlArgs and LiveEventPreviewAccessControlOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlInput` via:
//
//	LiveEventPreviewAccessControlArgs{...}
type LiveEventPreviewAccessControlInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput
	ToLiveEventPreviewAccessControlOutputWithContext(context.Context) LiveEventPreviewAccessControlOutput
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlArgs struct {
	// The IP access control properties.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (LiveEventPreviewAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControl)(nil)).Elem()
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput {
	return i.ToLiveEventPreviewAccessControlOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlOutput)
}

func (i LiveEventPreviewAccessControlArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewAccessControl] {
	return pulumix.Output[LiveEventPreviewAccessControl]{
		OutputState: i.ToLiveEventPreviewAccessControlOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return i.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlOutput).ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx)
}

// LiveEventPreviewAccessControlPtrInput is an input type that accepts LiveEventPreviewAccessControlArgs, LiveEventPreviewAccessControlPtr and LiveEventPreviewAccessControlPtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlPtrInput` via:
//
//	        LiveEventPreviewAccessControlArgs{...}
//
//	or:
//
//	        nil
type LiveEventPreviewAccessControlPtrInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput
	ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Context) LiveEventPreviewAccessControlPtrOutput
}

type liveEventPreviewAccessControlPtrType LiveEventPreviewAccessControlArgs

func LiveEventPreviewAccessControlPtr(v *LiveEventPreviewAccessControlArgs) LiveEventPreviewAccessControlPtrInput {
	return (*liveEventPreviewAccessControlPtrType)(v)
}

func (*liveEventPreviewAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControl)(nil)).Elem()
}

func (i *liveEventPreviewAccessControlPtrType) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return i.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewAccessControlPtrType) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlPtrOutput)
}

func (i *liveEventPreviewAccessControlPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreviewAccessControl] {
	return pulumix.Output[*LiveEventPreviewAccessControl]{
		OutputState: i.ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx).OutputState,
	}
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControl)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput {
	return o
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlOutput {
	return o
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return o.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventPreviewAccessControl) *LiveEventPreviewAccessControl {
		return &v
	}).(LiveEventPreviewAccessControlPtrOutput)
}

func (o LiveEventPreviewAccessControlOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewAccessControl] {
	return pulumix.Output[LiveEventPreviewAccessControl]{
		OutputState: o.OutputState,
	}
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type LiveEventPreviewAccessControlPtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControl)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlPtrOutput) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlPtrOutput) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreviewAccessControl] {
	return pulumix.Output[*LiveEventPreviewAccessControl]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewAccessControlPtrOutput) Elem() LiveEventPreviewAccessControlOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControl) LiveEventPreviewAccessControl {
		if v != nil {
			return *v
		}
		var ret LiveEventPreviewAccessControl
		return ret
	}).(LiveEventPreviewAccessControlOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlResponse struct {
	// The IP access control properties.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlResponseOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponseOutput() LiveEventPreviewAccessControlResponseOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponseOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponseOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewAccessControlResponse] {
	return pulumix.Output[LiveEventPreviewAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type LiveEventPreviewAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreviewAccessControlResponse] {
	return pulumix.Output[*LiveEventPreviewAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) Elem() LiveEventPreviewAccessControlResponseOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControlResponse) LiveEventPreviewAccessControlResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventPreviewAccessControlResponse
		return ret
	}).(LiveEventPreviewAccessControlResponseOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// Live event preview settings.
type LiveEventPreviewResponse struct {
	// The access control for live event preview.
	AccessControl *LiveEventPreviewAccessControlResponse `pulumi:"accessControl"`
	// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId *string `pulumi:"alternativeMediaId"`
	// The endpoints for preview. Do not share the preview URL with the live event audience.
	Endpoints []LiveEventEndpointResponse `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
	PreviewLocator *string `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
}

// Live event preview settings.
type LiveEventPreviewResponseOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewResponse)(nil)).Elem()
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponseOutput() LiveEventPreviewResponseOutput {
	return o
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponseOutputWithContext(ctx context.Context) LiveEventPreviewResponseOutput {
	return o
}

func (o LiveEventPreviewResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewResponse] {
	return pulumix.Output[LiveEventPreviewResponse]{
		OutputState: o.OutputState,
	}
}

// The access control for live event preview.
func (o LiveEventPreviewResponseOutput) AccessControl() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *LiveEventPreviewAccessControlResponse { return v.AccessControl }).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewResponseOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewResponseOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) []LiveEventEndpointResponse { return v.Endpoints }).(LiveEventEndpointResponseArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewResponseOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.PreviewLocator }).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewResponseOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.StreamingPolicyName }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewResponse)(nil)).Elem()
}

func (o LiveEventPreviewResponsePtrOutput) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return o
}

func (o LiveEventPreviewResponsePtrOutput) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return o
}

func (o LiveEventPreviewResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreviewResponse] {
	return pulumix.Output[*LiveEventPreviewResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewResponsePtrOutput) Elem() LiveEventPreviewResponseOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) LiveEventPreviewResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventPreviewResponse
		return ret
	}).(LiveEventPreviewResponseOutput)
}

// The access control for live event preview.
func (o LiveEventPreviewResponsePtrOutput) AccessControl() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *LiveEventPreviewAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewResponsePtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewResponsePtrOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) []LiveEventEndpointResponse {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointResponseArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewResponsePtrOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreviewLocator
	}).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewResponsePtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

// The live event status.
type LiveEventStatusResponse struct {
	// List of strings justifying the health status.
	HealthDescriptions []string `pulumi:"healthDescriptions"`
	// Health status of last 20 seconds.
	HealthStatus *string `pulumi:"healthStatus"`
	// Live event ingestion entry.
	Ingestion *LiveEventIngestionResponse `pulumi:"ingestion"`
	// Last updated UTC time of this status.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
	State *string `pulumi:"state"`
	// Track entry list.
	TrackStatus []LiveEventTrackStatusResponse `pulumi:"trackStatus"`
}

// The live event status.
type LiveEventStatusResponseOutput struct{ *pulumi.OutputState }

func (LiveEventStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventStatusResponse)(nil)).Elem()
}

func (o LiveEventStatusResponseOutput) ToLiveEventStatusResponseOutput() LiveEventStatusResponseOutput {
	return o
}

func (o LiveEventStatusResponseOutput) ToLiveEventStatusResponseOutputWithContext(ctx context.Context) LiveEventStatusResponseOutput {
	return o
}

func (o LiveEventStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventStatusResponse] {
	return pulumix.Output[LiveEventStatusResponse]{
		OutputState: o.OutputState,
	}
}

// List of strings justifying the health status.
func (o LiveEventStatusResponseOutput) HealthDescriptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LiveEventStatusResponse) []string { return v.HealthDescriptions }).(pulumi.StringArrayOutput)
}

// Health status of last 20 seconds.
func (o LiveEventStatusResponseOutput) HealthStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStatusResponse) *string { return v.HealthStatus }).(pulumi.StringPtrOutput)
}

// Live event ingestion entry.
func (o LiveEventStatusResponseOutput) Ingestion() LiveEventIngestionResponsePtrOutput {
	return o.ApplyT(func(v LiveEventStatusResponse) *LiveEventIngestionResponse { return v.Ingestion }).(LiveEventIngestionResponsePtrOutput)
}

// Last updated UTC time of this status.
func (o LiveEventStatusResponseOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStatusResponse) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
func (o LiveEventStatusResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStatusResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Track entry list.
func (o LiveEventStatusResponseOutput) TrackStatus() LiveEventTrackStatusResponseArrayOutput {
	return o.ApplyT(func(v LiveEventStatusResponse) []LiveEventTrackStatusResponse { return v.TrackStatus }).(LiveEventTrackStatusResponseArrayOutput)
}

type LiveEventStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventStatusResponse)(nil)).Elem()
}

func (o LiveEventStatusResponseArrayOutput) ToLiveEventStatusResponseArrayOutput() LiveEventStatusResponseArrayOutput {
	return o
}

func (o LiveEventStatusResponseArrayOutput) ToLiveEventStatusResponseArrayOutputWithContext(ctx context.Context) LiveEventStatusResponseArrayOutput {
	return o
}

func (o LiveEventStatusResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventStatusResponse] {
	return pulumix.Output[[]LiveEventStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventStatusResponseArrayOutput) Index(i pulumi.IntInput) LiveEventStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventStatusResponse {
		return vs[0].([]LiveEventStatusResponse)[vs[1].(int)]
	}).(LiveEventStatusResponseOutput)
}

// The live event stream event data.
type LiveEventStreamEventDataResponse struct {
	// Bitrate of the track.
	Bitrate *float64 `pulumi:"bitrate"`
	// Current fragment timestamp in timescale.
	CurrentFragmentTimestamp *string `pulumi:"currentFragmentTimestamp"`
	// Length of the discontinuity gap in timescale.
	DiscontinuityGap *float64 `pulumi:"discontinuityGap"`
	// Fragment duration.
	Duration *string `pulumi:"duration"`
	// Reason the fragment was dropped.
	FragmentDropReason *string `pulumi:"fragmentDropReason"`
	// Duration of first fragment used to make a comparison, in timescale.
	FragmentOneDuration *string `pulumi:"fragmentOneDuration"`
	// Timestamp of first fragment used to make a comparison, in timescale.
	FragmentOneTimestamp *string `pulumi:"fragmentOneTimestamp"`
	// Duration of second fragment used to make a comparison, in timescale.
	FragmentTwoDuration *string `pulumi:"fragmentTwoDuration"`
	// Timestamp of second fragment used to make a comparison, in timescale.
	FragmentTwoTimestamp *string `pulumi:"fragmentTwoTimestamp"`
	// The larger timestamp of the two fragments compared.
	MaxTime *string `pulumi:"maxTime"`
	// The media type of the larger timestamp of two fragments compared.
	MaxTimeMediaType *string `pulumi:"maxTimeMediaType"`
	// Fragment timestamp in timescale.
	MediaTimestamp *string `pulumi:"mediaTimestamp"`
	// Type of the track.
	MediaType *string `pulumi:"mediaType"`
	// The smaller timestamp of the two fragments compared.
	MinTime *string `pulumi:"minTime"`
	// The media type of the smaller timestamp of two fragments compared.
	MinTimeMediaType *string `pulumi:"minTimeMediaType"`
	// Previous fragment duration in timescale.
	PreviousFragmentDuration *string `pulumi:"previousFragmentDuration"`
	// Previous fragment timestamp in timescale.
	PreviousFragmentTimestamp *string `pulumi:"previousFragmentTimestamp"`
	// Truncated IP of the encoder.
	RemoteIp *string `pulumi:"remoteIp"`
	// Port of the encoder.
	RemotePort *string `pulumi:"remotePort"`
	// Width x Height for video, null otherwise.
	Resolution *string `pulumi:"resolution"`
	// Result code.
	ResultCode *string `pulumi:"resultCode"`
	// Result message.
	ResultMessage *string `pulumi:"resultMessage"`
	// Stream ID in the format "trackName_bitrate"
	StreamId *string `pulumi:"streamId"`
	// Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.
	StreamName *string `pulumi:"streamName"`
	// Timescale in which timestamps are expressed.
	Timescale *string `pulumi:"timescale"`
	// Timescale of the fragment with the larger timestamp.
	TimescaleOfMaxTime *string `pulumi:"timescaleOfMaxTime"`
	// Timescale of the fragment with the smaller timestamp.
	TimescaleOfMinTime *string `pulumi:"timescaleOfMinTime"`
	// Track index.
	TrackId *int `pulumi:"trackId"`
	// Name of the track.
	TrackName *string `pulumi:"trackName"`
}

// The live event stream event data.
type LiveEventStreamEventDataResponseOutput struct{ *pulumi.OutputState }

func (LiveEventStreamEventDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventStreamEventDataResponse)(nil)).Elem()
}

func (o LiveEventStreamEventDataResponseOutput) ToLiveEventStreamEventDataResponseOutput() LiveEventStreamEventDataResponseOutput {
	return o
}

func (o LiveEventStreamEventDataResponseOutput) ToLiveEventStreamEventDataResponseOutputWithContext(ctx context.Context) LiveEventStreamEventDataResponseOutput {
	return o
}

func (o LiveEventStreamEventDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventStreamEventDataResponse] {
	return pulumix.Output[LiveEventStreamEventDataResponse]{
		OutputState: o.OutputState,
	}
}

// Bitrate of the track.
func (o LiveEventStreamEventDataResponseOutput) Bitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *float64 { return v.Bitrate }).(pulumi.Float64PtrOutput)
}

// Current fragment timestamp in timescale.
func (o LiveEventStreamEventDataResponseOutput) CurrentFragmentTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.CurrentFragmentTimestamp }).(pulumi.StringPtrOutput)
}

// Length of the discontinuity gap in timescale.
func (o LiveEventStreamEventDataResponseOutput) DiscontinuityGap() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *float64 { return v.DiscontinuityGap }).(pulumi.Float64PtrOutput)
}

// Fragment duration.
func (o LiveEventStreamEventDataResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Reason the fragment was dropped.
func (o LiveEventStreamEventDataResponseOutput) FragmentDropReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.FragmentDropReason }).(pulumi.StringPtrOutput)
}

// Duration of first fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponseOutput) FragmentOneDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.FragmentOneDuration }).(pulumi.StringPtrOutput)
}

// Timestamp of first fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponseOutput) FragmentOneTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.FragmentOneTimestamp }).(pulumi.StringPtrOutput)
}

// Duration of second fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponseOutput) FragmentTwoDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.FragmentTwoDuration }).(pulumi.StringPtrOutput)
}

// Timestamp of second fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponseOutput) FragmentTwoTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.FragmentTwoTimestamp }).(pulumi.StringPtrOutput)
}

// The larger timestamp of the two fragments compared.
func (o LiveEventStreamEventDataResponseOutput) MaxTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.MaxTime }).(pulumi.StringPtrOutput)
}

// The media type of the larger timestamp of two fragments compared.
func (o LiveEventStreamEventDataResponseOutput) MaxTimeMediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.MaxTimeMediaType }).(pulumi.StringPtrOutput)
}

// Fragment timestamp in timescale.
func (o LiveEventStreamEventDataResponseOutput) MediaTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.MediaTimestamp }).(pulumi.StringPtrOutput)
}

// Type of the track.
func (o LiveEventStreamEventDataResponseOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// The smaller timestamp of the two fragments compared.
func (o LiveEventStreamEventDataResponseOutput) MinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.MinTime }).(pulumi.StringPtrOutput)
}

// The media type of the smaller timestamp of two fragments compared.
func (o LiveEventStreamEventDataResponseOutput) MinTimeMediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.MinTimeMediaType }).(pulumi.StringPtrOutput)
}

// Previous fragment duration in timescale.
func (o LiveEventStreamEventDataResponseOutput) PreviousFragmentDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.PreviousFragmentDuration }).(pulumi.StringPtrOutput)
}

// Previous fragment timestamp in timescale.
func (o LiveEventStreamEventDataResponseOutput) PreviousFragmentTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.PreviousFragmentTimestamp }).(pulumi.StringPtrOutput)
}

// Truncated IP of the encoder.
func (o LiveEventStreamEventDataResponseOutput) RemoteIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.RemoteIp }).(pulumi.StringPtrOutput)
}

// Port of the encoder.
func (o LiveEventStreamEventDataResponseOutput) RemotePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.RemotePort }).(pulumi.StringPtrOutput)
}

// Width x Height for video, null otherwise.
func (o LiveEventStreamEventDataResponseOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// Result code.
func (o LiveEventStreamEventDataResponseOutput) ResultCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.ResultCode }).(pulumi.StringPtrOutput)
}

// Result message.
func (o LiveEventStreamEventDataResponseOutput) ResultMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.ResultMessage }).(pulumi.StringPtrOutput)
}

// Stream ID in the format "trackName_bitrate"
func (o LiveEventStreamEventDataResponseOutput) StreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.StreamId }).(pulumi.StringPtrOutput)
}

// Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.
func (o LiveEventStreamEventDataResponseOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

// Timescale in which timestamps are expressed.
func (o LiveEventStreamEventDataResponseOutput) Timescale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.Timescale }).(pulumi.StringPtrOutput)
}

// Timescale of the fragment with the larger timestamp.
func (o LiveEventStreamEventDataResponseOutput) TimescaleOfMaxTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.TimescaleOfMaxTime }).(pulumi.StringPtrOutput)
}

// Timescale of the fragment with the smaller timestamp.
func (o LiveEventStreamEventDataResponseOutput) TimescaleOfMinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.TimescaleOfMinTime }).(pulumi.StringPtrOutput)
}

// Track index.
func (o LiveEventStreamEventDataResponseOutput) TrackId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *int { return v.TrackId }).(pulumi.IntPtrOutput)
}

// Name of the track.
func (o LiveEventStreamEventDataResponseOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventDataResponse) *string { return v.TrackName }).(pulumi.StringPtrOutput)
}

type LiveEventStreamEventDataResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventStreamEventDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventStreamEventDataResponse)(nil)).Elem()
}

func (o LiveEventStreamEventDataResponsePtrOutput) ToLiveEventStreamEventDataResponsePtrOutput() LiveEventStreamEventDataResponsePtrOutput {
	return o
}

func (o LiveEventStreamEventDataResponsePtrOutput) ToLiveEventStreamEventDataResponsePtrOutputWithContext(ctx context.Context) LiveEventStreamEventDataResponsePtrOutput {
	return o
}

func (o LiveEventStreamEventDataResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventStreamEventDataResponse] {
	return pulumix.Output[*LiveEventStreamEventDataResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventStreamEventDataResponsePtrOutput) Elem() LiveEventStreamEventDataResponseOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) LiveEventStreamEventDataResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventStreamEventDataResponse
		return ret
	}).(LiveEventStreamEventDataResponseOutput)
}

// Bitrate of the track.
func (o LiveEventStreamEventDataResponsePtrOutput) Bitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.Float64PtrOutput)
}

// Current fragment timestamp in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) CurrentFragmentTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CurrentFragmentTimestamp
	}).(pulumi.StringPtrOutput)
}

// Length of the discontinuity gap in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) DiscontinuityGap() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.DiscontinuityGap
	}).(pulumi.Float64PtrOutput)
}

// Fragment duration.
func (o LiveEventStreamEventDataResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Reason the fragment was dropped.
func (o LiveEventStreamEventDataResponsePtrOutput) FragmentDropReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.FragmentDropReason
	}).(pulumi.StringPtrOutput)
}

// Duration of first fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) FragmentOneDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.FragmentOneDuration
	}).(pulumi.StringPtrOutput)
}

// Timestamp of first fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) FragmentOneTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.FragmentOneTimestamp
	}).(pulumi.StringPtrOutput)
}

// Duration of second fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) FragmentTwoDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.FragmentTwoDuration
	}).(pulumi.StringPtrOutput)
}

// Timestamp of second fragment used to make a comparison, in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) FragmentTwoTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.FragmentTwoTimestamp
	}).(pulumi.StringPtrOutput)
}

// The larger timestamp of the two fragments compared.
func (o LiveEventStreamEventDataResponsePtrOutput) MaxTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxTime
	}).(pulumi.StringPtrOutput)
}

// The media type of the larger timestamp of two fragments compared.
func (o LiveEventStreamEventDataResponsePtrOutput) MaxTimeMediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxTimeMediaType
	}).(pulumi.StringPtrOutput)
}

// Fragment timestamp in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) MediaTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.MediaTimestamp
	}).(pulumi.StringPtrOutput)
}

// Type of the track.
func (o LiveEventStreamEventDataResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// The smaller timestamp of the two fragments compared.
func (o LiveEventStreamEventDataResponsePtrOutput) MinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.MinTime
	}).(pulumi.StringPtrOutput)
}

// The media type of the smaller timestamp of two fragments compared.
func (o LiveEventStreamEventDataResponsePtrOutput) MinTimeMediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.MinTimeMediaType
	}).(pulumi.StringPtrOutput)
}

// Previous fragment duration in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) PreviousFragmentDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreviousFragmentDuration
	}).(pulumi.StringPtrOutput)
}

// Previous fragment timestamp in timescale.
func (o LiveEventStreamEventDataResponsePtrOutput) PreviousFragmentTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreviousFragmentTimestamp
	}).(pulumi.StringPtrOutput)
}

// Truncated IP of the encoder.
func (o LiveEventStreamEventDataResponsePtrOutput) RemoteIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemoteIp
	}).(pulumi.StringPtrOutput)
}

// Port of the encoder.
func (o LiveEventStreamEventDataResponsePtrOutput) RemotePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemotePort
	}).(pulumi.StringPtrOutput)
}

// Width x Height for video, null otherwise.
func (o LiveEventStreamEventDataResponsePtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(pulumi.StringPtrOutput)
}

// Result code.
func (o LiveEventStreamEventDataResponsePtrOutput) ResultCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResultCode
	}).(pulumi.StringPtrOutput)
}

// Result message.
func (o LiveEventStreamEventDataResponsePtrOutput) ResultMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResultMessage
	}).(pulumi.StringPtrOutput)
}

// Stream ID in the format "trackName_bitrate"
func (o LiveEventStreamEventDataResponsePtrOutput) StreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.StreamId
	}).(pulumi.StringPtrOutput)
}

// Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.
func (o LiveEventStreamEventDataResponsePtrOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.StreamName
	}).(pulumi.StringPtrOutput)
}

// Timescale in which timestamps are expressed.
func (o LiveEventStreamEventDataResponsePtrOutput) Timescale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timescale
	}).(pulumi.StringPtrOutput)
}

// Timescale of the fragment with the larger timestamp.
func (o LiveEventStreamEventDataResponsePtrOutput) TimescaleOfMaxTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimescaleOfMaxTime
	}).(pulumi.StringPtrOutput)
}

// Timescale of the fragment with the smaller timestamp.
func (o LiveEventStreamEventDataResponsePtrOutput) TimescaleOfMinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimescaleOfMinTime
	}).(pulumi.StringPtrOutput)
}

// Track index.
func (o LiveEventStreamEventDataResponsePtrOutput) TrackId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrackId
	}).(pulumi.IntPtrOutput)
}

// Name of the track.
func (o LiveEventStreamEventDataResponsePtrOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventStreamEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrackName
	}).(pulumi.StringPtrOutput)
}

// The live event stream event.
type LiveEventStreamEventResponse struct {
	// Event data based on event type.
	Data *LiveEventStreamEventDataResponse `pulumi:"data"`
	// Event level.
	EventLevel *string `pulumi:"eventLevel"`
	// The time event raised.
	EventTime *string `pulumi:"eventTime"`
	// The type of the stream event. Format: StreamEvent/{eventType}
	EventType *string `pulumi:"eventType"`
}

// The live event stream event.
type LiveEventStreamEventResponseOutput struct{ *pulumi.OutputState }

func (LiveEventStreamEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventStreamEventResponse)(nil)).Elem()
}

func (o LiveEventStreamEventResponseOutput) ToLiveEventStreamEventResponseOutput() LiveEventStreamEventResponseOutput {
	return o
}

func (o LiveEventStreamEventResponseOutput) ToLiveEventStreamEventResponseOutputWithContext(ctx context.Context) LiveEventStreamEventResponseOutput {
	return o
}

func (o LiveEventStreamEventResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventStreamEventResponse] {
	return pulumix.Output[LiveEventStreamEventResponse]{
		OutputState: o.OutputState,
	}
}

// Event data based on event type.
func (o LiveEventStreamEventResponseOutput) Data() LiveEventStreamEventDataResponsePtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventResponse) *LiveEventStreamEventDataResponse { return v.Data }).(LiveEventStreamEventDataResponsePtrOutput)
}

// Event level.
func (o LiveEventStreamEventResponseOutput) EventLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventResponse) *string { return v.EventLevel }).(pulumi.StringPtrOutput)
}

// The time event raised.
func (o LiveEventStreamEventResponseOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventResponse) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// The type of the stream event. Format: StreamEvent/{eventType}
func (o LiveEventStreamEventResponseOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventStreamEventResponse) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

type LiveEventStreamEventResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventStreamEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventStreamEventResponse)(nil)).Elem()
}

func (o LiveEventStreamEventResponseArrayOutput) ToLiveEventStreamEventResponseArrayOutput() LiveEventStreamEventResponseArrayOutput {
	return o
}

func (o LiveEventStreamEventResponseArrayOutput) ToLiveEventStreamEventResponseArrayOutputWithContext(ctx context.Context) LiveEventStreamEventResponseArrayOutput {
	return o
}

func (o LiveEventStreamEventResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventStreamEventResponse] {
	return pulumix.Output[[]LiveEventStreamEventResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventStreamEventResponseArrayOutput) Index(i pulumi.IntInput) LiveEventStreamEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventStreamEventResponse {
		return vs[0].([]LiveEventStreamEventResponse)[vs[1].(int)]
	}).(LiveEventStreamEventResponseOutput)
}

// The live event metadata insertion endpoint.
type LiveEventTimedMetadataEndpoint struct {
	// The metadata endpoint URL.
	Url *string `pulumi:"url"`
}

// LiveEventTimedMetadataEndpointInput is an input type that accepts LiveEventTimedMetadataEndpointArgs and LiveEventTimedMetadataEndpointOutput values.
// You can construct a concrete instance of `LiveEventTimedMetadataEndpointInput` via:
//
//	LiveEventTimedMetadataEndpointArgs{...}
type LiveEventTimedMetadataEndpointInput interface {
	pulumi.Input

	ToLiveEventTimedMetadataEndpointOutput() LiveEventTimedMetadataEndpointOutput
	ToLiveEventTimedMetadataEndpointOutputWithContext(context.Context) LiveEventTimedMetadataEndpointOutput
}

// The live event metadata insertion endpoint.
type LiveEventTimedMetadataEndpointArgs struct {
	// The metadata endpoint URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventTimedMetadataEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTimedMetadataEndpoint)(nil)).Elem()
}

func (i LiveEventTimedMetadataEndpointArgs) ToLiveEventTimedMetadataEndpointOutput() LiveEventTimedMetadataEndpointOutput {
	return i.ToLiveEventTimedMetadataEndpointOutputWithContext(context.Background())
}

func (i LiveEventTimedMetadataEndpointArgs) ToLiveEventTimedMetadataEndpointOutputWithContext(ctx context.Context) LiveEventTimedMetadataEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTimedMetadataEndpointOutput)
}

func (i LiveEventTimedMetadataEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventTimedMetadataEndpoint] {
	return pulumix.Output[LiveEventTimedMetadataEndpoint]{
		OutputState: i.ToLiveEventTimedMetadataEndpointOutputWithContext(ctx).OutputState,
	}
}

// LiveEventTimedMetadataEndpointArrayInput is an input type that accepts LiveEventTimedMetadataEndpointArray and LiveEventTimedMetadataEndpointArrayOutput values.
// You can construct a concrete instance of `LiveEventTimedMetadataEndpointArrayInput` via:
//
//	LiveEventTimedMetadataEndpointArray{ LiveEventTimedMetadataEndpointArgs{...} }
type LiveEventTimedMetadataEndpointArrayInput interface {
	pulumi.Input

	ToLiveEventTimedMetadataEndpointArrayOutput() LiveEventTimedMetadataEndpointArrayOutput
	ToLiveEventTimedMetadataEndpointArrayOutputWithContext(context.Context) LiveEventTimedMetadataEndpointArrayOutput
}

type LiveEventTimedMetadataEndpointArray []LiveEventTimedMetadataEndpointInput

func (LiveEventTimedMetadataEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTimedMetadataEndpoint)(nil)).Elem()
}

func (i LiveEventTimedMetadataEndpointArray) ToLiveEventTimedMetadataEndpointArrayOutput() LiveEventTimedMetadataEndpointArrayOutput {
	return i.ToLiveEventTimedMetadataEndpointArrayOutputWithContext(context.Background())
}

func (i LiveEventTimedMetadataEndpointArray) ToLiveEventTimedMetadataEndpointArrayOutputWithContext(ctx context.Context) LiveEventTimedMetadataEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTimedMetadataEndpointArrayOutput)
}

func (i LiveEventTimedMetadataEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTimedMetadataEndpoint] {
	return pulumix.Output[[]LiveEventTimedMetadataEndpoint]{
		OutputState: i.ToLiveEventTimedMetadataEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

// The live event metadata insertion endpoint.
type LiveEventTimedMetadataEndpointOutput struct{ *pulumi.OutputState }

func (LiveEventTimedMetadataEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTimedMetadataEndpoint)(nil)).Elem()
}

func (o LiveEventTimedMetadataEndpointOutput) ToLiveEventTimedMetadataEndpointOutput() LiveEventTimedMetadataEndpointOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointOutput) ToLiveEventTimedMetadataEndpointOutputWithContext(ctx context.Context) LiveEventTimedMetadataEndpointOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventTimedMetadataEndpoint] {
	return pulumix.Output[LiveEventTimedMetadataEndpoint]{
		OutputState: o.OutputState,
	}
}

// The metadata endpoint URL.
func (o LiveEventTimedMetadataEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTimedMetadataEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventTimedMetadataEndpointArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTimedMetadataEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTimedMetadataEndpoint)(nil)).Elem()
}

func (o LiveEventTimedMetadataEndpointArrayOutput) ToLiveEventTimedMetadataEndpointArrayOutput() LiveEventTimedMetadataEndpointArrayOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointArrayOutput) ToLiveEventTimedMetadataEndpointArrayOutputWithContext(ctx context.Context) LiveEventTimedMetadataEndpointArrayOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTimedMetadataEndpoint] {
	return pulumix.Output[[]LiveEventTimedMetadataEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventTimedMetadataEndpointArrayOutput) Index(i pulumi.IntInput) LiveEventTimedMetadataEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTimedMetadataEndpoint {
		return vs[0].([]LiveEventTimedMetadataEndpoint)[vs[1].(int)]
	}).(LiveEventTimedMetadataEndpointOutput)
}

// The live event metadata insertion endpoint.
type LiveEventTimedMetadataEndpointResponse struct {
	// The metadata endpoint URL.
	Url *string `pulumi:"url"`
}

// The live event metadata insertion endpoint.
type LiveEventTimedMetadataEndpointResponseOutput struct{ *pulumi.OutputState }

func (LiveEventTimedMetadataEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTimedMetadataEndpointResponse)(nil)).Elem()
}

func (o LiveEventTimedMetadataEndpointResponseOutput) ToLiveEventTimedMetadataEndpointResponseOutput() LiveEventTimedMetadataEndpointResponseOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointResponseOutput) ToLiveEventTimedMetadataEndpointResponseOutputWithContext(ctx context.Context) LiveEventTimedMetadataEndpointResponseOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventTimedMetadataEndpointResponse] {
	return pulumix.Output[LiveEventTimedMetadataEndpointResponse]{
		OutputState: o.OutputState,
	}
}

// The metadata endpoint URL.
func (o LiveEventTimedMetadataEndpointResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTimedMetadataEndpointResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventTimedMetadataEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTimedMetadataEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTimedMetadataEndpointResponse)(nil)).Elem()
}

func (o LiveEventTimedMetadataEndpointResponseArrayOutput) ToLiveEventTimedMetadataEndpointResponseArrayOutput() LiveEventTimedMetadataEndpointResponseArrayOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointResponseArrayOutput) ToLiveEventTimedMetadataEndpointResponseArrayOutputWithContext(ctx context.Context) LiveEventTimedMetadataEndpointResponseArrayOutput {
	return o
}

func (o LiveEventTimedMetadataEndpointResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTimedMetadataEndpointResponse] {
	return pulumix.Output[[]LiveEventTimedMetadataEndpointResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventTimedMetadataEndpointResponseArrayOutput) Index(i pulumi.IntInput) LiveEventTimedMetadataEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTimedMetadataEndpointResponse {
		return vs[0].([]LiveEventTimedMetadataEndpointResponse)[vs[1].(int)]
	}).(LiveEventTimedMetadataEndpointResponseOutput)
}

// The live event track ingest heart beat event data.
type LiveEventTrackEventDataResponse struct {
	// Bitrate of the track.
	Bitrate *float64 `pulumi:"bitrate"`
	// Number of discontinuities detected in the last 20 seconds.
	DiscontinuityCount *float64 `pulumi:"discontinuityCount"`
	// Indicates whether ingest is healthy.
	Healthy *bool `pulumi:"healthy"`
	// Calculated bitrate based on data chunks coming from encoder.
	IncomingBitrate *float64 `pulumi:"incomingBitrate"`
	// Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived with no delay; and "n/a" if no audio or video data was received. For example, if you have a contribution encoder sending in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift. If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not account for breaks in the data - only data that is delayed in timestamps.
	IngestDriftValue *string `pulumi:"ingestDriftValue"`
	// The last timestamp in UTC that a fragment arrived at the ingest endpoint.
	LastFragmentArrivalTime *string `pulumi:"lastFragmentArrivalTime"`
	// Latest timestamp received for a track in last 20 seconds.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// Number of data chunks with timestamps in the past that were received in last 20 seconds.
	NonincreasingCount *float64 `pulumi:"nonincreasingCount"`
	// Number of data chunks that had overlapped timestamps in last 20 seconds.
	OverlapCount *float64 `pulumi:"overlapCount"`
	// State of the live event.
	State *string `pulumi:"state"`
	// Timescale in which timestamps are expressed.
	Timescale *string `pulumi:"timescale"`
	// Name of the track.
	TrackName *string `pulumi:"trackName"`
	// Type of the track.
	TrackType *string `pulumi:"trackType"`
	// The language code (in BCP-47 format) of the transcription language. For example, "de-de" indicates German (Germany). The value is empty for the video track heartbeats, or when live transcription is turned off.
	TranscriptionLanguage *string `pulumi:"transcriptionLanguage"`
	// This value is "On" for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string. This state is only applicable to track type of "audio" for Live transcription. All other tracks will have an empty value.
	TranscriptionState *string `pulumi:"transcriptionState"`
	// If expected and actual bitrates differ by more than allowed limit in last 20 seconds.
	UnexpectedBitrate *bool `pulumi:"unexpectedBitrate"`
}

// The live event track ingest heart beat event data.
type LiveEventTrackEventDataResponseOutput struct{ *pulumi.OutputState }

func (LiveEventTrackEventDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTrackEventDataResponse)(nil)).Elem()
}

func (o LiveEventTrackEventDataResponseOutput) ToLiveEventTrackEventDataResponseOutput() LiveEventTrackEventDataResponseOutput {
	return o
}

func (o LiveEventTrackEventDataResponseOutput) ToLiveEventTrackEventDataResponseOutputWithContext(ctx context.Context) LiveEventTrackEventDataResponseOutput {
	return o
}

func (o LiveEventTrackEventDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventTrackEventDataResponse] {
	return pulumix.Output[LiveEventTrackEventDataResponse]{
		OutputState: o.OutputState,
	}
}

// Bitrate of the track.
func (o LiveEventTrackEventDataResponseOutput) Bitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *float64 { return v.Bitrate }).(pulumi.Float64PtrOutput)
}

// Number of discontinuities detected in the last 20 seconds.
func (o LiveEventTrackEventDataResponseOutput) DiscontinuityCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *float64 { return v.DiscontinuityCount }).(pulumi.Float64PtrOutput)
}

// Indicates whether ingest is healthy.
func (o LiveEventTrackEventDataResponseOutput) Healthy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *bool { return v.Healthy }).(pulumi.BoolPtrOutput)
}

// Calculated bitrate based on data chunks coming from encoder.
func (o LiveEventTrackEventDataResponseOutput) IncomingBitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *float64 { return v.IncomingBitrate }).(pulumi.Float64PtrOutput)
}

// Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived with no delay; and "n/a" if no audio or video data was received. For example, if you have a contribution encoder sending in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift. If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not account for breaks in the data - only data that is delayed in timestamps.
func (o LiveEventTrackEventDataResponseOutput) IngestDriftValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.IngestDriftValue }).(pulumi.StringPtrOutput)
}

// The last timestamp in UTC that a fragment arrived at the ingest endpoint.
func (o LiveEventTrackEventDataResponseOutput) LastFragmentArrivalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.LastFragmentArrivalTime }).(pulumi.StringPtrOutput)
}

// Latest timestamp received for a track in last 20 seconds.
func (o LiveEventTrackEventDataResponseOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.LastTimestamp }).(pulumi.StringPtrOutput)
}

// Number of data chunks with timestamps in the past that were received in last 20 seconds.
func (o LiveEventTrackEventDataResponseOutput) NonincreasingCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *float64 { return v.NonincreasingCount }).(pulumi.Float64PtrOutput)
}

// Number of data chunks that had overlapped timestamps in last 20 seconds.
func (o LiveEventTrackEventDataResponseOutput) OverlapCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *float64 { return v.OverlapCount }).(pulumi.Float64PtrOutput)
}

// State of the live event.
func (o LiveEventTrackEventDataResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Timescale in which timestamps are expressed.
func (o LiveEventTrackEventDataResponseOutput) Timescale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.Timescale }).(pulumi.StringPtrOutput)
}

// Name of the track.
func (o LiveEventTrackEventDataResponseOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.TrackName }).(pulumi.StringPtrOutput)
}

// Type of the track.
func (o LiveEventTrackEventDataResponseOutput) TrackType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.TrackType }).(pulumi.StringPtrOutput)
}

// The language code (in BCP-47 format) of the transcription language. For example, "de-de" indicates German (Germany). The value is empty for the video track heartbeats, or when live transcription is turned off.
func (o LiveEventTrackEventDataResponseOutput) TranscriptionLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.TranscriptionLanguage }).(pulumi.StringPtrOutput)
}

// This value is "On" for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string. This state is only applicable to track type of "audio" for Live transcription. All other tracks will have an empty value.
func (o LiveEventTrackEventDataResponseOutput) TranscriptionState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *string { return v.TranscriptionState }).(pulumi.StringPtrOutput)
}

// If expected and actual bitrates differ by more than allowed limit in last 20 seconds.
func (o LiveEventTrackEventDataResponseOutput) UnexpectedBitrate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventDataResponse) *bool { return v.UnexpectedBitrate }).(pulumi.BoolPtrOutput)
}

type LiveEventTrackEventDataResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventTrackEventDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventTrackEventDataResponse)(nil)).Elem()
}

func (o LiveEventTrackEventDataResponsePtrOutput) ToLiveEventTrackEventDataResponsePtrOutput() LiveEventTrackEventDataResponsePtrOutput {
	return o
}

func (o LiveEventTrackEventDataResponsePtrOutput) ToLiveEventTrackEventDataResponsePtrOutputWithContext(ctx context.Context) LiveEventTrackEventDataResponsePtrOutput {
	return o
}

func (o LiveEventTrackEventDataResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventTrackEventDataResponse] {
	return pulumix.Output[*LiveEventTrackEventDataResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventTrackEventDataResponsePtrOutput) Elem() LiveEventTrackEventDataResponseOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) LiveEventTrackEventDataResponse {
		if v != nil {
			return *v
		}
		var ret LiveEventTrackEventDataResponse
		return ret
	}).(LiveEventTrackEventDataResponseOutput)
}

// Bitrate of the track.
func (o LiveEventTrackEventDataResponsePtrOutput) Bitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.Float64PtrOutput)
}

// Number of discontinuities detected in the last 20 seconds.
func (o LiveEventTrackEventDataResponsePtrOutput) DiscontinuityCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.DiscontinuityCount
	}).(pulumi.Float64PtrOutput)
}

// Indicates whether ingest is healthy.
func (o LiveEventTrackEventDataResponsePtrOutput) Healthy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Healthy
	}).(pulumi.BoolPtrOutput)
}

// Calculated bitrate based on data chunks coming from encoder.
func (o LiveEventTrackEventDataResponsePtrOutput) IncomingBitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.IncomingBitrate
	}).(pulumi.Float64PtrOutput)
}

// Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived with no delay; and "n/a" if no audio or video data was received. For example, if you have a contribution encoder sending in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift. If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not account for breaks in the data - only data that is delayed in timestamps.
func (o LiveEventTrackEventDataResponsePtrOutput) IngestDriftValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.IngestDriftValue
	}).(pulumi.StringPtrOutput)
}

// The last timestamp in UTC that a fragment arrived at the ingest endpoint.
func (o LiveEventTrackEventDataResponsePtrOutput) LastFragmentArrivalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastFragmentArrivalTime
	}).(pulumi.StringPtrOutput)
}

// Latest timestamp received for a track in last 20 seconds.
func (o LiveEventTrackEventDataResponsePtrOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastTimestamp
	}).(pulumi.StringPtrOutput)
}

// Number of data chunks with timestamps in the past that were received in last 20 seconds.
func (o LiveEventTrackEventDataResponsePtrOutput) NonincreasingCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.NonincreasingCount
	}).(pulumi.Float64PtrOutput)
}

// Number of data chunks that had overlapped timestamps in last 20 seconds.
func (o LiveEventTrackEventDataResponsePtrOutput) OverlapCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.OverlapCount
	}).(pulumi.Float64PtrOutput)
}

// State of the live event.
func (o LiveEventTrackEventDataResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Timescale in which timestamps are expressed.
func (o LiveEventTrackEventDataResponsePtrOutput) Timescale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timescale
	}).(pulumi.StringPtrOutput)
}

// Name of the track.
func (o LiveEventTrackEventDataResponsePtrOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrackName
	}).(pulumi.StringPtrOutput)
}

// Type of the track.
func (o LiveEventTrackEventDataResponsePtrOutput) TrackType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrackType
	}).(pulumi.StringPtrOutput)
}

// The language code (in BCP-47 format) of the transcription language. For example, "de-de" indicates German (Germany). The value is empty for the video track heartbeats, or when live transcription is turned off.
func (o LiveEventTrackEventDataResponsePtrOutput) TranscriptionLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.TranscriptionLanguage
	}).(pulumi.StringPtrOutput)
}

// This value is "On" for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string. This state is only applicable to track type of "audio" for Live transcription. All other tracks will have an empty value.
func (o LiveEventTrackEventDataResponsePtrOutput) TranscriptionState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.TranscriptionState
	}).(pulumi.StringPtrOutput)
}

// If expected and actual bitrates differ by more than allowed limit in last 20 seconds.
func (o LiveEventTrackEventDataResponsePtrOutput) UnexpectedBitrate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LiveEventTrackEventDataResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UnexpectedBitrate
	}).(pulumi.BoolPtrOutput)
}

// The live event track event.
type LiveEventTrackEventResponse struct {
	// Event data.
	Data *LiveEventTrackEventDataResponse `pulumi:"data"`
	// The time event raised.
	EventTime *string `pulumi:"eventTime"`
	// The type of the track event.
	EventType *string `pulumi:"eventType"`
}

// The live event track event.
type LiveEventTrackEventResponseOutput struct{ *pulumi.OutputState }

func (LiveEventTrackEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTrackEventResponse)(nil)).Elem()
}

func (o LiveEventTrackEventResponseOutput) ToLiveEventTrackEventResponseOutput() LiveEventTrackEventResponseOutput {
	return o
}

func (o LiveEventTrackEventResponseOutput) ToLiveEventTrackEventResponseOutputWithContext(ctx context.Context) LiveEventTrackEventResponseOutput {
	return o
}

func (o LiveEventTrackEventResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventTrackEventResponse] {
	return pulumix.Output[LiveEventTrackEventResponse]{
		OutputState: o.OutputState,
	}
}

// Event data.
func (o LiveEventTrackEventResponseOutput) Data() LiveEventTrackEventDataResponsePtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventResponse) *LiveEventTrackEventDataResponse { return v.Data }).(LiveEventTrackEventDataResponsePtrOutput)
}

// The time event raised.
func (o LiveEventTrackEventResponseOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventResponse) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// The type of the track event.
func (o LiveEventTrackEventResponseOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackEventResponse) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

type LiveEventTrackEventResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTrackEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTrackEventResponse)(nil)).Elem()
}

func (o LiveEventTrackEventResponseArrayOutput) ToLiveEventTrackEventResponseArrayOutput() LiveEventTrackEventResponseArrayOutput {
	return o
}

func (o LiveEventTrackEventResponseArrayOutput) ToLiveEventTrackEventResponseArrayOutputWithContext(ctx context.Context) LiveEventTrackEventResponseArrayOutput {
	return o
}

func (o LiveEventTrackEventResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTrackEventResponse] {
	return pulumix.Output[[]LiveEventTrackEventResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventTrackEventResponseArrayOutput) Index(i pulumi.IntInput) LiveEventTrackEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTrackEventResponse {
		return vs[0].([]LiveEventTrackEventResponse)[vs[1].(int)]
	}).(LiveEventTrackEventResponseOutput)
}

// The live event track status.
type LiveEventTrackStatusResponse struct {
	// Expected bitrate for this track.
	ExpectedBitrate *float64 `pulumi:"expectedBitrate"`
	// Average incoming bitrate for last 20 seconds when live event is running.
	IncomingBitrate *float64 `pulumi:"incomingBitrate"`
	// Current ingest drift value in seconds for last 1 minute.
	IngestDrift *string `pulumi:"ingestDrift"`
	// Total number of timed metadata request received.
	RequestReceived *float64 `pulumi:"requestReceived"`
	// Total number of successful timed metadata request received.
	RequestSucceeded *float64 `pulumi:"requestSucceeded"`
	// Track Id.
	TrackId *string `pulumi:"trackId"`
}

// The live event track status.
type LiveEventTrackStatusResponseOutput struct{ *pulumi.OutputState }

func (LiveEventTrackStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTrackStatusResponse)(nil)).Elem()
}

func (o LiveEventTrackStatusResponseOutput) ToLiveEventTrackStatusResponseOutput() LiveEventTrackStatusResponseOutput {
	return o
}

func (o LiveEventTrackStatusResponseOutput) ToLiveEventTrackStatusResponseOutputWithContext(ctx context.Context) LiveEventTrackStatusResponseOutput {
	return o
}

func (o LiveEventTrackStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventTrackStatusResponse] {
	return pulumix.Output[LiveEventTrackStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Expected bitrate for this track.
func (o LiveEventTrackStatusResponseOutput) ExpectedBitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackStatusResponse) *float64 { return v.ExpectedBitrate }).(pulumi.Float64PtrOutput)
}

// Average incoming bitrate for last 20 seconds when live event is running.
func (o LiveEventTrackStatusResponseOutput) IncomingBitrate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackStatusResponse) *float64 { return v.IncomingBitrate }).(pulumi.Float64PtrOutput)
}

// Current ingest drift value in seconds for last 1 minute.
func (o LiveEventTrackStatusResponseOutput) IngestDrift() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackStatusResponse) *string { return v.IngestDrift }).(pulumi.StringPtrOutput)
}

// Total number of timed metadata request received.
func (o LiveEventTrackStatusResponseOutput) RequestReceived() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackStatusResponse) *float64 { return v.RequestReceived }).(pulumi.Float64PtrOutput)
}

// Total number of successful timed metadata request received.
func (o LiveEventTrackStatusResponseOutput) RequestSucceeded() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LiveEventTrackStatusResponse) *float64 { return v.RequestSucceeded }).(pulumi.Float64PtrOutput)
}

// Track Id.
func (o LiveEventTrackStatusResponseOutput) TrackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTrackStatusResponse) *string { return v.TrackId }).(pulumi.StringPtrOutput)
}

type LiveEventTrackStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTrackStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTrackStatusResponse)(nil)).Elem()
}

func (o LiveEventTrackStatusResponseArrayOutput) ToLiveEventTrackStatusResponseArrayOutput() LiveEventTrackStatusResponseArrayOutput {
	return o
}

func (o LiveEventTrackStatusResponseArrayOutput) ToLiveEventTrackStatusResponseArrayOutputWithContext(ctx context.Context) LiveEventTrackStatusResponseArrayOutput {
	return o
}

func (o LiveEventTrackStatusResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTrackStatusResponse] {
	return pulumix.Output[[]LiveEventTrackStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventTrackStatusResponseArrayOutput) Index(i pulumi.IntInput) LiveEventTrackStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTrackStatusResponse {
		return vs[0].([]LiveEventTrackStatusResponse)[vs[1].(int)]
	}).(LiveEventTrackStatusResponseOutput)
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscription struct {
	// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
	InputTrackSelection []LiveEventInputTrackSelection `pulumi:"inputTrackSelection"`
	// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
	Language *string `pulumi:"language"`
	// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
	OutputTranscriptionTrack *LiveEventOutputTranscriptionTrack `pulumi:"outputTranscriptionTrack"`
}

// LiveEventTranscriptionInput is an input type that accepts LiveEventTranscriptionArgs and LiveEventTranscriptionOutput values.
// You can construct a concrete instance of `LiveEventTranscriptionInput` via:
//
//	LiveEventTranscriptionArgs{...}
type LiveEventTranscriptionInput interface {
	pulumi.Input

	ToLiveEventTranscriptionOutput() LiveEventTranscriptionOutput
	ToLiveEventTranscriptionOutputWithContext(context.Context) LiveEventTranscriptionOutput
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionArgs struct {
	// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
	InputTrackSelection LiveEventInputTrackSelectionArrayInput `pulumi:"inputTrackSelection"`
	// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
	Language pulumi.StringPtrInput `pulumi:"language"`
	// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
	OutputTranscriptionTrack LiveEventOutputTranscriptionTrackPtrInput `pulumi:"outputTranscriptionTrack"`
}

func (LiveEventTranscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTranscription)(nil)).Elem()
}

func (i LiveEventTranscriptionArgs) ToLiveEventTranscriptionOutput() LiveEventTranscriptionOutput {
	return i.ToLiveEventTranscriptionOutputWithContext(context.Background())
}

func (i LiveEventTranscriptionArgs) ToLiveEventTranscriptionOutputWithContext(ctx context.Context) LiveEventTranscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTranscriptionOutput)
}

func (i LiveEventTranscriptionArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventTranscription] {
	return pulumix.Output[LiveEventTranscription]{
		OutputState: i.ToLiveEventTranscriptionOutputWithContext(ctx).OutputState,
	}
}

// LiveEventTranscriptionArrayInput is an input type that accepts LiveEventTranscriptionArray and LiveEventTranscriptionArrayOutput values.
// You can construct a concrete instance of `LiveEventTranscriptionArrayInput` via:
//
//	LiveEventTranscriptionArray{ LiveEventTranscriptionArgs{...} }
type LiveEventTranscriptionArrayInput interface {
	pulumi.Input

	ToLiveEventTranscriptionArrayOutput() LiveEventTranscriptionArrayOutput
	ToLiveEventTranscriptionArrayOutputWithContext(context.Context) LiveEventTranscriptionArrayOutput
}

type LiveEventTranscriptionArray []LiveEventTranscriptionInput

func (LiveEventTranscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTranscription)(nil)).Elem()
}

func (i LiveEventTranscriptionArray) ToLiveEventTranscriptionArrayOutput() LiveEventTranscriptionArrayOutput {
	return i.ToLiveEventTranscriptionArrayOutputWithContext(context.Background())
}

func (i LiveEventTranscriptionArray) ToLiveEventTranscriptionArrayOutputWithContext(ctx context.Context) LiveEventTranscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTranscriptionArrayOutput)
}

func (i LiveEventTranscriptionArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTranscription] {
	return pulumix.Output[[]LiveEventTranscription]{
		OutputState: i.ToLiveEventTranscriptionArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTranscription)(nil)).Elem()
}

func (o LiveEventTranscriptionOutput) ToLiveEventTranscriptionOutput() LiveEventTranscriptionOutput {
	return o
}

func (o LiveEventTranscriptionOutput) ToLiveEventTranscriptionOutputWithContext(ctx context.Context) LiveEventTranscriptionOutput {
	return o
}

func (o LiveEventTranscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventTranscription] {
	return pulumix.Output[LiveEventTranscription]{
		OutputState: o.OutputState,
	}
}

// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionOutput) InputTrackSelection() LiveEventInputTrackSelectionArrayOutput {
	return o.ApplyT(func(v LiveEventTranscription) []LiveEventInputTrackSelection { return v.InputTrackSelection }).(LiveEventInputTrackSelectionArrayOutput)
}

// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
func (o LiveEventTranscriptionOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTranscription) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionOutput) OutputTranscriptionTrack() LiveEventOutputTranscriptionTrackPtrOutput {
	return o.ApplyT(func(v LiveEventTranscription) *LiveEventOutputTranscriptionTrack { return v.OutputTranscriptionTrack }).(LiveEventOutputTranscriptionTrackPtrOutput)
}

type LiveEventTranscriptionArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTranscription)(nil)).Elem()
}

func (o LiveEventTranscriptionArrayOutput) ToLiveEventTranscriptionArrayOutput() LiveEventTranscriptionArrayOutput {
	return o
}

func (o LiveEventTranscriptionArrayOutput) ToLiveEventTranscriptionArrayOutputWithContext(ctx context.Context) LiveEventTranscriptionArrayOutput {
	return o
}

func (o LiveEventTranscriptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTranscription] {
	return pulumix.Output[[]LiveEventTranscription]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventTranscriptionArrayOutput) Index(i pulumi.IntInput) LiveEventTranscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTranscription {
		return vs[0].([]LiveEventTranscription)[vs[1].(int)]
	}).(LiveEventTranscriptionOutput)
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionResponse struct {
	// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
	InputTrackSelection []LiveEventInputTrackSelectionResponse `pulumi:"inputTrackSelection"`
	// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
	Language *string `pulumi:"language"`
	// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
	OutputTranscriptionTrack *LiveEventOutputTranscriptionTrackResponse `pulumi:"outputTranscriptionTrack"`
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionResponseOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTranscriptionResponse)(nil)).Elem()
}

func (o LiveEventTranscriptionResponseOutput) ToLiveEventTranscriptionResponseOutput() LiveEventTranscriptionResponseOutput {
	return o
}

func (o LiveEventTranscriptionResponseOutput) ToLiveEventTranscriptionResponseOutputWithContext(ctx context.Context) LiveEventTranscriptionResponseOutput {
	return o
}

func (o LiveEventTranscriptionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventTranscriptionResponse] {
	return pulumix.Output[LiveEventTranscriptionResponse]{
		OutputState: o.OutputState,
	}
}

// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionResponseOutput) InputTrackSelection() LiveEventInputTrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v LiveEventTranscriptionResponse) []LiveEventInputTrackSelectionResponse {
		return v.InputTrackSelection
	}).(LiveEventInputTrackSelectionResponseArrayOutput)
}

// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
func (o LiveEventTranscriptionResponseOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTranscriptionResponse) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionResponseOutput) OutputTranscriptionTrack() LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o.ApplyT(func(v LiveEventTranscriptionResponse) *LiveEventOutputTranscriptionTrackResponse {
		return v.OutputTranscriptionTrack
	}).(LiveEventOutputTranscriptionTrackResponsePtrOutput)
}

type LiveEventTranscriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTranscriptionResponse)(nil)).Elem()
}

func (o LiveEventTranscriptionResponseArrayOutput) ToLiveEventTranscriptionResponseArrayOutput() LiveEventTranscriptionResponseArrayOutput {
	return o
}

func (o LiveEventTranscriptionResponseArrayOutput) ToLiveEventTranscriptionResponseArrayOutputWithContext(ctx context.Context) LiveEventTranscriptionResponseArrayOutput {
	return o
}

func (o LiveEventTranscriptionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventTranscriptionResponse] {
	return pulumix.Output[[]LiveEventTranscriptionResponse]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventTranscriptionResponseArrayOutput) Index(i pulumi.IntInput) LiveEventTranscriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTranscriptionResponse {
		return vs[0].([]LiveEventTranscriptionResponse)[vs[1].(int)]
	}).(LiveEventTranscriptionResponseOutput)
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControl struct {
	// The access control of Akamai
	Akamai *AkamaiAccessControl `pulumi:"akamai"`
	// The IP access control of the streaming endpoint.
	Ip *IPAccessControl `pulumi:"ip"`
}

// StreamingEndpointAccessControlInput is an input type that accepts StreamingEndpointAccessControlArgs and StreamingEndpointAccessControlOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlInput` via:
//
//	StreamingEndpointAccessControlArgs{...}
type StreamingEndpointAccessControlInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput
	ToStreamingEndpointAccessControlOutputWithContext(context.Context) StreamingEndpointAccessControlOutput
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlArgs struct {
	// The access control of Akamai
	Akamai AkamaiAccessControlPtrInput `pulumi:"akamai"`
	// The IP access control of the streaming endpoint.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (StreamingEndpointAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return i.ToStreamingEndpointAccessControlOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput)
}

func (i StreamingEndpointAccessControlArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControl] {
	return pulumix.Output[StreamingEndpointAccessControl]{
		OutputState: i.ToStreamingEndpointAccessControlOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput).ToStreamingEndpointAccessControlPtrOutputWithContext(ctx)
}

// StreamingEndpointAccessControlPtrInput is an input type that accepts StreamingEndpointAccessControlArgs, StreamingEndpointAccessControlPtr and StreamingEndpointAccessControlPtrOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlPtrInput` via:
//
//	        StreamingEndpointAccessControlArgs{...}
//
//	or:
//
//	        nil
type StreamingEndpointAccessControlPtrInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput
	ToStreamingEndpointAccessControlPtrOutputWithContext(context.Context) StreamingEndpointAccessControlPtrOutput
}

type streamingEndpointAccessControlPtrType StreamingEndpointAccessControlArgs

func StreamingEndpointAccessControlPtr(v *StreamingEndpointAccessControlArgs) StreamingEndpointAccessControlPtrInput {
	return (*streamingEndpointAccessControlPtrType)(v)
}

func (*streamingEndpointAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlPtrOutput)
}

func (i *streamingEndpointAccessControlPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingEndpointAccessControl] {
	return pulumix.Output[*StreamingEndpointAccessControl]{
		OutputState: i.ToStreamingEndpointAccessControlPtrOutputWithContext(ctx).OutputState,
	}
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingEndpointAccessControl) *StreamingEndpointAccessControl {
		return &v
	}).(StreamingEndpointAccessControlPtrOutput)
}

func (o StreamingEndpointAccessControlOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControl] {
	return pulumix.Output[StreamingEndpointAccessControl]{
		OutputState: o.OutputState,
	}
}

// The access control of Akamai
func (o StreamingEndpointAccessControlOutput) Akamai() AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *AkamaiAccessControl { return v.Akamai }).(AkamaiAccessControlPtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type StreamingEndpointAccessControlPtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingEndpointAccessControl] {
	return pulumix.Output[*StreamingEndpointAccessControl]{
		OutputState: o.OutputState,
	}
}

func (o StreamingEndpointAccessControlPtrOutput) Elem() StreamingEndpointAccessControlOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) StreamingEndpointAccessControl {
		if v != nil {
			return *v
		}
		var ret StreamingEndpointAccessControl
		return ret
	}).(StreamingEndpointAccessControlOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlPtrOutput) Akamai() AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) *AkamaiAccessControl {
		if v == nil {
			return nil
		}
		return v.Akamai
	}).(AkamaiAccessControlPtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlResponse struct {
	// The access control of Akamai
	Akamai *AkamaiAccessControlResponse `pulumi:"akamai"`
	// The IP access control of the streaming endpoint.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlResponseOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponseOutput() StreamingEndpointAccessControlResponseOutput {
	return o
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponseOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponseOutput {
	return o
}

func (o StreamingEndpointAccessControlResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControlResponse] {
	return pulumix.Output[StreamingEndpointAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

// The access control of Akamai
func (o StreamingEndpointAccessControlResponseOutput) Akamai() AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *AkamaiAccessControlResponse { return v.Akamai }).(AkamaiAccessControlResponsePtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type StreamingEndpointAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (o StreamingEndpointAccessControlResponsePtrOutput) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return o
}

func (o StreamingEndpointAccessControlResponsePtrOutput) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return o
}

func (o StreamingEndpointAccessControlResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingEndpointAccessControlResponse] {
	return pulumix.Output[*StreamingEndpointAccessControlResponse]{
		OutputState: o.OutputState,
	}
}

func (o StreamingEndpointAccessControlResponsePtrOutput) Elem() StreamingEndpointAccessControlResponseOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) StreamingEndpointAccessControlResponse {
		if v != nil {
			return *v
		}
		var ret StreamingEndpointAccessControlResponse
		return ret
	}).(StreamingEndpointAccessControlResponseOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlResponsePtrOutput) Akamai() AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) *AkamaiAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Akamai
	}).(AkamaiAccessControlResponsePtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AkamaiAccessControlOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlPtrOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlResponseOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyArrayOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyResponseOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(ArmStreamingEndpointCurrentSkuOutput{})
	pulumi.RegisterOutputType(ArmStreamingEndpointCurrentSkuPtrOutput{})
	pulumi.RegisterOutputType(ArmStreamingEndpointCurrentSkuResponseOutput{})
	pulumi.RegisterOutputType(ArmStreamingEndpointCurrentSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesPtrOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesResponseOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesResponsePtrOutput{})
	pulumi.RegisterOutputType(HlsOutput{})
	pulumi.RegisterOutputType(HlsPtrOutput{})
	pulumi.RegisterOutputType(HlsResponseOutput{})
	pulumi.RegisterOutputType(HlsResponsePtrOutput{})
	pulumi.RegisterOutputType(IPAccessControlOutput{})
	pulumi.RegisterOutputType(IPAccessControlPtrOutput{})
	pulumi.RegisterOutputType(IPAccessControlResponseOutput{})
	pulumi.RegisterOutputType(IPAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(IPRangeOutput{})
	pulumi.RegisterOutputType(IPRangeArrayOutput{})
	pulumi.RegisterOutputType(IPRangeResponseOutput{})
	pulumi.RegisterOutputType(IPRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingPtrOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingResponseOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointArrayOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointResponseOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventIngestInterruptionResponseOutput{})
	pulumi.RegisterOutputType(LiveEventIngestInterruptionResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventIngestionResponseOutput{})
	pulumi.RegisterOutputType(LiveEventIngestionResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputTypeOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlPtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackPtrOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackResponseOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewPtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlPtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlResponseOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewResponseOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventStatusResponseOutput{})
	pulumi.RegisterOutputType(LiveEventStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventStreamEventDataResponseOutput{})
	pulumi.RegisterOutputType(LiveEventStreamEventDataResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventStreamEventResponseOutput{})
	pulumi.RegisterOutputType(LiveEventStreamEventResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventTimedMetadataEndpointOutput{})
	pulumi.RegisterOutputType(LiveEventTimedMetadataEndpointArrayOutput{})
	pulumi.RegisterOutputType(LiveEventTimedMetadataEndpointResponseOutput{})
	pulumi.RegisterOutputType(LiveEventTimedMetadataEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventTrackEventDataResponseOutput{})
	pulumi.RegisterOutputType(LiveEventTrackEventDataResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventTrackEventResponseOutput{})
	pulumi.RegisterOutputType(LiveEventTrackEventResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventTrackStatusResponseOutput{})
	pulumi.RegisterOutputType(LiveEventTrackStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionArrayOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionResponseOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlPtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlResponseOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
