// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the details of a Streaming Policy in the Media Services account
//
// Uses Azure REST API version 2023-01-01.
//
// Other available API versions: 2018-03-30-preview, 2018-06-01-preview, 2018-07-01, 2020-05-01, 2021-06-01, 2021-11-01, 2022-08-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native media [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupStreamingPolicy(ctx *pulumi.Context, args *LookupStreamingPolicyArgs, opts ...pulumi.InvokeOption) (*LookupStreamingPolicyResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamingPolicyResult
	err := ctx.Invoke("azure-native:media:getStreamingPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStreamingPolicyArgs struct {
	// The Media Services account name.
	AccountName string `pulumi:"accountName"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Streaming Policy name.
	StreamingPolicyName string `pulumi:"streamingPolicyName"`
}

// A Streaming Policy resource
type LookupStreamingPolicyResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Configuration of CommonEncryptionCbcs
	CommonEncryptionCbcs *CommonEncryptionCbcsResponse `pulumi:"commonEncryptionCbcs"`
	// Configuration of CommonEncryptionCenc
	CommonEncryptionCenc *CommonEncryptionCencResponse `pulumi:"commonEncryptionCenc"`
	// Creation time of Streaming Policy
	Created string `pulumi:"created"`
	// Default ContentKey used by current Streaming Policy
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// Configuration of EnvelopeEncryption
	EnvelopeEncryption *EnvelopeEncryptionResponse `pulumi:"envelopeEncryption"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Configurations of NoEncryption
	NoEncryption *NoEncryptionResponse `pulumi:"noEncryption"`
	// The system metadata relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupStreamingPolicyOutput(ctx *pulumi.Context, args LookupStreamingPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupStreamingPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamingPolicyResultOutput, error) {
			args := v.(LookupStreamingPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:media:getStreamingPolicy", args, LookupStreamingPolicyResultOutput{}, options).(LookupStreamingPolicyResultOutput), nil
		}).(LookupStreamingPolicyResultOutput)
}

type LookupStreamingPolicyOutputArgs struct {
	// The Media Services account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Streaming Policy name.
	StreamingPolicyName pulumi.StringInput `pulumi:"streamingPolicyName"`
}

func (LookupStreamingPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamingPolicyArgs)(nil)).Elem()
}

// A Streaming Policy resource
type LookupStreamingPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupStreamingPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamingPolicyResult)(nil)).Elem()
}

func (o LookupStreamingPolicyResultOutput) ToLookupStreamingPolicyResultOutput() LookupStreamingPolicyResultOutput {
	return o
}

func (o LookupStreamingPolicyResultOutput) ToLookupStreamingPolicyResultOutputWithContext(ctx context.Context) LookupStreamingPolicyResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupStreamingPolicyResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Configuration of CommonEncryptionCbcs
func (o LookupStreamingPolicyResultOutput) CommonEncryptionCbcs() CommonEncryptionCbcsResponsePtrOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) *CommonEncryptionCbcsResponse { return v.CommonEncryptionCbcs }).(CommonEncryptionCbcsResponsePtrOutput)
}

// Configuration of CommonEncryptionCenc
func (o LookupStreamingPolicyResultOutput) CommonEncryptionCenc() CommonEncryptionCencResponsePtrOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) *CommonEncryptionCencResponse { return v.CommonEncryptionCenc }).(CommonEncryptionCencResponsePtrOutput)
}

// Creation time of Streaming Policy
func (o LookupStreamingPolicyResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) string { return v.Created }).(pulumi.StringOutput)
}

// Default ContentKey used by current Streaming Policy
func (o LookupStreamingPolicyResultOutput) DefaultContentKeyPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) *string { return v.DefaultContentKeyPolicyName }).(pulumi.StringPtrOutput)
}

// Configuration of EnvelopeEncryption
func (o LookupStreamingPolicyResultOutput) EnvelopeEncryption() EnvelopeEncryptionResponsePtrOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) *EnvelopeEncryptionResponse { return v.EnvelopeEncryption }).(EnvelopeEncryptionResponsePtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupStreamingPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupStreamingPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Configurations of NoEncryption
func (o LookupStreamingPolicyResultOutput) NoEncryption() NoEncryptionResponsePtrOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) *NoEncryptionResponse { return v.NoEncryption }).(NoEncryptionResponsePtrOutput)
}

// The system metadata relating to this resource.
func (o LookupStreamingPolicyResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupStreamingPolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamingPolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamingPolicyResultOutput{})
}
