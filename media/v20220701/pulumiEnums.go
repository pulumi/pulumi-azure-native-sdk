// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220701

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The encoding profile to be used when encoding audio with AAC.
type AacAudioProfile string

const (
	// Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC).
	AacAudioProfileAacLc = AacAudioProfile("AacLc")
	// Specifies that the output audio is to be encoded into HE-AAC v1 profile.
	AacAudioProfileHeAacV1 = AacAudioProfile("HeAacV1")
	// Specifies that the output audio is to be encoded into HE-AAC v2 profile.
	AacAudioProfileHeAacV2 = AacAudioProfile("HeAacV2")
)

func (AacAudioProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*AacAudioProfile)(nil)).Elem()
}

func (e AacAudioProfile) ToAacAudioProfileOutput() AacAudioProfileOutput {
	return pulumi.ToOutput(e).(AacAudioProfileOutput)
}

func (e AacAudioProfile) ToAacAudioProfileOutputWithContext(ctx context.Context) AacAudioProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AacAudioProfileOutput)
}

func (e AacAudioProfile) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return e.ToAacAudioProfilePtrOutputWithContext(context.Background())
}

func (e AacAudioProfile) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return AacAudioProfile(e).ToAacAudioProfileOutputWithContext(ctx).ToAacAudioProfilePtrOutputWithContext(ctx)
}

func (e AacAudioProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AacAudioProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AacAudioProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AacAudioProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AacAudioProfileOutput struct{ *pulumi.OutputState }

func (AacAudioProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AacAudioProfile)(nil)).Elem()
}

func (o AacAudioProfileOutput) ToAacAudioProfileOutput() AacAudioProfileOutput {
	return o
}

func (o AacAudioProfileOutput) ToAacAudioProfileOutputWithContext(ctx context.Context) AacAudioProfileOutput {
	return o
}

func (o AacAudioProfileOutput) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return o.ToAacAudioProfilePtrOutputWithContext(context.Background())
}

func (o AacAudioProfileOutput) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AacAudioProfile) *AacAudioProfile {
		return &v
	}).(AacAudioProfilePtrOutput)
}

func (o AacAudioProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AacAudioProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AacAudioProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AacAudioProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AacAudioProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AacAudioProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AacAudioProfilePtrOutput struct{ *pulumi.OutputState }

func (AacAudioProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AacAudioProfile)(nil)).Elem()
}

func (o AacAudioProfilePtrOutput) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return o
}

func (o AacAudioProfilePtrOutput) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return o
}

func (o AacAudioProfilePtrOutput) Elem() AacAudioProfileOutput {
	return o.ApplyT(func(v *AacAudioProfile) AacAudioProfile {
		if v != nil {
			return *v
		}
		var ret AacAudioProfile
		return ret
	}).(AacAudioProfileOutput)
}

func (o AacAudioProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AacAudioProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AacAudioProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AacAudioProfileInput is an input type that accepts values of the AacAudioProfile enum
// A concrete instance of `AacAudioProfileInput` can be one of the following:
//
//	AacAudioProfileAacLc
//	AacAudioProfileHeAacV1
//	AacAudioProfileHeAacV2
type AacAudioProfileInput interface {
	pulumi.Input

	ToAacAudioProfileOutput() AacAudioProfileOutput
	ToAacAudioProfileOutputWithContext(context.Context) AacAudioProfileOutput
}

var aacAudioProfilePtrType = reflect.TypeOf((**AacAudioProfile)(nil)).Elem()

type AacAudioProfilePtrInput interface {
	pulumi.Input

	ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput
	ToAacAudioProfilePtrOutputWithContext(context.Context) AacAudioProfilePtrOutput
}

type aacAudioProfilePtr string

func AacAudioProfilePtr(v string) AacAudioProfilePtrInput {
	return (*aacAudioProfilePtr)(&v)
}

func (*aacAudioProfilePtr) ElementType() reflect.Type {
	return aacAudioProfilePtrType
}

func (in *aacAudioProfilePtr) ToAacAudioProfilePtrOutput() AacAudioProfilePtrOutput {
	return pulumi.ToOutput(in).(AacAudioProfilePtrOutput)
}

func (in *aacAudioProfilePtr) ToAacAudioProfilePtrOutputWithContext(ctx context.Context) AacAudioProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AacAudioProfilePtrOutput)
}

func (in *aacAudioProfilePtr) ToOutput(ctx context.Context) pulumix.Output[*AacAudioProfile] {
	return pulumix.Output[*AacAudioProfile]{
		OutputState: in.ToAacAudioProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
type AnalysisResolution string

const (
	AnalysisResolutionSourceResolution   = AnalysisResolution("SourceResolution")
	AnalysisResolutionStandardDefinition = AnalysisResolution("StandardDefinition")
)

func (AnalysisResolution) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisResolution)(nil)).Elem()
}

func (e AnalysisResolution) ToAnalysisResolutionOutput() AnalysisResolutionOutput {
	return pulumi.ToOutput(e).(AnalysisResolutionOutput)
}

func (e AnalysisResolution) ToAnalysisResolutionOutputWithContext(ctx context.Context) AnalysisResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AnalysisResolutionOutput)
}

func (e AnalysisResolution) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return e.ToAnalysisResolutionPtrOutputWithContext(context.Background())
}

func (e AnalysisResolution) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return AnalysisResolution(e).ToAnalysisResolutionOutputWithContext(ctx).ToAnalysisResolutionPtrOutputWithContext(ctx)
}

func (e AnalysisResolution) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AnalysisResolution) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AnalysisResolution) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AnalysisResolution) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AnalysisResolutionOutput struct{ *pulumi.OutputState }

func (AnalysisResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisResolution)(nil)).Elem()
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionOutput() AnalysisResolutionOutput {
	return o
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionOutputWithContext(ctx context.Context) AnalysisResolutionOutput {
	return o
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return o.ToAnalysisResolutionPtrOutputWithContext(context.Background())
}

func (o AnalysisResolutionOutput) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisResolution) *AnalysisResolution {
		return &v
	}).(AnalysisResolutionPtrOutput)
}

func (o AnalysisResolutionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AnalysisResolutionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnalysisResolution) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AnalysisResolutionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnalysisResolutionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnalysisResolution) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AnalysisResolutionPtrOutput struct{ *pulumi.OutputState }

func (AnalysisResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisResolution)(nil)).Elem()
}

func (o AnalysisResolutionPtrOutput) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return o
}

func (o AnalysisResolutionPtrOutput) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return o
}

func (o AnalysisResolutionPtrOutput) Elem() AnalysisResolutionOutput {
	return o.ApplyT(func(v *AnalysisResolution) AnalysisResolution {
		if v != nil {
			return *v
		}
		var ret AnalysisResolution
		return ret
	}).(AnalysisResolutionOutput)
}

func (o AnalysisResolutionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnalysisResolutionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AnalysisResolution) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AnalysisResolutionInput is an input type that accepts values of the AnalysisResolution enum
// A concrete instance of `AnalysisResolutionInput` can be one of the following:
//
//	AnalysisResolutionSourceResolution
//	AnalysisResolutionStandardDefinition
type AnalysisResolutionInput interface {
	pulumi.Input

	ToAnalysisResolutionOutput() AnalysisResolutionOutput
	ToAnalysisResolutionOutputWithContext(context.Context) AnalysisResolutionOutput
}

var analysisResolutionPtrType = reflect.TypeOf((**AnalysisResolution)(nil)).Elem()

type AnalysisResolutionPtrInput interface {
	pulumi.Input

	ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput
	ToAnalysisResolutionPtrOutputWithContext(context.Context) AnalysisResolutionPtrOutput
}

type analysisResolutionPtr string

func AnalysisResolutionPtr(v string) AnalysisResolutionPtrInput {
	return (*analysisResolutionPtr)(&v)
}

func (*analysisResolutionPtr) ElementType() reflect.Type {
	return analysisResolutionPtrType
}

func (in *analysisResolutionPtr) ToAnalysisResolutionPtrOutput() AnalysisResolutionPtrOutput {
	return pulumi.ToOutput(in).(AnalysisResolutionPtrOutput)
}

func (in *analysisResolutionPtr) ToAnalysisResolutionPtrOutputWithContext(ctx context.Context) AnalysisResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AnalysisResolutionPtrOutput)
}

func (in *analysisResolutionPtr) ToOutput(ctx context.Context) pulumix.Output[*AnalysisResolution] {
	return pulumix.Output[*AnalysisResolution]{
		OutputState: in.ToAnalysisResolutionPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of AttributeFilter to apply to the TrackAttribute in order to select the tracks.
type AttributeFilter string

const (
	// All tracks will be included.
	AttributeFilterAll = AttributeFilter("All")
	// The first track will be included when the attribute is sorted in descending order.  Generally used to select the largest bitrate.
	AttributeFilterTop = AttributeFilter("Top")
	// The first track will be included when the attribute is sorted in ascending order.  Generally used to select the smallest bitrate.
	AttributeFilterBottom = AttributeFilter("Bottom")
	// Any tracks that have an attribute equal to the value given will be included.
	AttributeFilterValueEquals = AttributeFilter("ValueEquals")
)

func (AttributeFilter) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributeFilter)(nil)).Elem()
}

func (e AttributeFilter) ToAttributeFilterOutput() AttributeFilterOutput {
	return pulumi.ToOutput(e).(AttributeFilterOutput)
}

func (e AttributeFilter) ToAttributeFilterOutputWithContext(ctx context.Context) AttributeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AttributeFilterOutput)
}

func (e AttributeFilter) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return e.ToAttributeFilterPtrOutputWithContext(context.Background())
}

func (e AttributeFilter) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return AttributeFilter(e).ToAttributeFilterOutputWithContext(ctx).ToAttributeFilterPtrOutputWithContext(ctx)
}

func (e AttributeFilter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttributeFilter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttributeFilter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttributeFilter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AttributeFilterOutput struct{ *pulumi.OutputState }

func (AttributeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributeFilter)(nil)).Elem()
}

func (o AttributeFilterOutput) ToAttributeFilterOutput() AttributeFilterOutput {
	return o
}

func (o AttributeFilterOutput) ToAttributeFilterOutputWithContext(ctx context.Context) AttributeFilterOutput {
	return o
}

func (o AttributeFilterOutput) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return o.ToAttributeFilterPtrOutputWithContext(context.Background())
}

func (o AttributeFilterOutput) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttributeFilter) *AttributeFilter {
		return &v
	}).(AttributeFilterPtrOutput)
}

func (o AttributeFilterOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AttributeFilterOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttributeFilter) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AttributeFilterOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttributeFilterOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttributeFilter) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AttributeFilterPtrOutput struct{ *pulumi.OutputState }

func (AttributeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttributeFilter)(nil)).Elem()
}

func (o AttributeFilterPtrOutput) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return o
}

func (o AttributeFilterPtrOutput) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return o
}

func (o AttributeFilterPtrOutput) Elem() AttributeFilterOutput {
	return o.ApplyT(func(v *AttributeFilter) AttributeFilter {
		if v != nil {
			return *v
		}
		var ret AttributeFilter
		return ret
	}).(AttributeFilterOutput)
}

func (o AttributeFilterPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttributeFilterPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AttributeFilter) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AttributeFilterInput is an input type that accepts values of the AttributeFilter enum
// A concrete instance of `AttributeFilterInput` can be one of the following:
//
//	AttributeFilterAll
//	AttributeFilterTop
//	AttributeFilterBottom
//	AttributeFilterValueEquals
type AttributeFilterInput interface {
	pulumi.Input

	ToAttributeFilterOutput() AttributeFilterOutput
	ToAttributeFilterOutputWithContext(context.Context) AttributeFilterOutput
}

var attributeFilterPtrType = reflect.TypeOf((**AttributeFilter)(nil)).Elem()

type AttributeFilterPtrInput interface {
	pulumi.Input

	ToAttributeFilterPtrOutput() AttributeFilterPtrOutput
	ToAttributeFilterPtrOutputWithContext(context.Context) AttributeFilterPtrOutput
}

type attributeFilterPtr string

func AttributeFilterPtr(v string) AttributeFilterPtrInput {
	return (*attributeFilterPtr)(&v)
}

func (*attributeFilterPtr) ElementType() reflect.Type {
	return attributeFilterPtrType
}

func (in *attributeFilterPtr) ToAttributeFilterPtrOutput() AttributeFilterPtrOutput {
	return pulumi.ToOutput(in).(AttributeFilterPtrOutput)
}

func (in *attributeFilterPtr) ToAttributeFilterPtrOutputWithContext(ctx context.Context) AttributeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AttributeFilterPtrOutput)
}

func (in *attributeFilterPtr) ToOutput(ctx context.Context) pulumix.Output[*AttributeFilter] {
	return pulumix.Output[*AttributeFilter]{
		OutputState: in.ToAttributeFilterPtrOutputWithContext(ctx).OutputState,
	}
}

// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
type AudioAnalysisMode string

const (
	// Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization.
	AudioAnalysisModeStandard = AudioAnalysisMode("Standard")
	// This mode performs speech-to-text transcription and generation of a VTT subtitle/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode.
	AudioAnalysisModeBasic = AudioAnalysisMode("Basic")
)

func (AudioAnalysisMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalysisMode)(nil)).Elem()
}

func (e AudioAnalysisMode) ToAudioAnalysisModeOutput() AudioAnalysisModeOutput {
	return pulumi.ToOutput(e).(AudioAnalysisModeOutput)
}

func (e AudioAnalysisMode) ToAudioAnalysisModeOutputWithContext(ctx context.Context) AudioAnalysisModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AudioAnalysisModeOutput)
}

func (e AudioAnalysisMode) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return e.ToAudioAnalysisModePtrOutputWithContext(context.Background())
}

func (e AudioAnalysisMode) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return AudioAnalysisMode(e).ToAudioAnalysisModeOutputWithContext(ctx).ToAudioAnalysisModePtrOutputWithContext(ctx)
}

func (e AudioAnalysisMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AudioAnalysisMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AudioAnalysisMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AudioAnalysisMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AudioAnalysisModeOutput struct{ *pulumi.OutputState }

func (AudioAnalysisModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalysisMode)(nil)).Elem()
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModeOutput() AudioAnalysisModeOutput {
	return o
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModeOutputWithContext(ctx context.Context) AudioAnalysisModeOutput {
	return o
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return o.ToAudioAnalysisModePtrOutputWithContext(context.Background())
}

func (o AudioAnalysisModeOutput) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AudioAnalysisMode) *AudioAnalysisMode {
		return &v
	}).(AudioAnalysisModePtrOutput)
}

func (o AudioAnalysisModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AudioAnalysisModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AudioAnalysisMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AudioAnalysisModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AudioAnalysisModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AudioAnalysisMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AudioAnalysisModePtrOutput struct{ *pulumi.OutputState }

func (AudioAnalysisModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AudioAnalysisMode)(nil)).Elem()
}

func (o AudioAnalysisModePtrOutput) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return o
}

func (o AudioAnalysisModePtrOutput) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return o
}

func (o AudioAnalysisModePtrOutput) Elem() AudioAnalysisModeOutput {
	return o.ApplyT(func(v *AudioAnalysisMode) AudioAnalysisMode {
		if v != nil {
			return *v
		}
		var ret AudioAnalysisMode
		return ret
	}).(AudioAnalysisModeOutput)
}

func (o AudioAnalysisModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AudioAnalysisModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AudioAnalysisMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AudioAnalysisModeInput is an input type that accepts values of the AudioAnalysisMode enum
// A concrete instance of `AudioAnalysisModeInput` can be one of the following:
//
//	AudioAnalysisModeStandard
//	AudioAnalysisModeBasic
type AudioAnalysisModeInput interface {
	pulumi.Input

	ToAudioAnalysisModeOutput() AudioAnalysisModeOutput
	ToAudioAnalysisModeOutputWithContext(context.Context) AudioAnalysisModeOutput
}

var audioAnalysisModePtrType = reflect.TypeOf((**AudioAnalysisMode)(nil)).Elem()

type AudioAnalysisModePtrInput interface {
	pulumi.Input

	ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput
	ToAudioAnalysisModePtrOutputWithContext(context.Context) AudioAnalysisModePtrOutput
}

type audioAnalysisModePtr string

func AudioAnalysisModePtr(v string) AudioAnalysisModePtrInput {
	return (*audioAnalysisModePtr)(&v)
}

func (*audioAnalysisModePtr) ElementType() reflect.Type {
	return audioAnalysisModePtrType
}

func (in *audioAnalysisModePtr) ToAudioAnalysisModePtrOutput() AudioAnalysisModePtrOutput {
	return pulumi.ToOutput(in).(AudioAnalysisModePtrOutput)
}

func (in *audioAnalysisModePtr) ToAudioAnalysisModePtrOutputWithContext(ctx context.Context) AudioAnalysisModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AudioAnalysisModePtrOutput)
}

func (in *audioAnalysisModePtr) ToOutput(ctx context.Context) pulumix.Output[*AudioAnalysisMode] {
	return pulumix.Output[*AudioAnalysisMode]{
		OutputState: in.ToAudioAnalysisModePtrOutputWithContext(ctx).OutputState,
	}
}

// Blur type
type BlurType string

const (
	// Box: debug filter, bounding box only
	BlurTypeBox = BlurType("Box")
	// Low: box-car blur filter
	BlurTypeLow = BlurType("Low")
	// Med: Gaussian blur filter
	BlurTypeMed = BlurType("Med")
	// High: Confuse blur filter
	BlurTypeHigh = BlurType("High")
	// Black: Black out filter
	BlurTypeBlack = BlurType("Black")
)

func (BlurType) ElementType() reflect.Type {
	return reflect.TypeOf((*BlurType)(nil)).Elem()
}

func (e BlurType) ToBlurTypeOutput() BlurTypeOutput {
	return pulumi.ToOutput(e).(BlurTypeOutput)
}

func (e BlurType) ToBlurTypeOutputWithContext(ctx context.Context) BlurTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BlurTypeOutput)
}

func (e BlurType) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return e.ToBlurTypePtrOutputWithContext(context.Background())
}

func (e BlurType) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return BlurType(e).ToBlurTypeOutputWithContext(ctx).ToBlurTypePtrOutputWithContext(ctx)
}

func (e BlurType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlurType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlurType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BlurType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BlurTypeOutput struct{ *pulumi.OutputState }

func (BlurTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlurType)(nil)).Elem()
}

func (o BlurTypeOutput) ToBlurTypeOutput() BlurTypeOutput {
	return o
}

func (o BlurTypeOutput) ToBlurTypeOutputWithContext(ctx context.Context) BlurTypeOutput {
	return o
}

func (o BlurTypeOutput) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return o.ToBlurTypePtrOutputWithContext(context.Background())
}

func (o BlurTypeOutput) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlurType) *BlurType {
		return &v
	}).(BlurTypePtrOutput)
}

func (o BlurTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BlurTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlurType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BlurTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlurTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlurType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BlurTypePtrOutput struct{ *pulumi.OutputState }

func (BlurTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlurType)(nil)).Elem()
}

func (o BlurTypePtrOutput) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return o
}

func (o BlurTypePtrOutput) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return o
}

func (o BlurTypePtrOutput) Elem() BlurTypeOutput {
	return o.ApplyT(func(v *BlurType) BlurType {
		if v != nil {
			return *v
		}
		var ret BlurType
		return ret
	}).(BlurTypeOutput)
}

func (o BlurTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlurTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BlurType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BlurTypeInput is an input type that accepts values of the BlurType enum
// A concrete instance of `BlurTypeInput` can be one of the following:
//
//	BlurTypeBox
//	BlurTypeLow
//	BlurTypeMed
//	BlurTypeHigh
//	BlurTypeBlack
type BlurTypeInput interface {
	pulumi.Input

	ToBlurTypeOutput() BlurTypeOutput
	ToBlurTypeOutputWithContext(context.Context) BlurTypeOutput
}

var blurTypePtrType = reflect.TypeOf((**BlurType)(nil)).Elem()

type BlurTypePtrInput interface {
	pulumi.Input

	ToBlurTypePtrOutput() BlurTypePtrOutput
	ToBlurTypePtrOutputWithContext(context.Context) BlurTypePtrOutput
}

type blurTypePtr string

func BlurTypePtr(v string) BlurTypePtrInput {
	return (*blurTypePtr)(&v)
}

func (*blurTypePtr) ElementType() reflect.Type {
	return blurTypePtrType
}

func (in *blurTypePtr) ToBlurTypePtrOutput() BlurTypePtrOutput {
	return pulumi.ToOutput(in).(BlurTypePtrOutput)
}

func (in *blurTypePtr) ToBlurTypePtrOutputWithContext(ctx context.Context) BlurTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BlurTypePtrOutput)
}

func (in *blurTypePtr) ToOutput(ctx context.Context) pulumix.Output[*BlurType] {
	return pulumix.Output[*BlurType]{
		OutputState: in.ToBlurTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
type ChannelMapping string

const (
	// The Front Left Channel.
	ChannelMappingFrontLeft = ChannelMapping("FrontLeft")
	// The Front Right Channel.
	ChannelMappingFrontRight = ChannelMapping("FrontRight")
	// The Center Channel.
	ChannelMappingCenter = ChannelMapping("Center")
	// Low Frequency Effects Channel.  Sometimes referred to as the subwoofer.
	ChannelMappingLowFrequencyEffects = ChannelMapping("LowFrequencyEffects")
	// The Back Left Channel.  Sometimes referred to as the Left Surround Channel.
	ChannelMappingBackLeft = ChannelMapping("BackLeft")
	// The Back Right Channel.  Sometimes referred to as the Right Surround Channel.
	ChannelMappingBackRight = ChannelMapping("BackRight")
	// The Left Stereo channel.  Sometimes referred to as Down Mix Left.
	ChannelMappingStereoLeft = ChannelMapping("StereoLeft")
	// The Right Stereo channel.  Sometimes referred to as Down Mix Right.
	ChannelMappingStereoRight = ChannelMapping("StereoRight")
)

func (ChannelMapping) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMapping)(nil)).Elem()
}

func (e ChannelMapping) ToChannelMappingOutput() ChannelMappingOutput {
	return pulumi.ToOutput(e).(ChannelMappingOutput)
}

func (e ChannelMapping) ToChannelMappingOutputWithContext(ctx context.Context) ChannelMappingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ChannelMappingOutput)
}

func (e ChannelMapping) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return e.ToChannelMappingPtrOutputWithContext(context.Background())
}

func (e ChannelMapping) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return ChannelMapping(e).ToChannelMappingOutputWithContext(ctx).ToChannelMappingPtrOutputWithContext(ctx)
}

func (e ChannelMapping) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChannelMapping) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChannelMapping) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChannelMapping) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ChannelMappingOutput struct{ *pulumi.OutputState }

func (ChannelMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMapping)(nil)).Elem()
}

func (o ChannelMappingOutput) ToChannelMappingOutput() ChannelMappingOutput {
	return o
}

func (o ChannelMappingOutput) ToChannelMappingOutputWithContext(ctx context.Context) ChannelMappingOutput {
	return o
}

func (o ChannelMappingOutput) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return o.ToChannelMappingPtrOutputWithContext(context.Background())
}

func (o ChannelMappingOutput) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelMapping) *ChannelMapping {
		return &v
	}).(ChannelMappingPtrOutput)
}

func (o ChannelMappingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ChannelMappingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChannelMapping) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ChannelMappingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChannelMappingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChannelMapping) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ChannelMappingPtrOutput struct{ *pulumi.OutputState }

func (ChannelMappingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelMapping)(nil)).Elem()
}

func (o ChannelMappingPtrOutput) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return o
}

func (o ChannelMappingPtrOutput) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return o
}

func (o ChannelMappingPtrOutput) Elem() ChannelMappingOutput {
	return o.ApplyT(func(v *ChannelMapping) ChannelMapping {
		if v != nil {
			return *v
		}
		var ret ChannelMapping
		return ret
	}).(ChannelMappingOutput)
}

func (o ChannelMappingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChannelMappingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ChannelMapping) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ChannelMappingInput is an input type that accepts values of the ChannelMapping enum
// A concrete instance of `ChannelMappingInput` can be one of the following:
//
//	ChannelMappingFrontLeft
//	ChannelMappingFrontRight
//	ChannelMappingCenter
//	ChannelMappingLowFrequencyEffects
//	ChannelMappingBackLeft
//	ChannelMappingBackRight
//	ChannelMappingStereoLeft
//	ChannelMappingStereoRight
type ChannelMappingInput interface {
	pulumi.Input

	ToChannelMappingOutput() ChannelMappingOutput
	ToChannelMappingOutputWithContext(context.Context) ChannelMappingOutput
}

var channelMappingPtrType = reflect.TypeOf((**ChannelMapping)(nil)).Elem()

type ChannelMappingPtrInput interface {
	pulumi.Input

	ToChannelMappingPtrOutput() ChannelMappingPtrOutput
	ToChannelMappingPtrOutputWithContext(context.Context) ChannelMappingPtrOutput
}

type channelMappingPtr string

func ChannelMappingPtr(v string) ChannelMappingPtrInput {
	return (*channelMappingPtr)(&v)
}

func (*channelMappingPtr) ElementType() reflect.Type {
	return channelMappingPtrType
}

func (in *channelMappingPtr) ToChannelMappingPtrOutput() ChannelMappingPtrOutput {
	return pulumi.ToOutput(in).(ChannelMappingPtrOutput)
}

func (in *channelMappingPtr) ToChannelMappingPtrOutputWithContext(ctx context.Context) ChannelMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ChannelMappingPtrOutput)
}

func (in *channelMappingPtr) ToOutput(ctx context.Context) pulumix.Output[*ChannelMapping] {
	return pulumix.Output[*ChannelMapping]{
		OutputState: in.ToChannelMappingPtrOutputWithContext(ctx).OutputState,
	}
}

// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity as Speed for faster encoding but less compression efficiency.
type Complexity string

const (
	// Configures the encoder to use settings optimized for faster encoding. Quality is sacrificed to decrease encoding time.
	ComplexitySpeed = Complexity("Speed")
	// Configures the encoder to use settings that achieve a balance between speed and quality.
	ComplexityBalanced = Complexity("Balanced")
	// Configures the encoder to use settings optimized to produce higher quality output at the expense of slower overall encode time.
	ComplexityQuality = Complexity("Quality")
)

func (Complexity) ElementType() reflect.Type {
	return reflect.TypeOf((*Complexity)(nil)).Elem()
}

func (e Complexity) ToComplexityOutput() ComplexityOutput {
	return pulumi.ToOutput(e).(ComplexityOutput)
}

func (e Complexity) ToComplexityOutputWithContext(ctx context.Context) ComplexityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ComplexityOutput)
}

func (e Complexity) ToComplexityPtrOutput() ComplexityPtrOutput {
	return e.ToComplexityPtrOutputWithContext(context.Background())
}

func (e Complexity) ToComplexityPtrOutputWithContext(ctx context.Context) ComplexityPtrOutput {
	return Complexity(e).ToComplexityOutputWithContext(ctx).ToComplexityPtrOutputWithContext(ctx)
}

func (e Complexity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Complexity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Complexity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Complexity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ComplexityOutput struct{ *pulumi.OutputState }

func (ComplexityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Complexity)(nil)).Elem()
}

func (o ComplexityOutput) ToComplexityOutput() ComplexityOutput {
	return o
}

func (o ComplexityOutput) ToComplexityOutputWithContext(ctx context.Context) ComplexityOutput {
	return o
}

func (o ComplexityOutput) ToComplexityPtrOutput() ComplexityPtrOutput {
	return o.ToComplexityPtrOutputWithContext(context.Background())
}

func (o ComplexityOutput) ToComplexityPtrOutputWithContext(ctx context.Context) ComplexityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Complexity) *Complexity {
		return &v
	}).(ComplexityPtrOutput)
}

func (o ComplexityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ComplexityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Complexity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ComplexityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComplexityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Complexity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ComplexityPtrOutput struct{ *pulumi.OutputState }

func (ComplexityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Complexity)(nil)).Elem()
}

func (o ComplexityPtrOutput) ToComplexityPtrOutput() ComplexityPtrOutput {
	return o
}

func (o ComplexityPtrOutput) ToComplexityPtrOutputWithContext(ctx context.Context) ComplexityPtrOutput {
	return o
}

func (o ComplexityPtrOutput) Elem() ComplexityOutput {
	return o.ApplyT(func(v *Complexity) Complexity {
		if v != nil {
			return *v
		}
		var ret Complexity
		return ret
	}).(ComplexityOutput)
}

func (o ComplexityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComplexityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Complexity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ComplexityInput is an input type that accepts values of the Complexity enum
// A concrete instance of `ComplexityInput` can be one of the following:
//
//	ComplexitySpeed
//	ComplexityBalanced
//	ComplexityQuality
type ComplexityInput interface {
	pulumi.Input

	ToComplexityOutput() ComplexityOutput
	ToComplexityOutputWithContext(context.Context) ComplexityOutput
}

var complexityPtrType = reflect.TypeOf((**Complexity)(nil)).Elem()

type ComplexityPtrInput interface {
	pulumi.Input

	ToComplexityPtrOutput() ComplexityPtrOutput
	ToComplexityPtrOutputWithContext(context.Context) ComplexityPtrOutput
}

type complexityPtr string

func ComplexityPtr(v string) ComplexityPtrInput {
	return (*complexityPtr)(&v)
}

func (*complexityPtr) ElementType() reflect.Type {
	return complexityPtrType
}

func (in *complexityPtr) ToComplexityPtrOutput() ComplexityPtrOutput {
	return pulumi.ToOutput(in).(ComplexityPtrOutput)
}

func (in *complexityPtr) ToComplexityPtrOutputWithContext(ctx context.Context) ComplexityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ComplexityPtrOutput)
}

func (in *complexityPtr) ToOutput(ctx context.Context) pulumix.Output[*Complexity] {
	return pulumix.Output[*Complexity]{
		OutputState: in.ToComplexityPtrOutputWithContext(ctx).OutputState,
	}
}

// The deinterlacing mode. Defaults to AutoPixelAdaptive.
type DeinterlaceMode string

const (
	// Disables de-interlacing of the source video.
	DeinterlaceModeOff = DeinterlaceMode("Off")
	// Apply automatic pixel adaptive de-interlacing on each frame in the input video.
	DeinterlaceModeAutoPixelAdaptive = DeinterlaceMode("AutoPixelAdaptive")
)

func (DeinterlaceMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceMode)(nil)).Elem()
}

func (e DeinterlaceMode) ToDeinterlaceModeOutput() DeinterlaceModeOutput {
	return pulumi.ToOutput(e).(DeinterlaceModeOutput)
}

func (e DeinterlaceMode) ToDeinterlaceModeOutputWithContext(ctx context.Context) DeinterlaceModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeinterlaceModeOutput)
}

func (e DeinterlaceMode) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return e.ToDeinterlaceModePtrOutputWithContext(context.Background())
}

func (e DeinterlaceMode) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return DeinterlaceMode(e).ToDeinterlaceModeOutputWithContext(ctx).ToDeinterlaceModePtrOutputWithContext(ctx)
}

func (e DeinterlaceMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeinterlaceMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeinterlaceModeOutput struct{ *pulumi.OutputState }

func (DeinterlaceModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceMode)(nil)).Elem()
}

func (o DeinterlaceModeOutput) ToDeinterlaceModeOutput() DeinterlaceModeOutput {
	return o
}

func (o DeinterlaceModeOutput) ToDeinterlaceModeOutputWithContext(ctx context.Context) DeinterlaceModeOutput {
	return o
}

func (o DeinterlaceModeOutput) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return o.ToDeinterlaceModePtrOutputWithContext(context.Background())
}

func (o DeinterlaceModeOutput) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeinterlaceMode) *DeinterlaceMode {
		return &v
	}).(DeinterlaceModePtrOutput)
}

func (o DeinterlaceModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeinterlaceModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeinterlaceModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeinterlaceModePtrOutput struct{ *pulumi.OutputState }

func (DeinterlaceModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeinterlaceMode)(nil)).Elem()
}

func (o DeinterlaceModePtrOutput) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return o
}

func (o DeinterlaceModePtrOutput) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return o
}

func (o DeinterlaceModePtrOutput) Elem() DeinterlaceModeOutput {
	return o.ApplyT(func(v *DeinterlaceMode) DeinterlaceMode {
		if v != nil {
			return *v
		}
		var ret DeinterlaceMode
		return ret
	}).(DeinterlaceModeOutput)
}

func (o DeinterlaceModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeinterlaceMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DeinterlaceModeInput is an input type that accepts values of the DeinterlaceMode enum
// A concrete instance of `DeinterlaceModeInput` can be one of the following:
//
//	DeinterlaceModeOff
//	DeinterlaceModeAutoPixelAdaptive
type DeinterlaceModeInput interface {
	pulumi.Input

	ToDeinterlaceModeOutput() DeinterlaceModeOutput
	ToDeinterlaceModeOutputWithContext(context.Context) DeinterlaceModeOutput
}

var deinterlaceModePtrType = reflect.TypeOf((**DeinterlaceMode)(nil)).Elem()

type DeinterlaceModePtrInput interface {
	pulumi.Input

	ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput
	ToDeinterlaceModePtrOutputWithContext(context.Context) DeinterlaceModePtrOutput
}

type deinterlaceModePtr string

func DeinterlaceModePtr(v string) DeinterlaceModePtrInput {
	return (*deinterlaceModePtr)(&v)
}

func (*deinterlaceModePtr) ElementType() reflect.Type {
	return deinterlaceModePtrType
}

func (in *deinterlaceModePtr) ToDeinterlaceModePtrOutput() DeinterlaceModePtrOutput {
	return pulumi.ToOutput(in).(DeinterlaceModePtrOutput)
}

func (in *deinterlaceModePtr) ToDeinterlaceModePtrOutputWithContext(ctx context.Context) DeinterlaceModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeinterlaceModePtrOutput)
}

func (in *deinterlaceModePtr) ToOutput(ctx context.Context) pulumix.Output[*DeinterlaceMode] {
	return pulumix.Output[*DeinterlaceMode]{
		OutputState: in.ToDeinterlaceModePtrOutputWithContext(ctx).OutputState,
	}
}

// The field parity for de-interlacing, defaults to Auto.
type DeinterlaceParity string

const (
	// Automatically detect the order of fields
	DeinterlaceParityAuto = DeinterlaceParity("Auto")
	// Apply top field first processing of input video.
	DeinterlaceParityTopFieldFirst = DeinterlaceParity("TopFieldFirst")
	// Apply bottom field first processing of input video.
	DeinterlaceParityBottomFieldFirst = DeinterlaceParity("BottomFieldFirst")
)

func (DeinterlaceParity) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceParity)(nil)).Elem()
}

func (e DeinterlaceParity) ToDeinterlaceParityOutput() DeinterlaceParityOutput {
	return pulumi.ToOutput(e).(DeinterlaceParityOutput)
}

func (e DeinterlaceParity) ToDeinterlaceParityOutputWithContext(ctx context.Context) DeinterlaceParityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeinterlaceParityOutput)
}

func (e DeinterlaceParity) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return e.ToDeinterlaceParityPtrOutputWithContext(context.Background())
}

func (e DeinterlaceParity) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return DeinterlaceParity(e).ToDeinterlaceParityOutputWithContext(ctx).ToDeinterlaceParityPtrOutputWithContext(ctx)
}

func (e DeinterlaceParity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceParity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeinterlaceParity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeinterlaceParity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeinterlaceParityOutput struct{ *pulumi.OutputState }

func (DeinterlaceParityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceParity)(nil)).Elem()
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityOutput() DeinterlaceParityOutput {
	return o
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityOutputWithContext(ctx context.Context) DeinterlaceParityOutput {
	return o
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return o.ToDeinterlaceParityPtrOutputWithContext(context.Background())
}

func (o DeinterlaceParityOutput) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeinterlaceParity) *DeinterlaceParity {
		return &v
	}).(DeinterlaceParityPtrOutput)
}

func (o DeinterlaceParityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeinterlaceParityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceParity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeinterlaceParityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceParityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeinterlaceParity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeinterlaceParityPtrOutput struct{ *pulumi.OutputState }

func (DeinterlaceParityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeinterlaceParity)(nil)).Elem()
}

func (o DeinterlaceParityPtrOutput) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return o
}

func (o DeinterlaceParityPtrOutput) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return o
}

func (o DeinterlaceParityPtrOutput) Elem() DeinterlaceParityOutput {
	return o.ApplyT(func(v *DeinterlaceParity) DeinterlaceParity {
		if v != nil {
			return *v
		}
		var ret DeinterlaceParity
		return ret
	}).(DeinterlaceParityOutput)
}

func (o DeinterlaceParityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeinterlaceParityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeinterlaceParity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DeinterlaceParityInput is an input type that accepts values of the DeinterlaceParity enum
// A concrete instance of `DeinterlaceParityInput` can be one of the following:
//
//	DeinterlaceParityAuto
//	DeinterlaceParityTopFieldFirst
//	DeinterlaceParityBottomFieldFirst
type DeinterlaceParityInput interface {
	pulumi.Input

	ToDeinterlaceParityOutput() DeinterlaceParityOutput
	ToDeinterlaceParityOutputWithContext(context.Context) DeinterlaceParityOutput
}

var deinterlaceParityPtrType = reflect.TypeOf((**DeinterlaceParity)(nil)).Elem()

type DeinterlaceParityPtrInput interface {
	pulumi.Input

	ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput
	ToDeinterlaceParityPtrOutputWithContext(context.Context) DeinterlaceParityPtrOutput
}

type deinterlaceParityPtr string

func DeinterlaceParityPtr(v string) DeinterlaceParityPtrInput {
	return (*deinterlaceParityPtr)(&v)
}

func (*deinterlaceParityPtr) ElementType() reflect.Type {
	return deinterlaceParityPtrType
}

func (in *deinterlaceParityPtr) ToDeinterlaceParityPtrOutput() DeinterlaceParityPtrOutput {
	return pulumi.ToOutput(in).(DeinterlaceParityPtrOutput)
}

func (in *deinterlaceParityPtr) ToDeinterlaceParityPtrOutputWithContext(ctx context.Context) DeinterlaceParityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeinterlaceParityPtrOutput)
}

func (in *deinterlaceParityPtr) ToOutput(ctx context.Context) pulumix.Output[*DeinterlaceParity] {
	return pulumix.Output[*DeinterlaceParity]{
		OutputState: in.ToDeinterlaceParityPtrOutputWithContext(ctx).OutputState,
	}
}

// The built-in preset to be used for encoding videos.
type EncoderNamedPreset string

const (
	// Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH264SingleBitrateSD = EncoderNamedPreset("H264SingleBitrateSD")
	// Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH264SingleBitrate720p = EncoderNamedPreset("H264SingleBitrate720p")
	// Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH264SingleBitrate1080p = EncoderNamedPreset("H264SingleBitrate1080p")
	// Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best.
	EncoderNamedPresetAdaptiveStreaming = EncoderNamedPreset("AdaptiveStreaming")
	// Produces a single MP4 file containing only AAC stereo audio encoded at 192 kbps.
	EncoderNamedPresetAACGoodQualityAudio = EncoderNamedPreset("AACGoodQualityAudio")
	// Produces a single MP4 file containing only DD(Digital Dolby) stereo audio encoded at 192 kbps.
	EncoderNamedPresetDDGoodQualityAudio = EncoderNamedPreset("DDGoodQualityAudio")
	// Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved.
	EncoderNamedPresetContentAwareEncodingExperimental = EncoderNamedPreset("ContentAwareEncodingExperimental")
	// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved.
	EncoderNamedPresetContentAwareEncoding = EncoderNamedPreset("ContentAwareEncoding")
	// Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed.
	EncoderNamedPresetCopyAllBitrateNonInterleaved = EncoderNamedPreset("CopyAllBitrateNonInterleaved")
	// Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p.
	EncoderNamedPresetH264MultipleBitrate1080p = EncoderNamedPreset("H264MultipleBitrate1080p")
	// Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p.
	EncoderNamedPresetH264MultipleBitrate720p = EncoderNamedPreset("H264MultipleBitrate720p")
	// Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p.
	EncoderNamedPresetH264MultipleBitrateSD = EncoderNamedPreset("H264MultipleBitrateSD")
	// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved.
	EncoderNamedPresetH265ContentAwareEncoding = EncoderNamedPreset("H265ContentAwareEncoding")
	// Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best.
	EncoderNamedPresetH265AdaptiveStreaming = EncoderNamedPreset("H265AdaptiveStreaming")
	// Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH265SingleBitrate720p = EncoderNamedPreset("H265SingleBitrate720p")
	// Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH265SingleBitrate1080p = EncoderNamedPreset("H265SingleBitrate1080p")
	// Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
	EncoderNamedPresetH265SingleBitrate4K = EncoderNamedPreset("H265SingleBitrate4K")
)

func (EncoderNamedPreset) ElementType() reflect.Type {
	return reflect.TypeOf((*EncoderNamedPreset)(nil)).Elem()
}

func (e EncoderNamedPreset) ToEncoderNamedPresetOutput() EncoderNamedPresetOutput {
	return pulumi.ToOutput(e).(EncoderNamedPresetOutput)
}

func (e EncoderNamedPreset) ToEncoderNamedPresetOutputWithContext(ctx context.Context) EncoderNamedPresetOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EncoderNamedPresetOutput)
}

func (e EncoderNamedPreset) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return e.ToEncoderNamedPresetPtrOutputWithContext(context.Background())
}

func (e EncoderNamedPreset) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return EncoderNamedPreset(e).ToEncoderNamedPresetOutputWithContext(ctx).ToEncoderNamedPresetPtrOutputWithContext(ctx)
}

func (e EncoderNamedPreset) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EncoderNamedPreset) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EncoderNamedPreset) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EncoderNamedPreset) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EncoderNamedPresetOutput struct{ *pulumi.OutputState }

func (EncoderNamedPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncoderNamedPreset)(nil)).Elem()
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetOutput() EncoderNamedPresetOutput {
	return o
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetOutputWithContext(ctx context.Context) EncoderNamedPresetOutput {
	return o
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return o.ToEncoderNamedPresetPtrOutputWithContext(context.Background())
}

func (o EncoderNamedPresetOutput) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncoderNamedPreset) *EncoderNamedPreset {
		return &v
	}).(EncoderNamedPresetPtrOutput)
}

func (o EncoderNamedPresetOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EncoderNamedPresetOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EncoderNamedPreset) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EncoderNamedPresetOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncoderNamedPresetOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EncoderNamedPreset) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EncoderNamedPresetPtrOutput struct{ *pulumi.OutputState }

func (EncoderNamedPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncoderNamedPreset)(nil)).Elem()
}

func (o EncoderNamedPresetPtrOutput) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return o
}

func (o EncoderNamedPresetPtrOutput) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return o
}

func (o EncoderNamedPresetPtrOutput) Elem() EncoderNamedPresetOutput {
	return o.ApplyT(func(v *EncoderNamedPreset) EncoderNamedPreset {
		if v != nil {
			return *v
		}
		var ret EncoderNamedPreset
		return ret
	}).(EncoderNamedPresetOutput)
}

func (o EncoderNamedPresetPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncoderNamedPresetPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EncoderNamedPreset) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EncoderNamedPresetInput is an input type that accepts values of the EncoderNamedPreset enum
// A concrete instance of `EncoderNamedPresetInput` can be one of the following:
//
//	EncoderNamedPresetH264SingleBitrateSD
//	EncoderNamedPresetH264SingleBitrate720p
//	EncoderNamedPresetH264SingleBitrate1080p
//	EncoderNamedPresetAdaptiveStreaming
//	EncoderNamedPresetAACGoodQualityAudio
//	EncoderNamedPresetDDGoodQualityAudio
//	EncoderNamedPresetContentAwareEncodingExperimental
//	EncoderNamedPresetContentAwareEncoding
//	EncoderNamedPresetCopyAllBitrateNonInterleaved
//	EncoderNamedPresetH264MultipleBitrate1080p
//	EncoderNamedPresetH264MultipleBitrate720p
//	EncoderNamedPresetH264MultipleBitrateSD
//	EncoderNamedPresetH265ContentAwareEncoding
//	EncoderNamedPresetH265AdaptiveStreaming
//	EncoderNamedPresetH265SingleBitrate720p
//	EncoderNamedPresetH265SingleBitrate1080p
//	EncoderNamedPresetH265SingleBitrate4K
type EncoderNamedPresetInput interface {
	pulumi.Input

	ToEncoderNamedPresetOutput() EncoderNamedPresetOutput
	ToEncoderNamedPresetOutputWithContext(context.Context) EncoderNamedPresetOutput
}

var encoderNamedPresetPtrType = reflect.TypeOf((**EncoderNamedPreset)(nil)).Elem()

type EncoderNamedPresetPtrInput interface {
	pulumi.Input

	ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput
	ToEncoderNamedPresetPtrOutputWithContext(context.Context) EncoderNamedPresetPtrOutput
}

type encoderNamedPresetPtr string

func EncoderNamedPresetPtr(v string) EncoderNamedPresetPtrInput {
	return (*encoderNamedPresetPtr)(&v)
}

func (*encoderNamedPresetPtr) ElementType() reflect.Type {
	return encoderNamedPresetPtrType
}

func (in *encoderNamedPresetPtr) ToEncoderNamedPresetPtrOutput() EncoderNamedPresetPtrOutput {
	return pulumi.ToOutput(in).(EncoderNamedPresetPtrOutput)
}

func (in *encoderNamedPresetPtr) ToEncoderNamedPresetPtrOutputWithContext(ctx context.Context) EncoderNamedPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EncoderNamedPresetPtrOutput)
}

func (in *encoderNamedPresetPtr) ToOutput(ctx context.Context) pulumix.Output[*EncoderNamedPreset] {
	return pulumix.Output[*EncoderNamedPreset]{
		OutputState: in.ToEncoderNamedPresetPtrOutputWithContext(ctx).OutputState,
	}
}

// The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
type EntropyMode string

const (
	// Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding.
	EntropyModeCabac = EntropyMode("Cabac")
	// Context Adaptive Variable Length Coder (CAVLC) entropy encoding.
	EntropyModeCavlc = EntropyMode("Cavlc")
)

func (EntropyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*EntropyMode)(nil)).Elem()
}

func (e EntropyMode) ToEntropyModeOutput() EntropyModeOutput {
	return pulumi.ToOutput(e).(EntropyModeOutput)
}

func (e EntropyMode) ToEntropyModeOutputWithContext(ctx context.Context) EntropyModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EntropyModeOutput)
}

func (e EntropyMode) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return e.ToEntropyModePtrOutputWithContext(context.Background())
}

func (e EntropyMode) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return EntropyMode(e).ToEntropyModeOutputWithContext(ctx).ToEntropyModePtrOutputWithContext(ctx)
}

func (e EntropyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntropyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntropyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EntropyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EntropyModeOutput struct{ *pulumi.OutputState }

func (EntropyModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntropyMode)(nil)).Elem()
}

func (o EntropyModeOutput) ToEntropyModeOutput() EntropyModeOutput {
	return o
}

func (o EntropyModeOutput) ToEntropyModeOutputWithContext(ctx context.Context) EntropyModeOutput {
	return o
}

func (o EntropyModeOutput) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return o.ToEntropyModePtrOutputWithContext(context.Background())
}

func (o EntropyModeOutput) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntropyMode) *EntropyMode {
		return &v
	}).(EntropyModePtrOutput)
}

func (o EntropyModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EntropyModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntropyMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EntropyModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntropyModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntropyMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EntropyModePtrOutput struct{ *pulumi.OutputState }

func (EntropyModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntropyMode)(nil)).Elem()
}

func (o EntropyModePtrOutput) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return o
}

func (o EntropyModePtrOutput) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return o
}

func (o EntropyModePtrOutput) Elem() EntropyModeOutput {
	return o.ApplyT(func(v *EntropyMode) EntropyMode {
		if v != nil {
			return *v
		}
		var ret EntropyMode
		return ret
	}).(EntropyModeOutput)
}

func (o EntropyModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntropyModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EntropyMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EntropyModeInput is an input type that accepts values of the EntropyMode enum
// A concrete instance of `EntropyModeInput` can be one of the following:
//
//	EntropyModeCabac
//	EntropyModeCavlc
type EntropyModeInput interface {
	pulumi.Input

	ToEntropyModeOutput() EntropyModeOutput
	ToEntropyModeOutputWithContext(context.Context) EntropyModeOutput
}

var entropyModePtrType = reflect.TypeOf((**EntropyMode)(nil)).Elem()

type EntropyModePtrInput interface {
	pulumi.Input

	ToEntropyModePtrOutput() EntropyModePtrOutput
	ToEntropyModePtrOutputWithContext(context.Context) EntropyModePtrOutput
}

type entropyModePtr string

func EntropyModePtr(v string) EntropyModePtrInput {
	return (*entropyModePtr)(&v)
}

func (*entropyModePtr) ElementType() reflect.Type {
	return entropyModePtrType
}

func (in *entropyModePtr) ToEntropyModePtrOutput() EntropyModePtrOutput {
	return pulumi.ToOutput(in).(EntropyModePtrOutput)
}

func (in *entropyModePtr) ToEntropyModePtrOutputWithContext(ctx context.Context) EntropyModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EntropyModePtrOutput)
}

func (in *entropyModePtr) ToOutput(ctx context.Context) pulumix.Output[*EntropyMode] {
	return pulumix.Output[*EntropyMode]{
		OutputState: in.ToEntropyModePtrOutputWithContext(ctx).OutputState,
	}
}

// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction.
type FaceRedactorMode string

const (
	// Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode.
	FaceRedactorModeAnalyze = FaceRedactorMode("Analyze")
	// Redact mode consumes the metadata file from Analyze mode and redacts the faces found.
	FaceRedactorModeRedact = FaceRedactorMode("Redact")
	// Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired.
	FaceRedactorModeCombined = FaceRedactorMode("Combined")
)

func (FaceRedactorMode) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceRedactorMode)(nil)).Elem()
}

func (e FaceRedactorMode) ToFaceRedactorModeOutput() FaceRedactorModeOutput {
	return pulumi.ToOutput(e).(FaceRedactorModeOutput)
}

func (e FaceRedactorMode) ToFaceRedactorModeOutputWithContext(ctx context.Context) FaceRedactorModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FaceRedactorModeOutput)
}

func (e FaceRedactorMode) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return e.ToFaceRedactorModePtrOutputWithContext(context.Background())
}

func (e FaceRedactorMode) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return FaceRedactorMode(e).ToFaceRedactorModeOutputWithContext(ctx).ToFaceRedactorModePtrOutputWithContext(ctx)
}

func (e FaceRedactorMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FaceRedactorMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FaceRedactorMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FaceRedactorMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FaceRedactorModeOutput struct{ *pulumi.OutputState }

func (FaceRedactorModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceRedactorMode)(nil)).Elem()
}

func (o FaceRedactorModeOutput) ToFaceRedactorModeOutput() FaceRedactorModeOutput {
	return o
}

func (o FaceRedactorModeOutput) ToFaceRedactorModeOutputWithContext(ctx context.Context) FaceRedactorModeOutput {
	return o
}

func (o FaceRedactorModeOutput) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return o.ToFaceRedactorModePtrOutputWithContext(context.Background())
}

func (o FaceRedactorModeOutput) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FaceRedactorMode) *FaceRedactorMode {
		return &v
	}).(FaceRedactorModePtrOutput)
}

func (o FaceRedactorModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FaceRedactorModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FaceRedactorMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FaceRedactorModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FaceRedactorModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FaceRedactorMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FaceRedactorModePtrOutput struct{ *pulumi.OutputState }

func (FaceRedactorModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FaceRedactorMode)(nil)).Elem()
}

func (o FaceRedactorModePtrOutput) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return o
}

func (o FaceRedactorModePtrOutput) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return o
}

func (o FaceRedactorModePtrOutput) Elem() FaceRedactorModeOutput {
	return o.ApplyT(func(v *FaceRedactorMode) FaceRedactorMode {
		if v != nil {
			return *v
		}
		var ret FaceRedactorMode
		return ret
	}).(FaceRedactorModeOutput)
}

func (o FaceRedactorModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FaceRedactorModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FaceRedactorMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FaceRedactorModeInput is an input type that accepts values of the FaceRedactorMode enum
// A concrete instance of `FaceRedactorModeInput` can be one of the following:
//
//	FaceRedactorModeAnalyze
//	FaceRedactorModeRedact
//	FaceRedactorModeCombined
type FaceRedactorModeInput interface {
	pulumi.Input

	ToFaceRedactorModeOutput() FaceRedactorModeOutput
	ToFaceRedactorModeOutputWithContext(context.Context) FaceRedactorModeOutput
}

var faceRedactorModePtrType = reflect.TypeOf((**FaceRedactorMode)(nil)).Elem()

type FaceRedactorModePtrInput interface {
	pulumi.Input

	ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput
	ToFaceRedactorModePtrOutputWithContext(context.Context) FaceRedactorModePtrOutput
}

type faceRedactorModePtr string

func FaceRedactorModePtr(v string) FaceRedactorModePtrInput {
	return (*faceRedactorModePtr)(&v)
}

func (*faceRedactorModePtr) ElementType() reflect.Type {
	return faceRedactorModePtrType
}

func (in *faceRedactorModePtr) ToFaceRedactorModePtrOutput() FaceRedactorModePtrOutput {
	return pulumi.ToOutput(in).(FaceRedactorModePtrOutput)
}

func (in *faceRedactorModePtr) ToFaceRedactorModePtrOutputWithContext(ctx context.Context) FaceRedactorModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FaceRedactorModePtrOutput)
}

func (in *faceRedactorModePtr) ToOutput(ctx context.Context) pulumix.Output[*FaceRedactorMode] {
	return pulumix.Output[*FaceRedactorMode]{
		OutputState: in.ToFaceRedactorModePtrOutputWithContext(ctx).OutputState,
	}
}

// Tells the encoder how to choose its encoding settings. The default value is Balanced.
type H264Complexity string

const (
	// Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time.
	H264ComplexitySpeed = H264Complexity("Speed")
	// Tells the encoder to use settings that achieve a balance between speed and quality.
	H264ComplexityBalanced = H264Complexity("Balanced")
	// Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
	H264ComplexityQuality = H264Complexity("Quality")
)

func (H264Complexity) ElementType() reflect.Type {
	return reflect.TypeOf((*H264Complexity)(nil)).Elem()
}

func (e H264Complexity) ToH264ComplexityOutput() H264ComplexityOutput {
	return pulumi.ToOutput(e).(H264ComplexityOutput)
}

func (e H264Complexity) ToH264ComplexityOutputWithContext(ctx context.Context) H264ComplexityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H264ComplexityOutput)
}

func (e H264Complexity) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return e.ToH264ComplexityPtrOutputWithContext(context.Background())
}

func (e H264Complexity) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return H264Complexity(e).ToH264ComplexityOutputWithContext(ctx).ToH264ComplexityPtrOutputWithContext(ctx)
}

func (e H264Complexity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264Complexity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264Complexity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H264Complexity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H264ComplexityOutput struct{ *pulumi.OutputState }

func (H264ComplexityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H264Complexity)(nil)).Elem()
}

func (o H264ComplexityOutput) ToH264ComplexityOutput() H264ComplexityOutput {
	return o
}

func (o H264ComplexityOutput) ToH264ComplexityOutputWithContext(ctx context.Context) H264ComplexityOutput {
	return o
}

func (o H264ComplexityOutput) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return o.ToH264ComplexityPtrOutputWithContext(context.Background())
}

func (o H264ComplexityOutput) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H264Complexity) *H264Complexity {
		return &v
	}).(H264ComplexityPtrOutput)
}

func (o H264ComplexityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H264ComplexityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264Complexity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H264ComplexityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264ComplexityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264Complexity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H264ComplexityPtrOutput struct{ *pulumi.OutputState }

func (H264ComplexityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**H264Complexity)(nil)).Elem()
}

func (o H264ComplexityPtrOutput) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return o
}

func (o H264ComplexityPtrOutput) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return o
}

func (o H264ComplexityPtrOutput) Elem() H264ComplexityOutput {
	return o.ApplyT(func(v *H264Complexity) H264Complexity {
		if v != nil {
			return *v
		}
		var ret H264Complexity
		return ret
	}).(H264ComplexityOutput)
}

func (o H264ComplexityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264ComplexityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H264Complexity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// H264ComplexityInput is an input type that accepts values of the H264Complexity enum
// A concrete instance of `H264ComplexityInput` can be one of the following:
//
//	H264ComplexitySpeed
//	H264ComplexityBalanced
//	H264ComplexityQuality
type H264ComplexityInput interface {
	pulumi.Input

	ToH264ComplexityOutput() H264ComplexityOutput
	ToH264ComplexityOutputWithContext(context.Context) H264ComplexityOutput
}

var h264complexityPtrType = reflect.TypeOf((**H264Complexity)(nil)).Elem()

type H264ComplexityPtrInput interface {
	pulumi.Input

	ToH264ComplexityPtrOutput() H264ComplexityPtrOutput
	ToH264ComplexityPtrOutputWithContext(context.Context) H264ComplexityPtrOutput
}

type h264complexityPtr string

func H264ComplexityPtr(v string) H264ComplexityPtrInput {
	return (*h264complexityPtr)(&v)
}

func (*h264complexityPtr) ElementType() reflect.Type {
	return h264complexityPtrType
}

func (in *h264complexityPtr) ToH264ComplexityPtrOutput() H264ComplexityPtrOutput {
	return pulumi.ToOutput(in).(H264ComplexityPtrOutput)
}

func (in *h264complexityPtr) ToH264ComplexityPtrOutputWithContext(ctx context.Context) H264ComplexityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H264ComplexityPtrOutput)
}

func (in *h264complexityPtr) ToOutput(ctx context.Context) pulumix.Output[*H264Complexity] {
	return pulumix.Output[*H264Complexity]{
		OutputState: in.ToH264ComplexityPtrOutputWithContext(ctx).OutputState,
	}
}

// The video rate control mode
type H264RateControlMode string

const (
	// Average Bitrate (ABR) mode that hits the target bitrate: Default mode.
	H264RateControlModeABR = H264RateControlMode("ABR")
	// Constant Bitrate (CBR) mode that tightens bitrate variations around target bitrate.
	H264RateControlModeCBR = H264RateControlMode("CBR")
	// Constant Rate Factor (CRF) mode that targets at constant subjective quality.
	H264RateControlModeCRF = H264RateControlMode("CRF")
)

func (H264RateControlMode) ElementType() reflect.Type {
	return reflect.TypeOf((*H264RateControlMode)(nil)).Elem()
}

func (e H264RateControlMode) ToH264RateControlModeOutput() H264RateControlModeOutput {
	return pulumi.ToOutput(e).(H264RateControlModeOutput)
}

func (e H264RateControlMode) ToH264RateControlModeOutputWithContext(ctx context.Context) H264RateControlModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H264RateControlModeOutput)
}

func (e H264RateControlMode) ToH264RateControlModePtrOutput() H264RateControlModePtrOutput {
	return e.ToH264RateControlModePtrOutputWithContext(context.Background())
}

func (e H264RateControlMode) ToH264RateControlModePtrOutputWithContext(ctx context.Context) H264RateControlModePtrOutput {
	return H264RateControlMode(e).ToH264RateControlModeOutputWithContext(ctx).ToH264RateControlModePtrOutputWithContext(ctx)
}

func (e H264RateControlMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264RateControlMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264RateControlMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H264RateControlMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H264RateControlModeOutput struct{ *pulumi.OutputState }

func (H264RateControlModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H264RateControlMode)(nil)).Elem()
}

func (o H264RateControlModeOutput) ToH264RateControlModeOutput() H264RateControlModeOutput {
	return o
}

func (o H264RateControlModeOutput) ToH264RateControlModeOutputWithContext(ctx context.Context) H264RateControlModeOutput {
	return o
}

func (o H264RateControlModeOutput) ToH264RateControlModePtrOutput() H264RateControlModePtrOutput {
	return o.ToH264RateControlModePtrOutputWithContext(context.Background())
}

func (o H264RateControlModeOutput) ToH264RateControlModePtrOutputWithContext(ctx context.Context) H264RateControlModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H264RateControlMode) *H264RateControlMode {
		return &v
	}).(H264RateControlModePtrOutput)
}

func (o H264RateControlModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H264RateControlModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264RateControlMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H264RateControlModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264RateControlModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264RateControlMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H264RateControlModePtrOutput struct{ *pulumi.OutputState }

func (H264RateControlModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**H264RateControlMode)(nil)).Elem()
}

func (o H264RateControlModePtrOutput) ToH264RateControlModePtrOutput() H264RateControlModePtrOutput {
	return o
}

func (o H264RateControlModePtrOutput) ToH264RateControlModePtrOutputWithContext(ctx context.Context) H264RateControlModePtrOutput {
	return o
}

func (o H264RateControlModePtrOutput) Elem() H264RateControlModeOutput {
	return o.ApplyT(func(v *H264RateControlMode) H264RateControlMode {
		if v != nil {
			return *v
		}
		var ret H264RateControlMode
		return ret
	}).(H264RateControlModeOutput)
}

func (o H264RateControlModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264RateControlModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H264RateControlMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// H264RateControlModeInput is an input type that accepts values of the H264RateControlMode enum
// A concrete instance of `H264RateControlModeInput` can be one of the following:
//
//	H264RateControlModeABR
//	H264RateControlModeCBR
//	H264RateControlModeCRF
type H264RateControlModeInput interface {
	pulumi.Input

	ToH264RateControlModeOutput() H264RateControlModeOutput
	ToH264RateControlModeOutputWithContext(context.Context) H264RateControlModeOutput
}

var h264rateControlModePtrType = reflect.TypeOf((**H264RateControlMode)(nil)).Elem()

type H264RateControlModePtrInput interface {
	pulumi.Input

	ToH264RateControlModePtrOutput() H264RateControlModePtrOutput
	ToH264RateControlModePtrOutputWithContext(context.Context) H264RateControlModePtrOutput
}

type h264rateControlModePtr string

func H264RateControlModePtr(v string) H264RateControlModePtrInput {
	return (*h264rateControlModePtr)(&v)
}

func (*h264rateControlModePtr) ElementType() reflect.Type {
	return h264rateControlModePtrType
}

func (in *h264rateControlModePtr) ToH264RateControlModePtrOutput() H264RateControlModePtrOutput {
	return pulumi.ToOutput(in).(H264RateControlModePtrOutput)
}

func (in *h264rateControlModePtr) ToH264RateControlModePtrOutputWithContext(ctx context.Context) H264RateControlModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H264RateControlModePtrOutput)
}

func (in *h264rateControlModePtr) ToOutput(ctx context.Context) pulumix.Output[*H264RateControlMode] {
	return pulumix.Output[*H264RateControlMode]{
		OutputState: in.ToH264RateControlModePtrOutputWithContext(ctx).OutputState,
	}
}

// We currently support Baseline, Main, High, High422, High444. Default is Auto.
type H264VideoProfile string

const (
	// Tells the encoder to automatically determine the appropriate H.264 profile.
	H264VideoProfileAuto = H264VideoProfile("Auto")
	// Baseline profile
	H264VideoProfileBaseline = H264VideoProfile("Baseline")
	// Main profile
	H264VideoProfileMain = H264VideoProfile("Main")
	// High profile.
	H264VideoProfileHigh = H264VideoProfile("High")
	// High 4:2:2 profile.
	H264VideoProfileHigh422 = H264VideoProfile("High422")
	// High 4:4:4 predictive profile.
	H264VideoProfileHigh444 = H264VideoProfile("High444")
)

func (H264VideoProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*H264VideoProfile)(nil)).Elem()
}

func (e H264VideoProfile) ToH264VideoProfileOutput() H264VideoProfileOutput {
	return pulumi.ToOutput(e).(H264VideoProfileOutput)
}

func (e H264VideoProfile) ToH264VideoProfileOutputWithContext(ctx context.Context) H264VideoProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H264VideoProfileOutput)
}

func (e H264VideoProfile) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return e.ToH264VideoProfilePtrOutputWithContext(context.Background())
}

func (e H264VideoProfile) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return H264VideoProfile(e).ToH264VideoProfileOutputWithContext(ctx).ToH264VideoProfilePtrOutputWithContext(ctx)
}

func (e H264VideoProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264VideoProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H264VideoProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H264VideoProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H264VideoProfileOutput struct{ *pulumi.OutputState }

func (H264VideoProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H264VideoProfile)(nil)).Elem()
}

func (o H264VideoProfileOutput) ToH264VideoProfileOutput() H264VideoProfileOutput {
	return o
}

func (o H264VideoProfileOutput) ToH264VideoProfileOutputWithContext(ctx context.Context) H264VideoProfileOutput {
	return o
}

func (o H264VideoProfileOutput) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return o.ToH264VideoProfilePtrOutputWithContext(context.Background())
}

func (o H264VideoProfileOutput) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H264VideoProfile) *H264VideoProfile {
		return &v
	}).(H264VideoProfilePtrOutput)
}

func (o H264VideoProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H264VideoProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264VideoProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H264VideoProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264VideoProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H264VideoProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H264VideoProfilePtrOutput struct{ *pulumi.OutputState }

func (H264VideoProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**H264VideoProfile)(nil)).Elem()
}

func (o H264VideoProfilePtrOutput) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return o
}

func (o H264VideoProfilePtrOutput) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return o
}

func (o H264VideoProfilePtrOutput) Elem() H264VideoProfileOutput {
	return o.ApplyT(func(v *H264VideoProfile) H264VideoProfile {
		if v != nil {
			return *v
		}
		var ret H264VideoProfile
		return ret
	}).(H264VideoProfileOutput)
}

func (o H264VideoProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H264VideoProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H264VideoProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// H264VideoProfileInput is an input type that accepts values of the H264VideoProfile enum
// A concrete instance of `H264VideoProfileInput` can be one of the following:
//
//	H264VideoProfileAuto
//	H264VideoProfileBaseline
//	H264VideoProfileMain
//	H264VideoProfileHigh
//	H264VideoProfileHigh422
//	H264VideoProfileHigh444
type H264VideoProfileInput interface {
	pulumi.Input

	ToH264VideoProfileOutput() H264VideoProfileOutput
	ToH264VideoProfileOutputWithContext(context.Context) H264VideoProfileOutput
}

var h264videoProfilePtrType = reflect.TypeOf((**H264VideoProfile)(nil)).Elem()

type H264VideoProfilePtrInput interface {
	pulumi.Input

	ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput
	ToH264VideoProfilePtrOutputWithContext(context.Context) H264VideoProfilePtrOutput
}

type h264videoProfilePtr string

func H264VideoProfilePtr(v string) H264VideoProfilePtrInput {
	return (*h264videoProfilePtr)(&v)
}

func (*h264videoProfilePtr) ElementType() reflect.Type {
	return h264videoProfilePtrType
}

func (in *h264videoProfilePtr) ToH264VideoProfilePtrOutput() H264VideoProfilePtrOutput {
	return pulumi.ToOutput(in).(H264VideoProfilePtrOutput)
}

func (in *h264videoProfilePtr) ToH264VideoProfilePtrOutputWithContext(ctx context.Context) H264VideoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H264VideoProfilePtrOutput)
}

func (in *h264videoProfilePtr) ToOutput(ctx context.Context) pulumix.Output[*H264VideoProfile] {
	return pulumix.Output[*H264VideoProfile]{
		OutputState: in.ToH264VideoProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Tells the encoder how to choose its encoding settings.  Quality will provide for a higher compression ratio but at a higher cost and longer compute time.  Speed will produce a relatively larger file but is faster and more economical. The default value is Balanced.
type H265Complexity string

const (
	// Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time.
	H265ComplexitySpeed = H265Complexity("Speed")
	// Tells the encoder to use settings that achieve a balance between speed and quality.
	H265ComplexityBalanced = H265Complexity("Balanced")
	// Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
	H265ComplexityQuality = H265Complexity("Quality")
)

func (H265Complexity) ElementType() reflect.Type {
	return reflect.TypeOf((*H265Complexity)(nil)).Elem()
}

func (e H265Complexity) ToH265ComplexityOutput() H265ComplexityOutput {
	return pulumi.ToOutput(e).(H265ComplexityOutput)
}

func (e H265Complexity) ToH265ComplexityOutputWithContext(ctx context.Context) H265ComplexityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H265ComplexityOutput)
}

func (e H265Complexity) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return e.ToH265ComplexityPtrOutputWithContext(context.Background())
}

func (e H265Complexity) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return H265Complexity(e).ToH265ComplexityOutputWithContext(ctx).ToH265ComplexityPtrOutputWithContext(ctx)
}

func (e H265Complexity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265Complexity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265Complexity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H265Complexity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H265ComplexityOutput struct{ *pulumi.OutputState }

func (H265ComplexityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H265Complexity)(nil)).Elem()
}

func (o H265ComplexityOutput) ToH265ComplexityOutput() H265ComplexityOutput {
	return o
}

func (o H265ComplexityOutput) ToH265ComplexityOutputWithContext(ctx context.Context) H265ComplexityOutput {
	return o
}

func (o H265ComplexityOutput) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return o.ToH265ComplexityPtrOutputWithContext(context.Background())
}

func (o H265ComplexityOutput) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H265Complexity) *H265Complexity {
		return &v
	}).(H265ComplexityPtrOutput)
}

func (o H265ComplexityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H265ComplexityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265Complexity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H265ComplexityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265ComplexityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265Complexity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H265ComplexityPtrOutput struct{ *pulumi.OutputState }

func (H265ComplexityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**H265Complexity)(nil)).Elem()
}

func (o H265ComplexityPtrOutput) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return o
}

func (o H265ComplexityPtrOutput) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return o
}

func (o H265ComplexityPtrOutput) Elem() H265ComplexityOutput {
	return o.ApplyT(func(v *H265Complexity) H265Complexity {
		if v != nil {
			return *v
		}
		var ret H265Complexity
		return ret
	}).(H265ComplexityOutput)
}

func (o H265ComplexityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265ComplexityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H265Complexity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// H265ComplexityInput is an input type that accepts values of the H265Complexity enum
// A concrete instance of `H265ComplexityInput` can be one of the following:
//
//	H265ComplexitySpeed
//	H265ComplexityBalanced
//	H265ComplexityQuality
type H265ComplexityInput interface {
	pulumi.Input

	ToH265ComplexityOutput() H265ComplexityOutput
	ToH265ComplexityOutputWithContext(context.Context) H265ComplexityOutput
}

var h265complexityPtrType = reflect.TypeOf((**H265Complexity)(nil)).Elem()

type H265ComplexityPtrInput interface {
	pulumi.Input

	ToH265ComplexityPtrOutput() H265ComplexityPtrOutput
	ToH265ComplexityPtrOutputWithContext(context.Context) H265ComplexityPtrOutput
}

type h265complexityPtr string

func H265ComplexityPtr(v string) H265ComplexityPtrInput {
	return (*h265complexityPtr)(&v)
}

func (*h265complexityPtr) ElementType() reflect.Type {
	return h265complexityPtrType
}

func (in *h265complexityPtr) ToH265ComplexityPtrOutput() H265ComplexityPtrOutput {
	return pulumi.ToOutput(in).(H265ComplexityPtrOutput)
}

func (in *h265complexityPtr) ToH265ComplexityPtrOutputWithContext(ctx context.Context) H265ComplexityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H265ComplexityPtrOutput)
}

func (in *h265complexityPtr) ToOutput(ctx context.Context) pulumix.Output[*H265Complexity] {
	return pulumix.Output[*H265Complexity]{
		OutputState: in.ToH265ComplexityPtrOutputWithContext(ctx).OutputState,
	}
}

// We currently support Main. Default is Auto.
type H265VideoProfile string

const (
	// Tells the encoder to automatically determine the appropriate H.265 profile.
	H265VideoProfileAuto = H265VideoProfile("Auto")
	// Main profile (https://x265.readthedocs.io/en/default/cli.html?highlight=profile#profile-level-tier)
	H265VideoProfileMain = H265VideoProfile("Main")
	// Main 10 profile (https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Main_10)
	H265VideoProfileMain10 = H265VideoProfile("Main10")
)

func (H265VideoProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*H265VideoProfile)(nil)).Elem()
}

func (e H265VideoProfile) ToH265VideoProfileOutput() H265VideoProfileOutput {
	return pulumi.ToOutput(e).(H265VideoProfileOutput)
}

func (e H265VideoProfile) ToH265VideoProfileOutputWithContext(ctx context.Context) H265VideoProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(H265VideoProfileOutput)
}

func (e H265VideoProfile) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return e.ToH265VideoProfilePtrOutputWithContext(context.Background())
}

func (e H265VideoProfile) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return H265VideoProfile(e).ToH265VideoProfileOutputWithContext(ctx).ToH265VideoProfilePtrOutputWithContext(ctx)
}

func (e H265VideoProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265VideoProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e H265VideoProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e H265VideoProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type H265VideoProfileOutput struct{ *pulumi.OutputState }

func (H265VideoProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H265VideoProfile)(nil)).Elem()
}

func (o H265VideoProfileOutput) ToH265VideoProfileOutput() H265VideoProfileOutput {
	return o
}

func (o H265VideoProfileOutput) ToH265VideoProfileOutputWithContext(ctx context.Context) H265VideoProfileOutput {
	return o
}

func (o H265VideoProfileOutput) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return o.ToH265VideoProfilePtrOutputWithContext(context.Background())
}

func (o H265VideoProfileOutput) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H265VideoProfile) *H265VideoProfile {
		return &v
	}).(H265VideoProfilePtrOutput)
}

func (o H265VideoProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o H265VideoProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265VideoProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o H265VideoProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265VideoProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e H265VideoProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type H265VideoProfilePtrOutput struct{ *pulumi.OutputState }

func (H265VideoProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**H265VideoProfile)(nil)).Elem()
}

func (o H265VideoProfilePtrOutput) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return o
}

func (o H265VideoProfilePtrOutput) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return o
}

func (o H265VideoProfilePtrOutput) Elem() H265VideoProfileOutput {
	return o.ApplyT(func(v *H265VideoProfile) H265VideoProfile {
		if v != nil {
			return *v
		}
		var ret H265VideoProfile
		return ret
	}).(H265VideoProfileOutput)
}

func (o H265VideoProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o H265VideoProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *H265VideoProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// H265VideoProfileInput is an input type that accepts values of the H265VideoProfile enum
// A concrete instance of `H265VideoProfileInput` can be one of the following:
//
//	H265VideoProfileAuto
//	H265VideoProfileMain
//	H265VideoProfileMain10
type H265VideoProfileInput interface {
	pulumi.Input

	ToH265VideoProfileOutput() H265VideoProfileOutput
	ToH265VideoProfileOutputWithContext(context.Context) H265VideoProfileOutput
}

var h265videoProfilePtrType = reflect.TypeOf((**H265VideoProfile)(nil)).Elem()

type H265VideoProfilePtrInput interface {
	pulumi.Input

	ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput
	ToH265VideoProfilePtrOutputWithContext(context.Context) H265VideoProfilePtrOutput
}

type h265videoProfilePtr string

func H265VideoProfilePtr(v string) H265VideoProfilePtrInput {
	return (*h265videoProfilePtr)(&v)
}

func (*h265videoProfilePtr) ElementType() reflect.Type {
	return h265videoProfilePtrType
}

func (in *h265videoProfilePtr) ToH265VideoProfilePtrOutput() H265VideoProfilePtrOutput {
	return pulumi.ToOutput(in).(H265VideoProfilePtrOutput)
}

func (in *h265videoProfilePtr) ToH265VideoProfilePtrOutputWithContext(ctx context.Context) H265VideoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(H265VideoProfilePtrOutput)
}

func (in *h265videoProfilePtr) ToOutput(ctx context.Context) pulumix.Output[*H265VideoProfile] {
	return pulumix.Output[*H265VideoProfile]{
		OutputState: in.ToH265VideoProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Defines the type of insights that you want the service to generate. The allowed values are 'AudioInsightsOnly', 'VideoInsightsOnly', and 'AllInsights'. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
type InsightsType string

const (
	// Generate audio only insights. Ignore video even if present. Fails if no audio is present.
	InsightsTypeAudioInsightsOnly = InsightsType("AudioInsightsOnly")
	// Generate video only insights. Ignore audio if present. Fails if no video is present.
	InsightsTypeVideoInsightsOnly = InsightsType("VideoInsightsOnly")
	// Generate both audio and video insights. Fails if either audio or video Insights fail.
	InsightsTypeAllInsights = InsightsType("AllInsights")
)

func (InsightsType) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsType)(nil)).Elem()
}

func (e InsightsType) ToInsightsTypeOutput() InsightsTypeOutput {
	return pulumi.ToOutput(e).(InsightsTypeOutput)
}

func (e InsightsType) ToInsightsTypeOutputWithContext(ctx context.Context) InsightsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InsightsTypeOutput)
}

func (e InsightsType) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return e.ToInsightsTypePtrOutputWithContext(context.Background())
}

func (e InsightsType) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return InsightsType(e).ToInsightsTypeOutputWithContext(ctx).ToInsightsTypePtrOutputWithContext(ctx)
}

func (e InsightsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InsightsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InsightsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InsightsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InsightsTypeOutput struct{ *pulumi.OutputState }

func (InsightsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsType)(nil)).Elem()
}

func (o InsightsTypeOutput) ToInsightsTypeOutput() InsightsTypeOutput {
	return o
}

func (o InsightsTypeOutput) ToInsightsTypeOutputWithContext(ctx context.Context) InsightsTypeOutput {
	return o
}

func (o InsightsTypeOutput) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return o.ToInsightsTypePtrOutputWithContext(context.Background())
}

func (o InsightsTypeOutput) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InsightsType) *InsightsType {
		return &v
	}).(InsightsTypePtrOutput)
}

func (o InsightsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InsightsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InsightsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InsightsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InsightsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InsightsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InsightsTypePtrOutput struct{ *pulumi.OutputState }

func (InsightsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsType)(nil)).Elem()
}

func (o InsightsTypePtrOutput) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return o
}

func (o InsightsTypePtrOutput) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return o
}

func (o InsightsTypePtrOutput) Elem() InsightsTypeOutput {
	return o.ApplyT(func(v *InsightsType) InsightsType {
		if v != nil {
			return *v
		}
		var ret InsightsType
		return ret
	}).(InsightsTypeOutput)
}

func (o InsightsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InsightsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InsightsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InsightsTypeInput is an input type that accepts values of the InsightsType enum
// A concrete instance of `InsightsTypeInput` can be one of the following:
//
//	InsightsTypeAudioInsightsOnly
//	InsightsTypeVideoInsightsOnly
//	InsightsTypeAllInsights
type InsightsTypeInput interface {
	pulumi.Input

	ToInsightsTypeOutput() InsightsTypeOutput
	ToInsightsTypeOutputWithContext(context.Context) InsightsTypeOutput
}

var insightsTypePtrType = reflect.TypeOf((**InsightsType)(nil)).Elem()

type InsightsTypePtrInput interface {
	pulumi.Input

	ToInsightsTypePtrOutput() InsightsTypePtrOutput
	ToInsightsTypePtrOutputWithContext(context.Context) InsightsTypePtrOutput
}

type insightsTypePtr string

func InsightsTypePtr(v string) InsightsTypePtrInput {
	return (*insightsTypePtr)(&v)
}

func (*insightsTypePtr) ElementType() reflect.Type {
	return insightsTypePtrType
}

func (in *insightsTypePtr) ToInsightsTypePtrOutput() InsightsTypePtrOutput {
	return pulumi.ToOutput(in).(InsightsTypePtrOutput)
}

func (in *insightsTypePtr) ToInsightsTypePtrOutputWithContext(ctx context.Context) InsightsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InsightsTypePtrOutput)
}

func (in *insightsTypePtr) ToOutput(ctx context.Context) pulumix.Output[*InsightsType] {
	return pulumix.Output[*InsightsType]{
		OutputState: in.ToInsightsTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
type InterleaveOutput string

const (
	// The output is video-only or audio-only.
	InterleaveOutputNonInterleavedOutput = InterleaveOutput("NonInterleavedOutput")
	// The output includes both audio and video.
	InterleaveOutputInterleavedOutput = InterleaveOutput("InterleavedOutput")
)

func (InterleaveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterleaveOutput)(nil)).Elem()
}

func (e InterleaveOutput) ToInterleaveOutputOutput() InterleaveOutputOutput {
	return pulumi.ToOutput(e).(InterleaveOutputOutput)
}

func (e InterleaveOutput) ToInterleaveOutputOutputWithContext(ctx context.Context) InterleaveOutputOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InterleaveOutputOutput)
}

func (e InterleaveOutput) ToInterleaveOutputPtrOutput() InterleaveOutputPtrOutput {
	return e.ToInterleaveOutputPtrOutputWithContext(context.Background())
}

func (e InterleaveOutput) ToInterleaveOutputPtrOutputWithContext(ctx context.Context) InterleaveOutputPtrOutput {
	return InterleaveOutput(e).ToInterleaveOutputOutputWithContext(ctx).ToInterleaveOutputPtrOutputWithContext(ctx)
}

func (e InterleaveOutput) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterleaveOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterleaveOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterleaveOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InterleaveOutputOutput struct{ *pulumi.OutputState }

func (InterleaveOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterleaveOutput)(nil)).Elem()
}

func (o InterleaveOutputOutput) ToInterleaveOutputOutput() InterleaveOutputOutput {
	return o
}

func (o InterleaveOutputOutput) ToInterleaveOutputOutputWithContext(ctx context.Context) InterleaveOutputOutput {
	return o
}

func (o InterleaveOutputOutput) ToInterleaveOutputPtrOutput() InterleaveOutputPtrOutput {
	return o.ToInterleaveOutputPtrOutputWithContext(context.Background())
}

func (o InterleaveOutputOutput) ToInterleaveOutputPtrOutputWithContext(ctx context.Context) InterleaveOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InterleaveOutput) *InterleaveOutput {
		return &v
	}).(InterleaveOutputPtrOutput)
}

func (o InterleaveOutputOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InterleaveOutputOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InterleaveOutput) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InterleaveOutputOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InterleaveOutputOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InterleaveOutput) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InterleaveOutputPtrOutput struct{ *pulumi.OutputState }

func (InterleaveOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterleaveOutput)(nil)).Elem()
}

func (o InterleaveOutputPtrOutput) ToInterleaveOutputPtrOutput() InterleaveOutputPtrOutput {
	return o
}

func (o InterleaveOutputPtrOutput) ToInterleaveOutputPtrOutputWithContext(ctx context.Context) InterleaveOutputPtrOutput {
	return o
}

func (o InterleaveOutputPtrOutput) Elem() InterleaveOutputOutput {
	return o.ApplyT(func(v *InterleaveOutput) InterleaveOutput {
		if v != nil {
			return *v
		}
		var ret InterleaveOutput
		return ret
	}).(InterleaveOutputOutput)
}

func (o InterleaveOutputPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InterleaveOutputPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InterleaveOutput) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InterleaveOutputInput is an input type that accepts values of the InterleaveOutput enum
// A concrete instance of `InterleaveOutputInput` can be one of the following:
//
//	InterleaveOutputNonInterleavedOutput
//	InterleaveOutputInterleavedOutput
type InterleaveOutputInput interface {
	pulumi.Input

	ToInterleaveOutputOutput() InterleaveOutputOutput
	ToInterleaveOutputOutputWithContext(context.Context) InterleaveOutputOutput
}

var interleaveOutputPtrType = reflect.TypeOf((**InterleaveOutput)(nil)).Elem()

type InterleaveOutputPtrInput interface {
	pulumi.Input

	ToInterleaveOutputPtrOutput() InterleaveOutputPtrOutput
	ToInterleaveOutputPtrOutputWithContext(context.Context) InterleaveOutputPtrOutput
}

type interleaveOutputPtr string

func InterleaveOutputPtr(v string) InterleaveOutputPtrInput {
	return (*interleaveOutputPtr)(&v)
}

func (*interleaveOutputPtr) ElementType() reflect.Type {
	return interleaveOutputPtrType
}

func (in *interleaveOutputPtr) ToInterleaveOutputPtrOutput() InterleaveOutputPtrOutput {
	return pulumi.ToOutput(in).(InterleaveOutputPtrOutput)
}

func (in *interleaveOutputPtr) ToInterleaveOutputPtrOutputWithContext(ctx context.Context) InterleaveOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InterleaveOutputPtrOutput)
}

func (in *interleaveOutputPtr) ToOutput(ctx context.Context) pulumix.Output[*InterleaveOutput] {
	return pulumix.Output[*InterleaveOutput]{
		OutputState: in.ToInterleaveOutputPtrOutputWithContext(ctx).OutputState,
	}
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
type OnErrorType string

const (
	// Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped.
	OnErrorTypeStopProcessingJob = OnErrorType("StopProcessingJob")
	// Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue.
	OnErrorTypeContinueJob = OnErrorType("ContinueJob")
)

func (OnErrorType) ElementType() reflect.Type {
	return reflect.TypeOf((*OnErrorType)(nil)).Elem()
}

func (e OnErrorType) ToOnErrorTypeOutput() OnErrorTypeOutput {
	return pulumi.ToOutput(e).(OnErrorTypeOutput)
}

func (e OnErrorType) ToOnErrorTypeOutputWithContext(ctx context.Context) OnErrorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OnErrorTypeOutput)
}

func (e OnErrorType) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return e.ToOnErrorTypePtrOutputWithContext(context.Background())
}

func (e OnErrorType) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return OnErrorType(e).ToOnErrorTypeOutputWithContext(ctx).ToOnErrorTypePtrOutputWithContext(ctx)
}

func (e OnErrorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnErrorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnErrorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OnErrorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OnErrorTypeOutput struct{ *pulumi.OutputState }

func (OnErrorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnErrorType)(nil)).Elem()
}

func (o OnErrorTypeOutput) ToOnErrorTypeOutput() OnErrorTypeOutput {
	return o
}

func (o OnErrorTypeOutput) ToOnErrorTypeOutputWithContext(ctx context.Context) OnErrorTypeOutput {
	return o
}

func (o OnErrorTypeOutput) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return o.ToOnErrorTypePtrOutputWithContext(context.Background())
}

func (o OnErrorTypeOutput) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnErrorType) *OnErrorType {
		return &v
	}).(OnErrorTypePtrOutput)
}

func (o OnErrorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OnErrorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnErrorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OnErrorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnErrorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnErrorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OnErrorTypePtrOutput struct{ *pulumi.OutputState }

func (OnErrorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnErrorType)(nil)).Elem()
}

func (o OnErrorTypePtrOutput) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return o
}

func (o OnErrorTypePtrOutput) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return o
}

func (o OnErrorTypePtrOutput) Elem() OnErrorTypeOutput {
	return o.ApplyT(func(v *OnErrorType) OnErrorType {
		if v != nil {
			return *v
		}
		var ret OnErrorType
		return ret
	}).(OnErrorTypeOutput)
}

func (o OnErrorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnErrorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OnErrorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OnErrorTypeInput is an input type that accepts values of the OnErrorType enum
// A concrete instance of `OnErrorTypeInput` can be one of the following:
//
//	OnErrorTypeStopProcessingJob
//	OnErrorTypeContinueJob
type OnErrorTypeInput interface {
	pulumi.Input

	ToOnErrorTypeOutput() OnErrorTypeOutput
	ToOnErrorTypeOutputWithContext(context.Context) OnErrorTypeOutput
}

var onErrorTypePtrType = reflect.TypeOf((**OnErrorType)(nil)).Elem()

type OnErrorTypePtrInput interface {
	pulumi.Input

	ToOnErrorTypePtrOutput() OnErrorTypePtrOutput
	ToOnErrorTypePtrOutputWithContext(context.Context) OnErrorTypePtrOutput
}

type onErrorTypePtr string

func OnErrorTypePtr(v string) OnErrorTypePtrInput {
	return (*onErrorTypePtr)(&v)
}

func (*onErrorTypePtr) ElementType() reflect.Type {
	return onErrorTypePtrType
}

func (in *onErrorTypePtr) ToOnErrorTypePtrOutput() OnErrorTypePtrOutput {
	return pulumi.ToOutput(in).(OnErrorTypePtrOutput)
}

func (in *onErrorTypePtr) ToOnErrorTypePtrOutputWithContext(ctx context.Context) OnErrorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OnErrorTypePtrOutput)
}

func (in *onErrorTypePtr) ToOutput(ctx context.Context) pulumix.Output[*OnErrorType] {
	return pulumix.Output[*OnErrorType]{
		OutputState: in.ToOnErrorTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
type Priority string

const (
	// Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs.
	PriorityLow = Priority("Low")
	// Used for TransformOutputs that can be generated at Normal priority.
	PriorityNormal = Priority("Normal")
	// Used for TransformOutputs that should take precedence over others.
	PriorityHigh = Priority("High")
)

func (Priority) ElementType() reflect.Type {
	return reflect.TypeOf((*Priority)(nil)).Elem()
}

func (e Priority) ToPriorityOutput() PriorityOutput {
	return pulumi.ToOutput(e).(PriorityOutput)
}

func (e Priority) ToPriorityOutputWithContext(ctx context.Context) PriorityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PriorityOutput)
}

func (e Priority) ToPriorityPtrOutput() PriorityPtrOutput {
	return e.ToPriorityPtrOutputWithContext(context.Background())
}

func (e Priority) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return Priority(e).ToPriorityOutputWithContext(ctx).ToPriorityPtrOutputWithContext(ctx)
}

func (e Priority) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Priority) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Priority) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Priority) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PriorityOutput struct{ *pulumi.OutputState }

func (PriorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Priority)(nil)).Elem()
}

func (o PriorityOutput) ToPriorityOutput() PriorityOutput {
	return o
}

func (o PriorityOutput) ToPriorityOutputWithContext(ctx context.Context) PriorityOutput {
	return o
}

func (o PriorityOutput) ToPriorityPtrOutput() PriorityPtrOutput {
	return o.ToPriorityPtrOutputWithContext(context.Background())
}

func (o PriorityOutput) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Priority) *Priority {
		return &v
	}).(PriorityPtrOutput)
}

func (o PriorityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PriorityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Priority) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PriorityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PriorityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Priority) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PriorityPtrOutput struct{ *pulumi.OutputState }

func (PriorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Priority)(nil)).Elem()
}

func (o PriorityPtrOutput) ToPriorityPtrOutput() PriorityPtrOutput {
	return o
}

func (o PriorityPtrOutput) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return o
}

func (o PriorityPtrOutput) Elem() PriorityOutput {
	return o.ApplyT(func(v *Priority) Priority {
		if v != nil {
			return *v
		}
		var ret Priority
		return ret
	}).(PriorityOutput)
}

func (o PriorityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PriorityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Priority) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PriorityInput is an input type that accepts values of the Priority enum
// A concrete instance of `PriorityInput` can be one of the following:
//
//	PriorityLow
//	PriorityNormal
//	PriorityHigh
type PriorityInput interface {
	pulumi.Input

	ToPriorityOutput() PriorityOutput
	ToPriorityOutputWithContext(context.Context) PriorityOutput
}

var priorityPtrType = reflect.TypeOf((**Priority)(nil)).Elem()

type PriorityPtrInput interface {
	pulumi.Input

	ToPriorityPtrOutput() PriorityPtrOutput
	ToPriorityPtrOutputWithContext(context.Context) PriorityPtrOutput
}

type priorityPtr string

func PriorityPtr(v string) PriorityPtrInput {
	return (*priorityPtr)(&v)
}

func (*priorityPtr) ElementType() reflect.Type {
	return priorityPtrType
}

func (in *priorityPtr) ToPriorityPtrOutput() PriorityPtrOutput {
	return pulumi.ToOutput(in).(PriorityPtrOutput)
}

func (in *priorityPtr) ToPriorityPtrOutputWithContext(ctx context.Context) PriorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PriorityPtrOutput)
}

func (in *priorityPtr) ToOutput(ctx context.Context) pulumix.Output[*Priority] {
	return pulumix.Output[*Priority]{
		OutputState: in.ToPriorityPtrOutputWithContext(ctx).OutputState,
	}
}

// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
type Rotation string

const (
	// Automatically detect and rotate as needed.
	RotationAuto = Rotation("Auto")
	// Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact.
	RotationNone = Rotation("None")
	// Do not rotate the video but remove any metadata about the rotation.
	RotationRotate0 = Rotation("Rotate0")
	// Rotate 90 degrees clockwise.
	RotationRotate90 = Rotation("Rotate90")
	// Rotate 180 degrees clockwise.
	RotationRotate180 = Rotation("Rotate180")
	// Rotate 270 degrees clockwise.
	RotationRotate270 = Rotation("Rotate270")
)

func (Rotation) ElementType() reflect.Type {
	return reflect.TypeOf((*Rotation)(nil)).Elem()
}

func (e Rotation) ToRotationOutput() RotationOutput {
	return pulumi.ToOutput(e).(RotationOutput)
}

func (e Rotation) ToRotationOutputWithContext(ctx context.Context) RotationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RotationOutput)
}

func (e Rotation) ToRotationPtrOutput() RotationPtrOutput {
	return e.ToRotationPtrOutputWithContext(context.Background())
}

func (e Rotation) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return Rotation(e).ToRotationOutputWithContext(ctx).ToRotationPtrOutputWithContext(ctx)
}

func (e Rotation) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Rotation) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Rotation) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Rotation) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RotationOutput struct{ *pulumi.OutputState }

func (RotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rotation)(nil)).Elem()
}

func (o RotationOutput) ToRotationOutput() RotationOutput {
	return o
}

func (o RotationOutput) ToRotationOutputWithContext(ctx context.Context) RotationOutput {
	return o
}

func (o RotationOutput) ToRotationPtrOutput() RotationPtrOutput {
	return o.ToRotationPtrOutputWithContext(context.Background())
}

func (o RotationOutput) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Rotation) *Rotation {
		return &v
	}).(RotationPtrOutput)
}

func (o RotationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RotationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Rotation) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RotationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RotationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Rotation) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RotationPtrOutput struct{ *pulumi.OutputState }

func (RotationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rotation)(nil)).Elem()
}

func (o RotationPtrOutput) ToRotationPtrOutput() RotationPtrOutput {
	return o
}

func (o RotationPtrOutput) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return o
}

func (o RotationPtrOutput) Elem() RotationOutput {
	return o.ApplyT(func(v *Rotation) Rotation {
		if v != nil {
			return *v
		}
		var ret Rotation
		return ret
	}).(RotationOutput)
}

func (o RotationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RotationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Rotation) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RotationInput is an input type that accepts values of the Rotation enum
// A concrete instance of `RotationInput` can be one of the following:
//
//	RotationAuto
//	RotationNone
//	RotationRotate0
//	RotationRotate90
//	RotationRotate180
//	RotationRotate270
type RotationInput interface {
	pulumi.Input

	ToRotationOutput() RotationOutput
	ToRotationOutputWithContext(context.Context) RotationOutput
}

var rotationPtrType = reflect.TypeOf((**Rotation)(nil)).Elem()

type RotationPtrInput interface {
	pulumi.Input

	ToRotationPtrOutput() RotationPtrOutput
	ToRotationPtrOutputWithContext(context.Context) RotationPtrOutput
}

type rotationPtr string

func RotationPtr(v string) RotationPtrInput {
	return (*rotationPtr)(&v)
}

func (*rotationPtr) ElementType() reflect.Type {
	return rotationPtrType
}

func (in *rotationPtr) ToRotationPtrOutput() RotationPtrOutput {
	return pulumi.ToOutput(in).(RotationPtrOutput)
}

func (in *rotationPtr) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RotationPtrOutput)
}

func (in *rotationPtr) ToOutput(ctx context.Context) pulumix.Output[*Rotation] {
	return pulumix.Output[*Rotation]{
		OutputState: in.ToRotationPtrOutputWithContext(ctx).OutputState,
	}
}

// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
type StretchMode string

const (
	// Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video.
	StretchModeNone = StretchMode("None")
	// Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
	StretchModeAutoSize = StretchMode("AutoSize")
	// Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
	StretchModeAutoFit = StretchMode("AutoFit")
)

func (StretchMode) ElementType() reflect.Type {
	return reflect.TypeOf((*StretchMode)(nil)).Elem()
}

func (e StretchMode) ToStretchModeOutput() StretchModeOutput {
	return pulumi.ToOutput(e).(StretchModeOutput)
}

func (e StretchMode) ToStretchModeOutputWithContext(ctx context.Context) StretchModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StretchModeOutput)
}

func (e StretchMode) ToStretchModePtrOutput() StretchModePtrOutput {
	return e.ToStretchModePtrOutputWithContext(context.Background())
}

func (e StretchMode) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return StretchMode(e).ToStretchModeOutputWithContext(ctx).ToStretchModePtrOutputWithContext(ctx)
}

func (e StretchMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StretchMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StretchMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StretchMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StretchModeOutput struct{ *pulumi.OutputState }

func (StretchModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StretchMode)(nil)).Elem()
}

func (o StretchModeOutput) ToStretchModeOutput() StretchModeOutput {
	return o
}

func (o StretchModeOutput) ToStretchModeOutputWithContext(ctx context.Context) StretchModeOutput {
	return o
}

func (o StretchModeOutput) ToStretchModePtrOutput() StretchModePtrOutput {
	return o.ToStretchModePtrOutputWithContext(context.Background())
}

func (o StretchModeOutput) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StretchMode) *StretchMode {
		return &v
	}).(StretchModePtrOutput)
}

func (o StretchModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StretchModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StretchMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StretchModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StretchModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StretchMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StretchModePtrOutput struct{ *pulumi.OutputState }

func (StretchModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StretchMode)(nil)).Elem()
}

func (o StretchModePtrOutput) ToStretchModePtrOutput() StretchModePtrOutput {
	return o
}

func (o StretchModePtrOutput) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return o
}

func (o StretchModePtrOutput) Elem() StretchModeOutput {
	return o.ApplyT(func(v *StretchMode) StretchMode {
		if v != nil {
			return *v
		}
		var ret StretchMode
		return ret
	}).(StretchModeOutput)
}

func (o StretchModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StretchModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StretchMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StretchModeInput is an input type that accepts values of the StretchMode enum
// A concrete instance of `StretchModeInput` can be one of the following:
//
//	StretchModeNone
//	StretchModeAutoSize
//	StretchModeAutoFit
type StretchModeInput interface {
	pulumi.Input

	ToStretchModeOutput() StretchModeOutput
	ToStretchModeOutputWithContext(context.Context) StretchModeOutput
}

var stretchModePtrType = reflect.TypeOf((**StretchMode)(nil)).Elem()

type StretchModePtrInput interface {
	pulumi.Input

	ToStretchModePtrOutput() StretchModePtrOutput
	ToStretchModePtrOutputWithContext(context.Context) StretchModePtrOutput
}

type stretchModePtr string

func StretchModePtr(v string) StretchModePtrInput {
	return (*stretchModePtr)(&v)
}

func (*stretchModePtr) ElementType() reflect.Type {
	return stretchModePtrType
}

func (in *stretchModePtr) ToStretchModePtrOutput() StretchModePtrOutput {
	return pulumi.ToOutput(in).(StretchModePtrOutput)
}

func (in *stretchModePtr) ToStretchModePtrOutputWithContext(ctx context.Context) StretchModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StretchModePtrOutput)
}

func (in *stretchModePtr) ToOutput(ctx context.Context) pulumix.Output[*StretchMode] {
	return pulumix.Output[*StretchMode]{
		OutputState: in.ToStretchModePtrOutputWithContext(ctx).OutputState,
	}
}

// The TrackAttribute to filter the tracks by.
type TrackAttribute string

const (
	// The bitrate of the track.
	TrackAttributeBitrate = TrackAttribute("Bitrate")
	// The language of the track.
	TrackAttributeLanguage = TrackAttribute("Language")
)

func (TrackAttribute) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackAttribute)(nil)).Elem()
}

func (e TrackAttribute) ToTrackAttributeOutput() TrackAttributeOutput {
	return pulumi.ToOutput(e).(TrackAttributeOutput)
}

func (e TrackAttribute) ToTrackAttributeOutputWithContext(ctx context.Context) TrackAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrackAttributeOutput)
}

func (e TrackAttribute) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return e.ToTrackAttributePtrOutputWithContext(context.Background())
}

func (e TrackAttribute) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return TrackAttribute(e).ToTrackAttributeOutputWithContext(ctx).ToTrackAttributePtrOutputWithContext(ctx)
}

func (e TrackAttribute) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackAttribute) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrackAttribute) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrackAttribute) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrackAttributeOutput struct{ *pulumi.OutputState }

func (TrackAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackAttribute)(nil)).Elem()
}

func (o TrackAttributeOutput) ToTrackAttributeOutput() TrackAttributeOutput {
	return o
}

func (o TrackAttributeOutput) ToTrackAttributeOutputWithContext(ctx context.Context) TrackAttributeOutput {
	return o
}

func (o TrackAttributeOutput) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return o.ToTrackAttributePtrOutputWithContext(context.Background())
}

func (o TrackAttributeOutput) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrackAttribute) *TrackAttribute {
		return &v
	}).(TrackAttributePtrOutput)
}

func (o TrackAttributeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrackAttributeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackAttribute) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrackAttributeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackAttributeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrackAttribute) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrackAttributePtrOutput struct{ *pulumi.OutputState }

func (TrackAttributePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrackAttribute)(nil)).Elem()
}

func (o TrackAttributePtrOutput) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return o
}

func (o TrackAttributePtrOutput) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return o
}

func (o TrackAttributePtrOutput) Elem() TrackAttributeOutput {
	return o.ApplyT(func(v *TrackAttribute) TrackAttribute {
		if v != nil {
			return *v
		}
		var ret TrackAttribute
		return ret
	}).(TrackAttributeOutput)
}

func (o TrackAttributePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrackAttributePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrackAttribute) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TrackAttributeInput is an input type that accepts values of the TrackAttribute enum
// A concrete instance of `TrackAttributeInput` can be one of the following:
//
//	TrackAttributeBitrate
//	TrackAttributeLanguage
type TrackAttributeInput interface {
	pulumi.Input

	ToTrackAttributeOutput() TrackAttributeOutput
	ToTrackAttributeOutputWithContext(context.Context) TrackAttributeOutput
}

var trackAttributePtrType = reflect.TypeOf((**TrackAttribute)(nil)).Elem()

type TrackAttributePtrInput interface {
	pulumi.Input

	ToTrackAttributePtrOutput() TrackAttributePtrOutput
	ToTrackAttributePtrOutputWithContext(context.Context) TrackAttributePtrOutput
}

type trackAttributePtr string

func TrackAttributePtr(v string) TrackAttributePtrInput {
	return (*trackAttributePtr)(&v)
}

func (*trackAttributePtr) ElementType() reflect.Type {
	return trackAttributePtrType
}

func (in *trackAttributePtr) ToTrackAttributePtrOutput() TrackAttributePtrOutput {
	return pulumi.ToOutput(in).(TrackAttributePtrOutput)
}

func (in *trackAttributePtr) ToTrackAttributePtrOutputWithContext(ctx context.Context) TrackAttributePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrackAttributePtrOutput)
}

func (in *trackAttributePtr) ToOutput(ctx context.Context) pulumix.Output[*TrackAttribute] {
	return pulumix.Output[*TrackAttribute]{
		OutputState: in.ToTrackAttributePtrOutputWithContext(ctx).OutputState,
	}
}

// The Video Sync Mode
type VideoSyncMode string

const (
	// This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr.
	VideoSyncModeAuto = VideoSyncMode("Auto")
	// The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior
	VideoSyncModePassthrough = VideoSyncMode("Passthrough")
	// Input frames will be repeated and/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value
	VideoSyncModeCfr = VideoSyncMode("Cfr")
	// Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input
	VideoSyncModeVfr = VideoSyncMode("Vfr")
)

func (VideoSyncMode) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoSyncMode)(nil)).Elem()
}

func (e VideoSyncMode) ToVideoSyncModeOutput() VideoSyncModeOutput {
	return pulumi.ToOutput(e).(VideoSyncModeOutput)
}

func (e VideoSyncMode) ToVideoSyncModeOutputWithContext(ctx context.Context) VideoSyncModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VideoSyncModeOutput)
}

func (e VideoSyncMode) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return e.ToVideoSyncModePtrOutputWithContext(context.Background())
}

func (e VideoSyncMode) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return VideoSyncMode(e).ToVideoSyncModeOutputWithContext(ctx).ToVideoSyncModePtrOutputWithContext(ctx)
}

func (e VideoSyncMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VideoSyncMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VideoSyncMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VideoSyncMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VideoSyncModeOutput struct{ *pulumi.OutputState }

func (VideoSyncModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoSyncMode)(nil)).Elem()
}

func (o VideoSyncModeOutput) ToVideoSyncModeOutput() VideoSyncModeOutput {
	return o
}

func (o VideoSyncModeOutput) ToVideoSyncModeOutputWithContext(ctx context.Context) VideoSyncModeOutput {
	return o
}

func (o VideoSyncModeOutput) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return o.ToVideoSyncModePtrOutputWithContext(context.Background())
}

func (o VideoSyncModeOutput) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VideoSyncMode) *VideoSyncMode {
		return &v
	}).(VideoSyncModePtrOutput)
}

func (o VideoSyncModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VideoSyncModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VideoSyncMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VideoSyncModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VideoSyncModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VideoSyncMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VideoSyncModePtrOutput struct{ *pulumi.OutputState }

func (VideoSyncModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoSyncMode)(nil)).Elem()
}

func (o VideoSyncModePtrOutput) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return o
}

func (o VideoSyncModePtrOutput) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return o
}

func (o VideoSyncModePtrOutput) Elem() VideoSyncModeOutput {
	return o.ApplyT(func(v *VideoSyncMode) VideoSyncMode {
		if v != nil {
			return *v
		}
		var ret VideoSyncMode
		return ret
	}).(VideoSyncModeOutput)
}

func (o VideoSyncModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VideoSyncModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VideoSyncMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VideoSyncModeInput is an input type that accepts values of the VideoSyncMode enum
// A concrete instance of `VideoSyncModeInput` can be one of the following:
//
//	VideoSyncModeAuto
//	VideoSyncModePassthrough
//	VideoSyncModeCfr
//	VideoSyncModeVfr
type VideoSyncModeInput interface {
	pulumi.Input

	ToVideoSyncModeOutput() VideoSyncModeOutput
	ToVideoSyncModeOutputWithContext(context.Context) VideoSyncModeOutput
}

var videoSyncModePtrType = reflect.TypeOf((**VideoSyncMode)(nil)).Elem()

type VideoSyncModePtrInput interface {
	pulumi.Input

	ToVideoSyncModePtrOutput() VideoSyncModePtrOutput
	ToVideoSyncModePtrOutputWithContext(context.Context) VideoSyncModePtrOutput
}

type videoSyncModePtr string

func VideoSyncModePtr(v string) VideoSyncModePtrInput {
	return (*videoSyncModePtr)(&v)
}

func (*videoSyncModePtr) ElementType() reflect.Type {
	return videoSyncModePtrType
}

func (in *videoSyncModePtr) ToVideoSyncModePtrOutput() VideoSyncModePtrOutput {
	return pulumi.ToOutput(in).(VideoSyncModePtrOutput)
}

func (in *videoSyncModePtr) ToVideoSyncModePtrOutputWithContext(ctx context.Context) VideoSyncModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VideoSyncModePtrOutput)
}

func (in *videoSyncModePtr) ToOutput(ctx context.Context) pulumix.Output[*VideoSyncMode] {
	return pulumix.Output[*VideoSyncMode]{
		OutputState: in.ToVideoSyncModePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AacAudioProfileOutput{})
	pulumi.RegisterOutputType(AacAudioProfilePtrOutput{})
	pulumi.RegisterOutputType(AnalysisResolutionOutput{})
	pulumi.RegisterOutputType(AnalysisResolutionPtrOutput{})
	pulumi.RegisterOutputType(AttributeFilterOutput{})
	pulumi.RegisterOutputType(AttributeFilterPtrOutput{})
	pulumi.RegisterOutputType(AudioAnalysisModeOutput{})
	pulumi.RegisterOutputType(AudioAnalysisModePtrOutput{})
	pulumi.RegisterOutputType(BlurTypeOutput{})
	pulumi.RegisterOutputType(BlurTypePtrOutput{})
	pulumi.RegisterOutputType(ChannelMappingOutput{})
	pulumi.RegisterOutputType(ChannelMappingPtrOutput{})
	pulumi.RegisterOutputType(ComplexityOutput{})
	pulumi.RegisterOutputType(ComplexityPtrOutput{})
	pulumi.RegisterOutputType(DeinterlaceModeOutput{})
	pulumi.RegisterOutputType(DeinterlaceModePtrOutput{})
	pulumi.RegisterOutputType(DeinterlaceParityOutput{})
	pulumi.RegisterOutputType(DeinterlaceParityPtrOutput{})
	pulumi.RegisterOutputType(EncoderNamedPresetOutput{})
	pulumi.RegisterOutputType(EncoderNamedPresetPtrOutput{})
	pulumi.RegisterOutputType(EntropyModeOutput{})
	pulumi.RegisterOutputType(EntropyModePtrOutput{})
	pulumi.RegisterOutputType(FaceRedactorModeOutput{})
	pulumi.RegisterOutputType(FaceRedactorModePtrOutput{})
	pulumi.RegisterOutputType(H264ComplexityOutput{})
	pulumi.RegisterOutputType(H264ComplexityPtrOutput{})
	pulumi.RegisterOutputType(H264RateControlModeOutput{})
	pulumi.RegisterOutputType(H264RateControlModePtrOutput{})
	pulumi.RegisterOutputType(H264VideoProfileOutput{})
	pulumi.RegisterOutputType(H264VideoProfilePtrOutput{})
	pulumi.RegisterOutputType(H265ComplexityOutput{})
	pulumi.RegisterOutputType(H265ComplexityPtrOutput{})
	pulumi.RegisterOutputType(H265VideoProfileOutput{})
	pulumi.RegisterOutputType(H265VideoProfilePtrOutput{})
	pulumi.RegisterOutputType(InsightsTypeOutput{})
	pulumi.RegisterOutputType(InsightsTypePtrOutput{})
	pulumi.RegisterOutputType(InterleaveOutputOutput{})
	pulumi.RegisterOutputType(InterleaveOutputPtrOutput{})
	pulumi.RegisterOutputType(OnErrorTypeOutput{})
	pulumi.RegisterOutputType(OnErrorTypePtrOutput{})
	pulumi.RegisterOutputType(PriorityOutput{})
	pulumi.RegisterOutputType(PriorityPtrOutput{})
	pulumi.RegisterOutputType(RotationOutput{})
	pulumi.RegisterOutputType(RotationPtrOutput{})
	pulumi.RegisterOutputType(StretchModeOutput{})
	pulumi.RegisterOutputType(StretchModePtrOutput{})
	pulumi.RegisterOutputType(TrackAttributeOutput{})
	pulumi.RegisterOutputType(TrackAttributePtrOutput{})
	pulumi.RegisterOutputType(VideoSyncModeOutput{})
	pulumi.RegisterOutputType(VideoSyncModePtrOutput{})
}
