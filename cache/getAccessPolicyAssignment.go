// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the list of assignments for an access policy of a redis cache
// Azure REST API version: 2023-05-01-preview.
func LookupAccessPolicyAssignment(ctx *pulumi.Context, args *LookupAccessPolicyAssignmentArgs, opts ...pulumi.InvokeOption) (*LookupAccessPolicyAssignmentResult, error) {
	var rv LookupAccessPolicyAssignmentResult
	err := ctx.Invoke("azure-native:cache:getAccessPolicyAssignment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAccessPolicyAssignmentArgs struct {
	// The name of the access policy assignment.
	AccessPolicyAssignmentName string `pulumi:"accessPolicyAssignmentName"`
	// The name of the Redis cache.
	CacheName string `pulumi:"cacheName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Response to an operation on access policy assignment
type LookupAccessPolicyAssignmentResult struct {
	// The name of the access policy that is being assigned
	AccessPolicyName string `pulumi:"accessPolicyName"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Object Id to assign access policy to
	ObjectId string `pulumi:"objectId"`
	// User friendly name for object id. Also represents username for token based authentication
	ObjectIdAlias string `pulumi:"objectIdAlias"`
	// Provisioning state of an access policy assignment set
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupAccessPolicyAssignmentOutput(ctx *pulumi.Context, args LookupAccessPolicyAssignmentOutputArgs, opts ...pulumi.InvokeOption) LookupAccessPolicyAssignmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessPolicyAssignmentResult, error) {
			args := v.(LookupAccessPolicyAssignmentArgs)
			r, err := LookupAccessPolicyAssignment(ctx, &args, opts...)
			var s LookupAccessPolicyAssignmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessPolicyAssignmentResultOutput)
}

type LookupAccessPolicyAssignmentOutputArgs struct {
	// The name of the access policy assignment.
	AccessPolicyAssignmentName pulumi.StringInput `pulumi:"accessPolicyAssignmentName"`
	// The name of the Redis cache.
	CacheName pulumi.StringInput `pulumi:"cacheName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAccessPolicyAssignmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessPolicyAssignmentArgs)(nil)).Elem()
}

// Response to an operation on access policy assignment
type LookupAccessPolicyAssignmentResultOutput struct{ *pulumi.OutputState }

func (LookupAccessPolicyAssignmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessPolicyAssignmentResult)(nil)).Elem()
}

func (o LookupAccessPolicyAssignmentResultOutput) ToLookupAccessPolicyAssignmentResultOutput() LookupAccessPolicyAssignmentResultOutput {
	return o
}

func (o LookupAccessPolicyAssignmentResultOutput) ToLookupAccessPolicyAssignmentResultOutputWithContext(ctx context.Context) LookupAccessPolicyAssignmentResultOutput {
	return o
}

// The name of the access policy that is being assigned
func (o LookupAccessPolicyAssignmentResultOutput) AccessPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyAssignmentResult) string { return v.AccessPolicyName }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupAccessPolicyAssignmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyAssignmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupAccessPolicyAssignmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyAssignmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Object Id to assign access policy to
func (o LookupAccessPolicyAssignmentResultOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyAssignmentResult) string { return v.ObjectId }).(pulumi.StringOutput)
}

// User friendly name for object id. Also represents username for token based authentication
func (o LookupAccessPolicyAssignmentResultOutput) ObjectIdAlias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyAssignmentResult) string { return v.ObjectIdAlias }).(pulumi.StringOutput)
}

// Provisioning state of an access policy assignment set
func (o LookupAccessPolicyAssignmentResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyAssignmentResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupAccessPolicyAssignmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyAssignmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessPolicyAssignmentResultOutput{})
}
