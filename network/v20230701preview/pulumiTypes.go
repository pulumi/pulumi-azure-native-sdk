// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An A record.
type ARecord struct {
	// The IPv4 address of this A record.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

// ARecordInput is an input type that accepts ARecordArgs and ARecordOutput values.
// You can construct a concrete instance of `ARecordInput` via:
//
//	ARecordArgs{...}
type ARecordInput interface {
	pulumi.Input

	ToARecordOutput() ARecordOutput
	ToARecordOutputWithContext(context.Context) ARecordOutput
}

// An A record.
type ARecordArgs struct {
	// The IPv4 address of this A record.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
}

func (ARecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecord)(nil)).Elem()
}

func (i ARecordArgs) ToARecordOutput() ARecordOutput {
	return i.ToARecordOutputWithContext(context.Background())
}

func (i ARecordArgs) ToARecordOutputWithContext(ctx context.Context) ARecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordOutput)
}

// ARecordArrayInput is an input type that accepts ARecordArray and ARecordArrayOutput values.
// You can construct a concrete instance of `ARecordArrayInput` via:
//
//	ARecordArray{ ARecordArgs{...} }
type ARecordArrayInput interface {
	pulumi.Input

	ToARecordArrayOutput() ARecordArrayOutput
	ToARecordArrayOutputWithContext(context.Context) ARecordArrayOutput
}

type ARecordArray []ARecordInput

func (ARecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecord)(nil)).Elem()
}

func (i ARecordArray) ToARecordArrayOutput() ARecordArrayOutput {
	return i.ToARecordArrayOutputWithContext(context.Background())
}

func (i ARecordArray) ToARecordArrayOutputWithContext(ctx context.Context) ARecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordArrayOutput)
}

// An A record.
type ARecordOutput struct{ *pulumi.OutputState }

func (ARecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecord)(nil)).Elem()
}

func (o ARecordOutput) ToARecordOutput() ARecordOutput {
	return o
}

func (o ARecordOutput) ToARecordOutputWithContext(ctx context.Context) ARecordOutput {
	return o
}

// The IPv4 address of this A record.
func (o ARecordOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ARecord) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

type ARecordArrayOutput struct{ *pulumi.OutputState }

func (ARecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecord)(nil)).Elem()
}

func (o ARecordArrayOutput) ToARecordArrayOutput() ARecordArrayOutput {
	return o
}

func (o ARecordArrayOutput) ToARecordArrayOutputWithContext(ctx context.Context) ARecordArrayOutput {
	return o
}

func (o ARecordArrayOutput) Index(i pulumi.IntInput) ARecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ARecord {
		return vs[0].([]ARecord)[vs[1].(int)]
	}).(ARecordOutput)
}

// An A record.
type ARecordResponse struct {
	// The IPv4 address of this A record.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

// An A record.
type ARecordResponseOutput struct{ *pulumi.OutputState }

func (ARecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecordResponse)(nil)).Elem()
}

func (o ARecordResponseOutput) ToARecordResponseOutput() ARecordResponseOutput {
	return o
}

func (o ARecordResponseOutput) ToARecordResponseOutputWithContext(ctx context.Context) ARecordResponseOutput {
	return o
}

// The IPv4 address of this A record.
func (o ARecordResponseOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ARecordResponse) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

type ARecordResponseArrayOutput struct{ *pulumi.OutputState }

func (ARecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecordResponse)(nil)).Elem()
}

func (o ARecordResponseArrayOutput) ToARecordResponseArrayOutput() ARecordResponseArrayOutput {
	return o
}

func (o ARecordResponseArrayOutput) ToARecordResponseArrayOutputWithContext(ctx context.Context) ARecordResponseArrayOutput {
	return o
}

func (o ARecordResponseArrayOutput) Index(i pulumi.IntInput) ARecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ARecordResponse {
		return vs[0].([]ARecordResponse)[vs[1].(int)]
	}).(ARecordResponseOutput)
}

// An AAAA record.
type AaaaRecord struct {
	// The IPv6 address of this AAAA record.
	Ipv6Address *string `pulumi:"ipv6Address"`
}

// AaaaRecordInput is an input type that accepts AaaaRecordArgs and AaaaRecordOutput values.
// You can construct a concrete instance of `AaaaRecordInput` via:
//
//	AaaaRecordArgs{...}
type AaaaRecordInput interface {
	pulumi.Input

	ToAaaaRecordOutput() AaaaRecordOutput
	ToAaaaRecordOutputWithContext(context.Context) AaaaRecordOutput
}

// An AAAA record.
type AaaaRecordArgs struct {
	// The IPv6 address of this AAAA record.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
}

func (AaaaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil)).Elem()
}

func (i AaaaRecordArgs) ToAaaaRecordOutput() AaaaRecordOutput {
	return i.ToAaaaRecordOutputWithContext(context.Background())
}

func (i AaaaRecordArgs) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordOutput)
}

// AaaaRecordArrayInput is an input type that accepts AaaaRecordArray and AaaaRecordArrayOutput values.
// You can construct a concrete instance of `AaaaRecordArrayInput` via:
//
//	AaaaRecordArray{ AaaaRecordArgs{...} }
type AaaaRecordArrayInput interface {
	pulumi.Input

	ToAaaaRecordArrayOutput() AaaaRecordArrayOutput
	ToAaaaRecordArrayOutputWithContext(context.Context) AaaaRecordArrayOutput
}

type AaaaRecordArray []AaaaRecordInput

func (AaaaRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecord)(nil)).Elem()
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return i.ToAaaaRecordArrayOutputWithContext(context.Background())
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordArrayOutput)
}

// An AAAA record.
type AaaaRecordOutput struct{ *pulumi.OutputState }

func (AaaaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil)).Elem()
}

func (o AaaaRecordOutput) ToAaaaRecordOutput() AaaaRecordOutput {
	return o
}

func (o AaaaRecordOutput) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return o
}

// The IPv6 address of this AAAA record.
func (o AaaaRecordOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaaRecord) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

type AaaaRecordArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecord)(nil)).Elem()
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) Index(i pulumi.IntInput) AaaaRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecord {
		return vs[0].([]AaaaRecord)[vs[1].(int)]
	}).(AaaaRecordOutput)
}

// An AAAA record.
type AaaaRecordResponse struct {
	// The IPv6 address of this AAAA record.
	Ipv6Address *string `pulumi:"ipv6Address"`
}

// An AAAA record.
type AaaaRecordResponseOutput struct{ *pulumi.OutputState }

func (AaaaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecordResponse)(nil)).Elem()
}

func (o AaaaRecordResponseOutput) ToAaaaRecordResponseOutput() AaaaRecordResponseOutput {
	return o
}

func (o AaaaRecordResponseOutput) ToAaaaRecordResponseOutputWithContext(ctx context.Context) AaaaRecordResponseOutput {
	return o
}

// The IPv6 address of this AAAA record.
func (o AaaaRecordResponseOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaaRecordResponse) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

type AaaaRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecordResponse)(nil)).Elem()
}

func (o AaaaRecordResponseArrayOutput) ToAaaaRecordResponseArrayOutput() AaaaRecordResponseArrayOutput {
	return o
}

func (o AaaaRecordResponseArrayOutput) ToAaaaRecordResponseArrayOutputWithContext(ctx context.Context) AaaaRecordResponseArrayOutput {
	return o
}

func (o AaaaRecordResponseArrayOutput) Index(i pulumi.IntInput) AaaaRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecordResponse {
		return vs[0].([]AaaaRecordResponse)[vs[1].(int)]
	}).(AaaaRecordResponseOutput)
}

// A CAA record.
type CaaRecord struct {
	// The flags for this CAA record as an integer between 0 and 255.
	Flags *int `pulumi:"flags"`
	// The tag for this CAA record.
	Tag *string `pulumi:"tag"`
	// The value for this CAA record.
	Value *string `pulumi:"value"`
}

// CaaRecordInput is an input type that accepts CaaRecordArgs and CaaRecordOutput values.
// You can construct a concrete instance of `CaaRecordInput` via:
//
//	CaaRecordArgs{...}
type CaaRecordInput interface {
	pulumi.Input

	ToCaaRecordOutput() CaaRecordOutput
	ToCaaRecordOutputWithContext(context.Context) CaaRecordOutput
}

// A CAA record.
type CaaRecordArgs struct {
	// The flags for this CAA record as an integer between 0 and 255.
	Flags pulumi.IntPtrInput `pulumi:"flags"`
	// The tag for this CAA record.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The value for this CAA record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CaaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecord)(nil)).Elem()
}

func (i CaaRecordArgs) ToCaaRecordOutput() CaaRecordOutput {
	return i.ToCaaRecordOutputWithContext(context.Background())
}

func (i CaaRecordArgs) ToCaaRecordOutputWithContext(ctx context.Context) CaaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordOutput)
}

// CaaRecordArrayInput is an input type that accepts CaaRecordArray and CaaRecordArrayOutput values.
// You can construct a concrete instance of `CaaRecordArrayInput` via:
//
//	CaaRecordArray{ CaaRecordArgs{...} }
type CaaRecordArrayInput interface {
	pulumi.Input

	ToCaaRecordArrayOutput() CaaRecordArrayOutput
	ToCaaRecordArrayOutputWithContext(context.Context) CaaRecordArrayOutput
}

type CaaRecordArray []CaaRecordInput

func (CaaRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecord)(nil)).Elem()
}

func (i CaaRecordArray) ToCaaRecordArrayOutput() CaaRecordArrayOutput {
	return i.ToCaaRecordArrayOutputWithContext(context.Background())
}

func (i CaaRecordArray) ToCaaRecordArrayOutputWithContext(ctx context.Context) CaaRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordArrayOutput)
}

// A CAA record.
type CaaRecordOutput struct{ *pulumi.OutputState }

func (CaaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecord)(nil)).Elem()
}

func (o CaaRecordOutput) ToCaaRecordOutput() CaaRecordOutput {
	return o
}

func (o CaaRecordOutput) ToCaaRecordOutputWithContext(ctx context.Context) CaaRecordOutput {
	return o
}

// The flags for this CAA record as an integer between 0 and 255.
func (o CaaRecordOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaaRecord) *int { return v.Flags }).(pulumi.IntPtrOutput)
}

// The tag for this CAA record.
func (o CaaRecordOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecord) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The value for this CAA record.
func (o CaaRecordOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecord) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CaaRecordArrayOutput struct{ *pulumi.OutputState }

func (CaaRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecord)(nil)).Elem()
}

func (o CaaRecordArrayOutput) ToCaaRecordArrayOutput() CaaRecordArrayOutput {
	return o
}

func (o CaaRecordArrayOutput) ToCaaRecordArrayOutputWithContext(ctx context.Context) CaaRecordArrayOutput {
	return o
}

func (o CaaRecordArrayOutput) Index(i pulumi.IntInput) CaaRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CaaRecord {
		return vs[0].([]CaaRecord)[vs[1].(int)]
	}).(CaaRecordOutput)
}

// A CAA record.
type CaaRecordResponse struct {
	// The flags for this CAA record as an integer between 0 and 255.
	Flags *int `pulumi:"flags"`
	// The tag for this CAA record.
	Tag *string `pulumi:"tag"`
	// The value for this CAA record.
	Value *string `pulumi:"value"`
}

// A CAA record.
type CaaRecordResponseOutput struct{ *pulumi.OutputState }

func (CaaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecordResponse)(nil)).Elem()
}

func (o CaaRecordResponseOutput) ToCaaRecordResponseOutput() CaaRecordResponseOutput {
	return o
}

func (o CaaRecordResponseOutput) ToCaaRecordResponseOutputWithContext(ctx context.Context) CaaRecordResponseOutput {
	return o
}

// The flags for this CAA record as an integer between 0 and 255.
func (o CaaRecordResponseOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaaRecordResponse) *int { return v.Flags }).(pulumi.IntPtrOutput)
}

// The tag for this CAA record.
func (o CaaRecordResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecordResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The value for this CAA record.
func (o CaaRecordResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecordResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CaaRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (CaaRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecordResponse)(nil)).Elem()
}

func (o CaaRecordResponseArrayOutput) ToCaaRecordResponseArrayOutput() CaaRecordResponseArrayOutput {
	return o
}

func (o CaaRecordResponseArrayOutput) ToCaaRecordResponseArrayOutputWithContext(ctx context.Context) CaaRecordResponseArrayOutput {
	return o
}

func (o CaaRecordResponseArrayOutput) Index(i pulumi.IntInput) CaaRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CaaRecordResponse {
		return vs[0].([]CaaRecordResponse)[vs[1].(int)]
	}).(CaaRecordResponseOutput)
}

// A CNAME record.
type CnameRecord struct {
	// The canonical name for this CNAME record.
	Cname *string `pulumi:"cname"`
}

// CnameRecordInput is an input type that accepts CnameRecordArgs and CnameRecordOutput values.
// You can construct a concrete instance of `CnameRecordInput` via:
//
//	CnameRecordArgs{...}
type CnameRecordInput interface {
	pulumi.Input

	ToCnameRecordOutput() CnameRecordOutput
	ToCnameRecordOutputWithContext(context.Context) CnameRecordOutput
}

// A CNAME record.
type CnameRecordArgs struct {
	// The canonical name for this CNAME record.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
}

func (CnameRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecord)(nil)).Elem()
}

func (i CnameRecordArgs) ToCnameRecordOutput() CnameRecordOutput {
	return i.ToCnameRecordOutputWithContext(context.Background())
}

func (i CnameRecordArgs) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordOutput)
}

func (i CnameRecordArgs) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return i.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (i CnameRecordArgs) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordOutput).ToCnameRecordPtrOutputWithContext(ctx)
}

// CnameRecordPtrInput is an input type that accepts CnameRecordArgs, CnameRecordPtr and CnameRecordPtrOutput values.
// You can construct a concrete instance of `CnameRecordPtrInput` via:
//
//	        CnameRecordArgs{...}
//
//	or:
//
//	        nil
type CnameRecordPtrInput interface {
	pulumi.Input

	ToCnameRecordPtrOutput() CnameRecordPtrOutput
	ToCnameRecordPtrOutputWithContext(context.Context) CnameRecordPtrOutput
}

type cnameRecordPtrType CnameRecordArgs

func CnameRecordPtr(v *CnameRecordArgs) CnameRecordPtrInput {
	return (*cnameRecordPtrType)(v)
}

func (*cnameRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (i *cnameRecordPtrType) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return i.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (i *cnameRecordPtrType) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordPtrOutput)
}

// A CNAME record.
type CnameRecordOutput struct{ *pulumi.OutputState }

func (CnameRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecord)(nil)).Elem()
}

func (o CnameRecordOutput) ToCnameRecordOutput() CnameRecordOutput {
	return o
}

func (o CnameRecordOutput) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return o
}

func (o CnameRecordOutput) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return o.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (o CnameRecordOutput) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CnameRecord) *CnameRecord {
		return &v
	}).(CnameRecordPtrOutput)
}

// The canonical name for this CNAME record.
func (o CnameRecordOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CnameRecord) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

type CnameRecordPtrOutput struct{ *pulumi.OutputState }

func (CnameRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (o CnameRecordPtrOutput) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return o
}

func (o CnameRecordPtrOutput) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return o
}

func (o CnameRecordPtrOutput) Elem() CnameRecordOutput {
	return o.ApplyT(func(v *CnameRecord) CnameRecord {
		if v != nil {
			return *v
		}
		var ret CnameRecord
		return ret
	}).(CnameRecordOutput)
}

// The canonical name for this CNAME record.
func (o CnameRecordPtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CnameRecord) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// A CNAME record.
type CnameRecordResponse struct {
	// The canonical name for this CNAME record.
	Cname *string `pulumi:"cname"`
}

// A CNAME record.
type CnameRecordResponseOutput struct{ *pulumi.OutputState }

func (CnameRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecordResponse)(nil)).Elem()
}

func (o CnameRecordResponseOutput) ToCnameRecordResponseOutput() CnameRecordResponseOutput {
	return o
}

func (o CnameRecordResponseOutput) ToCnameRecordResponseOutputWithContext(ctx context.Context) CnameRecordResponseOutput {
	return o
}

// The canonical name for this CNAME record.
func (o CnameRecordResponseOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CnameRecordResponse) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

type CnameRecordResponsePtrOutput struct{ *pulumi.OutputState }

func (CnameRecordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecordResponse)(nil)).Elem()
}

func (o CnameRecordResponsePtrOutput) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return o
}

func (o CnameRecordResponsePtrOutput) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return o
}

func (o CnameRecordResponsePtrOutput) Elem() CnameRecordResponseOutput {
	return o.ApplyT(func(v *CnameRecordResponse) CnameRecordResponse {
		if v != nil {
			return *v
		}
		var ret CnameRecordResponse
		return ret
	}).(CnameRecordResponseOutput)
}

// The canonical name for this CNAME record.
func (o CnameRecordResponsePtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CnameRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// The delegation signer information.
type DelegationSignerInfoResponse struct {
	// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
	DigestAlgorithmType int `pulumi:"digestAlgorithmType"`
	// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
	DigestValue string `pulumi:"digestValue"`
	// The record represents a delegation signer (DS) record.
	Record string `pulumi:"record"`
}

// The delegation signer information.
type DelegationSignerInfoResponseOutput struct{ *pulumi.OutputState }

func (DelegationSignerInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegationSignerInfoResponse)(nil)).Elem()
}

func (o DelegationSignerInfoResponseOutput) ToDelegationSignerInfoResponseOutput() DelegationSignerInfoResponseOutput {
	return o
}

func (o DelegationSignerInfoResponseOutput) ToDelegationSignerInfoResponseOutputWithContext(ctx context.Context) DelegationSignerInfoResponseOutput {
	return o
}

// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
func (o DelegationSignerInfoResponseOutput) DigestAlgorithmType() pulumi.IntOutput {
	return o.ApplyT(func(v DelegationSignerInfoResponse) int { return v.DigestAlgorithmType }).(pulumi.IntOutput)
}

// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
func (o DelegationSignerInfoResponseOutput) DigestValue() pulumi.StringOutput {
	return o.ApplyT(func(v DelegationSignerInfoResponse) string { return v.DigestValue }).(pulumi.StringOutput)
}

// The record represents a delegation signer (DS) record.
func (o DelegationSignerInfoResponseOutput) Record() pulumi.StringOutput {
	return o.ApplyT(func(v DelegationSignerInfoResponse) string { return v.Record }).(pulumi.StringOutput)
}

type DelegationSignerInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DelegationSignerInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DelegationSignerInfoResponse)(nil)).Elem()
}

func (o DelegationSignerInfoResponseArrayOutput) ToDelegationSignerInfoResponseArrayOutput() DelegationSignerInfoResponseArrayOutput {
	return o
}

func (o DelegationSignerInfoResponseArrayOutput) ToDelegationSignerInfoResponseArrayOutputWithContext(ctx context.Context) DelegationSignerInfoResponseArrayOutput {
	return o
}

func (o DelegationSignerInfoResponseArrayOutput) Index(i pulumi.IntInput) DelegationSignerInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DelegationSignerInfoResponse {
		return vs[0].([]DelegationSignerInfoResponse)[vs[1].(int)]
	}).(DelegationSignerInfoResponseOutput)
}

// A digest.
type Digest struct {
	// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
	AlgorithmType *int `pulumi:"algorithmType"`
	// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
	Value *string `pulumi:"value"`
}

// DigestInput is an input type that accepts DigestArgs and DigestOutput values.
// You can construct a concrete instance of `DigestInput` via:
//
//	DigestArgs{...}
type DigestInput interface {
	pulumi.Input

	ToDigestOutput() DigestOutput
	ToDigestOutputWithContext(context.Context) DigestOutput
}

// A digest.
type DigestArgs struct {
	// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
	AlgorithmType pulumi.IntPtrInput `pulumi:"algorithmType"`
	// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DigestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (i DigestArgs) ToDigestOutput() DigestOutput {
	return i.ToDigestOutputWithContext(context.Background())
}

func (i DigestArgs) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestOutput)
}

func (i DigestArgs) ToDigestPtrOutput() DigestPtrOutput {
	return i.ToDigestPtrOutputWithContext(context.Background())
}

func (i DigestArgs) ToDigestPtrOutputWithContext(ctx context.Context) DigestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestOutput).ToDigestPtrOutputWithContext(ctx)
}

// DigestPtrInput is an input type that accepts DigestArgs, DigestPtr and DigestPtrOutput values.
// You can construct a concrete instance of `DigestPtrInput` via:
//
//	        DigestArgs{...}
//
//	or:
//
//	        nil
type DigestPtrInput interface {
	pulumi.Input

	ToDigestPtrOutput() DigestPtrOutput
	ToDigestPtrOutputWithContext(context.Context) DigestPtrOutput
}

type digestPtrType DigestArgs

func DigestPtr(v *DigestArgs) DigestPtrInput {
	return (*digestPtrType)(v)
}

func (*digestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Digest)(nil)).Elem()
}

func (i *digestPtrType) ToDigestPtrOutput() DigestPtrOutput {
	return i.ToDigestPtrOutputWithContext(context.Background())
}

func (i *digestPtrType) ToDigestPtrOutputWithContext(ctx context.Context) DigestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigestPtrOutput)
}

// A digest.
type DigestOutput struct{ *pulumi.OutputState }

func (DigestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Digest)(nil)).Elem()
}

func (o DigestOutput) ToDigestOutput() DigestOutput {
	return o
}

func (o DigestOutput) ToDigestOutputWithContext(ctx context.Context) DigestOutput {
	return o
}

func (o DigestOutput) ToDigestPtrOutput() DigestPtrOutput {
	return o.ToDigestPtrOutputWithContext(context.Background())
}

func (o DigestOutput) ToDigestPtrOutputWithContext(ctx context.Context) DigestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Digest) *Digest {
		return &v
	}).(DigestPtrOutput)
}

// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
func (o DigestOutput) AlgorithmType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Digest) *int { return v.AlgorithmType }).(pulumi.IntPtrOutput)
}

// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
func (o DigestOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Digest) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DigestPtrOutput struct{ *pulumi.OutputState }

func (DigestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Digest)(nil)).Elem()
}

func (o DigestPtrOutput) ToDigestPtrOutput() DigestPtrOutput {
	return o
}

func (o DigestPtrOutput) ToDigestPtrOutputWithContext(ctx context.Context) DigestPtrOutput {
	return o
}

func (o DigestPtrOutput) Elem() DigestOutput {
	return o.ApplyT(func(v *Digest) Digest {
		if v != nil {
			return *v
		}
		var ret Digest
		return ret
	}).(DigestOutput)
}

// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
func (o DigestPtrOutput) AlgorithmType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Digest) *int {
		if v == nil {
			return nil
		}
		return v.AlgorithmType
	}).(pulumi.IntPtrOutput)
}

// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
func (o DigestPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Digest) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A digest.
type DigestResponse struct {
	// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
	AlgorithmType *int `pulumi:"algorithmType"`
	// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
	Value *string `pulumi:"value"`
}

// A digest.
type DigestResponseOutput struct{ *pulumi.OutputState }

func (DigestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DigestResponse)(nil)).Elem()
}

func (o DigestResponseOutput) ToDigestResponseOutput() DigestResponseOutput {
	return o
}

func (o DigestResponseOutput) ToDigestResponseOutputWithContext(ctx context.Context) DigestResponseOutput {
	return o
}

// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
func (o DigestResponseOutput) AlgorithmType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DigestResponse) *int { return v.AlgorithmType }).(pulumi.IntPtrOutput)
}

// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
func (o DigestResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DigestResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DigestResponsePtrOutput struct{ *pulumi.OutputState }

func (DigestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DigestResponse)(nil)).Elem()
}

func (o DigestResponsePtrOutput) ToDigestResponsePtrOutput() DigestResponsePtrOutput {
	return o
}

func (o DigestResponsePtrOutput) ToDigestResponsePtrOutputWithContext(ctx context.Context) DigestResponsePtrOutput {
	return o
}

func (o DigestResponsePtrOutput) Elem() DigestResponseOutput {
	return o.ApplyT(func(v *DigestResponse) DigestResponse {
		if v != nil {
			return *v
		}
		var ret DigestResponse
		return ret
	}).(DigestResponseOutput)
}

// The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
func (o DigestResponsePtrOutput) AlgorithmType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DigestResponse) *int {
		if v == nil {
			return nil
		}
		return v.AlgorithmType
	}).(pulumi.IntPtrOutput)
}

// The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record.
func (o DigestResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DigestResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Represents a single Azure resource and its referencing DNS records.
type DnsResourceReferenceResponse struct {
	// A list of dns Records
	DnsResources []SubResourceResponse `pulumi:"dnsResources"`
	// A reference to an azure resource from where the dns resource value is taken.
	TargetResource *SubResourceResponse `pulumi:"targetResource"`
}

// Represents a single Azure resource and its referencing DNS records.
type DnsResourceReferenceResponseOutput struct{ *pulumi.OutputState }

func (DnsResourceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsResourceReferenceResponse)(nil)).Elem()
}

func (o DnsResourceReferenceResponseOutput) ToDnsResourceReferenceResponseOutput() DnsResourceReferenceResponseOutput {
	return o
}

func (o DnsResourceReferenceResponseOutput) ToDnsResourceReferenceResponseOutputWithContext(ctx context.Context) DnsResourceReferenceResponseOutput {
	return o
}

// A list of dns Records
func (o DnsResourceReferenceResponseOutput) DnsResources() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v DnsResourceReferenceResponse) []SubResourceResponse { return v.DnsResources }).(SubResourceResponseArrayOutput)
}

// A reference to an azure resource from where the dns resource value is taken.
func (o DnsResourceReferenceResponseOutput) TargetResource() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v DnsResourceReferenceResponse) *SubResourceResponse { return v.TargetResource }).(SubResourceResponsePtrOutput)
}

type DnsResourceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (DnsResourceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsResourceReferenceResponse)(nil)).Elem()
}

func (o DnsResourceReferenceResponseArrayOutput) ToDnsResourceReferenceResponseArrayOutput() DnsResourceReferenceResponseArrayOutput {
	return o
}

func (o DnsResourceReferenceResponseArrayOutput) ToDnsResourceReferenceResponseArrayOutputWithContext(ctx context.Context) DnsResourceReferenceResponseArrayOutput {
	return o
}

func (o DnsResourceReferenceResponseArrayOutput) Index(i pulumi.IntInput) DnsResourceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsResourceReferenceResponse {
		return vs[0].([]DnsResourceReferenceResponse)[vs[1].(int)]
	}).(DnsResourceReferenceResponseOutput)
}

// A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034
type DsRecord struct {
	// The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
	Algorithm *int `pulumi:"algorithm"`
	// The digest entity.
	Digest *Digest `pulumi:"digest"`
	// The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
	KeyTag *int `pulumi:"keyTag"`
}

// DsRecordInput is an input type that accepts DsRecordArgs and DsRecordOutput values.
// You can construct a concrete instance of `DsRecordInput` via:
//
//	DsRecordArgs{...}
type DsRecordInput interface {
	pulumi.Input

	ToDsRecordOutput() DsRecordOutput
	ToDsRecordOutputWithContext(context.Context) DsRecordOutput
}

// A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034
type DsRecordArgs struct {
	// The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
	Algorithm pulumi.IntPtrInput `pulumi:"algorithm"`
	// The digest entity.
	Digest DigestPtrInput `pulumi:"digest"`
	// The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
	KeyTag pulumi.IntPtrInput `pulumi:"keyTag"`
}

func (DsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DsRecord)(nil)).Elem()
}

func (i DsRecordArgs) ToDsRecordOutput() DsRecordOutput {
	return i.ToDsRecordOutputWithContext(context.Background())
}

func (i DsRecordArgs) ToDsRecordOutputWithContext(ctx context.Context) DsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordOutput)
}

// DsRecordArrayInput is an input type that accepts DsRecordArray and DsRecordArrayOutput values.
// You can construct a concrete instance of `DsRecordArrayInput` via:
//
//	DsRecordArray{ DsRecordArgs{...} }
type DsRecordArrayInput interface {
	pulumi.Input

	ToDsRecordArrayOutput() DsRecordArrayOutput
	ToDsRecordArrayOutputWithContext(context.Context) DsRecordArrayOutput
}

type DsRecordArray []DsRecordInput

func (DsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DsRecord)(nil)).Elem()
}

func (i DsRecordArray) ToDsRecordArrayOutput() DsRecordArrayOutput {
	return i.ToDsRecordArrayOutputWithContext(context.Background())
}

func (i DsRecordArray) ToDsRecordArrayOutputWithContext(ctx context.Context) DsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordArrayOutput)
}

// A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034
type DsRecordOutput struct{ *pulumi.OutputState }

func (DsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DsRecord)(nil)).Elem()
}

func (o DsRecordOutput) ToDsRecordOutput() DsRecordOutput {
	return o
}

func (o DsRecordOutput) ToDsRecordOutputWithContext(ctx context.Context) DsRecordOutput {
	return o
}

// The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
func (o DsRecordOutput) Algorithm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DsRecord) *int { return v.Algorithm }).(pulumi.IntPtrOutput)
}

// The digest entity.
func (o DsRecordOutput) Digest() DigestPtrOutput {
	return o.ApplyT(func(v DsRecord) *Digest { return v.Digest }).(DigestPtrOutput)
}

// The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
func (o DsRecordOutput) KeyTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DsRecord) *int { return v.KeyTag }).(pulumi.IntPtrOutput)
}

type DsRecordArrayOutput struct{ *pulumi.OutputState }

func (DsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DsRecord)(nil)).Elem()
}

func (o DsRecordArrayOutput) ToDsRecordArrayOutput() DsRecordArrayOutput {
	return o
}

func (o DsRecordArrayOutput) ToDsRecordArrayOutputWithContext(ctx context.Context) DsRecordArrayOutput {
	return o
}

func (o DsRecordArrayOutput) Index(i pulumi.IntInput) DsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DsRecord {
		return vs[0].([]DsRecord)[vs[1].(int)]
	}).(DsRecordOutput)
}

// A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034
type DsRecordResponse struct {
	// The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
	Algorithm *int `pulumi:"algorithm"`
	// The digest entity.
	Digest *DigestResponse `pulumi:"digest"`
	// The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
	KeyTag *int `pulumi:"keyTag"`
}

// A DS record. For more information about the DS record format, see RFC 4034: https://www.rfc-editor.org/rfc/rfc4034
type DsRecordResponseOutput struct{ *pulumi.OutputState }

func (DsRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DsRecordResponse)(nil)).Elem()
}

func (o DsRecordResponseOutput) ToDsRecordResponseOutput() DsRecordResponseOutput {
	return o
}

func (o DsRecordResponseOutput) ToDsRecordResponseOutputWithContext(ctx context.Context) DsRecordResponseOutput {
	return o
}

// The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
func (o DsRecordResponseOutput) Algorithm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DsRecordResponse) *int { return v.Algorithm }).(pulumi.IntPtrOutput)
}

// The digest entity.
func (o DsRecordResponseOutput) Digest() DigestResponsePtrOutput {
	return o.ApplyT(func(v DsRecordResponse) *DigestResponse { return v.Digest }).(DigestResponsePtrOutput)
}

// The key tag value is used to determine which DNSKEY Resource Record is used for signature verification.
func (o DsRecordResponseOutput) KeyTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DsRecordResponse) *int { return v.KeyTag }).(pulumi.IntPtrOutput)
}

type DsRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (DsRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DsRecordResponse)(nil)).Elem()
}

func (o DsRecordResponseArrayOutput) ToDsRecordResponseArrayOutput() DsRecordResponseArrayOutput {
	return o
}

func (o DsRecordResponseArrayOutput) ToDsRecordResponseArrayOutputWithContext(ctx context.Context) DsRecordResponseArrayOutput {
	return o
}

func (o DsRecordResponseArrayOutput) Index(i pulumi.IntInput) DsRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DsRecordResponse {
		return vs[0].([]DsRecordResponse)[vs[1].(int)]
	}).(DsRecordResponseOutput)
}

// An MX record.
type MxRecord struct {
	// The domain name of the mail host for this MX record.
	Exchange *string `pulumi:"exchange"`
	// The preference value for this MX record.
	Preference *int `pulumi:"preference"`
}

// MxRecordInput is an input type that accepts MxRecordArgs and MxRecordOutput values.
// You can construct a concrete instance of `MxRecordInput` via:
//
//	MxRecordArgs{...}
type MxRecordInput interface {
	pulumi.Input

	ToMxRecordOutput() MxRecordOutput
	ToMxRecordOutputWithContext(context.Context) MxRecordOutput
}

// An MX record.
type MxRecordArgs struct {
	// The domain name of the mail host for this MX record.
	Exchange pulumi.StringPtrInput `pulumi:"exchange"`
	// The preference value for this MX record.
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (MxRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecord)(nil)).Elem()
}

func (i MxRecordArgs) ToMxRecordOutput() MxRecordOutput {
	return i.ToMxRecordOutputWithContext(context.Background())
}

func (i MxRecordArgs) ToMxRecordOutputWithContext(ctx context.Context) MxRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordOutput)
}

// MxRecordArrayInput is an input type that accepts MxRecordArray and MxRecordArrayOutput values.
// You can construct a concrete instance of `MxRecordArrayInput` via:
//
//	MxRecordArray{ MxRecordArgs{...} }
type MxRecordArrayInput interface {
	pulumi.Input

	ToMxRecordArrayOutput() MxRecordArrayOutput
	ToMxRecordArrayOutputWithContext(context.Context) MxRecordArrayOutput
}

type MxRecordArray []MxRecordInput

func (MxRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecord)(nil)).Elem()
}

func (i MxRecordArray) ToMxRecordArrayOutput() MxRecordArrayOutput {
	return i.ToMxRecordArrayOutputWithContext(context.Background())
}

func (i MxRecordArray) ToMxRecordArrayOutputWithContext(ctx context.Context) MxRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordArrayOutput)
}

// An MX record.
type MxRecordOutput struct{ *pulumi.OutputState }

func (MxRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecord)(nil)).Elem()
}

func (o MxRecordOutput) ToMxRecordOutput() MxRecordOutput {
	return o
}

func (o MxRecordOutput) ToMxRecordOutputWithContext(ctx context.Context) MxRecordOutput {
	return o
}

// The domain name of the mail host for this MX record.
func (o MxRecordOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MxRecord) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// The preference value for this MX record.
func (o MxRecordOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MxRecord) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type MxRecordArrayOutput struct{ *pulumi.OutputState }

func (MxRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecord)(nil)).Elem()
}

func (o MxRecordArrayOutput) ToMxRecordArrayOutput() MxRecordArrayOutput {
	return o
}

func (o MxRecordArrayOutput) ToMxRecordArrayOutputWithContext(ctx context.Context) MxRecordArrayOutput {
	return o
}

func (o MxRecordArrayOutput) Index(i pulumi.IntInput) MxRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecord {
		return vs[0].([]MxRecord)[vs[1].(int)]
	}).(MxRecordOutput)
}

// An MX record.
type MxRecordResponse struct {
	// The domain name of the mail host for this MX record.
	Exchange *string `pulumi:"exchange"`
	// The preference value for this MX record.
	Preference *int `pulumi:"preference"`
}

// An MX record.
type MxRecordResponseOutput struct{ *pulumi.OutputState }

func (MxRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordResponse)(nil)).Elem()
}

func (o MxRecordResponseOutput) ToMxRecordResponseOutput() MxRecordResponseOutput {
	return o
}

func (o MxRecordResponseOutput) ToMxRecordResponseOutputWithContext(ctx context.Context) MxRecordResponseOutput {
	return o
}

// The domain name of the mail host for this MX record.
func (o MxRecordResponseOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MxRecordResponse) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// The preference value for this MX record.
func (o MxRecordResponseOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MxRecordResponse) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type MxRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (MxRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordResponse)(nil)).Elem()
}

func (o MxRecordResponseArrayOutput) ToMxRecordResponseArrayOutput() MxRecordResponseArrayOutput {
	return o
}

func (o MxRecordResponseArrayOutput) ToMxRecordResponseArrayOutputWithContext(ctx context.Context) MxRecordResponseArrayOutput {
	return o
}

func (o MxRecordResponseArrayOutput) Index(i pulumi.IntInput) MxRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecordResponse {
		return vs[0].([]MxRecordResponse)[vs[1].(int)]
	}).(MxRecordResponseOutput)
}

// A NAPTR record. For more information about the NAPTR record format, see RFC 3403: https://www.rfc-editor.org/rfc/rfc3403
type NaptrRecord struct {
	// The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
	Flags *string `pulumi:"flags"`
	// The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
	Order *int `pulumi:"order"`
	// The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
	Preference *int `pulumi:"preference"`
	// The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'.
	Regexp *string `pulumi:"regexp"`
	// The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'.
	Replacement *string `pulumi:"replacement"`
	// The services specific to DDDS applications. Enclose Services in quotation marks.
	Services *string `pulumi:"services"`
}

// NaptrRecordInput is an input type that accepts NaptrRecordArgs and NaptrRecordOutput values.
// You can construct a concrete instance of `NaptrRecordInput` via:
//
//	NaptrRecordArgs{...}
type NaptrRecordInput interface {
	pulumi.Input

	ToNaptrRecordOutput() NaptrRecordOutput
	ToNaptrRecordOutputWithContext(context.Context) NaptrRecordOutput
}

// A NAPTR record. For more information about the NAPTR record format, see RFC 3403: https://www.rfc-editor.org/rfc/rfc3403
type NaptrRecordArgs struct {
	// The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
	Flags pulumi.StringPtrInput `pulumi:"flags"`
	// The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
	Preference pulumi.IntPtrInput `pulumi:"preference"`
	// The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'.
	Regexp pulumi.StringPtrInput `pulumi:"regexp"`
	// The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'.
	Replacement pulumi.StringPtrInput `pulumi:"replacement"`
	// The services specific to DDDS applications. Enclose Services in quotation marks.
	Services pulumi.StringPtrInput `pulumi:"services"`
}

func (NaptrRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NaptrRecord)(nil)).Elem()
}

func (i NaptrRecordArgs) ToNaptrRecordOutput() NaptrRecordOutput {
	return i.ToNaptrRecordOutputWithContext(context.Background())
}

func (i NaptrRecordArgs) ToNaptrRecordOutputWithContext(ctx context.Context) NaptrRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NaptrRecordOutput)
}

// NaptrRecordArrayInput is an input type that accepts NaptrRecordArray and NaptrRecordArrayOutput values.
// You can construct a concrete instance of `NaptrRecordArrayInput` via:
//
//	NaptrRecordArray{ NaptrRecordArgs{...} }
type NaptrRecordArrayInput interface {
	pulumi.Input

	ToNaptrRecordArrayOutput() NaptrRecordArrayOutput
	ToNaptrRecordArrayOutputWithContext(context.Context) NaptrRecordArrayOutput
}

type NaptrRecordArray []NaptrRecordInput

func (NaptrRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NaptrRecord)(nil)).Elem()
}

func (i NaptrRecordArray) ToNaptrRecordArrayOutput() NaptrRecordArrayOutput {
	return i.ToNaptrRecordArrayOutputWithContext(context.Background())
}

func (i NaptrRecordArray) ToNaptrRecordArrayOutputWithContext(ctx context.Context) NaptrRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NaptrRecordArrayOutput)
}

// A NAPTR record. For more information about the NAPTR record format, see RFC 3403: https://www.rfc-editor.org/rfc/rfc3403
type NaptrRecordOutput struct{ *pulumi.OutputState }

func (NaptrRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NaptrRecord)(nil)).Elem()
}

func (o NaptrRecordOutput) ToNaptrRecordOutput() NaptrRecordOutput {
	return o
}

func (o NaptrRecordOutput) ToNaptrRecordOutputWithContext(ctx context.Context) NaptrRecordOutput {
	return o
}

// The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
func (o NaptrRecordOutput) Flags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecord) *string { return v.Flags }).(pulumi.StringPtrOutput)
}

// The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
func (o NaptrRecordOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NaptrRecord) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
func (o NaptrRecordOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NaptrRecord) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'.
func (o NaptrRecordOutput) Regexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecord) *string { return v.Regexp }).(pulumi.StringPtrOutput)
}

// The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'.
func (o NaptrRecordOutput) Replacement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecord) *string { return v.Replacement }).(pulumi.StringPtrOutput)
}

// The services specific to DDDS applications. Enclose Services in quotation marks.
func (o NaptrRecordOutput) Services() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecord) *string { return v.Services }).(pulumi.StringPtrOutput)
}

type NaptrRecordArrayOutput struct{ *pulumi.OutputState }

func (NaptrRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NaptrRecord)(nil)).Elem()
}

func (o NaptrRecordArrayOutput) ToNaptrRecordArrayOutput() NaptrRecordArrayOutput {
	return o
}

func (o NaptrRecordArrayOutput) ToNaptrRecordArrayOutputWithContext(ctx context.Context) NaptrRecordArrayOutput {
	return o
}

func (o NaptrRecordArrayOutput) Index(i pulumi.IntInput) NaptrRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NaptrRecord {
		return vs[0].([]NaptrRecord)[vs[1].(int)]
	}).(NaptrRecordOutput)
}

// A NAPTR record. For more information about the NAPTR record format, see RFC 3403: https://www.rfc-editor.org/rfc/rfc3403
type NaptrRecordResponse struct {
	// The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
	Flags *string `pulumi:"flags"`
	// The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
	Order *int `pulumi:"order"`
	// The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
	Preference *int `pulumi:"preference"`
	// The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'.
	Regexp *string `pulumi:"regexp"`
	// The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'.
	Replacement *string `pulumi:"replacement"`
	// The services specific to DDDS applications. Enclose Services in quotation marks.
	Services *string `pulumi:"services"`
}

// A NAPTR record. For more information about the NAPTR record format, see RFC 3403: https://www.rfc-editor.org/rfc/rfc3403
type NaptrRecordResponseOutput struct{ *pulumi.OutputState }

func (NaptrRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NaptrRecordResponse)(nil)).Elem()
}

func (o NaptrRecordResponseOutput) ToNaptrRecordResponseOutput() NaptrRecordResponseOutput {
	return o
}

func (o NaptrRecordResponseOutput) ToNaptrRecordResponseOutputWithContext(ctx context.Context) NaptrRecordResponseOutput {
	return o
}

// The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters "A", "P", "S", and "U", and the empty string, "". Enclose Flags in quotation marks.
func (o NaptrRecordResponseOutput) Flags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecordResponse) *string { return v.Flags }).(pulumi.StringPtrOutput)
}

// The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535.
func (o NaptrRecordResponseOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NaptrRecordResponse) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535.
func (o NaptrRecordResponseOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NaptrRecordResponse) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'.
func (o NaptrRecordResponseOutput) Regexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecordResponse) *string { return v.Regexp }).(pulumi.StringPtrOutput)
}

// The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'.
func (o NaptrRecordResponseOutput) Replacement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecordResponse) *string { return v.Replacement }).(pulumi.StringPtrOutput)
}

// The services specific to DDDS applications. Enclose Services in quotation marks.
func (o NaptrRecordResponseOutput) Services() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NaptrRecordResponse) *string { return v.Services }).(pulumi.StringPtrOutput)
}

type NaptrRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (NaptrRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NaptrRecordResponse)(nil)).Elem()
}

func (o NaptrRecordResponseArrayOutput) ToNaptrRecordResponseArrayOutput() NaptrRecordResponseArrayOutput {
	return o
}

func (o NaptrRecordResponseArrayOutput) ToNaptrRecordResponseArrayOutputWithContext(ctx context.Context) NaptrRecordResponseArrayOutput {
	return o
}

func (o NaptrRecordResponseArrayOutput) Index(i pulumi.IntInput) NaptrRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NaptrRecordResponse {
		return vs[0].([]NaptrRecordResponse)[vs[1].(int)]
	}).(NaptrRecordResponseOutput)
}

// An NS record.
type NsRecord struct {
	// The name server name for this NS record.
	Nsdname *string `pulumi:"nsdname"`
}

// NsRecordInput is an input type that accepts NsRecordArgs and NsRecordOutput values.
// You can construct a concrete instance of `NsRecordInput` via:
//
//	NsRecordArgs{...}
type NsRecordInput interface {
	pulumi.Input

	ToNsRecordOutput() NsRecordOutput
	ToNsRecordOutputWithContext(context.Context) NsRecordOutput
}

// An NS record.
type NsRecordArgs struct {
	// The name server name for this NS record.
	Nsdname pulumi.StringPtrInput `pulumi:"nsdname"`
}

func (NsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecord)(nil)).Elem()
}

func (i NsRecordArgs) ToNsRecordOutput() NsRecordOutput {
	return i.ToNsRecordOutputWithContext(context.Background())
}

func (i NsRecordArgs) ToNsRecordOutputWithContext(ctx context.Context) NsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordOutput)
}

// NsRecordArrayInput is an input type that accepts NsRecordArray and NsRecordArrayOutput values.
// You can construct a concrete instance of `NsRecordArrayInput` via:
//
//	NsRecordArray{ NsRecordArgs{...} }
type NsRecordArrayInput interface {
	pulumi.Input

	ToNsRecordArrayOutput() NsRecordArrayOutput
	ToNsRecordArrayOutputWithContext(context.Context) NsRecordArrayOutput
}

type NsRecordArray []NsRecordInput

func (NsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecord)(nil)).Elem()
}

func (i NsRecordArray) ToNsRecordArrayOutput() NsRecordArrayOutput {
	return i.ToNsRecordArrayOutputWithContext(context.Background())
}

func (i NsRecordArray) ToNsRecordArrayOutputWithContext(ctx context.Context) NsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordArrayOutput)
}

// An NS record.
type NsRecordOutput struct{ *pulumi.OutputState }

func (NsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecord)(nil)).Elem()
}

func (o NsRecordOutput) ToNsRecordOutput() NsRecordOutput {
	return o
}

func (o NsRecordOutput) ToNsRecordOutputWithContext(ctx context.Context) NsRecordOutput {
	return o
}

// The name server name for this NS record.
func (o NsRecordOutput) Nsdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsRecord) *string { return v.Nsdname }).(pulumi.StringPtrOutput)
}

type NsRecordArrayOutput struct{ *pulumi.OutputState }

func (NsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecord)(nil)).Elem()
}

func (o NsRecordArrayOutput) ToNsRecordArrayOutput() NsRecordArrayOutput {
	return o
}

func (o NsRecordArrayOutput) ToNsRecordArrayOutputWithContext(ctx context.Context) NsRecordArrayOutput {
	return o
}

func (o NsRecordArrayOutput) Index(i pulumi.IntInput) NsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsRecord {
		return vs[0].([]NsRecord)[vs[1].(int)]
	}).(NsRecordOutput)
}

// An NS record.
type NsRecordResponse struct {
	// The name server name for this NS record.
	Nsdname *string `pulumi:"nsdname"`
}

// An NS record.
type NsRecordResponseOutput struct{ *pulumi.OutputState }

func (NsRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordResponse)(nil)).Elem()
}

func (o NsRecordResponseOutput) ToNsRecordResponseOutput() NsRecordResponseOutput {
	return o
}

func (o NsRecordResponseOutput) ToNsRecordResponseOutputWithContext(ctx context.Context) NsRecordResponseOutput {
	return o
}

// The name server name for this NS record.
func (o NsRecordResponseOutput) Nsdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsRecordResponse) *string { return v.Nsdname }).(pulumi.StringPtrOutput)
}

type NsRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (NsRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordResponse)(nil)).Elem()
}

func (o NsRecordResponseArrayOutput) ToNsRecordResponseArrayOutput() NsRecordResponseArrayOutput {
	return o
}

func (o NsRecordResponseArrayOutput) ToNsRecordResponseArrayOutputWithContext(ctx context.Context) NsRecordResponseArrayOutput {
	return o
}

func (o NsRecordResponseArrayOutput) Index(i pulumi.IntInput) NsRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsRecordResponse {
		return vs[0].([]NsRecordResponse)[vs[1].(int)]
	}).(NsRecordResponseOutput)
}

// A PTR record.
type PtrRecord struct {
	// The PTR target domain name for this PTR record.
	Ptrdname *string `pulumi:"ptrdname"`
}

// PtrRecordInput is an input type that accepts PtrRecordArgs and PtrRecordOutput values.
// You can construct a concrete instance of `PtrRecordInput` via:
//
//	PtrRecordArgs{...}
type PtrRecordInput interface {
	pulumi.Input

	ToPtrRecordOutput() PtrRecordOutput
	ToPtrRecordOutputWithContext(context.Context) PtrRecordOutput
}

// A PTR record.
type PtrRecordArgs struct {
	// The PTR target domain name for this PTR record.
	Ptrdname pulumi.StringPtrInput `pulumi:"ptrdname"`
}

func (PtrRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecord)(nil)).Elem()
}

func (i PtrRecordArgs) ToPtrRecordOutput() PtrRecordOutput {
	return i.ToPtrRecordOutputWithContext(context.Background())
}

func (i PtrRecordArgs) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordOutput)
}

// PtrRecordArrayInput is an input type that accepts PtrRecordArray and PtrRecordArrayOutput values.
// You can construct a concrete instance of `PtrRecordArrayInput` via:
//
//	PtrRecordArray{ PtrRecordArgs{...} }
type PtrRecordArrayInput interface {
	pulumi.Input

	ToPtrRecordArrayOutput() PtrRecordArrayOutput
	ToPtrRecordArrayOutputWithContext(context.Context) PtrRecordArrayOutput
}

type PtrRecordArray []PtrRecordInput

func (PtrRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecord)(nil)).Elem()
}

func (i PtrRecordArray) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return i.ToPtrRecordArrayOutputWithContext(context.Background())
}

func (i PtrRecordArray) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordArrayOutput)
}

// A PTR record.
type PtrRecordOutput struct{ *pulumi.OutputState }

func (PtrRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecord)(nil)).Elem()
}

func (o PtrRecordOutput) ToPtrRecordOutput() PtrRecordOutput {
	return o
}

func (o PtrRecordOutput) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return o
}

// The PTR target domain name for this PTR record.
func (o PtrRecordOutput) Ptrdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PtrRecord) *string { return v.Ptrdname }).(pulumi.StringPtrOutput)
}

type PtrRecordArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecord)(nil)).Elem()
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) Index(i pulumi.IntInput) PtrRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PtrRecord {
		return vs[0].([]PtrRecord)[vs[1].(int)]
	}).(PtrRecordOutput)
}

// A PTR record.
type PtrRecordResponse struct {
	// The PTR target domain name for this PTR record.
	Ptrdname *string `pulumi:"ptrdname"`
}

// A PTR record.
type PtrRecordResponseOutput struct{ *pulumi.OutputState }

func (PtrRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecordResponse)(nil)).Elem()
}

func (o PtrRecordResponseOutput) ToPtrRecordResponseOutput() PtrRecordResponseOutput {
	return o
}

func (o PtrRecordResponseOutput) ToPtrRecordResponseOutputWithContext(ctx context.Context) PtrRecordResponseOutput {
	return o
}

// The PTR target domain name for this PTR record.
func (o PtrRecordResponseOutput) Ptrdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PtrRecordResponse) *string { return v.Ptrdname }).(pulumi.StringPtrOutput)
}

type PtrRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecordResponse)(nil)).Elem()
}

func (o PtrRecordResponseArrayOutput) ToPtrRecordResponseArrayOutput() PtrRecordResponseArrayOutput {
	return o
}

func (o PtrRecordResponseArrayOutput) ToPtrRecordResponseArrayOutputWithContext(ctx context.Context) PtrRecordResponseArrayOutput {
	return o
}

func (o PtrRecordResponseArrayOutput) Index(i pulumi.IntInput) PtrRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PtrRecordResponse {
		return vs[0].([]PtrRecordResponse)[vs[1].(int)]
	}).(PtrRecordResponseOutput)
}

// Represents the signing key.
type SigningKeyResponse struct {
	// The delegation signer information.
	DelegationSignerInfo []DelegationSignerInfoResponse `pulumi:"delegationSignerInfo"`
	// The flags specifies how the key is used.
	Flags int `pulumi:"flags"`
	// The key tag value of the DNSKEY Resource Record.
	KeyTag int `pulumi:"keyTag"`
	// The protocol value. The value is always 3.
	Protocol int `pulumi:"protocol"`
	// The public key, represented as a Base64 encoding.
	PublicKey string `pulumi:"publicKey"`
	// The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
	SecurityAlgorithmType int `pulumi:"securityAlgorithmType"`
}

// Represents the signing key.
type SigningKeyResponseOutput struct{ *pulumi.OutputState }

func (SigningKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningKeyResponse)(nil)).Elem()
}

func (o SigningKeyResponseOutput) ToSigningKeyResponseOutput() SigningKeyResponseOutput {
	return o
}

func (o SigningKeyResponseOutput) ToSigningKeyResponseOutputWithContext(ctx context.Context) SigningKeyResponseOutput {
	return o
}

// The delegation signer information.
func (o SigningKeyResponseOutput) DelegationSignerInfo() DelegationSignerInfoResponseArrayOutput {
	return o.ApplyT(func(v SigningKeyResponse) []DelegationSignerInfoResponse { return v.DelegationSignerInfo }).(DelegationSignerInfoResponseArrayOutput)
}

// The flags specifies how the key is used.
func (o SigningKeyResponseOutput) Flags() pulumi.IntOutput {
	return o.ApplyT(func(v SigningKeyResponse) int { return v.Flags }).(pulumi.IntOutput)
}

// The key tag value of the DNSKEY Resource Record.
func (o SigningKeyResponseOutput) KeyTag() pulumi.IntOutput {
	return o.ApplyT(func(v SigningKeyResponse) int { return v.KeyTag }).(pulumi.IntOutput)
}

// The protocol value. The value is always 3.
func (o SigningKeyResponseOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v SigningKeyResponse) int { return v.Protocol }).(pulumi.IntOutput)
}

// The public key, represented as a Base64 encoding.
func (o SigningKeyResponseOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v SigningKeyResponse) string { return v.PublicKey }).(pulumi.StringOutput)
}

// The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
func (o SigningKeyResponseOutput) SecurityAlgorithmType() pulumi.IntOutput {
	return o.ApplyT(func(v SigningKeyResponse) int { return v.SecurityAlgorithmType }).(pulumi.IntOutput)
}

type SigningKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SigningKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SigningKeyResponse)(nil)).Elem()
}

func (o SigningKeyResponseArrayOutput) ToSigningKeyResponseArrayOutput() SigningKeyResponseArrayOutput {
	return o
}

func (o SigningKeyResponseArrayOutput) ToSigningKeyResponseArrayOutputWithContext(ctx context.Context) SigningKeyResponseArrayOutput {
	return o
}

func (o SigningKeyResponseArrayOutput) Index(i pulumi.IntInput) SigningKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SigningKeyResponse {
		return vs[0].([]SigningKeyResponse)[vs[1].(int)]
	}).(SigningKeyResponseOutput)
}

// An SOA record.
type SoaRecord struct {
	// The email contact for this SOA record.
	Email *string `pulumi:"email"`
	// The expire time for this SOA record.
	ExpireTime *float64 `pulumi:"expireTime"`
	// The domain name of the authoritative name server for this SOA record.
	Host *string `pulumi:"host"`
	// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTtl *float64 `pulumi:"minimumTtl"`
	// The refresh value for this SOA record.
	RefreshTime *float64 `pulumi:"refreshTime"`
	// The retry time for this SOA record.
	RetryTime *float64 `pulumi:"retryTime"`
	// The serial number for this SOA record.
	SerialNumber *float64 `pulumi:"serialNumber"`
}

// SoaRecordInput is an input type that accepts SoaRecordArgs and SoaRecordOutput values.
// You can construct a concrete instance of `SoaRecordInput` via:
//
//	SoaRecordArgs{...}
type SoaRecordInput interface {
	pulumi.Input

	ToSoaRecordOutput() SoaRecordOutput
	ToSoaRecordOutputWithContext(context.Context) SoaRecordOutput
}

// An SOA record.
type SoaRecordArgs struct {
	// The email contact for this SOA record.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The expire time for this SOA record.
	ExpireTime pulumi.Float64PtrInput `pulumi:"expireTime"`
	// The domain name of the authoritative name server for this SOA record.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTtl pulumi.Float64PtrInput `pulumi:"minimumTtl"`
	// The refresh value for this SOA record.
	RefreshTime pulumi.Float64PtrInput `pulumi:"refreshTime"`
	// The retry time for this SOA record.
	RetryTime pulumi.Float64PtrInput `pulumi:"retryTime"`
	// The serial number for this SOA record.
	SerialNumber pulumi.Float64PtrInput `pulumi:"serialNumber"`
}

func (SoaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecord)(nil)).Elem()
}

func (i SoaRecordArgs) ToSoaRecordOutput() SoaRecordOutput {
	return i.ToSoaRecordOutputWithContext(context.Background())
}

func (i SoaRecordArgs) ToSoaRecordOutputWithContext(ctx context.Context) SoaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordOutput)
}

func (i SoaRecordArgs) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return i.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (i SoaRecordArgs) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordOutput).ToSoaRecordPtrOutputWithContext(ctx)
}

// SoaRecordPtrInput is an input type that accepts SoaRecordArgs, SoaRecordPtr and SoaRecordPtrOutput values.
// You can construct a concrete instance of `SoaRecordPtrInput` via:
//
//	        SoaRecordArgs{...}
//
//	or:
//
//	        nil
type SoaRecordPtrInput interface {
	pulumi.Input

	ToSoaRecordPtrOutput() SoaRecordPtrOutput
	ToSoaRecordPtrOutputWithContext(context.Context) SoaRecordPtrOutput
}

type soaRecordPtrType SoaRecordArgs

func SoaRecordPtr(v *SoaRecordArgs) SoaRecordPtrInput {
	return (*soaRecordPtrType)(v)
}

func (*soaRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecord)(nil)).Elem()
}

func (i *soaRecordPtrType) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return i.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (i *soaRecordPtrType) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordPtrOutput)
}

// An SOA record.
type SoaRecordOutput struct{ *pulumi.OutputState }

func (SoaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecord)(nil)).Elem()
}

func (o SoaRecordOutput) ToSoaRecordOutput() SoaRecordOutput {
	return o
}

func (o SoaRecordOutput) ToSoaRecordOutputWithContext(ctx context.Context) SoaRecordOutput {
	return o
}

func (o SoaRecordOutput) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return o.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (o SoaRecordOutput) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SoaRecord) *SoaRecord {
		return &v
	}).(SoaRecordPtrOutput)
}

// The email contact for this SOA record.
func (o SoaRecordOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecord) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.ExpireTime }).(pulumi.Float64PtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecord) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordOutput) MinimumTtl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.MinimumTtl }).(pulumi.Float64PtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.RefreshTime }).(pulumi.Float64PtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.RetryTime }).(pulumi.Float64PtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.SerialNumber }).(pulumi.Float64PtrOutput)
}

type SoaRecordPtrOutput struct{ *pulumi.OutputState }

func (SoaRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecord)(nil)).Elem()
}

func (o SoaRecordPtrOutput) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return o
}

func (o SoaRecordPtrOutput) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return o
}

func (o SoaRecordPtrOutput) Elem() SoaRecordOutput {
	return o.ApplyT(func(v *SoaRecord) SoaRecord {
		if v != nil {
			return *v
		}
		var ret SoaRecord
		return ret
	}).(SoaRecordOutput)
}

// The email contact for this SOA record.
func (o SoaRecordPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordPtrOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.Float64PtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordPtrOutput) MinimumTtl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.MinimumTtl
	}).(pulumi.Float64PtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordPtrOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.RefreshTime
	}).(pulumi.Float64PtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordPtrOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.RetryTime
	}).(pulumi.Float64PtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordPtrOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.Float64PtrOutput)
}

// An SOA record.
type SoaRecordResponse struct {
	// The email contact for this SOA record.
	Email *string `pulumi:"email"`
	// The expire time for this SOA record.
	ExpireTime *float64 `pulumi:"expireTime"`
	// The domain name of the authoritative name server for this SOA record.
	Host *string `pulumi:"host"`
	// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTtl *float64 `pulumi:"minimumTtl"`
	// The refresh value for this SOA record.
	RefreshTime *float64 `pulumi:"refreshTime"`
	// The retry time for this SOA record.
	RetryTime *float64 `pulumi:"retryTime"`
	// The serial number for this SOA record.
	SerialNumber *float64 `pulumi:"serialNumber"`
}

// An SOA record.
type SoaRecordResponseOutput struct{ *pulumi.OutputState }

func (SoaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecordResponse)(nil)).Elem()
}

func (o SoaRecordResponseOutput) ToSoaRecordResponseOutput() SoaRecordResponseOutput {
	return o
}

func (o SoaRecordResponseOutput) ToSoaRecordResponseOutputWithContext(ctx context.Context) SoaRecordResponseOutput {
	return o
}

// The email contact for this SOA record.
func (o SoaRecordResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordResponseOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.ExpireTime }).(pulumi.Float64PtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordResponseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordResponseOutput) MinimumTtl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.MinimumTtl }).(pulumi.Float64PtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordResponseOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.RefreshTime }).(pulumi.Float64PtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordResponseOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.RetryTime }).(pulumi.Float64PtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordResponseOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.SerialNumber }).(pulumi.Float64PtrOutput)
}

type SoaRecordResponsePtrOutput struct{ *pulumi.OutputState }

func (SoaRecordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecordResponse)(nil)).Elem()
}

func (o SoaRecordResponsePtrOutput) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return o
}

func (o SoaRecordResponsePtrOutput) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return o
}

func (o SoaRecordResponsePtrOutput) Elem() SoaRecordResponseOutput {
	return o.ApplyT(func(v *SoaRecordResponse) SoaRecordResponse {
		if v != nil {
			return *v
		}
		var ret SoaRecordResponse
		return ret
	}).(SoaRecordResponseOutput)
}

// The email contact for this SOA record.
func (o SoaRecordResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordResponsePtrOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.Float64PtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordResponsePtrOutput) MinimumTtl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MinimumTtl
	}).(pulumi.Float64PtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordResponsePtrOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RefreshTime
	}).(pulumi.Float64PtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordResponsePtrOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RetryTime
	}).(pulumi.Float64PtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordResponsePtrOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.Float64PtrOutput)
}

// An SRV record.
type SrvRecord struct {
	// The port value for this SRV record.
	Port *int `pulumi:"port"`
	// The priority value for this SRV record.
	Priority *int `pulumi:"priority"`
	// The target domain name for this SRV record.
	Target *string `pulumi:"target"`
	// The weight value for this SRV record.
	Weight *int `pulumi:"weight"`
}

// SrvRecordInput is an input type that accepts SrvRecordArgs and SrvRecordOutput values.
// You can construct a concrete instance of `SrvRecordInput` via:
//
//	SrvRecordArgs{...}
type SrvRecordInput interface {
	pulumi.Input

	ToSrvRecordOutput() SrvRecordOutput
	ToSrvRecordOutputWithContext(context.Context) SrvRecordOutput
}

// An SRV record.
type SrvRecordArgs struct {
	// The port value for this SRV record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The priority value for this SRV record.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The target domain name for this SRV record.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The weight value for this SRV record.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (SrvRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecord)(nil)).Elem()
}

func (i SrvRecordArgs) ToSrvRecordOutput() SrvRecordOutput {
	return i.ToSrvRecordOutputWithContext(context.Background())
}

func (i SrvRecordArgs) ToSrvRecordOutputWithContext(ctx context.Context) SrvRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordOutput)
}

// SrvRecordArrayInput is an input type that accepts SrvRecordArray and SrvRecordArrayOutput values.
// You can construct a concrete instance of `SrvRecordArrayInput` via:
//
//	SrvRecordArray{ SrvRecordArgs{...} }
type SrvRecordArrayInput interface {
	pulumi.Input

	ToSrvRecordArrayOutput() SrvRecordArrayOutput
	ToSrvRecordArrayOutputWithContext(context.Context) SrvRecordArrayOutput
}

type SrvRecordArray []SrvRecordInput

func (SrvRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecord)(nil)).Elem()
}

func (i SrvRecordArray) ToSrvRecordArrayOutput() SrvRecordArrayOutput {
	return i.ToSrvRecordArrayOutputWithContext(context.Background())
}

func (i SrvRecordArray) ToSrvRecordArrayOutputWithContext(ctx context.Context) SrvRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordArrayOutput)
}

// An SRV record.
type SrvRecordOutput struct{ *pulumi.OutputState }

func (SrvRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecord)(nil)).Elem()
}

func (o SrvRecordOutput) ToSrvRecordOutput() SrvRecordOutput {
	return o
}

func (o SrvRecordOutput) ToSrvRecordOutputWithContext(ctx context.Context) SrvRecordOutput {
	return o
}

// The port value for this SRV record.
func (o SrvRecordOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The priority value for this SRV record.
func (o SrvRecordOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The target domain name for this SRV record.
func (o SrvRecordOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SrvRecord) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The weight value for this SRV record.
func (o SrvRecordOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SrvRecordArrayOutput struct{ *pulumi.OutputState }

func (SrvRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecord)(nil)).Elem()
}

func (o SrvRecordArrayOutput) ToSrvRecordArrayOutput() SrvRecordArrayOutput {
	return o
}

func (o SrvRecordArrayOutput) ToSrvRecordArrayOutputWithContext(ctx context.Context) SrvRecordArrayOutput {
	return o
}

func (o SrvRecordArrayOutput) Index(i pulumi.IntInput) SrvRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SrvRecord {
		return vs[0].([]SrvRecord)[vs[1].(int)]
	}).(SrvRecordOutput)
}

// An SRV record.
type SrvRecordResponse struct {
	// The port value for this SRV record.
	Port *int `pulumi:"port"`
	// The priority value for this SRV record.
	Priority *int `pulumi:"priority"`
	// The target domain name for this SRV record.
	Target *string `pulumi:"target"`
	// The weight value for this SRV record.
	Weight *int `pulumi:"weight"`
}

// An SRV record.
type SrvRecordResponseOutput struct{ *pulumi.OutputState }

func (SrvRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordResponse)(nil)).Elem()
}

func (o SrvRecordResponseOutput) ToSrvRecordResponseOutput() SrvRecordResponseOutput {
	return o
}

func (o SrvRecordResponseOutput) ToSrvRecordResponseOutputWithContext(ctx context.Context) SrvRecordResponseOutput {
	return o
}

// The port value for this SRV record.
func (o SrvRecordResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The priority value for this SRV record.
func (o SrvRecordResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The target domain name for this SRV record.
func (o SrvRecordResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The weight value for this SRV record.
func (o SrvRecordResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SrvRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (SrvRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordResponse)(nil)).Elem()
}

func (o SrvRecordResponseArrayOutput) ToSrvRecordResponseArrayOutput() SrvRecordResponseArrayOutput {
	return o
}

func (o SrvRecordResponseArrayOutput) ToSrvRecordResponseArrayOutputWithContext(ctx context.Context) SrvRecordResponseArrayOutput {
	return o
}

func (o SrvRecordResponseArrayOutput) Index(i pulumi.IntInput) SrvRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SrvRecordResponse {
		return vs[0].([]SrvRecordResponse)[vs[1].(int)]
	}).(SrvRecordResponseOutput)
}

// A reference to a another resource
type SubResource struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//	SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// A reference to a another resource
type SubResourceArgs struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//	        SubResourceArgs{...}
//
//	or:
//
//	        nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// SubResourceArrayInput is an input type that accepts SubResourceArray and SubResourceArrayOutput values.
// You can construct a concrete instance of `SubResourceArrayInput` via:
//
//	SubResourceArray{ SubResourceArgs{...} }
type SubResourceArrayInput interface {
	pulumi.Input

	ToSubResourceArrayOutput() SubResourceArrayOutput
	ToSubResourceArrayOutputWithContext(context.Context) SubResourceArrayOutput
}

type SubResourceArray []SubResourceInput

func (SubResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (i SubResourceArray) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return i.ToSubResourceArrayOutputWithContext(context.Background())
}

func (i SubResourceArray) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceArrayOutput)
}

// A reference to a another resource
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource {
		if v != nil {
			return *v
		}
		var ret SubResource
		return ret
	}).(SubResourceOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceArrayOutput struct{ *pulumi.OutputState }

func (SubResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) Index(i pulumi.IntInput) SubResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResource {
		return vs[0].([]SubResource)[vs[1].(int)]
	}).(SubResourceOutput)
}

// A reference to a another resource
type SubResourceResponse struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// A reference to a another resource
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

// Resource Id.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse {
		if v != nil {
			return *v
		}
		var ret SubResourceResponse
		return ret
	}).(SubResourceResponseOutput)
}

// Resource Id.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// A TLSA record. For more information about the TLSA record format, see RFC 6698: https://www.rfc-editor.org/rfc/rfc6698
type TlsaRecord struct {
	// This specifies the certificate association data to be matched.
	CertAssociationData *string `pulumi:"certAssociationData"`
	// The matching type specifies how the certificate association is presented.
	MatchingType *int `pulumi:"matchingType"`
	// The selector specifies which part of the TLS certificate presented by the server will be matched against the association data.
	Selector *int `pulumi:"selector"`
	// The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake.
	Usage *int `pulumi:"usage"`
}

// TlsaRecordInput is an input type that accepts TlsaRecordArgs and TlsaRecordOutput values.
// You can construct a concrete instance of `TlsaRecordInput` via:
//
//	TlsaRecordArgs{...}
type TlsaRecordInput interface {
	pulumi.Input

	ToTlsaRecordOutput() TlsaRecordOutput
	ToTlsaRecordOutputWithContext(context.Context) TlsaRecordOutput
}

// A TLSA record. For more information about the TLSA record format, see RFC 6698: https://www.rfc-editor.org/rfc/rfc6698
type TlsaRecordArgs struct {
	// This specifies the certificate association data to be matched.
	CertAssociationData pulumi.StringPtrInput `pulumi:"certAssociationData"`
	// The matching type specifies how the certificate association is presented.
	MatchingType pulumi.IntPtrInput `pulumi:"matchingType"`
	// The selector specifies which part of the TLS certificate presented by the server will be matched against the association data.
	Selector pulumi.IntPtrInput `pulumi:"selector"`
	// The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake.
	Usage pulumi.IntPtrInput `pulumi:"usage"`
}

func (TlsaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsaRecord)(nil)).Elem()
}

func (i TlsaRecordArgs) ToTlsaRecordOutput() TlsaRecordOutput {
	return i.ToTlsaRecordOutputWithContext(context.Background())
}

func (i TlsaRecordArgs) ToTlsaRecordOutputWithContext(ctx context.Context) TlsaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsaRecordOutput)
}

// TlsaRecordArrayInput is an input type that accepts TlsaRecordArray and TlsaRecordArrayOutput values.
// You can construct a concrete instance of `TlsaRecordArrayInput` via:
//
//	TlsaRecordArray{ TlsaRecordArgs{...} }
type TlsaRecordArrayInput interface {
	pulumi.Input

	ToTlsaRecordArrayOutput() TlsaRecordArrayOutput
	ToTlsaRecordArrayOutputWithContext(context.Context) TlsaRecordArrayOutput
}

type TlsaRecordArray []TlsaRecordInput

func (TlsaRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsaRecord)(nil)).Elem()
}

func (i TlsaRecordArray) ToTlsaRecordArrayOutput() TlsaRecordArrayOutput {
	return i.ToTlsaRecordArrayOutputWithContext(context.Background())
}

func (i TlsaRecordArray) ToTlsaRecordArrayOutputWithContext(ctx context.Context) TlsaRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsaRecordArrayOutput)
}

// A TLSA record. For more information about the TLSA record format, see RFC 6698: https://www.rfc-editor.org/rfc/rfc6698
type TlsaRecordOutput struct{ *pulumi.OutputState }

func (TlsaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsaRecord)(nil)).Elem()
}

func (o TlsaRecordOutput) ToTlsaRecordOutput() TlsaRecordOutput {
	return o
}

func (o TlsaRecordOutput) ToTlsaRecordOutputWithContext(ctx context.Context) TlsaRecordOutput {
	return o
}

// This specifies the certificate association data to be matched.
func (o TlsaRecordOutput) CertAssociationData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsaRecord) *string { return v.CertAssociationData }).(pulumi.StringPtrOutput)
}

// The matching type specifies how the certificate association is presented.
func (o TlsaRecordOutput) MatchingType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TlsaRecord) *int { return v.MatchingType }).(pulumi.IntPtrOutput)
}

// The selector specifies which part of the TLS certificate presented by the server will be matched against the association data.
func (o TlsaRecordOutput) Selector() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TlsaRecord) *int { return v.Selector }).(pulumi.IntPtrOutput)
}

// The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake.
func (o TlsaRecordOutput) Usage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TlsaRecord) *int { return v.Usage }).(pulumi.IntPtrOutput)
}

type TlsaRecordArrayOutput struct{ *pulumi.OutputState }

func (TlsaRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsaRecord)(nil)).Elem()
}

func (o TlsaRecordArrayOutput) ToTlsaRecordArrayOutput() TlsaRecordArrayOutput {
	return o
}

func (o TlsaRecordArrayOutput) ToTlsaRecordArrayOutputWithContext(ctx context.Context) TlsaRecordArrayOutput {
	return o
}

func (o TlsaRecordArrayOutput) Index(i pulumi.IntInput) TlsaRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsaRecord {
		return vs[0].([]TlsaRecord)[vs[1].(int)]
	}).(TlsaRecordOutput)
}

// A TLSA record. For more information about the TLSA record format, see RFC 6698: https://www.rfc-editor.org/rfc/rfc6698
type TlsaRecordResponse struct {
	// This specifies the certificate association data to be matched.
	CertAssociationData *string `pulumi:"certAssociationData"`
	// The matching type specifies how the certificate association is presented.
	MatchingType *int `pulumi:"matchingType"`
	// The selector specifies which part of the TLS certificate presented by the server will be matched against the association data.
	Selector *int `pulumi:"selector"`
	// The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake.
	Usage *int `pulumi:"usage"`
}

// A TLSA record. For more information about the TLSA record format, see RFC 6698: https://www.rfc-editor.org/rfc/rfc6698
type TlsaRecordResponseOutput struct{ *pulumi.OutputState }

func (TlsaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsaRecordResponse)(nil)).Elem()
}

func (o TlsaRecordResponseOutput) ToTlsaRecordResponseOutput() TlsaRecordResponseOutput {
	return o
}

func (o TlsaRecordResponseOutput) ToTlsaRecordResponseOutputWithContext(ctx context.Context) TlsaRecordResponseOutput {
	return o
}

// This specifies the certificate association data to be matched.
func (o TlsaRecordResponseOutput) CertAssociationData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsaRecordResponse) *string { return v.CertAssociationData }).(pulumi.StringPtrOutput)
}

// The matching type specifies how the certificate association is presented.
func (o TlsaRecordResponseOutput) MatchingType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TlsaRecordResponse) *int { return v.MatchingType }).(pulumi.IntPtrOutput)
}

// The selector specifies which part of the TLS certificate presented by the server will be matched against the association data.
func (o TlsaRecordResponseOutput) Selector() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TlsaRecordResponse) *int { return v.Selector }).(pulumi.IntPtrOutput)
}

// The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake.
func (o TlsaRecordResponseOutput) Usage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TlsaRecordResponse) *int { return v.Usage }).(pulumi.IntPtrOutput)
}

type TlsaRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (TlsaRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsaRecordResponse)(nil)).Elem()
}

func (o TlsaRecordResponseArrayOutput) ToTlsaRecordResponseArrayOutput() TlsaRecordResponseArrayOutput {
	return o
}

func (o TlsaRecordResponseArrayOutput) ToTlsaRecordResponseArrayOutputWithContext(ctx context.Context) TlsaRecordResponseArrayOutput {
	return o
}

func (o TlsaRecordResponseArrayOutput) Index(i pulumi.IntInput) TlsaRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsaRecordResponse {
		return vs[0].([]TlsaRecordResponse)[vs[1].(int)]
	}).(TlsaRecordResponseOutput)
}

// A TXT record.
type TxtRecord struct {
	// The text value of this TXT record.
	Value []string `pulumi:"value"`
}

// TxtRecordInput is an input type that accepts TxtRecordArgs and TxtRecordOutput values.
// You can construct a concrete instance of `TxtRecordInput` via:
//
//	TxtRecordArgs{...}
type TxtRecordInput interface {
	pulumi.Input

	ToTxtRecordOutput() TxtRecordOutput
	ToTxtRecordOutputWithContext(context.Context) TxtRecordOutput
}

// A TXT record.
type TxtRecordArgs struct {
	// The text value of this TXT record.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (TxtRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecord)(nil)).Elem()
}

func (i TxtRecordArgs) ToTxtRecordOutput() TxtRecordOutput {
	return i.ToTxtRecordOutputWithContext(context.Background())
}

func (i TxtRecordArgs) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordOutput)
}

// TxtRecordArrayInput is an input type that accepts TxtRecordArray and TxtRecordArrayOutput values.
// You can construct a concrete instance of `TxtRecordArrayInput` via:
//
//	TxtRecordArray{ TxtRecordArgs{...} }
type TxtRecordArrayInput interface {
	pulumi.Input

	ToTxtRecordArrayOutput() TxtRecordArrayOutput
	ToTxtRecordArrayOutputWithContext(context.Context) TxtRecordArrayOutput
}

type TxtRecordArray []TxtRecordInput

func (TxtRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecord)(nil)).Elem()
}

func (i TxtRecordArray) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return i.ToTxtRecordArrayOutputWithContext(context.Background())
}

func (i TxtRecordArray) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordArrayOutput)
}

// A TXT record.
type TxtRecordOutput struct{ *pulumi.OutputState }

func (TxtRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecord)(nil)).Elem()
}

func (o TxtRecordOutput) ToTxtRecordOutput() TxtRecordOutput {
	return o
}

func (o TxtRecordOutput) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return o
}

// The text value of this TXT record.
func (o TxtRecordOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TxtRecord) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type TxtRecordArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecord)(nil)).Elem()
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) Index(i pulumi.IntInput) TxtRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecord {
		return vs[0].([]TxtRecord)[vs[1].(int)]
	}).(TxtRecordOutput)
}

// A TXT record.
type TxtRecordResponse struct {
	// The text value of this TXT record.
	Value []string `pulumi:"value"`
}

// A TXT record.
type TxtRecordResponseOutput struct{ *pulumi.OutputState }

func (TxtRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordResponse)(nil)).Elem()
}

func (o TxtRecordResponseOutput) ToTxtRecordResponseOutput() TxtRecordResponseOutput {
	return o
}

func (o TxtRecordResponseOutput) ToTxtRecordResponseOutputWithContext(ctx context.Context) TxtRecordResponseOutput {
	return o
}

// The text value of this TXT record.
func (o TxtRecordResponseOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TxtRecordResponse) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type TxtRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordResponse)(nil)).Elem()
}

func (o TxtRecordResponseArrayOutput) ToTxtRecordResponseArrayOutput() TxtRecordResponseArrayOutput {
	return o
}

func (o TxtRecordResponseArrayOutput) ToTxtRecordResponseArrayOutputWithContext(ctx context.Context) TxtRecordResponseArrayOutput {
	return o
}

func (o TxtRecordResponseArrayOutput) Index(i pulumi.IntInput) TxtRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecordResponse {
		return vs[0].([]TxtRecordResponse)[vs[1].(int)]
	}).(TxtRecordResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ARecordOutput{})
	pulumi.RegisterOutputType(ARecordArrayOutput{})
	pulumi.RegisterOutputType(ARecordResponseOutput{})
	pulumi.RegisterOutputType(ARecordResponseArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordOutput{})
	pulumi.RegisterOutputType(AaaaRecordArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordResponseOutput{})
	pulumi.RegisterOutputType(AaaaRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(CaaRecordOutput{})
	pulumi.RegisterOutputType(CaaRecordArrayOutput{})
	pulumi.RegisterOutputType(CaaRecordResponseOutput{})
	pulumi.RegisterOutputType(CaaRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(CnameRecordOutput{})
	pulumi.RegisterOutputType(CnameRecordPtrOutput{})
	pulumi.RegisterOutputType(CnameRecordResponseOutput{})
	pulumi.RegisterOutputType(CnameRecordResponsePtrOutput{})
	pulumi.RegisterOutputType(DelegationSignerInfoResponseOutput{})
	pulumi.RegisterOutputType(DelegationSignerInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DigestOutput{})
	pulumi.RegisterOutputType(DigestPtrOutput{})
	pulumi.RegisterOutputType(DigestResponseOutput{})
	pulumi.RegisterOutputType(DigestResponsePtrOutput{})
	pulumi.RegisterOutputType(DnsResourceReferenceResponseOutput{})
	pulumi.RegisterOutputType(DnsResourceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(DsRecordOutput{})
	pulumi.RegisterOutputType(DsRecordArrayOutput{})
	pulumi.RegisterOutputType(DsRecordResponseOutput{})
	pulumi.RegisterOutputType(DsRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(MxRecordOutput{})
	pulumi.RegisterOutputType(MxRecordArrayOutput{})
	pulumi.RegisterOutputType(MxRecordResponseOutput{})
	pulumi.RegisterOutputType(MxRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(NaptrRecordOutput{})
	pulumi.RegisterOutputType(NaptrRecordArrayOutput{})
	pulumi.RegisterOutputType(NaptrRecordResponseOutput{})
	pulumi.RegisterOutputType(NaptrRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(NsRecordOutput{})
	pulumi.RegisterOutputType(NsRecordArrayOutput{})
	pulumi.RegisterOutputType(NsRecordResponseOutput{})
	pulumi.RegisterOutputType(NsRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordOutput{})
	pulumi.RegisterOutputType(PtrRecordArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordResponseOutput{})
	pulumi.RegisterOutputType(PtrRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(SigningKeyResponseOutput{})
	pulumi.RegisterOutputType(SigningKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(SoaRecordOutput{})
	pulumi.RegisterOutputType(SoaRecordPtrOutput{})
	pulumi.RegisterOutputType(SoaRecordResponseOutput{})
	pulumi.RegisterOutputType(SoaRecordResponsePtrOutput{})
	pulumi.RegisterOutputType(SrvRecordOutput{})
	pulumi.RegisterOutputType(SrvRecordArrayOutput{})
	pulumi.RegisterOutputType(SrvRecordResponseOutput{})
	pulumi.RegisterOutputType(SrvRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceArrayOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TlsaRecordOutput{})
	pulumi.RegisterOutputType(TlsaRecordArrayOutput{})
	pulumi.RegisterOutputType(TlsaRecordResponseOutput{})
	pulumi.RegisterOutputType(TlsaRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordOutput{})
	pulumi.RegisterOutputType(TxtRecordArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordResponseOutput{})
	pulumi.RegisterOutputType(TxtRecordResponseArrayOutput{})
}
