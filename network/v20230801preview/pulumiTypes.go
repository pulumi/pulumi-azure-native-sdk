// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230801preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type PerimeterBasedAccessRuleResponse struct {
	// NSP id in the ARM id format.
	Id string `pulumi:"id"`
	// Location of the NSP supplied.
	Location string `pulumi:"location"`
	// Resource guid of the NSP supplied.
	PerimeterGuid string `pulumi:"perimeterGuid"`
}

type PerimeterBasedAccessRuleResponseOutput struct{ *pulumi.OutputState }

func (PerimeterBasedAccessRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerimeterBasedAccessRuleResponse)(nil)).Elem()
}

func (o PerimeterBasedAccessRuleResponseOutput) ToPerimeterBasedAccessRuleResponseOutput() PerimeterBasedAccessRuleResponseOutput {
	return o
}

func (o PerimeterBasedAccessRuleResponseOutput) ToPerimeterBasedAccessRuleResponseOutputWithContext(ctx context.Context) PerimeterBasedAccessRuleResponseOutput {
	return o
}

// NSP id in the ARM id format.
func (o PerimeterBasedAccessRuleResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PerimeterBasedAccessRuleResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the NSP supplied.
func (o PerimeterBasedAccessRuleResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PerimeterBasedAccessRuleResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Resource guid of the NSP supplied.
func (o PerimeterBasedAccessRuleResponseOutput) PerimeterGuid() pulumi.StringOutput {
	return o.ApplyT(func(v PerimeterBasedAccessRuleResponse) string { return v.PerimeterGuid }).(pulumi.StringOutput)
}

type PerimeterBasedAccessRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (PerimeterBasedAccessRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerimeterBasedAccessRuleResponse)(nil)).Elem()
}

func (o PerimeterBasedAccessRuleResponseArrayOutput) ToPerimeterBasedAccessRuleResponseArrayOutput() PerimeterBasedAccessRuleResponseArrayOutput {
	return o
}

func (o PerimeterBasedAccessRuleResponseArrayOutput) ToPerimeterBasedAccessRuleResponseArrayOutputWithContext(ctx context.Context) PerimeterBasedAccessRuleResponseArrayOutput {
	return o
}

func (o PerimeterBasedAccessRuleResponseArrayOutput) Index(i pulumi.IntInput) PerimeterBasedAccessRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerimeterBasedAccessRuleResponse {
		return vs[0].([]PerimeterBasedAccessRuleResponse)[vs[1].(int)]
	}).(PerimeterBasedAccessRuleResponseOutput)
}

// Reference to another subresource.
type SubResource struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//	SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// Reference to another subresource.
type SubResourceArgs struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//	        SubResourceArgs{...}
//
//	or:
//
//	        nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// Reference to another subresource.
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource {
		if v != nil {
			return *v
		}
		var ret SubResource
		return ret
	}).(SubResourceOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Reference to another subresource.
type SubResourceResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// Reference to another subresource.
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

// Resource ID.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse {
		if v != nil {
			return *v
		}
		var ret SubResourceResponse
		return ret
	}).(SubResourceResponseOutput)
}

// Resource ID.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubscriptionId struct {
	// Subscription id in the ARM id format.
	Id *string `pulumi:"id"`
}

// SubscriptionIdInput is an input type that accepts SubscriptionIdArgs and SubscriptionIdOutput values.
// You can construct a concrete instance of `SubscriptionIdInput` via:
//
//	SubscriptionIdArgs{...}
type SubscriptionIdInput interface {
	pulumi.Input

	ToSubscriptionIdOutput() SubscriptionIdOutput
	ToSubscriptionIdOutputWithContext(context.Context) SubscriptionIdOutput
}

type SubscriptionIdArgs struct {
	// Subscription id in the ARM id format.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubscriptionIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionId)(nil)).Elem()
}

func (i SubscriptionIdArgs) ToSubscriptionIdOutput() SubscriptionIdOutput {
	return i.ToSubscriptionIdOutputWithContext(context.Background())
}

func (i SubscriptionIdArgs) ToSubscriptionIdOutputWithContext(ctx context.Context) SubscriptionIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIdOutput)
}

// SubscriptionIdArrayInput is an input type that accepts SubscriptionIdArray and SubscriptionIdArrayOutput values.
// You can construct a concrete instance of `SubscriptionIdArrayInput` via:
//
//	SubscriptionIdArray{ SubscriptionIdArgs{...} }
type SubscriptionIdArrayInput interface {
	pulumi.Input

	ToSubscriptionIdArrayOutput() SubscriptionIdArrayOutput
	ToSubscriptionIdArrayOutputWithContext(context.Context) SubscriptionIdArrayOutput
}

type SubscriptionIdArray []SubscriptionIdInput

func (SubscriptionIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionId)(nil)).Elem()
}

func (i SubscriptionIdArray) ToSubscriptionIdArrayOutput() SubscriptionIdArrayOutput {
	return i.ToSubscriptionIdArrayOutputWithContext(context.Background())
}

func (i SubscriptionIdArray) ToSubscriptionIdArrayOutputWithContext(ctx context.Context) SubscriptionIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionIdArrayOutput)
}

type SubscriptionIdOutput struct{ *pulumi.OutputState }

func (SubscriptionIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionId)(nil)).Elem()
}

func (o SubscriptionIdOutput) ToSubscriptionIdOutput() SubscriptionIdOutput {
	return o
}

func (o SubscriptionIdOutput) ToSubscriptionIdOutputWithContext(ctx context.Context) SubscriptionIdOutput {
	return o
}

// Subscription id in the ARM id format.
func (o SubscriptionIdOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionId) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubscriptionIdArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionId)(nil)).Elem()
}

func (o SubscriptionIdArrayOutput) ToSubscriptionIdArrayOutput() SubscriptionIdArrayOutput {
	return o
}

func (o SubscriptionIdArrayOutput) ToSubscriptionIdArrayOutputWithContext(ctx context.Context) SubscriptionIdArrayOutput {
	return o
}

func (o SubscriptionIdArrayOutput) Index(i pulumi.IntInput) SubscriptionIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionId {
		return vs[0].([]SubscriptionId)[vs[1].(int)]
	}).(SubscriptionIdOutput)
}

type SubscriptionIdResponse struct {
	// Subscription id in the ARM id format.
	Id *string `pulumi:"id"`
}

type SubscriptionIdResponseOutput struct{ *pulumi.OutputState }

func (SubscriptionIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionIdResponse)(nil)).Elem()
}

func (o SubscriptionIdResponseOutput) ToSubscriptionIdResponseOutput() SubscriptionIdResponseOutput {
	return o
}

func (o SubscriptionIdResponseOutput) ToSubscriptionIdResponseOutputWithContext(ctx context.Context) SubscriptionIdResponseOutput {
	return o
}

// Subscription id in the ARM id format.
func (o SubscriptionIdResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionIdResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubscriptionIdResponseArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionIdResponse)(nil)).Elem()
}

func (o SubscriptionIdResponseArrayOutput) ToSubscriptionIdResponseArrayOutput() SubscriptionIdResponseArrayOutput {
	return o
}

func (o SubscriptionIdResponseArrayOutput) ToSubscriptionIdResponseArrayOutputWithContext(ctx context.Context) SubscriptionIdResponseArrayOutput {
	return o
}

func (o SubscriptionIdResponseArrayOutput) Index(i pulumi.IntInput) SubscriptionIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionIdResponse {
		return vs[0].([]SubscriptionIdResponse)[vs[1].(int)]
	}).(SubscriptionIdResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(PerimeterBasedAccessRuleResponseOutput{})
	pulumi.RegisterOutputType(PerimeterBasedAccessRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionIdOutput{})
	pulumi.RegisterOutputType(SubscriptionIdArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionIdResponseOutput{})
	pulumi.RegisterOutputType(SubscriptionIdResponseArrayOutput{})
}
