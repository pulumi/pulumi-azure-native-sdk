// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// DNS Proxy Settings in Firewall Policy.
type DnsSettings struct {
	// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
	EnableProxy *bool `pulumi:"enableProxy"`
	// FQDNs in Network Rules are supported when set to true.
	RequireProxyForNetworkRules *bool `pulumi:"requireProxyForNetworkRules"`
	// List of Custom DNS Servers.
	Servers []string `pulumi:"servers"`
}

// DnsSettingsInput is an input type that accepts DnsSettingsArgs and DnsSettingsOutput values.
// You can construct a concrete instance of `DnsSettingsInput` via:
//
//	DnsSettingsArgs{...}
type DnsSettingsInput interface {
	pulumi.Input

	ToDnsSettingsOutput() DnsSettingsOutput
	ToDnsSettingsOutputWithContext(context.Context) DnsSettingsOutput
}

// DNS Proxy Settings in Firewall Policy.
type DnsSettingsArgs struct {
	// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
	EnableProxy pulumi.BoolPtrInput `pulumi:"enableProxy"`
	// FQDNs in Network Rules are supported when set to true.
	RequireProxyForNetworkRules pulumi.BoolPtrInput `pulumi:"requireProxyForNetworkRules"`
	// List of Custom DNS Servers.
	Servers pulumi.StringArrayInput `pulumi:"servers"`
}

func (DnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSettings)(nil)).Elem()
}

func (i DnsSettingsArgs) ToDnsSettingsOutput() DnsSettingsOutput {
	return i.ToDnsSettingsOutputWithContext(context.Background())
}

func (i DnsSettingsArgs) ToDnsSettingsOutputWithContext(ctx context.Context) DnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsOutput)
}

func (i DnsSettingsArgs) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return i.ToDnsSettingsPtrOutputWithContext(context.Background())
}

func (i DnsSettingsArgs) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsOutput).ToDnsSettingsPtrOutputWithContext(ctx)
}

// DnsSettingsPtrInput is an input type that accepts DnsSettingsArgs, DnsSettingsPtr and DnsSettingsPtrOutput values.
// You can construct a concrete instance of `DnsSettingsPtrInput` via:
//
//	        DnsSettingsArgs{...}
//
//	or:
//
//	        nil
type DnsSettingsPtrInput interface {
	pulumi.Input

	ToDnsSettingsPtrOutput() DnsSettingsPtrOutput
	ToDnsSettingsPtrOutputWithContext(context.Context) DnsSettingsPtrOutput
}

type dnsSettingsPtrType DnsSettingsArgs

func DnsSettingsPtr(v *DnsSettingsArgs) DnsSettingsPtrInput {
	return (*dnsSettingsPtrType)(v)
}

func (*dnsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSettings)(nil)).Elem()
}

func (i *dnsSettingsPtrType) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return i.ToDnsSettingsPtrOutputWithContext(context.Background())
}

func (i *dnsSettingsPtrType) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsPtrOutput)
}

// DNS Proxy Settings in Firewall Policy.
type DnsSettingsOutput struct{ *pulumi.OutputState }

func (DnsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSettings)(nil)).Elem()
}

func (o DnsSettingsOutput) ToDnsSettingsOutput() DnsSettingsOutput {
	return o
}

func (o DnsSettingsOutput) ToDnsSettingsOutputWithContext(ctx context.Context) DnsSettingsOutput {
	return o
}

func (o DnsSettingsOutput) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return o.ToDnsSettingsPtrOutputWithContext(context.Background())
}

func (o DnsSettingsOutput) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DnsSettings) *DnsSettings {
		return &v
	}).(DnsSettingsPtrOutput)
}

// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
func (o DnsSettingsOutput) EnableProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsSettings) *bool { return v.EnableProxy }).(pulumi.BoolPtrOutput)
}

// FQDNs in Network Rules are supported when set to true.
func (o DnsSettingsOutput) RequireProxyForNetworkRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsSettings) *bool { return v.RequireProxyForNetworkRules }).(pulumi.BoolPtrOutput)
}

// List of Custom DNS Servers.
func (o DnsSettingsOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DnsSettings) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type DnsSettingsPtrOutput struct{ *pulumi.OutputState }

func (DnsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSettings)(nil)).Elem()
}

func (o DnsSettingsPtrOutput) ToDnsSettingsPtrOutput() DnsSettingsPtrOutput {
	return o
}

func (o DnsSettingsPtrOutput) ToDnsSettingsPtrOutputWithContext(ctx context.Context) DnsSettingsPtrOutput {
	return o
}

func (o DnsSettingsPtrOutput) Elem() DnsSettingsOutput {
	return o.ApplyT(func(v *DnsSettings) DnsSettings {
		if v != nil {
			return *v
		}
		var ret DnsSettings
		return ret
	}).(DnsSettingsOutput)
}

// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
func (o DnsSettingsPtrOutput) EnableProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableProxy
	}).(pulumi.BoolPtrOutput)
}

// FQDNs in Network Rules are supported when set to true.
func (o DnsSettingsPtrOutput) RequireProxyForNetworkRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RequireProxyForNetworkRules
	}).(pulumi.BoolPtrOutput)
}

// List of Custom DNS Servers.
func (o DnsSettingsPtrOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsSettings) []string {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(pulumi.StringArrayOutput)
}

// DNS Proxy Settings in Firewall Policy.
type DnsSettingsResponse struct {
	// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
	EnableProxy *bool `pulumi:"enableProxy"`
	// FQDNs in Network Rules are supported when set to true.
	RequireProxyForNetworkRules *bool `pulumi:"requireProxyForNetworkRules"`
	// List of Custom DNS Servers.
	Servers []string `pulumi:"servers"`
}

// DNS Proxy Settings in Firewall Policy.
type DnsSettingsResponseOutput struct{ *pulumi.OutputState }

func (DnsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSettingsResponse)(nil)).Elem()
}

func (o DnsSettingsResponseOutput) ToDnsSettingsResponseOutput() DnsSettingsResponseOutput {
	return o
}

func (o DnsSettingsResponseOutput) ToDnsSettingsResponseOutputWithContext(ctx context.Context) DnsSettingsResponseOutput {
	return o
}

// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
func (o DnsSettingsResponseOutput) EnableProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsSettingsResponse) *bool { return v.EnableProxy }).(pulumi.BoolPtrOutput)
}

// FQDNs in Network Rules are supported when set to true.
func (o DnsSettingsResponseOutput) RequireProxyForNetworkRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsSettingsResponse) *bool { return v.RequireProxyForNetworkRules }).(pulumi.BoolPtrOutput)
}

// List of Custom DNS Servers.
func (o DnsSettingsResponseOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DnsSettingsResponse) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type DnsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DnsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSettingsResponse)(nil)).Elem()
}

func (o DnsSettingsResponsePtrOutput) ToDnsSettingsResponsePtrOutput() DnsSettingsResponsePtrOutput {
	return o
}

func (o DnsSettingsResponsePtrOutput) ToDnsSettingsResponsePtrOutputWithContext(ctx context.Context) DnsSettingsResponsePtrOutput {
	return o
}

func (o DnsSettingsResponsePtrOutput) Elem() DnsSettingsResponseOutput {
	return o.ApplyT(func(v *DnsSettingsResponse) DnsSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DnsSettingsResponse
		return ret
	}).(DnsSettingsResponseOutput)
}

// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
func (o DnsSettingsResponsePtrOutput) EnableProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableProxy
	}).(pulumi.BoolPtrOutput)
}

// FQDNs in Network Rules are supported when set to true.
func (o DnsSettingsResponsePtrOutput) RequireProxyForNetworkRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireProxyForNetworkRules
	}).(pulumi.BoolPtrOutput)
}

// List of Custom DNS Servers.
func (o DnsSettingsResponsePtrOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(pulumi.StringArrayOutput)
}

// Explicit Proxy Settings in Firewall Policy.
type ExplicitProxySettings struct {
	// When set to true, explicit proxy mode is enabled.
	EnableExplicitProxy *bool `pulumi:"enableExplicitProxy"`
	// Port number for explicit proxy http protocol, cannot be greater than 64000.
	HttpPort *int `pulumi:"httpPort"`
	// Port number for explicit proxy https protocol, cannot be greater than 64000.
	HttpsPort *int `pulumi:"httpsPort"`
	// SAS URL for PAC file.
	PacFile *string `pulumi:"pacFile"`
	// Port number for firewall to serve PAC file.
	PacFilePort *int `pulumi:"pacFilePort"`
}

// ExplicitProxySettingsInput is an input type that accepts ExplicitProxySettingsArgs and ExplicitProxySettingsOutput values.
// You can construct a concrete instance of `ExplicitProxySettingsInput` via:
//
//	ExplicitProxySettingsArgs{...}
type ExplicitProxySettingsInput interface {
	pulumi.Input

	ToExplicitProxySettingsOutput() ExplicitProxySettingsOutput
	ToExplicitProxySettingsOutputWithContext(context.Context) ExplicitProxySettingsOutput
}

// Explicit Proxy Settings in Firewall Policy.
type ExplicitProxySettingsArgs struct {
	// When set to true, explicit proxy mode is enabled.
	EnableExplicitProxy pulumi.BoolPtrInput `pulumi:"enableExplicitProxy"`
	// Port number for explicit proxy http protocol, cannot be greater than 64000.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// Port number for explicit proxy https protocol, cannot be greater than 64000.
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// SAS URL for PAC file.
	PacFile pulumi.StringPtrInput `pulumi:"pacFile"`
	// Port number for firewall to serve PAC file.
	PacFilePort pulumi.IntPtrInput `pulumi:"pacFilePort"`
}

func (ExplicitProxySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplicitProxySettings)(nil)).Elem()
}

func (i ExplicitProxySettingsArgs) ToExplicitProxySettingsOutput() ExplicitProxySettingsOutput {
	return i.ToExplicitProxySettingsOutputWithContext(context.Background())
}

func (i ExplicitProxySettingsArgs) ToExplicitProxySettingsOutputWithContext(ctx context.Context) ExplicitProxySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitProxySettingsOutput)
}

func (i ExplicitProxySettingsArgs) ToExplicitProxySettingsPtrOutput() ExplicitProxySettingsPtrOutput {
	return i.ToExplicitProxySettingsPtrOutputWithContext(context.Background())
}

func (i ExplicitProxySettingsArgs) ToExplicitProxySettingsPtrOutputWithContext(ctx context.Context) ExplicitProxySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitProxySettingsOutput).ToExplicitProxySettingsPtrOutputWithContext(ctx)
}

// ExplicitProxySettingsPtrInput is an input type that accepts ExplicitProxySettingsArgs, ExplicitProxySettingsPtr and ExplicitProxySettingsPtrOutput values.
// You can construct a concrete instance of `ExplicitProxySettingsPtrInput` via:
//
//	        ExplicitProxySettingsArgs{...}
//
//	or:
//
//	        nil
type ExplicitProxySettingsPtrInput interface {
	pulumi.Input

	ToExplicitProxySettingsPtrOutput() ExplicitProxySettingsPtrOutput
	ToExplicitProxySettingsPtrOutputWithContext(context.Context) ExplicitProxySettingsPtrOutput
}

type explicitProxySettingsPtrType ExplicitProxySettingsArgs

func ExplicitProxySettingsPtr(v *ExplicitProxySettingsArgs) ExplicitProxySettingsPtrInput {
	return (*explicitProxySettingsPtrType)(v)
}

func (*explicitProxySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExplicitProxySettings)(nil)).Elem()
}

func (i *explicitProxySettingsPtrType) ToExplicitProxySettingsPtrOutput() ExplicitProxySettingsPtrOutput {
	return i.ToExplicitProxySettingsPtrOutputWithContext(context.Background())
}

func (i *explicitProxySettingsPtrType) ToExplicitProxySettingsPtrOutputWithContext(ctx context.Context) ExplicitProxySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitProxySettingsPtrOutput)
}

// Explicit Proxy Settings in Firewall Policy.
type ExplicitProxySettingsOutput struct{ *pulumi.OutputState }

func (ExplicitProxySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplicitProxySettings)(nil)).Elem()
}

func (o ExplicitProxySettingsOutput) ToExplicitProxySettingsOutput() ExplicitProxySettingsOutput {
	return o
}

func (o ExplicitProxySettingsOutput) ToExplicitProxySettingsOutputWithContext(ctx context.Context) ExplicitProxySettingsOutput {
	return o
}

func (o ExplicitProxySettingsOutput) ToExplicitProxySettingsPtrOutput() ExplicitProxySettingsPtrOutput {
	return o.ToExplicitProxySettingsPtrOutputWithContext(context.Background())
}

func (o ExplicitProxySettingsOutput) ToExplicitProxySettingsPtrOutputWithContext(ctx context.Context) ExplicitProxySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExplicitProxySettings) *ExplicitProxySettings {
		return &v
	}).(ExplicitProxySettingsPtrOutput)
}

// When set to true, explicit proxy mode is enabled.
func (o ExplicitProxySettingsOutput) EnableExplicitProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettings) *bool { return v.EnableExplicitProxy }).(pulumi.BoolPtrOutput)
}

// Port number for explicit proxy http protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettings) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Port number for explicit proxy https protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettings) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// SAS URL for PAC file.
func (o ExplicitProxySettingsOutput) PacFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettings) *string { return v.PacFile }).(pulumi.StringPtrOutput)
}

// Port number for firewall to serve PAC file.
func (o ExplicitProxySettingsOutput) PacFilePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettings) *int { return v.PacFilePort }).(pulumi.IntPtrOutput)
}

type ExplicitProxySettingsPtrOutput struct{ *pulumi.OutputState }

func (ExplicitProxySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExplicitProxySettings)(nil)).Elem()
}

func (o ExplicitProxySettingsPtrOutput) ToExplicitProxySettingsPtrOutput() ExplicitProxySettingsPtrOutput {
	return o
}

func (o ExplicitProxySettingsPtrOutput) ToExplicitProxySettingsPtrOutputWithContext(ctx context.Context) ExplicitProxySettingsPtrOutput {
	return o
}

func (o ExplicitProxySettingsPtrOutput) Elem() ExplicitProxySettingsOutput {
	return o.ApplyT(func(v *ExplicitProxySettings) ExplicitProxySettings {
		if v != nil {
			return *v
		}
		var ret ExplicitProxySettings
		return ret
	}).(ExplicitProxySettingsOutput)
}

// When set to true, explicit proxy mode is enabled.
func (o ExplicitProxySettingsPtrOutput) EnableExplicitProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExplicitProxy
	}).(pulumi.BoolPtrOutput)
}

// Port number for explicit proxy http protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsPtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettings) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

// Port number for explicit proxy https protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsPtrOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettings) *int {
		if v == nil {
			return nil
		}
		return v.HttpsPort
	}).(pulumi.IntPtrOutput)
}

// SAS URL for PAC file.
func (o ExplicitProxySettingsPtrOutput) PacFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettings) *string {
		if v == nil {
			return nil
		}
		return v.PacFile
	}).(pulumi.StringPtrOutput)
}

// Port number for firewall to serve PAC file.
func (o ExplicitProxySettingsPtrOutput) PacFilePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettings) *int {
		if v == nil {
			return nil
		}
		return v.PacFilePort
	}).(pulumi.IntPtrOutput)
}

// Explicit Proxy Settings in Firewall Policy.
type ExplicitProxySettingsResponse struct {
	// When set to true, explicit proxy mode is enabled.
	EnableExplicitProxy *bool `pulumi:"enableExplicitProxy"`
	// Port number for explicit proxy http protocol, cannot be greater than 64000.
	HttpPort *int `pulumi:"httpPort"`
	// Port number for explicit proxy https protocol, cannot be greater than 64000.
	HttpsPort *int `pulumi:"httpsPort"`
	// SAS URL for PAC file.
	PacFile *string `pulumi:"pacFile"`
	// Port number for firewall to serve PAC file.
	PacFilePort *int `pulumi:"pacFilePort"`
}

// Explicit Proxy Settings in Firewall Policy.
type ExplicitProxySettingsResponseOutput struct{ *pulumi.OutputState }

func (ExplicitProxySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplicitProxySettingsResponse)(nil)).Elem()
}

func (o ExplicitProxySettingsResponseOutput) ToExplicitProxySettingsResponseOutput() ExplicitProxySettingsResponseOutput {
	return o
}

func (o ExplicitProxySettingsResponseOutput) ToExplicitProxySettingsResponseOutputWithContext(ctx context.Context) ExplicitProxySettingsResponseOutput {
	return o
}

// When set to true, explicit proxy mode is enabled.
func (o ExplicitProxySettingsResponseOutput) EnableExplicitProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettingsResponse) *bool { return v.EnableExplicitProxy }).(pulumi.BoolPtrOutput)
}

// Port number for explicit proxy http protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsResponseOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettingsResponse) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// Port number for explicit proxy https protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsResponseOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettingsResponse) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// SAS URL for PAC file.
func (o ExplicitProxySettingsResponseOutput) PacFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettingsResponse) *string { return v.PacFile }).(pulumi.StringPtrOutput)
}

// Port number for firewall to serve PAC file.
func (o ExplicitProxySettingsResponseOutput) PacFilePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExplicitProxySettingsResponse) *int { return v.PacFilePort }).(pulumi.IntPtrOutput)
}

type ExplicitProxySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ExplicitProxySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExplicitProxySettingsResponse)(nil)).Elem()
}

func (o ExplicitProxySettingsResponsePtrOutput) ToExplicitProxySettingsResponsePtrOutput() ExplicitProxySettingsResponsePtrOutput {
	return o
}

func (o ExplicitProxySettingsResponsePtrOutput) ToExplicitProxySettingsResponsePtrOutputWithContext(ctx context.Context) ExplicitProxySettingsResponsePtrOutput {
	return o
}

func (o ExplicitProxySettingsResponsePtrOutput) Elem() ExplicitProxySettingsResponseOutput {
	return o.ApplyT(func(v *ExplicitProxySettingsResponse) ExplicitProxySettingsResponse {
		if v != nil {
			return *v
		}
		var ret ExplicitProxySettingsResponse
		return ret
	}).(ExplicitProxySettingsResponseOutput)
}

// When set to true, explicit proxy mode is enabled.
func (o ExplicitProxySettingsResponsePtrOutput) EnableExplicitProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExplicitProxy
	}).(pulumi.BoolPtrOutput)
}

// Port number for explicit proxy http protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsResponsePtrOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.HttpPort
	}).(pulumi.IntPtrOutput)
}

// Port number for explicit proxy https protocol, cannot be greater than 64000.
func (o ExplicitProxySettingsResponsePtrOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.HttpsPort
	}).(pulumi.IntPtrOutput)
}

// SAS URL for PAC file.
func (o ExplicitProxySettingsResponsePtrOutput) PacFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PacFile
	}).(pulumi.StringPtrOutput)
}

// Port number for firewall to serve PAC file.
func (o ExplicitProxySettingsResponsePtrOutput) PacFilePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExplicitProxySettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.PacFilePort
	}).(pulumi.IntPtrOutput)
}

// Will contain the filter name and values to operate on
type FilterItems struct {
	// The name of the field we would like to filter
	Field *string `pulumi:"field"`
	// List of values to filter the current field by
	Values []string `pulumi:"values"`
}

// FilterItemsInput is an input type that accepts FilterItemsArgs and FilterItemsOutput values.
// You can construct a concrete instance of `FilterItemsInput` via:
//
//	FilterItemsArgs{...}
type FilterItemsInput interface {
	pulumi.Input

	ToFilterItemsOutput() FilterItemsOutput
	ToFilterItemsOutputWithContext(context.Context) FilterItemsOutput
}

// Will contain the filter name and values to operate on
type FilterItemsArgs struct {
	// The name of the field we would like to filter
	Field pulumi.StringPtrInput `pulumi:"field"`
	// List of values to filter the current field by
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (FilterItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterItems)(nil)).Elem()
}

func (i FilterItemsArgs) ToFilterItemsOutput() FilterItemsOutput {
	return i.ToFilterItemsOutputWithContext(context.Background())
}

func (i FilterItemsArgs) ToFilterItemsOutputWithContext(ctx context.Context) FilterItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterItemsOutput)
}

// FilterItemsArrayInput is an input type that accepts FilterItemsArray and FilterItemsArrayOutput values.
// You can construct a concrete instance of `FilterItemsArrayInput` via:
//
//	FilterItemsArray{ FilterItemsArgs{...} }
type FilterItemsArrayInput interface {
	pulumi.Input

	ToFilterItemsArrayOutput() FilterItemsArrayOutput
	ToFilterItemsArrayOutputWithContext(context.Context) FilterItemsArrayOutput
}

type FilterItemsArray []FilterItemsInput

func (FilterItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterItems)(nil)).Elem()
}

func (i FilterItemsArray) ToFilterItemsArrayOutput() FilterItemsArrayOutput {
	return i.ToFilterItemsArrayOutputWithContext(context.Background())
}

func (i FilterItemsArray) ToFilterItemsArrayOutputWithContext(ctx context.Context) FilterItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterItemsArrayOutput)
}

// Will contain the filter name and values to operate on
type FilterItemsOutput struct{ *pulumi.OutputState }

func (FilterItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterItems)(nil)).Elem()
}

func (o FilterItemsOutput) ToFilterItemsOutput() FilterItemsOutput {
	return o
}

func (o FilterItemsOutput) ToFilterItemsOutputWithContext(ctx context.Context) FilterItemsOutput {
	return o
}

// The name of the field we would like to filter
func (o FilterItemsOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilterItems) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// List of values to filter the current field by
func (o FilterItemsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterItems) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type FilterItemsArrayOutput struct{ *pulumi.OutputState }

func (FilterItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterItems)(nil)).Elem()
}

func (o FilterItemsArrayOutput) ToFilterItemsArrayOutput() FilterItemsArrayOutput {
	return o
}

func (o FilterItemsArrayOutput) ToFilterItemsArrayOutputWithContext(ctx context.Context) FilterItemsArrayOutput {
	return o
}

func (o FilterItemsArrayOutput) Index(i pulumi.IntInput) FilterItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterItems {
		return vs[0].([]FilterItems)[vs[1].(int)]
	}).(FilterItemsOutput)
}

// Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthority struct {
	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretId *string `pulumi:"keyVaultSecretId"`
	// Name of the CA certificate.
	Name *string `pulumi:"name"`
}

// FirewallPolicyCertificateAuthorityInput is an input type that accepts FirewallPolicyCertificateAuthorityArgs and FirewallPolicyCertificateAuthorityOutput values.
// You can construct a concrete instance of `FirewallPolicyCertificateAuthorityInput` via:
//
//	FirewallPolicyCertificateAuthorityArgs{...}
type FirewallPolicyCertificateAuthorityInput interface {
	pulumi.Input

	ToFirewallPolicyCertificateAuthorityOutput() FirewallPolicyCertificateAuthorityOutput
	ToFirewallPolicyCertificateAuthorityOutputWithContext(context.Context) FirewallPolicyCertificateAuthorityOutput
}

// Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthorityArgs struct {
	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretId pulumi.StringPtrInput `pulumi:"keyVaultSecretId"`
	// Name of the CA certificate.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (FirewallPolicyCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyCertificateAuthority)(nil)).Elem()
}

func (i FirewallPolicyCertificateAuthorityArgs) ToFirewallPolicyCertificateAuthorityOutput() FirewallPolicyCertificateAuthorityOutput {
	return i.ToFirewallPolicyCertificateAuthorityOutputWithContext(context.Background())
}

func (i FirewallPolicyCertificateAuthorityArgs) ToFirewallPolicyCertificateAuthorityOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyCertificateAuthorityOutput)
}

func (i FirewallPolicyCertificateAuthorityArgs) ToFirewallPolicyCertificateAuthorityPtrOutput() FirewallPolicyCertificateAuthorityPtrOutput {
	return i.ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyCertificateAuthorityArgs) ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyCertificateAuthorityOutput).ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(ctx)
}

// FirewallPolicyCertificateAuthorityPtrInput is an input type that accepts FirewallPolicyCertificateAuthorityArgs, FirewallPolicyCertificateAuthorityPtr and FirewallPolicyCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyCertificateAuthorityPtrInput` via:
//
//	        FirewallPolicyCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicyCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToFirewallPolicyCertificateAuthorityPtrOutput() FirewallPolicyCertificateAuthorityPtrOutput
	ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(context.Context) FirewallPolicyCertificateAuthorityPtrOutput
}

type firewallPolicyCertificateAuthorityPtrType FirewallPolicyCertificateAuthorityArgs

func FirewallPolicyCertificateAuthorityPtr(v *FirewallPolicyCertificateAuthorityArgs) FirewallPolicyCertificateAuthorityPtrInput {
	return (*firewallPolicyCertificateAuthorityPtrType)(v)
}

func (*firewallPolicyCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyCertificateAuthority)(nil)).Elem()
}

func (i *firewallPolicyCertificateAuthorityPtrType) ToFirewallPolicyCertificateAuthorityPtrOutput() FirewallPolicyCertificateAuthorityPtrOutput {
	return i.ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyCertificateAuthorityPtrType) ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyCertificateAuthorityPtrOutput)
}

// Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyCertificateAuthority)(nil)).Elem()
}

func (o FirewallPolicyCertificateAuthorityOutput) ToFirewallPolicyCertificateAuthorityOutput() FirewallPolicyCertificateAuthorityOutput {
	return o
}

func (o FirewallPolicyCertificateAuthorityOutput) ToFirewallPolicyCertificateAuthorityOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityOutput {
	return o
}

func (o FirewallPolicyCertificateAuthorityOutput) ToFirewallPolicyCertificateAuthorityPtrOutput() FirewallPolicyCertificateAuthorityPtrOutput {
	return o.ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyCertificateAuthorityOutput) ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicyCertificateAuthority) *FirewallPolicyCertificateAuthority {
		return &v
	}).(FirewallPolicyCertificateAuthorityPtrOutput)
}

// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
func (o FirewallPolicyCertificateAuthorityOutput) KeyVaultSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCertificateAuthority) *string { return v.KeyVaultSecretId }).(pulumi.StringPtrOutput)
}

// Name of the CA certificate.
func (o FirewallPolicyCertificateAuthorityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCertificateAuthority) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FirewallPolicyCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyCertificateAuthority)(nil)).Elem()
}

func (o FirewallPolicyCertificateAuthorityPtrOutput) ToFirewallPolicyCertificateAuthorityPtrOutput() FirewallPolicyCertificateAuthorityPtrOutput {
	return o
}

func (o FirewallPolicyCertificateAuthorityPtrOutput) ToFirewallPolicyCertificateAuthorityPtrOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityPtrOutput {
	return o
}

func (o FirewallPolicyCertificateAuthorityPtrOutput) Elem() FirewallPolicyCertificateAuthorityOutput {
	return o.ApplyT(func(v *FirewallPolicyCertificateAuthority) FirewallPolicyCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyCertificateAuthority
		return ret
	}).(FirewallPolicyCertificateAuthorityOutput)
}

// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
func (o FirewallPolicyCertificateAuthorityPtrOutput) KeyVaultSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultSecretId
	}).(pulumi.StringPtrOutput)
}

// Name of the CA certificate.
func (o FirewallPolicyCertificateAuthorityPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthorityResponse struct {
	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretId *string `pulumi:"keyVaultSecretId"`
	// Name of the CA certificate.
	Name *string `pulumi:"name"`
}

// Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthorityResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCertificateAuthorityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyCertificateAuthorityResponse)(nil)).Elem()
}

func (o FirewallPolicyCertificateAuthorityResponseOutput) ToFirewallPolicyCertificateAuthorityResponseOutput() FirewallPolicyCertificateAuthorityResponseOutput {
	return o
}

func (o FirewallPolicyCertificateAuthorityResponseOutput) ToFirewallPolicyCertificateAuthorityResponseOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityResponseOutput {
	return o
}

// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
func (o FirewallPolicyCertificateAuthorityResponseOutput) KeyVaultSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCertificateAuthorityResponse) *string { return v.KeyVaultSecretId }).(pulumi.StringPtrOutput)
}

// Name of the CA certificate.
func (o FirewallPolicyCertificateAuthorityResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCertificateAuthorityResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FirewallPolicyCertificateAuthorityResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCertificateAuthorityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyCertificateAuthorityResponse)(nil)).Elem()
}

func (o FirewallPolicyCertificateAuthorityResponsePtrOutput) ToFirewallPolicyCertificateAuthorityResponsePtrOutput() FirewallPolicyCertificateAuthorityResponsePtrOutput {
	return o
}

func (o FirewallPolicyCertificateAuthorityResponsePtrOutput) ToFirewallPolicyCertificateAuthorityResponsePtrOutputWithContext(ctx context.Context) FirewallPolicyCertificateAuthorityResponsePtrOutput {
	return o
}

func (o FirewallPolicyCertificateAuthorityResponsePtrOutput) Elem() FirewallPolicyCertificateAuthorityResponseOutput {
	return o.ApplyT(func(v *FirewallPolicyCertificateAuthorityResponse) FirewallPolicyCertificateAuthorityResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyCertificateAuthorityResponse
		return ret
	}).(FirewallPolicyCertificateAuthorityResponseOutput)
}

// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
func (o FirewallPolicyCertificateAuthorityResponsePtrOutput) KeyVaultSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyCertificateAuthorityResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultSecretId
	}).(pulumi.StringPtrOutput)
}

// Name of the CA certificate.
func (o FirewallPolicyCertificateAuthorityResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyCertificateAuthorityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Firewall Policy Insights.
type FirewallPolicyInsights struct {
	// A flag to indicate if the insights are enabled on the policy.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Workspaces needed to configure the Firewall Policy Insights.
	LogAnalyticsResources *FirewallPolicyLogAnalyticsResources `pulumi:"logAnalyticsResources"`
	// Number of days the insights should be enabled on the policy.
	RetentionDays *int `pulumi:"retentionDays"`
}

// FirewallPolicyInsightsInput is an input type that accepts FirewallPolicyInsightsArgs and FirewallPolicyInsightsOutput values.
// You can construct a concrete instance of `FirewallPolicyInsightsInput` via:
//
//	FirewallPolicyInsightsArgs{...}
type FirewallPolicyInsightsInput interface {
	pulumi.Input

	ToFirewallPolicyInsightsOutput() FirewallPolicyInsightsOutput
	ToFirewallPolicyInsightsOutputWithContext(context.Context) FirewallPolicyInsightsOutput
}

// Firewall Policy Insights.
type FirewallPolicyInsightsArgs struct {
	// A flag to indicate if the insights are enabled on the policy.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Workspaces needed to configure the Firewall Policy Insights.
	LogAnalyticsResources FirewallPolicyLogAnalyticsResourcesPtrInput `pulumi:"logAnalyticsResources"`
	// Number of days the insights should be enabled on the policy.
	RetentionDays pulumi.IntPtrInput `pulumi:"retentionDays"`
}

func (FirewallPolicyInsightsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyInsights)(nil)).Elem()
}

func (i FirewallPolicyInsightsArgs) ToFirewallPolicyInsightsOutput() FirewallPolicyInsightsOutput {
	return i.ToFirewallPolicyInsightsOutputWithContext(context.Background())
}

func (i FirewallPolicyInsightsArgs) ToFirewallPolicyInsightsOutputWithContext(ctx context.Context) FirewallPolicyInsightsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyInsightsOutput)
}

func (i FirewallPolicyInsightsArgs) ToFirewallPolicyInsightsPtrOutput() FirewallPolicyInsightsPtrOutput {
	return i.ToFirewallPolicyInsightsPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyInsightsArgs) ToFirewallPolicyInsightsPtrOutputWithContext(ctx context.Context) FirewallPolicyInsightsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyInsightsOutput).ToFirewallPolicyInsightsPtrOutputWithContext(ctx)
}

// FirewallPolicyInsightsPtrInput is an input type that accepts FirewallPolicyInsightsArgs, FirewallPolicyInsightsPtr and FirewallPolicyInsightsPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyInsightsPtrInput` via:
//
//	        FirewallPolicyInsightsArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicyInsightsPtrInput interface {
	pulumi.Input

	ToFirewallPolicyInsightsPtrOutput() FirewallPolicyInsightsPtrOutput
	ToFirewallPolicyInsightsPtrOutputWithContext(context.Context) FirewallPolicyInsightsPtrOutput
}

type firewallPolicyInsightsPtrType FirewallPolicyInsightsArgs

func FirewallPolicyInsightsPtr(v *FirewallPolicyInsightsArgs) FirewallPolicyInsightsPtrInput {
	return (*firewallPolicyInsightsPtrType)(v)
}

func (*firewallPolicyInsightsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyInsights)(nil)).Elem()
}

func (i *firewallPolicyInsightsPtrType) ToFirewallPolicyInsightsPtrOutput() FirewallPolicyInsightsPtrOutput {
	return i.ToFirewallPolicyInsightsPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyInsightsPtrType) ToFirewallPolicyInsightsPtrOutputWithContext(ctx context.Context) FirewallPolicyInsightsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyInsightsPtrOutput)
}

// Firewall Policy Insights.
type FirewallPolicyInsightsOutput struct{ *pulumi.OutputState }

func (FirewallPolicyInsightsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyInsights)(nil)).Elem()
}

func (o FirewallPolicyInsightsOutput) ToFirewallPolicyInsightsOutput() FirewallPolicyInsightsOutput {
	return o
}

func (o FirewallPolicyInsightsOutput) ToFirewallPolicyInsightsOutputWithContext(ctx context.Context) FirewallPolicyInsightsOutput {
	return o
}

func (o FirewallPolicyInsightsOutput) ToFirewallPolicyInsightsPtrOutput() FirewallPolicyInsightsPtrOutput {
	return o.ToFirewallPolicyInsightsPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyInsightsOutput) ToFirewallPolicyInsightsPtrOutputWithContext(ctx context.Context) FirewallPolicyInsightsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicyInsights) *FirewallPolicyInsights {
		return &v
	}).(FirewallPolicyInsightsPtrOutput)
}

// A flag to indicate if the insights are enabled on the policy.
func (o FirewallPolicyInsightsOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicyInsights) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Workspaces needed to configure the Firewall Policy Insights.
func (o FirewallPolicyInsightsOutput) LogAnalyticsResources() FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return o.ApplyT(func(v FirewallPolicyInsights) *FirewallPolicyLogAnalyticsResources { return v.LogAnalyticsResources }).(FirewallPolicyLogAnalyticsResourcesPtrOutput)
}

// Number of days the insights should be enabled on the policy.
func (o FirewallPolicyInsightsOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallPolicyInsights) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

type FirewallPolicyInsightsPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyInsightsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyInsights)(nil)).Elem()
}

func (o FirewallPolicyInsightsPtrOutput) ToFirewallPolicyInsightsPtrOutput() FirewallPolicyInsightsPtrOutput {
	return o
}

func (o FirewallPolicyInsightsPtrOutput) ToFirewallPolicyInsightsPtrOutputWithContext(ctx context.Context) FirewallPolicyInsightsPtrOutput {
	return o
}

func (o FirewallPolicyInsightsPtrOutput) Elem() FirewallPolicyInsightsOutput {
	return o.ApplyT(func(v *FirewallPolicyInsights) FirewallPolicyInsights {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyInsights
		return ret
	}).(FirewallPolicyInsightsOutput)
}

// A flag to indicate if the insights are enabled on the policy.
func (o FirewallPolicyInsightsPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyInsights) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Workspaces needed to configure the Firewall Policy Insights.
func (o FirewallPolicyInsightsPtrOutput) LogAnalyticsResources() FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyInsights) *FirewallPolicyLogAnalyticsResources {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsResources
	}).(FirewallPolicyLogAnalyticsResourcesPtrOutput)
}

// Number of days the insights should be enabled on the policy.
func (o FirewallPolicyInsightsPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyInsights) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

// Firewall Policy Insights.
type FirewallPolicyInsightsResponse struct {
	// A flag to indicate if the insights are enabled on the policy.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Workspaces needed to configure the Firewall Policy Insights.
	LogAnalyticsResources *FirewallPolicyLogAnalyticsResourcesResponse `pulumi:"logAnalyticsResources"`
	// Number of days the insights should be enabled on the policy.
	RetentionDays *int `pulumi:"retentionDays"`
}

// Firewall Policy Insights.
type FirewallPolicyInsightsResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyInsightsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyInsightsResponse)(nil)).Elem()
}

func (o FirewallPolicyInsightsResponseOutput) ToFirewallPolicyInsightsResponseOutput() FirewallPolicyInsightsResponseOutput {
	return o
}

func (o FirewallPolicyInsightsResponseOutput) ToFirewallPolicyInsightsResponseOutputWithContext(ctx context.Context) FirewallPolicyInsightsResponseOutput {
	return o
}

// A flag to indicate if the insights are enabled on the policy.
func (o FirewallPolicyInsightsResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicyInsightsResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Workspaces needed to configure the Firewall Policy Insights.
func (o FirewallPolicyInsightsResponseOutput) LogAnalyticsResources() FirewallPolicyLogAnalyticsResourcesResponsePtrOutput {
	return o.ApplyT(func(v FirewallPolicyInsightsResponse) *FirewallPolicyLogAnalyticsResourcesResponse {
		return v.LogAnalyticsResources
	}).(FirewallPolicyLogAnalyticsResourcesResponsePtrOutput)
}

// Number of days the insights should be enabled on the policy.
func (o FirewallPolicyInsightsResponseOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallPolicyInsightsResponse) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

type FirewallPolicyInsightsResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyInsightsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyInsightsResponse)(nil)).Elem()
}

func (o FirewallPolicyInsightsResponsePtrOutput) ToFirewallPolicyInsightsResponsePtrOutput() FirewallPolicyInsightsResponsePtrOutput {
	return o
}

func (o FirewallPolicyInsightsResponsePtrOutput) ToFirewallPolicyInsightsResponsePtrOutputWithContext(ctx context.Context) FirewallPolicyInsightsResponsePtrOutput {
	return o
}

func (o FirewallPolicyInsightsResponsePtrOutput) Elem() FirewallPolicyInsightsResponseOutput {
	return o.ApplyT(func(v *FirewallPolicyInsightsResponse) FirewallPolicyInsightsResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyInsightsResponse
		return ret
	}).(FirewallPolicyInsightsResponseOutput)
}

// A flag to indicate if the insights are enabled on the policy.
func (o FirewallPolicyInsightsResponsePtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyInsightsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Workspaces needed to configure the Firewall Policy Insights.
func (o FirewallPolicyInsightsResponsePtrOutput) LogAnalyticsResources() FirewallPolicyLogAnalyticsResourcesResponsePtrOutput {
	return o.ApplyT(func(v *FirewallPolicyInsightsResponse) *FirewallPolicyLogAnalyticsResourcesResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsResources
	}).(FirewallPolicyLogAnalyticsResourcesResponsePtrOutput)
}

// Number of days the insights should be enabled on the policy.
func (o FirewallPolicyInsightsResponsePtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyInsightsResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

// Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetection struct {
	// Intrusion detection configuration properties.
	Configuration *FirewallPolicyIntrusionDetectionConfiguration `pulumi:"configuration"`
	// Intrusion detection general state.
	Mode *string `pulumi:"mode"`
}

// FirewallPolicyIntrusionDetectionInput is an input type that accepts FirewallPolicyIntrusionDetectionArgs and FirewallPolicyIntrusionDetectionOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionInput` via:
//
//	FirewallPolicyIntrusionDetectionArgs{...}
type FirewallPolicyIntrusionDetectionInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionOutput() FirewallPolicyIntrusionDetectionOutput
	ToFirewallPolicyIntrusionDetectionOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionOutput
}

// Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetectionArgs struct {
	// Intrusion detection configuration properties.
	Configuration FirewallPolicyIntrusionDetectionConfigurationPtrInput `pulumi:"configuration"`
	// Intrusion detection general state.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (FirewallPolicyIntrusionDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetection)(nil)).Elem()
}

func (i FirewallPolicyIntrusionDetectionArgs) ToFirewallPolicyIntrusionDetectionOutput() FirewallPolicyIntrusionDetectionOutput {
	return i.ToFirewallPolicyIntrusionDetectionOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionArgs) ToFirewallPolicyIntrusionDetectionOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionOutput)
}

func (i FirewallPolicyIntrusionDetectionArgs) ToFirewallPolicyIntrusionDetectionPtrOutput() FirewallPolicyIntrusionDetectionPtrOutput {
	return i.ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionArgs) ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionOutput).ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(ctx)
}

// FirewallPolicyIntrusionDetectionPtrInput is an input type that accepts FirewallPolicyIntrusionDetectionArgs, FirewallPolicyIntrusionDetectionPtr and FirewallPolicyIntrusionDetectionPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionPtrInput` via:
//
//	        FirewallPolicyIntrusionDetectionArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicyIntrusionDetectionPtrInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionPtrOutput() FirewallPolicyIntrusionDetectionPtrOutput
	ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionPtrOutput
}

type firewallPolicyIntrusionDetectionPtrType FirewallPolicyIntrusionDetectionArgs

func FirewallPolicyIntrusionDetectionPtr(v *FirewallPolicyIntrusionDetectionArgs) FirewallPolicyIntrusionDetectionPtrInput {
	return (*firewallPolicyIntrusionDetectionPtrType)(v)
}

func (*firewallPolicyIntrusionDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyIntrusionDetection)(nil)).Elem()
}

func (i *firewallPolicyIntrusionDetectionPtrType) ToFirewallPolicyIntrusionDetectionPtrOutput() FirewallPolicyIntrusionDetectionPtrOutput {
	return i.ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyIntrusionDetectionPtrType) ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionPtrOutput)
}

// Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetectionOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetection)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionOutput) ToFirewallPolicyIntrusionDetectionOutput() FirewallPolicyIntrusionDetectionOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionOutput) ToFirewallPolicyIntrusionDetectionOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionOutput) ToFirewallPolicyIntrusionDetectionPtrOutput() FirewallPolicyIntrusionDetectionPtrOutput {
	return o.ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyIntrusionDetectionOutput) ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicyIntrusionDetection) *FirewallPolicyIntrusionDetection {
		return &v
	}).(FirewallPolicyIntrusionDetectionPtrOutput)
}

// Intrusion detection configuration properties.
func (o FirewallPolicyIntrusionDetectionOutput) Configuration() FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetection) *FirewallPolicyIntrusionDetectionConfiguration {
		return v.Configuration
	}).(FirewallPolicyIntrusionDetectionConfigurationPtrOutput)
}

// Intrusion detection general state.
func (o FirewallPolicyIntrusionDetectionOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetection) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type FirewallPolicyIntrusionDetectionPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyIntrusionDetection)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionPtrOutput) ToFirewallPolicyIntrusionDetectionPtrOutput() FirewallPolicyIntrusionDetectionPtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionPtrOutput) ToFirewallPolicyIntrusionDetectionPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionPtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionPtrOutput) Elem() FirewallPolicyIntrusionDetectionOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetection) FirewallPolicyIntrusionDetection {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyIntrusionDetection
		return ret
	}).(FirewallPolicyIntrusionDetectionOutput)
}

// Intrusion detection configuration properties.
func (o FirewallPolicyIntrusionDetectionPtrOutput) Configuration() FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetection) *FirewallPolicyIntrusionDetectionConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(FirewallPolicyIntrusionDetectionConfigurationPtrOutput)
}

// Intrusion detection general state.
func (o FirewallPolicyIntrusionDetectionPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetection) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecifications struct {
	// Description of the bypass traffic rule.
	Description *string `pulumi:"description"`
	// List of destination IP addresses or ranges for this rule.
	DestinationAddresses []string `pulumi:"destinationAddresses"`
	// List of destination IpGroups for this rule.
	DestinationIpGroups []string `pulumi:"destinationIpGroups"`
	// List of destination ports or ranges.
	DestinationPorts []string `pulumi:"destinationPorts"`
	// Name of the bypass traffic rule.
	Name *string `pulumi:"name"`
	// The rule bypass protocol.
	Protocol *string `pulumi:"protocol"`
	// List of source IP addresses or ranges for this rule.
	SourceAddresses []string `pulumi:"sourceAddresses"`
	// List of source IpGroups for this rule.
	SourceIpGroups []string `pulumi:"sourceIpGroups"`
}

// FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsInput is an input type that accepts FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs and FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsInput` via:
//
//	FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs{...}
type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput
	ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput
}

// Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs struct {
	// Description of the bypass traffic rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// List of destination IP addresses or ranges for this rule.
	DestinationAddresses pulumi.StringArrayInput `pulumi:"destinationAddresses"`
	// List of destination IpGroups for this rule.
	DestinationIpGroups pulumi.StringArrayInput `pulumi:"destinationIpGroups"`
	// List of destination ports or ranges.
	DestinationPorts pulumi.StringArrayInput `pulumi:"destinationPorts"`
	// Name of the bypass traffic rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The rule bypass protocol.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// List of source IP addresses or ranges for this rule.
	SourceAddresses pulumi.StringArrayInput `pulumi:"sourceAddresses"`
	// List of source IpGroups for this rule.
	SourceIpGroups pulumi.StringArrayInput `pulumi:"sourceIpGroups"`
}

func (FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionBypassTrafficSpecifications)(nil)).Elem()
}

func (i FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput {
	return i.ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput)
}

// FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayInput is an input type that accepts FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArray and FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayInput` via:
//
//	FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArray{ FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArgs{...} }
type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput
	ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput
}

type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArray []FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsInput

func (FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyIntrusionDetectionBypassTrafficSpecifications)(nil)).Elem()
}

func (i FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArray) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput {
	return i.ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArray) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput)
}

// Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionBypassTrafficSpecifications)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput {
	return o
}

// Description of the bypass traffic rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// List of destination IP addresses or ranges for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) DestinationAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) []string {
		return v.DestinationAddresses
	}).(pulumi.StringArrayOutput)
}

// List of destination IpGroups for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) DestinationIpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) []string {
		return v.DestinationIpGroups
	}).(pulumi.StringArrayOutput)
}

// List of destination ports or ranges.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) DestinationPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) []string {
		return v.DestinationPorts
	}).(pulumi.StringArrayOutput)
}

// Name of the bypass traffic rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The rule bypass protocol.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// List of source IP addresses or ranges for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) SourceAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) []string { return v.SourceAddresses }).(pulumi.StringArrayOutput)
}

// List of source IpGroups for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput) SourceIpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) []string { return v.SourceIpGroups }).(pulumi.StringArrayOutput)
}

type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyIntrusionDetectionBypassTrafficSpecifications)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput) Index(i pulumi.IntInput) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyIntrusionDetectionBypassTrafficSpecifications {
		return vs[0].([]FirewallPolicyIntrusionDetectionBypassTrafficSpecifications)[vs[1].(int)]
	}).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput)
}

// Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse struct {
	// Description of the bypass traffic rule.
	Description *string `pulumi:"description"`
	// List of destination IP addresses or ranges for this rule.
	DestinationAddresses []string `pulumi:"destinationAddresses"`
	// List of destination IpGroups for this rule.
	DestinationIpGroups []string `pulumi:"destinationIpGroups"`
	// List of destination ports or ranges.
	DestinationPorts []string `pulumi:"destinationPorts"`
	// Name of the bypass traffic rule.
	Name *string `pulumi:"name"`
	// The rule bypass protocol.
	Protocol *string `pulumi:"protocol"`
	// List of source IP addresses or ranges for this rule.
	SourceAddresses []string `pulumi:"sourceAddresses"`
	// List of source IpGroups for this rule.
	SourceIpGroups []string `pulumi:"sourceIpGroups"`
}

// Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput {
	return o
}

// Description of the bypass traffic rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// List of destination IP addresses or ranges for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) DestinationAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) []string {
		return v.DestinationAddresses
	}).(pulumi.StringArrayOutput)
}

// List of destination IpGroups for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) DestinationIpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) []string {
		return v.DestinationIpGroups
	}).(pulumi.StringArrayOutput)
}

// List of destination ports or ranges.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) DestinationPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) []string {
		return v.DestinationPorts
	}).(pulumi.StringArrayOutput)
}

// Name of the bypass traffic rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The rule bypass protocol.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// List of source IP addresses or ranges for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) SourceAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) []string {
		return v.SourceAddresses
	}).(pulumi.StringArrayOutput)
}

// List of source IpGroups for this rule.
func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput) SourceIpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse) []string {
		return v.SourceIpGroups
	}).(pulumi.StringArrayOutput)
}

type FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput) ToFirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput) Index(i pulumi.IntInput) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse {
		return vs[0].([]FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse)[vs[1].(int)]
	}).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput)
}

// The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfiguration struct {
	// List of rules for traffic to bypass.
	BypassTrafficSettings []FirewallPolicyIntrusionDetectionBypassTrafficSpecifications `pulumi:"bypassTrafficSettings"`
	// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
	PrivateRanges []string `pulumi:"privateRanges"`
	// List of specific signatures states.
	SignatureOverrides []FirewallPolicyIntrusionDetectionSignatureSpecification `pulumi:"signatureOverrides"`
}

// FirewallPolicyIntrusionDetectionConfigurationInput is an input type that accepts FirewallPolicyIntrusionDetectionConfigurationArgs and FirewallPolicyIntrusionDetectionConfigurationOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionConfigurationInput` via:
//
//	FirewallPolicyIntrusionDetectionConfigurationArgs{...}
type FirewallPolicyIntrusionDetectionConfigurationInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionConfigurationOutput() FirewallPolicyIntrusionDetectionConfigurationOutput
	ToFirewallPolicyIntrusionDetectionConfigurationOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionConfigurationOutput
}

// The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfigurationArgs struct {
	// List of rules for traffic to bypass.
	BypassTrafficSettings FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayInput `pulumi:"bypassTrafficSettings"`
	// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
	PrivateRanges pulumi.StringArrayInput `pulumi:"privateRanges"`
	// List of specific signatures states.
	SignatureOverrides FirewallPolicyIntrusionDetectionSignatureSpecificationArrayInput `pulumi:"signatureOverrides"`
}

func (FirewallPolicyIntrusionDetectionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionConfiguration)(nil)).Elem()
}

func (i FirewallPolicyIntrusionDetectionConfigurationArgs) ToFirewallPolicyIntrusionDetectionConfigurationOutput() FirewallPolicyIntrusionDetectionConfigurationOutput {
	return i.ToFirewallPolicyIntrusionDetectionConfigurationOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionConfigurationArgs) ToFirewallPolicyIntrusionDetectionConfigurationOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionConfigurationOutput)
}

func (i FirewallPolicyIntrusionDetectionConfigurationArgs) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutput() FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return i.ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionConfigurationArgs) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionConfigurationOutput).ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(ctx)
}

// FirewallPolicyIntrusionDetectionConfigurationPtrInput is an input type that accepts FirewallPolicyIntrusionDetectionConfigurationArgs, FirewallPolicyIntrusionDetectionConfigurationPtr and FirewallPolicyIntrusionDetectionConfigurationPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionConfigurationPtrInput` via:
//
//	        FirewallPolicyIntrusionDetectionConfigurationArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicyIntrusionDetectionConfigurationPtrInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionConfigurationPtrOutput() FirewallPolicyIntrusionDetectionConfigurationPtrOutput
	ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionConfigurationPtrOutput
}

type firewallPolicyIntrusionDetectionConfigurationPtrType FirewallPolicyIntrusionDetectionConfigurationArgs

func FirewallPolicyIntrusionDetectionConfigurationPtr(v *FirewallPolicyIntrusionDetectionConfigurationArgs) FirewallPolicyIntrusionDetectionConfigurationPtrInput {
	return (*firewallPolicyIntrusionDetectionConfigurationPtrType)(v)
}

func (*firewallPolicyIntrusionDetectionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyIntrusionDetectionConfiguration)(nil)).Elem()
}

func (i *firewallPolicyIntrusionDetectionConfigurationPtrType) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutput() FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return i.ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyIntrusionDetectionConfigurationPtrType) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionConfigurationPtrOutput)
}

// The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfigurationOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionConfiguration)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionConfigurationOutput) ToFirewallPolicyIntrusionDetectionConfigurationOutput() FirewallPolicyIntrusionDetectionConfigurationOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionConfigurationOutput) ToFirewallPolicyIntrusionDetectionConfigurationOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionConfigurationOutput) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutput() FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return o.ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyIntrusionDetectionConfigurationOutput) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicyIntrusionDetectionConfiguration) *FirewallPolicyIntrusionDetectionConfiguration {
		return &v
	}).(FirewallPolicyIntrusionDetectionConfigurationPtrOutput)
}

// List of rules for traffic to bypass.
func (o FirewallPolicyIntrusionDetectionConfigurationOutput) BypassTrafficSettings() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionConfiguration) []FirewallPolicyIntrusionDetectionBypassTrafficSpecifications {
		return v.BypassTrafficSettings
	}).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput)
}

// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
func (o FirewallPolicyIntrusionDetectionConfigurationOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionConfiguration) []string { return v.PrivateRanges }).(pulumi.StringArrayOutput)
}

// List of specific signatures states.
func (o FirewallPolicyIntrusionDetectionConfigurationOutput) SignatureOverrides() FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionConfiguration) []FirewallPolicyIntrusionDetectionSignatureSpecification {
		return v.SignatureOverrides
	}).(FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput)
}

type FirewallPolicyIntrusionDetectionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyIntrusionDetectionConfiguration)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionConfigurationPtrOutput) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutput() FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionConfigurationPtrOutput) ToFirewallPolicyIntrusionDetectionConfigurationPtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationPtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionConfigurationPtrOutput) Elem() FirewallPolicyIntrusionDetectionConfigurationOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfiguration) FirewallPolicyIntrusionDetectionConfiguration {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyIntrusionDetectionConfiguration
		return ret
	}).(FirewallPolicyIntrusionDetectionConfigurationOutput)
}

// List of rules for traffic to bypass.
func (o FirewallPolicyIntrusionDetectionConfigurationPtrOutput) BypassTrafficSettings() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfiguration) []FirewallPolicyIntrusionDetectionBypassTrafficSpecifications {
		if v == nil {
			return nil
		}
		return v.BypassTrafficSettings
	}).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput)
}

// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
func (o FirewallPolicyIntrusionDetectionConfigurationPtrOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.PrivateRanges
	}).(pulumi.StringArrayOutput)
}

// List of specific signatures states.
func (o FirewallPolicyIntrusionDetectionConfigurationPtrOutput) SignatureOverrides() FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfiguration) []FirewallPolicyIntrusionDetectionSignatureSpecification {
		if v == nil {
			return nil
		}
		return v.SignatureOverrides
	}).(FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput)
}

// The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfigurationResponse struct {
	// List of rules for traffic to bypass.
	BypassTrafficSettings []FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse `pulumi:"bypassTrafficSettings"`
	// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
	PrivateRanges []string `pulumi:"privateRanges"`
	// List of specific signatures states.
	SignatureOverrides []FirewallPolicyIntrusionDetectionSignatureSpecificationResponse `pulumi:"signatureOverrides"`
}

// The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionConfigurationResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionConfigurationResponseOutput) ToFirewallPolicyIntrusionDetectionConfigurationResponseOutput() FirewallPolicyIntrusionDetectionConfigurationResponseOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionConfigurationResponseOutput) ToFirewallPolicyIntrusionDetectionConfigurationResponseOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationResponseOutput {
	return o
}

// List of rules for traffic to bypass.
func (o FirewallPolicyIntrusionDetectionConfigurationResponseOutput) BypassTrafficSettings() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionConfigurationResponse) []FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse {
		return v.BypassTrafficSettings
	}).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput)
}

// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
func (o FirewallPolicyIntrusionDetectionConfigurationResponseOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionConfigurationResponse) []string { return v.PrivateRanges }).(pulumi.StringArrayOutput)
}

// List of specific signatures states.
func (o FirewallPolicyIntrusionDetectionConfigurationResponseOutput) SignatureOverrides() FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionConfigurationResponse) []FirewallPolicyIntrusionDetectionSignatureSpecificationResponse {
		return v.SignatureOverrides
	}).(FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput)
}

type FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyIntrusionDetectionConfigurationResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput) ToFirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput() FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput) ToFirewallPolicyIntrusionDetectionConfigurationResponsePtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput) Elem() FirewallPolicyIntrusionDetectionConfigurationResponseOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfigurationResponse) FirewallPolicyIntrusionDetectionConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyIntrusionDetectionConfigurationResponse
		return ret
	}).(FirewallPolicyIntrusionDetectionConfigurationResponseOutput)
}

// List of rules for traffic to bypass.
func (o FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput) BypassTrafficSettings() FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfigurationResponse) []FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponse {
		if v == nil {
			return nil
		}
		return v.BypassTrafficSettings
	}).(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput)
}

// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property
func (o FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.PrivateRanges
	}).(pulumi.StringArrayOutput)
}

// List of specific signatures states.
func (o FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput) SignatureOverrides() FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionConfigurationResponse) []FirewallPolicyIntrusionDetectionSignatureSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.SignatureOverrides
	}).(FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput)
}

// Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetectionResponse struct {
	// Intrusion detection configuration properties.
	Configuration *FirewallPolicyIntrusionDetectionConfigurationResponse `pulumi:"configuration"`
	// Intrusion detection general state.
	Mode *string `pulumi:"mode"`
}

// Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetectionResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionResponseOutput) ToFirewallPolicyIntrusionDetectionResponseOutput() FirewallPolicyIntrusionDetectionResponseOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionResponseOutput) ToFirewallPolicyIntrusionDetectionResponseOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionResponseOutput {
	return o
}

// Intrusion detection configuration properties.
func (o FirewallPolicyIntrusionDetectionResponseOutput) Configuration() FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionResponse) *FirewallPolicyIntrusionDetectionConfigurationResponse {
		return v.Configuration
	}).(FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput)
}

// Intrusion detection general state.
func (o FirewallPolicyIntrusionDetectionResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type FirewallPolicyIntrusionDetectionResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyIntrusionDetectionResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionResponsePtrOutput) ToFirewallPolicyIntrusionDetectionResponsePtrOutput() FirewallPolicyIntrusionDetectionResponsePtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionResponsePtrOutput) ToFirewallPolicyIntrusionDetectionResponsePtrOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionResponsePtrOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionResponsePtrOutput) Elem() FirewallPolicyIntrusionDetectionResponseOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionResponse) FirewallPolicyIntrusionDetectionResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyIntrusionDetectionResponse
		return ret
	}).(FirewallPolicyIntrusionDetectionResponseOutput)
}

// Intrusion detection configuration properties.
func (o FirewallPolicyIntrusionDetectionResponsePtrOutput) Configuration() FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionResponse) *FirewallPolicyIntrusionDetectionConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput)
}

// Intrusion detection general state.
func (o FirewallPolicyIntrusionDetectionResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyIntrusionDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecification struct {
	// Signature id.
	Id *string `pulumi:"id"`
	// The signature state.
	Mode *string `pulumi:"mode"`
}

// FirewallPolicyIntrusionDetectionSignatureSpecificationInput is an input type that accepts FirewallPolicyIntrusionDetectionSignatureSpecificationArgs and FirewallPolicyIntrusionDetectionSignatureSpecificationOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionSignatureSpecificationInput` via:
//
//	FirewallPolicyIntrusionDetectionSignatureSpecificationArgs{...}
type FirewallPolicyIntrusionDetectionSignatureSpecificationInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionSignatureSpecificationOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationOutput
	ToFirewallPolicyIntrusionDetectionSignatureSpecificationOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationOutput
}

// Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecificationArgs struct {
	// Signature id.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The signature state.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (FirewallPolicyIntrusionDetectionSignatureSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionSignatureSpecification)(nil)).Elem()
}

func (i FirewallPolicyIntrusionDetectionSignatureSpecificationArgs) ToFirewallPolicyIntrusionDetectionSignatureSpecificationOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationOutput {
	return i.ToFirewallPolicyIntrusionDetectionSignatureSpecificationOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionSignatureSpecificationArgs) ToFirewallPolicyIntrusionDetectionSignatureSpecificationOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionSignatureSpecificationOutput)
}

// FirewallPolicyIntrusionDetectionSignatureSpecificationArrayInput is an input type that accepts FirewallPolicyIntrusionDetectionSignatureSpecificationArray and FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyIntrusionDetectionSignatureSpecificationArrayInput` via:
//
//	FirewallPolicyIntrusionDetectionSignatureSpecificationArray{ FirewallPolicyIntrusionDetectionSignatureSpecificationArgs{...} }
type FirewallPolicyIntrusionDetectionSignatureSpecificationArrayInput interface {
	pulumi.Input

	ToFirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput
	ToFirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutputWithContext(context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput
}

type FirewallPolicyIntrusionDetectionSignatureSpecificationArray []FirewallPolicyIntrusionDetectionSignatureSpecificationInput

func (FirewallPolicyIntrusionDetectionSignatureSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyIntrusionDetectionSignatureSpecification)(nil)).Elem()
}

func (i FirewallPolicyIntrusionDetectionSignatureSpecificationArray) ToFirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput {
	return i.ToFirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyIntrusionDetectionSignatureSpecificationArray) ToFirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput)
}

// Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecificationOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionSignatureSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionSignatureSpecification)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationOutput {
	return o
}

// Signature id.
func (o FirewallPolicyIntrusionDetectionSignatureSpecificationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionSignatureSpecification) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The signature state.
func (o FirewallPolicyIntrusionDetectionSignatureSpecificationOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionSignatureSpecification) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyIntrusionDetectionSignatureSpecification)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput) Index(i pulumi.IntInput) FirewallPolicyIntrusionDetectionSignatureSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyIntrusionDetectionSignatureSpecification {
		return vs[0].([]FirewallPolicyIntrusionDetectionSignatureSpecification)[vs[1].(int)]
	}).(FirewallPolicyIntrusionDetectionSignatureSpecificationOutput)
}

// Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecificationResponse struct {
	// Signature id.
	Id *string `pulumi:"id"`
	// The signature state.
	Mode *string `pulumi:"mode"`
}

// Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyIntrusionDetectionSignatureSpecificationResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput {
	return o
}

// Signature id.
func (o FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionSignatureSpecificationResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The signature state.
func (o FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyIntrusionDetectionSignatureSpecificationResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyIntrusionDetectionSignatureSpecificationResponse)(nil)).Elem()
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput() FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput) ToFirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput {
	return o
}

func (o FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput) Index(i pulumi.IntInput) FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyIntrusionDetectionSignatureSpecificationResponse {
		return vs[0].([]FirewallPolicyIntrusionDetectionSignatureSpecificationResponse)[vs[1].(int)]
	}).(FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput)
}

// Log Analytics Resources for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsResources struct {
	// The default workspace Id for Firewall Policy Insights.
	DefaultWorkspaceId *SubResource `pulumi:"defaultWorkspaceId"`
	// List of workspaces for Firewall Policy Insights.
	Workspaces []FirewallPolicyLogAnalyticsWorkspace `pulumi:"workspaces"`
}

// FirewallPolicyLogAnalyticsResourcesInput is an input type that accepts FirewallPolicyLogAnalyticsResourcesArgs and FirewallPolicyLogAnalyticsResourcesOutput values.
// You can construct a concrete instance of `FirewallPolicyLogAnalyticsResourcesInput` via:
//
//	FirewallPolicyLogAnalyticsResourcesArgs{...}
type FirewallPolicyLogAnalyticsResourcesInput interface {
	pulumi.Input

	ToFirewallPolicyLogAnalyticsResourcesOutput() FirewallPolicyLogAnalyticsResourcesOutput
	ToFirewallPolicyLogAnalyticsResourcesOutputWithContext(context.Context) FirewallPolicyLogAnalyticsResourcesOutput
}

// Log Analytics Resources for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsResourcesArgs struct {
	// The default workspace Id for Firewall Policy Insights.
	DefaultWorkspaceId SubResourcePtrInput `pulumi:"defaultWorkspaceId"`
	// List of workspaces for Firewall Policy Insights.
	Workspaces FirewallPolicyLogAnalyticsWorkspaceArrayInput `pulumi:"workspaces"`
}

func (FirewallPolicyLogAnalyticsResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyLogAnalyticsResources)(nil)).Elem()
}

func (i FirewallPolicyLogAnalyticsResourcesArgs) ToFirewallPolicyLogAnalyticsResourcesOutput() FirewallPolicyLogAnalyticsResourcesOutput {
	return i.ToFirewallPolicyLogAnalyticsResourcesOutputWithContext(context.Background())
}

func (i FirewallPolicyLogAnalyticsResourcesArgs) ToFirewallPolicyLogAnalyticsResourcesOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyLogAnalyticsResourcesOutput)
}

func (i FirewallPolicyLogAnalyticsResourcesArgs) ToFirewallPolicyLogAnalyticsResourcesPtrOutput() FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return i.ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyLogAnalyticsResourcesArgs) ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyLogAnalyticsResourcesOutput).ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(ctx)
}

// FirewallPolicyLogAnalyticsResourcesPtrInput is an input type that accepts FirewallPolicyLogAnalyticsResourcesArgs, FirewallPolicyLogAnalyticsResourcesPtr and FirewallPolicyLogAnalyticsResourcesPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyLogAnalyticsResourcesPtrInput` via:
//
//	        FirewallPolicyLogAnalyticsResourcesArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicyLogAnalyticsResourcesPtrInput interface {
	pulumi.Input

	ToFirewallPolicyLogAnalyticsResourcesPtrOutput() FirewallPolicyLogAnalyticsResourcesPtrOutput
	ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(context.Context) FirewallPolicyLogAnalyticsResourcesPtrOutput
}

type firewallPolicyLogAnalyticsResourcesPtrType FirewallPolicyLogAnalyticsResourcesArgs

func FirewallPolicyLogAnalyticsResourcesPtr(v *FirewallPolicyLogAnalyticsResourcesArgs) FirewallPolicyLogAnalyticsResourcesPtrInput {
	return (*firewallPolicyLogAnalyticsResourcesPtrType)(v)
}

func (*firewallPolicyLogAnalyticsResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyLogAnalyticsResources)(nil)).Elem()
}

func (i *firewallPolicyLogAnalyticsResourcesPtrType) ToFirewallPolicyLogAnalyticsResourcesPtrOutput() FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return i.ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyLogAnalyticsResourcesPtrType) ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyLogAnalyticsResourcesPtrOutput)
}

// Log Analytics Resources for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsResourcesOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyLogAnalyticsResources)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsResourcesOutput) ToFirewallPolicyLogAnalyticsResourcesOutput() FirewallPolicyLogAnalyticsResourcesOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsResourcesOutput) ToFirewallPolicyLogAnalyticsResourcesOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsResourcesOutput) ToFirewallPolicyLogAnalyticsResourcesPtrOutput() FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return o.ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyLogAnalyticsResourcesOutput) ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicyLogAnalyticsResources) *FirewallPolicyLogAnalyticsResources {
		return &v
	}).(FirewallPolicyLogAnalyticsResourcesPtrOutput)
}

// The default workspace Id for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesOutput) DefaultWorkspaceId() SubResourcePtrOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsResources) *SubResource { return v.DefaultWorkspaceId }).(SubResourcePtrOutput)
}

// List of workspaces for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesOutput) Workspaces() FirewallPolicyLogAnalyticsWorkspaceArrayOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsResources) []FirewallPolicyLogAnalyticsWorkspace { return v.Workspaces }).(FirewallPolicyLogAnalyticsWorkspaceArrayOutput)
}

type FirewallPolicyLogAnalyticsResourcesPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyLogAnalyticsResources)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsResourcesPtrOutput) ToFirewallPolicyLogAnalyticsResourcesPtrOutput() FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsResourcesPtrOutput) ToFirewallPolicyLogAnalyticsResourcesPtrOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesPtrOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsResourcesPtrOutput) Elem() FirewallPolicyLogAnalyticsResourcesOutput {
	return o.ApplyT(func(v *FirewallPolicyLogAnalyticsResources) FirewallPolicyLogAnalyticsResources {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyLogAnalyticsResources
		return ret
	}).(FirewallPolicyLogAnalyticsResourcesOutput)
}

// The default workspace Id for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesPtrOutput) DefaultWorkspaceId() SubResourcePtrOutput {
	return o.ApplyT(func(v *FirewallPolicyLogAnalyticsResources) *SubResource {
		if v == nil {
			return nil
		}
		return v.DefaultWorkspaceId
	}).(SubResourcePtrOutput)
}

// List of workspaces for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesPtrOutput) Workspaces() FirewallPolicyLogAnalyticsWorkspaceArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyLogAnalyticsResources) []FirewallPolicyLogAnalyticsWorkspace {
		if v == nil {
			return nil
		}
		return v.Workspaces
	}).(FirewallPolicyLogAnalyticsWorkspaceArrayOutput)
}

// Log Analytics Resources for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsResourcesResponse struct {
	// The default workspace Id for Firewall Policy Insights.
	DefaultWorkspaceId *SubResourceResponse `pulumi:"defaultWorkspaceId"`
	// List of workspaces for Firewall Policy Insights.
	Workspaces []FirewallPolicyLogAnalyticsWorkspaceResponse `pulumi:"workspaces"`
}

// Log Analytics Resources for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsResourcesResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsResourcesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyLogAnalyticsResourcesResponse)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsResourcesResponseOutput) ToFirewallPolicyLogAnalyticsResourcesResponseOutput() FirewallPolicyLogAnalyticsResourcesResponseOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsResourcesResponseOutput) ToFirewallPolicyLogAnalyticsResourcesResponseOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesResponseOutput {
	return o
}

// The default workspace Id for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesResponseOutput) DefaultWorkspaceId() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsResourcesResponse) *SubResourceResponse { return v.DefaultWorkspaceId }).(SubResourceResponsePtrOutput)
}

// List of workspaces for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesResponseOutput) Workspaces() FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsResourcesResponse) []FirewallPolicyLogAnalyticsWorkspaceResponse {
		return v.Workspaces
	}).(FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput)
}

type FirewallPolicyLogAnalyticsResourcesResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsResourcesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyLogAnalyticsResourcesResponse)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsResourcesResponsePtrOutput) ToFirewallPolicyLogAnalyticsResourcesResponsePtrOutput() FirewallPolicyLogAnalyticsResourcesResponsePtrOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsResourcesResponsePtrOutput) ToFirewallPolicyLogAnalyticsResourcesResponsePtrOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsResourcesResponsePtrOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsResourcesResponsePtrOutput) Elem() FirewallPolicyLogAnalyticsResourcesResponseOutput {
	return o.ApplyT(func(v *FirewallPolicyLogAnalyticsResourcesResponse) FirewallPolicyLogAnalyticsResourcesResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyLogAnalyticsResourcesResponse
		return ret
	}).(FirewallPolicyLogAnalyticsResourcesResponseOutput)
}

// The default workspace Id for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesResponsePtrOutput) DefaultWorkspaceId() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *FirewallPolicyLogAnalyticsResourcesResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.DefaultWorkspaceId
	}).(SubResourceResponsePtrOutput)
}

// List of workspaces for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsResourcesResponsePtrOutput) Workspaces() FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyLogAnalyticsResourcesResponse) []FirewallPolicyLogAnalyticsWorkspaceResponse {
		if v == nil {
			return nil
		}
		return v.Workspaces
	}).(FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput)
}

// Log Analytics Workspace for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsWorkspace struct {
	// Region to configure the Workspace.
	Region *string `pulumi:"region"`
	// The workspace Id for Firewall Policy Insights.
	WorkspaceId *SubResource `pulumi:"workspaceId"`
}

// FirewallPolicyLogAnalyticsWorkspaceInput is an input type that accepts FirewallPolicyLogAnalyticsWorkspaceArgs and FirewallPolicyLogAnalyticsWorkspaceOutput values.
// You can construct a concrete instance of `FirewallPolicyLogAnalyticsWorkspaceInput` via:
//
//	FirewallPolicyLogAnalyticsWorkspaceArgs{...}
type FirewallPolicyLogAnalyticsWorkspaceInput interface {
	pulumi.Input

	ToFirewallPolicyLogAnalyticsWorkspaceOutput() FirewallPolicyLogAnalyticsWorkspaceOutput
	ToFirewallPolicyLogAnalyticsWorkspaceOutputWithContext(context.Context) FirewallPolicyLogAnalyticsWorkspaceOutput
}

// Log Analytics Workspace for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsWorkspaceArgs struct {
	// Region to configure the Workspace.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The workspace Id for Firewall Policy Insights.
	WorkspaceId SubResourcePtrInput `pulumi:"workspaceId"`
}

func (FirewallPolicyLogAnalyticsWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyLogAnalyticsWorkspace)(nil)).Elem()
}

func (i FirewallPolicyLogAnalyticsWorkspaceArgs) ToFirewallPolicyLogAnalyticsWorkspaceOutput() FirewallPolicyLogAnalyticsWorkspaceOutput {
	return i.ToFirewallPolicyLogAnalyticsWorkspaceOutputWithContext(context.Background())
}

func (i FirewallPolicyLogAnalyticsWorkspaceArgs) ToFirewallPolicyLogAnalyticsWorkspaceOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyLogAnalyticsWorkspaceOutput)
}

// FirewallPolicyLogAnalyticsWorkspaceArrayInput is an input type that accepts FirewallPolicyLogAnalyticsWorkspaceArray and FirewallPolicyLogAnalyticsWorkspaceArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyLogAnalyticsWorkspaceArrayInput` via:
//
//	FirewallPolicyLogAnalyticsWorkspaceArray{ FirewallPolicyLogAnalyticsWorkspaceArgs{...} }
type FirewallPolicyLogAnalyticsWorkspaceArrayInput interface {
	pulumi.Input

	ToFirewallPolicyLogAnalyticsWorkspaceArrayOutput() FirewallPolicyLogAnalyticsWorkspaceArrayOutput
	ToFirewallPolicyLogAnalyticsWorkspaceArrayOutputWithContext(context.Context) FirewallPolicyLogAnalyticsWorkspaceArrayOutput
}

type FirewallPolicyLogAnalyticsWorkspaceArray []FirewallPolicyLogAnalyticsWorkspaceInput

func (FirewallPolicyLogAnalyticsWorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyLogAnalyticsWorkspace)(nil)).Elem()
}

func (i FirewallPolicyLogAnalyticsWorkspaceArray) ToFirewallPolicyLogAnalyticsWorkspaceArrayOutput() FirewallPolicyLogAnalyticsWorkspaceArrayOutput {
	return i.ToFirewallPolicyLogAnalyticsWorkspaceArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyLogAnalyticsWorkspaceArray) ToFirewallPolicyLogAnalyticsWorkspaceArrayOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsWorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyLogAnalyticsWorkspaceArrayOutput)
}

// Log Analytics Workspace for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsWorkspaceOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyLogAnalyticsWorkspace)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsWorkspaceOutput) ToFirewallPolicyLogAnalyticsWorkspaceOutput() FirewallPolicyLogAnalyticsWorkspaceOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsWorkspaceOutput) ToFirewallPolicyLogAnalyticsWorkspaceOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsWorkspaceOutput {
	return o
}

// Region to configure the Workspace.
func (o FirewallPolicyLogAnalyticsWorkspaceOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsWorkspace) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The workspace Id for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsWorkspaceOutput) WorkspaceId() SubResourcePtrOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsWorkspace) *SubResource { return v.WorkspaceId }).(SubResourcePtrOutput)
}

type FirewallPolicyLogAnalyticsWorkspaceArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsWorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyLogAnalyticsWorkspace)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsWorkspaceArrayOutput) ToFirewallPolicyLogAnalyticsWorkspaceArrayOutput() FirewallPolicyLogAnalyticsWorkspaceArrayOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsWorkspaceArrayOutput) ToFirewallPolicyLogAnalyticsWorkspaceArrayOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsWorkspaceArrayOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsWorkspaceArrayOutput) Index(i pulumi.IntInput) FirewallPolicyLogAnalyticsWorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyLogAnalyticsWorkspace {
		return vs[0].([]FirewallPolicyLogAnalyticsWorkspace)[vs[1].(int)]
	}).(FirewallPolicyLogAnalyticsWorkspaceOutput)
}

// Log Analytics Workspace for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsWorkspaceResponse struct {
	// Region to configure the Workspace.
	Region *string `pulumi:"region"`
	// The workspace Id for Firewall Policy Insights.
	WorkspaceId *SubResourceResponse `pulumi:"workspaceId"`
}

// Log Analytics Workspace for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsWorkspaceResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsWorkspaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyLogAnalyticsWorkspaceResponse)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsWorkspaceResponseOutput) ToFirewallPolicyLogAnalyticsWorkspaceResponseOutput() FirewallPolicyLogAnalyticsWorkspaceResponseOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsWorkspaceResponseOutput) ToFirewallPolicyLogAnalyticsWorkspaceResponseOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsWorkspaceResponseOutput {
	return o
}

// Region to configure the Workspace.
func (o FirewallPolicyLogAnalyticsWorkspaceResponseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsWorkspaceResponse) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The workspace Id for Firewall Policy Insights.
func (o FirewallPolicyLogAnalyticsWorkspaceResponseOutput) WorkspaceId() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v FirewallPolicyLogAnalyticsWorkspaceResponse) *SubResourceResponse { return v.WorkspaceId }).(SubResourceResponsePtrOutput)
}

type FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyLogAnalyticsWorkspaceResponse)(nil)).Elem()
}

func (o FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput) ToFirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput() FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput) ToFirewallPolicyLogAnalyticsWorkspaceResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput {
	return o
}

func (o FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput) Index(i pulumi.IntInput) FirewallPolicyLogAnalyticsWorkspaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyLogAnalyticsWorkspaceResponse {
		return vs[0].([]FirewallPolicyLogAnalyticsWorkspaceResponse)[vs[1].(int)]
	}).(FirewallPolicyLogAnalyticsWorkspaceResponseOutput)
}

// The private IP addresses/IP ranges to which traffic will not be SNAT.
type FirewallPolicySNAT struct {
	// List of private IP addresses/IP address ranges to not be SNAT.
	PrivateRanges []string `pulumi:"privateRanges"`
}

// FirewallPolicySNATInput is an input type that accepts FirewallPolicySNATArgs and FirewallPolicySNATOutput values.
// You can construct a concrete instance of `FirewallPolicySNATInput` via:
//
//	FirewallPolicySNATArgs{...}
type FirewallPolicySNATInput interface {
	pulumi.Input

	ToFirewallPolicySNATOutput() FirewallPolicySNATOutput
	ToFirewallPolicySNATOutputWithContext(context.Context) FirewallPolicySNATOutput
}

// The private IP addresses/IP ranges to which traffic will not be SNAT.
type FirewallPolicySNATArgs struct {
	// List of private IP addresses/IP address ranges to not be SNAT.
	PrivateRanges pulumi.StringArrayInput `pulumi:"privateRanges"`
}

func (FirewallPolicySNATArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySNAT)(nil)).Elem()
}

func (i FirewallPolicySNATArgs) ToFirewallPolicySNATOutput() FirewallPolicySNATOutput {
	return i.ToFirewallPolicySNATOutputWithContext(context.Background())
}

func (i FirewallPolicySNATArgs) ToFirewallPolicySNATOutputWithContext(ctx context.Context) FirewallPolicySNATOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySNATOutput)
}

func (i FirewallPolicySNATArgs) ToFirewallPolicySNATPtrOutput() FirewallPolicySNATPtrOutput {
	return i.ToFirewallPolicySNATPtrOutputWithContext(context.Background())
}

func (i FirewallPolicySNATArgs) ToFirewallPolicySNATPtrOutputWithContext(ctx context.Context) FirewallPolicySNATPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySNATOutput).ToFirewallPolicySNATPtrOutputWithContext(ctx)
}

// FirewallPolicySNATPtrInput is an input type that accepts FirewallPolicySNATArgs, FirewallPolicySNATPtr and FirewallPolicySNATPtrOutput values.
// You can construct a concrete instance of `FirewallPolicySNATPtrInput` via:
//
//	        FirewallPolicySNATArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicySNATPtrInput interface {
	pulumi.Input

	ToFirewallPolicySNATPtrOutput() FirewallPolicySNATPtrOutput
	ToFirewallPolicySNATPtrOutputWithContext(context.Context) FirewallPolicySNATPtrOutput
}

type firewallPolicySNATPtrType FirewallPolicySNATArgs

func FirewallPolicySNATPtr(v *FirewallPolicySNATArgs) FirewallPolicySNATPtrInput {
	return (*firewallPolicySNATPtrType)(v)
}

func (*firewallPolicySNATPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySNAT)(nil)).Elem()
}

func (i *firewallPolicySNATPtrType) ToFirewallPolicySNATPtrOutput() FirewallPolicySNATPtrOutput {
	return i.ToFirewallPolicySNATPtrOutputWithContext(context.Background())
}

func (i *firewallPolicySNATPtrType) ToFirewallPolicySNATPtrOutputWithContext(ctx context.Context) FirewallPolicySNATPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySNATPtrOutput)
}

// The private IP addresses/IP ranges to which traffic will not be SNAT.
type FirewallPolicySNATOutput struct{ *pulumi.OutputState }

func (FirewallPolicySNATOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySNAT)(nil)).Elem()
}

func (o FirewallPolicySNATOutput) ToFirewallPolicySNATOutput() FirewallPolicySNATOutput {
	return o
}

func (o FirewallPolicySNATOutput) ToFirewallPolicySNATOutputWithContext(ctx context.Context) FirewallPolicySNATOutput {
	return o
}

func (o FirewallPolicySNATOutput) ToFirewallPolicySNATPtrOutput() FirewallPolicySNATPtrOutput {
	return o.ToFirewallPolicySNATPtrOutputWithContext(context.Background())
}

func (o FirewallPolicySNATOutput) ToFirewallPolicySNATPtrOutputWithContext(ctx context.Context) FirewallPolicySNATPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicySNAT) *FirewallPolicySNAT {
		return &v
	}).(FirewallPolicySNATPtrOutput)
}

// List of private IP addresses/IP address ranges to not be SNAT.
func (o FirewallPolicySNATOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicySNAT) []string { return v.PrivateRanges }).(pulumi.StringArrayOutput)
}

type FirewallPolicySNATPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicySNATPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySNAT)(nil)).Elem()
}

func (o FirewallPolicySNATPtrOutput) ToFirewallPolicySNATPtrOutput() FirewallPolicySNATPtrOutput {
	return o
}

func (o FirewallPolicySNATPtrOutput) ToFirewallPolicySNATPtrOutputWithContext(ctx context.Context) FirewallPolicySNATPtrOutput {
	return o
}

func (o FirewallPolicySNATPtrOutput) Elem() FirewallPolicySNATOutput {
	return o.ApplyT(func(v *FirewallPolicySNAT) FirewallPolicySNAT {
		if v != nil {
			return *v
		}
		var ret FirewallPolicySNAT
		return ret
	}).(FirewallPolicySNATOutput)
}

// List of private IP addresses/IP address ranges to not be SNAT.
func (o FirewallPolicySNATPtrOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicySNAT) []string {
		if v == nil {
			return nil
		}
		return v.PrivateRanges
	}).(pulumi.StringArrayOutput)
}

// The private IP addresses/IP ranges to which traffic will not be SNAT.
type FirewallPolicySNATResponse struct {
	// List of private IP addresses/IP address ranges to not be SNAT.
	PrivateRanges []string `pulumi:"privateRanges"`
}

// The private IP addresses/IP ranges to which traffic will not be SNAT.
type FirewallPolicySNATResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicySNATResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySNATResponse)(nil)).Elem()
}

func (o FirewallPolicySNATResponseOutput) ToFirewallPolicySNATResponseOutput() FirewallPolicySNATResponseOutput {
	return o
}

func (o FirewallPolicySNATResponseOutput) ToFirewallPolicySNATResponseOutputWithContext(ctx context.Context) FirewallPolicySNATResponseOutput {
	return o
}

// List of private IP addresses/IP address ranges to not be SNAT.
func (o FirewallPolicySNATResponseOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicySNATResponse) []string { return v.PrivateRanges }).(pulumi.StringArrayOutput)
}

type FirewallPolicySNATResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicySNATResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySNATResponse)(nil)).Elem()
}

func (o FirewallPolicySNATResponsePtrOutput) ToFirewallPolicySNATResponsePtrOutput() FirewallPolicySNATResponsePtrOutput {
	return o
}

func (o FirewallPolicySNATResponsePtrOutput) ToFirewallPolicySNATResponsePtrOutputWithContext(ctx context.Context) FirewallPolicySNATResponsePtrOutput {
	return o
}

func (o FirewallPolicySNATResponsePtrOutput) Elem() FirewallPolicySNATResponseOutput {
	return o.ApplyT(func(v *FirewallPolicySNATResponse) FirewallPolicySNATResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicySNATResponse
		return ret
	}).(FirewallPolicySNATResponseOutput)
}

// List of private IP addresses/IP address ranges to not be SNAT.
func (o FirewallPolicySNATResponsePtrOutput) PrivateRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicySNATResponse) []string {
		if v == nil {
			return nil
		}
		return v.PrivateRanges
	}).(pulumi.StringArrayOutput)
}

// SQL Settings in Firewall Policy.
type FirewallPolicySQL struct {
	// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
	AllowSqlRedirect *bool `pulumi:"allowSqlRedirect"`
}

// FirewallPolicySQLInput is an input type that accepts FirewallPolicySQLArgs and FirewallPolicySQLOutput values.
// You can construct a concrete instance of `FirewallPolicySQLInput` via:
//
//	FirewallPolicySQLArgs{...}
type FirewallPolicySQLInput interface {
	pulumi.Input

	ToFirewallPolicySQLOutput() FirewallPolicySQLOutput
	ToFirewallPolicySQLOutputWithContext(context.Context) FirewallPolicySQLOutput
}

// SQL Settings in Firewall Policy.
type FirewallPolicySQLArgs struct {
	// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
	AllowSqlRedirect pulumi.BoolPtrInput `pulumi:"allowSqlRedirect"`
}

func (FirewallPolicySQLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySQL)(nil)).Elem()
}

func (i FirewallPolicySQLArgs) ToFirewallPolicySQLOutput() FirewallPolicySQLOutput {
	return i.ToFirewallPolicySQLOutputWithContext(context.Background())
}

func (i FirewallPolicySQLArgs) ToFirewallPolicySQLOutputWithContext(ctx context.Context) FirewallPolicySQLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySQLOutput)
}

func (i FirewallPolicySQLArgs) ToFirewallPolicySQLPtrOutput() FirewallPolicySQLPtrOutput {
	return i.ToFirewallPolicySQLPtrOutputWithContext(context.Background())
}

func (i FirewallPolicySQLArgs) ToFirewallPolicySQLPtrOutputWithContext(ctx context.Context) FirewallPolicySQLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySQLOutput).ToFirewallPolicySQLPtrOutputWithContext(ctx)
}

// FirewallPolicySQLPtrInput is an input type that accepts FirewallPolicySQLArgs, FirewallPolicySQLPtr and FirewallPolicySQLPtrOutput values.
// You can construct a concrete instance of `FirewallPolicySQLPtrInput` via:
//
//	        FirewallPolicySQLArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicySQLPtrInput interface {
	pulumi.Input

	ToFirewallPolicySQLPtrOutput() FirewallPolicySQLPtrOutput
	ToFirewallPolicySQLPtrOutputWithContext(context.Context) FirewallPolicySQLPtrOutput
}

type firewallPolicySQLPtrType FirewallPolicySQLArgs

func FirewallPolicySQLPtr(v *FirewallPolicySQLArgs) FirewallPolicySQLPtrInput {
	return (*firewallPolicySQLPtrType)(v)
}

func (*firewallPolicySQLPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySQL)(nil)).Elem()
}

func (i *firewallPolicySQLPtrType) ToFirewallPolicySQLPtrOutput() FirewallPolicySQLPtrOutput {
	return i.ToFirewallPolicySQLPtrOutputWithContext(context.Background())
}

func (i *firewallPolicySQLPtrType) ToFirewallPolicySQLPtrOutputWithContext(ctx context.Context) FirewallPolicySQLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySQLPtrOutput)
}

// SQL Settings in Firewall Policy.
type FirewallPolicySQLOutput struct{ *pulumi.OutputState }

func (FirewallPolicySQLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySQL)(nil)).Elem()
}

func (o FirewallPolicySQLOutput) ToFirewallPolicySQLOutput() FirewallPolicySQLOutput {
	return o
}

func (o FirewallPolicySQLOutput) ToFirewallPolicySQLOutputWithContext(ctx context.Context) FirewallPolicySQLOutput {
	return o
}

func (o FirewallPolicySQLOutput) ToFirewallPolicySQLPtrOutput() FirewallPolicySQLPtrOutput {
	return o.ToFirewallPolicySQLPtrOutputWithContext(context.Background())
}

func (o FirewallPolicySQLOutput) ToFirewallPolicySQLPtrOutputWithContext(ctx context.Context) FirewallPolicySQLPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicySQL) *FirewallPolicySQL {
		return &v
	}).(FirewallPolicySQLPtrOutput)
}

// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
func (o FirewallPolicySQLOutput) AllowSqlRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicySQL) *bool { return v.AllowSqlRedirect }).(pulumi.BoolPtrOutput)
}

type FirewallPolicySQLPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicySQLPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySQL)(nil)).Elem()
}

func (o FirewallPolicySQLPtrOutput) ToFirewallPolicySQLPtrOutput() FirewallPolicySQLPtrOutput {
	return o
}

func (o FirewallPolicySQLPtrOutput) ToFirewallPolicySQLPtrOutputWithContext(ctx context.Context) FirewallPolicySQLPtrOutput {
	return o
}

func (o FirewallPolicySQLPtrOutput) Elem() FirewallPolicySQLOutput {
	return o.ApplyT(func(v *FirewallPolicySQL) FirewallPolicySQL {
		if v != nil {
			return *v
		}
		var ret FirewallPolicySQL
		return ret
	}).(FirewallPolicySQLOutput)
}

// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
func (o FirewallPolicySQLPtrOutput) AllowSqlRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallPolicySQL) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSqlRedirect
	}).(pulumi.BoolPtrOutput)
}

// SQL Settings in Firewall Policy.
type FirewallPolicySQLResponse struct {
	// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
	AllowSqlRedirect *bool `pulumi:"allowSqlRedirect"`
}

// SQL Settings in Firewall Policy.
type FirewallPolicySQLResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicySQLResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySQLResponse)(nil)).Elem()
}

func (o FirewallPolicySQLResponseOutput) ToFirewallPolicySQLResponseOutput() FirewallPolicySQLResponseOutput {
	return o
}

func (o FirewallPolicySQLResponseOutput) ToFirewallPolicySQLResponseOutputWithContext(ctx context.Context) FirewallPolicySQLResponseOutput {
	return o
}

// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
func (o FirewallPolicySQLResponseOutput) AllowSqlRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicySQLResponse) *bool { return v.AllowSqlRedirect }).(pulumi.BoolPtrOutput)
}

type FirewallPolicySQLResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicySQLResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySQLResponse)(nil)).Elem()
}

func (o FirewallPolicySQLResponsePtrOutput) ToFirewallPolicySQLResponsePtrOutput() FirewallPolicySQLResponsePtrOutput {
	return o
}

func (o FirewallPolicySQLResponsePtrOutput) ToFirewallPolicySQLResponsePtrOutputWithContext(ctx context.Context) FirewallPolicySQLResponsePtrOutput {
	return o
}

func (o FirewallPolicySQLResponsePtrOutput) Elem() FirewallPolicySQLResponseOutput {
	return o.ApplyT(func(v *FirewallPolicySQLResponse) FirewallPolicySQLResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicySQLResponse
		return ret
	}).(FirewallPolicySQLResponseOutput)
}

// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
func (o FirewallPolicySQLResponsePtrOutput) AllowSqlRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallPolicySQLResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSqlRedirect
	}).(pulumi.BoolPtrOutput)
}

// SKU of Firewall policy.
type FirewallPolicySku struct {
	// Tier of Firewall Policy.
	Tier *string `pulumi:"tier"`
}

// FirewallPolicySkuInput is an input type that accepts FirewallPolicySkuArgs and FirewallPolicySkuOutput values.
// You can construct a concrete instance of `FirewallPolicySkuInput` via:
//
//	FirewallPolicySkuArgs{...}
type FirewallPolicySkuInput interface {
	pulumi.Input

	ToFirewallPolicySkuOutput() FirewallPolicySkuOutput
	ToFirewallPolicySkuOutputWithContext(context.Context) FirewallPolicySkuOutput
}

// SKU of Firewall policy.
type FirewallPolicySkuArgs struct {
	// Tier of Firewall Policy.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (FirewallPolicySkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySku)(nil)).Elem()
}

func (i FirewallPolicySkuArgs) ToFirewallPolicySkuOutput() FirewallPolicySkuOutput {
	return i.ToFirewallPolicySkuOutputWithContext(context.Background())
}

func (i FirewallPolicySkuArgs) ToFirewallPolicySkuOutputWithContext(ctx context.Context) FirewallPolicySkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySkuOutput)
}

func (i FirewallPolicySkuArgs) ToFirewallPolicySkuPtrOutput() FirewallPolicySkuPtrOutput {
	return i.ToFirewallPolicySkuPtrOutputWithContext(context.Background())
}

func (i FirewallPolicySkuArgs) ToFirewallPolicySkuPtrOutputWithContext(ctx context.Context) FirewallPolicySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySkuOutput).ToFirewallPolicySkuPtrOutputWithContext(ctx)
}

// FirewallPolicySkuPtrInput is an input type that accepts FirewallPolicySkuArgs, FirewallPolicySkuPtr and FirewallPolicySkuPtrOutput values.
// You can construct a concrete instance of `FirewallPolicySkuPtrInput` via:
//
//	        FirewallPolicySkuArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicySkuPtrInput interface {
	pulumi.Input

	ToFirewallPolicySkuPtrOutput() FirewallPolicySkuPtrOutput
	ToFirewallPolicySkuPtrOutputWithContext(context.Context) FirewallPolicySkuPtrOutput
}

type firewallPolicySkuPtrType FirewallPolicySkuArgs

func FirewallPolicySkuPtr(v *FirewallPolicySkuArgs) FirewallPolicySkuPtrInput {
	return (*firewallPolicySkuPtrType)(v)
}

func (*firewallPolicySkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySku)(nil)).Elem()
}

func (i *firewallPolicySkuPtrType) ToFirewallPolicySkuPtrOutput() FirewallPolicySkuPtrOutput {
	return i.ToFirewallPolicySkuPtrOutputWithContext(context.Background())
}

func (i *firewallPolicySkuPtrType) ToFirewallPolicySkuPtrOutputWithContext(ctx context.Context) FirewallPolicySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicySkuPtrOutput)
}

// SKU of Firewall policy.
type FirewallPolicySkuOutput struct{ *pulumi.OutputState }

func (FirewallPolicySkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySku)(nil)).Elem()
}

func (o FirewallPolicySkuOutput) ToFirewallPolicySkuOutput() FirewallPolicySkuOutput {
	return o
}

func (o FirewallPolicySkuOutput) ToFirewallPolicySkuOutputWithContext(ctx context.Context) FirewallPolicySkuOutput {
	return o
}

func (o FirewallPolicySkuOutput) ToFirewallPolicySkuPtrOutput() FirewallPolicySkuPtrOutput {
	return o.ToFirewallPolicySkuPtrOutputWithContext(context.Background())
}

func (o FirewallPolicySkuOutput) ToFirewallPolicySkuPtrOutputWithContext(ctx context.Context) FirewallPolicySkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicySku) *FirewallPolicySku {
		return &v
	}).(FirewallPolicySkuPtrOutput)
}

// Tier of Firewall Policy.
func (o FirewallPolicySkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicySku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type FirewallPolicySkuPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicySkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySku)(nil)).Elem()
}

func (o FirewallPolicySkuPtrOutput) ToFirewallPolicySkuPtrOutput() FirewallPolicySkuPtrOutput {
	return o
}

func (o FirewallPolicySkuPtrOutput) ToFirewallPolicySkuPtrOutputWithContext(ctx context.Context) FirewallPolicySkuPtrOutput {
	return o
}

func (o FirewallPolicySkuPtrOutput) Elem() FirewallPolicySkuOutput {
	return o.ApplyT(func(v *FirewallPolicySku) FirewallPolicySku {
		if v != nil {
			return *v
		}
		var ret FirewallPolicySku
		return ret
	}).(FirewallPolicySkuOutput)
}

// Tier of Firewall Policy.
func (o FirewallPolicySkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicySku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// SKU of Firewall policy.
type FirewallPolicySkuResponse struct {
	// Tier of Firewall Policy.
	Tier *string `pulumi:"tier"`
}

// SKU of Firewall policy.
type FirewallPolicySkuResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicySkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicySkuResponse)(nil)).Elem()
}

func (o FirewallPolicySkuResponseOutput) ToFirewallPolicySkuResponseOutput() FirewallPolicySkuResponseOutput {
	return o
}

func (o FirewallPolicySkuResponseOutput) ToFirewallPolicySkuResponseOutputWithContext(ctx context.Context) FirewallPolicySkuResponseOutput {
	return o
}

// Tier of Firewall Policy.
func (o FirewallPolicySkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicySkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type FirewallPolicySkuResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicySkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicySkuResponse)(nil)).Elem()
}

func (o FirewallPolicySkuResponsePtrOutput) ToFirewallPolicySkuResponsePtrOutput() FirewallPolicySkuResponsePtrOutput {
	return o
}

func (o FirewallPolicySkuResponsePtrOutput) ToFirewallPolicySkuResponsePtrOutputWithContext(ctx context.Context) FirewallPolicySkuResponsePtrOutput {
	return o
}

func (o FirewallPolicySkuResponsePtrOutput) Elem() FirewallPolicySkuResponseOutput {
	return o.ApplyT(func(v *FirewallPolicySkuResponse) FirewallPolicySkuResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicySkuResponse
		return ret
	}).(FirewallPolicySkuResponseOutput)
}

// Tier of Firewall Policy.
func (o FirewallPolicySkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicySkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelist struct {
	// List of FQDNs for the ThreatIntel Whitelist.
	Fqdns []string `pulumi:"fqdns"`
	// List of IP addresses for the ThreatIntel Whitelist.
	IpAddresses []string `pulumi:"ipAddresses"`
}

// FirewallPolicyThreatIntelWhitelistInput is an input type that accepts FirewallPolicyThreatIntelWhitelistArgs and FirewallPolicyThreatIntelWhitelistOutput values.
// You can construct a concrete instance of `FirewallPolicyThreatIntelWhitelistInput` via:
//
//	FirewallPolicyThreatIntelWhitelistArgs{...}
type FirewallPolicyThreatIntelWhitelistInput interface {
	pulumi.Input

	ToFirewallPolicyThreatIntelWhitelistOutput() FirewallPolicyThreatIntelWhitelistOutput
	ToFirewallPolicyThreatIntelWhitelistOutputWithContext(context.Context) FirewallPolicyThreatIntelWhitelistOutput
}

// ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelistArgs struct {
	// List of FQDNs for the ThreatIntel Whitelist.
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// List of IP addresses for the ThreatIntel Whitelist.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
}

func (FirewallPolicyThreatIntelWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyThreatIntelWhitelist)(nil)).Elem()
}

func (i FirewallPolicyThreatIntelWhitelistArgs) ToFirewallPolicyThreatIntelWhitelistOutput() FirewallPolicyThreatIntelWhitelistOutput {
	return i.ToFirewallPolicyThreatIntelWhitelistOutputWithContext(context.Background())
}

func (i FirewallPolicyThreatIntelWhitelistArgs) ToFirewallPolicyThreatIntelWhitelistOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyThreatIntelWhitelistOutput)
}

func (i FirewallPolicyThreatIntelWhitelistArgs) ToFirewallPolicyThreatIntelWhitelistPtrOutput() FirewallPolicyThreatIntelWhitelistPtrOutput {
	return i.ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyThreatIntelWhitelistArgs) ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyThreatIntelWhitelistOutput).ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(ctx)
}

// FirewallPolicyThreatIntelWhitelistPtrInput is an input type that accepts FirewallPolicyThreatIntelWhitelistArgs, FirewallPolicyThreatIntelWhitelistPtr and FirewallPolicyThreatIntelWhitelistPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyThreatIntelWhitelistPtrInput` via:
//
//	        FirewallPolicyThreatIntelWhitelistArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicyThreatIntelWhitelistPtrInput interface {
	pulumi.Input

	ToFirewallPolicyThreatIntelWhitelistPtrOutput() FirewallPolicyThreatIntelWhitelistPtrOutput
	ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(context.Context) FirewallPolicyThreatIntelWhitelistPtrOutput
}

type firewallPolicyThreatIntelWhitelistPtrType FirewallPolicyThreatIntelWhitelistArgs

func FirewallPolicyThreatIntelWhitelistPtr(v *FirewallPolicyThreatIntelWhitelistArgs) FirewallPolicyThreatIntelWhitelistPtrInput {
	return (*firewallPolicyThreatIntelWhitelistPtrType)(v)
}

func (*firewallPolicyThreatIntelWhitelistPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyThreatIntelWhitelist)(nil)).Elem()
}

func (i *firewallPolicyThreatIntelWhitelistPtrType) ToFirewallPolicyThreatIntelWhitelistPtrOutput() FirewallPolicyThreatIntelWhitelistPtrOutput {
	return i.ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyThreatIntelWhitelistPtrType) ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyThreatIntelWhitelistPtrOutput)
}

// ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelistOutput struct{ *pulumi.OutputState }

func (FirewallPolicyThreatIntelWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyThreatIntelWhitelist)(nil)).Elem()
}

func (o FirewallPolicyThreatIntelWhitelistOutput) ToFirewallPolicyThreatIntelWhitelistOutput() FirewallPolicyThreatIntelWhitelistOutput {
	return o
}

func (o FirewallPolicyThreatIntelWhitelistOutput) ToFirewallPolicyThreatIntelWhitelistOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistOutput {
	return o
}

func (o FirewallPolicyThreatIntelWhitelistOutput) ToFirewallPolicyThreatIntelWhitelistPtrOutput() FirewallPolicyThreatIntelWhitelistPtrOutput {
	return o.ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyThreatIntelWhitelistOutput) ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicyThreatIntelWhitelist) *FirewallPolicyThreatIntelWhitelist {
		return &v
	}).(FirewallPolicyThreatIntelWhitelistPtrOutput)
}

// List of FQDNs for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyThreatIntelWhitelist) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// List of IP addresses for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyThreatIntelWhitelist) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

type FirewallPolicyThreatIntelWhitelistPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyThreatIntelWhitelistPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyThreatIntelWhitelist)(nil)).Elem()
}

func (o FirewallPolicyThreatIntelWhitelistPtrOutput) ToFirewallPolicyThreatIntelWhitelistPtrOutput() FirewallPolicyThreatIntelWhitelistPtrOutput {
	return o
}

func (o FirewallPolicyThreatIntelWhitelistPtrOutput) ToFirewallPolicyThreatIntelWhitelistPtrOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistPtrOutput {
	return o
}

func (o FirewallPolicyThreatIntelWhitelistPtrOutput) Elem() FirewallPolicyThreatIntelWhitelistOutput {
	return o.ApplyT(func(v *FirewallPolicyThreatIntelWhitelist) FirewallPolicyThreatIntelWhitelist {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyThreatIntelWhitelist
		return ret
	}).(FirewallPolicyThreatIntelWhitelistOutput)
}

// List of FQDNs for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistPtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyThreatIntelWhitelist) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// List of IP addresses for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistPtrOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyThreatIntelWhitelist) []string {
		if v == nil {
			return nil
		}
		return v.IpAddresses
	}).(pulumi.StringArrayOutput)
}

// ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelistResponse struct {
	// List of FQDNs for the ThreatIntel Whitelist.
	Fqdns []string `pulumi:"fqdns"`
	// List of IP addresses for the ThreatIntel Whitelist.
	IpAddresses []string `pulumi:"ipAddresses"`
}

// ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelistResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyThreatIntelWhitelistResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyThreatIntelWhitelistResponse)(nil)).Elem()
}

func (o FirewallPolicyThreatIntelWhitelistResponseOutput) ToFirewallPolicyThreatIntelWhitelistResponseOutput() FirewallPolicyThreatIntelWhitelistResponseOutput {
	return o
}

func (o FirewallPolicyThreatIntelWhitelistResponseOutput) ToFirewallPolicyThreatIntelWhitelistResponseOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistResponseOutput {
	return o
}

// List of FQDNs for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistResponseOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyThreatIntelWhitelistResponse) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// List of IP addresses for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistResponseOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyThreatIntelWhitelistResponse) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

type FirewallPolicyThreatIntelWhitelistResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyThreatIntelWhitelistResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyThreatIntelWhitelistResponse)(nil)).Elem()
}

func (o FirewallPolicyThreatIntelWhitelistResponsePtrOutput) ToFirewallPolicyThreatIntelWhitelistResponsePtrOutput() FirewallPolicyThreatIntelWhitelistResponsePtrOutput {
	return o
}

func (o FirewallPolicyThreatIntelWhitelistResponsePtrOutput) ToFirewallPolicyThreatIntelWhitelistResponsePtrOutputWithContext(ctx context.Context) FirewallPolicyThreatIntelWhitelistResponsePtrOutput {
	return o
}

func (o FirewallPolicyThreatIntelWhitelistResponsePtrOutput) Elem() FirewallPolicyThreatIntelWhitelistResponseOutput {
	return o.ApplyT(func(v *FirewallPolicyThreatIntelWhitelistResponse) FirewallPolicyThreatIntelWhitelistResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyThreatIntelWhitelistResponse
		return ret
	}).(FirewallPolicyThreatIntelWhitelistResponseOutput)
}

// List of FQDNs for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistResponsePtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyThreatIntelWhitelistResponse) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// List of IP addresses for the ThreatIntel Whitelist.
func (o FirewallPolicyThreatIntelWhitelistResponsePtrOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyThreatIntelWhitelistResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpAddresses
	}).(pulumi.StringArrayOutput)
}

// Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurity struct {
	// The CA used for intermediate CA generation.
	CertificateAuthority *FirewallPolicyCertificateAuthority `pulumi:"certificateAuthority"`
}

// FirewallPolicyTransportSecurityInput is an input type that accepts FirewallPolicyTransportSecurityArgs and FirewallPolicyTransportSecurityOutput values.
// You can construct a concrete instance of `FirewallPolicyTransportSecurityInput` via:
//
//	FirewallPolicyTransportSecurityArgs{...}
type FirewallPolicyTransportSecurityInput interface {
	pulumi.Input

	ToFirewallPolicyTransportSecurityOutput() FirewallPolicyTransportSecurityOutput
	ToFirewallPolicyTransportSecurityOutputWithContext(context.Context) FirewallPolicyTransportSecurityOutput
}

// Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurityArgs struct {
	// The CA used for intermediate CA generation.
	CertificateAuthority FirewallPolicyCertificateAuthorityPtrInput `pulumi:"certificateAuthority"`
}

func (FirewallPolicyTransportSecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyTransportSecurity)(nil)).Elem()
}

func (i FirewallPolicyTransportSecurityArgs) ToFirewallPolicyTransportSecurityOutput() FirewallPolicyTransportSecurityOutput {
	return i.ToFirewallPolicyTransportSecurityOutputWithContext(context.Background())
}

func (i FirewallPolicyTransportSecurityArgs) ToFirewallPolicyTransportSecurityOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyTransportSecurityOutput)
}

func (i FirewallPolicyTransportSecurityArgs) ToFirewallPolicyTransportSecurityPtrOutput() FirewallPolicyTransportSecurityPtrOutput {
	return i.ToFirewallPolicyTransportSecurityPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyTransportSecurityArgs) ToFirewallPolicyTransportSecurityPtrOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyTransportSecurityOutput).ToFirewallPolicyTransportSecurityPtrOutputWithContext(ctx)
}

// FirewallPolicyTransportSecurityPtrInput is an input type that accepts FirewallPolicyTransportSecurityArgs, FirewallPolicyTransportSecurityPtr and FirewallPolicyTransportSecurityPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyTransportSecurityPtrInput` via:
//
//	        FirewallPolicyTransportSecurityArgs{...}
//
//	or:
//
//	        nil
type FirewallPolicyTransportSecurityPtrInput interface {
	pulumi.Input

	ToFirewallPolicyTransportSecurityPtrOutput() FirewallPolicyTransportSecurityPtrOutput
	ToFirewallPolicyTransportSecurityPtrOutputWithContext(context.Context) FirewallPolicyTransportSecurityPtrOutput
}

type firewallPolicyTransportSecurityPtrType FirewallPolicyTransportSecurityArgs

func FirewallPolicyTransportSecurityPtr(v *FirewallPolicyTransportSecurityArgs) FirewallPolicyTransportSecurityPtrInput {
	return (*firewallPolicyTransportSecurityPtrType)(v)
}

func (*firewallPolicyTransportSecurityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyTransportSecurity)(nil)).Elem()
}

func (i *firewallPolicyTransportSecurityPtrType) ToFirewallPolicyTransportSecurityPtrOutput() FirewallPolicyTransportSecurityPtrOutput {
	return i.ToFirewallPolicyTransportSecurityPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyTransportSecurityPtrType) ToFirewallPolicyTransportSecurityPtrOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyTransportSecurityPtrOutput)
}

// Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurityOutput struct{ *pulumi.OutputState }

func (FirewallPolicyTransportSecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyTransportSecurity)(nil)).Elem()
}

func (o FirewallPolicyTransportSecurityOutput) ToFirewallPolicyTransportSecurityOutput() FirewallPolicyTransportSecurityOutput {
	return o
}

func (o FirewallPolicyTransportSecurityOutput) ToFirewallPolicyTransportSecurityOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityOutput {
	return o
}

func (o FirewallPolicyTransportSecurityOutput) ToFirewallPolicyTransportSecurityPtrOutput() FirewallPolicyTransportSecurityPtrOutput {
	return o.ToFirewallPolicyTransportSecurityPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyTransportSecurityOutput) ToFirewallPolicyTransportSecurityPtrOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallPolicyTransportSecurity) *FirewallPolicyTransportSecurity {
		return &v
	}).(FirewallPolicyTransportSecurityPtrOutput)
}

// The CA used for intermediate CA generation.
func (o FirewallPolicyTransportSecurityOutput) CertificateAuthority() FirewallPolicyCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v FirewallPolicyTransportSecurity) *FirewallPolicyCertificateAuthority {
		return v.CertificateAuthority
	}).(FirewallPolicyCertificateAuthorityPtrOutput)
}

type FirewallPolicyTransportSecurityPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyTransportSecurityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyTransportSecurity)(nil)).Elem()
}

func (o FirewallPolicyTransportSecurityPtrOutput) ToFirewallPolicyTransportSecurityPtrOutput() FirewallPolicyTransportSecurityPtrOutput {
	return o
}

func (o FirewallPolicyTransportSecurityPtrOutput) ToFirewallPolicyTransportSecurityPtrOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityPtrOutput {
	return o
}

func (o FirewallPolicyTransportSecurityPtrOutput) Elem() FirewallPolicyTransportSecurityOutput {
	return o.ApplyT(func(v *FirewallPolicyTransportSecurity) FirewallPolicyTransportSecurity {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyTransportSecurity
		return ret
	}).(FirewallPolicyTransportSecurityOutput)
}

// The CA used for intermediate CA generation.
func (o FirewallPolicyTransportSecurityPtrOutput) CertificateAuthority() FirewallPolicyCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *FirewallPolicyTransportSecurity) *FirewallPolicyCertificateAuthority {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(FirewallPolicyCertificateAuthorityPtrOutput)
}

// Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurityResponse struct {
	// The CA used for intermediate CA generation.
	CertificateAuthority *FirewallPolicyCertificateAuthorityResponse `pulumi:"certificateAuthority"`
}

// Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurityResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyTransportSecurityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyTransportSecurityResponse)(nil)).Elem()
}

func (o FirewallPolicyTransportSecurityResponseOutput) ToFirewallPolicyTransportSecurityResponseOutput() FirewallPolicyTransportSecurityResponseOutput {
	return o
}

func (o FirewallPolicyTransportSecurityResponseOutput) ToFirewallPolicyTransportSecurityResponseOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityResponseOutput {
	return o
}

// The CA used for intermediate CA generation.
func (o FirewallPolicyTransportSecurityResponseOutput) CertificateAuthority() FirewallPolicyCertificateAuthorityResponsePtrOutput {
	return o.ApplyT(func(v FirewallPolicyTransportSecurityResponse) *FirewallPolicyCertificateAuthorityResponse {
		return v.CertificateAuthority
	}).(FirewallPolicyCertificateAuthorityResponsePtrOutput)
}

type FirewallPolicyTransportSecurityResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyTransportSecurityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyTransportSecurityResponse)(nil)).Elem()
}

func (o FirewallPolicyTransportSecurityResponsePtrOutput) ToFirewallPolicyTransportSecurityResponsePtrOutput() FirewallPolicyTransportSecurityResponsePtrOutput {
	return o
}

func (o FirewallPolicyTransportSecurityResponsePtrOutput) ToFirewallPolicyTransportSecurityResponsePtrOutputWithContext(ctx context.Context) FirewallPolicyTransportSecurityResponsePtrOutput {
	return o
}

func (o FirewallPolicyTransportSecurityResponsePtrOutput) Elem() FirewallPolicyTransportSecurityResponseOutput {
	return o.ApplyT(func(v *FirewallPolicyTransportSecurityResponse) FirewallPolicyTransportSecurityResponse {
		if v != nil {
			return *v
		}
		var ret FirewallPolicyTransportSecurityResponse
		return ret
	}).(FirewallPolicyTransportSecurityResponseOutput)
}

// The CA used for intermediate CA generation.
func (o FirewallPolicyTransportSecurityResponsePtrOutput) CertificateAuthority() FirewallPolicyCertificateAuthorityResponsePtrOutput {
	return o.ApplyT(func(v *FirewallPolicyTransportSecurityResponse) *FirewallPolicyCertificateAuthorityResponse {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(FirewallPolicyCertificateAuthorityResponsePtrOutput)
}

// Identity for the resource.
type ManagedServiceIdentity struct {
	// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Identity for the resource.
type ManagedServiceIdentityArgs struct {
	// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Identity for the resource.
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o ManagedServiceIdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o ManagedServiceIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the resource.
type ManagedServiceIdentityResponse struct {
	// The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type *string `pulumi:"type"`
	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ManagedServiceIdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]ManagedServiceIdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]ManagedServiceIdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ManagedServiceIdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type ManagedServiceIdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesOutput() ManagedServiceIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o ManagedServiceIdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ManagedServiceIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput() ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) ToManagedServiceIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) ManagedServiceIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ManagedServiceIdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]ManagedServiceIdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(ManagedServiceIdentityResponseUserAssignedIdentitiesOutput)
}

// Describes a column to sort
type OrderBy struct {
	// Describes the actual column name to sort by
	Field *string `pulumi:"field"`
	// Describes if results should be in ascending/descending order
	Order *string `pulumi:"order"`
}

// OrderByInput is an input type that accepts OrderByArgs and OrderByOutput values.
// You can construct a concrete instance of `OrderByInput` via:
//
//	OrderByArgs{...}
type OrderByInput interface {
	pulumi.Input

	ToOrderByOutput() OrderByOutput
	ToOrderByOutputWithContext(context.Context) OrderByOutput
}

// Describes a column to sort
type OrderByArgs struct {
	// Describes the actual column name to sort by
	Field pulumi.StringPtrInput `pulumi:"field"`
	// Describes if results should be in ascending/descending order
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (OrderByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderBy)(nil)).Elem()
}

func (i OrderByArgs) ToOrderByOutput() OrderByOutput {
	return i.ToOrderByOutputWithContext(context.Background())
}

func (i OrderByArgs) ToOrderByOutputWithContext(ctx context.Context) OrderByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderByOutput)
}

func (i OrderByArgs) ToOrderByPtrOutput() OrderByPtrOutput {
	return i.ToOrderByPtrOutputWithContext(context.Background())
}

func (i OrderByArgs) ToOrderByPtrOutputWithContext(ctx context.Context) OrderByPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderByOutput).ToOrderByPtrOutputWithContext(ctx)
}

// OrderByPtrInput is an input type that accepts OrderByArgs, OrderByPtr and OrderByPtrOutput values.
// You can construct a concrete instance of `OrderByPtrInput` via:
//
//	        OrderByArgs{...}
//
//	or:
//
//	        nil
type OrderByPtrInput interface {
	pulumi.Input

	ToOrderByPtrOutput() OrderByPtrOutput
	ToOrderByPtrOutputWithContext(context.Context) OrderByPtrOutput
}

type orderByPtrType OrderByArgs

func OrderByPtr(v *OrderByArgs) OrderByPtrInput {
	return (*orderByPtrType)(v)
}

func (*orderByPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrderBy)(nil)).Elem()
}

func (i *orderByPtrType) ToOrderByPtrOutput() OrderByPtrOutput {
	return i.ToOrderByPtrOutputWithContext(context.Background())
}

func (i *orderByPtrType) ToOrderByPtrOutputWithContext(ctx context.Context) OrderByPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderByPtrOutput)
}

// Describes a column to sort
type OrderByOutput struct{ *pulumi.OutputState }

func (OrderByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderBy)(nil)).Elem()
}

func (o OrderByOutput) ToOrderByOutput() OrderByOutput {
	return o
}

func (o OrderByOutput) ToOrderByOutputWithContext(ctx context.Context) OrderByOutput {
	return o
}

func (o OrderByOutput) ToOrderByPtrOutput() OrderByPtrOutput {
	return o.ToOrderByPtrOutputWithContext(context.Background())
}

func (o OrderByOutput) ToOrderByPtrOutputWithContext(ctx context.Context) OrderByPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrderBy) *OrderBy {
		return &v
	}).(OrderByPtrOutput)
}

// Describes the actual column name to sort by
func (o OrderByOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrderBy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// Describes if results should be in ascending/descending order
func (o OrderByOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrderBy) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type OrderByPtrOutput struct{ *pulumi.OutputState }

func (OrderByPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrderBy)(nil)).Elem()
}

func (o OrderByPtrOutput) ToOrderByPtrOutput() OrderByPtrOutput {
	return o
}

func (o OrderByPtrOutput) ToOrderByPtrOutputWithContext(ctx context.Context) OrderByPtrOutput {
	return o
}

func (o OrderByPtrOutput) Elem() OrderByOutput {
	return o.ApplyT(func(v *OrderBy) OrderBy {
		if v != nil {
			return *v
		}
		var ret OrderBy
		return ret
	}).(OrderByOutput)
}

// Describes the actual column name to sort by
func (o OrderByPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrderBy) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// Describes if results should be in ascending/descending order
func (o OrderByPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrderBy) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

type SingleQueryResultResponse struct {
	// Describes what is the signature enforces
	Description *string `pulumi:"description"`
	// Describes the list of destination ports related to this signature
	DestinationPorts []string `pulumi:"destinationPorts"`
	// Describes in which direction signature is being enforced: 0 - Inbound, 1 - OutBound, 2 - Bidirectional
	Direction *int `pulumi:"direction"`
	// Describes the groups the signature belongs to
	Group *string `pulumi:"group"`
	// Describes if this override is inherited from base policy or not
	InheritedFromParentPolicy *bool `pulumi:"inheritedFromParentPolicy"`
	// Describes the last updated time of the signature (provided from 3rd party vendor)
	LastUpdated *string `pulumi:"lastUpdated"`
	// The current mode enforced, 0 - Disabled, 1 - Alert, 2 -Deny
	Mode *int `pulumi:"mode"`
	// Describes the protocol the signatures is being enforced in
	Protocol *string `pulumi:"protocol"`
	// Describes the severity of signature: 1 - Low, 2 - Medium, 3 - High
	Severity *int `pulumi:"severity"`
	// The ID of the signature
	SignatureId *int `pulumi:"signatureId"`
	// Describes the list of source ports related to this signature
	SourcePorts []string `pulumi:"sourcePorts"`
}

type SingleQueryResultResponseOutput struct{ *pulumi.OutputState }

func (SingleQueryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleQueryResultResponse)(nil)).Elem()
}

func (o SingleQueryResultResponseOutput) ToSingleQueryResultResponseOutput() SingleQueryResultResponseOutput {
	return o
}

func (o SingleQueryResultResponseOutput) ToSingleQueryResultResponseOutputWithContext(ctx context.Context) SingleQueryResultResponseOutput {
	return o
}

// Describes what is the signature enforces
func (o SingleQueryResultResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Describes the list of destination ports related to this signature
func (o SingleQueryResultResponseOutput) DestinationPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) []string { return v.DestinationPorts }).(pulumi.StringArrayOutput)
}

// Describes in which direction signature is being enforced: 0 - Inbound, 1 - OutBound, 2 - Bidirectional
func (o SingleQueryResultResponseOutput) Direction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *int { return v.Direction }).(pulumi.IntPtrOutput)
}

// Describes the groups the signature belongs to
func (o SingleQueryResultResponseOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Describes if this override is inherited from base policy or not
func (o SingleQueryResultResponseOutput) InheritedFromParentPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *bool { return v.InheritedFromParentPolicy }).(pulumi.BoolPtrOutput)
}

// Describes the last updated time of the signature (provided from 3rd party vendor)
func (o SingleQueryResultResponseOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *string { return v.LastUpdated }).(pulumi.StringPtrOutput)
}

// The current mode enforced, 0 - Disabled, 1 - Alert, 2 -Deny
func (o SingleQueryResultResponseOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Describes the protocol the signatures is being enforced in
func (o SingleQueryResultResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Describes the severity of signature: 1 - Low, 2 - Medium, 3 - High
func (o SingleQueryResultResponseOutput) Severity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *int { return v.Severity }).(pulumi.IntPtrOutput)
}

// The ID of the signature
func (o SingleQueryResultResponseOutput) SignatureId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) *int { return v.SignatureId }).(pulumi.IntPtrOutput)
}

// Describes the list of source ports related to this signature
func (o SingleQueryResultResponseOutput) SourcePorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SingleQueryResultResponse) []string { return v.SourcePorts }).(pulumi.StringArrayOutput)
}

type SingleQueryResultResponseArrayOutput struct{ *pulumi.OutputState }

func (SingleQueryResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SingleQueryResultResponse)(nil)).Elem()
}

func (o SingleQueryResultResponseArrayOutput) ToSingleQueryResultResponseArrayOutput() SingleQueryResultResponseArrayOutput {
	return o
}

func (o SingleQueryResultResponseArrayOutput) ToSingleQueryResultResponseArrayOutputWithContext(ctx context.Context) SingleQueryResultResponseArrayOutput {
	return o
}

func (o SingleQueryResultResponseArrayOutput) Index(i pulumi.IntInput) SingleQueryResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SingleQueryResultResponse {
		return vs[0].([]SingleQueryResultResponse)[vs[1].(int)]
	}).(SingleQueryResultResponseOutput)
}

// Reference to another subresource.
type SubResource struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//	SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// Reference to another subresource.
type SubResourceArgs struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//	        SubResourceArgs{...}
//
//	or:
//
//	        nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// Reference to another subresource.
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource {
		if v != nil {
			return *v
		}
		var ret SubResource
		return ret
	}).(SubResourceOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Reference to another subresource.
type SubResourceResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// Reference to another subresource.
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

// Resource ID.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse {
		if v != nil {
			return *v
		}
		var ret SubResourceResponse
		return ret
	}).(SubResourceResponseOutput)
}

// Resource ID.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsSettingsOutput{})
	pulumi.RegisterOutputType(DnsSettingsPtrOutput{})
	pulumi.RegisterOutputType(DnsSettingsResponseOutput{})
	pulumi.RegisterOutputType(DnsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ExplicitProxySettingsOutput{})
	pulumi.RegisterOutputType(ExplicitProxySettingsPtrOutput{})
	pulumi.RegisterOutputType(ExplicitProxySettingsResponseOutput{})
	pulumi.RegisterOutputType(ExplicitProxySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FilterItemsOutput{})
	pulumi.RegisterOutputType(FilterItemsArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCertificateAuthorityResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCertificateAuthorityResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyInsightsOutput{})
	pulumi.RegisterOutputType(FirewallPolicyInsightsPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyInsightsResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyInsightsResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionBypassTrafficSpecificationsResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionConfigurationOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionSignatureSpecificationOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionSignatureSpecificationArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionSignatureSpecificationResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyIntrusionDetectionSignatureSpecificationResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsResourcesOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsResourcesPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsResourcesResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsResourcesResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsWorkspaceOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsWorkspaceArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsWorkspaceResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyLogAnalyticsWorkspaceResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicySNATOutput{})
	pulumi.RegisterOutputType(FirewallPolicySNATPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicySNATResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicySNATResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicySQLOutput{})
	pulumi.RegisterOutputType(FirewallPolicySQLPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicySQLResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicySQLResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicySkuOutput{})
	pulumi.RegisterOutputType(FirewallPolicySkuPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicySkuResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicySkuResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyThreatIntelWhitelistOutput{})
	pulumi.RegisterOutputType(FirewallPolicyThreatIntelWhitelistPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyThreatIntelWhitelistResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyThreatIntelWhitelistResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyTransportSecurityOutput{})
	pulumi.RegisterOutputType(FirewallPolicyTransportSecurityPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyTransportSecurityResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyTransportSecurityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(OrderByOutput{})
	pulumi.RegisterOutputType(OrderByPtrOutput{})
	pulumi.RegisterOutputType(SingleQueryResultResponseOutput{})
	pulumi.RegisterOutputType(SingleQueryResultResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
}
