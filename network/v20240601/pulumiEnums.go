// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resolution policy on the virtual network link. Only applicable for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to 'NxDomainRedirect', Azure DNS resolver falls back to public resolution if private dns query resolution results in non-existent domain response.
type ResolutionPolicy string

const (
	ResolutionPolicyDefault          = ResolutionPolicy("Default")
	ResolutionPolicyNxDomainRedirect = ResolutionPolicy("NxDomainRedirect")
)

func (ResolutionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolutionPolicy)(nil)).Elem()
}

func (e ResolutionPolicy) ToResolutionPolicyOutput() ResolutionPolicyOutput {
	return pulumi.ToOutput(e).(ResolutionPolicyOutput)
}

func (e ResolutionPolicy) ToResolutionPolicyOutputWithContext(ctx context.Context) ResolutionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResolutionPolicyOutput)
}

func (e ResolutionPolicy) ToResolutionPolicyPtrOutput() ResolutionPolicyPtrOutput {
	return e.ToResolutionPolicyPtrOutputWithContext(context.Background())
}

func (e ResolutionPolicy) ToResolutionPolicyPtrOutputWithContext(ctx context.Context) ResolutionPolicyPtrOutput {
	return ResolutionPolicy(e).ToResolutionPolicyOutputWithContext(ctx).ToResolutionPolicyPtrOutputWithContext(ctx)
}

func (e ResolutionPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResolutionPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResolutionPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResolutionPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResolutionPolicyOutput struct{ *pulumi.OutputState }

func (ResolutionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolutionPolicy)(nil)).Elem()
}

func (o ResolutionPolicyOutput) ToResolutionPolicyOutput() ResolutionPolicyOutput {
	return o
}

func (o ResolutionPolicyOutput) ToResolutionPolicyOutputWithContext(ctx context.Context) ResolutionPolicyOutput {
	return o
}

func (o ResolutionPolicyOutput) ToResolutionPolicyPtrOutput() ResolutionPolicyPtrOutput {
	return o.ToResolutionPolicyPtrOutputWithContext(context.Background())
}

func (o ResolutionPolicyOutput) ToResolutionPolicyPtrOutputWithContext(ctx context.Context) ResolutionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResolutionPolicy) *ResolutionPolicy {
		return &v
	}).(ResolutionPolicyPtrOutput)
}

func (o ResolutionPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResolutionPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResolutionPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResolutionPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResolutionPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResolutionPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResolutionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ResolutionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolutionPolicy)(nil)).Elem()
}

func (o ResolutionPolicyPtrOutput) ToResolutionPolicyPtrOutput() ResolutionPolicyPtrOutput {
	return o
}

func (o ResolutionPolicyPtrOutput) ToResolutionPolicyPtrOutputWithContext(ctx context.Context) ResolutionPolicyPtrOutput {
	return o
}

func (o ResolutionPolicyPtrOutput) Elem() ResolutionPolicyOutput {
	return o.ApplyT(func(v *ResolutionPolicy) ResolutionPolicy {
		if v != nil {
			return *v
		}
		var ret ResolutionPolicy
		return ret
	}).(ResolutionPolicyOutput)
}

func (o ResolutionPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResolutionPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResolutionPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResolutionPolicyInput is an input type that accepts values of the ResolutionPolicy enum
// A concrete instance of `ResolutionPolicyInput` can be one of the following:
//
//	ResolutionPolicyDefault
//	ResolutionPolicyNxDomainRedirect
type ResolutionPolicyInput interface {
	pulumi.Input

	ToResolutionPolicyOutput() ResolutionPolicyOutput
	ToResolutionPolicyOutputWithContext(context.Context) ResolutionPolicyOutput
}

var resolutionPolicyPtrType = reflect.TypeOf((**ResolutionPolicy)(nil)).Elem()

type ResolutionPolicyPtrInput interface {
	pulumi.Input

	ToResolutionPolicyPtrOutput() ResolutionPolicyPtrOutput
	ToResolutionPolicyPtrOutputWithContext(context.Context) ResolutionPolicyPtrOutput
}

type resolutionPolicyPtr string

func ResolutionPolicyPtr(v string) ResolutionPolicyPtrInput {
	return (*resolutionPolicyPtr)(&v)
}

func (*resolutionPolicyPtr) ElementType() reflect.Type {
	return resolutionPolicyPtrType
}

func (in *resolutionPolicyPtr) ToResolutionPolicyPtrOutput() ResolutionPolicyPtrOutput {
	return pulumi.ToOutput(in).(ResolutionPolicyPtrOutput)
}

func (in *resolutionPolicyPtr) ToResolutionPolicyPtrOutputWithContext(ctx context.Context) ResolutionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResolutionPolicyPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ResolutionPolicyOutput{})
	pulumi.RegisterOutputType(ResolutionPolicyPtrOutput{})
}
