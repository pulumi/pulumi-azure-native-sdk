// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Describes the override action to be applied when rule matches.
type ActionType string

const (
	ActionTypeAllow    = ActionType("Allow")
	ActionTypeBlock    = ActionType("Block")
	ActionTypeLog      = ActionType("Log")
	ActionTypeRedirect = ActionType("Redirect")
)

func (ActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionType)(nil)).Elem()
}

func (e ActionType) ToActionTypeOutput() ActionTypeOutput {
	return pulumi.ToOutput(e).(ActionTypeOutput)
}

func (e ActionType) ToActionTypeOutputWithContext(ctx context.Context) ActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ActionTypeOutput)
}

func (e ActionType) ToActionTypePtrOutput() ActionTypePtrOutput {
	return e.ToActionTypePtrOutputWithContext(context.Background())
}

func (e ActionType) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return ActionType(e).ToActionTypeOutputWithContext(ctx).ToActionTypePtrOutputWithContext(ctx)
}

func (e ActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ActionTypeOutput struct{ *pulumi.OutputState }

func (ActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionType)(nil)).Elem()
}

func (o ActionTypeOutput) ToActionTypeOutput() ActionTypeOutput {
	return o
}

func (o ActionTypeOutput) ToActionTypeOutputWithContext(ctx context.Context) ActionTypeOutput {
	return o
}

func (o ActionTypeOutput) ToActionTypePtrOutput() ActionTypePtrOutput {
	return o.ToActionTypePtrOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionType) *ActionType {
		return &v
	}).(ActionTypePtrOutput)
}

func (o ActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ActionTypePtrOutput struct{ *pulumi.OutputState }

func (ActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionType)(nil)).Elem()
}

func (o ActionTypePtrOutput) ToActionTypePtrOutput() ActionTypePtrOutput {
	return o
}

func (o ActionTypePtrOutput) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return o
}

func (o ActionTypePtrOutput) Elem() ActionTypeOutput {
	return o.ApplyT(func(v *ActionType) ActionType {
		if v != nil {
			return *v
		}
		var ret ActionType
		return ret
	}).(ActionTypeOutput)
}

func (o ActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ActionTypeInput is an input type that accepts values of the ActionType enum
// A concrete instance of `ActionTypeInput` can be one of the following:
//
//	ActionTypeAllow
//	ActionTypeBlock
//	ActionTypeLog
//	ActionTypeRedirect
type ActionTypeInput interface {
	pulumi.Input

	ToActionTypeOutput() ActionTypeOutput
	ToActionTypeOutputWithContext(context.Context) ActionTypeOutput
}

var actionTypePtrType = reflect.TypeOf((**ActionType)(nil)).Elem()

type ActionTypePtrInput interface {
	pulumi.Input

	ToActionTypePtrOutput() ActionTypePtrOutput
	ToActionTypePtrOutputWithContext(context.Context) ActionTypePtrOutput
}

type actionTypePtr string

func ActionTypePtr(v string) ActionTypePtrInput {
	return (*actionTypePtr)(&v)
}

func (*actionTypePtr) ElementType() reflect.Type {
	return actionTypePtrType
}

func (in *actionTypePtr) ToActionTypePtrOutput() ActionTypePtrOutput {
	return pulumi.ToOutput(in).(ActionTypePtrOutput)
}

func (in *actionTypePtr) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ActionTypePtrOutput)
}

func (in *actionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ActionType] {
	return pulumix.Output[*ActionType]{
		OutputState: in.ToActionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
type BackendEnabledState string

const (
	BackendEnabledStateEnabled  = BackendEnabledState("Enabled")
	BackendEnabledStateDisabled = BackendEnabledState("Disabled")
)

func (BackendEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendEnabledState)(nil)).Elem()
}

func (e BackendEnabledState) ToBackendEnabledStateOutput() BackendEnabledStateOutput {
	return pulumi.ToOutput(e).(BackendEnabledStateOutput)
}

func (e BackendEnabledState) ToBackendEnabledStateOutputWithContext(ctx context.Context) BackendEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BackendEnabledStateOutput)
}

func (e BackendEnabledState) ToBackendEnabledStatePtrOutput() BackendEnabledStatePtrOutput {
	return e.ToBackendEnabledStatePtrOutputWithContext(context.Background())
}

func (e BackendEnabledState) ToBackendEnabledStatePtrOutputWithContext(ctx context.Context) BackendEnabledStatePtrOutput {
	return BackendEnabledState(e).ToBackendEnabledStateOutputWithContext(ctx).ToBackendEnabledStatePtrOutputWithContext(ctx)
}

func (e BackendEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BackendEnabledStateOutput struct{ *pulumi.OutputState }

func (BackendEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendEnabledState)(nil)).Elem()
}

func (o BackendEnabledStateOutput) ToBackendEnabledStateOutput() BackendEnabledStateOutput {
	return o
}

func (o BackendEnabledStateOutput) ToBackendEnabledStateOutputWithContext(ctx context.Context) BackendEnabledStateOutput {
	return o
}

func (o BackendEnabledStateOutput) ToBackendEnabledStatePtrOutput() BackendEnabledStatePtrOutput {
	return o.ToBackendEnabledStatePtrOutputWithContext(context.Background())
}

func (o BackendEnabledStateOutput) ToBackendEnabledStatePtrOutputWithContext(ctx context.Context) BackendEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendEnabledState) *BackendEnabledState {
		return &v
	}).(BackendEnabledStatePtrOutput)
}

func (o BackendEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BackendEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackendEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BackendEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackendEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackendEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BackendEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (BackendEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendEnabledState)(nil)).Elem()
}

func (o BackendEnabledStatePtrOutput) ToBackendEnabledStatePtrOutput() BackendEnabledStatePtrOutput {
	return o
}

func (o BackendEnabledStatePtrOutput) ToBackendEnabledStatePtrOutputWithContext(ctx context.Context) BackendEnabledStatePtrOutput {
	return o
}

func (o BackendEnabledStatePtrOutput) Elem() BackendEnabledStateOutput {
	return o.ApplyT(func(v *BackendEnabledState) BackendEnabledState {
		if v != nil {
			return *v
		}
		var ret BackendEnabledState
		return ret
	}).(BackendEnabledStateOutput)
}

func (o BackendEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackendEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BackendEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BackendEnabledStateInput is an input type that accepts values of the BackendEnabledState enum
// A concrete instance of `BackendEnabledStateInput` can be one of the following:
//
//	BackendEnabledStateEnabled
//	BackendEnabledStateDisabled
type BackendEnabledStateInput interface {
	pulumi.Input

	ToBackendEnabledStateOutput() BackendEnabledStateOutput
	ToBackendEnabledStateOutputWithContext(context.Context) BackendEnabledStateOutput
}

var backendEnabledStatePtrType = reflect.TypeOf((**BackendEnabledState)(nil)).Elem()

type BackendEnabledStatePtrInput interface {
	pulumi.Input

	ToBackendEnabledStatePtrOutput() BackendEnabledStatePtrOutput
	ToBackendEnabledStatePtrOutputWithContext(context.Context) BackendEnabledStatePtrOutput
}

type backendEnabledStatePtr string

func BackendEnabledStatePtr(v string) BackendEnabledStatePtrInput {
	return (*backendEnabledStatePtr)(&v)
}

func (*backendEnabledStatePtr) ElementType() reflect.Type {
	return backendEnabledStatePtrType
}

func (in *backendEnabledStatePtr) ToBackendEnabledStatePtrOutput() BackendEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(BackendEnabledStatePtrOutput)
}

func (in *backendEnabledStatePtr) ToBackendEnabledStatePtrOutputWithContext(ctx context.Context) BackendEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BackendEnabledStatePtrOutput)
}

func (in *backendEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*BackendEnabledState] {
	return pulumix.Output[*BackendEnabledState]{
		OutputState: in.ToBackendEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
type CustomRuleEnabledState string

const (
	CustomRuleEnabledStateDisabled = CustomRuleEnabledState("Disabled")
	CustomRuleEnabledStateEnabled  = CustomRuleEnabledState("Enabled")
)

func (CustomRuleEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRuleEnabledState)(nil)).Elem()
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStateOutput() CustomRuleEnabledStateOutput {
	return pulumi.ToOutput(e).(CustomRuleEnabledStateOutput)
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStateOutputWithContext(ctx context.Context) CustomRuleEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CustomRuleEnabledStateOutput)
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return e.ToCustomRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (e CustomRuleEnabledState) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return CustomRuleEnabledState(e).ToCustomRuleEnabledStateOutputWithContext(ctx).ToCustomRuleEnabledStatePtrOutputWithContext(ctx)
}

func (e CustomRuleEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CustomRuleEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CustomRuleEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CustomRuleEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CustomRuleEnabledStateOutput struct{ *pulumi.OutputState }

func (CustomRuleEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRuleEnabledState)(nil)).Elem()
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStateOutput() CustomRuleEnabledStateOutput {
	return o
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStateOutputWithContext(ctx context.Context) CustomRuleEnabledStateOutput {
	return o
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return o.ToCustomRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStateOutput) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomRuleEnabledState) *CustomRuleEnabledState {
		return &v
	}).(CustomRuleEnabledStatePtrOutput)
}

func (o CustomRuleEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CustomRuleEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CustomRuleEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CustomRuleEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CustomRuleEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (CustomRuleEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomRuleEnabledState)(nil)).Elem()
}

func (o CustomRuleEnabledStatePtrOutput) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return o
}

func (o CustomRuleEnabledStatePtrOutput) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return o
}

func (o CustomRuleEnabledStatePtrOutput) Elem() CustomRuleEnabledStateOutput {
	return o.ApplyT(func(v *CustomRuleEnabledState) CustomRuleEnabledState {
		if v != nil {
			return *v
		}
		var ret CustomRuleEnabledState
		return ret
	}).(CustomRuleEnabledStateOutput)
}

func (o CustomRuleEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CustomRuleEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CustomRuleEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CustomRuleEnabledStateInput is an input type that accepts values of the CustomRuleEnabledState enum
// A concrete instance of `CustomRuleEnabledStateInput` can be one of the following:
//
//	CustomRuleEnabledStateDisabled
//	CustomRuleEnabledStateEnabled
type CustomRuleEnabledStateInput interface {
	pulumi.Input

	ToCustomRuleEnabledStateOutput() CustomRuleEnabledStateOutput
	ToCustomRuleEnabledStateOutputWithContext(context.Context) CustomRuleEnabledStateOutput
}

var customRuleEnabledStatePtrType = reflect.TypeOf((**CustomRuleEnabledState)(nil)).Elem()

type CustomRuleEnabledStatePtrInput interface {
	pulumi.Input

	ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput
	ToCustomRuleEnabledStatePtrOutputWithContext(context.Context) CustomRuleEnabledStatePtrOutput
}

type customRuleEnabledStatePtr string

func CustomRuleEnabledStatePtr(v string) CustomRuleEnabledStatePtrInput {
	return (*customRuleEnabledStatePtr)(&v)
}

func (*customRuleEnabledStatePtr) ElementType() reflect.Type {
	return customRuleEnabledStatePtrType
}

func (in *customRuleEnabledStatePtr) ToCustomRuleEnabledStatePtrOutput() CustomRuleEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(CustomRuleEnabledStatePtrOutput)
}

func (in *customRuleEnabledStatePtr) ToCustomRuleEnabledStatePtrOutputWithContext(ctx context.Context) CustomRuleEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CustomRuleEnabledStatePtrOutput)
}

func (in *customRuleEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*CustomRuleEnabledState] {
	return pulumix.Output[*CustomRuleEnabledState]{
		OutputState: in.ToCustomRuleEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Whether to use dynamic compression for cached content
type DynamicCompressionEnabled string

const (
	DynamicCompressionEnabledEnabled  = DynamicCompressionEnabled("Enabled")
	DynamicCompressionEnabledDisabled = DynamicCompressionEnabled("Disabled")
)

func (DynamicCompressionEnabled) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicCompressionEnabled)(nil)).Elem()
}

func (e DynamicCompressionEnabled) ToDynamicCompressionEnabledOutput() DynamicCompressionEnabledOutput {
	return pulumi.ToOutput(e).(DynamicCompressionEnabledOutput)
}

func (e DynamicCompressionEnabled) ToDynamicCompressionEnabledOutputWithContext(ctx context.Context) DynamicCompressionEnabledOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DynamicCompressionEnabledOutput)
}

func (e DynamicCompressionEnabled) ToDynamicCompressionEnabledPtrOutput() DynamicCompressionEnabledPtrOutput {
	return e.ToDynamicCompressionEnabledPtrOutputWithContext(context.Background())
}

func (e DynamicCompressionEnabled) ToDynamicCompressionEnabledPtrOutputWithContext(ctx context.Context) DynamicCompressionEnabledPtrOutput {
	return DynamicCompressionEnabled(e).ToDynamicCompressionEnabledOutputWithContext(ctx).ToDynamicCompressionEnabledPtrOutputWithContext(ctx)
}

func (e DynamicCompressionEnabled) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicCompressionEnabled) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicCompressionEnabled) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DynamicCompressionEnabled) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DynamicCompressionEnabledOutput struct{ *pulumi.OutputState }

func (DynamicCompressionEnabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicCompressionEnabled)(nil)).Elem()
}

func (o DynamicCompressionEnabledOutput) ToDynamicCompressionEnabledOutput() DynamicCompressionEnabledOutput {
	return o
}

func (o DynamicCompressionEnabledOutput) ToDynamicCompressionEnabledOutputWithContext(ctx context.Context) DynamicCompressionEnabledOutput {
	return o
}

func (o DynamicCompressionEnabledOutput) ToDynamicCompressionEnabledPtrOutput() DynamicCompressionEnabledPtrOutput {
	return o.ToDynamicCompressionEnabledPtrOutputWithContext(context.Background())
}

func (o DynamicCompressionEnabledOutput) ToDynamicCompressionEnabledPtrOutputWithContext(ctx context.Context) DynamicCompressionEnabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DynamicCompressionEnabled) *DynamicCompressionEnabled {
		return &v
	}).(DynamicCompressionEnabledPtrOutput)
}

func (o DynamicCompressionEnabledOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DynamicCompressionEnabledOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicCompressionEnabled) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DynamicCompressionEnabledOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicCompressionEnabledOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicCompressionEnabled) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DynamicCompressionEnabledPtrOutput struct{ *pulumi.OutputState }

func (DynamicCompressionEnabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicCompressionEnabled)(nil)).Elem()
}

func (o DynamicCompressionEnabledPtrOutput) ToDynamicCompressionEnabledPtrOutput() DynamicCompressionEnabledPtrOutput {
	return o
}

func (o DynamicCompressionEnabledPtrOutput) ToDynamicCompressionEnabledPtrOutputWithContext(ctx context.Context) DynamicCompressionEnabledPtrOutput {
	return o
}

func (o DynamicCompressionEnabledPtrOutput) Elem() DynamicCompressionEnabledOutput {
	return o.ApplyT(func(v *DynamicCompressionEnabled) DynamicCompressionEnabled {
		if v != nil {
			return *v
		}
		var ret DynamicCompressionEnabled
		return ret
	}).(DynamicCompressionEnabledOutput)
}

func (o DynamicCompressionEnabledPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicCompressionEnabledPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DynamicCompressionEnabled) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DynamicCompressionEnabledInput is an input type that accepts values of the DynamicCompressionEnabled enum
// A concrete instance of `DynamicCompressionEnabledInput` can be one of the following:
//
//	DynamicCompressionEnabledEnabled
//	DynamicCompressionEnabledDisabled
type DynamicCompressionEnabledInput interface {
	pulumi.Input

	ToDynamicCompressionEnabledOutput() DynamicCompressionEnabledOutput
	ToDynamicCompressionEnabledOutputWithContext(context.Context) DynamicCompressionEnabledOutput
}

var dynamicCompressionEnabledPtrType = reflect.TypeOf((**DynamicCompressionEnabled)(nil)).Elem()

type DynamicCompressionEnabledPtrInput interface {
	pulumi.Input

	ToDynamicCompressionEnabledPtrOutput() DynamicCompressionEnabledPtrOutput
	ToDynamicCompressionEnabledPtrOutputWithContext(context.Context) DynamicCompressionEnabledPtrOutput
}

type dynamicCompressionEnabledPtr string

func DynamicCompressionEnabledPtr(v string) DynamicCompressionEnabledPtrInput {
	return (*dynamicCompressionEnabledPtr)(&v)
}

func (*dynamicCompressionEnabledPtr) ElementType() reflect.Type {
	return dynamicCompressionEnabledPtrType
}

func (in *dynamicCompressionEnabledPtr) ToDynamicCompressionEnabledPtrOutput() DynamicCompressionEnabledPtrOutput {
	return pulumi.ToOutput(in).(DynamicCompressionEnabledPtrOutput)
}

func (in *dynamicCompressionEnabledPtr) ToDynamicCompressionEnabledPtrOutputWithContext(ctx context.Context) DynamicCompressionEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DynamicCompressionEnabledPtrOutput)
}

func (in *dynamicCompressionEnabledPtr) ToOutput(ctx context.Context) pulumix.Output[*DynamicCompressionEnabled] {
	return pulumix.Output[*DynamicCompressionEnabled]{
		OutputState: in.ToDynamicCompressionEnabledPtrOutputWithContext(ctx).OutputState,
	}
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
type EnforceCertificateNameCheckEnabledState string

const (
	EnforceCertificateNameCheckEnabledStateEnabled  = EnforceCertificateNameCheckEnabledState("Enabled")
	EnforceCertificateNameCheckEnabledStateDisabled = EnforceCertificateNameCheckEnabledState("Disabled")
)

func (EnforceCertificateNameCheckEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*EnforceCertificateNameCheckEnabledState)(nil)).Elem()
}

func (e EnforceCertificateNameCheckEnabledState) ToEnforceCertificateNameCheckEnabledStateOutput() EnforceCertificateNameCheckEnabledStateOutput {
	return pulumi.ToOutput(e).(EnforceCertificateNameCheckEnabledStateOutput)
}

func (e EnforceCertificateNameCheckEnabledState) ToEnforceCertificateNameCheckEnabledStateOutputWithContext(ctx context.Context) EnforceCertificateNameCheckEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EnforceCertificateNameCheckEnabledStateOutput)
}

func (e EnforceCertificateNameCheckEnabledState) ToEnforceCertificateNameCheckEnabledStatePtrOutput() EnforceCertificateNameCheckEnabledStatePtrOutput {
	return e.ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(context.Background())
}

func (e EnforceCertificateNameCheckEnabledState) ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(ctx context.Context) EnforceCertificateNameCheckEnabledStatePtrOutput {
	return EnforceCertificateNameCheckEnabledState(e).ToEnforceCertificateNameCheckEnabledStateOutputWithContext(ctx).ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(ctx)
}

func (e EnforceCertificateNameCheckEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnforceCertificateNameCheckEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnforceCertificateNameCheckEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EnforceCertificateNameCheckEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EnforceCertificateNameCheckEnabledStateOutput struct{ *pulumi.OutputState }

func (EnforceCertificateNameCheckEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnforceCertificateNameCheckEnabledState)(nil)).Elem()
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToEnforceCertificateNameCheckEnabledStateOutput() EnforceCertificateNameCheckEnabledStateOutput {
	return o
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToEnforceCertificateNameCheckEnabledStateOutputWithContext(ctx context.Context) EnforceCertificateNameCheckEnabledStateOutput {
	return o
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToEnforceCertificateNameCheckEnabledStatePtrOutput() EnforceCertificateNameCheckEnabledStatePtrOutput {
	return o.ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(context.Background())
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(ctx context.Context) EnforceCertificateNameCheckEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnforceCertificateNameCheckEnabledState) *EnforceCertificateNameCheckEnabledState {
		return &v
	}).(EnforceCertificateNameCheckEnabledStatePtrOutput)
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnforceCertificateNameCheckEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnforceCertificateNameCheckEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnforceCertificateNameCheckEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EnforceCertificateNameCheckEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (EnforceCertificateNameCheckEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnforceCertificateNameCheckEnabledState)(nil)).Elem()
}

func (o EnforceCertificateNameCheckEnabledStatePtrOutput) ToEnforceCertificateNameCheckEnabledStatePtrOutput() EnforceCertificateNameCheckEnabledStatePtrOutput {
	return o
}

func (o EnforceCertificateNameCheckEnabledStatePtrOutput) ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(ctx context.Context) EnforceCertificateNameCheckEnabledStatePtrOutput {
	return o
}

func (o EnforceCertificateNameCheckEnabledStatePtrOutput) Elem() EnforceCertificateNameCheckEnabledStateOutput {
	return o.ApplyT(func(v *EnforceCertificateNameCheckEnabledState) EnforceCertificateNameCheckEnabledState {
		if v != nil {
			return *v
		}
		var ret EnforceCertificateNameCheckEnabledState
		return ret
	}).(EnforceCertificateNameCheckEnabledStateOutput)
}

func (o EnforceCertificateNameCheckEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnforceCertificateNameCheckEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EnforceCertificateNameCheckEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EnforceCertificateNameCheckEnabledStateInput is an input type that accepts values of the EnforceCertificateNameCheckEnabledState enum
// A concrete instance of `EnforceCertificateNameCheckEnabledStateInput` can be one of the following:
//
//	EnforceCertificateNameCheckEnabledStateEnabled
//	EnforceCertificateNameCheckEnabledStateDisabled
type EnforceCertificateNameCheckEnabledStateInput interface {
	pulumi.Input

	ToEnforceCertificateNameCheckEnabledStateOutput() EnforceCertificateNameCheckEnabledStateOutput
	ToEnforceCertificateNameCheckEnabledStateOutputWithContext(context.Context) EnforceCertificateNameCheckEnabledStateOutput
}

var enforceCertificateNameCheckEnabledStatePtrType = reflect.TypeOf((**EnforceCertificateNameCheckEnabledState)(nil)).Elem()

type EnforceCertificateNameCheckEnabledStatePtrInput interface {
	pulumi.Input

	ToEnforceCertificateNameCheckEnabledStatePtrOutput() EnforceCertificateNameCheckEnabledStatePtrOutput
	ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(context.Context) EnforceCertificateNameCheckEnabledStatePtrOutput
}

type enforceCertificateNameCheckEnabledStatePtr string

func EnforceCertificateNameCheckEnabledStatePtr(v string) EnforceCertificateNameCheckEnabledStatePtrInput {
	return (*enforceCertificateNameCheckEnabledStatePtr)(&v)
}

func (*enforceCertificateNameCheckEnabledStatePtr) ElementType() reflect.Type {
	return enforceCertificateNameCheckEnabledStatePtrType
}

func (in *enforceCertificateNameCheckEnabledStatePtr) ToEnforceCertificateNameCheckEnabledStatePtrOutput() EnforceCertificateNameCheckEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(EnforceCertificateNameCheckEnabledStatePtrOutput)
}

func (in *enforceCertificateNameCheckEnabledStatePtr) ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(ctx context.Context) EnforceCertificateNameCheckEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EnforceCertificateNameCheckEnabledStatePtrOutput)
}

func (in *enforceCertificateNameCheckEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*EnforceCertificateNameCheckEnabledState] {
	return pulumix.Output[*EnforceCertificateNameCheckEnabledState]{
		OutputState: in.ToEnforceCertificateNameCheckEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
type FrontDoorEnabledState string

const (
	FrontDoorEnabledStateEnabled  = FrontDoorEnabledState("Enabled")
	FrontDoorEnabledStateDisabled = FrontDoorEnabledState("Disabled")
)

func (FrontDoorEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorEnabledState)(nil)).Elem()
}

func (e FrontDoorEnabledState) ToFrontDoorEnabledStateOutput() FrontDoorEnabledStateOutput {
	return pulumi.ToOutput(e).(FrontDoorEnabledStateOutput)
}

func (e FrontDoorEnabledState) ToFrontDoorEnabledStateOutputWithContext(ctx context.Context) FrontDoorEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorEnabledStateOutput)
}

func (e FrontDoorEnabledState) ToFrontDoorEnabledStatePtrOutput() FrontDoorEnabledStatePtrOutput {
	return e.ToFrontDoorEnabledStatePtrOutputWithContext(context.Background())
}

func (e FrontDoorEnabledState) ToFrontDoorEnabledStatePtrOutputWithContext(ctx context.Context) FrontDoorEnabledStatePtrOutput {
	return FrontDoorEnabledState(e).ToFrontDoorEnabledStateOutputWithContext(ctx).ToFrontDoorEnabledStatePtrOutputWithContext(ctx)
}

func (e FrontDoorEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorEnabledStateOutput struct{ *pulumi.OutputState }

func (FrontDoorEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorEnabledState)(nil)).Elem()
}

func (o FrontDoorEnabledStateOutput) ToFrontDoorEnabledStateOutput() FrontDoorEnabledStateOutput {
	return o
}

func (o FrontDoorEnabledStateOutput) ToFrontDoorEnabledStateOutputWithContext(ctx context.Context) FrontDoorEnabledStateOutput {
	return o
}

func (o FrontDoorEnabledStateOutput) ToFrontDoorEnabledStatePtrOutput() FrontDoorEnabledStatePtrOutput {
	return o.ToFrontDoorEnabledStatePtrOutputWithContext(context.Background())
}

func (o FrontDoorEnabledStateOutput) ToFrontDoorEnabledStatePtrOutputWithContext(ctx context.Context) FrontDoorEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorEnabledState) *FrontDoorEnabledState {
		return &v
	}).(FrontDoorEnabledStatePtrOutput)
}

func (o FrontDoorEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (FrontDoorEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorEnabledState)(nil)).Elem()
}

func (o FrontDoorEnabledStatePtrOutput) ToFrontDoorEnabledStatePtrOutput() FrontDoorEnabledStatePtrOutput {
	return o
}

func (o FrontDoorEnabledStatePtrOutput) ToFrontDoorEnabledStatePtrOutputWithContext(ctx context.Context) FrontDoorEnabledStatePtrOutput {
	return o
}

func (o FrontDoorEnabledStatePtrOutput) Elem() FrontDoorEnabledStateOutput {
	return o.ApplyT(func(v *FrontDoorEnabledState) FrontDoorEnabledState {
		if v != nil {
			return *v
		}
		var ret FrontDoorEnabledState
		return ret
	}).(FrontDoorEnabledStateOutput)
}

func (o FrontDoorEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorEnabledStateInput is an input type that accepts values of the FrontDoorEnabledState enum
// A concrete instance of `FrontDoorEnabledStateInput` can be one of the following:
//
//	FrontDoorEnabledStateEnabled
//	FrontDoorEnabledStateDisabled
type FrontDoorEnabledStateInput interface {
	pulumi.Input

	ToFrontDoorEnabledStateOutput() FrontDoorEnabledStateOutput
	ToFrontDoorEnabledStateOutputWithContext(context.Context) FrontDoorEnabledStateOutput
}

var frontDoorEnabledStatePtrType = reflect.TypeOf((**FrontDoorEnabledState)(nil)).Elem()

type FrontDoorEnabledStatePtrInput interface {
	pulumi.Input

	ToFrontDoorEnabledStatePtrOutput() FrontDoorEnabledStatePtrOutput
	ToFrontDoorEnabledStatePtrOutputWithContext(context.Context) FrontDoorEnabledStatePtrOutput
}

type frontDoorEnabledStatePtr string

func FrontDoorEnabledStatePtr(v string) FrontDoorEnabledStatePtrInput {
	return (*frontDoorEnabledStatePtr)(&v)
}

func (*frontDoorEnabledStatePtr) ElementType() reflect.Type {
	return frontDoorEnabledStatePtrType
}

func (in *frontDoorEnabledStatePtr) ToFrontDoorEnabledStatePtrOutput() FrontDoorEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(FrontDoorEnabledStatePtrOutput)
}

func (in *frontDoorEnabledStatePtr) ToFrontDoorEnabledStatePtrOutputWithContext(ctx context.Context) FrontDoorEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorEnabledStatePtrOutput)
}

func (in *frontDoorEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorEnabledState] {
	return pulumix.Output[*FrontDoorEnabledState]{
		OutputState: in.ToFrontDoorEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Protocol this rule will use when forwarding traffic to backends.
type FrontDoorForwardingProtocol string

const (
	FrontDoorForwardingProtocolHttpOnly     = FrontDoorForwardingProtocol("HttpOnly")
	FrontDoorForwardingProtocolHttpsOnly    = FrontDoorForwardingProtocol("HttpsOnly")
	FrontDoorForwardingProtocolMatchRequest = FrontDoorForwardingProtocol("MatchRequest")
)

func (FrontDoorForwardingProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorForwardingProtocol)(nil)).Elem()
}

func (e FrontDoorForwardingProtocol) ToFrontDoorForwardingProtocolOutput() FrontDoorForwardingProtocolOutput {
	return pulumi.ToOutput(e).(FrontDoorForwardingProtocolOutput)
}

func (e FrontDoorForwardingProtocol) ToFrontDoorForwardingProtocolOutputWithContext(ctx context.Context) FrontDoorForwardingProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorForwardingProtocolOutput)
}

func (e FrontDoorForwardingProtocol) ToFrontDoorForwardingProtocolPtrOutput() FrontDoorForwardingProtocolPtrOutput {
	return e.ToFrontDoorForwardingProtocolPtrOutputWithContext(context.Background())
}

func (e FrontDoorForwardingProtocol) ToFrontDoorForwardingProtocolPtrOutputWithContext(ctx context.Context) FrontDoorForwardingProtocolPtrOutput {
	return FrontDoorForwardingProtocol(e).ToFrontDoorForwardingProtocolOutputWithContext(ctx).ToFrontDoorForwardingProtocolPtrOutputWithContext(ctx)
}

func (e FrontDoorForwardingProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorForwardingProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorForwardingProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorForwardingProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorForwardingProtocolOutput struct{ *pulumi.OutputState }

func (FrontDoorForwardingProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorForwardingProtocol)(nil)).Elem()
}

func (o FrontDoorForwardingProtocolOutput) ToFrontDoorForwardingProtocolOutput() FrontDoorForwardingProtocolOutput {
	return o
}

func (o FrontDoorForwardingProtocolOutput) ToFrontDoorForwardingProtocolOutputWithContext(ctx context.Context) FrontDoorForwardingProtocolOutput {
	return o
}

func (o FrontDoorForwardingProtocolOutput) ToFrontDoorForwardingProtocolPtrOutput() FrontDoorForwardingProtocolPtrOutput {
	return o.ToFrontDoorForwardingProtocolPtrOutputWithContext(context.Background())
}

func (o FrontDoorForwardingProtocolOutput) ToFrontDoorForwardingProtocolPtrOutputWithContext(ctx context.Context) FrontDoorForwardingProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorForwardingProtocol) *FrontDoorForwardingProtocol {
		return &v
	}).(FrontDoorForwardingProtocolPtrOutput)
}

func (o FrontDoorForwardingProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorForwardingProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorForwardingProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorForwardingProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorForwardingProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorForwardingProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorForwardingProtocolPtrOutput struct{ *pulumi.OutputState }

func (FrontDoorForwardingProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorForwardingProtocol)(nil)).Elem()
}

func (o FrontDoorForwardingProtocolPtrOutput) ToFrontDoorForwardingProtocolPtrOutput() FrontDoorForwardingProtocolPtrOutput {
	return o
}

func (o FrontDoorForwardingProtocolPtrOutput) ToFrontDoorForwardingProtocolPtrOutputWithContext(ctx context.Context) FrontDoorForwardingProtocolPtrOutput {
	return o
}

func (o FrontDoorForwardingProtocolPtrOutput) Elem() FrontDoorForwardingProtocolOutput {
	return o.ApplyT(func(v *FrontDoorForwardingProtocol) FrontDoorForwardingProtocol {
		if v != nil {
			return *v
		}
		var ret FrontDoorForwardingProtocol
		return ret
	}).(FrontDoorForwardingProtocolOutput)
}

func (o FrontDoorForwardingProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorForwardingProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorForwardingProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorForwardingProtocolInput is an input type that accepts values of the FrontDoorForwardingProtocol enum
// A concrete instance of `FrontDoorForwardingProtocolInput` can be one of the following:
//
//	FrontDoorForwardingProtocolHttpOnly
//	FrontDoorForwardingProtocolHttpsOnly
//	FrontDoorForwardingProtocolMatchRequest
type FrontDoorForwardingProtocolInput interface {
	pulumi.Input

	ToFrontDoorForwardingProtocolOutput() FrontDoorForwardingProtocolOutput
	ToFrontDoorForwardingProtocolOutputWithContext(context.Context) FrontDoorForwardingProtocolOutput
}

var frontDoorForwardingProtocolPtrType = reflect.TypeOf((**FrontDoorForwardingProtocol)(nil)).Elem()

type FrontDoorForwardingProtocolPtrInput interface {
	pulumi.Input

	ToFrontDoorForwardingProtocolPtrOutput() FrontDoorForwardingProtocolPtrOutput
	ToFrontDoorForwardingProtocolPtrOutputWithContext(context.Context) FrontDoorForwardingProtocolPtrOutput
}

type frontDoorForwardingProtocolPtr string

func FrontDoorForwardingProtocolPtr(v string) FrontDoorForwardingProtocolPtrInput {
	return (*frontDoorForwardingProtocolPtr)(&v)
}

func (*frontDoorForwardingProtocolPtr) ElementType() reflect.Type {
	return frontDoorForwardingProtocolPtrType
}

func (in *frontDoorForwardingProtocolPtr) ToFrontDoorForwardingProtocolPtrOutput() FrontDoorForwardingProtocolPtrOutput {
	return pulumi.ToOutput(in).(FrontDoorForwardingProtocolPtrOutput)
}

func (in *frontDoorForwardingProtocolPtr) ToFrontDoorForwardingProtocolPtrOutputWithContext(ctx context.Context) FrontDoorForwardingProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorForwardingProtocolPtrOutput)
}

func (in *frontDoorForwardingProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorForwardingProtocol] {
	return pulumix.Output[*FrontDoorForwardingProtocol]{
		OutputState: in.ToFrontDoorForwardingProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// Configures which HTTP method to use to probe the backends defined under backendPools.
type FrontDoorHealthProbeMethod string

const (
	FrontDoorHealthProbeMethodGET  = FrontDoorHealthProbeMethod("GET")
	FrontDoorHealthProbeMethodHEAD = FrontDoorHealthProbeMethod("HEAD")
)

func (FrontDoorHealthProbeMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorHealthProbeMethod)(nil)).Elem()
}

func (e FrontDoorHealthProbeMethod) ToFrontDoorHealthProbeMethodOutput() FrontDoorHealthProbeMethodOutput {
	return pulumi.ToOutput(e).(FrontDoorHealthProbeMethodOutput)
}

func (e FrontDoorHealthProbeMethod) ToFrontDoorHealthProbeMethodOutputWithContext(ctx context.Context) FrontDoorHealthProbeMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorHealthProbeMethodOutput)
}

func (e FrontDoorHealthProbeMethod) ToFrontDoorHealthProbeMethodPtrOutput() FrontDoorHealthProbeMethodPtrOutput {
	return e.ToFrontDoorHealthProbeMethodPtrOutputWithContext(context.Background())
}

func (e FrontDoorHealthProbeMethod) ToFrontDoorHealthProbeMethodPtrOutputWithContext(ctx context.Context) FrontDoorHealthProbeMethodPtrOutput {
	return FrontDoorHealthProbeMethod(e).ToFrontDoorHealthProbeMethodOutputWithContext(ctx).ToFrontDoorHealthProbeMethodPtrOutputWithContext(ctx)
}

func (e FrontDoorHealthProbeMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorHealthProbeMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorHealthProbeMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorHealthProbeMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorHealthProbeMethodOutput struct{ *pulumi.OutputState }

func (FrontDoorHealthProbeMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorHealthProbeMethod)(nil)).Elem()
}

func (o FrontDoorHealthProbeMethodOutput) ToFrontDoorHealthProbeMethodOutput() FrontDoorHealthProbeMethodOutput {
	return o
}

func (o FrontDoorHealthProbeMethodOutput) ToFrontDoorHealthProbeMethodOutputWithContext(ctx context.Context) FrontDoorHealthProbeMethodOutput {
	return o
}

func (o FrontDoorHealthProbeMethodOutput) ToFrontDoorHealthProbeMethodPtrOutput() FrontDoorHealthProbeMethodPtrOutput {
	return o.ToFrontDoorHealthProbeMethodPtrOutputWithContext(context.Background())
}

func (o FrontDoorHealthProbeMethodOutput) ToFrontDoorHealthProbeMethodPtrOutputWithContext(ctx context.Context) FrontDoorHealthProbeMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorHealthProbeMethod) *FrontDoorHealthProbeMethod {
		return &v
	}).(FrontDoorHealthProbeMethodPtrOutput)
}

func (o FrontDoorHealthProbeMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorHealthProbeMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorHealthProbeMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorHealthProbeMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorHealthProbeMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorHealthProbeMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorHealthProbeMethodPtrOutput struct{ *pulumi.OutputState }

func (FrontDoorHealthProbeMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorHealthProbeMethod)(nil)).Elem()
}

func (o FrontDoorHealthProbeMethodPtrOutput) ToFrontDoorHealthProbeMethodPtrOutput() FrontDoorHealthProbeMethodPtrOutput {
	return o
}

func (o FrontDoorHealthProbeMethodPtrOutput) ToFrontDoorHealthProbeMethodPtrOutputWithContext(ctx context.Context) FrontDoorHealthProbeMethodPtrOutput {
	return o
}

func (o FrontDoorHealthProbeMethodPtrOutput) Elem() FrontDoorHealthProbeMethodOutput {
	return o.ApplyT(func(v *FrontDoorHealthProbeMethod) FrontDoorHealthProbeMethod {
		if v != nil {
			return *v
		}
		var ret FrontDoorHealthProbeMethod
		return ret
	}).(FrontDoorHealthProbeMethodOutput)
}

func (o FrontDoorHealthProbeMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorHealthProbeMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorHealthProbeMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorHealthProbeMethodInput is an input type that accepts values of the FrontDoorHealthProbeMethod enum
// A concrete instance of `FrontDoorHealthProbeMethodInput` can be one of the following:
//
//	FrontDoorHealthProbeMethodGET
//	FrontDoorHealthProbeMethodHEAD
type FrontDoorHealthProbeMethodInput interface {
	pulumi.Input

	ToFrontDoorHealthProbeMethodOutput() FrontDoorHealthProbeMethodOutput
	ToFrontDoorHealthProbeMethodOutputWithContext(context.Context) FrontDoorHealthProbeMethodOutput
}

var frontDoorHealthProbeMethodPtrType = reflect.TypeOf((**FrontDoorHealthProbeMethod)(nil)).Elem()

type FrontDoorHealthProbeMethodPtrInput interface {
	pulumi.Input

	ToFrontDoorHealthProbeMethodPtrOutput() FrontDoorHealthProbeMethodPtrOutput
	ToFrontDoorHealthProbeMethodPtrOutputWithContext(context.Context) FrontDoorHealthProbeMethodPtrOutput
}

type frontDoorHealthProbeMethodPtr string

func FrontDoorHealthProbeMethodPtr(v string) FrontDoorHealthProbeMethodPtrInput {
	return (*frontDoorHealthProbeMethodPtr)(&v)
}

func (*frontDoorHealthProbeMethodPtr) ElementType() reflect.Type {
	return frontDoorHealthProbeMethodPtrType
}

func (in *frontDoorHealthProbeMethodPtr) ToFrontDoorHealthProbeMethodPtrOutput() FrontDoorHealthProbeMethodPtrOutput {
	return pulumi.ToOutput(in).(FrontDoorHealthProbeMethodPtrOutput)
}

func (in *frontDoorHealthProbeMethodPtr) ToFrontDoorHealthProbeMethodPtrOutputWithContext(ctx context.Context) FrontDoorHealthProbeMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorHealthProbeMethodPtrOutput)
}

func (in *frontDoorHealthProbeMethodPtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorHealthProbeMethod] {
	return pulumix.Output[*FrontDoorHealthProbeMethod]{
		OutputState: in.ToFrontDoorHealthProbeMethodPtrOutputWithContext(ctx).OutputState,
	}
}

// Request variable to compare with.
type FrontDoorMatchVariable string

const (
	FrontDoorMatchVariableRemoteAddr    = FrontDoorMatchVariable("RemoteAddr")
	FrontDoorMatchVariableRequestMethod = FrontDoorMatchVariable("RequestMethod")
	FrontDoorMatchVariableQueryString   = FrontDoorMatchVariable("QueryString")
	FrontDoorMatchVariablePostArgs      = FrontDoorMatchVariable("PostArgs")
	FrontDoorMatchVariableRequestUri    = FrontDoorMatchVariable("RequestUri")
	FrontDoorMatchVariableRequestHeader = FrontDoorMatchVariable("RequestHeader")
	FrontDoorMatchVariableRequestBody   = FrontDoorMatchVariable("RequestBody")
	FrontDoorMatchVariableCookies       = FrontDoorMatchVariable("Cookies")
	FrontDoorMatchVariableSocketAddr    = FrontDoorMatchVariable("SocketAddr")
)

func (FrontDoorMatchVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorMatchVariable)(nil)).Elem()
}

func (e FrontDoorMatchVariable) ToFrontDoorMatchVariableOutput() FrontDoorMatchVariableOutput {
	return pulumi.ToOutput(e).(FrontDoorMatchVariableOutput)
}

func (e FrontDoorMatchVariable) ToFrontDoorMatchVariableOutputWithContext(ctx context.Context) FrontDoorMatchVariableOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorMatchVariableOutput)
}

func (e FrontDoorMatchVariable) ToFrontDoorMatchVariablePtrOutput() FrontDoorMatchVariablePtrOutput {
	return e.ToFrontDoorMatchVariablePtrOutputWithContext(context.Background())
}

func (e FrontDoorMatchVariable) ToFrontDoorMatchVariablePtrOutputWithContext(ctx context.Context) FrontDoorMatchVariablePtrOutput {
	return FrontDoorMatchVariable(e).ToFrontDoorMatchVariableOutputWithContext(ctx).ToFrontDoorMatchVariablePtrOutputWithContext(ctx)
}

func (e FrontDoorMatchVariable) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorMatchVariable) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorMatchVariable) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorMatchVariable) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorMatchVariableOutput struct{ *pulumi.OutputState }

func (FrontDoorMatchVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorMatchVariable)(nil)).Elem()
}

func (o FrontDoorMatchVariableOutput) ToFrontDoorMatchVariableOutput() FrontDoorMatchVariableOutput {
	return o
}

func (o FrontDoorMatchVariableOutput) ToFrontDoorMatchVariableOutputWithContext(ctx context.Context) FrontDoorMatchVariableOutput {
	return o
}

func (o FrontDoorMatchVariableOutput) ToFrontDoorMatchVariablePtrOutput() FrontDoorMatchVariablePtrOutput {
	return o.ToFrontDoorMatchVariablePtrOutputWithContext(context.Background())
}

func (o FrontDoorMatchVariableOutput) ToFrontDoorMatchVariablePtrOutputWithContext(ctx context.Context) FrontDoorMatchVariablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorMatchVariable) *FrontDoorMatchVariable {
		return &v
	}).(FrontDoorMatchVariablePtrOutput)
}

func (o FrontDoorMatchVariableOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorMatchVariableOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorMatchVariable) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorMatchVariableOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorMatchVariableOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorMatchVariable) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorMatchVariablePtrOutput struct{ *pulumi.OutputState }

func (FrontDoorMatchVariablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorMatchVariable)(nil)).Elem()
}

func (o FrontDoorMatchVariablePtrOutput) ToFrontDoorMatchVariablePtrOutput() FrontDoorMatchVariablePtrOutput {
	return o
}

func (o FrontDoorMatchVariablePtrOutput) ToFrontDoorMatchVariablePtrOutputWithContext(ctx context.Context) FrontDoorMatchVariablePtrOutput {
	return o
}

func (o FrontDoorMatchVariablePtrOutput) Elem() FrontDoorMatchVariableOutput {
	return o.ApplyT(func(v *FrontDoorMatchVariable) FrontDoorMatchVariable {
		if v != nil {
			return *v
		}
		var ret FrontDoorMatchVariable
		return ret
	}).(FrontDoorMatchVariableOutput)
}

func (o FrontDoorMatchVariablePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorMatchVariablePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorMatchVariable) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorMatchVariableInput is an input type that accepts values of the FrontDoorMatchVariable enum
// A concrete instance of `FrontDoorMatchVariableInput` can be one of the following:
//
//	FrontDoorMatchVariableRemoteAddr
//	FrontDoorMatchVariableRequestMethod
//	FrontDoorMatchVariableQueryString
//	FrontDoorMatchVariablePostArgs
//	FrontDoorMatchVariableRequestUri
//	FrontDoorMatchVariableRequestHeader
//	FrontDoorMatchVariableRequestBody
//	FrontDoorMatchVariableCookies
//	FrontDoorMatchVariableSocketAddr
type FrontDoorMatchVariableInput interface {
	pulumi.Input

	ToFrontDoorMatchVariableOutput() FrontDoorMatchVariableOutput
	ToFrontDoorMatchVariableOutputWithContext(context.Context) FrontDoorMatchVariableOutput
}

var frontDoorMatchVariablePtrType = reflect.TypeOf((**FrontDoorMatchVariable)(nil)).Elem()

type FrontDoorMatchVariablePtrInput interface {
	pulumi.Input

	ToFrontDoorMatchVariablePtrOutput() FrontDoorMatchVariablePtrOutput
	ToFrontDoorMatchVariablePtrOutputWithContext(context.Context) FrontDoorMatchVariablePtrOutput
}

type frontDoorMatchVariablePtr string

func FrontDoorMatchVariablePtr(v string) FrontDoorMatchVariablePtrInput {
	return (*frontDoorMatchVariablePtr)(&v)
}

func (*frontDoorMatchVariablePtr) ElementType() reflect.Type {
	return frontDoorMatchVariablePtrType
}

func (in *frontDoorMatchVariablePtr) ToFrontDoorMatchVariablePtrOutput() FrontDoorMatchVariablePtrOutput {
	return pulumi.ToOutput(in).(FrontDoorMatchVariablePtrOutput)
}

func (in *frontDoorMatchVariablePtr) ToFrontDoorMatchVariablePtrOutputWithContext(ctx context.Context) FrontDoorMatchVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorMatchVariablePtrOutput)
}

func (in *frontDoorMatchVariablePtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorMatchVariable] {
	return pulumix.Output[*FrontDoorMatchVariable]{
		OutputState: in.ToFrontDoorMatchVariablePtrOutputWithContext(ctx).OutputState,
	}
}

// Accepted protocol schemes.
type FrontDoorProtocol string

const (
	FrontDoorProtocolHttp  = FrontDoorProtocol("Http")
	FrontDoorProtocolHttps = FrontDoorProtocol("Https")
)

func (FrontDoorProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorProtocol)(nil)).Elem()
}

func (e FrontDoorProtocol) ToFrontDoorProtocolOutput() FrontDoorProtocolOutput {
	return pulumi.ToOutput(e).(FrontDoorProtocolOutput)
}

func (e FrontDoorProtocol) ToFrontDoorProtocolOutputWithContext(ctx context.Context) FrontDoorProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorProtocolOutput)
}

func (e FrontDoorProtocol) ToFrontDoorProtocolPtrOutput() FrontDoorProtocolPtrOutput {
	return e.ToFrontDoorProtocolPtrOutputWithContext(context.Background())
}

func (e FrontDoorProtocol) ToFrontDoorProtocolPtrOutputWithContext(ctx context.Context) FrontDoorProtocolPtrOutput {
	return FrontDoorProtocol(e).ToFrontDoorProtocolOutputWithContext(ctx).ToFrontDoorProtocolPtrOutputWithContext(ctx)
}

func (e FrontDoorProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorProtocolOutput struct{ *pulumi.OutputState }

func (FrontDoorProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorProtocol)(nil)).Elem()
}

func (o FrontDoorProtocolOutput) ToFrontDoorProtocolOutput() FrontDoorProtocolOutput {
	return o
}

func (o FrontDoorProtocolOutput) ToFrontDoorProtocolOutputWithContext(ctx context.Context) FrontDoorProtocolOutput {
	return o
}

func (o FrontDoorProtocolOutput) ToFrontDoorProtocolPtrOutput() FrontDoorProtocolPtrOutput {
	return o.ToFrontDoorProtocolPtrOutputWithContext(context.Background())
}

func (o FrontDoorProtocolOutput) ToFrontDoorProtocolPtrOutputWithContext(ctx context.Context) FrontDoorProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorProtocol) *FrontDoorProtocol {
		return &v
	}).(FrontDoorProtocolPtrOutput)
}

func (o FrontDoorProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorProtocolPtrOutput struct{ *pulumi.OutputState }

func (FrontDoorProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorProtocol)(nil)).Elem()
}

func (o FrontDoorProtocolPtrOutput) ToFrontDoorProtocolPtrOutput() FrontDoorProtocolPtrOutput {
	return o
}

func (o FrontDoorProtocolPtrOutput) ToFrontDoorProtocolPtrOutputWithContext(ctx context.Context) FrontDoorProtocolPtrOutput {
	return o
}

func (o FrontDoorProtocolPtrOutput) Elem() FrontDoorProtocolOutput {
	return o.ApplyT(func(v *FrontDoorProtocol) FrontDoorProtocol {
		if v != nil {
			return *v
		}
		var ret FrontDoorProtocol
		return ret
	}).(FrontDoorProtocolOutput)
}

func (o FrontDoorProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorProtocolInput is an input type that accepts values of the FrontDoorProtocol enum
// A concrete instance of `FrontDoorProtocolInput` can be one of the following:
//
//	FrontDoorProtocolHttp
//	FrontDoorProtocolHttps
type FrontDoorProtocolInput interface {
	pulumi.Input

	ToFrontDoorProtocolOutput() FrontDoorProtocolOutput
	ToFrontDoorProtocolOutputWithContext(context.Context) FrontDoorProtocolOutput
}

var frontDoorProtocolPtrType = reflect.TypeOf((**FrontDoorProtocol)(nil)).Elem()

type FrontDoorProtocolPtrInput interface {
	pulumi.Input

	ToFrontDoorProtocolPtrOutput() FrontDoorProtocolPtrOutput
	ToFrontDoorProtocolPtrOutputWithContext(context.Context) FrontDoorProtocolPtrOutput
}

type frontDoorProtocolPtr string

func FrontDoorProtocolPtr(v string) FrontDoorProtocolPtrInput {
	return (*frontDoorProtocolPtr)(&v)
}

func (*frontDoorProtocolPtr) ElementType() reflect.Type {
	return frontDoorProtocolPtrType
}

func (in *frontDoorProtocolPtr) ToFrontDoorProtocolPtrOutput() FrontDoorProtocolPtrOutput {
	return pulumi.ToOutput(in).(FrontDoorProtocolPtrOutput)
}

func (in *frontDoorProtocolPtr) ToFrontDoorProtocolPtrOutputWithContext(ctx context.Context) FrontDoorProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorProtocolPtrOutput)
}

func (in *frontDoorProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorProtocol] {
	return pulumix.Output[*FrontDoorProtocol]{
		OutputState: in.ToFrontDoorProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// Treatment of URL query terms when forming the cache key.
type FrontDoorQuery string

const (
	FrontDoorQueryStripNone      = FrontDoorQuery("StripNone")
	FrontDoorQueryStripAll       = FrontDoorQuery("StripAll")
	FrontDoorQueryStripOnly      = FrontDoorQuery("StripOnly")
	FrontDoorQueryStripAllExcept = FrontDoorQuery("StripAllExcept")
)

func (FrontDoorQuery) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorQuery)(nil)).Elem()
}

func (e FrontDoorQuery) ToFrontDoorQueryOutput() FrontDoorQueryOutput {
	return pulumi.ToOutput(e).(FrontDoorQueryOutput)
}

func (e FrontDoorQuery) ToFrontDoorQueryOutputWithContext(ctx context.Context) FrontDoorQueryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorQueryOutput)
}

func (e FrontDoorQuery) ToFrontDoorQueryPtrOutput() FrontDoorQueryPtrOutput {
	return e.ToFrontDoorQueryPtrOutputWithContext(context.Background())
}

func (e FrontDoorQuery) ToFrontDoorQueryPtrOutputWithContext(ctx context.Context) FrontDoorQueryPtrOutput {
	return FrontDoorQuery(e).ToFrontDoorQueryOutputWithContext(ctx).ToFrontDoorQueryPtrOutputWithContext(ctx)
}

func (e FrontDoorQuery) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorQuery) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorQuery) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorQuery) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorQueryOutput struct{ *pulumi.OutputState }

func (FrontDoorQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorQuery)(nil)).Elem()
}

func (o FrontDoorQueryOutput) ToFrontDoorQueryOutput() FrontDoorQueryOutput {
	return o
}

func (o FrontDoorQueryOutput) ToFrontDoorQueryOutputWithContext(ctx context.Context) FrontDoorQueryOutput {
	return o
}

func (o FrontDoorQueryOutput) ToFrontDoorQueryPtrOutput() FrontDoorQueryPtrOutput {
	return o.ToFrontDoorQueryPtrOutputWithContext(context.Background())
}

func (o FrontDoorQueryOutput) ToFrontDoorQueryPtrOutputWithContext(ctx context.Context) FrontDoorQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorQuery) *FrontDoorQuery {
		return &v
	}).(FrontDoorQueryPtrOutput)
}

func (o FrontDoorQueryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorQueryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorQuery) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorQueryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorQueryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorQuery) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorQueryPtrOutput struct{ *pulumi.OutputState }

func (FrontDoorQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorQuery)(nil)).Elem()
}

func (o FrontDoorQueryPtrOutput) ToFrontDoorQueryPtrOutput() FrontDoorQueryPtrOutput {
	return o
}

func (o FrontDoorQueryPtrOutput) ToFrontDoorQueryPtrOutputWithContext(ctx context.Context) FrontDoorQueryPtrOutput {
	return o
}

func (o FrontDoorQueryPtrOutput) Elem() FrontDoorQueryOutput {
	return o.ApplyT(func(v *FrontDoorQuery) FrontDoorQuery {
		if v != nil {
			return *v
		}
		var ret FrontDoorQuery
		return ret
	}).(FrontDoorQueryOutput)
}

func (o FrontDoorQueryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorQueryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorQuery) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorQueryInput is an input type that accepts values of the FrontDoorQuery enum
// A concrete instance of `FrontDoorQueryInput` can be one of the following:
//
//	FrontDoorQueryStripNone
//	FrontDoorQueryStripAll
//	FrontDoorQueryStripOnly
//	FrontDoorQueryStripAllExcept
type FrontDoorQueryInput interface {
	pulumi.Input

	ToFrontDoorQueryOutput() FrontDoorQueryOutput
	ToFrontDoorQueryOutputWithContext(context.Context) FrontDoorQueryOutput
}

var frontDoorQueryPtrType = reflect.TypeOf((**FrontDoorQuery)(nil)).Elem()

type FrontDoorQueryPtrInput interface {
	pulumi.Input

	ToFrontDoorQueryPtrOutput() FrontDoorQueryPtrOutput
	ToFrontDoorQueryPtrOutputWithContext(context.Context) FrontDoorQueryPtrOutput
}

type frontDoorQueryPtr string

func FrontDoorQueryPtr(v string) FrontDoorQueryPtrInput {
	return (*frontDoorQueryPtr)(&v)
}

func (*frontDoorQueryPtr) ElementType() reflect.Type {
	return frontDoorQueryPtrType
}

func (in *frontDoorQueryPtr) ToFrontDoorQueryPtrOutput() FrontDoorQueryPtrOutput {
	return pulumi.ToOutput(in).(FrontDoorQueryPtrOutput)
}

func (in *frontDoorQueryPtr) ToFrontDoorQueryPtrOutputWithContext(ctx context.Context) FrontDoorQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorQueryPtrOutput)
}

func (in *frontDoorQueryPtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorQuery] {
	return pulumix.Output[*FrontDoorQuery]{
		OutputState: in.ToFrontDoorQueryPtrOutputWithContext(ctx).OutputState,
	}
}

// The protocol of the destination to where the traffic is redirected
type FrontDoorRedirectProtocol string

const (
	FrontDoorRedirectProtocolHttpOnly     = FrontDoorRedirectProtocol("HttpOnly")
	FrontDoorRedirectProtocolHttpsOnly    = FrontDoorRedirectProtocol("HttpsOnly")
	FrontDoorRedirectProtocolMatchRequest = FrontDoorRedirectProtocol("MatchRequest")
)

func (FrontDoorRedirectProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorRedirectProtocol)(nil)).Elem()
}

func (e FrontDoorRedirectProtocol) ToFrontDoorRedirectProtocolOutput() FrontDoorRedirectProtocolOutput {
	return pulumi.ToOutput(e).(FrontDoorRedirectProtocolOutput)
}

func (e FrontDoorRedirectProtocol) ToFrontDoorRedirectProtocolOutputWithContext(ctx context.Context) FrontDoorRedirectProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorRedirectProtocolOutput)
}

func (e FrontDoorRedirectProtocol) ToFrontDoorRedirectProtocolPtrOutput() FrontDoorRedirectProtocolPtrOutput {
	return e.ToFrontDoorRedirectProtocolPtrOutputWithContext(context.Background())
}

func (e FrontDoorRedirectProtocol) ToFrontDoorRedirectProtocolPtrOutputWithContext(ctx context.Context) FrontDoorRedirectProtocolPtrOutput {
	return FrontDoorRedirectProtocol(e).ToFrontDoorRedirectProtocolOutputWithContext(ctx).ToFrontDoorRedirectProtocolPtrOutputWithContext(ctx)
}

func (e FrontDoorRedirectProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorRedirectProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorRedirectProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorRedirectProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorRedirectProtocolOutput struct{ *pulumi.OutputState }

func (FrontDoorRedirectProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorRedirectProtocol)(nil)).Elem()
}

func (o FrontDoorRedirectProtocolOutput) ToFrontDoorRedirectProtocolOutput() FrontDoorRedirectProtocolOutput {
	return o
}

func (o FrontDoorRedirectProtocolOutput) ToFrontDoorRedirectProtocolOutputWithContext(ctx context.Context) FrontDoorRedirectProtocolOutput {
	return o
}

func (o FrontDoorRedirectProtocolOutput) ToFrontDoorRedirectProtocolPtrOutput() FrontDoorRedirectProtocolPtrOutput {
	return o.ToFrontDoorRedirectProtocolPtrOutputWithContext(context.Background())
}

func (o FrontDoorRedirectProtocolOutput) ToFrontDoorRedirectProtocolPtrOutputWithContext(ctx context.Context) FrontDoorRedirectProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorRedirectProtocol) *FrontDoorRedirectProtocol {
		return &v
	}).(FrontDoorRedirectProtocolPtrOutput)
}

func (o FrontDoorRedirectProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorRedirectProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorRedirectProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorRedirectProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorRedirectProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorRedirectProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorRedirectProtocolPtrOutput struct{ *pulumi.OutputState }

func (FrontDoorRedirectProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorRedirectProtocol)(nil)).Elem()
}

func (o FrontDoorRedirectProtocolPtrOutput) ToFrontDoorRedirectProtocolPtrOutput() FrontDoorRedirectProtocolPtrOutput {
	return o
}

func (o FrontDoorRedirectProtocolPtrOutput) ToFrontDoorRedirectProtocolPtrOutputWithContext(ctx context.Context) FrontDoorRedirectProtocolPtrOutput {
	return o
}

func (o FrontDoorRedirectProtocolPtrOutput) Elem() FrontDoorRedirectProtocolOutput {
	return o.ApplyT(func(v *FrontDoorRedirectProtocol) FrontDoorRedirectProtocol {
		if v != nil {
			return *v
		}
		var ret FrontDoorRedirectProtocol
		return ret
	}).(FrontDoorRedirectProtocolOutput)
}

func (o FrontDoorRedirectProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorRedirectProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorRedirectProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorRedirectProtocolInput is an input type that accepts values of the FrontDoorRedirectProtocol enum
// A concrete instance of `FrontDoorRedirectProtocolInput` can be one of the following:
//
//	FrontDoorRedirectProtocolHttpOnly
//	FrontDoorRedirectProtocolHttpsOnly
//	FrontDoorRedirectProtocolMatchRequest
type FrontDoorRedirectProtocolInput interface {
	pulumi.Input

	ToFrontDoorRedirectProtocolOutput() FrontDoorRedirectProtocolOutput
	ToFrontDoorRedirectProtocolOutputWithContext(context.Context) FrontDoorRedirectProtocolOutput
}

var frontDoorRedirectProtocolPtrType = reflect.TypeOf((**FrontDoorRedirectProtocol)(nil)).Elem()

type FrontDoorRedirectProtocolPtrInput interface {
	pulumi.Input

	ToFrontDoorRedirectProtocolPtrOutput() FrontDoorRedirectProtocolPtrOutput
	ToFrontDoorRedirectProtocolPtrOutputWithContext(context.Context) FrontDoorRedirectProtocolPtrOutput
}

type frontDoorRedirectProtocolPtr string

func FrontDoorRedirectProtocolPtr(v string) FrontDoorRedirectProtocolPtrInput {
	return (*frontDoorRedirectProtocolPtr)(&v)
}

func (*frontDoorRedirectProtocolPtr) ElementType() reflect.Type {
	return frontDoorRedirectProtocolPtrType
}

func (in *frontDoorRedirectProtocolPtr) ToFrontDoorRedirectProtocolPtrOutput() FrontDoorRedirectProtocolPtrOutput {
	return pulumi.ToOutput(in).(FrontDoorRedirectProtocolPtrOutput)
}

func (in *frontDoorRedirectProtocolPtr) ToFrontDoorRedirectProtocolPtrOutputWithContext(ctx context.Context) FrontDoorRedirectProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorRedirectProtocolPtrOutput)
}

func (in *frontDoorRedirectProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorRedirectProtocol] {
	return pulumix.Output[*FrontDoorRedirectProtocol]{
		OutputState: in.ToFrontDoorRedirectProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// The redirect type the rule will use when redirecting traffic.
type FrontDoorRedirectType string

const (
	FrontDoorRedirectTypeMoved             = FrontDoorRedirectType("Moved")
	FrontDoorRedirectTypeFound             = FrontDoorRedirectType("Found")
	FrontDoorRedirectTypeTemporaryRedirect = FrontDoorRedirectType("TemporaryRedirect")
	FrontDoorRedirectTypePermanentRedirect = FrontDoorRedirectType("PermanentRedirect")
)

func (FrontDoorRedirectType) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorRedirectType)(nil)).Elem()
}

func (e FrontDoorRedirectType) ToFrontDoorRedirectTypeOutput() FrontDoorRedirectTypeOutput {
	return pulumi.ToOutput(e).(FrontDoorRedirectTypeOutput)
}

func (e FrontDoorRedirectType) ToFrontDoorRedirectTypeOutputWithContext(ctx context.Context) FrontDoorRedirectTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrontDoorRedirectTypeOutput)
}

func (e FrontDoorRedirectType) ToFrontDoorRedirectTypePtrOutput() FrontDoorRedirectTypePtrOutput {
	return e.ToFrontDoorRedirectTypePtrOutputWithContext(context.Background())
}

func (e FrontDoorRedirectType) ToFrontDoorRedirectTypePtrOutputWithContext(ctx context.Context) FrontDoorRedirectTypePtrOutput {
	return FrontDoorRedirectType(e).ToFrontDoorRedirectTypeOutputWithContext(ctx).ToFrontDoorRedirectTypePtrOutputWithContext(ctx)
}

func (e FrontDoorRedirectType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorRedirectType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrontDoorRedirectType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrontDoorRedirectType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrontDoorRedirectTypeOutput struct{ *pulumi.OutputState }

func (FrontDoorRedirectTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorRedirectType)(nil)).Elem()
}

func (o FrontDoorRedirectTypeOutput) ToFrontDoorRedirectTypeOutput() FrontDoorRedirectTypeOutput {
	return o
}

func (o FrontDoorRedirectTypeOutput) ToFrontDoorRedirectTypeOutputWithContext(ctx context.Context) FrontDoorRedirectTypeOutput {
	return o
}

func (o FrontDoorRedirectTypeOutput) ToFrontDoorRedirectTypePtrOutput() FrontDoorRedirectTypePtrOutput {
	return o.ToFrontDoorRedirectTypePtrOutputWithContext(context.Background())
}

func (o FrontDoorRedirectTypeOutput) ToFrontDoorRedirectTypePtrOutputWithContext(ctx context.Context) FrontDoorRedirectTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontDoorRedirectType) *FrontDoorRedirectType {
		return &v
	}).(FrontDoorRedirectTypePtrOutput)
}

func (o FrontDoorRedirectTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrontDoorRedirectTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorRedirectType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrontDoorRedirectTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorRedirectTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrontDoorRedirectType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrontDoorRedirectTypePtrOutput struct{ *pulumi.OutputState }

func (FrontDoorRedirectTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorRedirectType)(nil)).Elem()
}

func (o FrontDoorRedirectTypePtrOutput) ToFrontDoorRedirectTypePtrOutput() FrontDoorRedirectTypePtrOutput {
	return o
}

func (o FrontDoorRedirectTypePtrOutput) ToFrontDoorRedirectTypePtrOutputWithContext(ctx context.Context) FrontDoorRedirectTypePtrOutput {
	return o
}

func (o FrontDoorRedirectTypePtrOutput) Elem() FrontDoorRedirectTypeOutput {
	return o.ApplyT(func(v *FrontDoorRedirectType) FrontDoorRedirectType {
		if v != nil {
			return *v
		}
		var ret FrontDoorRedirectType
		return ret
	}).(FrontDoorRedirectTypeOutput)
}

func (o FrontDoorRedirectTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrontDoorRedirectTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrontDoorRedirectType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrontDoorRedirectTypeInput is an input type that accepts values of the FrontDoorRedirectType enum
// A concrete instance of `FrontDoorRedirectTypeInput` can be one of the following:
//
//	FrontDoorRedirectTypeMoved
//	FrontDoorRedirectTypeFound
//	FrontDoorRedirectTypeTemporaryRedirect
//	FrontDoorRedirectTypePermanentRedirect
type FrontDoorRedirectTypeInput interface {
	pulumi.Input

	ToFrontDoorRedirectTypeOutput() FrontDoorRedirectTypeOutput
	ToFrontDoorRedirectTypeOutputWithContext(context.Context) FrontDoorRedirectTypeOutput
}

var frontDoorRedirectTypePtrType = reflect.TypeOf((**FrontDoorRedirectType)(nil)).Elem()

type FrontDoorRedirectTypePtrInput interface {
	pulumi.Input

	ToFrontDoorRedirectTypePtrOutput() FrontDoorRedirectTypePtrOutput
	ToFrontDoorRedirectTypePtrOutputWithContext(context.Context) FrontDoorRedirectTypePtrOutput
}

type frontDoorRedirectTypePtr string

func FrontDoorRedirectTypePtr(v string) FrontDoorRedirectTypePtrInput {
	return (*frontDoorRedirectTypePtr)(&v)
}

func (*frontDoorRedirectTypePtr) ElementType() reflect.Type {
	return frontDoorRedirectTypePtrType
}

func (in *frontDoorRedirectTypePtr) ToFrontDoorRedirectTypePtrOutput() FrontDoorRedirectTypePtrOutput {
	return pulumi.ToOutput(in).(FrontDoorRedirectTypePtrOutput)
}

func (in *frontDoorRedirectTypePtr) ToFrontDoorRedirectTypePtrOutputWithContext(ctx context.Context) FrontDoorRedirectTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrontDoorRedirectTypePtrOutput)
}

func (in *frontDoorRedirectTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FrontDoorRedirectType] {
	return pulumix.Output[*FrontDoorRedirectType]{
		OutputState: in.ToFrontDoorRedirectTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Which type of manipulation to apply to the header.
type HeaderActionType string

const (
	HeaderActionTypeAppend    = HeaderActionType("Append")
	HeaderActionTypeDelete    = HeaderActionType("Delete")
	HeaderActionTypeOverwrite = HeaderActionType("Overwrite")
)

func (HeaderActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderActionType)(nil)).Elem()
}

func (e HeaderActionType) ToHeaderActionTypeOutput() HeaderActionTypeOutput {
	return pulumi.ToOutput(e).(HeaderActionTypeOutput)
}

func (e HeaderActionType) ToHeaderActionTypeOutputWithContext(ctx context.Context) HeaderActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HeaderActionTypeOutput)
}

func (e HeaderActionType) ToHeaderActionTypePtrOutput() HeaderActionTypePtrOutput {
	return e.ToHeaderActionTypePtrOutputWithContext(context.Background())
}

func (e HeaderActionType) ToHeaderActionTypePtrOutputWithContext(ctx context.Context) HeaderActionTypePtrOutput {
	return HeaderActionType(e).ToHeaderActionTypeOutputWithContext(ctx).ToHeaderActionTypePtrOutputWithContext(ctx)
}

func (e HeaderActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HeaderActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HeaderActionTypeOutput struct{ *pulumi.OutputState }

func (HeaderActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderActionType)(nil)).Elem()
}

func (o HeaderActionTypeOutput) ToHeaderActionTypeOutput() HeaderActionTypeOutput {
	return o
}

func (o HeaderActionTypeOutput) ToHeaderActionTypeOutputWithContext(ctx context.Context) HeaderActionTypeOutput {
	return o
}

func (o HeaderActionTypeOutput) ToHeaderActionTypePtrOutput() HeaderActionTypePtrOutput {
	return o.ToHeaderActionTypePtrOutputWithContext(context.Background())
}

func (o HeaderActionTypeOutput) ToHeaderActionTypePtrOutputWithContext(ctx context.Context) HeaderActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeaderActionType) *HeaderActionType {
		return &v
	}).(HeaderActionTypePtrOutput)
}

func (o HeaderActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HeaderActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HeaderActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HeaderActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HeaderActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HeaderActionTypePtrOutput struct{ *pulumi.OutputState }

func (HeaderActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeaderActionType)(nil)).Elem()
}

func (o HeaderActionTypePtrOutput) ToHeaderActionTypePtrOutput() HeaderActionTypePtrOutput {
	return o
}

func (o HeaderActionTypePtrOutput) ToHeaderActionTypePtrOutputWithContext(ctx context.Context) HeaderActionTypePtrOutput {
	return o
}

func (o HeaderActionTypePtrOutput) Elem() HeaderActionTypeOutput {
	return o.ApplyT(func(v *HeaderActionType) HeaderActionType {
		if v != nil {
			return *v
		}
		var ret HeaderActionType
		return ret
	}).(HeaderActionTypeOutput)
}

func (o HeaderActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HeaderActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HeaderActionTypeInput is an input type that accepts values of the HeaderActionType enum
// A concrete instance of `HeaderActionTypeInput` can be one of the following:
//
//	HeaderActionTypeAppend
//	HeaderActionTypeDelete
//	HeaderActionTypeOverwrite
type HeaderActionTypeInput interface {
	pulumi.Input

	ToHeaderActionTypeOutput() HeaderActionTypeOutput
	ToHeaderActionTypeOutputWithContext(context.Context) HeaderActionTypeOutput
}

var headerActionTypePtrType = reflect.TypeOf((**HeaderActionType)(nil)).Elem()

type HeaderActionTypePtrInput interface {
	pulumi.Input

	ToHeaderActionTypePtrOutput() HeaderActionTypePtrOutput
	ToHeaderActionTypePtrOutputWithContext(context.Context) HeaderActionTypePtrOutput
}

type headerActionTypePtr string

func HeaderActionTypePtr(v string) HeaderActionTypePtrInput {
	return (*headerActionTypePtr)(&v)
}

func (*headerActionTypePtr) ElementType() reflect.Type {
	return headerActionTypePtrType
}

func (in *headerActionTypePtr) ToHeaderActionTypePtrOutput() HeaderActionTypePtrOutput {
	return pulumi.ToOutput(in).(HeaderActionTypePtrOutput)
}

func (in *headerActionTypePtr) ToHeaderActionTypePtrOutputWithContext(ctx context.Context) HeaderActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HeaderActionTypePtrOutput)
}

func (in *headerActionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*HeaderActionType] {
	return pulumix.Output[*HeaderActionType]{
		OutputState: in.ToHeaderActionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
type HealthProbeEnabled string

const (
	HealthProbeEnabledEnabled  = HealthProbeEnabled("Enabled")
	HealthProbeEnabledDisabled = HealthProbeEnabled("Disabled")
)

func (HealthProbeEnabled) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeEnabled)(nil)).Elem()
}

func (e HealthProbeEnabled) ToHealthProbeEnabledOutput() HealthProbeEnabledOutput {
	return pulumi.ToOutput(e).(HealthProbeEnabledOutput)
}

func (e HealthProbeEnabled) ToHealthProbeEnabledOutputWithContext(ctx context.Context) HealthProbeEnabledOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HealthProbeEnabledOutput)
}

func (e HealthProbeEnabled) ToHealthProbeEnabledPtrOutput() HealthProbeEnabledPtrOutput {
	return e.ToHealthProbeEnabledPtrOutputWithContext(context.Background())
}

func (e HealthProbeEnabled) ToHealthProbeEnabledPtrOutputWithContext(ctx context.Context) HealthProbeEnabledPtrOutput {
	return HealthProbeEnabled(e).ToHealthProbeEnabledOutputWithContext(ctx).ToHealthProbeEnabledPtrOutputWithContext(ctx)
}

func (e HealthProbeEnabled) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeEnabled) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthProbeEnabled) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HealthProbeEnabled) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HealthProbeEnabledOutput struct{ *pulumi.OutputState }

func (HealthProbeEnabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeEnabled)(nil)).Elem()
}

func (o HealthProbeEnabledOutput) ToHealthProbeEnabledOutput() HealthProbeEnabledOutput {
	return o
}

func (o HealthProbeEnabledOutput) ToHealthProbeEnabledOutputWithContext(ctx context.Context) HealthProbeEnabledOutput {
	return o
}

func (o HealthProbeEnabledOutput) ToHealthProbeEnabledPtrOutput() HealthProbeEnabledPtrOutput {
	return o.ToHealthProbeEnabledPtrOutputWithContext(context.Background())
}

func (o HealthProbeEnabledOutput) ToHealthProbeEnabledPtrOutputWithContext(ctx context.Context) HealthProbeEnabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HealthProbeEnabled) *HealthProbeEnabled {
		return &v
	}).(HealthProbeEnabledPtrOutput)
}

func (o HealthProbeEnabledOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HealthProbeEnabledOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HealthProbeEnabled) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HealthProbeEnabledOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HealthProbeEnabledOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HealthProbeEnabled) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HealthProbeEnabledPtrOutput struct{ *pulumi.OutputState }

func (HealthProbeEnabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthProbeEnabled)(nil)).Elem()
}

func (o HealthProbeEnabledPtrOutput) ToHealthProbeEnabledPtrOutput() HealthProbeEnabledPtrOutput {
	return o
}

func (o HealthProbeEnabledPtrOutput) ToHealthProbeEnabledPtrOutputWithContext(ctx context.Context) HealthProbeEnabledPtrOutput {
	return o
}

func (o HealthProbeEnabledPtrOutput) Elem() HealthProbeEnabledOutput {
	return o.ApplyT(func(v *HealthProbeEnabled) HealthProbeEnabled {
		if v != nil {
			return *v
		}
		var ret HealthProbeEnabled
		return ret
	}).(HealthProbeEnabledOutput)
}

func (o HealthProbeEnabledPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HealthProbeEnabledPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HealthProbeEnabled) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HealthProbeEnabledInput is an input type that accepts values of the HealthProbeEnabled enum
// A concrete instance of `HealthProbeEnabledInput` can be one of the following:
//
//	HealthProbeEnabledEnabled
//	HealthProbeEnabledDisabled
type HealthProbeEnabledInput interface {
	pulumi.Input

	ToHealthProbeEnabledOutput() HealthProbeEnabledOutput
	ToHealthProbeEnabledOutputWithContext(context.Context) HealthProbeEnabledOutput
}

var healthProbeEnabledPtrType = reflect.TypeOf((**HealthProbeEnabled)(nil)).Elem()

type HealthProbeEnabledPtrInput interface {
	pulumi.Input

	ToHealthProbeEnabledPtrOutput() HealthProbeEnabledPtrOutput
	ToHealthProbeEnabledPtrOutputWithContext(context.Context) HealthProbeEnabledPtrOutput
}

type healthProbeEnabledPtr string

func HealthProbeEnabledPtr(v string) HealthProbeEnabledPtrInput {
	return (*healthProbeEnabledPtr)(&v)
}

func (*healthProbeEnabledPtr) ElementType() reflect.Type {
	return healthProbeEnabledPtrType
}

func (in *healthProbeEnabledPtr) ToHealthProbeEnabledPtrOutput() HealthProbeEnabledPtrOutput {
	return pulumi.ToOutput(in).(HealthProbeEnabledPtrOutput)
}

func (in *healthProbeEnabledPtr) ToHealthProbeEnabledPtrOutputWithContext(ctx context.Context) HealthProbeEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HealthProbeEnabledPtrOutput)
}

func (in *healthProbeEnabledPtr) ToOutput(ctx context.Context) pulumix.Output[*HealthProbeEnabled] {
	return pulumix.Output[*HealthProbeEnabled]{
		OutputState: in.ToHealthProbeEnabledPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
type ManagedRuleEnabledState string

const (
	ManagedRuleEnabledStateDisabled = ManagedRuleEnabledState("Disabled")
	ManagedRuleEnabledStateEnabled  = ManagedRuleEnabledState("Enabled")
)

func (ManagedRuleEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleEnabledState)(nil)).Elem()
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStateOutput() ManagedRuleEnabledStateOutput {
	return pulumi.ToOutput(e).(ManagedRuleEnabledStateOutput)
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStateOutputWithContext(ctx context.Context) ManagedRuleEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedRuleEnabledStateOutput)
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return e.ToManagedRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (e ManagedRuleEnabledState) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return ManagedRuleEnabledState(e).ToManagedRuleEnabledStateOutputWithContext(ctx).ToManagedRuleEnabledStatePtrOutputWithContext(ctx)
}

func (e ManagedRuleEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedRuleEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedRuleEnabledStateOutput struct{ *pulumi.OutputState }

func (ManagedRuleEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleEnabledState)(nil)).Elem()
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStateOutput() ManagedRuleEnabledStateOutput {
	return o
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStateOutputWithContext(ctx context.Context) ManagedRuleEnabledStateOutput {
	return o
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return o.ToManagedRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStateOutput) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRuleEnabledState) *ManagedRuleEnabledState {
		return &v
	}).(ManagedRuleEnabledStatePtrOutput)
}

func (o ManagedRuleEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedRuleEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedRuleEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (ManagedRuleEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRuleEnabledState)(nil)).Elem()
}

func (o ManagedRuleEnabledStatePtrOutput) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return o
}

func (o ManagedRuleEnabledStatePtrOutput) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return o
}

func (o ManagedRuleEnabledStatePtrOutput) Elem() ManagedRuleEnabledStateOutput {
	return o.ApplyT(func(v *ManagedRuleEnabledState) ManagedRuleEnabledState {
		if v != nil {
			return *v
		}
		var ret ManagedRuleEnabledState
		return ret
	}).(ManagedRuleEnabledStateOutput)
}

func (o ManagedRuleEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedRuleEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedRuleEnabledStateInput is an input type that accepts values of the ManagedRuleEnabledState enum
// A concrete instance of `ManagedRuleEnabledStateInput` can be one of the following:
//
//	ManagedRuleEnabledStateDisabled
//	ManagedRuleEnabledStateEnabled
type ManagedRuleEnabledStateInput interface {
	pulumi.Input

	ToManagedRuleEnabledStateOutput() ManagedRuleEnabledStateOutput
	ToManagedRuleEnabledStateOutputWithContext(context.Context) ManagedRuleEnabledStateOutput
}

var managedRuleEnabledStatePtrType = reflect.TypeOf((**ManagedRuleEnabledState)(nil)).Elem()

type ManagedRuleEnabledStatePtrInput interface {
	pulumi.Input

	ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput
	ToManagedRuleEnabledStatePtrOutputWithContext(context.Context) ManagedRuleEnabledStatePtrOutput
}

type managedRuleEnabledStatePtr string

func ManagedRuleEnabledStatePtr(v string) ManagedRuleEnabledStatePtrInput {
	return (*managedRuleEnabledStatePtr)(&v)
}

func (*managedRuleEnabledStatePtr) ElementType() reflect.Type {
	return managedRuleEnabledStatePtrType
}

func (in *managedRuleEnabledStatePtr) ToManagedRuleEnabledStatePtrOutput() ManagedRuleEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(ManagedRuleEnabledStatePtrOutput)
}

func (in *managedRuleEnabledStatePtr) ToManagedRuleEnabledStatePtrOutputWithContext(ctx context.Context) ManagedRuleEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedRuleEnabledStatePtrOutput)
}

func (in *managedRuleEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*ManagedRuleEnabledState] {
	return pulumix.Output[*ManagedRuleEnabledState]{
		OutputState: in.ToManagedRuleEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// The variable type to be excluded.
type ManagedRuleExclusionMatchVariable string

const (
	ManagedRuleExclusionMatchVariableRequestHeaderNames      = ManagedRuleExclusionMatchVariable("RequestHeaderNames")
	ManagedRuleExclusionMatchVariableRequestCookieNames      = ManagedRuleExclusionMatchVariable("RequestCookieNames")
	ManagedRuleExclusionMatchVariableQueryStringArgNames     = ManagedRuleExclusionMatchVariable("QueryStringArgNames")
	ManagedRuleExclusionMatchVariableRequestBodyPostArgNames = ManagedRuleExclusionMatchVariable("RequestBodyPostArgNames")
	ManagedRuleExclusionMatchVariableRequestBodyJsonArgNames = ManagedRuleExclusionMatchVariable("RequestBodyJsonArgNames")
)

func (ManagedRuleExclusionMatchVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleExclusionMatchVariable)(nil)).Elem()
}

func (e ManagedRuleExclusionMatchVariable) ToManagedRuleExclusionMatchVariableOutput() ManagedRuleExclusionMatchVariableOutput {
	return pulumi.ToOutput(e).(ManagedRuleExclusionMatchVariableOutput)
}

func (e ManagedRuleExclusionMatchVariable) ToManagedRuleExclusionMatchVariableOutputWithContext(ctx context.Context) ManagedRuleExclusionMatchVariableOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedRuleExclusionMatchVariableOutput)
}

func (e ManagedRuleExclusionMatchVariable) ToManagedRuleExclusionMatchVariablePtrOutput() ManagedRuleExclusionMatchVariablePtrOutput {
	return e.ToManagedRuleExclusionMatchVariablePtrOutputWithContext(context.Background())
}

func (e ManagedRuleExclusionMatchVariable) ToManagedRuleExclusionMatchVariablePtrOutputWithContext(ctx context.Context) ManagedRuleExclusionMatchVariablePtrOutput {
	return ManagedRuleExclusionMatchVariable(e).ToManagedRuleExclusionMatchVariableOutputWithContext(ctx).ToManagedRuleExclusionMatchVariablePtrOutputWithContext(ctx)
}

func (e ManagedRuleExclusionMatchVariable) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleExclusionMatchVariable) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleExclusionMatchVariable) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedRuleExclusionMatchVariable) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedRuleExclusionMatchVariableOutput struct{ *pulumi.OutputState }

func (ManagedRuleExclusionMatchVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleExclusionMatchVariable)(nil)).Elem()
}

func (o ManagedRuleExclusionMatchVariableOutput) ToManagedRuleExclusionMatchVariableOutput() ManagedRuleExclusionMatchVariableOutput {
	return o
}

func (o ManagedRuleExclusionMatchVariableOutput) ToManagedRuleExclusionMatchVariableOutputWithContext(ctx context.Context) ManagedRuleExclusionMatchVariableOutput {
	return o
}

func (o ManagedRuleExclusionMatchVariableOutput) ToManagedRuleExclusionMatchVariablePtrOutput() ManagedRuleExclusionMatchVariablePtrOutput {
	return o.ToManagedRuleExclusionMatchVariablePtrOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionMatchVariableOutput) ToManagedRuleExclusionMatchVariablePtrOutputWithContext(ctx context.Context) ManagedRuleExclusionMatchVariablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRuleExclusionMatchVariable) *ManagedRuleExclusionMatchVariable {
		return &v
	}).(ManagedRuleExclusionMatchVariablePtrOutput)
}

func (o ManagedRuleExclusionMatchVariableOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionMatchVariableOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleExclusionMatchVariable) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedRuleExclusionMatchVariableOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionMatchVariableOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleExclusionMatchVariable) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedRuleExclusionMatchVariablePtrOutput struct{ *pulumi.OutputState }

func (ManagedRuleExclusionMatchVariablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRuleExclusionMatchVariable)(nil)).Elem()
}

func (o ManagedRuleExclusionMatchVariablePtrOutput) ToManagedRuleExclusionMatchVariablePtrOutput() ManagedRuleExclusionMatchVariablePtrOutput {
	return o
}

func (o ManagedRuleExclusionMatchVariablePtrOutput) ToManagedRuleExclusionMatchVariablePtrOutputWithContext(ctx context.Context) ManagedRuleExclusionMatchVariablePtrOutput {
	return o
}

func (o ManagedRuleExclusionMatchVariablePtrOutput) Elem() ManagedRuleExclusionMatchVariableOutput {
	return o.ApplyT(func(v *ManagedRuleExclusionMatchVariable) ManagedRuleExclusionMatchVariable {
		if v != nil {
			return *v
		}
		var ret ManagedRuleExclusionMatchVariable
		return ret
	}).(ManagedRuleExclusionMatchVariableOutput)
}

func (o ManagedRuleExclusionMatchVariablePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionMatchVariablePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedRuleExclusionMatchVariable) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedRuleExclusionMatchVariableInput is an input type that accepts values of the ManagedRuleExclusionMatchVariable enum
// A concrete instance of `ManagedRuleExclusionMatchVariableInput` can be one of the following:
//
//	ManagedRuleExclusionMatchVariableRequestHeaderNames
//	ManagedRuleExclusionMatchVariableRequestCookieNames
//	ManagedRuleExclusionMatchVariableQueryStringArgNames
//	ManagedRuleExclusionMatchVariableRequestBodyPostArgNames
//	ManagedRuleExclusionMatchVariableRequestBodyJsonArgNames
type ManagedRuleExclusionMatchVariableInput interface {
	pulumi.Input

	ToManagedRuleExclusionMatchVariableOutput() ManagedRuleExclusionMatchVariableOutput
	ToManagedRuleExclusionMatchVariableOutputWithContext(context.Context) ManagedRuleExclusionMatchVariableOutput
}

var managedRuleExclusionMatchVariablePtrType = reflect.TypeOf((**ManagedRuleExclusionMatchVariable)(nil)).Elem()

type ManagedRuleExclusionMatchVariablePtrInput interface {
	pulumi.Input

	ToManagedRuleExclusionMatchVariablePtrOutput() ManagedRuleExclusionMatchVariablePtrOutput
	ToManagedRuleExclusionMatchVariablePtrOutputWithContext(context.Context) ManagedRuleExclusionMatchVariablePtrOutput
}

type managedRuleExclusionMatchVariablePtr string

func ManagedRuleExclusionMatchVariablePtr(v string) ManagedRuleExclusionMatchVariablePtrInput {
	return (*managedRuleExclusionMatchVariablePtr)(&v)
}

func (*managedRuleExclusionMatchVariablePtr) ElementType() reflect.Type {
	return managedRuleExclusionMatchVariablePtrType
}

func (in *managedRuleExclusionMatchVariablePtr) ToManagedRuleExclusionMatchVariablePtrOutput() ManagedRuleExclusionMatchVariablePtrOutput {
	return pulumi.ToOutput(in).(ManagedRuleExclusionMatchVariablePtrOutput)
}

func (in *managedRuleExclusionMatchVariablePtr) ToManagedRuleExclusionMatchVariablePtrOutputWithContext(ctx context.Context) ManagedRuleExclusionMatchVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedRuleExclusionMatchVariablePtrOutput)
}

func (in *managedRuleExclusionMatchVariablePtr) ToOutput(ctx context.Context) pulumix.Output[*ManagedRuleExclusionMatchVariable] {
	return pulumix.Output[*ManagedRuleExclusionMatchVariable]{
		OutputState: in.ToManagedRuleExclusionMatchVariablePtrOutputWithContext(ctx).OutputState,
	}
}

// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
type ManagedRuleExclusionSelectorMatchOperator string

const (
	ManagedRuleExclusionSelectorMatchOperatorEquals     = ManagedRuleExclusionSelectorMatchOperator("Equals")
	ManagedRuleExclusionSelectorMatchOperatorContains   = ManagedRuleExclusionSelectorMatchOperator("Contains")
	ManagedRuleExclusionSelectorMatchOperatorStartsWith = ManagedRuleExclusionSelectorMatchOperator("StartsWith")
	ManagedRuleExclusionSelectorMatchOperatorEndsWith   = ManagedRuleExclusionSelectorMatchOperator("EndsWith")
	ManagedRuleExclusionSelectorMatchOperatorEqualsAny  = ManagedRuleExclusionSelectorMatchOperator("EqualsAny")
)

func (ManagedRuleExclusionSelectorMatchOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleExclusionSelectorMatchOperator)(nil)).Elem()
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToManagedRuleExclusionSelectorMatchOperatorOutput() ManagedRuleExclusionSelectorMatchOperatorOutput {
	return pulumi.ToOutput(e).(ManagedRuleExclusionSelectorMatchOperatorOutput)
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToManagedRuleExclusionSelectorMatchOperatorOutputWithContext(ctx context.Context) ManagedRuleExclusionSelectorMatchOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedRuleExclusionSelectorMatchOperatorOutput)
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToManagedRuleExclusionSelectorMatchOperatorPtrOutput() ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return e.ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(context.Background())
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(ctx context.Context) ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return ManagedRuleExclusionSelectorMatchOperator(e).ToManagedRuleExclusionSelectorMatchOperatorOutputWithContext(ctx).ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(ctx)
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedRuleExclusionSelectorMatchOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedRuleExclusionSelectorMatchOperatorOutput struct{ *pulumi.OutputState }

func (ManagedRuleExclusionSelectorMatchOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleExclusionSelectorMatchOperator)(nil)).Elem()
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToManagedRuleExclusionSelectorMatchOperatorOutput() ManagedRuleExclusionSelectorMatchOperatorOutput {
	return o
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToManagedRuleExclusionSelectorMatchOperatorOutputWithContext(ctx context.Context) ManagedRuleExclusionSelectorMatchOperatorOutput {
	return o
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToManagedRuleExclusionSelectorMatchOperatorPtrOutput() ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return o.ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(ctx context.Context) ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRuleExclusionSelectorMatchOperator) *ManagedRuleExclusionSelectorMatchOperator {
		return &v
	}).(ManagedRuleExclusionSelectorMatchOperatorPtrOutput)
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleExclusionSelectorMatchOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionSelectorMatchOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleExclusionSelectorMatchOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedRuleExclusionSelectorMatchOperatorPtrOutput struct{ *pulumi.OutputState }

func (ManagedRuleExclusionSelectorMatchOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRuleExclusionSelectorMatchOperator)(nil)).Elem()
}

func (o ManagedRuleExclusionSelectorMatchOperatorPtrOutput) ToManagedRuleExclusionSelectorMatchOperatorPtrOutput() ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return o
}

func (o ManagedRuleExclusionSelectorMatchOperatorPtrOutput) ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(ctx context.Context) ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return o
}

func (o ManagedRuleExclusionSelectorMatchOperatorPtrOutput) Elem() ManagedRuleExclusionSelectorMatchOperatorOutput {
	return o.ApplyT(func(v *ManagedRuleExclusionSelectorMatchOperator) ManagedRuleExclusionSelectorMatchOperator {
		if v != nil {
			return *v
		}
		var ret ManagedRuleExclusionSelectorMatchOperator
		return ret
	}).(ManagedRuleExclusionSelectorMatchOperatorOutput)
}

func (o ManagedRuleExclusionSelectorMatchOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleExclusionSelectorMatchOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedRuleExclusionSelectorMatchOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedRuleExclusionSelectorMatchOperatorInput is an input type that accepts values of the ManagedRuleExclusionSelectorMatchOperator enum
// A concrete instance of `ManagedRuleExclusionSelectorMatchOperatorInput` can be one of the following:
//
//	ManagedRuleExclusionSelectorMatchOperatorEquals
//	ManagedRuleExclusionSelectorMatchOperatorContains
//	ManagedRuleExclusionSelectorMatchOperatorStartsWith
//	ManagedRuleExclusionSelectorMatchOperatorEndsWith
//	ManagedRuleExclusionSelectorMatchOperatorEqualsAny
type ManagedRuleExclusionSelectorMatchOperatorInput interface {
	pulumi.Input

	ToManagedRuleExclusionSelectorMatchOperatorOutput() ManagedRuleExclusionSelectorMatchOperatorOutput
	ToManagedRuleExclusionSelectorMatchOperatorOutputWithContext(context.Context) ManagedRuleExclusionSelectorMatchOperatorOutput
}

var managedRuleExclusionSelectorMatchOperatorPtrType = reflect.TypeOf((**ManagedRuleExclusionSelectorMatchOperator)(nil)).Elem()

type ManagedRuleExclusionSelectorMatchOperatorPtrInput interface {
	pulumi.Input

	ToManagedRuleExclusionSelectorMatchOperatorPtrOutput() ManagedRuleExclusionSelectorMatchOperatorPtrOutput
	ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(context.Context) ManagedRuleExclusionSelectorMatchOperatorPtrOutput
}

type managedRuleExclusionSelectorMatchOperatorPtr string

func ManagedRuleExclusionSelectorMatchOperatorPtr(v string) ManagedRuleExclusionSelectorMatchOperatorPtrInput {
	return (*managedRuleExclusionSelectorMatchOperatorPtr)(&v)
}

func (*managedRuleExclusionSelectorMatchOperatorPtr) ElementType() reflect.Type {
	return managedRuleExclusionSelectorMatchOperatorPtrType
}

func (in *managedRuleExclusionSelectorMatchOperatorPtr) ToManagedRuleExclusionSelectorMatchOperatorPtrOutput() ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return pulumi.ToOutput(in).(ManagedRuleExclusionSelectorMatchOperatorPtrOutput)
}

func (in *managedRuleExclusionSelectorMatchOperatorPtr) ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(ctx context.Context) ManagedRuleExclusionSelectorMatchOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedRuleExclusionSelectorMatchOperatorPtrOutput)
}

func (in *managedRuleExclusionSelectorMatchOperatorPtr) ToOutput(ctx context.Context) pulumix.Output[*ManagedRuleExclusionSelectorMatchOperator] {
	return pulumix.Output[*ManagedRuleExclusionSelectorMatchOperator]{
		OutputState: in.ToManagedRuleExclusionSelectorMatchOperatorPtrOutputWithContext(ctx).OutputState,
	}
}

// Defines the action to take when a managed rule set score threshold is met.
type ManagedRuleSetActionType string

const (
	ManagedRuleSetActionTypeBlock    = ManagedRuleSetActionType("Block")
	ManagedRuleSetActionTypeLog      = ManagedRuleSetActionType("Log")
	ManagedRuleSetActionTypeRedirect = ManagedRuleSetActionType("Redirect")
)

func (ManagedRuleSetActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleSetActionType)(nil)).Elem()
}

func (e ManagedRuleSetActionType) ToManagedRuleSetActionTypeOutput() ManagedRuleSetActionTypeOutput {
	return pulumi.ToOutput(e).(ManagedRuleSetActionTypeOutput)
}

func (e ManagedRuleSetActionType) ToManagedRuleSetActionTypeOutputWithContext(ctx context.Context) ManagedRuleSetActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedRuleSetActionTypeOutput)
}

func (e ManagedRuleSetActionType) ToManagedRuleSetActionTypePtrOutput() ManagedRuleSetActionTypePtrOutput {
	return e.ToManagedRuleSetActionTypePtrOutputWithContext(context.Background())
}

func (e ManagedRuleSetActionType) ToManagedRuleSetActionTypePtrOutputWithContext(ctx context.Context) ManagedRuleSetActionTypePtrOutput {
	return ManagedRuleSetActionType(e).ToManagedRuleSetActionTypeOutputWithContext(ctx).ToManagedRuleSetActionTypePtrOutputWithContext(ctx)
}

func (e ManagedRuleSetActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleSetActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedRuleSetActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedRuleSetActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedRuleSetActionTypeOutput struct{ *pulumi.OutputState }

func (ManagedRuleSetActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRuleSetActionType)(nil)).Elem()
}

func (o ManagedRuleSetActionTypeOutput) ToManagedRuleSetActionTypeOutput() ManagedRuleSetActionTypeOutput {
	return o
}

func (o ManagedRuleSetActionTypeOutput) ToManagedRuleSetActionTypeOutputWithContext(ctx context.Context) ManagedRuleSetActionTypeOutput {
	return o
}

func (o ManagedRuleSetActionTypeOutput) ToManagedRuleSetActionTypePtrOutput() ManagedRuleSetActionTypePtrOutput {
	return o.ToManagedRuleSetActionTypePtrOutputWithContext(context.Background())
}

func (o ManagedRuleSetActionTypeOutput) ToManagedRuleSetActionTypePtrOutputWithContext(ctx context.Context) ManagedRuleSetActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRuleSetActionType) *ManagedRuleSetActionType {
		return &v
	}).(ManagedRuleSetActionTypePtrOutput)
}

func (o ManagedRuleSetActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedRuleSetActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleSetActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedRuleSetActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleSetActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedRuleSetActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedRuleSetActionTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedRuleSetActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRuleSetActionType)(nil)).Elem()
}

func (o ManagedRuleSetActionTypePtrOutput) ToManagedRuleSetActionTypePtrOutput() ManagedRuleSetActionTypePtrOutput {
	return o
}

func (o ManagedRuleSetActionTypePtrOutput) ToManagedRuleSetActionTypePtrOutputWithContext(ctx context.Context) ManagedRuleSetActionTypePtrOutput {
	return o
}

func (o ManagedRuleSetActionTypePtrOutput) Elem() ManagedRuleSetActionTypeOutput {
	return o.ApplyT(func(v *ManagedRuleSetActionType) ManagedRuleSetActionType {
		if v != nil {
			return *v
		}
		var ret ManagedRuleSetActionType
		return ret
	}).(ManagedRuleSetActionTypeOutput)
}

func (o ManagedRuleSetActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedRuleSetActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedRuleSetActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedRuleSetActionTypeInput is an input type that accepts values of the ManagedRuleSetActionType enum
// A concrete instance of `ManagedRuleSetActionTypeInput` can be one of the following:
//
//	ManagedRuleSetActionTypeBlock
//	ManagedRuleSetActionTypeLog
//	ManagedRuleSetActionTypeRedirect
type ManagedRuleSetActionTypeInput interface {
	pulumi.Input

	ToManagedRuleSetActionTypeOutput() ManagedRuleSetActionTypeOutput
	ToManagedRuleSetActionTypeOutputWithContext(context.Context) ManagedRuleSetActionTypeOutput
}

var managedRuleSetActionTypePtrType = reflect.TypeOf((**ManagedRuleSetActionType)(nil)).Elem()

type ManagedRuleSetActionTypePtrInput interface {
	pulumi.Input

	ToManagedRuleSetActionTypePtrOutput() ManagedRuleSetActionTypePtrOutput
	ToManagedRuleSetActionTypePtrOutputWithContext(context.Context) ManagedRuleSetActionTypePtrOutput
}

type managedRuleSetActionTypePtr string

func ManagedRuleSetActionTypePtr(v string) ManagedRuleSetActionTypePtrInput {
	return (*managedRuleSetActionTypePtr)(&v)
}

func (*managedRuleSetActionTypePtr) ElementType() reflect.Type {
	return managedRuleSetActionTypePtrType
}

func (in *managedRuleSetActionTypePtr) ToManagedRuleSetActionTypePtrOutput() ManagedRuleSetActionTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedRuleSetActionTypePtrOutput)
}

func (in *managedRuleSetActionTypePtr) ToManagedRuleSetActionTypePtrOutputWithContext(ctx context.Context) ManagedRuleSetActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedRuleSetActionTypePtrOutput)
}

func (in *managedRuleSetActionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ManagedRuleSetActionType] {
	return pulumix.Output[*ManagedRuleSetActionType]{
		OutputState: in.ToManagedRuleSetActionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
type MatchProcessingBehavior string

const (
	MatchProcessingBehaviorContinue = MatchProcessingBehavior("Continue")
	MatchProcessingBehaviorStop     = MatchProcessingBehavior("Stop")
)

func (MatchProcessingBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchProcessingBehavior)(nil)).Elem()
}

func (e MatchProcessingBehavior) ToMatchProcessingBehaviorOutput() MatchProcessingBehaviorOutput {
	return pulumi.ToOutput(e).(MatchProcessingBehaviorOutput)
}

func (e MatchProcessingBehavior) ToMatchProcessingBehaviorOutputWithContext(ctx context.Context) MatchProcessingBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MatchProcessingBehaviorOutput)
}

func (e MatchProcessingBehavior) ToMatchProcessingBehaviorPtrOutput() MatchProcessingBehaviorPtrOutput {
	return e.ToMatchProcessingBehaviorPtrOutputWithContext(context.Background())
}

func (e MatchProcessingBehavior) ToMatchProcessingBehaviorPtrOutputWithContext(ctx context.Context) MatchProcessingBehaviorPtrOutput {
	return MatchProcessingBehavior(e).ToMatchProcessingBehaviorOutputWithContext(ctx).ToMatchProcessingBehaviorPtrOutputWithContext(ctx)
}

func (e MatchProcessingBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchProcessingBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchProcessingBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MatchProcessingBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MatchProcessingBehaviorOutput struct{ *pulumi.OutputState }

func (MatchProcessingBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchProcessingBehavior)(nil)).Elem()
}

func (o MatchProcessingBehaviorOutput) ToMatchProcessingBehaviorOutput() MatchProcessingBehaviorOutput {
	return o
}

func (o MatchProcessingBehaviorOutput) ToMatchProcessingBehaviorOutputWithContext(ctx context.Context) MatchProcessingBehaviorOutput {
	return o
}

func (o MatchProcessingBehaviorOutput) ToMatchProcessingBehaviorPtrOutput() MatchProcessingBehaviorPtrOutput {
	return o.ToMatchProcessingBehaviorPtrOutputWithContext(context.Background())
}

func (o MatchProcessingBehaviorOutput) ToMatchProcessingBehaviorPtrOutputWithContext(ctx context.Context) MatchProcessingBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchProcessingBehavior) *MatchProcessingBehavior {
		return &v
	}).(MatchProcessingBehaviorPtrOutput)
}

func (o MatchProcessingBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MatchProcessingBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchProcessingBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MatchProcessingBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchProcessingBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchProcessingBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MatchProcessingBehaviorPtrOutput struct{ *pulumi.OutputState }

func (MatchProcessingBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchProcessingBehavior)(nil)).Elem()
}

func (o MatchProcessingBehaviorPtrOutput) ToMatchProcessingBehaviorPtrOutput() MatchProcessingBehaviorPtrOutput {
	return o
}

func (o MatchProcessingBehaviorPtrOutput) ToMatchProcessingBehaviorPtrOutputWithContext(ctx context.Context) MatchProcessingBehaviorPtrOutput {
	return o
}

func (o MatchProcessingBehaviorPtrOutput) Elem() MatchProcessingBehaviorOutput {
	return o.ApplyT(func(v *MatchProcessingBehavior) MatchProcessingBehavior {
		if v != nil {
			return *v
		}
		var ret MatchProcessingBehavior
		return ret
	}).(MatchProcessingBehaviorOutput)
}

func (o MatchProcessingBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchProcessingBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MatchProcessingBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MatchProcessingBehaviorInput is an input type that accepts values of the MatchProcessingBehavior enum
// A concrete instance of `MatchProcessingBehaviorInput` can be one of the following:
//
//	MatchProcessingBehaviorContinue
//	MatchProcessingBehaviorStop
type MatchProcessingBehaviorInput interface {
	pulumi.Input

	ToMatchProcessingBehaviorOutput() MatchProcessingBehaviorOutput
	ToMatchProcessingBehaviorOutputWithContext(context.Context) MatchProcessingBehaviorOutput
}

var matchProcessingBehaviorPtrType = reflect.TypeOf((**MatchProcessingBehavior)(nil)).Elem()

type MatchProcessingBehaviorPtrInput interface {
	pulumi.Input

	ToMatchProcessingBehaviorPtrOutput() MatchProcessingBehaviorPtrOutput
	ToMatchProcessingBehaviorPtrOutputWithContext(context.Context) MatchProcessingBehaviorPtrOutput
}

type matchProcessingBehaviorPtr string

func MatchProcessingBehaviorPtr(v string) MatchProcessingBehaviorPtrInput {
	return (*matchProcessingBehaviorPtr)(&v)
}

func (*matchProcessingBehaviorPtr) ElementType() reflect.Type {
	return matchProcessingBehaviorPtrType
}

func (in *matchProcessingBehaviorPtr) ToMatchProcessingBehaviorPtrOutput() MatchProcessingBehaviorPtrOutput {
	return pulumi.ToOutput(in).(MatchProcessingBehaviorPtrOutput)
}

func (in *matchProcessingBehaviorPtr) ToMatchProcessingBehaviorPtrOutputWithContext(ctx context.Context) MatchProcessingBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MatchProcessingBehaviorPtrOutput)
}

func (in *matchProcessingBehaviorPtr) ToOutput(ctx context.Context) pulumix.Output[*MatchProcessingBehavior] {
	return pulumix.Output[*MatchProcessingBehavior]{
		OutputState: in.ToMatchProcessingBehaviorPtrOutputWithContext(ctx).OutputState,
	}
}

// Comparison type to use for matching with the variable value.
type Operator string

const (
	OperatorAny                = Operator("Any")
	OperatorIPMatch            = Operator("IPMatch")
	OperatorGeoMatch           = Operator("GeoMatch")
	OperatorEqual              = Operator("Equal")
	OperatorContains           = Operator("Contains")
	OperatorLessThan           = Operator("LessThan")
	OperatorGreaterThan        = Operator("GreaterThan")
	OperatorLessThanOrEqual    = Operator("LessThanOrEqual")
	OperatorGreaterThanOrEqual = Operator("GreaterThanOrEqual")
	OperatorBeginsWith         = Operator("BeginsWith")
	OperatorEndsWith           = Operator("EndsWith")
	OperatorRegEx              = Operator("RegEx")
)

func (Operator) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (e Operator) ToOperatorOutput() OperatorOutput {
	return pulumi.ToOutput(e).(OperatorOutput)
}

func (e Operator) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorOutput)
}

func (e Operator) ToOperatorPtrOutput() OperatorPtrOutput {
	return e.ToOperatorPtrOutputWithContext(context.Background())
}

func (e Operator) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return Operator(e).ToOperatorOutputWithContext(ctx).ToOperatorPtrOutputWithContext(ctx)
}

func (e Operator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Operator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorOutput struct{ *pulumi.OutputState }

func (OperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (o OperatorOutput) ToOperatorOutput() OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o.ToOperatorPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Operator) *Operator {
		return &v
	}).(OperatorPtrOutput)
}

func (o OperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorPtrOutput struct{ *pulumi.OutputState }

func (OperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Operator)(nil)).Elem()
}

func (o OperatorPtrOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) Elem() OperatorOutput {
	return o.ApplyT(func(v *Operator) Operator {
		if v != nil {
			return *v
		}
		var ret Operator
		return ret
	}).(OperatorOutput)
}

func (o OperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Operator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatorInput is an input type that accepts values of the Operator enum
// A concrete instance of `OperatorInput` can be one of the following:
//
//	OperatorAny
//	OperatorIPMatch
//	OperatorGeoMatch
//	OperatorEqual
//	OperatorContains
//	OperatorLessThan
//	OperatorGreaterThan
//	OperatorLessThanOrEqual
//	OperatorGreaterThanOrEqual
//	OperatorBeginsWith
//	OperatorEndsWith
//	OperatorRegEx
type OperatorInput interface {
	pulumi.Input

	ToOperatorOutput() OperatorOutput
	ToOperatorOutputWithContext(context.Context) OperatorOutput
}

var operatorPtrType = reflect.TypeOf((**Operator)(nil)).Elem()

type OperatorPtrInput interface {
	pulumi.Input

	ToOperatorPtrOutput() OperatorPtrOutput
	ToOperatorPtrOutputWithContext(context.Context) OperatorPtrOutput
}

type operatorPtr string

func OperatorPtr(v string) OperatorPtrInput {
	return (*operatorPtr)(&v)
}

func (*operatorPtr) ElementType() reflect.Type {
	return operatorPtrType
}

func (in *operatorPtr) ToOperatorPtrOutput() OperatorPtrOutput {
	return pulumi.ToOutput(in).(OperatorPtrOutput)
}

func (in *operatorPtr) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorPtrOutput)
}

func (in *operatorPtr) ToOutput(ctx context.Context) pulumix.Output[*Operator] {
	return pulumix.Output[*Operator]{
		OutputState: in.ToOperatorPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
type PolicyEnabledState string

const (
	PolicyEnabledStateDisabled = PolicyEnabledState("Disabled")
	PolicyEnabledStateEnabled  = PolicyEnabledState("Enabled")
)

func (PolicyEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyEnabledState)(nil)).Elem()
}

func (e PolicyEnabledState) ToPolicyEnabledStateOutput() PolicyEnabledStateOutput {
	return pulumi.ToOutput(e).(PolicyEnabledStateOutput)
}

func (e PolicyEnabledState) ToPolicyEnabledStateOutputWithContext(ctx context.Context) PolicyEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyEnabledStateOutput)
}

func (e PolicyEnabledState) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return e.ToPolicyEnabledStatePtrOutputWithContext(context.Background())
}

func (e PolicyEnabledState) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return PolicyEnabledState(e).ToPolicyEnabledStateOutputWithContext(ctx).ToPolicyEnabledStatePtrOutputWithContext(ctx)
}

func (e PolicyEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyEnabledStateOutput struct{ *pulumi.OutputState }

func (PolicyEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyEnabledState)(nil)).Elem()
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStateOutput() PolicyEnabledStateOutput {
	return o
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStateOutputWithContext(ctx context.Context) PolicyEnabledStateOutput {
	return o
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return o.ToPolicyEnabledStatePtrOutputWithContext(context.Background())
}

func (o PolicyEnabledStateOutput) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyEnabledState) *PolicyEnabledState {
		return &v
	}).(PolicyEnabledStatePtrOutput)
}

func (o PolicyEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (PolicyEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyEnabledState)(nil)).Elem()
}

func (o PolicyEnabledStatePtrOutput) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return o
}

func (o PolicyEnabledStatePtrOutput) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return o
}

func (o PolicyEnabledStatePtrOutput) Elem() PolicyEnabledStateOutput {
	return o.ApplyT(func(v *PolicyEnabledState) PolicyEnabledState {
		if v != nil {
			return *v
		}
		var ret PolicyEnabledState
		return ret
	}).(PolicyEnabledStateOutput)
}

func (o PolicyEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyEnabledStateInput is an input type that accepts values of the PolicyEnabledState enum
// A concrete instance of `PolicyEnabledStateInput` can be one of the following:
//
//	PolicyEnabledStateDisabled
//	PolicyEnabledStateEnabled
type PolicyEnabledStateInput interface {
	pulumi.Input

	ToPolicyEnabledStateOutput() PolicyEnabledStateOutput
	ToPolicyEnabledStateOutputWithContext(context.Context) PolicyEnabledStateOutput
}

var policyEnabledStatePtrType = reflect.TypeOf((**PolicyEnabledState)(nil)).Elem()

type PolicyEnabledStatePtrInput interface {
	pulumi.Input

	ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput
	ToPolicyEnabledStatePtrOutputWithContext(context.Context) PolicyEnabledStatePtrOutput
}

type policyEnabledStatePtr string

func PolicyEnabledStatePtr(v string) PolicyEnabledStatePtrInput {
	return (*policyEnabledStatePtr)(&v)
}

func (*policyEnabledStatePtr) ElementType() reflect.Type {
	return policyEnabledStatePtrType
}

func (in *policyEnabledStatePtr) ToPolicyEnabledStatePtrOutput() PolicyEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(PolicyEnabledStatePtrOutput)
}

func (in *policyEnabledStatePtr) ToPolicyEnabledStatePtrOutputWithContext(ctx context.Context) PolicyEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyEnabledStatePtrOutput)
}

func (in *policyEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*PolicyEnabledState] {
	return pulumix.Output[*PolicyEnabledState]{
		OutputState: in.ToPolicyEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes if it is in detection mode or prevention mode at policy level.
type PolicyMode string

const (
	PolicyModePrevention = PolicyMode("Prevention")
	PolicyModeDetection  = PolicyMode("Detection")
)

func (PolicyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMode)(nil)).Elem()
}

func (e PolicyMode) ToPolicyModeOutput() PolicyModeOutput {
	return pulumi.ToOutput(e).(PolicyModeOutput)
}

func (e PolicyMode) ToPolicyModeOutputWithContext(ctx context.Context) PolicyModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyModeOutput)
}

func (e PolicyMode) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return e.ToPolicyModePtrOutputWithContext(context.Background())
}

func (e PolicyMode) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return PolicyMode(e).ToPolicyModeOutputWithContext(ctx).ToPolicyModePtrOutputWithContext(ctx)
}

func (e PolicyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyModeOutput struct{ *pulumi.OutputState }

func (PolicyModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMode)(nil)).Elem()
}

func (o PolicyModeOutput) ToPolicyModeOutput() PolicyModeOutput {
	return o
}

func (o PolicyModeOutput) ToPolicyModeOutputWithContext(ctx context.Context) PolicyModeOutput {
	return o
}

func (o PolicyModeOutput) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return o.ToPolicyModePtrOutputWithContext(context.Background())
}

func (o PolicyModeOutput) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyMode) *PolicyMode {
		return &v
	}).(PolicyModePtrOutput)
}

func (o PolicyModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyModePtrOutput struct{ *pulumi.OutputState }

func (PolicyModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMode)(nil)).Elem()
}

func (o PolicyModePtrOutput) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return o
}

func (o PolicyModePtrOutput) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return o
}

func (o PolicyModePtrOutput) Elem() PolicyModeOutput {
	return o.ApplyT(func(v *PolicyMode) PolicyMode {
		if v != nil {
			return *v
		}
		var ret PolicyMode
		return ret
	}).(PolicyModeOutput)
}

func (o PolicyModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyModeInput is an input type that accepts values of the PolicyMode enum
// A concrete instance of `PolicyModeInput` can be one of the following:
//
//	PolicyModePrevention
//	PolicyModeDetection
type PolicyModeInput interface {
	pulumi.Input

	ToPolicyModeOutput() PolicyModeOutput
	ToPolicyModeOutputWithContext(context.Context) PolicyModeOutput
}

var policyModePtrType = reflect.TypeOf((**PolicyMode)(nil)).Elem()

type PolicyModePtrInput interface {
	pulumi.Input

	ToPolicyModePtrOutput() PolicyModePtrOutput
	ToPolicyModePtrOutputWithContext(context.Context) PolicyModePtrOutput
}

type policyModePtr string

func PolicyModePtr(v string) PolicyModePtrInput {
	return (*policyModePtr)(&v)
}

func (*policyModePtr) ElementType() reflect.Type {
	return policyModePtrType
}

func (in *policyModePtr) ToPolicyModePtrOutput() PolicyModePtrOutput {
	return pulumi.ToOutput(in).(PolicyModePtrOutput)
}

func (in *policyModePtr) ToPolicyModePtrOutputWithContext(ctx context.Context) PolicyModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyModePtrOutput)
}

func (in *policyModePtr) ToOutput(ctx context.Context) pulumix.Output[*PolicyMode] {
	return pulumix.Output[*PolicyMode]{
		OutputState: in.ToPolicyModePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes if policy managed rules will inspect the request body content.
type PolicyRequestBodyCheck string

const (
	PolicyRequestBodyCheckDisabled = PolicyRequestBodyCheck("Disabled")
	PolicyRequestBodyCheckEnabled  = PolicyRequestBodyCheck("Enabled")
)

func (PolicyRequestBodyCheck) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRequestBodyCheck)(nil)).Elem()
}

func (e PolicyRequestBodyCheck) ToPolicyRequestBodyCheckOutput() PolicyRequestBodyCheckOutput {
	return pulumi.ToOutput(e).(PolicyRequestBodyCheckOutput)
}

func (e PolicyRequestBodyCheck) ToPolicyRequestBodyCheckOutputWithContext(ctx context.Context) PolicyRequestBodyCheckOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyRequestBodyCheckOutput)
}

func (e PolicyRequestBodyCheck) ToPolicyRequestBodyCheckPtrOutput() PolicyRequestBodyCheckPtrOutput {
	return e.ToPolicyRequestBodyCheckPtrOutputWithContext(context.Background())
}

func (e PolicyRequestBodyCheck) ToPolicyRequestBodyCheckPtrOutputWithContext(ctx context.Context) PolicyRequestBodyCheckPtrOutput {
	return PolicyRequestBodyCheck(e).ToPolicyRequestBodyCheckOutputWithContext(ctx).ToPolicyRequestBodyCheckPtrOutputWithContext(ctx)
}

func (e PolicyRequestBodyCheck) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyRequestBodyCheck) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyRequestBodyCheck) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyRequestBodyCheck) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyRequestBodyCheckOutput struct{ *pulumi.OutputState }

func (PolicyRequestBodyCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRequestBodyCheck)(nil)).Elem()
}

func (o PolicyRequestBodyCheckOutput) ToPolicyRequestBodyCheckOutput() PolicyRequestBodyCheckOutput {
	return o
}

func (o PolicyRequestBodyCheckOutput) ToPolicyRequestBodyCheckOutputWithContext(ctx context.Context) PolicyRequestBodyCheckOutput {
	return o
}

func (o PolicyRequestBodyCheckOutput) ToPolicyRequestBodyCheckPtrOutput() PolicyRequestBodyCheckPtrOutput {
	return o.ToPolicyRequestBodyCheckPtrOutputWithContext(context.Background())
}

func (o PolicyRequestBodyCheckOutput) ToPolicyRequestBodyCheckPtrOutputWithContext(ctx context.Context) PolicyRequestBodyCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyRequestBodyCheck) *PolicyRequestBodyCheck {
		return &v
	}).(PolicyRequestBodyCheckPtrOutput)
}

func (o PolicyRequestBodyCheckOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyRequestBodyCheckOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyRequestBodyCheck) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyRequestBodyCheckOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyRequestBodyCheckOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyRequestBodyCheck) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyRequestBodyCheckPtrOutput struct{ *pulumi.OutputState }

func (PolicyRequestBodyCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRequestBodyCheck)(nil)).Elem()
}

func (o PolicyRequestBodyCheckPtrOutput) ToPolicyRequestBodyCheckPtrOutput() PolicyRequestBodyCheckPtrOutput {
	return o
}

func (o PolicyRequestBodyCheckPtrOutput) ToPolicyRequestBodyCheckPtrOutputWithContext(ctx context.Context) PolicyRequestBodyCheckPtrOutput {
	return o
}

func (o PolicyRequestBodyCheckPtrOutput) Elem() PolicyRequestBodyCheckOutput {
	return o.ApplyT(func(v *PolicyRequestBodyCheck) PolicyRequestBodyCheck {
		if v != nil {
			return *v
		}
		var ret PolicyRequestBodyCheck
		return ret
	}).(PolicyRequestBodyCheckOutput)
}

func (o PolicyRequestBodyCheckPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyRequestBodyCheckPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyRequestBodyCheck) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyRequestBodyCheckInput is an input type that accepts values of the PolicyRequestBodyCheck enum
// A concrete instance of `PolicyRequestBodyCheckInput` can be one of the following:
//
//	PolicyRequestBodyCheckDisabled
//	PolicyRequestBodyCheckEnabled
type PolicyRequestBodyCheckInput interface {
	pulumi.Input

	ToPolicyRequestBodyCheckOutput() PolicyRequestBodyCheckOutput
	ToPolicyRequestBodyCheckOutputWithContext(context.Context) PolicyRequestBodyCheckOutput
}

var policyRequestBodyCheckPtrType = reflect.TypeOf((**PolicyRequestBodyCheck)(nil)).Elem()

type PolicyRequestBodyCheckPtrInput interface {
	pulumi.Input

	ToPolicyRequestBodyCheckPtrOutput() PolicyRequestBodyCheckPtrOutput
	ToPolicyRequestBodyCheckPtrOutputWithContext(context.Context) PolicyRequestBodyCheckPtrOutput
}

type policyRequestBodyCheckPtr string

func PolicyRequestBodyCheckPtr(v string) PolicyRequestBodyCheckPtrInput {
	return (*policyRequestBodyCheckPtr)(&v)
}

func (*policyRequestBodyCheckPtr) ElementType() reflect.Type {
	return policyRequestBodyCheckPtrType
}

func (in *policyRequestBodyCheckPtr) ToPolicyRequestBodyCheckPtrOutput() PolicyRequestBodyCheckPtrOutput {
	return pulumi.ToOutput(in).(PolicyRequestBodyCheckPtrOutput)
}

func (in *policyRequestBodyCheckPtr) ToPolicyRequestBodyCheckPtrOutputWithContext(ctx context.Context) PolicyRequestBodyCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyRequestBodyCheckPtrOutput)
}

func (in *policyRequestBodyCheckPtr) ToOutput(ctx context.Context) pulumix.Output[*PolicyRequestBodyCheck] {
	return pulumix.Output[*PolicyRequestBodyCheck]{
		OutputState: in.ToPolicyRequestBodyCheckPtrOutputWithContext(ctx).OutputState,
	}
}

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
type RoutingRuleEnabledState string

const (
	RoutingRuleEnabledStateEnabled  = RoutingRuleEnabledState("Enabled")
	RoutingRuleEnabledStateDisabled = RoutingRuleEnabledState("Disabled")
)

func (RoutingRuleEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRuleEnabledState)(nil)).Elem()
}

func (e RoutingRuleEnabledState) ToRoutingRuleEnabledStateOutput() RoutingRuleEnabledStateOutput {
	return pulumi.ToOutput(e).(RoutingRuleEnabledStateOutput)
}

func (e RoutingRuleEnabledState) ToRoutingRuleEnabledStateOutputWithContext(ctx context.Context) RoutingRuleEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutingRuleEnabledStateOutput)
}

func (e RoutingRuleEnabledState) ToRoutingRuleEnabledStatePtrOutput() RoutingRuleEnabledStatePtrOutput {
	return e.ToRoutingRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (e RoutingRuleEnabledState) ToRoutingRuleEnabledStatePtrOutputWithContext(ctx context.Context) RoutingRuleEnabledStatePtrOutput {
	return RoutingRuleEnabledState(e).ToRoutingRuleEnabledStateOutputWithContext(ctx).ToRoutingRuleEnabledStatePtrOutputWithContext(ctx)
}

func (e RoutingRuleEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutingRuleEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutingRuleEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutingRuleEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutingRuleEnabledStateOutput struct{ *pulumi.OutputState }

func (RoutingRuleEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRuleEnabledState)(nil)).Elem()
}

func (o RoutingRuleEnabledStateOutput) ToRoutingRuleEnabledStateOutput() RoutingRuleEnabledStateOutput {
	return o
}

func (o RoutingRuleEnabledStateOutput) ToRoutingRuleEnabledStateOutputWithContext(ctx context.Context) RoutingRuleEnabledStateOutput {
	return o
}

func (o RoutingRuleEnabledStateOutput) ToRoutingRuleEnabledStatePtrOutput() RoutingRuleEnabledStatePtrOutput {
	return o.ToRoutingRuleEnabledStatePtrOutputWithContext(context.Background())
}

func (o RoutingRuleEnabledStateOutput) ToRoutingRuleEnabledStatePtrOutputWithContext(ctx context.Context) RoutingRuleEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutingRuleEnabledState) *RoutingRuleEnabledState {
		return &v
	}).(RoutingRuleEnabledStatePtrOutput)
}

func (o RoutingRuleEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutingRuleEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutingRuleEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutingRuleEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutingRuleEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutingRuleEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutingRuleEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (RoutingRuleEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingRuleEnabledState)(nil)).Elem()
}

func (o RoutingRuleEnabledStatePtrOutput) ToRoutingRuleEnabledStatePtrOutput() RoutingRuleEnabledStatePtrOutput {
	return o
}

func (o RoutingRuleEnabledStatePtrOutput) ToRoutingRuleEnabledStatePtrOutputWithContext(ctx context.Context) RoutingRuleEnabledStatePtrOutput {
	return o
}

func (o RoutingRuleEnabledStatePtrOutput) Elem() RoutingRuleEnabledStateOutput {
	return o.ApplyT(func(v *RoutingRuleEnabledState) RoutingRuleEnabledState {
		if v != nil {
			return *v
		}
		var ret RoutingRuleEnabledState
		return ret
	}).(RoutingRuleEnabledStateOutput)
}

func (o RoutingRuleEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutingRuleEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutingRuleEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutingRuleEnabledStateInput is an input type that accepts values of the RoutingRuleEnabledState enum
// A concrete instance of `RoutingRuleEnabledStateInput` can be one of the following:
//
//	RoutingRuleEnabledStateEnabled
//	RoutingRuleEnabledStateDisabled
type RoutingRuleEnabledStateInput interface {
	pulumi.Input

	ToRoutingRuleEnabledStateOutput() RoutingRuleEnabledStateOutput
	ToRoutingRuleEnabledStateOutputWithContext(context.Context) RoutingRuleEnabledStateOutput
}

var routingRuleEnabledStatePtrType = reflect.TypeOf((**RoutingRuleEnabledState)(nil)).Elem()

type RoutingRuleEnabledStatePtrInput interface {
	pulumi.Input

	ToRoutingRuleEnabledStatePtrOutput() RoutingRuleEnabledStatePtrOutput
	ToRoutingRuleEnabledStatePtrOutputWithContext(context.Context) RoutingRuleEnabledStatePtrOutput
}

type routingRuleEnabledStatePtr string

func RoutingRuleEnabledStatePtr(v string) RoutingRuleEnabledStatePtrInput {
	return (*routingRuleEnabledStatePtr)(&v)
}

func (*routingRuleEnabledStatePtr) ElementType() reflect.Type {
	return routingRuleEnabledStatePtrType
}

func (in *routingRuleEnabledStatePtr) ToRoutingRuleEnabledStatePtrOutput() RoutingRuleEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(RoutingRuleEnabledStatePtrOutput)
}

func (in *routingRuleEnabledStatePtr) ToRoutingRuleEnabledStatePtrOutputWithContext(ctx context.Context) RoutingRuleEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutingRuleEnabledStatePtrOutput)
}

func (in *routingRuleEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*RoutingRuleEnabledState] {
	return pulumix.Output[*RoutingRuleEnabledState]{
		OutputState: in.ToRoutingRuleEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes type of rule.
type RuleType string

const (
	RuleTypeMatchRule     = RuleType("MatchRule")
	RuleTypeRateLimitRule = RuleType("RateLimitRule")
)

func (RuleType) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleType)(nil)).Elem()
}

func (e RuleType) ToRuleTypeOutput() RuleTypeOutput {
	return pulumi.ToOutput(e).(RuleTypeOutput)
}

func (e RuleType) ToRuleTypeOutputWithContext(ctx context.Context) RuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RuleTypeOutput)
}

func (e RuleType) ToRuleTypePtrOutput() RuleTypePtrOutput {
	return e.ToRuleTypePtrOutputWithContext(context.Background())
}

func (e RuleType) ToRuleTypePtrOutputWithContext(ctx context.Context) RuleTypePtrOutput {
	return RuleType(e).ToRuleTypeOutputWithContext(ctx).ToRuleTypePtrOutputWithContext(ctx)
}

func (e RuleType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RuleType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RuleTypeOutput struct{ *pulumi.OutputState }

func (RuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleType)(nil)).Elem()
}

func (o RuleTypeOutput) ToRuleTypeOutput() RuleTypeOutput {
	return o
}

func (o RuleTypeOutput) ToRuleTypeOutputWithContext(ctx context.Context) RuleTypeOutput {
	return o
}

func (o RuleTypeOutput) ToRuleTypePtrOutput() RuleTypePtrOutput {
	return o.ToRuleTypePtrOutputWithContext(context.Background())
}

func (o RuleTypeOutput) ToRuleTypePtrOutputWithContext(ctx context.Context) RuleTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleType) *RuleType {
		return &v
	}).(RuleTypePtrOutput)
}

func (o RuleTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RuleTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RuleTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RuleTypePtrOutput struct{ *pulumi.OutputState }

func (RuleTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleType)(nil)).Elem()
}

func (o RuleTypePtrOutput) ToRuleTypePtrOutput() RuleTypePtrOutput {
	return o
}

func (o RuleTypePtrOutput) ToRuleTypePtrOutputWithContext(ctx context.Context) RuleTypePtrOutput {
	return o
}

func (o RuleTypePtrOutput) Elem() RuleTypeOutput {
	return o.ApplyT(func(v *RuleType) RuleType {
		if v != nil {
			return *v
		}
		var ret RuleType
		return ret
	}).(RuleTypeOutput)
}

func (o RuleTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RuleType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RuleTypeInput is an input type that accepts values of the RuleType enum
// A concrete instance of `RuleTypeInput` can be one of the following:
//
//	RuleTypeMatchRule
//	RuleTypeRateLimitRule
type RuleTypeInput interface {
	pulumi.Input

	ToRuleTypeOutput() RuleTypeOutput
	ToRuleTypeOutputWithContext(context.Context) RuleTypeOutput
}

var ruleTypePtrType = reflect.TypeOf((**RuleType)(nil)).Elem()

type RuleTypePtrInput interface {
	pulumi.Input

	ToRuleTypePtrOutput() RuleTypePtrOutput
	ToRuleTypePtrOutputWithContext(context.Context) RuleTypePtrOutput
}

type ruleTypePtr string

func RuleTypePtr(v string) RuleTypePtrInput {
	return (*ruleTypePtr)(&v)
}

func (*ruleTypePtr) ElementType() reflect.Type {
	return ruleTypePtrType
}

func (in *ruleTypePtr) ToRuleTypePtrOutput() RuleTypePtrOutput {
	return pulumi.ToOutput(in).(RuleTypePtrOutput)
}

func (in *ruleTypePtr) ToRuleTypePtrOutputWithContext(ctx context.Context) RuleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RuleTypePtrOutput)
}

func (in *ruleTypePtr) ToOutput(ctx context.Context) pulumix.Output[*RuleType] {
	return pulumix.Output[*RuleType]{
		OutputState: in.ToRuleTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Match Variable
type RulesEngineMatchVariable string

const (
	RulesEngineMatchVariableIsMobile                 = RulesEngineMatchVariable("IsMobile")
	RulesEngineMatchVariableRemoteAddr               = RulesEngineMatchVariable("RemoteAddr")
	RulesEngineMatchVariableRequestMethod            = RulesEngineMatchVariable("RequestMethod")
	RulesEngineMatchVariableQueryString              = RulesEngineMatchVariable("QueryString")
	RulesEngineMatchVariablePostArgs                 = RulesEngineMatchVariable("PostArgs")
	RulesEngineMatchVariableRequestUri               = RulesEngineMatchVariable("RequestUri")
	RulesEngineMatchVariableRequestPath              = RulesEngineMatchVariable("RequestPath")
	RulesEngineMatchVariableRequestFilename          = RulesEngineMatchVariable("RequestFilename")
	RulesEngineMatchVariableRequestFilenameExtension = RulesEngineMatchVariable("RequestFilenameExtension")
	RulesEngineMatchVariableRequestHeader            = RulesEngineMatchVariable("RequestHeader")
	RulesEngineMatchVariableRequestBody              = RulesEngineMatchVariable("RequestBody")
	RulesEngineMatchVariableRequestScheme            = RulesEngineMatchVariable("RequestScheme")
)

func (RulesEngineMatchVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineMatchVariable)(nil)).Elem()
}

func (e RulesEngineMatchVariable) ToRulesEngineMatchVariableOutput() RulesEngineMatchVariableOutput {
	return pulumi.ToOutput(e).(RulesEngineMatchVariableOutput)
}

func (e RulesEngineMatchVariable) ToRulesEngineMatchVariableOutputWithContext(ctx context.Context) RulesEngineMatchVariableOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RulesEngineMatchVariableOutput)
}

func (e RulesEngineMatchVariable) ToRulesEngineMatchVariablePtrOutput() RulesEngineMatchVariablePtrOutput {
	return e.ToRulesEngineMatchVariablePtrOutputWithContext(context.Background())
}

func (e RulesEngineMatchVariable) ToRulesEngineMatchVariablePtrOutputWithContext(ctx context.Context) RulesEngineMatchVariablePtrOutput {
	return RulesEngineMatchVariable(e).ToRulesEngineMatchVariableOutputWithContext(ctx).ToRulesEngineMatchVariablePtrOutputWithContext(ctx)
}

func (e RulesEngineMatchVariable) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RulesEngineMatchVariable) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RulesEngineMatchVariable) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RulesEngineMatchVariable) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RulesEngineMatchVariableOutput struct{ *pulumi.OutputState }

func (RulesEngineMatchVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineMatchVariable)(nil)).Elem()
}

func (o RulesEngineMatchVariableOutput) ToRulesEngineMatchVariableOutput() RulesEngineMatchVariableOutput {
	return o
}

func (o RulesEngineMatchVariableOutput) ToRulesEngineMatchVariableOutputWithContext(ctx context.Context) RulesEngineMatchVariableOutput {
	return o
}

func (o RulesEngineMatchVariableOutput) ToRulesEngineMatchVariablePtrOutput() RulesEngineMatchVariablePtrOutput {
	return o.ToRulesEngineMatchVariablePtrOutputWithContext(context.Background())
}

func (o RulesEngineMatchVariableOutput) ToRulesEngineMatchVariablePtrOutputWithContext(ctx context.Context) RulesEngineMatchVariablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulesEngineMatchVariable) *RulesEngineMatchVariable {
		return &v
	}).(RulesEngineMatchVariablePtrOutput)
}

func (o RulesEngineMatchVariableOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RulesEngineMatchVariableOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RulesEngineMatchVariable) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RulesEngineMatchVariableOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RulesEngineMatchVariableOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RulesEngineMatchVariable) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RulesEngineMatchVariablePtrOutput struct{ *pulumi.OutputState }

func (RulesEngineMatchVariablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesEngineMatchVariable)(nil)).Elem()
}

func (o RulesEngineMatchVariablePtrOutput) ToRulesEngineMatchVariablePtrOutput() RulesEngineMatchVariablePtrOutput {
	return o
}

func (o RulesEngineMatchVariablePtrOutput) ToRulesEngineMatchVariablePtrOutputWithContext(ctx context.Context) RulesEngineMatchVariablePtrOutput {
	return o
}

func (o RulesEngineMatchVariablePtrOutput) Elem() RulesEngineMatchVariableOutput {
	return o.ApplyT(func(v *RulesEngineMatchVariable) RulesEngineMatchVariable {
		if v != nil {
			return *v
		}
		var ret RulesEngineMatchVariable
		return ret
	}).(RulesEngineMatchVariableOutput)
}

func (o RulesEngineMatchVariablePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RulesEngineMatchVariablePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RulesEngineMatchVariable) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RulesEngineMatchVariableInput is an input type that accepts values of the RulesEngineMatchVariable enum
// A concrete instance of `RulesEngineMatchVariableInput` can be one of the following:
//
//	RulesEngineMatchVariableIsMobile
//	RulesEngineMatchVariableRemoteAddr
//	RulesEngineMatchVariableRequestMethod
//	RulesEngineMatchVariableQueryString
//	RulesEngineMatchVariablePostArgs
//	RulesEngineMatchVariableRequestUri
//	RulesEngineMatchVariableRequestPath
//	RulesEngineMatchVariableRequestFilename
//	RulesEngineMatchVariableRequestFilenameExtension
//	RulesEngineMatchVariableRequestHeader
//	RulesEngineMatchVariableRequestBody
//	RulesEngineMatchVariableRequestScheme
type RulesEngineMatchVariableInput interface {
	pulumi.Input

	ToRulesEngineMatchVariableOutput() RulesEngineMatchVariableOutput
	ToRulesEngineMatchVariableOutputWithContext(context.Context) RulesEngineMatchVariableOutput
}

var rulesEngineMatchVariablePtrType = reflect.TypeOf((**RulesEngineMatchVariable)(nil)).Elem()

type RulesEngineMatchVariablePtrInput interface {
	pulumi.Input

	ToRulesEngineMatchVariablePtrOutput() RulesEngineMatchVariablePtrOutput
	ToRulesEngineMatchVariablePtrOutputWithContext(context.Context) RulesEngineMatchVariablePtrOutput
}

type rulesEngineMatchVariablePtr string

func RulesEngineMatchVariablePtr(v string) RulesEngineMatchVariablePtrInput {
	return (*rulesEngineMatchVariablePtr)(&v)
}

func (*rulesEngineMatchVariablePtr) ElementType() reflect.Type {
	return rulesEngineMatchVariablePtrType
}

func (in *rulesEngineMatchVariablePtr) ToRulesEngineMatchVariablePtrOutput() RulesEngineMatchVariablePtrOutput {
	return pulumi.ToOutput(in).(RulesEngineMatchVariablePtrOutput)
}

func (in *rulesEngineMatchVariablePtr) ToRulesEngineMatchVariablePtrOutputWithContext(ctx context.Context) RulesEngineMatchVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RulesEngineMatchVariablePtrOutput)
}

func (in *rulesEngineMatchVariablePtr) ToOutput(ctx context.Context) pulumix.Output[*RulesEngineMatchVariable] {
	return pulumix.Output[*RulesEngineMatchVariable]{
		OutputState: in.ToRulesEngineMatchVariablePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes operator to apply to the match condition.
type RulesEngineOperator string

const (
	RulesEngineOperatorAny                = RulesEngineOperator("Any")
	RulesEngineOperatorIPMatch            = RulesEngineOperator("IPMatch")
	RulesEngineOperatorGeoMatch           = RulesEngineOperator("GeoMatch")
	RulesEngineOperatorEqual              = RulesEngineOperator("Equal")
	RulesEngineOperatorContains           = RulesEngineOperator("Contains")
	RulesEngineOperatorLessThan           = RulesEngineOperator("LessThan")
	RulesEngineOperatorGreaterThan        = RulesEngineOperator("GreaterThan")
	RulesEngineOperatorLessThanOrEqual    = RulesEngineOperator("LessThanOrEqual")
	RulesEngineOperatorGreaterThanOrEqual = RulesEngineOperator("GreaterThanOrEqual")
	RulesEngineOperatorBeginsWith         = RulesEngineOperator("BeginsWith")
	RulesEngineOperatorEndsWith           = RulesEngineOperator("EndsWith")
)

func (RulesEngineOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineOperator)(nil)).Elem()
}

func (e RulesEngineOperator) ToRulesEngineOperatorOutput() RulesEngineOperatorOutput {
	return pulumi.ToOutput(e).(RulesEngineOperatorOutput)
}

func (e RulesEngineOperator) ToRulesEngineOperatorOutputWithContext(ctx context.Context) RulesEngineOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RulesEngineOperatorOutput)
}

func (e RulesEngineOperator) ToRulesEngineOperatorPtrOutput() RulesEngineOperatorPtrOutput {
	return e.ToRulesEngineOperatorPtrOutputWithContext(context.Background())
}

func (e RulesEngineOperator) ToRulesEngineOperatorPtrOutputWithContext(ctx context.Context) RulesEngineOperatorPtrOutput {
	return RulesEngineOperator(e).ToRulesEngineOperatorOutputWithContext(ctx).ToRulesEngineOperatorPtrOutputWithContext(ctx)
}

func (e RulesEngineOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RulesEngineOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RulesEngineOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RulesEngineOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RulesEngineOperatorOutput struct{ *pulumi.OutputState }

func (RulesEngineOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineOperator)(nil)).Elem()
}

func (o RulesEngineOperatorOutput) ToRulesEngineOperatorOutput() RulesEngineOperatorOutput {
	return o
}

func (o RulesEngineOperatorOutput) ToRulesEngineOperatorOutputWithContext(ctx context.Context) RulesEngineOperatorOutput {
	return o
}

func (o RulesEngineOperatorOutput) ToRulesEngineOperatorPtrOutput() RulesEngineOperatorPtrOutput {
	return o.ToRulesEngineOperatorPtrOutputWithContext(context.Background())
}

func (o RulesEngineOperatorOutput) ToRulesEngineOperatorPtrOutputWithContext(ctx context.Context) RulesEngineOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulesEngineOperator) *RulesEngineOperator {
		return &v
	}).(RulesEngineOperatorPtrOutput)
}

func (o RulesEngineOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RulesEngineOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RulesEngineOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RulesEngineOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RulesEngineOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RulesEngineOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RulesEngineOperatorPtrOutput struct{ *pulumi.OutputState }

func (RulesEngineOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesEngineOperator)(nil)).Elem()
}

func (o RulesEngineOperatorPtrOutput) ToRulesEngineOperatorPtrOutput() RulesEngineOperatorPtrOutput {
	return o
}

func (o RulesEngineOperatorPtrOutput) ToRulesEngineOperatorPtrOutputWithContext(ctx context.Context) RulesEngineOperatorPtrOutput {
	return o
}

func (o RulesEngineOperatorPtrOutput) Elem() RulesEngineOperatorOutput {
	return o.ApplyT(func(v *RulesEngineOperator) RulesEngineOperator {
		if v != nil {
			return *v
		}
		var ret RulesEngineOperator
		return ret
	}).(RulesEngineOperatorOutput)
}

func (o RulesEngineOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RulesEngineOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RulesEngineOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RulesEngineOperatorInput is an input type that accepts values of the RulesEngineOperator enum
// A concrete instance of `RulesEngineOperatorInput` can be one of the following:
//
//	RulesEngineOperatorAny
//	RulesEngineOperatorIPMatch
//	RulesEngineOperatorGeoMatch
//	RulesEngineOperatorEqual
//	RulesEngineOperatorContains
//	RulesEngineOperatorLessThan
//	RulesEngineOperatorGreaterThan
//	RulesEngineOperatorLessThanOrEqual
//	RulesEngineOperatorGreaterThanOrEqual
//	RulesEngineOperatorBeginsWith
//	RulesEngineOperatorEndsWith
type RulesEngineOperatorInput interface {
	pulumi.Input

	ToRulesEngineOperatorOutput() RulesEngineOperatorOutput
	ToRulesEngineOperatorOutputWithContext(context.Context) RulesEngineOperatorOutput
}

var rulesEngineOperatorPtrType = reflect.TypeOf((**RulesEngineOperator)(nil)).Elem()

type RulesEngineOperatorPtrInput interface {
	pulumi.Input

	ToRulesEngineOperatorPtrOutput() RulesEngineOperatorPtrOutput
	ToRulesEngineOperatorPtrOutputWithContext(context.Context) RulesEngineOperatorPtrOutput
}

type rulesEngineOperatorPtr string

func RulesEngineOperatorPtr(v string) RulesEngineOperatorPtrInput {
	return (*rulesEngineOperatorPtr)(&v)
}

func (*rulesEngineOperatorPtr) ElementType() reflect.Type {
	return rulesEngineOperatorPtrType
}

func (in *rulesEngineOperatorPtr) ToRulesEngineOperatorPtrOutput() RulesEngineOperatorPtrOutput {
	return pulumi.ToOutput(in).(RulesEngineOperatorPtrOutput)
}

func (in *rulesEngineOperatorPtr) ToRulesEngineOperatorPtrOutputWithContext(ctx context.Context) RulesEngineOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RulesEngineOperatorPtrOutput)
}

func (in *rulesEngineOperatorPtr) ToOutput(ctx context.Context) pulumix.Output[*RulesEngineOperator] {
	return pulumix.Output[*RulesEngineOperator]{
		OutputState: in.ToRulesEngineOperatorPtrOutputWithContext(ctx).OutputState,
	}
}

// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
type SessionAffinityEnabledState string

const (
	SessionAffinityEnabledStateEnabled  = SessionAffinityEnabledState("Enabled")
	SessionAffinityEnabledStateDisabled = SessionAffinityEnabledState("Disabled")
)

func (SessionAffinityEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionAffinityEnabledState)(nil)).Elem()
}

func (e SessionAffinityEnabledState) ToSessionAffinityEnabledStateOutput() SessionAffinityEnabledStateOutput {
	return pulumi.ToOutput(e).(SessionAffinityEnabledStateOutput)
}

func (e SessionAffinityEnabledState) ToSessionAffinityEnabledStateOutputWithContext(ctx context.Context) SessionAffinityEnabledStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SessionAffinityEnabledStateOutput)
}

func (e SessionAffinityEnabledState) ToSessionAffinityEnabledStatePtrOutput() SessionAffinityEnabledStatePtrOutput {
	return e.ToSessionAffinityEnabledStatePtrOutputWithContext(context.Background())
}

func (e SessionAffinityEnabledState) ToSessionAffinityEnabledStatePtrOutputWithContext(ctx context.Context) SessionAffinityEnabledStatePtrOutput {
	return SessionAffinityEnabledState(e).ToSessionAffinityEnabledStateOutputWithContext(ctx).ToSessionAffinityEnabledStatePtrOutputWithContext(ctx)
}

func (e SessionAffinityEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SessionAffinityEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SessionAffinityEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SessionAffinityEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SessionAffinityEnabledStateOutput struct{ *pulumi.OutputState }

func (SessionAffinityEnabledStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionAffinityEnabledState)(nil)).Elem()
}

func (o SessionAffinityEnabledStateOutput) ToSessionAffinityEnabledStateOutput() SessionAffinityEnabledStateOutput {
	return o
}

func (o SessionAffinityEnabledStateOutput) ToSessionAffinityEnabledStateOutputWithContext(ctx context.Context) SessionAffinityEnabledStateOutput {
	return o
}

func (o SessionAffinityEnabledStateOutput) ToSessionAffinityEnabledStatePtrOutput() SessionAffinityEnabledStatePtrOutput {
	return o.ToSessionAffinityEnabledStatePtrOutputWithContext(context.Background())
}

func (o SessionAffinityEnabledStateOutput) ToSessionAffinityEnabledStatePtrOutputWithContext(ctx context.Context) SessionAffinityEnabledStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SessionAffinityEnabledState) *SessionAffinityEnabledState {
		return &v
	}).(SessionAffinityEnabledStatePtrOutput)
}

func (o SessionAffinityEnabledStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SessionAffinityEnabledStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SessionAffinityEnabledState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SessionAffinityEnabledStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SessionAffinityEnabledStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SessionAffinityEnabledState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SessionAffinityEnabledStatePtrOutput struct{ *pulumi.OutputState }

func (SessionAffinityEnabledStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionAffinityEnabledState)(nil)).Elem()
}

func (o SessionAffinityEnabledStatePtrOutput) ToSessionAffinityEnabledStatePtrOutput() SessionAffinityEnabledStatePtrOutput {
	return o
}

func (o SessionAffinityEnabledStatePtrOutput) ToSessionAffinityEnabledStatePtrOutputWithContext(ctx context.Context) SessionAffinityEnabledStatePtrOutput {
	return o
}

func (o SessionAffinityEnabledStatePtrOutput) Elem() SessionAffinityEnabledStateOutput {
	return o.ApplyT(func(v *SessionAffinityEnabledState) SessionAffinityEnabledState {
		if v != nil {
			return *v
		}
		var ret SessionAffinityEnabledState
		return ret
	}).(SessionAffinityEnabledStateOutput)
}

func (o SessionAffinityEnabledStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SessionAffinityEnabledStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SessionAffinityEnabledState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SessionAffinityEnabledStateInput is an input type that accepts values of the SessionAffinityEnabledState enum
// A concrete instance of `SessionAffinityEnabledStateInput` can be one of the following:
//
//	SessionAffinityEnabledStateEnabled
//	SessionAffinityEnabledStateDisabled
type SessionAffinityEnabledStateInput interface {
	pulumi.Input

	ToSessionAffinityEnabledStateOutput() SessionAffinityEnabledStateOutput
	ToSessionAffinityEnabledStateOutputWithContext(context.Context) SessionAffinityEnabledStateOutput
}

var sessionAffinityEnabledStatePtrType = reflect.TypeOf((**SessionAffinityEnabledState)(nil)).Elem()

type SessionAffinityEnabledStatePtrInput interface {
	pulumi.Input

	ToSessionAffinityEnabledStatePtrOutput() SessionAffinityEnabledStatePtrOutput
	ToSessionAffinityEnabledStatePtrOutputWithContext(context.Context) SessionAffinityEnabledStatePtrOutput
}

type sessionAffinityEnabledStatePtr string

func SessionAffinityEnabledStatePtr(v string) SessionAffinityEnabledStatePtrInput {
	return (*sessionAffinityEnabledStatePtr)(&v)
}

func (*sessionAffinityEnabledStatePtr) ElementType() reflect.Type {
	return sessionAffinityEnabledStatePtrType
}

func (in *sessionAffinityEnabledStatePtr) ToSessionAffinityEnabledStatePtrOutput() SessionAffinityEnabledStatePtrOutput {
	return pulumi.ToOutput(in).(SessionAffinityEnabledStatePtrOutput)
}

func (in *sessionAffinityEnabledStatePtr) ToSessionAffinityEnabledStatePtrOutputWithContext(ctx context.Context) SessionAffinityEnabledStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SessionAffinityEnabledStatePtrOutput)
}

func (in *sessionAffinityEnabledStatePtr) ToOutput(ctx context.Context) pulumix.Output[*SessionAffinityEnabledState] {
	return pulumix.Output[*SessionAffinityEnabledState]{
		OutputState: in.ToSessionAffinityEnabledStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Name of the pricing tier.
type SkuName string

const (
	SkuName_Classic_AzureFrontDoor  = SkuName("Classic_AzureFrontDoor")
	SkuName_Standard_AzureFrontDoor = SkuName("Standard_AzureFrontDoor")
	SkuName_Premium_AzureFrontDoor  = SkuName("Premium_AzureFrontDoor")
)

func (SkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (e SkuName) ToSkuNameOutput() SkuNameOutput {
	return pulumi.ToOutput(e).(SkuNameOutput)
}

func (e SkuName) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SkuNameOutput)
}

func (e SkuName) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return e.ToSkuNamePtrOutputWithContext(context.Background())
}

func (e SkuName) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return SkuName(e).ToSkuNameOutputWithContext(ctx).ToSkuNamePtrOutputWithContext(ctx)
}

func (e SkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SkuNameOutput struct{ *pulumi.OutputState }

func (SkuNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (o SkuNameOutput) ToSkuNameOutput() SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o.ToSkuNamePtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuName) *SkuName {
		return &v
	}).(SkuNamePtrOutput)
}

func (o SkuNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SkuNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SkuNamePtrOutput struct{ *pulumi.OutputState }

func (SkuNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuName)(nil)).Elem()
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) Elem() SkuNameOutput {
	return o.ApplyT(func(v *SkuName) SkuName {
		if v != nil {
			return *v
		}
		var ret SkuName
		return ret
	}).(SkuNameOutput)
}

func (o SkuNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SkuName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SkuNameInput is an input type that accepts values of the SkuName enum
// A concrete instance of `SkuNameInput` can be one of the following:
//
//	SkuName_Classic_AzureFrontDoor
//	SkuName_Standard_AzureFrontDoor
//	SkuName_Premium_AzureFrontDoor
type SkuNameInput interface {
	pulumi.Input

	ToSkuNameOutput() SkuNameOutput
	ToSkuNameOutputWithContext(context.Context) SkuNameOutput
}

var skuNamePtrType = reflect.TypeOf((**SkuName)(nil)).Elem()

type SkuNamePtrInput interface {
	pulumi.Input

	ToSkuNamePtrOutput() SkuNamePtrOutput
	ToSkuNamePtrOutputWithContext(context.Context) SkuNamePtrOutput
}

type skuNamePtr string

func SkuNamePtr(v string) SkuNamePtrInput {
	return (*skuNamePtr)(&v)
}

func (*skuNamePtr) ElementType() reflect.Type {
	return skuNamePtrType
}

func (in *skuNamePtr) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return pulumi.ToOutput(in).(SkuNamePtrOutput)
}

func (in *skuNamePtr) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SkuNamePtrOutput)
}

func (in *skuNamePtr) ToOutput(ctx context.Context) pulumix.Output[*SkuName] {
	return pulumix.Output[*SkuName]{
		OutputState: in.ToSkuNamePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes what transforms are applied before matching
type Transform string

const (
	TransformLowercase   = Transform("Lowercase")
	TransformUppercase   = Transform("Uppercase")
	TransformTrim        = Transform("Trim")
	TransformUrlDecode   = Transform("UrlDecode")
	TransformUrlEncode   = Transform("UrlEncode")
	TransformRemoveNulls = Transform("RemoveNulls")
)

func (Transform) ElementType() reflect.Type {
	return reflect.TypeOf((*Transform)(nil)).Elem()
}

func (e Transform) ToTransformOutput() TransformOutput {
	return pulumi.ToOutput(e).(TransformOutput)
}

func (e Transform) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformOutput)
}

func (e Transform) ToTransformPtrOutput() TransformPtrOutput {
	return e.ToTransformPtrOutputWithContext(context.Background())
}

func (e Transform) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return Transform(e).ToTransformOutputWithContext(ctx).ToTransformPtrOutputWithContext(ctx)
}

func (e Transform) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Transform) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Transform) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Transform) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformOutput struct{ *pulumi.OutputState }

func (TransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transform)(nil)).Elem()
}

func (o TransformOutput) ToTransformOutput() TransformOutput {
	return o
}

func (o TransformOutput) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return o
}

func (o TransformOutput) ToTransformPtrOutput() TransformPtrOutput {
	return o.ToTransformPtrOutputWithContext(context.Background())
}

func (o TransformOutput) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Transform) *Transform {
		return &v
	}).(TransformPtrOutput)
}

func (o TransformOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Transform) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Transform) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformPtrOutput struct{ *pulumi.OutputState }

func (TransformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transform)(nil)).Elem()
}

func (o TransformPtrOutput) ToTransformPtrOutput() TransformPtrOutput {
	return o
}

func (o TransformPtrOutput) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return o
}

func (o TransformPtrOutput) Elem() TransformOutput {
	return o.ApplyT(func(v *Transform) Transform {
		if v != nil {
			return *v
		}
		var ret Transform
		return ret
	}).(TransformOutput)
}

func (o TransformPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Transform) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformInput is an input type that accepts values of the Transform enum
// A concrete instance of `TransformInput` can be one of the following:
//
//	TransformLowercase
//	TransformUppercase
//	TransformTrim
//	TransformUrlDecode
//	TransformUrlEncode
//	TransformRemoveNulls
type TransformInput interface {
	pulumi.Input

	ToTransformOutput() TransformOutput
	ToTransformOutputWithContext(context.Context) TransformOutput
}

var transformPtrType = reflect.TypeOf((**Transform)(nil)).Elem()

type TransformPtrInput interface {
	pulumi.Input

	ToTransformPtrOutput() TransformPtrOutput
	ToTransformPtrOutputWithContext(context.Context) TransformPtrOutput
}

type transformPtr string

func TransformPtr(v string) TransformPtrInput {
	return (*transformPtr)(&v)
}

func (*transformPtr) ElementType() reflect.Type {
	return transformPtrType
}

func (in *transformPtr) ToTransformPtrOutput() TransformPtrOutput {
	return pulumi.ToOutput(in).(TransformPtrOutput)
}

func (in *transformPtr) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformPtrOutput)
}

func (in *transformPtr) ToOutput(ctx context.Context) pulumix.Output[*Transform] {
	return pulumix.Output[*Transform]{
		OutputState: in.ToTransformPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes what transforms applied before matching.
type TransformType string

const (
	TransformTypeLowercase   = TransformType("Lowercase")
	TransformTypeUppercase   = TransformType("Uppercase")
	TransformTypeTrim        = TransformType("Trim")
	TransformTypeUrlDecode   = TransformType("UrlDecode")
	TransformTypeUrlEncode   = TransformType("UrlEncode")
	TransformTypeRemoveNulls = TransformType("RemoveNulls")
)

func (TransformType) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformType)(nil)).Elem()
}

func (e TransformType) ToTransformTypeOutput() TransformTypeOutput {
	return pulumi.ToOutput(e).(TransformTypeOutput)
}

func (e TransformType) ToTransformTypeOutputWithContext(ctx context.Context) TransformTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformTypeOutput)
}

func (e TransformType) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return e.ToTransformTypePtrOutputWithContext(context.Background())
}

func (e TransformType) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return TransformType(e).ToTransformTypeOutputWithContext(ctx).ToTransformTypePtrOutputWithContext(ctx)
}

func (e TransformType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformTypeOutput struct{ *pulumi.OutputState }

func (TransformTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformType)(nil)).Elem()
}

func (o TransformTypeOutput) ToTransformTypeOutput() TransformTypeOutput {
	return o
}

func (o TransformTypeOutput) ToTransformTypeOutputWithContext(ctx context.Context) TransformTypeOutput {
	return o
}

func (o TransformTypeOutput) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return o.ToTransformTypePtrOutputWithContext(context.Background())
}

func (o TransformTypeOutput) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformType) *TransformType {
		return &v
	}).(TransformTypePtrOutput)
}

func (o TransformTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformTypePtrOutput struct{ *pulumi.OutputState }

func (TransformTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformType)(nil)).Elem()
}

func (o TransformTypePtrOutput) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return o
}

func (o TransformTypePtrOutput) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return o
}

func (o TransformTypePtrOutput) Elem() TransformTypeOutput {
	return o.ApplyT(func(v *TransformType) TransformType {
		if v != nil {
			return *v
		}
		var ret TransformType
		return ret
	}).(TransformTypeOutput)
}

func (o TransformTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransformType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformTypeInput is an input type that accepts values of the TransformType enum
// A concrete instance of `TransformTypeInput` can be one of the following:
//
//	TransformTypeLowercase
//	TransformTypeUppercase
//	TransformTypeTrim
//	TransformTypeUrlDecode
//	TransformTypeUrlEncode
//	TransformTypeRemoveNulls
type TransformTypeInput interface {
	pulumi.Input

	ToTransformTypeOutput() TransformTypeOutput
	ToTransformTypeOutputWithContext(context.Context) TransformTypeOutput
}

var transformTypePtrType = reflect.TypeOf((**TransformType)(nil)).Elem()

type TransformTypePtrInput interface {
	pulumi.Input

	ToTransformTypePtrOutput() TransformTypePtrOutput
	ToTransformTypePtrOutputWithContext(context.Context) TransformTypePtrOutput
}

type transformTypePtr string

func TransformTypePtr(v string) TransformTypePtrInput {
	return (*transformTypePtr)(&v)
}

func (*transformTypePtr) ElementType() reflect.Type {
	return transformTypePtrType
}

func (in *transformTypePtr) ToTransformTypePtrOutput() TransformTypePtrOutput {
	return pulumi.ToOutput(in).(TransformTypePtrOutput)
}

func (in *transformTypePtr) ToTransformTypePtrOutputWithContext(ctx context.Context) TransformTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformTypePtrOutput)
}

func (in *transformTypePtr) ToOutput(ctx context.Context) pulumix.Output[*TransformType] {
	return pulumix.Output[*TransformType]{
		OutputState: in.ToTransformTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(ActionTypeOutput{})
	pulumi.RegisterOutputType(ActionTypePtrOutput{})
	pulumi.RegisterOutputType(BackendEnabledStateOutput{})
	pulumi.RegisterOutputType(BackendEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(CustomRuleEnabledStateOutput{})
	pulumi.RegisterOutputType(CustomRuleEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(DynamicCompressionEnabledOutput{})
	pulumi.RegisterOutputType(DynamicCompressionEnabledPtrOutput{})
	pulumi.RegisterOutputType(EnforceCertificateNameCheckEnabledStateOutput{})
	pulumi.RegisterOutputType(EnforceCertificateNameCheckEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(FrontDoorEnabledStateOutput{})
	pulumi.RegisterOutputType(FrontDoorEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(FrontDoorForwardingProtocolOutput{})
	pulumi.RegisterOutputType(FrontDoorForwardingProtocolPtrOutput{})
	pulumi.RegisterOutputType(FrontDoorHealthProbeMethodOutput{})
	pulumi.RegisterOutputType(FrontDoorHealthProbeMethodPtrOutput{})
	pulumi.RegisterOutputType(FrontDoorMatchVariableOutput{})
	pulumi.RegisterOutputType(FrontDoorMatchVariablePtrOutput{})
	pulumi.RegisterOutputType(FrontDoorProtocolOutput{})
	pulumi.RegisterOutputType(FrontDoorProtocolPtrOutput{})
	pulumi.RegisterOutputType(FrontDoorQueryOutput{})
	pulumi.RegisterOutputType(FrontDoorQueryPtrOutput{})
	pulumi.RegisterOutputType(FrontDoorRedirectProtocolOutput{})
	pulumi.RegisterOutputType(FrontDoorRedirectProtocolPtrOutput{})
	pulumi.RegisterOutputType(FrontDoorRedirectTypeOutput{})
	pulumi.RegisterOutputType(FrontDoorRedirectTypePtrOutput{})
	pulumi.RegisterOutputType(HeaderActionTypeOutput{})
	pulumi.RegisterOutputType(HeaderActionTypePtrOutput{})
	pulumi.RegisterOutputType(HealthProbeEnabledOutput{})
	pulumi.RegisterOutputType(HealthProbeEnabledPtrOutput{})
	pulumi.RegisterOutputType(ManagedRuleEnabledStateOutput{})
	pulumi.RegisterOutputType(ManagedRuleEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(ManagedRuleExclusionMatchVariableOutput{})
	pulumi.RegisterOutputType(ManagedRuleExclusionMatchVariablePtrOutput{})
	pulumi.RegisterOutputType(ManagedRuleExclusionSelectorMatchOperatorOutput{})
	pulumi.RegisterOutputType(ManagedRuleExclusionSelectorMatchOperatorPtrOutput{})
	pulumi.RegisterOutputType(ManagedRuleSetActionTypeOutput{})
	pulumi.RegisterOutputType(ManagedRuleSetActionTypePtrOutput{})
	pulumi.RegisterOutputType(MatchProcessingBehaviorOutput{})
	pulumi.RegisterOutputType(MatchProcessingBehaviorPtrOutput{})
	pulumi.RegisterOutputType(OperatorOutput{})
	pulumi.RegisterOutputType(OperatorPtrOutput{})
	pulumi.RegisterOutputType(PolicyEnabledStateOutput{})
	pulumi.RegisterOutputType(PolicyEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(PolicyModeOutput{})
	pulumi.RegisterOutputType(PolicyModePtrOutput{})
	pulumi.RegisterOutputType(PolicyRequestBodyCheckOutput{})
	pulumi.RegisterOutputType(PolicyRequestBodyCheckPtrOutput{})
	pulumi.RegisterOutputType(RoutingRuleEnabledStateOutput{})
	pulumi.RegisterOutputType(RoutingRuleEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(RuleTypeOutput{})
	pulumi.RegisterOutputType(RuleTypePtrOutput{})
	pulumi.RegisterOutputType(RulesEngineMatchVariableOutput{})
	pulumi.RegisterOutputType(RulesEngineMatchVariablePtrOutput{})
	pulumi.RegisterOutputType(RulesEngineOperatorOutput{})
	pulumi.RegisterOutputType(RulesEngineOperatorPtrOutput{})
	pulumi.RegisterOutputType(SessionAffinityEnabledStateOutput{})
	pulumi.RegisterOutputType(SessionAffinityEnabledStatePtrOutput{})
	pulumi.RegisterOutputType(SkuNameOutput{})
	pulumi.RegisterOutputType(SkuNamePtrOutput{})
	pulumi.RegisterOutputType(TransformOutput{})
	pulumi.RegisterOutputType(TransformPtrOutput{})
	pulumi.RegisterOutputType(TransformTypeOutput{})
	pulumi.RegisterOutputType(TransformTypePtrOutput{})
}
